var tipuesearch = {"pages":[{"title":" Town Energy Balance (TEB) model API docs ","text":"Town Energy Balance (TEB) model API docs This is home to the API documentation for the Town Energy Balance (TEB) model, for the project's website, please go to https://github.com/teb-model/teb . Developer Info teb-model","tags":"home","loc":"index.html"},{"title":"garden.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines GARDEN Source Code garden.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE GARDEN ( DTCO , G , T , TOP , TIR , DTV , GB , DK , DEK , DMK , GDO , S , K , P , PEK , & HIMPLICIT_WIND , TPTIME , PTSUN , PPEW_A_COEF , PPEW_B_COEF , & PPET_A_COEF , PPEQ_A_COEF , PPET_B_COEF , PPEQ_B_COEF , & PTSTEP , PZREF , PALB_GD , PTA , PQA , PEXNS , PRHOA , PCO2 , PPS , PRR , & PSR , PZENITH , PSW , PLW , PVMOD , PALBNIR_TVEG , & PALBVIS_TVEG , PALBNIR_TSOIL , PALBVIS_TSOIL , & PRN , PH , PLE , PGFLUX , PSFCO2 , PEVAP , PUW , PRUNOFF , & PAC , PQSAT , PTSRAD , PAC_AGG , PHU_AGG , PIRRIG ) !   ########################################################################## ! !!****  *GARDEN* !! !!    PURPOSE !!    ------- ! !!call the vegetation scheme (ISBA) inside TEB ! !!**  METHOD !     ------ ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      A. Lemonsu          * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!    Original    05/2009 !     B. decharme 04/2013 : variables for surf/atm coupling !                           dummy for water table / surface coupling !!    P. Samuelsson  10/2014  Introduced dummy variables in call to ISBA for MEB !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_DATA_COVER_n , ONLY : DATA_COVER_t USE MODD_DATA_ISBA_n , ONLY : DATA_ISBA_t USE MODD_SFX_GRID_n , ONLY : GRID_t USE MODD_SSO_n , ONLY : SSO_t , SSO_INIT USE MODD_TEB_n , ONLY : TEB_t USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t ! USE MODD_DATA_ISBA_n , ONLY : DATA_ISBA_t USE MODD_GR_BIOG_n , ONLY : GR_BIOG_t ! USE MODD_DIAG_n , ONLY : DIAG_t USE MODD_DIAG_EVAP_ISBA_n , ONLY : DIAG_EVAP_ISBA_t USE MODD_DIAG_MISC_ISBA_n , ONLY : DIAG_MISC_ISBA_t ! USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t ! USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t USE MODD_ISBA_n , ONLY : ISBA_S_t , ISBA_K_t , ISBA_P_t , ISBA_PE_t ! USE MODD_AGRI_n , ONLY : AGRI_t , AGRI_INIT ! USE MODD_TYPE_DATE_SURF , ONLY : DATE_TIME USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS , ONLY : XCPD , XLVTT , XKARMAN ! ! USE MODI_ISBA USE MODI_VEGETATION_UPDATE USE MODE_THERMOS ! USE MODI_FLAG_TEB_VEG_n USE MODI_CARBON_EVOL USE MODI_VEGETATION_EVOL USE MODI_TEB_IRRIG USE PROXI_SVAT_CONSTS , ONLY : GARDEN_BR ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! ! ! TYPE ( DATA_COVER_t ), INTENT ( INOUT ) :: DTCO TYPE ( GRID_t ), INTENT ( INOUT ) :: G TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP ! TYPE ( DATA_ISBA_t ), INTENT ( INOUT ) :: DTV TYPE ( GR_BIOG_t ), INTENT ( INOUT ) :: GB ! TYPE ( DIAG_t ), INTENT ( INOUT ) :: DK TYPE ( DIAG_EVAP_ISBA_t ), INTENT ( INOUT ) :: DEK TYPE ( DIAG_MISC_ISBA_t ), INTENT ( INOUT ) :: DMK ! TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: GDO TYPE ( ISBA_S_t ), INTENT ( INOUT ) :: S TYPE ( ISBA_K_t ), INTENT ( INOUT ) :: K TYPE ( ISBA_P_t ), INTENT ( INOUT ) :: P TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK ! TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR ! CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option !                                                     ! 'OLD' = direct !                                                     ! 'NEW' = Taylor serie, order 1 TYPE ( DATE_TIME ) , INTENT ( IN ) :: TPTIME ! current date and time from teb REAL , DIMENSION (:) , INTENT ( IN ) :: PTSUN ! solar time      (s from midnight) REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEQ_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEQ_B_COEF ! for humidity REAL , DIMENSION (:) , INTENT ( IN ) :: PPET_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPET_B_COEF ! for temperature REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:) , INTENT ( IN ) :: PZREF ! height of atm. var. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PALB_GD ! green areas albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PTA ! temp. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PQA ! hum. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:) , INTENT ( IN ) :: PRHOA ! air density at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PCO2 ! CO2 concentration in the air    (kg/m3) REAL , DIMENSION (:) , INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:) , INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:) , INTENT ( IN ) :: PZENITH ! solar zenithal angle REAL , DIMENSION (:) , INTENT ( IN ) :: PSW ! incoming total solar rad on an horizontal surface REAL , DIMENSION (:) , INTENT ( IN ) :: PLW ! atmospheric infrared radiation REAL , DIMENSION (:) , INTENT ( IN ) :: PVMOD ! wind near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PALBNIR_TVEG ! nearIR  veg tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBVIS_TVEG ! visible veg tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBNIR_TSOIL ! nearIR  soil tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBVIS_TSOIL ! visible soil tot albedo ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN ! net radiation over green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PH ! sensible heat flux over green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE ! latent heat flux over green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX ! flux through the green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PSFCO2 ! flux of CO2 positive toward the atmosphere (m/s*kg_CO2/kg_air) REAL , DIMENSION (:) , INTENT ( OUT ) :: PEVAP ! total evaporation over gardens (kg/m2/s) REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW ! friction flux (m2/s2) REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF ! runoff over garden (kg/m2/s) REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC ! aerodynamical conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PQSAT ! saturation humidity REAL , DIMENSION (:) , INTENT ( OUT ) :: PTSRAD ! garden radiative surface temp. (snow free) REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_AGG ! aggreg. aeodynamic resistance for green areas for latent heat flux REAL , DIMENSION (:) , INTENT ( OUT ) :: PHU_AGG ! aggreg. relative humidity for green areas for latent heat flux REAL , DIMENSION (:) , INTENT ( OUT ) :: PIRRIG ! garden summer irrigation rate ! ! !*      0.2    Declarations of local variables ! ! !------------------------------------------------------------------------------- ! !*      1.     Proxi model based on a fixed Bowen ratio !              ---------------------------------------- ! PRN (:) = ( 1. - PALB_GD ) * PSW (:) ! PH (:) = GARDEN_BR * PRN (:) PLE (:) = ( 1 - GARDEN_BR ) * PRN (:) ! !* Conduction heat flux is neglected PGFLUX (:) = 0. ! !* CO2 flux is neglected PSFCO2 (:) = 0. ! !* evaporation PEVAP (:) = PLE (:) / XLVTT ! !* Friction flux: assumes neutral formulation with roughness length of 0.1m PUW (:) = - ( XKARMAN / LOG ( PZREF (:) / 0.1 )) ** 2 * PVMOD (:) ** 2 ! !* Aerodynamical conductance: neglected because used further only for !  implicitation of canyon air temperature when the heat flux depends on the !  surface temperature ! PAC (:) = 0. ! !* surface saturation humidity PQSAT (:) = QSAT ( PTA (:), PPS (:)) ! !* Surface temperature : set equal to air temperature PTSRAD (:) = PTA (:) ! !* aerocynamical conductance for latent heat and surface humidity PAC_AGG (:) = 0. ! neglected (latent flux does not depend on surface humidity) PHU_AGG (:) = 0.8 ! surface humidity set to 80% ! !* garden hydrological diagnostics PRUNOFF (:) = 0. ! garden surface runoff PIRRIG (:) = 0. ! garden irrigation during time step !------------------------------------------------------------------------------- ! ! END SUBROUTINE GARDEN","tags":"","loc":"sourcefile/garden.f90.html"},{"title":"teb_veg_properties.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines TEB_VEG_PROPERTIES Source Code teb_veg_properties.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE TEB_VEG_PROPERTIES ( PMASK , IO , PEK , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & PTS , PEMIS , PALB , PTA , PALBNIR_TVEG , PALBVIS_TVEG ,& PALBNIR_TSOIL , PALBVIS_TSOIL ) !     ########################################################################## ! !!****  *GARDEN_PROPERTIES* !! !!    PURPOSE !!    ------- ! !     Calculates grid-averaged albedo and emissivity (according to snow scheme) ! !!    EXTERNAL !!    -------- !! !!    none !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    AUTHOR !!    ------ !! !!      S. Belair           * Meteo-France * !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t USE MODD_ISBA_n , ONLY : ISBA_PE_t ! USE MODD_SURF_PAR , ONLY : XUNDEF ! USE MODI_ISBA_PROPERTIES USE MODI_FLAG_TEB_VEG_n USE PROXI_SVAT_CONSTS , ONLY : VEG_ALB , VEG_EMIS ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PMASK ! TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: IO TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PDIR_SW ! direct incoming solar radiation REAL , DIMENSION (:,:), INTENT ( IN ) :: PSCA_SW ! diffus incoming solar radiation REAL , DIMENSION (:) , INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) INTEGER , INTENT ( IN ) :: KSW ! number of short-wave spectral bands ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PTS ! radiative surface temperature REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIS ! green areas emissivity REAL , DIMENSION (:) , INTENT ( OUT ) :: PALB ! green areas albedo ! REAL , DIMENSION (:) , INTENT ( IN ), OPTIONAL :: PTA ! Air temperature (K) ! REAL , DIMENSION (:) , INTENT ( OUT ), OPTIONAL :: PALBNIR_TVEG ! nearIR  veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ), OPTIONAL :: PALBVIS_TVEG ! visible veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ), OPTIONAL :: PALBNIR_TSOIL ! nearIR  soil tot albedo REAL , DIMENSION (:) , INTENT ( OUT ), OPTIONAL :: PALBVIS_TSOIL ! visible soil tot albedo !------------------------------------------------------------------------------- ! !*      0.2    Local variables !              --------------- ! !------------------------------------------------------------------------------- ! !* albedo PALB = VEG_ALB !* emissivity PEMIS = VEG_EMIS !* surface temperature set to air temperature PTS = PTA ! !------------------------------------------------------------------------------- ! END SUBROUTINE TEB_VEG_PROPERTIES","tags":"","loc":"sourcefile/teb_veg_properties.f90.html"},{"title":"proxi_svat_consts.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules PROXI_SVAT_CONSTS Source Code proxi_svat_consts.F90 Source Code MODULE PROXI_SVAT_CONSTS IMPLICIT NONE REAL :: VEG_ALB = 0.25 ! Default for grass REAL :: VEG_EMIS = 0.98 ! Default for grass REAL :: GARDEN_BR = 0.25 REAL :: GREENROOF_BR = 0.5 END MODULE","tags":"","loc":"sourcefile/proxi_svat_consts.f90.html"},{"title":"greenroof.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines GREENROOF Source Code greenroof.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE GREENROOF ( DTCO , G , T , TOP , TIR , DTV , GB , DK , DEK , DMK , GRO , S , K , P , PEK , & HIMPLICIT_WIND , TPTIME , PTSUN , PPEW_A_COEF , PPEW_B_COEF , & PPET_A_COEF , PPEQ_A_COEF , PPET_B_COEF , PPEQ_B_COEF , & PTSTEP , PZREF , PUREF , PALB_GD , PTA , PQA , PEXNS , PEXNA , PRHOA , & PCO2 , PPS , PRR , PSR , PZENITH , PSW , PLW , PVMOD , & PALBNIR_TVEG , PALBVIS_TVEG , PALBNIR_TSOIL , PALBVIS_TSOIL , & PRN , PH , PLE , PGFLUX , PSFCO2 , PEVAP , PUW , PRUNOFF , PDRAIN ,& PAC , PQSAT , PTSRAD , PAC_AGG , PHU_AGG , PDEEP_FLUX , PIRRIG ) !   ################################################################################## ! !!****  *GREENROOF* !! !!    PURPOSE !!    ------- !! !!    call the vegetation scheme (ISBA) inside TEB for greenroofs !! !!**  METHOD !!     ------ !!    based on subroutine \"garden\" !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !!    Based on subroutine \"garden\" !! !!    AUTHOR !!    ------ !! !!      C. de Munck & A. Lemonsu          * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !     Original    09/2011 !     C. de Munck   02/2013  irrigation (drip irrigation) !     B. decharme 04/2013 : Variables required in TEB to allow coupling with AROME/ALADIN/ARPEGE !                           phasing call isba !                           calculation of vegetation CO2 flux !                           dummy for water table / surface coupling !!    P. Samuelsson  10/2014  Introduced dummy variables in call to ISBA for MEB !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_DATA_COVER_n , ONLY : DATA_COVER_t USE MODD_DATA_ISBA_n , ONLY : DATA_ISBA_t USE MODD_SFX_GRID_n , ONLY : GRID_t USE MODD_SSO_n , ONLY : SSO_t , SSO_INIT USE MODD_TEB_n , ONLY : TEB_t USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t ! USE MODD_DATA_ISBA_n , ONLY : DATA_ISBA_t USE MODD_GR_BIOG_n , ONLY : GR_BIOG_t ! USE MODD_DIAG_n , ONLY : DIAG_t USE MODD_DIAG_EVAP_ISBA_n , ONLY : DIAG_EVAP_ISBA_t USE MODD_DIAG_MISC_ISBA_n , ONLY : DIAG_MISC_ISBA_t ! USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t USE MODD_ISBA_n , ONLY : ISBA_S_t , ISBA_K_t , ISBA_P_t , ISBA_PE_t ! USE MODD_AGRI_n , ONLY : AGRI_t , AGRI_INIT ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_TYPE_DATE_SURF , ONLY : DATE_TIME USE MODD_CSTS , ONLY : XCPD , XLVTT , XKARMAN ! USE MODI_ISBA USE MODI_VEGETATION_UPDATE USE MODI_VEGETATION_EVOL USE MODI_CARBON_EVOL USE MODE_THERMOS USE MODI_ROOF_IMPL_COEF USE MODI_TEB_IRRIG USE MODI_FLAG_TEB_VEG_n USE PROXI_SVAT_CONSTS , ONLY : GREENROOF_BR ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! ! ! TYPE ( DATA_COVER_t ), INTENT ( INOUT ) :: DTCO TYPE ( GRID_t ), INTENT ( INOUT ) :: G TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR ! TYPE ( DATA_ISBA_t ), INTENT ( INOUT ) :: DTV TYPE ( GR_BIOG_t ), INTENT ( INOUT ) :: GB ! TYPE ( DIAG_t ), INTENT ( INOUT ) :: DK TYPE ( DIAG_EVAP_ISBA_t ), INTENT ( INOUT ) :: DEK TYPE ( DIAG_MISC_ISBA_t ), INTENT ( INOUT ) :: DMK ! TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: GRO TYPE ( ISBA_S_t ), INTENT ( INOUT ) :: S TYPE ( ISBA_K_t ), INTENT ( INOUT ) :: K TYPE ( ISBA_P_t ), INTENT ( INOUT ) :: P TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK ! CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option !                                                     ! 'OLD' = direct !                                                     ! 'NEW' = Taylor serie, order 1 TYPE ( DATE_TIME ) , INTENT ( IN ) :: TPTIME ! current date and time from teb REAL , DIMENSION (:) , INTENT ( IN ) :: PTSUN ! solar time      (s from midnight) REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEQ_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEQ_B_COEF ! for humidity REAL , DIMENSION (:) , INTENT ( IN ) :: PPET_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPET_B_COEF ! for temperature REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:) , INTENT ( IN ) :: PZREF ! height of the first atmospheric level REAL , DIMENSION (:) , INTENT ( IN ) :: PUREF ! reference height for the wind REAL , DIMENSION (:) , INTENT ( IN ) :: PALB_GD ! green areas albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PTA ! temperature at first atm. level REAL , DIMENSION (:) , INTENT ( IN ) :: PQA ! specific humidity at first atm. level REAL , DIMENSION (:) , INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNA ! Exner function at first atm. level REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNS ! surface Exner function REAL , DIMENSION (:) , INTENT ( IN ) :: PRHOA ! air density at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PCO2 ! CO2 concentration in the air    (kg/m3) REAL , DIMENSION (:) , INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:) , INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:) , INTENT ( IN ) :: PZENITH ! solar zenithal angle REAL , DIMENSION (:) , INTENT ( IN ) :: PSW ! incoming total solar rad on an horizontal surface REAL , DIMENSION (:) , INTENT ( IN ) :: PLW ! atmospheric infrared radiation REAL , DIMENSION (:) , INTENT ( IN ) :: PVMOD ! module of horizontal wind near first atm. level REAL , DIMENSION (:) , INTENT ( IN ) :: PALBNIR_TVEG ! nearIR  veg tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBVIS_TVEG ! visible veg tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBNIR_TSOIL ! nearIR  soil tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBVIS_TSOIL ! visible soil tot albedo ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN ! net radiation over greenroofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PH ! sensible heat flux over greenroofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE ! latent heat flux over greenroofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX ! flux through the greenroofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PSFCO2 ! flux of greenroof CO2       (m/s*kg_CO2/kg_air) REAL , DIMENSION (:) , INTENT ( OUT ) :: PEVAP ! total evaporation over greenroofs (kg/m2/s) REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW ! friction flux (m2/s2) REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF ! greenroof surface runoff REAL , DIMENSION (:) , INTENT ( OUT ) :: PDRAIN ! greenroof surface drainage REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC ! greenroof aerodynamical conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PQSAT ! saturation humidity REAL , DIMENSION (:) , INTENT ( OUT ) :: PTSRAD ! greenroof radiative surface temp. (snow free) REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_AGG ! aggreg. aeodynamic resistance for greenroofs for latent heat flux REAL , DIMENSION (:) , INTENT ( OUT ) :: PHU_AGG ! aggreg. relative humidity for greenroofs for latent heat flux REAL , DIMENSION (:) , INTENT ( OUT ) :: PDEEP_FLUX ! Heat Flux at the bottom layer of the greenroof REAL , DIMENSION (:) , INTENT ( OUT ) :: PIRRIG ! greenroof summer irrigation rate ! ! !*      0.2    Declarations of local variables ! ! !------------------------------------------------------------------------------- ! !*      1.     Proxi model based on a fixed Bowen ratio !              ---------------------------------------- ! ! PRN (:) = ( 1. - PALB_GD ) * PSW (:) ! PH (:) = GREENROOF_BR * PRN (:) PLE (:) = ( 1 - GREENROOF_BR ) * PRN (:) ! !* Conduction heat flux is neglected PGFLUX (:) = 0. ! !* CO2 flux is neglected PSFCO2 (:) = 0. ! !* evaporation PEVAP (:) = PLE (:) / XLVTT ! !* Friction flux: assumes neutral formulation with roughness length of 0.01m PUW (:) = - ( XKARMAN / LOG ( PUREF (:) / 0.01 )) ** 2 * PVMOD (:) ** 2 ! !* Aerodynamical conductance: neglected because used further only for !  implicitation of canyon air temperature when the heat flux depends on the !  surface temperature ! PAC (:) = 0. ! !* surface saturation humidity PQSAT (:) = QSAT ( PTA (:), PPS (:)) ! !* Surface temperature : set equal to air temperature PTSRAD (:) = PTA (:) ! !* aerocynamical conductance for latent heat and surface humidity PAC_AGG (:) = 0. ! neglected (latent flux does not depend on surface humidity) PHU_AGG (:) = 0.3 ! surface humidity set to 30% ! !* Heat Flux at the bottom layer of the greenroof PDEEP_FLUX (:) = 0. ! !* greenroof hydrological diagnostics PRUNOFF (:) = 0. ! greenroof surface runoff PDRAIN (:) = 0. ! greenroof total (vertical) drainage PIRRIG (:) = 0. ! greenroof irrigation during time step !------------------------------------------------------------------------------- ! ! END SUBROUTINE GREENROOF","tags":"","loc":"sourcefile/greenroof.f90.html"},{"title":"modi_greenroof.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_GREENROOF Source Code modi_greenroof.F90 Source Code !auto_modi:spll_greenroof.D MODULE MODI_GREENROOF INTERFACE SUBROUTINE GREENROOF ( DTCO , G , T , TOP , TIR , DTV , GB , DK , DEK , DMK , GRO , S , K , P , PEK , & HIMPLICIT_WIND , TPTIME , PTSUN , PPEW_A_COEF , PPEW_B_COEF , & PPET_A_COEF , PPEQ_A_COEF , PPET_B_COEF , PPEQ_B_COEF , & PTSTEP , PZREF , PUREF , PALB_GD , PTA , PQA , PEXNS , PEXNA , PRHOA , & PCO2 , PPS , PRR , PSR , PZENITH , PSW , PLW , PVMOD , & PALBNIR_TVEG , PALBVIS_TVEG , PALBNIR_TSOIL , PALBVIS_TSOIL , & PRN , PH , PLE , PGFLUX , PSFCO2 , PEVAP , PUW , PRUNOFF , PDRAIN ,& PAC , PQSAT , PTSRAD , PAC_AGG , PHU_AGG , PDEEP_FLUX , PIRRIG ) USE MODD_DATA_COVER_n , ONLY : DATA_COVER_t USE MODD_DATA_ISBA_n , ONLY : DATA_ISBA_t USE MODD_SFX_GRID_n , ONLY : GRID_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t USE MODD_DATA_ISBA_n , ONLY : DATA_ISBA_t USE MODD_GR_BIOG_n , ONLY : GR_BIOG_t USE MODD_DIAG_n , ONLY : DIAG_t USE MODD_DIAG_EVAP_ISBA_n , ONLY : DIAG_EVAP_ISBA_t USE MODD_DIAG_MISC_ISBA_n , ONLY : DIAG_MISC_ISBA_t USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t USE MODD_ISBA_n , ONLY : ISBA_S_t , ISBA_K_t , ISBA_P_t , ISBA_PE_t USE MODD_TYPE_DATE_SURF , ONLY : DATE_TIME IMPLICIT NONE TYPE ( DATA_COVER_t ), INTENT ( INOUT ) :: DTCO TYPE ( GRID_t ), INTENT ( INOUT ) :: G TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR TYPE ( DATA_ISBA_t ), INTENT ( INOUT ) :: DTV TYPE ( GR_BIOG_t ), INTENT ( INOUT ) :: GB TYPE ( DIAG_t ), INTENT ( INOUT ) :: DK TYPE ( DIAG_EVAP_ISBA_t ), INTENT ( INOUT ) :: DEK TYPE ( DIAG_MISC_ISBA_t ), INTENT ( INOUT ) :: DMK TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: GRO TYPE ( ISBA_S_t ), INTENT ( INOUT ) :: S TYPE ( ISBA_K_t ), INTENT ( INOUT ) :: K TYPE ( ISBA_P_t ), INTENT ( INOUT ) :: P TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option TYPE ( DATE_TIME ) , INTENT ( IN ) :: TPTIME ! current date and time from teb REAL , DIMENSION (:) , INTENT ( IN ) :: PTSUN ! solar time      (s from midnight) REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEQ_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEQ_B_COEF ! for humidity REAL , DIMENSION (:) , INTENT ( IN ) :: PPET_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPET_B_COEF ! for temperature REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:) , INTENT ( IN ) :: PZREF ! height of the first atmospheric level REAL , DIMENSION (:) , INTENT ( IN ) :: PUREF ! reference height for the wind REAL , DIMENSION (:) , INTENT ( IN ) :: PALB_GD ! green areas albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PTA ! temperature at first atm. level REAL , DIMENSION (:) , INTENT ( IN ) :: PQA ! specific humidity at first atm. level REAL , DIMENSION (:) , INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNA ! Exner function at first atm. level REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNS ! surface Exner function REAL , DIMENSION (:) , INTENT ( IN ) :: PRHOA ! air density at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PCO2 ! CO2 concentration in the air    (kg/m3) REAL , DIMENSION (:) , INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:) , INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:) , INTENT ( IN ) :: PZENITH ! solar zenithal angle REAL , DIMENSION (:) , INTENT ( IN ) :: PSW ! incoming total solar rad on an horizontal surface REAL , DIMENSION (:) , INTENT ( IN ) :: PLW ! atmospheric infrared radiation REAL , DIMENSION (:) , INTENT ( IN ) :: PVMOD ! module of horizontal wind near first atm. level REAL , DIMENSION (:) , INTENT ( IN ) :: PALBNIR_TVEG ! nearIR  veg tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBVIS_TVEG ! visible veg tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBNIR_TSOIL ! nearIR  soil tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBVIS_TSOIL ! visible soil tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN ! net radiation over greenroofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PH ! sensible heat flux over greenroofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE ! latent heat flux over greenroofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX ! flux through the greenroofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PSFCO2 ! flux of greenroof CO2       (m/s*kg_CO2/kg_air) REAL , DIMENSION (:) , INTENT ( OUT ) :: PEVAP ! total evaporation over greenroofs (kg/m2/s) REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW ! friction flux (m2/s2) REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF ! greenroof surface runoff REAL , DIMENSION (:) , INTENT ( OUT ) :: PDRAIN ! greenroof surface drainage REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC ! greenroof aerodynamical conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PQSAT ! saturation humidity REAL , DIMENSION (:) , INTENT ( OUT ) :: PTSRAD ! greenroof radiative surface temp. (snow free) REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_AGG ! aggreg. aeodynamic resistance for greenroofs for latent heat flux REAL , DIMENSION (:) , INTENT ( OUT ) :: PHU_AGG ! aggreg. relative humidity for greenroofs for latent heat flux REAL , DIMENSION (:) , INTENT ( OUT ) :: PDEEP_FLUX ! Heat Flux at the bottom layer of the greenroof REAL , DIMENSION (:) , INTENT ( OUT ) :: PIRRIG ! greenroof summer irrigation rate END SUBROUTINE GREENROOF END INTERFACE END MODULE MODI_GREENROOF","tags":"","loc":"sourcefile/modi_greenroof.f90.html"},{"title":"modi_garden.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_GARDEN Source Code modi_garden.F90 Source Code !auto_modi:spll_garden.D MODULE MODI_GARDEN INTERFACE SUBROUTINE GARDEN ( DTCO , G , T , TOP , TIR , DTV , GB , DK , DEK , DMK , GDO , S , K , P , PEK , & HIMPLICIT_WIND , TPTIME , PTSUN , PPEW_A_COEF , PPEW_B_COEF , & PPET_A_COEF , PPEQ_A_COEF , PPET_B_COEF , PPEQ_B_COEF , & PTSTEP , PZREF , PALB_GD , PTA , PQA , PEXNS , PRHOA , PCO2 , PPS , PRR , & PSR , PZENITH , PSW , PLW , PVMOD , PALBNIR_TVEG , & PALBVIS_TVEG , PALBNIR_TSOIL , PALBVIS_TSOIL , & PRN , PH , PLE , PGFLUX , PSFCO2 , PEVAP , PUW , PRUNOFF , & PAC , PQSAT , PTSRAD , PAC_AGG , PHU_AGG , PIRRIG ) USE MODD_DATA_COVER_n , ONLY : DATA_COVER_t USE MODD_DATA_ISBA_n , ONLY : DATA_ISBA_t USE MODD_SFX_GRID_n , ONLY : GRID_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_DATA_ISBA_n , ONLY : DATA_ISBA_t USE MODD_GR_BIOG_n , ONLY : GR_BIOG_t USE MODD_DIAG_n , ONLY : DIAG_t USE MODD_DIAG_EVAP_ISBA_n , ONLY : DIAG_EVAP_ISBA_t USE MODD_DIAG_MISC_ISBA_n , ONLY : DIAG_MISC_ISBA_t USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t USE MODD_ISBA_n , ONLY : ISBA_S_t , ISBA_K_t , ISBA_P_t , ISBA_PE_t USE MODD_TYPE_DATE_SURF , ONLY : DATE_TIME IMPLICIT NONE TYPE ( DATA_COVER_t ), INTENT ( INOUT ) :: DTCO TYPE ( GRID_t ), INTENT ( INOUT ) :: G TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( DATA_ISBA_t ), INTENT ( INOUT ) :: DTV TYPE ( GR_BIOG_t ), INTENT ( INOUT ) :: GB TYPE ( DIAG_t ), INTENT ( INOUT ) :: DK TYPE ( DIAG_EVAP_ISBA_t ), INTENT ( INOUT ) :: DEK TYPE ( DIAG_MISC_ISBA_t ), INTENT ( INOUT ) :: DMK TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: GDO TYPE ( ISBA_S_t ), INTENT ( INOUT ) :: S TYPE ( ISBA_K_t ), INTENT ( INOUT ) :: K TYPE ( ISBA_P_t ), INTENT ( INOUT ) :: P TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option TYPE ( DATE_TIME ) , INTENT ( IN ) :: TPTIME ! current date and time from teb REAL , DIMENSION (:) , INTENT ( IN ) :: PTSUN ! solar time      (s from midnight) REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEQ_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEQ_B_COEF ! for humidity REAL , DIMENSION (:) , INTENT ( IN ) :: PPET_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPET_B_COEF ! for temperature REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:) , INTENT ( IN ) :: PZREF ! height of atm. var. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PALB_GD ! green areas albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PTA ! temp. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PQA ! hum. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:) , INTENT ( IN ) :: PRHOA ! air density at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PCO2 ! CO2 concentration in the air    (kg/m3) REAL , DIMENSION (:) , INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:) , INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:) , INTENT ( IN ) :: PZENITH ! solar zenithal angle REAL , DIMENSION (:) , INTENT ( IN ) :: PSW ! incoming total solar rad on an horizontal surface REAL , DIMENSION (:) , INTENT ( IN ) :: PLW ! atmospheric infrared radiation REAL , DIMENSION (:) , INTENT ( IN ) :: PVMOD ! wind near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PALBNIR_TVEG ! nearIR  veg tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBVIS_TVEG ! visible veg tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBNIR_TSOIL ! nearIR  soil tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBVIS_TSOIL ! visible soil tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN ! net radiation over green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PH ! sensible heat flux over green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE ! latent heat flux over green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX ! flux through the green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PSFCO2 ! flux of CO2 positive toward the atmosphere (m/s*kg_CO2/kg_air) REAL , DIMENSION (:) , INTENT ( OUT ) :: PEVAP ! total evaporation over gardens (kg/m2/s) REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW ! friction flux (m2/s2) REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF ! runoff over garden (kg/m2/s) REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC ! aerodynamical conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PQSAT ! saturation humidity REAL , DIMENSION (:) , INTENT ( OUT ) :: PTSRAD ! garden radiative surface temp. (snow free) REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_AGG ! aggreg. aeodynamic resistance for green areas for latent heat flux REAL , DIMENSION (:) , INTENT ( OUT ) :: PHU_AGG ! aggreg. relative humidity for green areas for latent heat flux REAL , DIMENSION (:) , INTENT ( OUT ) :: PIRRIG ! garden summer irrigation rate END SUBROUTINE GARDEN END INTERFACE END MODULE MODI_GARDEN","tags":"","loc":"sourcefile/modi_garden.f90.html"},{"title":"modi_teb_veg_properties.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_TEB_VEG_PROPERTIES Source Code modi_teb_veg_properties.F90 Source Code !auto_modi:spll_teb_veg_properties.D MODULE MODI_TEB_VEG_PROPERTIES INTERFACE SUBROUTINE TEB_VEG_PROPERTIES ( PMASK , IO , PEK , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & PTS , PEMIS , PALB , PTA , PALBNIR_TVEG , PALBVIS_TVEG ,& PALBNIR_TSOIL , PALBVIS_TSOIL ) USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t USE MODD_ISBA_n , ONLY : ISBA_PE_t IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PMASK TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: IO TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK REAL , DIMENSION (:,:), INTENT ( IN ) :: PDIR_SW ! direct incoming solar radiation REAL , DIMENSION (:,:), INTENT ( IN ) :: PSCA_SW ! diffus incoming solar radiation REAL , DIMENSION (:) , INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) INTEGER , INTENT ( IN ) :: KSW ! number of short-wave spectral bands REAL , DIMENSION (:) , INTENT ( OUT ) :: PTS ! radiative surface temperature REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIS ! green areas emissivity REAL , DIMENSION (:) , INTENT ( OUT ) :: PALB ! green areas albedo REAL , DIMENSION (:) , INTENT ( IN ), OPTIONAL :: PTA ! Air temperature (K) REAL , DIMENSION (:) , INTENT ( OUT ), OPTIONAL :: PALBNIR_TVEG ! nearIR  veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ), OPTIONAL :: PALBVIS_TVEG ! visible veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ), OPTIONAL :: PALBNIR_TSOIL ! nearIR  soil tot albedo REAL , DIMENSION (:) , INTENT ( OUT ), OPTIONAL :: PALBVIS_TSOIL ! visible soil tot albedo END SUBROUTINE TEB_VEG_PROPERTIES END INTERFACE END MODULE MODI_TEB_VEG_PROPERTIES","tags":"","loc":"sourcefile/modi_teb_veg_properties.f90.html"},{"title":"modi_abor1_sfx.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_ABOR1_SFX Source Code modi_abor1_sfx.F90 Source Code !auto_modi:spll_abor1_sfx.D MODULE MODI_ABOR1_SFX INTERFACE SUBROUTINE ABOR1_SFX ( YTEXT ) IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: YTEXT END SUBROUTINE ABOR1_SFX END INTERFACE END MODULE MODI_ABOR1_SFX","tags":"","loc":"sourcefile/modi_abor1_sfx.f90.html"},{"title":"open_close_bin_asc_forc.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines OPEN_CLOSE_BIN_ASC_FORC Source Code open_close_bin_asc_forc.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################################################################ SUBROUTINE OPEN_CLOSE_BIN_ASC_FORC ( HACTION , HFORCING , HACTION2 ) !     ################################################################ ! !!****  *OPEN_CLOSE_BIN_ASC_FORC* - routine to open and close atmospheric forcing files !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      A. Lemonsu  *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    04/2008 !!      Modified by P. Le Moigne 07/2008: HACTION2 added !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! USE MODI_ABOR1_SFX ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! CHARACTER ( LEN = 5 ), INTENT ( IN ) :: HACTION ! action to do CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HFORCING ! forcing file type CHARACTER ( LEN = 1 ), INTENT ( IN ) :: HACTION2 ! 'R': read, 'W': write CHARACTER ( LEN = 7 ) :: YSTATUS ! file status (OLD/NEW) ! !*       0.2   Declarations of local variables !              ------------------------------- ! INTEGER :: INI REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'OPEN_CLOSE_BIN_ASC_FORC' , 0 , ZHOOK_HANDLE ) ! IF ( HACTION2 == 'R' ) THEN YSTATUS = 'UNKNOWN' ELSE IF ( HACTION2 == 'W' ) THEN YSTATUS = 'NEW    ' ELSE CALL ABOR1_SFX ( 'OPEN_CLOSE_BIN_ASC_FORC: UNKNOWN FILE STATUS, ' // YSTATUS ) ENDIF ! IF ( HACTION == 'CONF ' ) THEN IF ( LHOOK ) CALL DR_HOOK ( 'OPEN_CLOSE_BIN_ASC_FORC' , 1 , ZHOOK_HANDLE ) RETURN END IF ! IF ( HACTION == 'OPEN ' ) THEN IF ( HFORCING == 'ASCII ' ) THEN OPEN ( UNIT = 122 , FILE = 'input/Forc_TA.txt      ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 123 , FILE = 'input/Forc_QA.txt      ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 124 , FILE = 'input/Forc_WIND.txt    ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 125 , FILE = 'input/Forc_LW.txt      ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 126 , FILE = 'input/Forc_DIR_SW.txt  ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 127 , FILE = 'input/Forc_SCA_SW.txt  ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 128 , FILE = 'input/Forc_RAIN.txt    ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 129 , FILE = 'input/Forc_SNOW.txt    ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 130 , FILE = 'input/Forc_PS.txt      ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 131 , FILE = 'input/Forc_DIR.txt     ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 132 , FILE = 'input/Forc_CO2.txt     ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) ENDIF ENDIF ! IF ( HACTION == 'CLOSE' ) THEN CLOSE ( 121 ) CLOSE ( 122 ) CLOSE ( 123 ) CLOSE ( 124 ) CLOSE ( 125 ) CLOSE ( 126 ) CLOSE ( 127 ) CLOSE ( 128 ) CLOSE ( 129 ) CLOSE ( 130 ) CLOSE ( 131 ) CLOSE ( 132 ) END IF IF ( LHOOK ) CALL DR_HOOK ( 'OPEN_CLOSE_BIN_ASC_FORC' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END SUBROUTINE OPEN_CLOSE_BIN_ASC_FORC","tags":"","loc":"sourcefile/open_close_bin_asc_forc.f90.html"},{"title":"modi_ol_read_atm.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_OL_READ_ATM Source Code modi_ol_read_atm.F90 Source Code !auto_modi:spll_ol_read_atm.D MODULE MODI_OL_READ_ATM INTERFACE SUBROUTINE OL_READ_ATM (& HSURF_FILETYPE , HFORCING_FILETYPE , KFORC_STEP , & PTA , PQA , PWIND , PDIR_SW , PSCA_SW , PLW , PSNOW , PRAIN , PPS ,& PCO2 , PDIR , OLIMIT_QAIR ) IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PTA !K REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PQA REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PWIND REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PDIR_SW REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PSCA_SW REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PLW REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PSNOW REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PRAIN REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PPS REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PCO2 REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PDIR INTEGER , INTENT ( IN ) :: KFORC_STEP CHARACTER ( LEN = 6 ) , INTENT ( IN ) :: HSURF_FILETYPE CHARACTER ( LEN = 6 ) , INTENT ( IN ) :: HFORCING_FILETYPE LOGICAL , INTENT ( IN ) :: OLIMIT_QAIR END SUBROUTINE OL_READ_ATM END INTERFACE END MODULE MODI_OL_READ_ATM","tags":"","loc":"sourcefile/modi_ol_read_atm.f90.html"},{"title":"modd_surf_conf.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_SURF_CONF Source Code modd_surf_conf.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ##################### MODULE MODD_SURF_CONF !     ##################### ! !!****  *MODD_SURF_CONF - surfex configuration !! !!    PURPOSE !!    ------- !     Declaration of program name ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      P. Le Moigne *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       06/2008 ! !*       0.   DECLARATIONS !             ------------ ! ! IMPLICIT NONE ! !----------------------------------------------------------------------------------------------------- CHARACTER ( LEN = 6 ) :: CPROGNAME CHARACTER ( LEN = 7 ) :: CSOFTWARE = \"       \" ! software used: 'PGD    ','PREP  ','OFFLINE','      ' ! END MODULE MODD_SURF_CONF","tags":"","loc":"sourcefile/modd_surf_conf.f90.html"},{"title":"driver.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Programs DRIVER Source Code driver.F90 Source Code !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Copyright 1998-2013 Meteo-France ! This is part of the TEB software governed by the CeCILL licence version 2.1. ! See the following links for details: ! https://cecill.info/licences/Licence_CeCILL_V2.1-en.txt ! https://cecill.info/licences/Licence_CeCILL_V2.1-fr.txt !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! ====================================================================== PROGRAM DRIVER ! ====================================================================== ! ! ...................................................................... !  METHOD ! ...................................................................... ! ! Program designed to create, modify, and test TEB routines before being ! actually implemented into another driver or model (e.g. SURFEX or in an ! atmospheric model) ! ! Using just TEB physical routines, new arguments can be created or ! eliminated as local variables in Driver. ! ! ! Notes: ! The current version of Driver does not include the option TEB_CANOPY. ! Outputs have to be declared in Driver. ! !    AUTHOR ! !\tB. Bueno, Meteo-France ! !    MODIFICATIONS ! !      Original    08/12/10 !      Modification   04/13 (V. Masson) adds garden     (with a proxi SVAT) !                                            greenroofs (with a proxi SVAT) !                                            road orientation option !                                            separated walls option !      Modification   10/13 (V. Masson) adds irrigation and solar panels ! --------------------------------------------------------------- ! Modules ! --------------------------------------------------------------- ! USE MODD_CSTS , ONLY : XCPD , XSTEFAN , XPI , XDAY , XKARMAN , & XLVTT , XLSTT , XLMTT , XRV , XRD , XG , XP00 USE MODD_SURF_ATM , ONLY : XCISMIN , XVMODMIN , LALDTHRES , XRIMAX USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_TYPE_DATE_SURF USE MODE_THERMOS USE MODD_REPROD_OPER , ONLY : CQSAT ! !USE MODI_INIT_SURFCONSPHY USE MODI_INI_CSTS USE MODI_ADD_FORECAST_TO_DATE_SURF USE MODI_SUNPOS USE MODI_OL_READ_ATM USE MODI_OL_ALLOC_ATM USE MODI_OL_TIME_INTERP_ATM USE MODI_TEB_GARDEN_STRUCT USE MODI_WINDOW_DATA_STRUCT USE MODI_BEM_MORPHO_STRUCT USE MODI_CIRCUMSOLAR_RAD USE MODI_OPEN_CLOSE_BIN_ASC_FORC ! USE MODD_FORC_ATM , ONLY : CSV ,& ! name of all scalar variables XDIR_ALB ,& ! direct albedo for each band XSCA_ALB ,& ! diffuse albedo for each band XEMIS ,& ! emissivity XTSRAD ,& ! radiative temperature XTSUN ,& ! solar time (s from midnight) XZS ,& ! orography               (m) XZREF ,& ! height of T,q forcing   (m) XUREF ,& ! height of wind forcing  (m) XTA ,& ! air temperature forcing (K) XQA ,& ! air humidity forcing    (kg/m3) XSV ,& ! scalar variables XU ,& ! zonal wind              (m/s) XV ,& ! meridian wind           (m/s) XDIR_SW ,& ! direct  solar radiation (on horizontal surf.) XSCA_SW ,& ! diffuse solar radiation (on horizontal surf.) XSW_BANDS ,& ! mean wavelength of each shortwave band (m) XZENITH ,& ! zenithal angle  (radian from the vertical) XZENITH2 ,& ! zenithal angle  (radian from the vertical) XAZIM ,& ! azimuthal angle (radian from North, clockwise) XLW ,& ! longwave radiation (on horizontal surf.) XPS ,& ! pressure at atmospheric model surface (Pa) XPA ,& ! pressure at forcing level      (Pa) XRHOA ,& ! density at forcing level       (kg/m3) XCO2 ,& ! CO2 concentration in the air   (kg/m3) XSNOW ,& ! snow precipitation             (kg/m2/s) XRAIN ,& ! liquid precipitation           (kg/m2/s) XSFTH ,& ! flux of heat                   (W/m2) XSFTQ ,& ! flux of water vapor            (kg/m2/s) XSFU ,& ! zonal momentum flux            (m/s) XSFV ,& ! meridian momentum flux         (m/s) XSFCO2 ,& ! flux of CO2                    (kg/m2/s) XSFTS ,& ! flux of scalar var.            (kg/m2/s) XPEW_A_COEF ,& ! implicit coefficients XPEW_B_COEF ,& ! XPET_A_COEF ,& XPEQ_A_COEF ,& XPET_B_COEF ,& XPEQ_B_COEF USE PROXI_SVAT_CONSTS , ONLY : VEG_ALB , VEG_EMIS , GARDEN_BR , GREENROOF_BR ! IMPLICIT NONE ! --------------------------------------------------------------- ! Namelist: Add to allow parameters to be changed dynamically using !           namelist file. ! --------------------------------------------------------------- ! namelist / dimensions / NROOF_LAYER , NROAD_LAYER , NWALL_LAYER , NFLOOR_LAYER namelist / parameters / XTSTEP_SURF , IYEAR , IMONTH , IDAY , ZTIME_START , ZLON , ZLAT ,& INB_STEP_ATM , INB_ATM , KSW , ZZREF , CBEM , HROAD_DIR ,& HWALL_OPT , LGARDEN , LGREENROOF , ZFRAC_GR , LSOLAR_PANEL ,& ZFRAC_PANEL , LPAR_RD_IRRIG , CCOOL_COIL ,& CHEAT_COIL , HZ0H , ZZ0 , ZBLD , ZGARDEN , ZBLD_HEIGHT ,& ZWALL_O_HOR , ZROAD_DIR , ZALB_ROOF , ZEMIS_ROOF ,& ZHC_ROOF , ZTC_ROOF , ZD_ROOF , ZALB_ROAD , ZEMIS_ROAD ,& ZHC_ROAD , ZTC_ROAD , ZD_ROAD , ZALB_WALL , ZEMIS_WALL , ZHC_WALL ,& ZTC_WALL , ZD_WALL , ZHC_FLOOR , ZTC_FLOOR , ZD_FLOOR , ZH_TRAFFIC ,& ZLE_TRAFFIC , ZH_INDUSTRY , ZLE_INDUSTRY , ZRD_START_MONTH , ZRD_END_MONTH ,& ZRD_START_HOUR , ZRD_END_HOUR , ZRD_24H_IRRIG , ZEMIS_PANEL , ZALB_PANEL ,& ZEFF_PANEL , ZRESIDENTIAL , ZDT_RES , ZDT_OFF , PFLOOR_HEIGHT , ZINF , ZQIN ,& ZQIN_FRAD , ZQIN_FLAT , ZGR , ZSHGC , PU_WIN , ZSHADE , ZSHGC_SH ,& ZNATVENT , ZV_VENT , ZF_WATER_COND , ZF_WASTE_CAN , ZTCOOL_TARGET , ZTHEAT_TARGET ,& ZHR_TARGET , ZEFF_HEAT , ZCAP_SYS_HEAT , ZCAP_SYS_RAT , ZT_ADP , ZM_SYS_RAT ,& ZCOP_RAT , CCH_BEM , ZROUGH_ROOF , ZROUGH_WALL , ZT_ROAD , ZT_ROOF , ZT_WALL ,& ZT_FLOOR , ZT_MASS , ZTI_BLD , ZT_CANYON , ZT_WIN1 , ZT_WIN2 , ZQ_CANYON , ZQI_BLD , & VEG_ALB , VEG_EMIS , GARDEN_BR , GREENROOF_BR , NO_OUTPUT ! --------------------------------------------------------------- ! Declarations of local variables (INPUTS) ! --------------------------------------------------------------- ! ! Simulation - prepared for CAPITOUL atmospheric forcing REAL :: XTSTEP_SURF INTEGER :: IYEAR ! Current year (UTC) INTEGER :: IMONTH ! Current month (UTC) INTEGER :: IDAY ! Current day (UTC) REAL :: ZTIME_START ! Time at start of the run (s) REAL , DIMENSION ( 1 ) :: ZLON ! Longitude (deg) REAL , DIMENSION ( 1 ) :: ZLAT ! Latitude (deg) INTEGER :: INB_STEP_ATM ! Forcing time-steps INTEGER :: INB_ATM ! number time the driver calls the TEB !                                ! routines during a forcing time-step !                                ! --> it defines the time-step for TEB INTEGER :: KSW ! number of spectral bands in SW forcing REAL , DIMENSION ( 1 ) :: ZZREF ! Atm. Forcing height above roof level ! ! GO TO LINE 550 FOR MORE INPUTS ! ! ---------------------------------------------------------------------               ! ||   || ! declarations of local variables (PARAMETERS)                                        ! ||   || ! ---------------------------------------------------------------------               ! ||   || !                                                                                     ! ||   || REAL , DIMENSION ( 1 ) :: ZTI_BLD ! indoor air temperature                          ! ||   || REAL , DIMENSION ( 1 ) :: ZT_CANYON ! air canyon temperature                          ! ||   || REAL , DIMENSION ( 1 ) :: ZQA_KGKG ! air humidity at forcing level (kg/kg)           ! || G || REAL :: ZTIMEC = 0.0 ! Current duration since start of the run(s)      ! || O || INTEGER :: JFORC_STEP ! atmospheric loop index                          ! ||   || INTEGER :: JSURF_STEP ! Driver loop index                               ! || B || INTEGER :: JLOOP ! loop counter                                    ! || E || INTEGER :: NWALL_LAYER ! number of wall layers                           ! || L || INTEGER :: NROOF_LAYER ! number of roof layers                           ! || O || INTEGER :: NROAD_LAYER ! number of road layers                           ! || W || INTEGER :: NFLOOR_LAYER ! number of floor layers                          ! ||   || TYPE ( DATE_TIME ) :: TPTIME ! ||   || CHARACTER ( LEN = 3 ) :: HIMPLICIT_WIND = 'NEW' ! Implicitation option for wind fluxes      ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZHC_WALL ! Heat capacity        of wall layers    ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZTC_WALL ! Thermal conductivity of wall layers    ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZD_WALL ! Thickness            of wall layers    !\\\\     // REAL , DIMENSION (:,:), ALLOCATABLE :: ZHC_ROOF ! Heat capacity        of roof layers    ! \\\\   // REAL , DIMENSION (:,:), ALLOCATABLE :: ZTC_ROOF ! Thermal conductivity of roof layers    !  \\\\ // REAL , DIMENSION (:,:), ALLOCATABLE :: ZD_ROOF ! Thickness            of roof layers    !   \\\\/ REAL , DIMENSION (:,:), ALLOCATABLE :: ZHC_ROAD ! Heat capacity        of road layers    ! REAL , DIMENSION (:,:), ALLOCATABLE :: ZTC_ROAD ! Thermal conductivity of road layers    ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZD_ROAD ! Thickness            of road layers    ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZT_ROAD ! road layers temperatures               ! || F || REAL , DIMENSION (:,:), ALLOCATABLE :: ZT_ROOF ! roof layers temperatures               ! || O || REAL , DIMENSION (:,:), ALLOCATABLE :: ZT_WALL ! wall layers temperatures (wall 'A')    ! || R || REAL , DIMENSION (:,:), ALLOCATABLE :: ZT_WALL_B ! wall layers temperatures (wall 'B')    ! ||   || REAL , DIMENSION ( 1 ) :: ZROAD_DIR ! road direction (° from North, clockwise)    ! || U || REAL , DIMENSION ( 1 ) :: ZFRAC_GR ! fraction of greenroofs on roofs             ! || R || REAL , DIMENSION ( 1 ) :: ZFRAC_PANEL ! fraction of solar panels on roofs           ! || B || ! || A || !* snow variables                                                                     ! || N || CHARACTER ( LEN = 3 ) :: HSNOW_ROOF = \"1-L\" ! Option for roof snow                        ! ||   || REAL , DIMENSION ( 1 , 1 ) :: ZWSNOW_ROOF = 0. ! Initial Amount      of roof snow reservoir  ! || P || REAL , DIMENSION ( 1 , 1 ) :: ZTSNOW_ROOF ! layer temperature   of roof snow            ! || A || REAL , DIMENSION ( 1 , 1 ) :: ZRSNOW_ROOF ! density             of roof snow            ! || R || REAL , DIMENSION ( 1 ) :: ZTSSNOW_ROOF ! surface temperature of roof snow            ! || A || CHARACTER ( LEN = 3 ) :: HSNOW_ROAD = \"1-L\" ! Option for road snow                        ! || M || REAL , DIMENSION ( 1 , 1 ) :: ZWSNOW_ROAD = 0. ! Initial amount      of road snow reservoir  ! || E || REAL , DIMENSION ( 1 , 1 ) :: ZTSNOW_ROAD ! layer temperature   of road snow            ! || T || REAL , DIMENSION ( 1 , 1 ) :: ZRSNOW_ROAD ! density             of road snow            ! || E || REAL , DIMENSION ( 1 ) :: ZTSSNOW_ROAD ! surface temperature of road snow            ! || R || !* radiative variables                                                                ! || S || REAL , DIMENSION ( 1 ) :: ZALB_WALL ! albedo of walls                             ! ||   || REAL , DIMENSION ( 1 ) :: ZEMIS_WALL ! emissivity of walls                         ! ||   || REAL , DIMENSION ( 1 ) :: ZALB_ROOF ! albedo of roofs                             !\\\\     // REAL , DIMENSION ( 1 ) :: ZEMIS_ROOF ! emissivity of roofs                         ! \\\\   // REAL , DIMENSION ( 1 ) :: ZESNOW_ROAD ! road snow emissivity                        !  \\\\ // REAL , DIMENSION ( 1 ) :: ZALB_ROAD ! albedo of roads                             !   \\\\/ REAL , DIMENSION ( 1 ) :: ZEMIS_ROAD ! emissivity of roads                         ! REAL , DIMENSION ( 1 ) :: ZASNOW_ROOF ! roof snow albedo                            ! ||   || REAL , DIMENSION ( 1 ) :: ZASNOW_ROAD ! road snow albedo                            ! || A || REAL , DIMENSION ( 1 ) :: ZABS_SW_ROOF ! Shortwave radiation absorbed by roofs       ! || N || REAL , DIMENSION ( 1 ) :: ZABS_SW_ROAD ! Shortwave radiation absorbed by roads       ! || D || REAL , DIMENSION ( 1 ) :: ZABS_SW_WALL_A ! Shortwave radiation absorbed by wall A      ! ||   || REAL , DIMENSION ( 1 ) :: ZABS_SW_WALL_B ! Shortwave radiation absorbed by wall B      ! || T || REAL , DIMENSION ( 1 ) :: ZABS_SW_GARDEN ! Shortwave radiation absorbed by gardens     ! || E || REAL , DIMENSION ( 1 ) :: ZABS_SW_GREENROOF ! Shortwave radiation absorbed by greenroofs  ! || B || REAL , DIMENSION ( 1 ) :: ZABS_LW_ROOF ! Longwave  radiation absorbed by roofs       ! ||   || REAL , DIMENSION ( 1 ) :: ZABS_LW_ROAD ! Longwave  radiation absorbed by roads       ! || O || REAL , DIMENSION ( 1 ) :: ZABS_LW_WALL_A ! Longwave  radiation absorbed by wall A      ! || P || REAL , DIMENSION ( 1 ) :: ZABS_LW_WALL_B ! Longwave  radiation absorbed by wall B      ! || T || REAL , DIMENSION ( 1 ) :: ZABS_LW_GARDEN ! Longwave  radiation absorbed by gardens     ! || I || REAL , DIMENSION ( 1 ) :: ZABS_LW_GREENROOF ! Longwave  radiation absorbed by greenroofs  ! || O || REAL , DIMENSION ( 1 ) :: ZABS_SW_SNOW_ROOF ! Shortwave radiation absorbed by roof snow   ! || N || REAL , DIMENSION ( 1 ) :: ZABS_SW_SNOW_ROAD ! Shortwave radiation absorbed by road snow   ! || S || REAL , DIMENSION ( 1 ) :: ZABS_SW_PANEL ! Shortwave radiation absorbed by solar panels   ! ||   || REAL , DIMENSION ( 1 ) :: ZABS_LW_PANEL ! Longwave  radiation absorbed by solar panels   ! ||   || REAL , DIMENSION ( 1 ) :: ZDIR_ALB_TOWN ! town direct albedo                             ! ||   || REAL , DIMENSION ( 1 ) :: ZSCA_ALB_TOWN ! town scaterred albedo                          ! ||   || REAL , DIMENSION ( 1 ) :: ZCAN_HW_RATIO ! canyon    h/W                                  ! ||   || REAL , DIMENSION ( 1 ) :: ZSVF_ROAD ! road sky view factor                           ! ||   || REAL , DIMENSION ( 1 ) :: ZSVF_GARDEN ! garden sky view factor                         ! ||   || REAL , DIMENSION ( 1 ) :: ZSVF_WALL ! wall sky view factor                           ! ||   || REAL , DIMENSION ( 1 ) :: ZWAKE ! reduction of average wind speed                ! ||   || REAL , DIMENSION ( 1 ) :: ZGSNOW_ROOF = 0.0 ! roof snow conduction                       !\\\\     // REAL , DIMENSION ( 1 ) :: ZHSNOW_ROOF ! \\\\   // ! Anthropogenic heat fluxes                                                           !  \\\\ // REAL , DIMENSION ( 1 ) :: ZH_TRAFFIC ! heat fluxes due to traffic                   !   \\\\/ REAL , DIMENSION ( 1 ) :: ZLE_TRAFFIC ! heat fluxes due to traffic                   ! REAL , DIMENSION ( 1 ) :: XH_TRAFFIC ! heat fluxes due to traffic                   !   \\\\/ REAL , DIMENSION ( 1 ) :: XLE_TRAFFIC ! heat fluxes due to traffic REAL , DIMENSION ( 1 ) :: ZH_INDUSTRY ! heat fluxes due to factories                 ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_INDUSTRY ! heat fluxes due to factories                 ! ||   || ! Urban options                                                                       ! ||   || LOGICAL :: LPAR_RD_IRRIG ! Flag for road watering                       ! || S || LOGICAL :: LSOLAR_PANEL ! Flag to use a solar panels on roofs          ! || P || LOGICAL :: LGARDEN ! Flag to use a vegetation scheme in gardens   ! || E || LOGICAL :: LGREENROOF ! Flag to use a green roofs scheme             ! || C || CHARACTER ( LEN = 6 ) :: HZ0H ! TEB option for z0h roof & road               ! || I || CHARACTER ( LEN = 4 ) :: HROAD_DIR ! road direction option :                      ! || F || !                                      ! 'UNIF' : uniform roads                       ! || I || !                                      ! 'ORIE' : specified road orientation          ! || C || CHARACTER ( LEN = 4 ) :: HWALL_OPT ! Wall option                                  ! || A || !                                      ! 'UNIF' : uniform walls                       ! || T || !                                      ! 'TWO ' : 2 opposite  walls                   ! || I || ! Canyon geometry                                                                     ! || O || REAL , DIMENSION ( 1 ) :: ZZ0 ! Roughness length (m)                         ! || N || REAL , DIMENSION ( 1 ) :: ZBLD ! Horizontal building area density             ! || S || REAL , DIMENSION ( 1 ) :: ZGARDEN ! fraction of GARDEN areas                     ! ||   || REAL , DIMENSION ( 1 ) :: ZBLD_HEIGHT ! Canyon height (m)                            ! ||   || REAL , DIMENSION ( 1 ) :: ZWALL_O_HOR ! Vertical to horizonal surf ratio             ! ||   || ! Urban variables                                                                     ! ||   || REAL , DIMENSION ( 1 ) :: ZU_CANYON = 1.0 ! hor. wind in canyon                          ! ||   || REAL , DIMENSION ( 1 ) :: ZQ_CANYON ! canyon air specific humidity     (kg/kg)     ! ||   || REAL , DIMENSION ( 1 ) :: ZDIR_CANYON ! canyon wind direction                        ! ||   || REAL , DIMENSION ( 1 ) :: ZTS_ROOF ! surface temperature                          ! ||   || REAL , DIMENSION ( 1 ) :: ZTS_ROAD ! surface temperature                          !\\\\     // REAL , DIMENSION ( 1 ) :: ZTS_WALL_A ! surface temperature                          ! \\\\   // REAL , DIMENSION ( 1 ) :: ZTS_WALL_B ! surface temperature                          !  \\\\ // !                                                                                     !   \\\\/ REAL , DIMENSION ( 1 ) :: ZZ_LOWCAN ! altitude of air layer above road             ! REAL , DIMENSION ( 1 ) :: ZT_LOWCAN ! temperature of air above road                ! ||   || REAL , DIMENSION ( 1 ) :: ZU_LOWCAN ! wind above road                              ! ||   || REAL , DIMENSION ( 1 ) :: ZQ_LOWCAN ! humidity above road                          ! ||   || REAL , DIMENSION ( 1 ) :: ZEXNS ! surface exner function                       ! ||   || REAL , DIMENSION ( 1 ) :: ZEXNA ! exner function                               ! ||   || REAL , DIMENSION ( 1 ) :: ZROAD ! fraction of roads                            ! ||   || REAL , DIMENSION ( 1 ) :: ZWS_ROOF = 0. ! roof water content (kg/m2)                   ! ||   || REAL , DIMENSION ( 1 ) :: ZWS_ROAD = 0. ! road water content (kg/m2)                   ! ||   || REAL , DIMENSION ( 1 ) :: ZPEW_A_COEF ! implicit coefficients                        ! ||   || REAL , DIMENSION ( 1 ) :: ZPEW_B_COEF ! for wind coupling                            ! ||   || REAL , DIMENSION ( 1 ) :: ZPEW_A_COEF_LOWCAN !                                             ! ||   || REAL , DIMENSION ( 1 ) :: ZPEW_B_COEF_LOWCAN !                                             ! ||   || REAL , DIMENSION ( 1 ) :: ZWALL_O_GRND ! Wall to ground surface ratio                 ! ||   || REAL , DIMENSION ( 1 ) :: ZROAD_O_GRND ! Road to ground surface ratio                 ! ||   || REAL , DIMENSION ( 1 ) :: ZGARDEN_O_GRND ! Garden to ground surface ratio               ! ||   || REAL , DIMENSION ( 1 ) :: ZVMOD ! Module of wind speed at the top of the canyon! ||   || REAL , DIMENSION ( 1 ) :: ZCD ! drag coefficient                             ! ||   || REAL , DIMENSION ( 1 ) :: ZCDN ! neutral drag coefficient                     ! ||   || REAL , DIMENSION ( 1 ) :: ZAC_ROAD ! road aerodynamical conductance               ! ||   || REAL , DIMENSION ( 1 ) :: ZAC_ROAD_WAT ! road aerodynamical conductance (for water)   ! ||   || REAL , DIMENSION ( 1 ) :: ZAC_GARDEN ! garden aerodynamical conductance             !\\\\     // REAL , DIMENSION ( 1 ) :: ZAC_GARDEN_WAT ! garden aerodynamical conductance for vapor   ! \\\\   // REAL , DIMENSION ( 1 ) :: ZAC_GREENROOF ! green roofs aerodynamical conductance        !  \\\\ // REAL , DIMENSION ( 1 ) :: ZAC_GREENROOF_WAT ! green roofs aerodynamical conductance        !   \\\\/ !                                      ! for vapor                                    ! REAL , DIMENSION ( 1 ) :: ZUW_ROOF ! Momentum flux for roofs                      ! ||   || REAL , DIMENSION ( 1 ) :: ZDUWDU_GRND ! d(u'w')/du for ground                        ! ||   || REAL , DIMENSION ( 1 ) :: ZDUWDU_ROOF ! d(u'w')/du for roof                          ! ||   || REAL , DIMENSION ( 1 ) :: ZUSTAR_TOWN ! Fraction velocity for town                   ! ||   || REAL , DIMENSION ( 1 ) :: ZRESA_TOWN ! Aerodynamical resistance                     ! ||   || REAL , DIMENSION ( 1 ) :: ZCH_TOWN ! Heat exchange coefficient                    ! ||   || REAL , DIMENSION ( 1 ) :: ZRI_TOWN ! Richardson number                            ! ||   || REAL , DIMENSION ( 1 ) :: ZRUNOFF_TOWN ! runoff for town                              ! ||   || REAL , DIMENSION ( 1 ) :: ZRUNOFF_ROOF ! runoff for roof                              ! ||   || REAL , DIMENSION ( 1 ) :: ZRUNOFF_ROAD ! runoff for road                              ! ||   || ! Road-wall-budget routines                                                           ! ||   || REAL , DIMENSION ( 1 ) :: ZGSNOW_ROAD = 0.0 ! road snow conduction                         ! ||   || ! Urban fluxes variables                                                              ! ||   || REAL , DIMENSION ( 1 ) :: ZROOF_FRAC ! roof, wall,                                  ! ||   || REAL , DIMENSION ( 1 ) :: ZWALL_FRAC ! road, and green area                         ! ||   || REAL , DIMENSION ( 1 ) :: ZROAD_FRAC ! fractions                                    ! ||   || REAL , DIMENSION ( 1 ) :: ZGARDEN_FRAC ! fractions                                    ! ||   || REAL , DIMENSION ( 1 ) :: ZTOTS_O_HORS ! total canyon+roof surf over horizontal surf  ! ||   || REAL , DIMENSION ( 1 ) :: ZUW_GRND ! friction flux over ground                    ! ||   || REAL , DIMENSION ( 1 ) :: ZRN_ROOF ! net radiation over roof                      ! ||   || REAL , DIMENSION ( 1 ) :: ZH_ROOF ! sensible heat flux over roof                 ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_ROOF ! latent heat flux over roof                   !\\\\     // REAL , DIMENSION ( 1 ) :: ZGFLUX_ROOF ! flux through the roof                        ! \\\\   // REAL , DIMENSION ( 1 ) :: ZRN_ROAD ! net radiation over road                      !  \\\\ // REAL , DIMENSION ( 1 ) :: ZH_ROAD ! sensible heat flux over road                 !   \\\\/ REAL , DIMENSION ( 1 ) :: ZLE_ROAD ! latent heat flux over road                   ! REAL , DIMENSION ( 1 ) :: ZGFLUX_ROAD ! flux through the road                        ! ||   || REAL , DIMENSION ( 1 ) :: ZRN_WALL_A ! net radiation over wall                      ! ||   || REAL , DIMENSION ( 1 ) :: ZRN_WALL_B ! net radiation over wall                      ! ||   || REAL , DIMENSION ( 1 ) :: ZH_WALL_A = 0.0 ! sensible heat flux over wall                 ! ||   || REAL , DIMENSION ( 1 ) :: ZH_WALL_B = 0.0 ! sensible heat flux over wall                 ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_WALL_A ! latent heat flux over wall                   ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_WALL_B ! latent heat flux over wall                   ! ||   || REAL , DIMENSION ( 1 ) :: ZGFLUX_WALL_A ! flux through the wall                        ! ||   || REAL , DIMENSION ( 1 ) :: ZGFLUX_WALL_B ! flux through the wall                        ! ||   || ! ||   || REAL , DIMENSION ( 1 ) :: ZG_GREENROOF_ROOF ! heat flux between base of greenroof          ! ||   || !                                      ! and structural roof                          ! ||   || ! ||   || REAL , DIMENSION ( 1 ) :: ZRNSNOW_ROOF = 0.0 ! net radiation over snow                    ! ||   || REAL , DIMENSION ( 1 ) :: ZRNSNOW_ROAD = 0.0 ! net radiation over snow                    ! ||   || REAL , DIMENSION ( 1 ) :: ZHSNOW_ROAD = 0.0 ! sensible heat flux over snow               ! ||   || REAL , DIMENSION ( 1 ) :: ZLESNOW_ROAD = 0.0 ! latent heat flux over snow                 ! ||   || REAL , DIMENSION ( 1 ) :: ZRN_BLT ! net radiation over built covers            ! ||   || REAL , DIMENSION ( 1 ) :: ZH_BLT ! sensible heat flux over built covers       ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_BLT ! latent heat flux over built covers         !\\\\     // REAL , DIMENSION ( 1 ) :: ZGFLUX_BLT ! flux through the built covers              ! \\\\   // REAL , DIMENSION ( 1 ) :: ZFLX_BLD ! heat flx from bld to its structure         !  \\\\ // REAL , DIMENSION ( 1 ) :: ZDQS_TOWN ! storage inside town materials              !   \\\\/ REAL , DIMENSION ( 1 ) :: ZQF_TOWN ! total anthropogenic heat                   ! REAL , DIMENSION ( 1 ) :: ZMELT_ROOF = 0.0 ! snow melting on roof                       ! ||   || REAL , DIMENSION ( 1 ) :: ZMELT_ROAD = 0.0 ! snow melting on road                       ! ||   || REAL , DIMENSION ( 1 ) :: ZQF_BLD ! ||   || REAL , DIMENSION ( 1 ) :: ZSFCO2 ! Surface Flux of CO2                        ! ||   || !                                                                                     ! ||   || ! new arguments created after BEM                                                     ! ||   || !                                                                                     ! ||   || CHARACTER ( LEN = 3 ) :: CBEM ! Building Energy model 'DEF' or 'BEM'       ! ||   || CHARACTER ( LEN = 12 ) :: CCOOL_COIL ! option for cooling device type             ! ||   || CHARACTER ( LEN = 6 ) :: CHEAT_COIL ! option for heating device type             ! ||   || REAL , DIMENSION ( 1 ) :: ZF_WATER_COND ! fraction of evaporation for the condensers ! ||   || CHARACTER ( LEN = 4 ), DIMENSION ( 1 ) :: HNATVENT ! ||   || REAL , DIMENSION ( 1 ) :: ZNATVENT ! flag to describe surventilation system for ! ||   || !                                        ! i/o 0 for NONE, 1 for MANU and 2 for AUTO  ! ||   || REAL , DIMENSION ( 1 ) :: ZAUX_MAX = 5. ! Auxiliar variable for autosize calcs (not used)! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZT_FLOOR ! Floor layers temperatures [K]         ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZT_MASS ! Internal mass layers temperatures [K] ! ||   || REAL , DIMENSION ( 1 ) :: PFLOOR_HEIGHT ! Floor height (m)                           ! ||   || REAL , DIMENSION ( 1 ) :: ZH_BLD_COOL ! Sensible cooling energy demand             ! ||   || ! of the building [W m-2(bld)]               ! ||   || REAL , DIMENSION ( 1 ) :: ZT_BLD_COOL ! Total cooling energy demand                ! ||   || ! of the building [W m-2(bld)]               ! ||   || REAL , DIMENSION ( 1 ) :: ZH_BLD_HEAT ! Heating energy demand                      ! ||   || ! of the building [W m-2(bld)]               ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_BLD_COOL ! Latent cooling energy demand               !\\\\     // ! of the building [W m-2(bld)]               ! \\\\   // REAL , DIMENSION ( 1 ) :: ZLE_BLD_HEAT ! Latent heating energy demand               !  \\\\ // ! of the building [W m-2(bld)]               !   \\\\/ REAL , DIMENSION ( 1 ) :: ZH_WASTE ! Sensible waste heat from HVAC system       ! ! [W m-2(tot)]                               ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_WASTE ! Latent waste heat from HVAC system         ! ||   || ! [W m-2(tot)]                               ! ||   || REAL , DIMENSION ( 1 ) :: ZF_WASTE_CAN ! fraction of waste heat released            ! ||   || !                                        ! into the canyon                            ! ||   || REAL , DIMENSION ( 1 ) :: ZHVAC_COOL ! Energy consumption of the cooling system   ! ||   || ! [W m-2(bld)]                               ! ||   || REAL , DIMENSION ( 1 ) :: ZHVAC_HEAT ! Energy consumption of the heating system   ! ||   || ! [W m-2(bld)]                               ! ||   || REAL , DIMENSION ( 1 ) :: ZHVAC_COOL_TOT ! Energy consumption of the cooling system   ! ||   || ! [W m-2(tot)]                               ! ||   || REAL , DIMENSION ( 1 ) :: ZHVAC_HEAT_TOT ! Energy consumption of the heating system   ! ||   || ! [W m-2(tot)]                               ! ||   || REAL , DIMENSION ( 1 ) :: ZQIN ! Internal heat gains [W m-2(floor)]         ! ||   || REAL , DIMENSION ( 1 ) :: ZQIN_FRAD ! Radiant fraction of internal heat gains    ! ||   || REAL , DIMENSION ( 1 ) :: ZQIN_FLAT ! Latent franction of internal heat gains    ! ||   || REAL , DIMENSION ( 1 ) :: ZGR ! Glazing ratio                              ! ||   || REAL , DIMENSION ( 1 ) :: ZEFF_HEAT ! Efficiency of the heating system           ! ||   || REAL , DIMENSION ( 1 ) :: ZINF ! Infiltration flow rate [AC/H]              ! ||   || REAL , DIMENSION ( 1 ) :: ZTCOOL_TARGET ! Cooling setpoint of HVAC system [K]        ! ||   || REAL , DIMENSION ( 1 ) :: ZTHEAT_TARGET ! Heating setpoint of HVAC system [K]        ! ||   || REAL , DIMENSION ( 1 ) :: ZCUR_QIN ! Internal heat gains [W m-2(floor)]         ! ||   || REAL , DIMENSION ( 1 ) :: ZCUR_TCOOL_TARGET ! Cooling setpoint of HVAC system [K]        ! ||   || REAL , DIMENSION ( 1 ) :: ZCUR_THEAT_TARGET ! Heating setpoint of HVAC system [K]        ! ||   || REAL , DIMENSION ( 1 ) :: ZHR_TARGET ! Relative humidity setpoint                 ! ||   || REAL , DIMENSION ( 1 ) :: ZT_WIN2 ! Indoor window temperature [K]              !\\\\     // REAL , DIMENSION ( 1 ) :: ZQI_BLD ! Indoor air specific humidity [kg kg-1]     ! \\\\   // REAL , DIMENSION ( 1 ) :: ZV_VENT ! Ventilation flow rate [AC/H]               !  \\\\ // REAL , DIMENSION ( 1 ) :: ZCAP_SYS_HEAT ! Capacity of the heating system             !   \\\\/ ! [W m-2(bld)]                               ! REAL , DIMENSION ( 1 ) :: ZCAP_SYS_RAT ! Rated capacity of the cooling system       ! ||   || ! [W m-2(bld)]                               ! ||   || REAL , DIMENSION ( 1 ) :: ZT_ADP ! Apparatus dewpoint temperature of the      ! ||   || ! cooling coil [K]                           ! ||   || REAL , DIMENSION ( 1 ) :: ZM_SYS_RAT ! Rated HVAC mass flow rate                  ! ||   || ! [kg s-1 m-2(bld)]                          ! ||   || REAL , DIMENSION ( 1 ) :: ZCOP_RAT ! Rated COP of the cooling system            ! ||   || REAL , DIMENSION ( 1 ) :: ZCAP_SYS ! Actual capacity of the cooling system      ! ||   || ! [W m-2(bld)]                               ! ||   || REAL , DIMENSION ( 1 ) :: ZM_SYS ! Actual HVAC mass flow rate                 ! ||   || ! [kg s-1 m-2(bld)]                          ! ||   || REAL , DIMENSION ( 1 ) :: ZCOP ! COP of the cooling system                  ! ||   || REAL , DIMENSION ( 1 ) :: ZQ_SYS ! Supply air specific humidity [kg kg-1]     ! ||   || REAL , DIMENSION ( 1 ) :: ZT_SYS ! Supply air temperature [K]                 ! ||   || REAL , DIMENSION ( 1 ) :: ZTR_SW_WIN ! Solar radiation transmitted throught       ! ||   || ! windows [W m-2(bld)]                       ! ||   || REAL , DIMENSION ( 1 ) :: ZFAN_POWER ! HVAC fan power                             ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZHC_FLOOR ! heat capacity for floor layers       ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZTC_FLOOR ! thermal conductivity for             ! ||   || ! floor layers                         ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZD_FLOOR ! depth of floor layers                ! ||   || ! ||   || REAL , DIMENSION ( 1 ) :: ZT_WIN1 ! outdoor window temperature [K]             ! ||   || REAL , DIMENSION ( 1 ) :: ZABS_SW_WIN ! window absorbed shortwave radiation [W m-2]!\\\\     // REAL , DIMENSION ( 1 ) :: ZABS_LW_WIN ! absorbed infrared rad. [W m-2]             ! \\\\   // REAL , DIMENSION ( 1 ) :: ZSHGC ! window solar transmittance                 !  \\\\ // REAL , DIMENSION ( 1 ) :: ZSHGC_SH ! window + shading solar heat gain coef.     !   \\\\/ REAL , DIMENSION ( 1 ) :: ZUGG_WIN ! window glass-to-glass U-factro [W m-2 K-1] ! REAL , DIMENSION ( 1 ) :: ZALB_WIN ! window albedo                              ! ||   || REAL , DIMENSION ( 1 ) :: PU_WIN ! window U-factor [K m W-2]                  ! ||   || REAL , DIMENSION ( 1 ) :: ZABS_WIN ! window absortance                          ! ||   || REAL , DIMENSION ( 1 ) :: ZTRAN_WIN ! window transmittance                       ! ||   || !                                                                                     ! ||   || ! new argument for the UTCI calculation                                               ! ||   || REAL , DIMENSION ( 1 ) :: ZEMIT_LW_GRND ! LW flux emitted by the ground (W/m² ground)! ||   || REAL , DIMENSION ( 1 ) :: ZEMIT_LW_FAC ! LW flux emitted by the facade (W/m² ground)! ||   || REAL , DIMENSION ( 1 ) :: ZT_RAD_IND ! Indoor mean radiant temperature [K]        ! ||   || REAL , DIMENSION ( 1 ) :: ZREF_SW_GRND ! total solar rad reflected from ground      ! ||   || REAL , DIMENSION ( 1 ) :: ZREF_SW_FAC ! total solar rad reflected from facade      ! ||   || REAL , DIMENSION ( 1 ) :: ZHU_BLD ! Indoor relative humidity 0 < (-) < 1       ! ||   || !                                                                                     ! ||   || ! solar panels                                                                        ! ||   || REAL , DIMENSION ( 1 ) :: ZEMIS_PANEL ! Emissivity of solar panel [-]              ! ||   || REAL , DIMENSION ( 1 ) :: ZALB_PANEL ! albedo of solar panel  [-]                 ! ||   || REAL , DIMENSION ( 1 ) :: ZEFF_PANEL ! Efficiency of solar panel [-]              ! ||   || REAL , DIMENSION ( 1 ) :: ZTHER_PROD_PANEL ! Thermal      Energy production             ! ||   || !                                        !     of solar panel on roofs (W/m2 panel)   ! ||   || REAL , DIMENSION ( 1 ) :: ZPHOT_PROD_PANEL ! Photovoltaic Energy production             ! ||   || !                                        !     of solar panel on roofs (W/m2 panel)   ! ||   || REAL , DIMENSION ( 1 ) :: ZPROD_PANEL ! Averaged     Energy production             ! ||   || !                                        !     of solar panel on roofs (W/m2 panel)   ! ||   || REAL , DIMENSION ( 1 ) :: ZTHER_PROD_BLD ! Thermal      Energy production             ! ||   || !                                        !     of solar panel on roofs (W/m2 bld  )   ! ||   || REAL , DIMENSION ( 1 ) :: ZPHOT_PROD_BLD ! Photovoltaic Energy production             ! ||   || !                                        !     of solar panel on roofs (W/m2 bld  )   !\\\\     // REAL , DIMENSION ( 1 ) :: ZPROD_BLD ! Averaged     Energy production             ! \\\\   // !                                        !     of solar panel on roofs (W/m2 bld  )   !  \\\\ // REAL , DIMENSION ( 1 ) :: ZTHER_PRODC_DAY = 0. ! Present day integrated thermal production  !   \\\\/ !                                        ! of energy (J/m2 panel). zero value at start! REAL , DIMENSION ( 1 ) :: ZH_PANEL ! Sensible heat flux from solar panels       ! ||   || !                                        !     (W/m2 panel)                           ! ||   || REAL , DIMENSION ( 1 ) :: ZRN_PANEL ! Net radiation        of solar panel        ! ||   || !                                        !     (W/m2 panel)                           ! ||   || !                                                                                     ! ||   || REAL , DIMENSION ( 1 ) :: ZRESIDENTIAL ! Fraction of residential use in buildings(-)! ||   || REAL :: ZDT_RES ! target temperature change when unoccupied  ! ||   || !                                        ! (K) (residential buildings)                ! ||   || REAL :: ZDT_OFF ! target temperature change when unoccupied  ! ||   || !                                        ! (K) (office buildings)                     ! ||   || !                                                                                     ! ||   || ! road watering                                                                       ! ||   || REAL , DIMENSION ( 1 ) :: ZRD_START_MONTH ! start month for watering of roads(included)! ||   || REAL , DIMENSION ( 1 ) :: ZRD_END_MONTH ! end   month for watering of roads(included)! ||   || REAL , DIMENSION ( 1 ) :: ZRD_START_HOUR ! start hour  for watering of roads(included)! ||   || REAL , DIMENSION ( 1 ) :: ZRD_END_HOUR ! end   hour  for watering of roads(excluded)! ||   || REAL , DIMENSION ( 1 ) :: ZRD_24H_IRRIG ! 24h quantity of water used                 ! ||   || !                                        ! for road watering (liter/m2)               ! ||   || REAL , DIMENSION ( 1 ) :: ZIRRIG_ROAD ! road irrigation during current time-step   ! ||   || !                                                                                     ! ||   || ! new arguments for shading, schedule or natural ventilation                          ! ||   || LOGICAL , DIMENSION ( 1 ) :: LSHADE ! Flag to use shading devices               ! ||   || REAL , DIMENSION ( 1 ) :: ZSHADE ! flag to activate shading devices          ! ||   || !                                         ! -> REAL for i/o 0. or 1                   ! ||   || LOGICAL , DIMENSION ( 1 ) :: GSHAD_DAY ! has shading been necessary this day ?     ! ||   || LOGICAL , DIMENSION ( 1 ) :: GNATVENT_NIGHT ! has natural ventilation been              ! ||   || !                                         ! necessary/possible this night ?           ! ||   || !                                                                                     ! ||   || REAL , DIMENSION ( 1 ) :: ZN_FLOOR ! Number of floors                           ! ||   || REAL , DIMENSION ( 1 ) :: ZWALL_O_BLD ! Wall area [m2_wall/m2_bld]                 ! ||   || REAL , DIMENSION ( 1 ) :: ZGLAZ_O_BLD ! Window area [m2_win/m2_bld]                ! ||   || REAL , DIMENSION ( 1 ) :: ZMASS_O_BLD ! Mass area [m2_mass/m2_bld]                 ! ||   || REAL , DIMENSION ( 1 ) :: ZFLOOR_HW_RATIO ! H/W ratio of 1 floor level                 ! ||   || REAL , DIMENSION ( 1 ) :: ZF_FLOOR_MASS ! View factor floor-mass                     ! ||   || REAL , DIMENSION ( 1 ) :: ZF_FLOOR_WALL ! View factor floor-wall                     !\\\\     // REAL , DIMENSION ( 1 ) :: ZF_FLOOR_WIN ! View factor floor-window                   ! \\\\   // REAL , DIMENSION ( 1 ) :: ZF_FLOOR_ROOF ! View factor floor-roof                     !  \\\\ // REAL , DIMENSION ( 1 ) :: ZF_WALL_FLOOR ! View factor wall-floor                     !   \\\\/ REAL , DIMENSION ( 1 ) :: ZF_WALL_MASS ! View factor wall-mass                      ! REAL , DIMENSION ( 1 ) :: ZF_WALL_WIN ! View factor wall-win                       ! ||   || REAL , DIMENSION ( 1 ) :: ZF_WIN_FLOOR ! View factor win-floor                      ! ||   || REAL , DIMENSION ( 1 ) :: ZF_WIN_MASS ! View factor win-mass                       ! ||   || REAL , DIMENSION ( 1 ) :: ZF_WIN_WALL ! View factor win-wall                       ! ||   || REAL , DIMENSION ( 1 ) :: ZF_MASS_FLOOR ! View factor mass-floor                     ! ||   || REAL , DIMENSION ( 1 ) :: ZF_MASS_WALL ! View factor mass-wall                      ! ||   || REAL , DIMENSION ( 1 ) :: ZF_MASS_WIN ! View factor mass-window                    ! ||   || LOGICAL :: LCANOPY ! is canopy active ?                         ! ||   || CHARACTER ( LEN = 5 ) :: CCH_BEM ! TEB option for building outside conv. coef ! ||   || REAL , DIMENSION ( 1 ) :: ZROUGH_ROOF ! roof roughness coef.                       ! ||   || REAL , DIMENSION ( 1 ) :: ZROUGH_WALL ! wall roughness coef.                       ! ||   || REAL , DIMENSION ( 1 ) :: ZF_WIN_WIN ! indoor win to win view factor              ! ||   || ! ||   || ! Average urban fluxes variables                                                      ! ||   || REAL , DIMENSION ( 1 ) :: ZTS_TOWN ! town surface temperature                    ! ||   || REAL , DIMENSION ( 1 ) :: ZEMIS_TOWN ! town equivalent emissivity                  ! ||   || REAL , DIMENSION ( 1 ) :: ZALB_TOWN ! town eqivalent albedo                       ! ||   || REAL , DIMENSION ( 1 ) :: ZQ_TOWN ! town eqivalent specific humidity            ! ||   || REAL , DIMENSION ( 1 ) :: ZESNOW_ROOF = 1.0 ! snow roof emissivity                        ! ||   || REAL , DIMENSION ( 1 ) :: ZABS_LW_SNOW_ROOF ! abs. LW rad. by snow                        ! ||   || REAL , DIMENSION ( 1 ) :: ZABS_LW_SNOW_ROAD ! abs. LW rad. by snow                        ! ||   || REAL , DIMENSION ( 1 ) :: ZRN_STRLROOF ! net radiation over structural roof          ! REAL , DIMENSION ( 1 ) :: ZH_STRLROOF ! sensible heat flux over structural roof     ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_STRLROOF ! latent heat flux over structural roof       ! ||   || REAL , DIMENSION ( 1 ) :: ZGFLUX_STRLROOF ! flux through the structural roof            ! ||   || REAL , DIMENSION ( 1 ) :: ZRUNOFF_STRLROOF ! water runoff on the structural roof         ! ||   || REAL , DIMENSION ( 1 ) :: ZLEW_ROOF ! latent heat flux of snowfree roof           ! ||   || REAL , DIMENSION ( 1 ) :: ZLESNOW_ROOF ! latent heat flux over snow                  ! ||   || REAL , DIMENSION ( 1 ) :: ZLEW_ROAD ! latent heat flux of snowfree road           ! ||   || REAL , DIMENSION ( 1 ) :: ZRN_GRND ! net radiation over ground                   ! ||   || REAL , DIMENSION ( 1 ) :: ZH_GRND ! sensible heat flux over ground              ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_GRND ! latent heat flux over ground                ! ||   || REAL , DIMENSION ( 1 ) :: ZGFLUX_GRND ! flux through the ground                     ! ||   || REAL , DIMENSION ( 1 ) :: ZRN_TOWN ! net radiation over town                     ! ||   || REAL , DIMENSION ( 1 ) :: ZH_TOWN ! sensible heat flux over town                ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_TOWN ! latent heat flux over town                  ! ||   || REAL , DIMENSION ( 1 ) :: ZGFLUX_TOWN ! flux through the ground for town            ! ||   || REAL , DIMENSION ( 1 ) :: ZEVAP_TOWN ! evaporation (kg/m2/s)                       ! ||   || ! Atmospheric Forcing variables                                                       ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZTA ! air temperature forcing (K)             ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZQA ! air humidity forcing (kg/m3)            ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZWIND ! wind speed (m/s)                        ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZSCA_SW ! diffuse solar radiation (on hor surf)   ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZDIR_SW ! direct  solar radiation (on hor surf)   ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZLW ! longwave radiation (on horizontal surf) ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZSNOW ! snow precipitation  (kg/m2/s)           ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZRAIN ! liquid precipitation  (kg/m2/s)         !\\\\     // REAL , DIMENSION (:,:), ALLOCATABLE :: ZPS ! pressure at forcing level  (Pa)         ! \\\\   // REAL , DIMENSION (:,:), ALLOCATABLE :: ZCO2 ! CO2 concentration in the air  (kg/m3)   !  \\\\ // REAL , DIMENSION (:,:), ALLOCATABLE :: ZDIR ! wind direction                          !   \\\\/ REAL , DIMENSION ( 1 ) :: ZCOEF ! work array                              ! REAL , DIMENSION ( 1 ) :: ZF1_o_B ! Coefficient for sky model               ! ||   || REAL , DIMENSION ( 1 , 1 ) :: ZTDIR_SW ! total direct SW                         ! ||   || REAL , DIMENSION ( 1 , 1 ) :: ZTSCA_SW ! total diffuse SW                        ! ||   || REAL :: ZTIME_BEG ! Time at beginning of time step          ! ||   || REAL :: ZTIME ! Time at end       of time step          ! ||   || ! -----------------------------------------------------------                         ! ||   || ! Outputs                                                                             ! ||   || ! -----------------------------------------------------------                         ! ||   || !                                                                                     ! ||   || CHARACTER ( LEN =* ), PARAMETER :: T_ROOF1 = 'output/T_ROOF1.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: T_CANYON = 'output/T_CANYON.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: T_ROAD1 = 'output/T_ROAD1.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: T_FLOOR1 = 'output/T_FLOOR1.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: T_MASS1 = 'output/T_MASS1.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: T_WALLA1 = 'output/T_WALLA1.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: T_WALLB1 = 'output/T_WALLB1.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: TI_BLD = 'output/TI_BLD.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: QI_BLD = 'output/QI_BLD.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: Q_CANYON = 'output/Q_CANYON.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: U_CANYON = 'output/U_CANYON.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: H_TOWN = 'output/H_TOWN.txt' !\\\\     // CHARACTER ( LEN =* ), PARAMETER :: LE_TOWN = 'output/LE_TOWN.txt' ! \\\\   // CHARACTER ( LEN =* ), PARAMETER :: RN_TOWN = 'output/RN_TOWN.txt' !  \\\\ // CHARACTER ( LEN =* ), PARAMETER :: HVAC_COOL = 'output/HVAC_COOL.txt' !   \\\\/ CHARACTER ( LEN =* ), PARAMETER :: HVAC_HEAT = 'output/HVAC_HEAT.txt' ! CHARACTER ( LEN =* ), PARAMETER :: COP = 'output/COP.txt' ! CHARACTER ( LEN =* ), PARAMETER :: DIR_CANYON = 'output/DIR_CANYON.txt' CHARACTER ( LEN =* ), PARAMETER :: ALB_TOWN = 'output/ALB_TOWN.txt' CHARACTER ( LEN =* ), PARAMETER :: EMIS_TOWN = 'output/EMIS_TOWN.txt' CHARACTER ( LEN =* ), PARAMETER :: EVAP_TOWN = 'output/EVAP_TOWN.txt' CHARACTER ( LEN =* ), PARAMETER :: GFLUX_TOWN = 'output/GFLUX_TOWN.txt' CHARACTER ( LEN =* ), PARAMETER :: TS_TOWN = 'output/TS_TOWN.txt' CHARACTER ( LEN =* ), PARAMETER :: Q_TOWN = 'output/Q_TOWN.txt' CHARACTER ( LEN =* ), PARAMETER :: USTAR_TOWN = 'output/USTAR_TOWN.txt' CHARACTER ( LEN =* ), PARAMETER :: THER_PROD_PANEL = 'output/THER_PROD_PANEL.txt' CHARACTER ( LEN =* ), PARAMETER :: PHOT_PROD_PANEL = 'output/PHOT_PROD_PANEL.txt' CHARACTER ( LEN =* ), PARAMETER :: QF_TOWN = 'output/QF_TOWN.txt' CHARACTER ( LEN =* ), PARAMETER :: DQS_TOWN = 'output/DQS_TOWN.txt' ! CHARACTER ( LEN =* ), PARAMETER :: SWD = 'output/SWD.txt' CHARACTER ( LEN =* ), PARAMETER :: SWU = 'output/SWU.txt' CHARACTER ( LEN =* ), PARAMETER :: LWD = 'output/LWD.txt' CHARACTER ( LEN =* ), PARAMETER :: LWU = 'output/LWU.txt' ! CHARACTER ( LEN =* ), PARAMETER :: Forc_TA = 'output/Forc_TA.txt' CHARACTER ( LEN =* ), PARAMETER :: Forc_PS = 'output/Forc_PS.txt' CHARACTER ( LEN =* ), PARAMETER :: Forc_QA = 'output/Forc_QA.txt' CHARACTER ( LEN =* ), PARAMETER :: Forc_WIND = 'output/Forc_WIND.txt' CHARACTER ( LEN =* ), PARAMETER :: Forc_RAIN = 'output/Forc_RAIN.txt' CHARACTER ( LEN =* ), PARAMETER :: Forc_SNOW = 'output/Forc_SNOW.txt' INTEGER :: ID_FORC REAL , DIMENSION ( 1 ) :: ZSUMZEN REAL , DIMENSION ( 1 ) :: ZSW REAL :: ZBEGIN_TRAFFIC_TIME ! start traffic time (solar time, s) REAL :: ZEND_TRAFFIC_TIME ! end traffic time   (solar time, s) INTEGER :: IYEAR2 ! current year at end of timestep(UTC) INTEGER :: IMONTH2 ! current month at end of timestep(UTC) INTEGER :: IDAY2 ! current day at end of timestep(UTC) REAL :: ZTIME2 ! current time since start of the day at end of timestep (s) logical :: exist ! TODO: testing remove LOGICAL :: NO_OUTPUT ! Whether to output results to file !=========================================================================== ! Read from namelist file after default values are set. !=========================================================================== OPEN ( UNIT = 99 , FILE = 'input.nml' , STATUS = 'old' ) READ ( 99 , NML = dimensions ) ALLOCATE ( ZHC_ROOF ( 1 , NROOF_LAYER )) ALLOCATE ( ZTC_ROOF ( 1 , NROOF_LAYER )) ALLOCATE ( ZD_ROOF ( 1 , NROOF_LAYER )) ALLOCATE ( ZT_ROOF ( 1 , NROOF_LAYER )) ALLOCATE ( ZHC_ROAD ( 1 , NROAD_LAYER )) ALLOCATE ( ZTC_ROAD ( 1 , NROAD_LAYER )) ALLOCATE ( ZD_ROAD ( 1 , NROAD_LAYER )) ALLOCATE ( ZT_ROAD ( 1 , NROAD_LAYER )) ALLOCATE ( ZHC_WALL ( 1 , NWALL_LAYER )) ALLOCATE ( ZTC_WALL ( 1 , NWALL_LAYER )) ALLOCATE ( ZD_WALL ( 1 , NWALL_LAYER )) ALLOCATE ( ZT_WALL ( 1 , NWALL_LAYER )) ALLOCATE ( ZT_WALL_B ( 1 , NWALL_LAYER )) ALLOCATE ( ZHC_FLOOR ( 1 , NFLOOR_LAYER )) ALLOCATE ( ZTC_FLOOR ( 1 , NFLOOR_LAYER )) ALLOCATE ( ZD_FLOOR ( 1 , NFLOOR_LAYER )) ALLOCATE ( ZT_FLOOR ( 1 , NFLOOR_LAYER )) ALLOCATE ( ZT_MASS ( 1 , NFLOOR_LAYER )) READ ( 99 , NML = parametersnizializations (SYSTEM) ! ----------------------------------------------------------- ZT_WALL_B = ZT_WALL ! wall layers temperatures ! GSHAD_DAY = . FALSE . ! has shading been necessary this day ? GNATVENT_NIGHT = . FALSE . ! has natural ventilation been necessary/possible this night ? ! irrigation not supported currently LPAR_RD_IRRIG = . FALSE . ZRD_START_MONTH = 6 ZRD_END_MONTH = 6 ZRD_START_HOUR = 6 ZRD_END_HOUR = 6 ZRD_24H_IRRIG = 0 IF ( ZNATVENT ( 1 ) >= 0.0 . AND . ZNATVENT ( 1 ) < 0.5 ) THEN HNATVENT = 'NONE' ELSEIF ( ZNATVENT ( 1 ) >= 0.5 . AND . ZNATVENT ( 1 ) < 1.5 ) THEN HNATVENT = 'MANU' ELSEIF ( ZNATVENT ( 1 ) >= 1.5 . AND . ZNATVENT ( 1 ) <= 2.5 ) THEN HNATVENT = 'AUTO' ELSEIF ( ZNATVENT ( 1 ) >= 2.5 . AND . ZNATVENT ( 1 ) <= 3.5 ) THEN HNATVENT = 'MECH' ELSE HNATVENT = 'NONE' ENDIF IF ( ZSHADE ( 1 ) >= 0.0 . AND . ZSHADE ( 1 ) < 0.5 ) THEN LSHADE = . FALSE . ELSEIF ( ZSHADE ( 1 ) >= 0.5 . AND . ZSHADE ( 1 ) <= 1.0 ) THEN LSHADE = . TRUE . ELSE LSHADE = . FALSE . ENDIF ! ! coherence check IF ( (. NOT . LGREENROOF ) . AND . ZFRAC_GR ( 1 ) > 0. ) THEN print * , 'Greenroofs option   is not activated but a non-zero greenroof fraction is given' STOP END IF IF ( (. NOT . LGARDEN ) . AND . ZGARDEN ( 1 ) > 0. ) THEN print * , 'Garden     option   is not activated but a non-zero garden    fraction is given' STOP END IF IF ( ZBLD ( 1 ) + ZGARDEN ( 1 ) >= 1. ) THEN print * , 'The sum of garden and building fraction is larger than one, so road fraction is negative. Please check their values.' STOP END IF IF ( (. NOT . LSOLAR_PANEL ) . AND . ZFRAC_PANEL ( 1 ) > 0. ) THEN print * , 'Solar panels option is not activated but a non-zero solar panels fraction is given' STOP END IF IF ( (. NOT . CBEM == 'BEM' ) . AND . ZGR ( 1 ) > 0. ) THEN print * , 'Building Energy Module (BEM) is not activated but a non-zero glazing ratio is given' STOP END IF ! ! ! multi layer option LCANOPY = . FALSE . ! is canopy active ?  ** DO NOT CHANGE ** ! ! initialization of physical constants ! CALL INI_CSTS ! !CALL INIT_SURFCONSPHY ! CQSAT = 'NEW' ! saturation is computed relative to water above 0°C, and relative to ice below 0°C ! !* various thresholds ! XCISMIN = 0.5 ! minimum wind shear XVMODMIN = 0.5 ! minimum wind speed LALDTHRES = . FALSE . ! activate aladin threshold for wind XRIMAX = 0.2 ! Maximum richardson number for exchange coefficients computations ! !* Open atmospheric forcing files ! CALL OPEN_CLOSE_BIN_ASC_FORC ( 'OPEN ' , 'ASCII ' , 'R' ) ! ! allocation of variables ! CALL OL_ALLOC_ATM ( 1 , 1 , 1 ) ! INI, IBANDS, ISCAL ! ZTIME = ZTIME_START ! ! sun position at run start ! CALL SUNPOS ( IYEAR , IMONTH , IDAY , ZTIME , ZLON , ZLAT , XTSUN , XZENITH , XAZIM ) ! ! allocate local atmospheric variables ALLOCATE ( ZTA ( 1 , 2 )) ALLOCATE ( ZQA ( 1 , 2 )) ALLOCATE ( ZWIND ( 1 , 2 )) ALLOCATE ( ZDIR_SW ( 1 , 2 )) ALLOCATE ( ZSCA_SW ( 1 , 2 )) ALLOCATE ( ZLW ( 1 , 2 )) ALLOCATE ( ZSNOW ( 1 , 2 )) ALLOCATE ( ZRAIN ( 1 , 2 )) ALLOCATE ( ZPS ( 1 , 2 )) ALLOCATE ( ZCO2 ( 1 , 2 )) ALLOCATE ( ZDIR ( 1 , 2 )) ! !* reads atmospheric forcing for first time-step ! CALL OL_READ_ATM ( 'ASCII ' , 'ASCII ' , 1 , & ZTA , ZQA , ZWIND , ZDIR_SW , ZSCA_SW , ZLW , ZSNOW , ZRAIN , ZPS ,& ZCO2 , ZDIR ,. false . ) XCO2 (:) = ZCO2 (:, 1 ) XRHOA (:) = ZPS (:, 1 ) / ( ZTA (:, 1 ) * XRD * ( 1. + (( XRV / XRD ) - 1. ) * ZQA (:, 1 ) ) + XZREF (:) * XG ) ! ! ----------------------------------------------------------- ! Geometric parameters ! ----------------------------------------------------------- ! ZROAD = ( 1. - ZBLD - ZGARDEN ) XZREF = ZZREF XUREF = ZZREF ZCAN_HW_RATIO = 0.5 * ZWALL_O_HOR / ( 1. - ZBLD ) ZSVF_ROAD = ( SQRT ( ZCAN_HW_RATIO ** 2 + 1. ) - ZCAN_HW_RATIO ) ZSVF_GARDEN = ZSVF_ROAD ZSVF_WALL = 0.5 * ( ZCAN_HW_RATIO + 1. - SQRT ( ZCAN_HW_RATIO ** 2 + 1. )) / ZCAN_HW_RATIO ZZ_LOWCAN = ZBLD_HEIGHT / 2 ZTOTS_O_HORS = 1. + ZWALL_O_HOR ZROOF_FRAC = ZBLD / ZTOTS_O_HORS ZWALL_FRAC = ZWALL_O_HOR / ZTOTS_O_HORS ZROAD_FRAC = ZROAD / ZTOTS_O_HORS ZGARDEN_FRAC = ZGARDEN / ZTOTS_O_HORS ZWALL_O_GRND = ZWALL_FRAC / ( ZROAD_FRAC + ZGARDEN_FRAC ) ZROAD_O_GRND = ZROAD / ( ZROAD + ZGARDEN ) ZGARDEN_O_GRND = ZGARDEN / ( ZROAD + ZGARDEN ) ! CALL BEM_MORPHO_STRUCT ( ZBLD , ZWALL_O_HOR , ZBLD_HEIGHT , PFLOOR_HEIGHT , & ZGR , ZN_FLOOR , ZWALL_O_BLD , ZGLAZ_O_BLD , ZMASS_O_BLD , & ZFLOOR_HW_RATIO , & ZF_FLOOR_MASS , ZF_FLOOR_WALL , ZF_FLOOR_WIN , & ZF_FLOOR_ROOF , ZF_WALL_FLOOR , ZF_WALL_MASS , & ZF_WALL_WIN , ZF_WIN_FLOOR , ZF_WIN_MASS , ZF_WIN_WALL , & ZF_MASS_FLOOR , ZF_MASS_WALL , ZF_MASS_WIN , ZF_WASTE_CAN , & ZF_WIN_WIN ) ! ! ----------------------------------------------------------- ! Window characteristics ! ----------------------------------------------------------- ! CALL WINDOW_DATA_STRUCT ( 1 , ZSHGC , PU_WIN , ZALB_WIN , ZABS_WIN , ZUGG_WIN , ZTRAN_WIN ) ! ! ----------------------------------------------------------- ! Default at first time-step : no snow ! ----------------------------------------------------------- ! ZWSNOW_ROOF = 0. ZTSNOW_ROOF = XUNDEF ZRSNOW_ROOF = XUNDEF ZASNOW_ROOF = XUNDEF ZESNOW_ROOF = XUNDEF ZTSSNOW_ROOF = XUNDEF ZWSNOW_ROAD = 0. ZTSNOW_ROAD = XUNDEF ZRSNOW_ROAD = XUNDEF ZASNOW_ROAD = XUNDEF ZESNOW_ROAD = XUNDEF ZTSSNOW_ROAD = XUNDEF ! ----------------------------------------------------------- ! Outputs ! ----------------------------------------------------------- ! IF (. NOT . NO_OUTPUT ) THEN OPEN ( UNIT = 13 , FILE = T_ROOF1 , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 14 , FILE = T_CANYON , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 15 , FILE = T_ROAD1 , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 16 , FILE = T_WALLA1 , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 17 , FILE = T_WALLB1 , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 18 , FILE = TI_BLD , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 19 , FILE = Q_CANYON , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 21 , FILE = U_CANYON , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 22 , FILE = H_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 23 , FILE = LE_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 24 , FILE = RN_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 25 , FILE = HVAC_COOL , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 26 , FILE = HVAC_HEAT , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 37 , FILE = COP , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) ! OPEN ( UNIT = 27 , FILE = DIR_CANYON , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 28 , FILE = ALB_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 29 , FILE = EMIS_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 30 , FILE = EVAP_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 31 , FILE = GFLUX_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 32 , FILE = TS_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 33 , FILE = Q_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 34 , FILE = USTAR_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 35 , FILE = THER_PROD_PANEL , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 36 , FILE = PHOT_PROD_PANEL , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 38 , FILE = QF_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 39 , FILE = DQS_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) ! OPEN ( UNIT = 40 , FILE = SWD , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 41 , FILE = SWU , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 42 , FILE = LWD , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 43 , FILE = LWU , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 50 , FILE = Forc_TA , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 51 , FILE = Forc_PS , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 52 , FILE = Forc_QA , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 53 , FILE = Forc_WIND , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 54 , FILE = Forc_RAIN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 55 , FILE = Forc_SNOW , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 56 , FILE = T_FLOOR1 , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 57 , FILE = T_MASS1 , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 58 , FILE = QI_BLD , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) END IF ! ! ----------------------------------------------------------- ! Temporal loops ! ----------------------------------------------------------- ! DO JFORC_STEP = 1 , INB_STEP_ATM WRITE ( * , FMT = '(I5,A1,I5)' ) JFORC_STEP , '/' , INB_STEP_ATM ! ZTS_ROOF = 0. ZTS_ROAD = 0. ZTS_WALL_A = 0. ZTS_WALL_B = 0. ! read Forcing CALL OL_READ_ATM ( 'ASCII ' , 'ASCII ' , JFORC_STEP , & ZTA , ZQA , ZWIND , ZDIR_SW , ZSCA_SW , ZLW , ZSNOW , ZRAIN , ZPS ,& ZCO2 , ZDIR ,. false . ) ! !COMPUTE SUM ZENITH angle between 2 timestepA ZSUMZEN (:) = 0.0 DO JSURF_STEP = 1 , INB_ATM IDAY2 = IDAY ZTIME2 = ZTIME + ( JSURF_STEP - 1. ) * XTSTEP_SURF IF ( ZTIME2 > 8640 0. ) THEN ZTIME2 = ZTIME2 - 86400 IDAY2 = IDAY + 1 ENDIF CALL SUNPOS ( IYEAR , IMONTH , IDAY2 , ZTIME + ( JSURF_STEP - 1. ) * XTSTEP_SURF , & ZLON , ZLAT , XTSUN , XZENITH , XAZIM ) ! ZSUMZEN (:) = ZSUMZEN (:) + MAX ( COS ( XZENITH (:) + 0.1 ), 0. ) / ( INB_ATM * 1.0 ) ! ENDDO WHERE ( ZSUMZEN < 0.01 ) ZSUMZEN = 0.0 ! DO JSURF_STEP = 1 , INB_ATM ! ! time interpolation of the forcing ! ! CALL SUNPOS ( IYEAR , IMONTH , IDAY , ZTIME , ZLON , ZLAT , XTSUN , XZENITH , XAZIM ) IYEAR2 = IYEAR IMONTH2 = IMONTH IDAY2 = IDAY ZTIME2 = ZTIME + XTSTEP_SURF CALL ADD_FORECAST_TO_DATE_SURF ( IYEAR2 , IMONTH2 , IDAY2 , ZTIME2 ) CALL SUNPOS ( IYEAR2 , IMONTH2 , IDAY2 , ZTIME2 , ZLON , ZLAT , XTSUN , XZENITH2 , XAZIM ) ! TPTIME % TIME = ZTIME TPTIME % TDATE % YEAR = IYEAR TPTIME % TDATE % MONTH = IMONTH TPTIME % TDATE % DAY = IDAY ! !interpolation between beginning and end of current forcing time step ID_FORC = 1 CALL OL_TIME_INTERP_ATM ( JSURF_STEP , INB_ATM , & ZTA (:, ID_FORC ), ZTA (:, ID_FORC + 1 ), & ZQA (:, ID_FORC ), ZQA (:, ID_FORC + 1 ), & ZWIND (:, ID_FORC ), ZWIND (:, ID_FORC + 1 ), & ZDIR_SW (:, ID_FORC ), ZDIR_SW (:, ID_FORC + 1 ), & ZSCA_SW (:, ID_FORC ), ZSCA_SW (:, ID_FORC + 1 ), & ZLW (:, ID_FORC ), ZLW (:, ID_FORC + 1 ), & ZSNOW (:, ID_FORC + 1 ), ZRAIN (:, ID_FORC + 1 ), & ZPS (:, ID_FORC ), ZPS (:, ID_FORC + 1 ), & ZCO2 (:, ID_FORC ), ZCO2 (:, ID_FORC + 1 ), & ZDIR (:, ID_FORC ), ZDIR (:, ID_FORC + 1 ), & XZENITH + 0.1 , ZSUMZEN ) ZSW (:) = 0. DO JLOOP = 1 , SIZE ( XDIR_SW , 2 ) ZSW (:) = ZSW (:) + XDIR_SW (:, JLOOP ) + XSCA_SW (:, JLOOP ) END DO WHERE ( ZSW (:) > 0. ) XZENITH = MIN ( XZENITH , XPI / 2. - 0.01 ) XZENITH2 = MIN ( XZENITH2 , XPI / 2. - 0.01 ) ELSEWHERE XZENITH = MAX ( XZENITH , XPI / 2. ) XZENITH2 = MAX ( XZENITH2 , XPI / 2. ) END WHERE ! updates time ZTIMEC = ZTIMEC + XTSTEP_SURF ! Exner functions ! ZEXNS = ( XPS / XP00 ) ** ( XRD / XCPD ) ZEXNA = ( XPA / XP00 ) ** ( XRD / XCPD ) ! ! specific humidity (conversion from kg/m3 to kg/kg) ! ZQA_KGKG (:) = XQA (:) / XRHOA (:) ZTDIR_SW = XDIR_SW ( 1 , 1 ) ZTSCA_SW = XSCA_SW ( 1 , 1 ) KSW = 1 ! only one spectral band here ! ! Sky model for diffuse radiation ! !add directionnal contrib from scattered radiation CALL CIRCUMSOLAR_RAD ( XDIR_SW (:, 1 ), XSCA_SW (:, 1 ), XZENITH , ZF1_o_B ) ZTDIR_SW (:, 1 ) = XDIR_SW (:, 1 ) + XSCA_SW (:, 1 ) * ZF1_o_B ZTSCA_SW (:, 1 ) = XSCA_SW (:, 1 ) * ( 1. - ZF1_o_B ) ZBEGIN_TRAFFIC_TIME = 2160 0. ZEND_TRAFFIC_TIME = 6480 0. ! WHERE ( XTSUN > ZBEGIN_TRAFFIC_TIME . AND . XTSUN < ZEND_TRAFFIC_TIME ) XH_TRAFFIC (:) = ZH_TRAFFIC (:) XLE_TRAFFIC (:) = ZLE_TRAFFIC (:) ELSEWHERE XH_TRAFFIC (:) = 0. XLE_TRAFFIC (:) = 0. END WHERE ! ! ! Wind speed ZVMOD = SQRT ( XU ** 2 + XV ** 2 ) ZWAKE = 1. + ( 2. / XPI - 1. ) * 2. * ( ZCAN_HW_RATIO - 0.5 ) ZWAKE = MAX ( MIN ( ZWAKE , 1. ), 2. / XPI ) ZU_CANYON = ZWAKE * EXP ( - ZCAN_HW_RATIO / 4. ) * ZVMOD & * LOG ( ( 2. * ZBLD_HEIGHT / 3. ) / ZZ0 ) & / LOG ( ( ZZREF + 2. * ZBLD_HEIGHT / 3. ) / ZZ0 ) ZU_LOWCAN = ZU_CANYON ZT_LOWCAN = ZT_CANYON ZQ_LOWCAN = ZQ_CANYON ! ZPEW_A_COEF = 0. ZPEW_A_COEF_LOWCAN = 0. ZPEW_B_COEF = ZVMOD ZPEW_B_COEF_LOWCAN = ZU_LOWCAN !***************************************************************************** !***************************************************************************** !                  Call of physical routines of TEB is here                  ! !***************************************************************************** !***************************************************************************** CALL TEB_GARDEN_STRUCT ( LGARDEN , LGREENROOF , LSOLAR_PANEL , & HZ0H , HIMPLICIT_WIND , HROAD_DIR , HWALL_OPT , TPTIME , & XTSUN , ZT_CANYON , ZQ_CANYON , ZU_CANYON , & ZT_LOWCAN , ZQ_LOWCAN , ZU_LOWCAN , ZZ_LOWCAN , & ZTI_BLD , & ZT_ROOF , ZT_ROAD , ZT_WALL , ZT_WALL_B , & ZWS_ROOF , ZWS_ROAD , & HSNOW_ROOF , & ZWSNOW_ROOF , ZTSNOW_ROOF , ZRSNOW_ROOF , ZASNOW_ROOF , & ZTSSNOW_ROOF , ZESNOW_ROOF , & HSNOW_ROAD , & ZWSNOW_ROAD , ZTSNOW_ROAD , ZRSNOW_ROAD , ZASNOW_ROAD , & ZTSSNOW_ROAD , ZESNOW_ROAD , & ZPEW_A_COEF , ZPEW_B_COEF , & ZPEW_A_COEF_LOWCAN , ZPEW_B_COEF_LOWCAN , & XPS , XPA , ZEXNS , ZEXNA , & XTA , ZQA_KGKG , XRHOA , XCO2 , & XLW , ZTDIR_SW , ZTSCA_SW , XSW_BANDS , KSW , & XZENITH , XAZIM , & XRAIN , XSNOW , & ZZREF , ZZREF , ZVMOD , & XH_TRAFFIC , XLE_TRAFFIC , ZH_INDUSTRY , ZLE_INDUSTRY , & XTSTEP_SURF , & ZZ0 , & ZBLD , ZGARDEN , ZROAD_DIR , ZROAD , ZFRAC_GR , & ZBLD_HEIGHT , ZWALL_O_HOR , ZCAN_HW_RATIO , & ZROAD_O_GRND , ZGARDEN_O_GRND , ZWALL_O_GRND , & ZALB_ROOF , ZEMIS_ROOF , & ZHC_ROOF , ZTC_ROOF , ZD_ROOF , & ZALB_ROAD , ZEMIS_ROAD , ZSVF_ROAD , & ZHC_ROAD , ZTC_ROAD , ZD_ROAD , & ZALB_WALL , ZEMIS_WALL , ZSVF_WALL , & ZSVF_GARDEN , & ZHC_WALL , ZTC_WALL , ZD_WALL , & ZRN_ROOF , ZH_ROOF , ZLE_ROOF , ZLEW_ROOF , ZGFLUX_ROOF , & ZRUNOFF_ROOF , & ZRN_ROAD , ZH_ROAD , ZLE_ROAD , ZLEW_ROAD , ZGFLUX_ROAD , & ZRUNOFF_ROAD , & ZRN_WALL_A , ZH_WALL_A , ZLE_WALL_A , ZGFLUX_WALL_A , & ZRN_WALL_B , ZH_WALL_B , ZLE_WALL_B , ZGFLUX_WALL_B , & ZRN_STRLROOF , ZH_STRLROOF , ZLE_STRLROOF , ZGFLUX_STRLROOF , & ZRUNOFF_STRLROOF , & ZRN_BLT , ZH_BLT , ZLE_BLT , ZGFLUX_BLT , & ZRNSNOW_ROOF , ZHSNOW_ROOF , ZLESNOW_ROOF , ZGSNOW_ROOF , & ZMELT_ROOF , & ZRNSNOW_ROAD , ZHSNOW_ROAD , ZLESNOW_ROAD , ZGSNOW_ROAD , & ZMELT_ROAD , & ZRN_GRND , ZH_GRND , ZLE_GRND , ZGFLUX_GRND , & ZRN_TOWN , ZH_TOWN , ZLE_TOWN , ZGFLUX_TOWN , ZEVAP_TOWN , & ZRUNOFF_TOWN , ZSFCO2 , & ZUW_GRND , ZUW_ROOF , ZDUWDU_GRND , ZDUWDU_ROOF , & ZUSTAR_TOWN , ZCD , ZCDN , ZCH_TOWN , ZRI_TOWN , & ZTS_TOWN , ZEMIS_TOWN , ZDIR_ALB_TOWN , ZSCA_ALB_TOWN , & ZRESA_TOWN , ZDQS_TOWN , ZQF_TOWN , ZQF_BLD , & ZFLX_BLD , ZAC_ROAD , ZAC_GARDEN , ZAC_GREENROOF , & ZAC_ROAD_WAT , ZAC_GARDEN_WAT , ZAC_GREENROOF_WAT , & ZABS_SW_ROOF , ZABS_LW_ROOF , & ZABS_SW_SNOW_ROOF , ZABS_LW_SNOW_ROOF , & ZABS_SW_ROAD , ZABS_LW_ROAD , & ZABS_SW_SNOW_ROAD , ZABS_LW_SNOW_ROAD , & ZABS_SW_WALL_A , ZABS_LW_WALL_A , & ZABS_SW_WALL_B , ZABS_LW_WALL_B , & ZABS_SW_PANEL , ZABS_LW_PANEL , & ZABS_SW_GARDEN , ZABS_LW_GARDEN , & ZABS_SW_GREENROOF , ZABS_LW_GREENROOF , & ZG_GREENROOF_ROOF , & CCOOL_COIL , ZF_WATER_COND , CHEAT_COIL , & HNATVENT , ZNATVENT , IDAY , ZAUX_MAX , ZT_FLOOR , & ZT_MASS , ZH_BLD_COOL , ZT_BLD_COOL , ZH_BLD_HEAT , & ZLE_BLD_COOL , ZLE_BLD_HEAT , ZH_WASTE , ZLE_WASTE , & ZF_WASTE_CAN , ZHVAC_COOL , ZHVAC_HEAT , ZQIN , ZQIN_FRAD , & ZQIN_FLAT , ZGR , ZEFF_HEAT , ZINF , & ZTCOOL_TARGET , ZTHEAT_TARGET , ZHR_TARGET , ZT_WIN2 , & ZQI_BLD , ZV_VENT , ZCAP_SYS_HEAT , ZCAP_SYS_RAT , ZT_ADP , & ZM_SYS_RAT , ZCOP_RAT , ZCAP_SYS , ZM_SYS , ZCOP , ZQ_SYS , & ZT_SYS , ZTR_SW_WIN , ZFAN_POWER , ZHC_FLOOR , ZTC_FLOOR , & ZD_FLOOR , ZT_WIN1 , ZABS_SW_WIN , ZABS_LW_WIN , ZSHGC , & ZSHGC_SH , ZUGG_WIN , ZALB_WIN , ZABS_WIN , ZEMIT_LW_FAC , & ZEMIT_LW_GRND , ZT_RAD_IND , ZREF_SW_GRND , ZREF_SW_FAC , & ZHU_BLD , ZTIME , LSHADE , ZSHADE , GSHAD_DAY , & GNATVENT_NIGHT , & CBEM , & ZN_FLOOR , ZWALL_O_BLD , ZGLAZ_O_BLD , ZMASS_O_BLD , & ZFLOOR_HW_RATIO , ZF_FLOOR_MASS , ZF_FLOOR_WALL , & ZF_FLOOR_WIN , ZF_FLOOR_ROOF , ZF_WALL_FLOOR , ZF_WALL_MASS ,& ZF_WALL_WIN , ZF_WIN_FLOOR , ZF_WIN_MASS , ZF_WIN_WALL , & ZF_MASS_FLOOR , ZF_MASS_WALL , ZF_MASS_WIN , LCANOPY , & ZTRAN_WIN , CCH_BEM , ZROUGH_ROOF , ZROUGH_WALL , ZF_WIN_WIN ,& LPAR_RD_IRRIG , ZRD_START_MONTH , ZRD_END_MONTH , & ZRD_START_HOUR , ZRD_END_HOUR , ZRD_24H_IRRIG , ZIRRIG_ROAD ,& ZEMIS_PANEL , ZALB_PANEL , ZEFF_PANEL , ZFRAC_PANEL , & ZRESIDENTIAL , & ZTHER_PROD_PANEL , ZPHOT_PROD_PANEL , ZPROD_PANEL , & ZTHER_PROD_BLD , ZPHOT_PROD_BLD , ZPROD_BLD , & ZTHER_PRODC_DAY , ZH_PANEL , ZRN_PANEL , & ZDT_RES , ZDT_OFF , & ZCUR_TCOOL_TARGET , ZCUR_THEAT_TARGET , ZCUR_QIN ) !***************************************************************************** !***************************************************************************** !***************************************************************************** !***************************************************************************** ! ZTIME = ZTIME + XTSTEP_SURF CALL ADD_FORECAST_TO_DATE_SURF ( IYEAR , IMONTH , IDAY , ZTIME ) END DO IF (. NOT . NO_OUTPUT ) THEN !  Instantaneous diagnostics ZTS_ROOF = ZT_ROOF ( 1 , 1 ) ZTS_ROAD = ZT_ROAD ( 1 , 1 ) ZTS_WALL_A = ZT_WALL ( 1 , 1 ) ZTS_WALL_B = ZT_WALL_B ( 1 , 1 ) ! Calucalte the total (direct + diffuse radiaitons)town albedo IF ( ZTDIR_SW ( 1 , 1 ) == 0. ) THEN ZALB_TOWN = 0. ELSE ZALB_TOWN = ( ZDIR_ALB_TOWN * ZTDIR_SW ( 1 , 1 ) + ZSCA_ALB_TOWN * ZTSCA_SW ( 1 , 1 )) / ( ZTDIR_SW ( 1 , 1 ) + ZTSCA_SW ( 1 , 1 )) END IF ! TEB does no modify the wind direction ZDIR_CANYON = ZDIR ( 1 , 1 ) ! Town specific humidity assumed to be same as canyon humidity ZQ_TOWN = ZQ_CANYON ! WRITE ( 13 , * ) ZTS_ROOF WRITE ( 14 , * ) ZT_CANYON WRITE ( 15 , * ) ZTS_ROAD WRITE ( 16 , * ) ZTS_WALL_A WRITE ( 17 , * ) ZTS_WALL_B WRITE ( 18 , * ) ZTI_BLD WRITE ( 19 , * ) ZQ_CANYON WRITE ( 21 , * ) ZU_CANYON WRITE ( 22 , * ) ZH_TOWN WRITE ( 23 , * ) ZLE_TOWN WRITE ( 24 , * ) ZRN_TOWN IF ( CBEM == 'BEM' ) THEN ! The heating and cooling energy demand are converted ! from W/m²(bld) to W/m²(urb). ! FIXME: this does not seem correct anymore, why? ! it seems that ZHVAC_COOL is already W/m²(urb)... ZHVAC_COOL_TOT = ZBLD * ZHVAC_COOL ZHVAC_HEAT_TOT = ZBLD * ZHVAC_HEAT WRITE ( 25 , * ) ZHVAC_COOL WRITE ( 26 , * ) ZHVAC_HEAT WRITE ( 37 , * ) ZCOP END IF ! WRITE ( 27 , * ) ZDIR_CANYON WRITE ( 28 , * ) ZALB_TOWN WRITE ( 29 , * ) ZEMIS_TOWN WRITE ( 30 , * ) ZEVAP_TOWN WRITE ( 31 , * ) ZGFLUX_TOWN WRITE ( 32 , * ) ZTS_TOWN WRITE ( 33 , * ) ZQ_TOWN WRITE ( 34 , * ) ZUSTAR_TOWN WRITE ( 38 , * ) ZQF_TOWN WRITE ( 39 , * ) ZDQS_TOWN IF ( LSOLAR_PANEL ) THEN WRITE ( 35 , * ) ZTHER_PROD_PANEL WRITE ( 36 , * ) ZPHOT_PROD_PANEL END IF WRITE ( 40 , * ) ZTDIR_SW ( 1 , 1 ) + ZTSCA_SW ( 1 , 1 ) ! PDIR_SW(:,JSWB)                    + PSCA_SW(:,JSWB) WRITE ( 41 , * ) ZTDIR_SW ( 1 , 1 ) * ZDIR_ALB_TOWN ( 1 ) + ZTSCA_SW ( 1 , 1 ) * ZSCA_ALB_TOWN ( 1 ) ! PDIR_SW(:,JSWB) * PDIR_ALB(:,JSWB) + PSCA_SW(:,JSWB) * PSCA_ALB(:,JSWB) WRITE ( 42 , * ) XLW ! PLW(:) WRITE ( 43 , * ) ZEMIS_TOWN * XSTEFAN * ZTS_TOWN ** 4 + ( 1. - ZEMIS_TOWN ) * XLW ! PEMIS(:)*XSTEFAN*PTRAD(:)**4 + (1.-PEMIS(:))*PLW(:) ! Interpolated forcing variables WRITE ( 50 , * ) XTA WRITE ( 51 , * ) XPS WRITE ( 52 , * ) XQA WRITE ( 53 , * ) ZVMOD WRITE ( 54 , * ) XRAIN WRITE ( 55 , * ) XSNOW WRITE ( 56 , * ) ZT_FLOOR ( 1 , 1 ) WRITE ( 57 , * ) ZT_MASS ( 1 , 1 ) WRITE ( 58 , * ) ZQI_BLD END IF ! END DO ! ! -------------------------------------------------------------------------------------- ! ! !  DEALLOCATE variables DEALLOCATE ( ZTA ) DEALLOCATE ( ZQA ) DEALLOCATE ( ZWIND ) DEALLOCATE ( ZDIR_SW ) DEALLOCATE ( ZSCA_SW ) DEALLOCATE ( ZLW ) DEALLOCATE ( ZSNOW ) DEALLOCATE ( ZRAIN ) DEALLOCATE ( ZPS ) DEALLOCATE ( ZCO2 ) DEALLOCATE ( ZDIR ) ! DEALLOCATE ( ZHC_WALL ) DEALLOCATE ( ZTC_WALL ) DEALLOCATE ( ZD_WALL ) DEALLOCATE ( ZT_WALL ) DEALLOCATE ( ZT_WALL_B ) DEALLOCATE ( ZHC_ROOF ) DEALLOCATE ( ZTC_ROOF ) DEALLOCATE ( ZD_ROOF ) DEALLOCATE ( ZT_ROOF ) DEALLOCATE ( ZHC_ROAD ) DEALLOCATE ( ZTC_ROAD ) DEALLOCATE ( ZD_ROAD ) DEALLOCATE ( ZT_ROAD ) ! CALL OPEN_CLOSE_BIN_ASC_FORC ( 'CLOSE ' , 'ASCII ' , 'R' ) ! IF (. NOT . NO_OUTPUT ) THEN CLOSE ( 13 ) CLOSE ( 14 ) CLOSE ( 15 ) CLOSE ( 16 ) CLOSE ( 17 ) CLOSE ( 18 ) CLOSE ( 19 ) CLOSE ( 21 ) CLOSE ( 22 ) CLOSE ( 23 ) CLOSE ( 24 ) CLOSE ( 25 ) CLOSE ( 26 ) CLOSE ( 37 ) CLOSE ( 27 ) CLOSE ( 28 ) CLOSE ( 29 ) CLOSE ( 30 ) CLOSE ( 31 ) CLOSE ( 32 ) CLOSE ( 33 ) CLOSE ( 34 ) CLOSE ( 35 ) CLOSE ( 36 ) CLOSE ( 38 ) CLOSE ( 39 ) CLOSE ( 40 ) CLOSE ( 41 ) CLOSE ( 42 ) CLOSE ( 43 ) CLOSE ( 50 ) CLOSE ( 51 ) CLOSE ( 52 ) CLOSE ( 53 ) CLOSE ( 54 ) CLOSE ( 55 ) CLOSE ( 56 ) CLOSE ( 57 ) CLOSE ( 58 ) ! WRITE ( * , * ) ' ' WRITE ( * , * ) '    --------------------------' WRITE ( * , * ) '    |  DRIVER ENDS CORRECTLY |' WRITE ( * , * ) '    --------------------------' WRITE ( * , * ) ' ' END IF ! ! -------------------------------------------------------------------------------------- ! END PROGRAM DRIVER","tags":"","loc":"sourcefile/driver.f90.html"},{"title":"modd_forc_atm.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_FORC_ATM Source Code modd_forc_atm.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ###################### MODULE MODD_FORC_ATM !     ###################### ! !!****  *MODD_FORC_ATM - declaration of atmospheric forcing variables !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      F. Habets   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       20/09/02 ! !*       0.   DECLARATIONS !             ------------ ! ! IMPLICIT NONE !------------------------------------------------------------------------------ ! CHARACTER ( LEN = 6 ), DIMENSION (:), ALLOCATABLE :: CSV ! name of all scalar variables REAL , DIMENSION (:,:), ALLOCATABLE :: XDIR_ALB ! direct albedo for each band REAL , DIMENSION (:,:), ALLOCATABLE :: XSCA_ALB ! diffuse albedo for each band REAL , DIMENSION (:), ALLOCATABLE :: XEMIS ! emissivity REAL , DIMENSION (:), ALLOCATABLE :: XTSRAD ! radiative temperature REAL , DIMENSION (:), ALLOCATABLE :: XTSUN ! solar time                    (s from midnight) REAL , DIMENSION (:), ALLOCATABLE :: XZREF ! height of T,q forcing                 (m) REAL , DIMENSION (:), ALLOCATABLE :: XUREF ! height of wind forcing                (m) ! REAL , DIMENSION (:), ALLOCATABLE :: XTA ! air temperature forcing               (K) REAL , DIMENSION (:), ALLOCATABLE :: XQA ! air specific humidity forcing         (kg/m3) REAL , DIMENSION (:), ALLOCATABLE :: XRHOA ! air density forcing                   (kg/m3) REAL , DIMENSION (:,:), ALLOCATABLE :: XSV ! scalar variables REAL , DIMENSION (:), ALLOCATABLE :: XU ! zonal wind                            (m/s) REAL , DIMENSION (:), ALLOCATABLE :: XV ! meridian wind                         (m/s) REAL , DIMENSION (:,:), ALLOCATABLE :: XDIR_SW ! direct  solar radiation (on horizontal surf.) !                                            !                                       (W/m2) REAL , DIMENSION (:,:), ALLOCATABLE :: XSCA_SW ! diffuse solar radiation (on horizontal surf.) !                                            !                                       (W/m2) REAL , DIMENSION (:), ALLOCATABLE :: XSW_BANDS ! mean wavelength of each shortwave band (m) REAL , DIMENSION (:), ALLOCATABLE :: XZENITH ! zenithal angle at t  (radian from the vertical) REAL , DIMENSION (:), ALLOCATABLE :: XZENITH2 ! zenithal angle at t+1(radian from the vertical) REAL , DIMENSION (:), ALLOCATABLE :: XAZIM ! azimuthal angle      (radian from North, clockwise) REAL , DIMENSION (:), ALLOCATABLE :: XLW ! longwave radiation (on horizontal surf.) !                                            !                                       (W/m2) REAL , DIMENSION (:), ALLOCATABLE :: XPS ! pressure at atmospheric model surface (Pa) REAL , DIMENSION (:), ALLOCATABLE :: XPA ! pressure at forcing level             (Pa) REAL , DIMENSION (:), ALLOCATABLE :: XZS ! atmospheric model orography           (m) REAL , DIMENSION (:), ALLOCATABLE :: XCO2 ! CO2 concentration in the air          (kg/kg) REAL , DIMENSION (:), ALLOCATABLE :: XSNOW ! snow precipitation                    (kg/m2/s) REAL , DIMENSION (:), ALLOCATABLE :: XRAIN ! liquid precipitation                  (kg/m2/s) ! ! REAL , DIMENSION (:), ALLOCATABLE :: XSFTH ! flux of heat                          (W/m2) REAL , DIMENSION (:), ALLOCATABLE :: XSFTQ ! flux of water vapor                   (kg/m2/s) REAL , DIMENSION (:), ALLOCATABLE :: XSFU ! zonal momentum flux                   (pa) REAL , DIMENSION (:), ALLOCATABLE :: XSFV ! meridian momentum flux                (pa) REAL , DIMENSION (:), ALLOCATABLE :: XSFCO2 ! flux of CO2                           (m/s*kg_CO2/kg_air) REAL , DIMENSION (:,:), ALLOCATABLE :: XSFTS ! flux of scalar var.                   (kg/m2/s) ! REAL , DIMENSION (:), ALLOCATABLE :: XPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:), ALLOCATABLE :: XPEW_B_COEF ! needed if HCOUPLING='I' REAL , DIMENSION (:), ALLOCATABLE :: XPET_A_COEF REAL , DIMENSION (:), ALLOCATABLE :: XPEQ_A_COEF REAL , DIMENSION (:), ALLOCATABLE :: XPET_B_COEF REAL , DIMENSION (:), ALLOCATABLE :: XPEQ_B_COEF ! REAL , DIMENSION (:), ALLOCATABLE :: XTSURF ! effective temperature                  (K) REAL , DIMENSION (:), ALLOCATABLE :: XZ0 ! surface roughness length for momentum  (m) REAL , DIMENSION (:), ALLOCATABLE :: XZ0H ! surface roughness length for heat      (m) REAL , DIMENSION (:), ALLOCATABLE :: XQSURF ! specific humidity at surface           (kg/kg) ! !------------------------------------------------------------------------------ ! END MODULE MODD_FORC_ATM","tags":"","loc":"sourcefile/modd_forc_atm.f90.html"},{"title":"abor1_sfx.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines ABOR1_SFX Source Code abor1_sfx.F90 Source Code !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Copyright 1998-2013 Meteo-France ! This is part of the TEB software governed by the CeCILL licence version 2.1. ! See the following links for details: ! https://cecill.info/licences/Licence_CeCILL_V2.1-en.txt ! https://cecill.info/licences/Licence_CeCILL_V2.1-fr.txt !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !     ############################################################# SUBROUTINE ABOR1_SFX ( YTEXT ) !     ############################################################# ! !!****  *ABOR1_SFX* - abor1 subroutine !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!\tP. Le Moigne   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    06/2008 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! ! USE MODI_CLOSE_FILE USE MODD_SURF_CONF , ONLY : CPROGNAME ! !*       0.1   Declarations of arguments !              ------------------------- ! CHARACTER ( LEN =* ), INTENT ( IN ) :: YTEXT ! !*       0.2   Declarations of local variables !              ------------------------------- ! CHARACTER ( LEN = 6 ) :: YPROGRAM INTEGER :: ILUOUT = 25 ! logical unit of output file ! !------------------------------------------------------------------------------- ! !* get output listing file logical unit ! YPROGRAM = CPROGNAME ! ! IF ( YPROGRAM == 'ASCII ' . OR . YPROGRAM == 'TEXTE ' . OR . YPROGRAM == 'BINARY' ) THEN WRITE ( * , * ) YTEXT WRITE ( * , * ) '---------------------------------------------------------------------------' WRITE ( * , * ) 'MORE DETAILS ABOUT THE CRASH IN THE OUTPUT LISTING: SEE THE FILE NAMED    ' WRITE ( * , * ) 'LISTING_[NAME OF THE RUNNING .EXE: PGD, PREP, OFFLINE].txt              ' WRITE ( * , * ) '---------------------------------------------------------------------------' ENDIF ! WRITE ( ILUOUT , * ) '---------------------------------------------------------------------------' WRITE ( ILUOUT , * ) '---------------------------------------------------------------------------' WRITE ( ILUOUT , * ) '--------------------   FATAL ERROR intags":"","loc":"sourcefile/abor1_sfx.f90.html"},{"title":"close_file_asc.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines CLOSE_FILE_ASC Source Code close_file_asc.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE CLOSE_FILE_ASC ( HPROGRAM , KUNIT ) !     ####################################################### ! !!****  *CLOSE_FILE_ASC* - closes files read by surface in MESOHN !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    01/2003 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HPROGRAM ! main program INTEGER , INTENT ( IN ) :: KUNIT ! logical unit of file REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*       0.2   Declarations of local variables !              ------------------------------- ! !------------------------------------------------------------------------------- ! !* closes the file !  ------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'CLOSE_FILE_ASC' , 0 , ZHOOK_HANDLE ) CLOSE ( KUNIT ) IF ( LHOOK ) CALL DR_HOOK ( 'CLOSE_FILE_ASC' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE CLOSE_FILE_ASC","tags":"","loc":"sourcefile/close_file_asc.f90.html"},{"title":"ol_read_atm.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines OL_READ_ATM Source Code ol_read_atm.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE OL_READ_ATM (& HSURF_FILETYPE , HFORCING_FILETYPE , KFORC_STEP , & PTA , PQA , PWIND , PDIR_SW , PSCA_SW , PLW , PSNOW , PRAIN , PPS ,& PCO2 , PDIR , OLIMIT_QAIR ) !************************************************************************** ! !!    PURPOSE !!    ------- !         Read in the netcdf file the atmospheric forcing for the actual time !         step KFORC_STEP, and for the next one. !         The two time step are needed for the time interpolation of the !         forcing. !         If the end of the file  is reached, set the two step to the last !         values. !         Return undef value if the variable is not present !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      F. Habets   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original     06/2003 !!      P. Le Moigne 10/2004: set XCOUNT to 2 because of revised temporal loop in offline.f90: !!                            time evolution is done at the end of isba time step so first !!                            isba computation is done on first forcing time step !!      P. Le Moigne 10/2005: consistency checking between orographies read from forcing !!                            file and from initial file !!      B. Decharme  01/2009: Optional, limitation of Qair (<= Qsat(tair)) ! ! ! ! USE MODD_SURF_PAR , ONLY : XUNDEF !USE MODD_IO_SURF_OL, ONLY : XSTART,XCOUNT,XSTRIDE,LPARTR ! USE MODI_OL_READ_ATM_ASCII ! USE MODE_THERMOS ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! USE MODI_ABOR1_SFX ! IMPLICIT NONE ! ! global variables ! ! REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PTA !K REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PQA REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PWIND REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PDIR_SW REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PSCA_SW REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PLW REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PSNOW REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PRAIN REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PPS REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PCO2 REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PDIR INTEGER , INTENT ( IN ) :: KFORC_STEP CHARACTER ( LEN = 6 ) , INTENT ( IN ) :: HSURF_FILETYPE CHARACTER ( LEN = 6 ) , INTENT ( IN ) :: HFORCING_FILETYPE LOGICAL , INTENT ( IN ) :: OLIMIT_QAIR ! REAL , PARAMETER :: ZTAIR = 28 6.0 REAL , PARAMETER :: ZPSURF = 10132 5.0 ! REAL , DIMENSION ( SIZE ( PTA , 1 ), SIZE ( PTA , 2 )) :: ZWORK1 , ZWORK2 , ZQSAT ! INTEGER :: JFRC , IFRC , JJ , INI , INB ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! !set time variables IF ( LHOOK ) CALL DR_HOOK ( 'OL_READ_ATM' , 0 , ZHOOK_HANDLE ) !XSTART =KFORC_STEP !XCOUNT =SIZE(PTA,2) !XSTRIDE=1 !LPARTR=.TRUE. ! ! read data ! CALL OL_READ_ATM_ASCII ( KFORC_STEP , & PTA , PQA , PWIND , PDIR_SW , PSCA_SW , PLW , PSNOW , PRAIN , PPS ,& PCO2 , PDIR ) ! ! Assume Qair <= Qsat_air ! IF ( OLIMIT_QAIR ) THEN ! INI = SIZE ( PTA , 1 ) IFRC = SIZE ( PTA , 2 ) INB = 0 ! DO JFRC = 1 , IFRC DO JJ = 1 , INI IF ( PTA ( JJ , JFRC ) > 0.0 . AND . PTA ( JJ , JFRC ) /= XUNDEF ) THEN INB = INB + 1 ZWORK1 ( JJ , JFRC ) = PTA ( JJ , JFRC ) ZWORK2 ( JJ , JFRC ) = PPS ( JJ , JFRC ) ELSE ZWORK1 ( JJ , JFRC ) = ZTAIR ZWORK2 ( JJ , JFRC ) = ZPSURF PTA ( JJ , JFRC ) = XUNDEF PQA ( JJ , JFRC ) = 0.0 ENDIF ENDDO ENDDO ! IF ( INB == 0 . AND . INI /= 0 ) THEN CALL ABOR1_SFX ( 'OL_READ_ATM: THE FORCING IS UNDEFINED' ) ENDIF ! ZQSAT (:,:) = QSAT ( ZWORK1 (:,:), ZWORK2 (:,:)) ! PQA (:,:) = MIN ( PQA (:,:), ZQSAT (:,:)) ! ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( 'OL_READ_ATM' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE OL_READ_ATM","tags":"","loc":"sourcefile/ol_read_atm.f90.html"},{"title":"modi_ol_time_interp_atm.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_OL_TIME_INTERP_ATM Source Code modi_ol_time_interp_atm.F90 Source Code !auto_modi:spll_ol_time_interp_atm.D MODULE MODI_OL_TIME_INTERP_ATM INTERFACE SUBROUTINE OL_TIME_INTERP_ATM ( KSURF_STEP , KNB_ATM , & PTA1 , PTA2 , PQA1 , PQA2 , PWIND1 , PWIND2 , & PDIR_SW1 , PDIR_SW2 , PSCA_SW1 , PSCA_SW2 , & PLW1 , PLW2 , PSNOW2 , PRAIN2 , & PPS1 , PPS2 , PCO21 , PCO22 , PDIR1 , PDIR2 , & PZEN , PSUMZEN ) IMPLICIT NONE INTEGER , INTENT ( IN ) :: KSURF_STEP , KNB_ATM REAL , DIMENSION (:), INTENT ( IN ) :: PTA1 , PTA2 , PQA1 , PQA2 , PWIND1 , PWIND2 REAL , DIMENSION (:), INTENT ( IN ) :: PDIR_SW1 , PDIR_SW2 , PSCA_SW1 , PSCA_SW2 , PLW1 , PLW2 REAL , DIMENSION (:), INTENT ( IN ) :: PSNOW2 , PRAIN2 , PPS1 , PPS2 , PCO21 , PCO22 , PDIR1 , PDIR2 REAL , DIMENSION (:), INTENT ( IN ) :: PZEN , PSUMZEN END SUBROUTINE OL_TIME_INTERP_ATM END INTERFACE END MODULE MODI_OL_TIME_INTERP_ATM","tags":"","loc":"sourcefile/modi_ol_time_interp_atm.f90.html"},{"title":"modi_ol_alloc_atm.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_OL_ALLOC_ATM Source Code modi_ol_alloc_atm.F90 Source Code !auto_modi:spll_ol_alloc_atm.D MODULE MODI_OL_ALLOC_ATM INTERFACE SUBROUTINE OL_ALLOC_ATM ( KNI , KBANDS , KSCAL ) IMPLICIT NONE INTEGER , INTENT ( IN ) :: KNI ! grid dimension INTEGER , INTENT ( IN ) :: KBANDS ! grid dimension INTEGER , INTENT ( IN ) :: KSCAL ! grid dimension END SUBROUTINE OL_ALLOC_ATM END INTERFACE END MODULE MODI_OL_ALLOC_ATM","tags":"","loc":"sourcefile/modi_ol_alloc_atm.f90.html"},{"title":"ol_read_atm_ascii.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines OL_READ_ATM_ASCII Source Code ol_read_atm_ascii.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE OL_READ_ATM_ASCII ( KFORC_STEP , & PTA , PQA , PWIND , PDIR_SW , PSCA_SW , PLW , PSNOW , & PRAIN , PPS , PCO2 , PDIR ) !************************************************************************** ! !!    PURPOSE !!    ------- !         Read in the ascii file the atmospheric forcing for the actual time !         step KFORC_STEP, and for the next one. !         The two time step are needed for the time interpolation of the !         forcing. !         If the end of the file  is reached, set the two step to the last !         values. !         Return undef value if the variable is not present !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      A. Lemonsu  *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original     03/2008 ! USE MODI_READ_SURF_ATM ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! ! global variables REAL , DIMENSION (:,:), INTENT ( OUT ) :: PTA REAL , DIMENSION (:,:), INTENT ( OUT ) :: PQA REAL , DIMENSION (:,:), INTENT ( OUT ) :: PWIND REAL , DIMENSION (:,:), INTENT ( OUT ) :: PDIR_SW REAL , DIMENSION (:,:), INTENT ( OUT ) :: PSCA_SW REAL , DIMENSION (:,:), INTENT ( OUT ) :: PLW REAL , DIMENSION (:,:), INTENT ( OUT ) :: PSNOW REAL , DIMENSION (:,:), INTENT ( OUT ) :: PRAIN REAL , DIMENSION (:,:), INTENT ( OUT ) :: PPS REAL , DIMENSION (:,:), INTENT ( OUT ) :: PCO2 REAL , DIMENSION (:,:), INTENT ( OUT ) :: PDIR INTEGER , INTENT ( IN ) :: KFORC_STEP ! local variables REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! read data IF ( LHOOK ) CALL DR_HOOK ( 'OL_READ_ATM_ASCII' , 0 , ZHOOK_HANDLE ) CALL READ_SURF_ATM ( 'ASCII ' , PTA (:, 1 : 2 ), KFORC_STEP , 2 , 122 ) CALL READ_SURF_ATM ( 'ASCII ' , PQA (:, 1 : 2 ), KFORC_STEP , 2 , 123 ) CALL READ_SURF_ATM ( 'ASCII ' , PWIND (:, 1 : 2 ), KFORC_STEP , 2 , 124 ) CALL READ_SURF_ATM ( 'ASCII ' , PLW (:, 1 : 2 ), KFORC_STEP , 2 , 125 ) CALL READ_SURF_ATM ( 'ASCII ' , PDIR_SW (:, 1 : 2 ), KFORC_STEP , 2 , 126 ) CALL READ_SURF_ATM ( 'ASCII ' , PSCA_SW (:, 1 : 2 ), KFORC_STEP , 2 , 127 ) CALL READ_SURF_ATM ( 'ASCII ' , PRAIN (:, 1 : 2 ), KFORC_STEP , 2 , 128 ) CALL READ_SURF_ATM ( 'ASCII ' , PSNOW (:, 1 : 2 ), KFORC_STEP , 2 , 129 ) CALL READ_SURF_ATM ( 'ASCII ' , PPS (:, 1 : 2 ), KFORC_STEP , 2 , 130 ) CALL READ_SURF_ATM ( 'ASCII ' , PDIR (:, 1 : 2 ), KFORC_STEP , 2 , 131 ) CALL READ_SURF_ATM ( 'ASCII ' , PCO2 (:, 1 : 2 ), KFORC_STEP , 2 , 132 ) ! IF ( LHOOK ) CALL DR_HOOK ( 'OL_READ_ATM_ASCII' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE OL_READ_ATM_ASCII","tags":"","loc":"sourcefile/ol_read_atm_ascii.f90.html"},{"title":"ol_alloc_atm.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines OL_ALLOC_ATM Source Code ol_alloc_atm.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE OL_ALLOC_ATM ( KNI , KBANDS , KSCAL ) !     ################################################################################# ! !! !!    MODIFICATIONS !!    ------------- !     05/2013  B. Decharme : New coupling variables (for AGCM) !------------------------------------------------------------------------------- ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_FORC_ATM , ONLY : CSV ,& ! name of all scalar variables XDIR_ALB ,& ! direct albedo for each band XSCA_ALB ,& ! diffuse albedo for each band XEMIS ,& ! emissivity XTSRAD ,& ! radiative temperature XTSUN ,& ! solar time                    (s from midnight) XZS ,& ! orography                             (m) XZREF ,& ! height of T,q forcing                 (m) XUREF ,& ! height of wind forcing                (m) XTA ,& ! air temperature forcing               (K) XQA ,& ! air specific humidity forcing         (kg/m3) XRHOA ,& ! air density forcing                   (kg/m3) XSV ,& ! scalar variables XU ,& ! zonal wind                            (m/s) XV ,& ! meridian wind                         (m/s) XDIR_SW ,& ! direct  solar radiation (on horizontal surf.) XSCA_SW ,& ! diffuse solar radiation (on horizontal surf.) XSW_BANDS ,& ! mean wavelength of each shortwave band (m) XZENITH ,& ! zenithal angle at t      (radian from the vertical) XZENITH2 ,& ! zenithal angle at t+1    (radian from the vertical) XAZIM ,& ! azimuthal angle      (radian from North, clockwise) XLW ,& ! longwave radiation (on horizontal surf.) XPS ,& ! pressure at atmospheric model surface (Pa) XPA ,& ! pressure at forcing level             (Pa) XCO2 ,& ! CO2 concentration in the air          (kg/kg) XSNOW ,& ! snow precipitation                    (kg/m2/s) XRAIN ,& ! liquid precipitation                  (kg/m2/s) XSFTH ,& ! flux of heat                          (W/m2) XSFTQ ,& ! flux of water vapor                   (kg/m2/s) XSFU ,& ! zonal momentum flux                   (pa) XSFV ,& ! meridian momentum flux                (pa) XSFCO2 ,& ! flux of CO2                           (kg/m2/s) XSFTS ,& ! flux of scalar var.                   (kg/m2/s) XPEW_A_COEF ,& ! implicit coefficients XPEW_B_COEF ,& ! needed if HCOUPLING='I' XPET_A_COEF ,& XPEQ_A_COEF ,& XPET_B_COEF ,& XPEQ_B_COEF ,& XTSURF ,& XZ0 ,& XZ0H ,& XQSURF ! ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! INTEGER , INTENT ( IN ) :: KNI ! grid dimension INTEGER , INTENT ( IN ) :: KBANDS ! grid dimension INTEGER , INTENT ( IN ) :: KSCAL ! grid dimension REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! !*      0.2    declarations of local variables ! !------------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'OL_ALLOC_ATM' , 0 , ZHOOK_HANDLE ) IF (. NOT . ALLOCATED ( CSV )) ALLOCATE ( CSV ( KSCAL ) ) ! name of all scalar variables IF (. NOT . ALLOCATED ( XDIR_ALB )) ALLOCATE ( XDIR_ALB ( KNI , KBANDS )) ! direct albedo for each band IF (. NOT . ALLOCATED ( XSCA_ALB )) ALLOCATE ( XSCA_ALB ( KNI , KBANDS )) ! diffuse albedo for each band IF (. NOT . ALLOCATED ( XEMIS )) ALLOCATE ( XEMIS ( KNI ) ) ! emissivity IF (. NOT . ALLOCATED ( XTSRAD )) ALLOCATE ( XTSRAD ( KNI ) ) ! radiative temperature IF (. NOT . ALLOCATED ( XTSUN )) ALLOCATE ( XTSUN ( KNI ) ) ! solar time                    (s from midnight) IF (. NOT . ALLOCATED ( XZREF )) ALLOCATE ( XZREF ( KNI ) ) ! height of T,q forcing                 (m) IF (. NOT . ALLOCATED ( XUREF )) ALLOCATE ( XUREF ( KNI ) ) ! height of wind forcing                (m) IF (. NOT . ALLOCATED ( XTA )) ALLOCATE ( XTA ( KNI ) ) ! air temperature forcing               (K) IF (. NOT . ALLOCATED ( XQA )) ALLOCATE ( XQA ( KNI ) ) ! air specific humidity forcing         (kg/m3) IF (. NOT . ALLOCATED ( XZS )) ALLOCATE ( XZS ( KNI ) ) ! orography                             (m) IF (. NOT . ALLOCATED ( XRHOA )) ALLOCATE ( XRHOA ( KNI ) ) ! air density forcing                   (kg/m3) IF (. NOT . ALLOCATED ( XSV )) ALLOCATE ( XSV ( KNI , KSCAL ) ) ! scalar variables IF (. NOT . ALLOCATED ( XU )) ALLOCATE ( XU ( KNI ) ) ! zonal wind                            (m/s) IF (. NOT . ALLOCATED ( XV )) ALLOCATE ( XV ( KNI ) ) ! meridian wind                         (m/s) IF (. NOT . ALLOCATED ( XDIR_SW )) ALLOCATE ( XDIR_SW ( KNI , KBANDS )) ! direct  solar radiation (on horizontal surf.) IF (. NOT . ALLOCATED ( XSCA_SW )) ALLOCATE ( XSCA_SW ( KNI , KBANDS )) ! diffuse solar radiation (on horizontal surf.) IF (. NOT . ALLOCATED ( XSW_BANDS )) ALLOCATE ( XSW_BANDS ( KBANDS ) ) ! mean wavelength of each shortwave band (m) IF (. NOT . ALLOCATED ( XZENITH )) ALLOCATE ( XZENITH ( KNI ) ) ! zenithal angle       (radian from the vertical) IF (. NOT . ALLOCATED ( XZENITH2 )) ALLOCATE ( XZENITH2 ( KNI ) ) ! zenithal angle at t+1(radian from the vertical) IF (. NOT . ALLOCATED ( XAZIM )) ALLOCATE ( XAZIM ( KNI ) ) ! azimuthal angle      (radian from North, clockwise) IF (. NOT . ALLOCATED ( XLW )) ALLOCATE ( XLW ( KNI ) ) ! longwave radiation (on horizontal surf.) IF (. NOT . ALLOCATED ( XPS )) ALLOCATE ( XPS ( KNI ) ) ! pressure at atmospheric model surface (Pa) IF (. NOT . ALLOCATED ( XPA )) ALLOCATE ( XPA ( KNI ) ) ! pressure at forcing level             (Pa) IF (. NOT . ALLOCATED ( XCO2 )) ALLOCATE ( XCO2 ( KNI ) ) ! CO2 concentration in the air          (kg/kg) IF (. NOT . ALLOCATED ( XSNOW )) ALLOCATE ( XSNOW ( KNI ) ) ! snow precipitation                    (kg/m2/s) IF (. NOT . ALLOCATED ( XRAIN )) ALLOCATE ( XRAIN ( KNI ) ) ! liquid precipitation                  (kg/m2/s) IF (. NOT . ALLOCATED ( XSFTH )) ALLOCATE ( XSFTH ( KNI ) ) ! flux of heat                          (W/m2) IF (. NOT . ALLOCATED ( XSFTQ )) ALLOCATE ( XSFTQ ( KNI ) ) ! flux of water vapor                   (kg/m2/s) IF (. NOT . ALLOCATED ( XSFU )) ALLOCATE ( XSFU ( KNI ) ) ! zonal momentum flux                   (pa) IF (. NOT . ALLOCATED ( XSFV )) ALLOCATE ( XSFV ( KNI ) ) ! meridian momentum flux                (pa) IF (. NOT . ALLOCATED ( XSFCO2 )) ALLOCATE ( XSFCO2 ( KNI ) ) ! flux of CO2                           (kg/m2/s) IF (. NOT . ALLOCATED ( XSFTS )) ALLOCATE ( XSFTS ( KNI , KSCAL ) ) ! flux of scalar var.                  (kg/m2/s) IF (. NOT . ALLOCATED ( XPEW_A_COEF )) ALLOCATE ( XPEW_A_COEF ( KNI ) ) ! implicit coefficients IF (. NOT . ALLOCATED ( XPEW_B_COEF )) ALLOCATE ( XPEW_B_COEF ( KNI ) ) ! needed if HCOUPLING='I' IF (. NOT . ALLOCATED ( XPET_A_COEF )) ALLOCATE ( XPET_A_COEF ( KNI ) ) IF (. NOT . ALLOCATED ( XPEQ_A_COEF )) ALLOCATE ( XPEQ_A_COEF ( KNI ) ) IF (. NOT . ALLOCATED ( XPET_B_COEF )) ALLOCATE ( XPET_B_COEF ( KNI ) ) IF (. NOT . ALLOCATED ( XPEQ_B_COEF )) ALLOCATE ( XPEQ_B_COEF ( KNI ) ) IF (. NOT . ALLOCATED ( XTSURF )) ALLOCATE ( XTSURF ( KNI ) ) IF (. NOT . ALLOCATED ( XZ0 ) ) ALLOCATE ( XZ0 ( KNI ) ) IF (. NOT . ALLOCATED ( XZ0H ) ) ALLOCATE ( XZ0H ( KNI ) ) IF (. NOT . ALLOCATED ( XQSURF )) ALLOCATE ( XQSURF ( KNI ) ) ! IF ( SIZE ( CSV ) >= 1 ) CSV ( 1 ) = '#CO   ' IF ( SIZE ( CSV ) >= 2 ) CSV ( 2 ) = '#O3   ' IF ( SIZE ( CSV ) >= 3 ) CSV ( 3 ) = '#H2O2 ' IF ( SIZE ( CSV ) >= 4 ) CSV ( 4 ) = '#NO   ' IF ( SIZE ( CSV ) >= 5 ) CSV ( 5 ) = '#NO2  ' IF ( SIZE ( CSV ) >= 6 ) CSV ( 6 ) = '#NO3  ' IF ( SIZE ( CSV ) >= 7 ) CSV ( 7 ) = '#N2O5 ' IF ( SIZE ( CSV ) >= 8 ) CSV ( 8 ) = '#HONO ' IF ( SIZE ( CSV ) >= 9 ) CSV ( 9 ) = '#HNO3 ' IF ( SIZE ( CSV ) >= 10 ) CSV ( 10 ) = '#HNO4 ' IF ( SIZE ( CSV ) >= 11 ) CSV ( 11 ) = '#NH3  ' IF ( SIZE ( CSV ) >= 12 ) CSV ( 12 ) = '#SO2  ' IF ( SIZE ( CSV ) >= 13 ) CSV ( 13 ) = '#SULF ' IF ( SIZE ( CSV ) >= 14 ) CSV ( 14 ) = '#OH   ' IF ( SIZE ( CSV ) >= 15 ) CSV ( 15 ) = '#HO2  ' IF ( SIZE ( CSV ) >= 16 ) CSV ( 16 ) = '#CH4  ' IF ( SIZE ( CSV ) >= 17 ) CSV ( 17 ) = '#ETH  ' IF ( SIZE ( CSV ) >= 18 ) CSV ( 18 ) = '#ALKA ' IF ( SIZE ( CSV ) >= 19 ) CSV ( 19 ) = '#ALKE ' IF ( SIZE ( CSV ) >= 20 ) CSV ( 20 ) = '#BIO  ' IF ( SIZE ( CSV ) >= 21 ) CSV ( 21 ) = '#ARO  ' IF ( SIZE ( CSV ) >= 22 ) CSV ( 22 ) = '#HCHO ' IF ( SIZE ( CSV ) >= 23 ) CSV ( 23 ) = '#ALD  ' IF ( SIZE ( CSV ) >= 24 ) CSV ( 24 ) = '#KET  ' IF ( SIZE ( CSV ) >= 25 ) CSV ( 25 ) = '#CARBO' IF ( SIZE ( CSV ) >= 26 ) CSV ( 26 ) = '#ONIT ' IF ( SIZE ( CSV ) >= 27 ) CSV ( 27 ) = '#PAN  ' IF ( SIZE ( CSV ) >= 28 ) CSV ( 28 ) = '#OP1  ' IF ( SIZE ( CSV ) >= 29 ) CSV ( 29 ) = '#OP2  ' IF ( SIZE ( CSV ) >= 30 ) CSV ( 30 ) = '#ORA  ' IF ( SIZE ( CSV ) >= 31 ) CSV ( 31 ) = '#ORA2 ' IF ( SIZE ( CSV ) >= 32 ) CSV ( 32 ) = '#MO2  ' IF ( SIZE ( CSV ) >= 33 ) CSV ( 33 ) = '#ALKAP' IF ( SIZE ( CSV ) >= 34 ) CSV ( 34 ) = '#ALKEP' IF ( SIZE ( CSV ) >= 35 ) CSV ( 35 ) = '#BIOP ' IF ( SIZE ( CSV ) >= 36 ) CSV ( 36 ) = '#PHO  ' IF ( SIZE ( CSV ) >= 37 ) CSV ( 37 ) = '#ADD  ' IF ( SIZE ( CSV ) >= 38 ) CSV ( 38 ) = '#AROP ' IF ( SIZE ( CSV ) >= 39 ) CSV ( 39 ) = '#CARBO' IF ( SIZE ( CSV ) >= 40 ) CSV ( 40 ) = '#OLN  ' IF ( SIZE ( CSV ) >= 41 ) CSV ( 41 ) = '#XO2  ' IF ( SIZE ( CSV ) >= 42 ) CSV ( 42 ) = '@M0I ' IF ( SIZE ( CSV ) >= 43 ) CSV ( 43 ) = '@M0J ' IF ( SIZE ( CSV ) >= 44 ) CSV ( 44 ) = '@M6I ' IF ( SIZE ( CSV ) >= 45 ) CSV ( 45 ) = '@M6J ' IF ( SIZE ( CSV ) >= 46 ) CSV ( 46 ) = '@H2OI' IF ( SIZE ( CSV ) >= 47 ) CSV ( 47 ) = '@H2OJ' IF ( SIZE ( CSV ) >= 48 ) CSV ( 48 ) = '@SO4I' IF ( SIZE ( CSV ) >= 49 ) CSV ( 49 ) = '@SO4J' IF ( SIZE ( CSV ) >= 50 ) CSV ( 50 ) = '@NO3I' IF ( SIZE ( CSV ) >= 51 ) CSV ( 51 ) = '@NO3J' IF ( SIZE ( CSV ) >= 52 ) CSV ( 52 ) = '@NH3I' IF ( SIZE ( CSV ) >= 53 ) CSV ( 53 ) = '@NH3J' IF ( SIZE ( CSV ) >= 54 ) CSV ( 54 ) = '@OCI' IF ( SIZE ( CSV ) >= 55 ) CSV ( 55 ) = '@OCJ' IF ( SIZE ( CSV ) >= 56 ) CSV ( 56 ) = '@BCI' IF ( SIZE ( CSV ) >= 57 ) CSV ( 57 ) = '@BCJ' IF ( SIZE ( CSV ) >= 58 ) CSV ( 58 ) = '@DSTI' IF ( SIZE ( CSV ) >= 59 ) CSV ( 59 ) = '@DSTJ' ! !CSV       (:)  ='UNDEF '! name of all scalar variables XDIR_ALB (:,:) = XUNDEF ! direct albedo for each band XSCA_ALB (:,:) = XUNDEF ! diffuse albedo for each band XEMIS (:) = XUNDEF ! emissivity XTSRAD (:) = XUNDEF ! radiative temperature XTSUN (:) = XUNDEF ! solar time                    (s from midnight) XZREF (:) = XUNDEF ! height of T,q forcing                 (m) XUREF (:) = XUNDEF ! height of wind forcing                (m) XTA (:) = XUNDEF ! air temperature forcing               (K) XQA (:) = XUNDEF ! air specific humidity forcing         (kg/m3) XRHOA (:) = XUNDEF ! air density forcing                   (kg/m3) XSV (:,:) = XUNDEF ! scalar variables XU (:) = XUNDEF ! zonal wind                            (m/s) XV (:) = XUNDEF ! meridian wind                         (m/s) XDIR_SW (:,:) = XUNDEF ! direct  solar radiation (on horizontal surf.) XSCA_SW (:,:) = XUNDEF ! diffuse solar radiation (on horizontal surf.) XSW_BANDS (:) = XUNDEF ! mean wavelength of each shortwave band (m) XZENITH (:) = XUNDEF ! zenithal angle at t      (radian from the vertical) XZENITH2 (:) = XUNDEF ! zenithal angle at t+1      (radian from the vertical) XAZIM (:) = XUNDEF ! azimuthal angle      (radian from North, clockwise) XLW (:) = XUNDEF ! longwave radiation (on horizontal surf.) XPS (:) = XUNDEF ! pressure at atmospheric model surface (Pa) XPA (:) = XUNDEF ! pressure at forcing level             (Pa) XZS (:) = XUNDEF ! atmospheric model orography           (m) XCO2 (:) = XUNDEF ! CO2 concentration in the air          (kg/kg) XSNOW (:) = XUNDEF ! snow precipitation                    (kg/m2/s) XRAIN (:) = XUNDEF ! liquid precipitation                  (kg/m2/s) XSFTH (:) = XUNDEF ! flux of heat                          (W/m2) XSFTQ (:) = XUNDEF ! flux of water vapor                   (kg/m2/s) XSFU (:) = XUNDEF ! zonal momentum flux                   (pa) XSFV (:) = XUNDEF ! meridian momentum flux                (pa) XSFCO2 (:) = XUNDEF ! flux of CO2                           (kg/m2/s) XSFTS (:,:) = XUNDEF ! flux of scalar var.                 (kg/m2/s) XPEW_A_COEF (:) = XUNDEF ! implicit coefficients XPEW_B_COEF (:) = XUNDEF ! needed if HCOUPLING='I' XPET_A_COEF (:) = XUNDEF XPEQ_A_COEF (:) = XUNDEF XPET_B_COEF (:) = XUNDEF XPEQ_B_COEF (:) = XUNDEF XTSURF (:) = XUNDEF ! effective temperature                  (K) XZ0 (:) = XUNDEF ! surface roughness length for momentum  (m) XZ0H (:) = XUNDEF ! surface roughness length for heat      (m) XQSURF (:) = XUNDEF ! specific humidity at surface           (kg/kg) ! IF ( LHOOK ) CALL DR_HOOK ( 'OL_ALLOC_ATM' , 1 , ZHOOK_HANDLE ) END SUBROUTINE OL_ALLOC_ATM","tags":"","loc":"sourcefile/ol_alloc_atm.f90.html"},{"title":"ol_time_interp_atm.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines OL_TIME_INTERP_ATM Source Code ol_time_interp_atm.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######spl SUBROUTINE OL_TIME_INTERP_ATM ( KSURF_STEP , KNB_ATM , & PTA1 , PTA2 , PQA1 , PQA2 , PWIND1 , PWIND2 , & PDIR_SW1 , PDIR_SW2 , PSCA_SW1 , PSCA_SW2 , & PLW1 , PLW2 , PSNOW2 , PRAIN2 , & PPS1 , PPS2 , PCO21 , PCO22 , PDIR1 , PDIR2 , & PZEN , PSUMZEN ) !************************************************************************** ! !!    PURPOSE !!    ------- !        Time interpolation of the atmospheric forcing !        So far, it is a simple linear interpolation. !        More complex interpolation may be added, especially for the atmospheric !        radiation (Option to use). !        Output are in the module !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      F. Habets   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    06/2003 ! ! USE MODD_CSTS , ONLY : XPI , XRD , XRV , XG USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_FORC_ATM , ONLY : XTA ,& ! air temperature forcing               (K) XQA ,& ! air specific humidity forcing         (kg/m3) XRHOA ,& ! air density forcing                   (kg/m3) XZS ,& ! orography                             (m) XU ,& ! zonal wind                            (m/s) XV ,& ! meridian wind                         (m/s) XDIR_SW ,& ! direct  solar radiation (on horizontal surf.) XSCA_SW ,& ! diffuse solar radiation (on horizontal surf.) XLW ,& ! longwave radiation (on horizontal surf.) XPS ,& ! pressure at atmospheric model surface (Pa) XPA ,& ! pressure at forcing level             (Pa) XRHOA ,& ! density at forcing level              (kg/m3) XCO2 ,& ! CO2 concentration in the air          (kg/kg) XSNOW ,& ! snow precipitation                    (kg/m2/s) XRAIN ,& ! liquid precipitation                  (kg/m2/s) XZREF ! height of T,q forcing                 (m) ! USE MODI_ABOR1_SFX ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! #ifdef AIX64 !$ USE OMP_LIB #endif ! IMPLICIT NONE ! ! #ifndef AIX64 !$ INCLUDE 'omp_lib.h' #endif ! ! global variables INTEGER , INTENT ( IN ) :: KSURF_STEP , KNB_ATM REAL , DIMENSION (:), INTENT ( IN ) :: PTA1 , PTA2 , PQA1 , PQA2 , PWIND1 , PWIND2 REAL , DIMENSION (:), INTENT ( IN ) :: PDIR_SW1 , PDIR_SW2 , PSCA_SW1 , PSCA_SW2 , PLW1 , PLW2 REAL , DIMENSION (:), INTENT ( IN ) :: PSNOW2 , PRAIN2 , PPS1 , PPS2 , PCO21 , PCO22 , PDIR1 , PDIR2 REAL , DIMENSION (:), INTENT ( IN ) :: PZEN , PSUMZEN ! local variables REAL :: ZDTA , ZDQA , ZDDIR_SW , ZDSCA_SW , ZDLW , & ZDPS , ZDCO2 , ZDU , ZDV , ZU1 , ZV1 , ZU2 , ZV2 REAL :: ZPI , ZNB_ATM , ZSURF_STEP , ZCOEF , ZCOEF2 INTEGER :: J INTEGER :: ILUOUT REAL ( KIND = JPRB ) :: ZHOOK_HANDLE , ZHOOK_HANDLE_OMP LOGICAL :: LINTERP_SW = . FALSE . !======================================================================== ! IF ( LHOOK ) CALL DR_HOOK ( 'OL_TIME_INTERP_ATM_1' , 0 , ZHOOK_HANDLE ) ! ILUOUT = 10 ! ZPI = XPI / 18 0. ZNB_ATM = KNB_ATM * 1. ZSURF_STEP = KSURF_STEP * 1. - 1. ZCOEF = ZSURF_STEP / ZNB_ATM ! IF ( LHOOK ) CALL DR_HOOK ( 'OL_TIME_INTERP_ATM_1' , 1 , ZHOOK_HANDLE ) ! !$OMP PARALLEL PRIVATE(ZHOOK_HANDLE_OMP) IF ( LHOOK ) CALL DR_HOOK ( 'OL_TIME_INTERP_ATM_2' , 0 , ZHOOK_HANDLE_OMP ) !$OMP DO PRIVATE(J,ZU1,ZU2,ZV1,ZV2,ZDU,ZDV,ZDTA, & !$OMP ZDQA,ZDLW,ZDPS,ZDCO2,ZDDIR_SW,ZDSCA_SW,ZCOEF2) DO J = 1 , SIZE ( PTA1 ) ! IF ( PTA1 ( J ) /= XUNDEF ) THEN ! ! Compute wind components ! ! zonal wind ZU1 = PWIND1 ( J ) * SIN ( PDIR1 ( J ) * ZPI ) ZU2 = PWIND2 ( J ) * SIN ( PDIR2 ( J ) * ZPI ) ZDU = ( ZU2 - ZU1 ) * ZCOEF XU ( J ) = ZU1 + ZDU ! ZV1 = PWIND1 ( J ) * COS ( PDIR1 ( J ) * ZPI ) ZV2 = PWIND2 ( J ) * COS ( PDIR2 ( J ) * ZPI ) ZDV = ( ZV2 - ZV1 ) * ZCOEF XV ( J ) = ZV1 + ZDV ! ! Compute variation from atmospheric time step J and J+1 ! ZDTA = ( PTA2 ( J ) - PTA1 ( J )) * ZCOEF XTA ( J ) = PTA1 ( J ) + ZDTA ! ZDQA = ( PQA2 ( J ) - PQA1 ( J )) * ZCOEF XQA ( J ) = PQA1 ( J ) + ZDQA ! ZDLW = ( PLW2 ( J ) - PLW1 ( J )) * ZCOEF XLW ( J ) = PLW1 ( J ) + ZDLW ! ZDPS = ( PPS2 ( J ) - PPS1 ( J )) * ZCOEF XPS ( J ) = PPS1 ( J ) + ZDPS ! ZDCO2 = ( PCO22 ( J ) - PCO21 ( J )) * ZCOEF XCO2 ( J ) = PCO21 ( J ) + ZDCO2 ! IF ( LINTERP_SW ) THEN ! ZCOEF2 = 0. IF ( PSUMZEN ( J ) > 0. ) ZCOEF2 = MAX (( COS ( PZEN ( J )) / PSUMZEN ( J )), 0. ) ! XDIR_SW ( J , 1 ) = MIN ( PDIR_SW2 ( J ) * ZCOEF2 , 130 0.0 * MAX ( COS ( PZEN ( J )), 0. )) ! XSCA_SW ( J , 1 ) = MIN ( PSCA_SW2 ( J ) * ZCOEF2 , 130 0.0 * MAX ( COS ( PZEN ( J )), 0. )) ! ELSE ! ZDDIR_SW = ( PDIR_SW2 ( J ) - PDIR_SW1 ( J )) * ZCOEF XDIR_SW ( J , 1 ) = PDIR_SW1 ( J ) + ZDDIR_SW ! ZDSCA_SW = ( PSCA_SW2 ( J ) - PSCA_SW1 ( J )) * ZCOEF XSCA_SW ( J , 1 ) = PSCA_SW1 ( J ) + ZDSCA_SW ! ENDIF ! ! XRAIN ( J ) = PRAIN2 ( J ) XSNOW ( J ) = PSNOW2 ( J ) ! ! XRHOA ( J ) = XPS ( J ) / ( XTA ( J ) * XRD * ( 1. + (( XRV / XRD ) - 1. ) * XQA ( J ) ) + XZREF ( J ) * XG ) ! ! humidity in kg/m3 XQA ( J ) = XQA ( J ) * XRHOA ( J ) ! ENDIF ! ENDDO !$OMP END DO IF ( LHOOK ) CALL DR_HOOK ( 'OL_TIME_INTERP_ATM_2' , 1 , ZHOOK_HANDLE_OMP ) !$OMP END PARALLEL ! IF ( LHOOK ) CALL DR_HOOK ( 'OL_TIME_INTERP_ATM_3' , 0 , ZHOOK_HANDLE ) ! air density ! ! Check No value data !--------------------- ! Error cases ! IF (( MINVAL ( XTA ) . EQ . XUNDEF ). OR .( MINVAL ( XQA ). EQ . XUNDEF ). OR .& ( MINVAL ( XU ). EQ . XUNDEF ). OR .( MINVAL ( XRAIN ). EQ . XUNDEF ). OR .& ( MINVAL ( XSNOW ). EQ . XUNDEF )) THEN WRITE ( ILUOUT , * ) 'MINVAL(XTA),MINVAL(XQA),MINVAL(XU),MINVAL(XRAIN),MINVAL(XSNOW)' WRITE ( ILUOUT , * ) MINVAL ( XTA ), MINVAL ( XQA ), MINVAL ( XU ), MINVAL ( XRAIN ), MINVAL ( XSNOW ) CALL ABOR1_SFX ( 'OL_TIME_INTERP_ATM: UNDEFINED VALUE IN ATMOSPHERIC FORCING' ) ENDIF ! IF (( MINVAL ( XDIR_SW ). EQ . XUNDEF ). AND .( MINVAL ( XSCA_SW ). EQ . XUNDEF )) THEN WRITE ( ILUOUT , * ) 'MINVAL(XSCA_SW),MINVAL(XDIR_SW)' WRITE ( ILUOUT , * ) MINVAL ( XSCA_SW ), MINVAL ( XDIR_SW ) CALL ABOR1_SFX ( 'OL_TIME_INTERP_ATM: UNDEFINED VALUE IN ATMOSPHERIC FORCING' ) ENDIF ! IF (( MINVAL ( XPS ). EQ . XUNDEF ). AND .( MINVAL ( XZS ). EQ . XUNDEF )) THEN WRITE ( ILUOUT , * ) 'MINVAL(XPS),MINVAL(XZS)' WRITE ( ILUOUT , * ) MINVAL ( XPS ), MINVAL ( XZS ) CALL ABOR1_SFX ( 'OL_TIME_INTERP_ATM: UNDEFINED VALUE IN ATMOSPHERIC FORCING' ) ENDIF ! IF ( MINVAL ( XDIR_SW ). EQ . XUNDEF ) XDIR_SW (:,:) = 0. ! No direct solar radiation IF ( MINVAL ( XSCA_SW ). EQ . XUNDEF ) XSCA_SW (:,:) = 0. ! No diffuse solar radiation IF ( MINVAL ( XPS ) . EQ . XUNDEF ) THEN ! No surface Pressure WRITE ( ILUOUT , * ) ' OL_TIME_INTERP_ATM: SURFACE PRESSURE COMPUTED FROM ZS' XPS (:) = 101325 * ( 1 - 0.0065 * XZS (:) / 28 8.15 ) ** 5.31 ENDIF ! !* forcing level pressure from hydrostatism WHERE ( XPS (:) /= XUNDEF ) XPA (:) = XPS (:) - XRHOA (:) * XZREF (:) * XG ENDWHERE ! IF ( LHOOK ) CALL DR_HOOK ( 'OL_TIME_INTERP_ATM_3' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE OL_TIME_INTERP_ATM","tags":"","loc":"sourcefile/ol_time_interp_atm.f90.html"},{"title":"close_file.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines CLOSE_FILE Source Code close_file.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE CLOSE_FILE ( HPROGRAM , KUNIT ) !     ####################################################### ! !!****  *CLOSE_FILE* - generic routine to close a file !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    01/2004 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! #if defined(SFX_ASC) || defined(SFX_ARO) || defined(SFX_MNH) || defined(SFX_NC) USE MODI_CLOSE_FILE_ASC #endif #ifdef SFX_FA USE MODI_CLOSE_FILE_FA #endif #ifdef SFX_OL USE MODI_CLOSE_FILE_OL #endif #ifdef SFX_LFI USE MODI_CLOSE_FILE_LFI #endif ! #ifdef SFX_MNH USE MODI_CLOSE_FILE_MNH #endif ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HPROGRAM ! main program INTEGER , INTENT ( IN ) :: KUNIT ! logical unit of file REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*       0.2   Declarations of local variables !              ------------------------------- ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'CLOSE_FILE' , 0 , ZHOOK_HANDLE ) IF ( HPROGRAM == 'MESONH' ) THEN #ifdef SFX_MNH CALL CLOSE_FILE_MNH ( HPROGRAM , KUNIT ) #endif ELSE IF ( HPROGRAM == 'OFFLIN' ) THEN #ifdef SFX_OL CALL CLOSE_FILE_OL ( HPROGRAM , KUNIT ) #endif ELSE IF ( HPROGRAM == 'FA    ' ) THEN #ifdef SFX_FA CALL CLOSE_FILE_FA ( HPROGRAM , KUNIT ) #endif ELSE IF ( HPROGRAM == 'LFI   ' ) THEN #ifdef SFX_LFI CALL CLOSE_FILE_LFI ( HPROGRAM , KUNIT ) #endif ELSE CALL CLOSE_FILE_ASC ( HPROGRAM , KUNIT ) END IF IF ( LHOOK ) CALL DR_HOOK ( 'CLOSE_FILE' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE CLOSE_FILE","tags":"","loc":"sourcefile/close_file.f90.html"},{"title":"add_forecast_to_date_surf.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines ADD_FORECAST_TO_DATE_SURF Source Code add_forecast_to_date_surf.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE ADD_FORECAST_TO_DATE_SURF ( KYEAR , KMONTH , KDAY , PSEC ) !     ####################################################### ! !!****  *ADD_FORECAST_TO_DATE* - finds the current date and hour of a forecast !! !!    PURPOSE !!    ------- !! !!                                WARNING !! !!      -----> Only correct for dates between 19900301 and 21000228   <----- !! !!  The correct test should be: !! IF( ((MOD(KYEAR,4)==0).AND.(MOD(KYEAR,100)/=0)) .OR. (MOD(KYEAR,400)==0))THEN !! !!**  METHOD !!    ------ !! !!      A recursive method is used, adding one day ofter the other. !! !!    EXTERNAL !!    -------- !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !!    Book 2 !! !!    AUTHOR !!    ------ !! !     V.Masson  Meteo-France !! !!    MODIFICATIONS !!    ------------- !!      Original    01/09/95 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*       0.1   Declaration of arguments !              ------------------------ INTEGER , INTENT ( INOUT ) :: KYEAR ! year of date INTEGER , INTENT ( INOUT ) :: KMONTH ! month of date INTEGER , INTENT ( INOUT ) :: KDAY ! day of date REAL , INTENT ( INOUT ) :: PSEC ! number of seconds since date at 00 UTC ! !*       0.2   Declaration of local variables !              ------------------------------ ! INTEGER :: IDAYS ! number of days in KMONTH REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! !*       1.    Return condition: less than one day to add !              ------------------------------------------ ! IF ( LHOOK ) CALL DR_HOOK ( 'ADD_FORECAST_TO_DATE_SURF' , 0 , ZHOOK_HANDLE ) DO IF ( 8640 0. - PSEC > 1.E-6 ) EXIT ! !------------------------------------------------------------------------------- ! !*       2.    Adding one day !              -------------- ! PSEC = PSEC - 8640 0. ! !*       2.1   Number of days in a month !              ------------------------- ! SELECT CASE ( KMONTH ) CASE ( 4 , 6 , 9 , 11 ) IDAYS = 30 CASE ( 1 , 3 , 5 , 7 : 8 , 10 , 12 ) IDAYS = 31 CASE ( 2 ) IF ( (( MOD ( KYEAR , 4 ) == 0 ). AND .( MOD ( KYEAR , 100 ) /= 0 )) . OR . ( MOD ( KYEAR , 400 ) == 0 )) THEN IDAYS = 29 ELSE IDAYS = 28 ENDIF END SELECT ! !*       2.2   Last day of the month !              --------------------- ! IF ( KDAY == IDAYS ) THEN IF ( KMONTH == 12 ) THEN KDAY = 1 KMONTH = 1 KYEAR = KYEAR + 1 ELSE KDAY = 1 KMONTH = KMONTH + 1 ENDIF ! !*       2.3   Other days !              ---------- ELSE KDAY = KDAY + 1 ENDIF ! !------------------------------------------------------------------------------- ! !*       3.    Recursive call !              -------------- ! ENDDO IF ( LHOOK ) CALL DR_HOOK ( 'ADD_FORECAST_TO_DATE_SURF' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE ADD_FORECAST_TO_DATE_SURF","tags":"","loc":"sourcefile/add_forecast_to_date_surf.f90.html"},{"title":"modd_wrf_teb_driver.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_WRF_TEB_DRIVER Source Code modd_wrf_teb_driver.F90 Source Code ! TEB version 4.0.1 (https://github.com/teb-model/teb). ! Copyright 2018 D. Meyer. Licensed under CeCILL version 2.1. MODULE MODD_WRF_TEB_DRIVER IMPLICIT NONE PRIVATE PUBLIC :: TEB_DRIVER CONTAINS SUBROUTINE TEB_DRIVER ( & ! inputs num_roof_layers , num_wall_layers , num_road_layers , & num_snow_layers , num_floor_layers , & ZLON , ZLAT , & IYEAR , IMONTH , IDAY , ZTIME_START , XTSTEP_SURF , & XPS , XPA , & XTA , ZQA_KGKG , XRHOA , XCO2 , & XLW , & XRAIN , XSNOW , & ZZREF , & ZDIR_SW , ZSCA_SW , ZWIND , ZDIR , & ! inputs / outputs ZT_CANYON , ZQ_CANYON , & ZTI_BLD , & ZT_ROOF , ZT_ROAD , ZT_WALL_A , ZT_WALL_B , & ZWS_ROOF , ZWS_ROAD , & ZWSNOW_ROOF , ZTSNOW_ROOF , ZRSNOW_ROOF , ZASNOW_ROOF , & ZTSSNOW_ROOF , ZESNOW_ROOF , & ZWSNOW_ROAD , ZTSNOW_ROAD , ZRSNOW_ROAD , ZASNOW_ROAD , & ZTSSNOW_ROAD , ZESNOW_ROAD , & ZAUX_MAX , ZT_FLOOR , & ZT_MASS , & ZT_WIN1 , ZT_WIN2 , ZQI_BLD , & ZTHER_PRODC_DAY , & ! parameters LGARDEN , LGREENROOF , LSOLAR_PANEL , & HZ0H , HROAD_DIR , HWALL_OPT , & HSNOW_ROAD , & HSNOW_ROOF , & ZH_TRAFFIC , ZLE_TRAFFIC , ZH_INDUSTRY , ZLE_INDUSTRY , & ZZ0 , & ZBLD , ZGARDEN , ZROAD_DIR , ZFRAC_GR , & ZBLD_HEIGHT , ZWALL_O_HOR , & ZALB_ROOF , ZEMIS_ROOF , & ZHC_ROOF , ZTC_ROOF , ZD_ROOF , & ZALB_ROAD , ZEMIS_ROAD , & ZHC_ROAD , ZTC_ROAD , ZD_ROAD , & ZALB_WALL , ZEMIS_WALL , & ZHC_WALL , ZTC_WALL , ZD_WALL , & CCOOL_COIL , ZF_WATER_COND , CHEAT_COIL , & ZNATVENT , & XF_WASTE_CAN , ZQIN , ZQIN_FRAD , & ZQIN_FLAT , ZGR , ZEFF_HEAT , ZINF , & ZTCOOL_TARGET , ZTHEAT_TARGET , ZHR_TARGET , & ZV_VENT , ZCAP_SYS_HEAT , XCAP_SYS_RAT , ZT_ADP , & XM_SYS_RAT , ZCOP_RAT , ZHC_FLOOR , ZTC_FLOOR , & ZD_FLOOR , ZSHGC , & ZSHGC_SH , & ZSHADE , & CBEM , & CCH_BEM , ZROUGH_ROOF , ZROUGH_WALL , & LPAR_RD_IRRIG , ZRD_START_MONTH , ZRD_END_MONTH , & ZRD_START_HOUR , ZRD_END_HOUR , ZRD_24H_IRRIG , & ZEMIS_PANEL , ZALB_PANEL , ZEFF_PANEL , ZFRAC_PANEL , & ZRESIDENTIAL , & ZDT_RES , ZDT_OFF , & ZFLOOR_HEIGHT , PU_WIN , & ! outputs ZHVAC_COOL_TOT , ZHVAC_HEAT_TOT , & ZTHER_PROD_PANEL , ZPHOT_PROD_PANEL , & XU_CANYON , & ZRN_TOWN , ZH_TOWN , ZLE_TOWN , ZGFLUX_TOWN , ZEVAP_TOWN , & ZUSTAR_TOWN , & ZTS_TOWN , ZEMIS_TOWN , & ZALB_TOWN , ZDIR_CANYON , ZQ_TOWN & ) ! TEB imports USE MODD_CSTS , ONLY : XCPD , XPI , & XRD , XP00 USE MODD_SURF_ATM , ONLY : XCISMIN , XVMODMIN , LALDTHRES , XRIMAX USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_TYPE_DATE_SURF USE MODE_THERMOS USE MODD_REPROD_OPER , ONLY : CQSAT ! USE MODI_SUNPOS USE MODI_OL_READ_ATM USE MODI_OL_ALLOC_ATM USE MODI_OL_TIME_INTERP_ATM USE MODI_TEB_GARDEN_STRUCT USE MODI_WINDOW_DATA_STRUCT USE MODI_BEM_MORPHO_STRUCT USE MODI_CIRCUMSOLAR_RAD IMPLICIT NONE INTEGER , INTENT ( IN ) :: num_roof_layers , & num_wall_layers , & num_road_layers , & num_snow_layers , & num_floor_layers ! Coordinates REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZLON ! Longitude (deg) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZLAT ! Latitude (deg) REAL , INTENT ( IN ) :: XTSTEP_SURF ! length of timestep in seconds INTEGER , INTENT ( IN ) :: IYEAR , IMONTH , IDAY ! date at current time step REAL , INTENT ( IN ) :: ZTIME_START ! time at beginning of time step, since midnight (UTC, s) ! End coordinates ! Parameters LOGICAL , INTENT ( IN ) :: LSOLAR_PANEL ! Flag to use a solar panels on roofs LOGICAL , INTENT ( IN ) :: LGARDEN ! Flag to use a vegetation scheme in gardens LOGICAL , INTENT ( IN ) :: LGREENROOF ! Flag to use a green roofs scheme CHARACTER ( LEN = 4 ), INTENT ( IN ) :: HROAD_DIR ! road direction option : ! 'UNIF' : uniform roads ! 'ORIE' : specified road orientation CHARACTER ( LEN = 4 ), INTENT ( IN ) :: HWALL_OPT ! Wall option ! 'UNIF' : uniform walls ! 'TWO ' : 2 opposite  walls REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZGARDEN ! fraction of GARDEN areas REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZROAD_DIR ! road direction (° from North, clockwise) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZFRAC_GR ! fraction of greenroofs on roofs CHARACTER ( LEN = 12 ), INTENT ( IN ) :: CCOOL_COIL ! option for cooling device type CHARACTER ( LEN = 6 ), INTENT ( IN ) :: CHEAT_COIL ! option for heating device type REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZF_WATER_COND ! fraction of evaporation for the condensers REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZNATVENT ! flag to describe surventilation system for ! i/o 0 for NONE, 1 for MANU and 2 for AUTO REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XF_WASTE_CAN ! fraction of waste heat released into the canyon REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZQIN ! Internal heat gains [W m-2(floor)] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZQIN_FRAD ! Radiant fraction of internal heat gains REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZQIN_FLAT ! Latent franction of internal heat gains REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZGR ! Glazing ratio REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZEFF_HEAT ! Efficiency of the heating system REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZINF ! Infiltration flow rate [AC/H] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZTCOOL_TARGET ! Cooling setpoint of HVAC system [K] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZTHEAT_TARGET ! Heating setpoint of HVAC system [K] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZHR_TARGET ! Relative humidity setpoint REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZV_VENT ! Ventilation flow rate [AC/H] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZCAP_SYS_HEAT ! Capacity of the heating system [W m-2(bld)] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XCAP_SYS_RAT ! Rated capacity of the cooling system [W m-2(bld)] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZT_ADP ! Apparatus dewpoint temperature of the cooling coil [K] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XM_SYS_RAT ! Rated HVAC mass flow rate [kg s-1 m-2(bld)] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZCOP_RAT ! Rated COP of the cooling system REAL , DIMENSION ( 1 , num_floor_layers ), INTENT ( IN ) :: ZHC_FLOOR ! heat capacity for floor layers REAL , DIMENSION ( 1 , num_floor_layers ), INTENT ( IN ) :: ZTC_FLOOR ! thermal conductivity for floor layers REAL , DIMENSION ( 1 , num_floor_layers ), INTENT ( IN ) :: ZD_FLOOR ! depth of floor layers REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZSHGC ! window solar transmittance REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZSHGC_SH ! window + shading solar heat gain coef. REAL , DIMENSION ( 1 ), INTENT ( IN ) :: PU_WIN ! window U-factor [K m W-2] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZSHADE ! flag to activate shading devices -> REAL for i/o 0. or 1 REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZFLOOR_HEIGHT ! Floor height (m) CHARACTER ( LEN = 5 ), INTENT ( IN ) :: CCH_BEM ! TEB option for building outside conv. coef CHARACTER ( LEN = 3 ), INTENT ( IN ) :: CBEM ! Building Energy model 'DEF' or 'BEM' REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZROUGH_ROOF ! roof roughness coef. REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZROUGH_WALL ! wall roughness coef. LOGICAL , INTENT ( IN ) :: LPAR_RD_IRRIG ! Flag for road watering REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZRD_START_MONTH ! start month for watering of roads(included) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZRD_END_MONTH ! end   month for watering of roads(included) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZRD_START_HOUR ! start hour  for watering of roads(included) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZRD_END_HOUR ! end   hour  for watering of roads(excluded) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZRD_24H_IRRIG ! 24h quantity of water used for road watering (liter/m2) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZEMIS_PANEL ! Emissivity of solar panel [-] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZALB_PANEL ! albedo of solar panel  [-] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZEFF_PANEL ! Efficiency of solar panel [-] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZFRAC_PANEL ! fraction of solar panels on roofs REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZRESIDENTIAL ! Fraction of residential use in buildings REAL , INTENT ( IN ) :: ZDT_RES ! target temperature change when unoccupied ! (K) (residential buildings) REAL , INTENT ( IN ) :: ZDT_OFF ! target temperature change when unoccupied ! (K) (office buildings) ! End parameters ! Variable inputs REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XCO2 ! CO2 concentration in the air    (kg/m3) CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HZ0H ! TEB option for z0h roof & road ! 'MASC95' : Mascart et al 1995 ! 'BRUT82' : Brustaert     1982 ! 'KAND07' : Kanda         2007 REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZWIND ! module of the horizontal wind CHARACTER ( LEN = 4 ), INTENT ( IN ) :: HSNOW_ROOF ! snow roof scheme ! 'NONE' ! 'D95 ' ! '1-L ' CHARACTER ( LEN = 4 ), INTENT ( IN ) :: HSNOW_ROAD ! snow road scheme ! 'NONE' ! 'D95 ' ! '1-L ' REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XTA ! air temperature forcing (K) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XPS ! pressure at the surface REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XPA ! pressure at the first atmospheric level REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XRHOA ! air density at the lowest level REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZDIR ! wind direction REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XLW ! atmospheric infrared radiation REAL , DIMENSION ( 1 , 1 ), INTENT ( IN ) :: ZDIR_SW ! incoming direct solar radiation on an horizontal surface REAL , DIMENSION ( 1 , 1 ), INTENT ( IN ) :: ZSCA_SW ! scattered incoming solar rad. REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XRAIN ! rain rate (kg/m2/s) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XSNOW ! snow rate (kg/s/m2 of snow) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZH_TRAFFIC ! anthropogenic sensible heat fluxes due to traffic REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZLE_TRAFFIC ! anthropogenic latent heat fluxes due to traffic REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZH_INDUSTRY ! anthropogenic sensible heat fluxes due to factories REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZLE_INDUSTRY ! anthropogenic latent heat fluxes due to factories REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZZREF ! reference height of the first atmospheric level (temperature) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZZ0 ! town roughness length for momentum REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZBLD ! fraction of buildings REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZBLD_HEIGHT ! buildings h REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZWALL_O_HOR ! wall surf. / hor. surf. REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZALB_ROOF ! roof albedo REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZEMIS_ROOF ! roof emissivity REAL , DIMENSION ( 1 , num_roof_layers ), INTENT ( IN ) :: ZHC_ROOF ! heat capacity for roof layers (J/m3/K) REAL , DIMENSION ( 1 , num_roof_layers ), INTENT ( IN ) :: ZTC_ROOF ! thermal conductivity for roof layers (w/m/K) REAL , DIMENSION ( 1 , num_roof_layers ), INTENT ( IN ) :: ZD_ROOF ! depth of roof layers REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZALB_ROAD ! road albedo REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZEMIS_ROAD ! road emissivity REAL , DIMENSION ( 1 , num_road_layers ), INTENT ( IN ) :: ZHC_ROAD ! heat capacity for road layers (J/m3/K) REAL , DIMENSION ( 1 , num_road_layers ), INTENT ( IN ) :: ZTC_ROAD ! thermal conductivity for road layers (w/m/K) REAL , DIMENSION ( 1 , num_road_layers ), INTENT ( IN ) :: ZD_ROAD ! depth of road layers REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZALB_WALL ! wall albedo REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZEMIS_WALL ! wall emissivity REAL , DIMENSION ( 1 , num_wall_layers ), INTENT ( IN ) :: ZHC_WALL ! heat capacity for wall layers (J/m3/K) REAL , DIMENSION ( 1 , num_wall_layers ), INTENT ( IN ) :: ZTC_WALL ! thermal conductivity for wall layers REAL , DIMENSION ( 1 , num_wall_layers ), INTENT ( IN ) :: ZD_WALL ! depth of wall layers REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZQA_KGKG ! air humidity at forcing level (kg/kg) ! End variable inputs ! State REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZT_WIN1 ! outdoor window temperature [K] REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZT_WIN2 ! Indoor window temperature [K] REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZAUX_MAX ! Auxiliar variable for autosize calcs (not used) REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZTHER_PRODC_DAY ! Present day integrated thermal production of energy (J/m2 panel) REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZQI_BLD ! Indoor air specific humidity [kg kg-1] REAL , DIMENSION ( 1 , num_floor_layers ), INTENT ( INOUT ) :: ZT_FLOOR ! Floor layers temperatures [K] REAL , DIMENSION ( 1 , num_floor_layers ), INTENT ( INOUT ) :: ZT_MASS ! Internal mass layers temperatures [K] REAL , DIMENSION ( 1 , num_road_layers ), INTENT ( INOUT ) :: ZT_ROAD ! road layers temperatures REAL , DIMENSION ( 1 , num_roof_layers ), INTENT ( INOUT ) :: ZT_ROOF ! roof layers temperatures REAL , DIMENSION ( 1 , num_wall_layers ), INTENT ( INOUT ) :: ZT_WALL_A ! wall layers temperatures (wall 'A') REAL , DIMENSION ( 1 , num_wall_layers ), INTENT ( INOUT ) :: ZT_WALL_B ! wall layers temperatures (wall 'B') REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZT_CANYON ! canyon air temperature REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZQ_CANYON ! canyon air specific humidity REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZTI_BLD ! inside building temperature REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZWS_ROOF ! roof water reservoir(kg/m2) REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZWS_ROAD ! road water reservoir(kg/m2) REAL , DIMENSION ( 1 , num_snow_layers ), INTENT ( INOUT ) :: ZWSNOW_ROOF ! snow layers reservoir REAL , DIMENSION ( 1 , num_snow_layers ), INTENT ( INOUT ) :: ZTSNOW_ROOF ! snow layers temperature REAL , DIMENSION ( 1 , num_snow_layers ), INTENT ( INOUT ) :: ZRSNOW_ROOF ! snow layers density REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZASNOW_ROOF ! snow albedo REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZESNOW_ROOF ! snow emissivity REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZTSSNOW_ROOF ! snow surface temperature REAL , DIMENSION ( 1 , num_snow_layers ), INTENT ( INOUT ) :: ZWSNOW_ROAD ! snow layers reservoir REAL , DIMENSION ( 1 , num_snow_layers ), INTENT ( INOUT ) :: ZTSNOW_ROAD ! snow layers temperature REAL , DIMENSION ( 1 , num_snow_layers ), INTENT ( INOUT ) :: ZRSNOW_ROAD ! snow layers density REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZASNOW_ROAD ! snow albedo REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZESNOW_ROAD ! snow emissivity REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZTSSNOW_ROAD ! snow surface temperature ! End state ! Diagnostics REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZHVAC_COOL_TOT ! Energy consumption of the cooling system [W m-2(tot)] REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZHVAC_HEAT_TOT ! Energy consumption of the heating system [W m-2(tot)] REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZTHER_PROD_PANEL ! Thermal energy production of solar panel on roofs (W/m2 panel) REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZPHOT_PROD_PANEL ! Photovoltaic Energy production of solar panel on roofs (W/m2 panel) REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZRN_TOWN ! net radiation over town REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZH_TOWN ! sensible heat flux over town REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZLE_TOWN ! latent heat flux over town REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZGFLUX_TOWN ! flux through the ground REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZEVAP_TOWN ! evaporation flux (kg/m2/s) REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZUSTAR_TOWN ! friction velocity over town REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZTS_TOWN ! town surface temperature REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZEMIS_TOWN ! town equivalent emissivity REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZALB_TOWN ! town equivalent albedo REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: XU_CANYON ! canyon hor. wind REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZDIR_CANYON ! canyon wind direction REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZQ_TOWN ! Town humidity ! End diagnostics ! Constants CHARACTER ( LEN = 3 ) :: HIMPLICIT_WIND = 'NEW' ! Implicitation option for wind fluxes INTEGER :: KSW = 1 ! number of spectral bands in SW forcing LOGICAL :: LCANOPY = . FALSE . ! is canopy active ? REAL , DIMENSION ( 1 ) :: XSW_BANDS = XUNDEF ! mean wavelength of each shortwave band (m) ! (unused in TEB, but needed as argument) ! End constants ! Local variables REAL :: ZTIME_BEG ! Time at beginning of time step REAL :: ZTIME ! Time at end       of time step INTEGER :: IYEAR2 ! current year at end of timestep(UTC) INTEGER :: IMONTH2 ! current month at end of timestep(UTC) INTEGER :: IDAY2 ! current day at end of timestep(UTC) REAL :: ZTIME2 ! current time since start of the day at end of timestep (s) TYPE ( DATE_TIME ) :: TPTIME REAL , DIMENSION ( 1 ) :: ZSW REAL :: ZBEGIN_TRAFFIC_TIME ! start traffic time (solar time, s) REAL :: ZEND_TRAFFIC_TIME ! end traffic time   (solar time, s) REAL , DIMENSION ( 1 ) :: XH_TRAFFIC ! heat fluxes due to traffic                   !   \\\\/ REAL , DIMENSION ( 1 ) :: XLE_TRAFFIC ! heat fluxes due to traffic REAL , DIMENSION ( 1 ) :: ZU_CANYON ! canyon hor. wind REAL , DIMENSION ( 1 ) :: ZU_LOWCAN ! wind near the road REAL , DIMENSION ( 1 ) :: ZT_LOWCAN ! temp. near the road REAL , DIMENSION ( 1 ) :: ZQ_LOWCAN ! hum. near the road REAL , DIMENSION ( 1 ) :: ZZ_LOWCAN ! height of atm. var. near the road REAL , DIMENSION ( 1 ) :: ZVMOD ! module of the horizontal wind REAL , DIMENSION ( 1 ) :: ZEXNA ! exner function at the lowest level REAL , DIMENSION ( 1 ) :: ZEXNS ! surface exner function REAL , DIMENSION ( 1 ) :: ZF1_o_B ! Coefficient for sky model REAL , DIMENSION ( 1 ) :: ZCOEF ! work array REAL , DIMENSION ( 1 ) :: XZENITH ! solar zenithal angle (radian) REAL , DIMENSION ( 1 ) :: XZENITH2 ! solar zenithal angle (radian) REAL , DIMENSION ( 1 ) :: XTSUN ! solar time (s from midnight) REAL , DIMENSION ( 1 ) :: XAZIM ! azimuthal angle (radian from North, clockwise) REAL , DIMENSION ( 1 ) :: ZPEW_A_COEF_LOWCAN REAL , DIMENSION ( 1 ) :: ZPEW_B_COEF_LOWCAN REAL , DIMENSION ( 1 ) :: ZPEW_A_COEF ! implicit coefficients REAL , DIMENSION ( 1 ) :: ZPEW_B_COEF ! for wind coupling ! V = ZPEW_A_COEF * v'w'  +   ZPEW_B_COEF ! IF explicit: ZPEW_A_COEF = 0 and  ZPEW_B_COEF REAL , DIMENSION ( 1 ) :: ZWAKE ! reduction of average wind speed REAL , DIMENSION ( 1 ) :: ZSVF_WALL ! wall sky view factor REAL , DIMENSION ( 1 ) :: ZCAN_HW_RATIO ! canyon    h/W REAL , DIMENSION ( 1 ) :: ZSVF_ROAD ! road sky view factor REAL , DIMENSION ( 1 ) :: ZROAD ! fraction of roads REAL , DIMENSION ( 1 ) :: ZROAD_O_GRND ! Road to ground surface ratio REAL , DIMENSION ( 1 ) :: ZGARDEN_O_GRND ! Garden to ground surface ratio REAL , DIMENSION ( 1 ) :: ZWALL_O_GRND ! Wall to ground surface ratio REAL , DIMENSION ( 1 ) :: ZSVF_GARDEN ! garden sky view factor REAL , DIMENSION ( 1 ) :: ZTOTS_O_HORS ! total canyon+roof surf over horizontal surf REAL , DIMENSION ( 1 ) :: ZROOF_FRAC ! roof area fraction REAL , DIMENSION ( 1 ) :: ZWALL_FRAC ! wall area fraction REAL , DIMENSION ( 1 ) :: ZROAD_FRAC ! road area fraction REAL , DIMENSION ( 1 ) :: ZGARDEN_FRAC ! garden area fraction REAL , DIMENSION ( 1 ) :: ZUGG_WIN ! window glass-to-glass U-factro [W m-2 K-1] REAL , DIMENSION ( 1 ) :: ZALB_WIN ! window albedo REAL , DIMENSION ( 1 ) :: ZABS_WIN ! window absortance REAL , DIMENSION ( 1 ) :: ZTRAN_WIN ! window transmittance REAL , DIMENSION ( 1 ) :: ZN_FLOOR ! Number of floors REAL , DIMENSION ( 1 ) :: ZWALL_O_BLD ! Wall area [m2_wall/m2_bld] REAL , DIMENSION ( 1 ) :: ZGLAZ_O_BLD ! Window area [m2_win/m2_bld] REAL , DIMENSION ( 1 ) :: ZMASS_O_BLD ! Mass area [m2_mass/m2_bld] REAL , DIMENSION ( 1 ) :: ZFLOOR_HW_RATIO ! H/W ratio of 1 floor level REAL , DIMENSION ( 1 ) :: ZF_FLOOR_MASS ! View factor floor-mass REAL , DIMENSION ( 1 ) :: ZF_FLOOR_WALL ! View factor floor-wall REAL , DIMENSION ( 1 ) :: ZF_FLOOR_WIN ! View factor floor-window REAL , DIMENSION ( 1 ) :: ZF_FLOOR_ROOF ! View factor floor-roof REAL , DIMENSION ( 1 ) :: ZF_WALL_FLOOR ! View factor wall-floor REAL , DIMENSION ( 1 ) :: ZF_WALL_MASS ! View factor wall-mass REAL , DIMENSION ( 1 ) :: ZF_WALL_WIN ! View factor wall-win REAL , DIMENSION ( 1 ) :: ZF_WIN_FLOOR ! View factor win-floor REAL , DIMENSION ( 1 ) :: ZF_WIN_MASS ! View factor win-mass REAL , DIMENSION ( 1 ) :: ZF_WIN_WALL ! View factor win-wall REAL , DIMENSION ( 1 ) :: ZF_MASS_FLOOR ! View factor mass-floor REAL , DIMENSION ( 1 ) :: ZF_MASS_WALL ! View factor mass-wall REAL , DIMENSION ( 1 ) :: ZF_MASS_WIN ! View factor mass-window REAL , DIMENSION ( 1 ) :: ZF_WIN_WIN ! indoor win to win view factor REAL , DIMENSION ( 1 ) :: ZDIR_ALB_TOWN ! town equivalent direct albedo REAL , DIMENSION ( 1 ) :: ZSCA_ALB_TOWN ! town equivalent diffuse albedo REAL , DIMENSION ( 1 , 1 ) :: ZTDIR_SW ! total direct SW REAL , DIMENSION ( 1 , 1 ) :: ZTSCA_SW ! total diffuse SW ! TODO: what about these? make into state variables? ! For now set to off state as they are not considered in the eval. LOGICAL , DIMENSION ( 1 ) :: GSHAD_DAY ! has shading been necessary this day ? LOGICAL , DIMENSION ( 1 ) :: GNATVENT_NIGHT ! has natural ventilation been necessary/possible this night ? REAL , DIMENSION ( 1 , 1 ) :: XDIR_SW ! incoming direct solar radiation on an horizontal surface REAL , DIMENSION ( 1 , 1 ) :: XSCA_SW ! scattered incoming solar rad. REAL , DIMENSION ( 1 ) :: PFLOOR_HEIGHT ! Floor height (m) REAL , DIMENSION ( 1 ) :: ZF_WASTE_CAN ! fraction of waste heat released into the canyon REAL , DIMENSION ( 1 ) :: ZCAP_SYS_RAT ! Rated capacity of the cooling system [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZM_SYS_RAT ! Rated HVAC mass flow rate [kg s-1 m-2(bld)] LOGICAL , DIMENSION ( 1 ) :: LSHADE ! Flag to use shading devices CHARACTER ( LEN = 4 ), DIMENSION ( 1 ) :: HNATVENT ! End local variables ! Unused model outputs REAL , DIMENSION ( 1 ) :: ZRN_STRLROOF ! net radiation over structural roof REAL , DIMENSION ( 1 ) :: ZH_STRLROOF ! sensible heat flux over structural roof REAL , DIMENSION ( 1 ) :: ZLE_STRLROOF ! latent heat flux over structural roof REAL , DIMENSION ( 1 ) :: ZGFLUX_STRLROOF ! flux through the structural roof REAL , DIMENSION ( 1 ) :: ZRUNOFF_STRLROOF ! water runoff on the structural roof REAL , DIMENSION ( 1 ) :: ZRN_BLT ! net radiation over built covers REAL , DIMENSION ( 1 ) :: ZH_BLT ! sensible heat flux over built covers REAL , DIMENSION ( 1 ) :: ZLE_BLT ! latent heat flux over built covers REAL , DIMENSION ( 1 ) :: ZGFLUX_BLT ! flux through the built covers REAL , DIMENSION ( 1 ) :: ZSFCO2 ! Surface Flux of CO2 REAL , DIMENSION ( 1 ) :: ZUW_GRND ! friction flux over ground REAL , DIMENSION ( 1 ) :: ZUW_ROOF ! Momentum flux for roofs REAL , DIMENSION ( 1 ) :: ZDUWDU_GRND ! d(u'w')/du for ground REAL , DIMENSION ( 1 ) :: ZDUWDU_ROOF ! d(u'w')/du for roof REAL , DIMENSION ( 1 ) :: ZAC_GARDEN ! garden aerodynamical conductance REAL , DIMENSION ( 1 ) :: ZAC_GREENROOF ! green roofs aerodynamical conductance REAL , DIMENSION ( 1 ) :: ZAC_ROAD_WAT ! road aerodynamical conductance (for water) REAL , DIMENSION ( 1 ) :: ZAC_GARDEN_WAT ! garden aerodynamical conductance for vapor REAL , DIMENSION ( 1 ) :: ZAC_GREENROOF_WAT ! green roofs aerodynamical conductance for vapor REAL , DIMENSION ( 1 ) :: ZABS_SW_ROOF ! Shortwave radiation absorbed by roofs REAL , DIMENSION ( 1 ) :: ZABS_LW_ROOF ! Longwave  radiation absorbed by roofs REAL , DIMENSION ( 1 ) :: ZABS_SW_SNOW_ROOF ! Shortwave radiation absorbed by roof snow REAL , DIMENSION ( 1 ) :: ZABS_LW_SNOW_ROOF ! abs. LW rad. by snow REAL , DIMENSION ( 1 ) :: ZABS_SW_ROAD ! Shortwave radiation absorbed by roads REAL , DIMENSION ( 1 ) :: ZABS_LW_ROAD ! Longwave  radiation absorbed by roads REAL , DIMENSION ( 1 ) :: ZABS_SW_SNOW_ROAD ! Shortwave radiation absorbed by road snow REAL , DIMENSION ( 1 ) :: ZABS_LW_SNOW_ROAD ! abs. LW rad. by snow REAL , DIMENSION ( 1 ) :: ZABS_SW_WALL_A ! Shortwave radiation absorbed by wall A REAL , DIMENSION ( 1 ) :: ZABS_LW_WALL_A ! Longwave  radiation absorbed by wall A REAL , DIMENSION ( 1 ) :: ZABS_SW_WALL_B ! Shortwave radiation absorbed by wall B REAL , DIMENSION ( 1 ) :: ZABS_LW_WALL_B ! Longwave  radiation absorbed by wall B REAL , DIMENSION ( 1 ) :: ZABS_SW_PANEL ! Shortwave radiation absorbed by solar panels REAL , DIMENSION ( 1 ) :: ZABS_LW_PANEL ! Longwave  radiation absorbed by solar panels REAL , DIMENSION ( 1 ) :: ZABS_SW_GARDEN ! Shortwave radiation absorbed by gardens REAL , DIMENSION ( 1 ) :: ZABS_LW_GARDEN ! Longwave  radiation absorbed by gardens REAL , DIMENSION ( 1 ) :: ZABS_SW_GREENROOF ! Shortwave radiation absorbed by greenroofs REAL , DIMENSION ( 1 ) :: ZABS_LW_GREENROOF ! Longwave  radiation absorbed by greenroofs REAL , DIMENSION ( 1 ) :: ZG_GREENROOF_ROOF ! heat flux between base of greenroof and structural roof REAL , DIMENSION ( 1 ) :: ZH_BLD_COOL ! Sensible cooling energy demand of the building [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZT_BLD_COOL ! Total cooling energy demand of the building [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZH_BLD_HEAT ! Heating energy demand of the building [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZLE_BLD_COOL ! Latent cooling energy demand of the building [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZLE_BLD_HEAT ! Latent heating energy demand of the building [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZH_WASTE ! Sensible waste heat from HVAC system [W m-2(tot)] REAL , DIMENSION ( 1 ) :: ZLE_WASTE ! Latent waste heat from HVAC system [W m-2(tot)] REAL , DIMENSION ( 1 ) :: ZCAP_SYS ! Actual capacity of the cooling system [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZM_SYS ! Actual HVAC mass flow rate [kg s-1 m-2(bld)] REAL , DIMENSION ( 1 ) :: ZCOP ! COP of the cooling system REAL , DIMENSION ( 1 ) :: ZQ_SYS ! Supply air specific humidity [kg kg-1] REAL , DIMENSION ( 1 ) :: ZT_SYS ! Supply air temperature [K] REAL , DIMENSION ( 1 ) :: ZTR_SW_WIN ! Solar radiation transmitted throught windows [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZFAN_POWER ! HVAC fan power REAL , DIMENSION ( 1 ) :: ZABS_SW_WIN ! window absorbed shortwave radiation [W m-2] REAL , DIMENSION ( 1 ) :: ZABS_LW_WIN ! absorbed infrared rad. [W m-2] REAL , DIMENSION ( 1 ) :: ZEMIT_LW_FAC ! LW flux emitted by the facade (W/m² ground) REAL , DIMENSION ( 1 ) :: ZEMIT_LW_GRND ! LW flux emitted by the ground (W/m² ground) REAL , DIMENSION ( 1 ) :: ZT_RAD_IND ! Indoor mean radiant temperature [K] REAL , DIMENSION ( 1 ) :: ZREF_SW_GRND ! total solar rad reflected from ground REAL , DIMENSION ( 1 ) :: ZREF_SW_FAC ! total solar rad reflected from facade REAL , DIMENSION ( 1 ) :: ZHU_BLD ! Indoor relative humidity 0 < (-) < 1 REAL , DIMENSION ( 1 ) :: ZIRRIG_ROAD ! road irrigation during current time-step REAL , DIMENSION ( 1 ) :: ZPROD_PANEL ! Averaged energy production of solar panel on roofs (W/m2 panel) REAL , DIMENSION ( 1 ) :: ZTHER_PROD_BLD ! Thermal energy production of solar panel on roofs (W/m2 bld) REAL , DIMENSION ( 1 ) :: ZPHOT_PROD_BLD ! Photovoltaic energy production of solar panel on roofs (W/m2 bld) REAL , DIMENSION ( 1 ) :: ZPROD_BLD ! Averaged energy production of solar panel on roofs (W/m2 bld) REAL , DIMENSION ( 1 ) :: ZH_PANEL ! Sensible heat flux from solar panels (W/m2 panel) REAL , DIMENSION ( 1 ) :: ZRN_PANEL ! Net radiation of solar panel (W/m2 panel) REAL , DIMENSION ( 1 ) :: ZCUR_QIN ! Internal heat gains [W m-2(floor)] REAL , DIMENSION ( 1 ) :: ZCUR_TCOOL_TARGET ! Cooling setpoint of HVAC system [K] REAL , DIMENSION ( 1 ) :: ZCUR_THEAT_TARGET ! Heating setpoint of HVAC system [K] REAL , DIMENSION ( 1 ) :: ZRN_ROOF ! net radiation over roof REAL , DIMENSION ( 1 ) :: ZH_ROOF ! sensible heat flux over roof REAL , DIMENSION ( 1 ) :: ZLE_ROOF ! latent heat flux over roof REAL , DIMENSION ( 1 ) :: ZLEW_ROOF ! latent heat flux over roof (snow) REAL , DIMENSION ( 1 ) :: ZGFLUX_ROOF ! flux through the roof REAL , DIMENSION ( 1 ) :: ZRUNOFF_ROOF ! runoff over the ground REAL , DIMENSION ( 1 ) :: ZRN_ROAD ! net radiation over road REAL , DIMENSION ( 1 ) :: ZH_ROAD ! sensible heat flux over road REAL , DIMENSION ( 1 ) :: ZLE_ROAD ! latent heat flux over road REAL , DIMENSION ( 1 ) :: ZLEW_ROAD ! latent heat flux over road (snow)  (sublimation) REAL , DIMENSION ( 1 ) :: ZGFLUX_ROAD ! flux through the road REAL , DIMENSION ( 1 ) :: ZRUNOFF_ROAD ! runoff over the ground REAL , DIMENSION ( 1 ) :: ZRN_WALL_A ! net radiation over wall REAL , DIMENSION ( 1 ) :: ZH_WALL_A ! sensible heat flux over wall REAL , DIMENSION ( 1 ) :: ZLE_WALL_A ! latent heat flux over wall REAL , DIMENSION ( 1 ) :: ZGFLUX_WALL_A ! flux through the wall REAL , DIMENSION ( 1 ) :: ZRN_WALL_B ! net radiation over wall REAL , DIMENSION ( 1 ) :: ZH_WALL_B ! sensible heat flux over wall REAL , DIMENSION ( 1 ) :: ZLE_WALL_B ! latent heat flux over wall REAL , DIMENSION ( 1 ) :: ZGFLUX_WALL_B ! flux through the wall REAL , DIMENSION ( 1 ) :: ZRNSNOW_ROOF ! net radiation over snow REAL , DIMENSION ( 1 ) :: ZHSNOW_ROOF ! sensible heat flux over snow REAL , DIMENSION ( 1 ) :: ZLESNOW_ROOF ! latent heat flux over snow REAL , DIMENSION ( 1 ) :: ZGSNOW_ROOF ! flux under the snow REAL , DIMENSION ( 1 ) :: ZMELT_ROOF ! snow melt REAL , DIMENSION ( 1 ) :: ZRNSNOW_ROAD ! net radiation over snow REAL , DIMENSION ( 1 ) :: ZHSNOW_ROAD ! sensible heat flux over snow REAL , DIMENSION ( 1 ) :: ZLESNOW_ROAD ! latent heat flux over snow REAL , DIMENSION ( 1 ) :: ZGSNOW_ROAD ! flux under the snow REAL , DIMENSION ( 1 ) :: ZMELT_ROAD ! snow melt REAL , DIMENSION ( 1 ) :: ZRN_GRND ! net radiation over ground REAL , DIMENSION ( 1 ) :: ZH_GRND ! sensible heat flux over ground REAL , DIMENSION ( 1 ) :: ZLE_GRND ! latent heat flux over ground REAL , DIMENSION ( 1 ) :: ZGFLUX_GRND ! flux through the ground REAL , DIMENSION ( 1 ) :: ZRUNOFF_TOWN ! runoff over the ground REAL , DIMENSION ( 1 ) :: ZCD ! town averaged drag coefficient REAL , DIMENSION ( 1 ) :: ZCDN ! town averaged neutral drag coefficient REAL , DIMENSION ( 1 ) :: ZCH_TOWN ! town averaged heat transfer coefficient REAL , DIMENSION ( 1 ) :: ZRI_TOWN ! town averaged Richardson number REAL , DIMENSION ( 1 ) :: ZRESA_TOWN ! town aerodynamical resistance REAL , DIMENSION ( 1 ) :: ZDQS_TOWN ! heat storage inside town REAL , DIMENSION ( 1 ) :: ZQF_TOWN ! total anthropogenic heat REAL , DIMENSION ( 1 ) :: ZQF_BLD ! anthropogenic heat flux of domestic heating REAL , DIMENSION ( 1 ) :: ZFLX_BLD ! heat flux between inside of the bld and its structure REAL , DIMENSION ( 1 ) :: ZAC_ROAD ! road conductance REAL , DIMENSION ( 1 ) :: ZHVAC_COOL ! Energy consumption of the cooling system [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZHVAC_HEAT ! Energy consumption of the heating system [W m-2(bld)] ! End unused model outputs INTEGER :: JLOOP ! loop counter ! The following are IN arguments to this subroutine but are further modified, ! hence need to be copied to a local variable first. ZTIME = ZTIME_START XDIR_SW = ZDIR_SW XSCA_SW = ZSCA_SW PFLOOR_HEIGHT = ZFLOOR_HEIGHT ZF_WASTE_CAN = XF_WASTE_CAN ZCAP_SYS_RAT = XCAP_SYS_RAT ZM_SYS_RAT = XM_SYS_RAT ! ========================================================================= ! ! We try to keep the following module as close as possible to the TEB driver program ! to allow to easily update between future versions of TEB. ! Any changes to the following code should be requested and made directly into the ! TEB driver first and moved here. ! ----------------------------------------------------------- ! Initializations (SYSTEM) ! ----------------------------------------------------------- ! GSHAD_DAY = . FALSE . ! has shading been necessary this day ? GNATVENT_NIGHT = . FALSE . ! has natural ventilation been necessary/possible this night ? IF ( ZNATVENT ( 1 ) >= 0.0 . AND . ZNATVENT ( 1 ) < 0.5 ) THEN HNATVENT = 'NONE' ELSEIF ( ZNATVENT ( 1 ) >= 0.5 . AND . ZNATVENT ( 1 ) < 1.5 ) THEN HNATVENT = 'MANU' ELSEIF ( ZNATVENT ( 1 ) >= 1.5 . AND . ZNATVENT ( 1 ) <= 2.5 ) THEN HNATVENT = 'AUTO' ELSEIF ( ZNATVENT ( 1 ) >= 2.5 . AND . ZNATVENT ( 1 ) <= 3.5 ) THEN HNATVENT = 'MECH' ELSE HNATVENT = 'NONE' ENDIF IF ( ZSHADE ( 1 ) >= 0.0 . AND . ZSHADE ( 1 ) < 0.5 ) THEN LSHADE = . FALSE . ELSEIF ( ZSHADE ( 1 ) >= 0.5 . AND . ZSHADE ( 1 ) <= 1.0 ) THEN LSHADE = . TRUE . ELSE LSHADE = . FALSE . ENDIF ! ! coherence check IF ( (. NOT . LGREENROOF ) . AND . ZFRAC_GR ( 1 ) > 0. ) THEN print * , 'Greenroofs option   is not activated but a non-zero greenroof fraction is given' STOP END IF IF ( (. NOT . LGARDEN ) . AND . ZGARDEN ( 1 ) > 0. ) THEN print * , 'Garden     option   is not activated but a non-zero garden    fraction is given' STOP END IF IF ( ZBLD ( 1 ) + ZGARDEN ( 1 ) >= 1. ) THEN print * , 'The sum of garden and building fraction is larger than one, so road fraction is' , & 'negative. Please check their values.' STOP END IF IF ( (. NOT . LSOLAR_PANEL ) . AND . ZFRAC_PANEL ( 1 ) > 0. ) THEN print * , 'Solar panels option is not activated but a non-zero solar panels fraction is given' STOP END IF IF ( (. NOT . CBEM == 'BEM' ) . AND . ZGR ( 1 ) > 0. ) THEN print * , 'Building Energy Module (BEM) is not activated but a non-zero glazing ratio is given' STOP END IF ! ! Multi layer option LCANOPY = . FALSE . ! DO NOT CHANGE: whether multi-layer canopy is active. ! CQSAT = 'NEW' ! saturation is computed relative to water above 0°C, and relative to ice below 0°C ! ! Thresholds XCISMIN = 0.5 ! Minimum wind shear XVMODMIN = 0.5 ! Minimum wind speed LALDTHRES = . FALSE . ! DO NOT CHANGE: whether to activate Aladin threshold for wind XRIMAX = 0.2 ! Maximum Richardson number for exchange coefficients computations ! ! ZTIME = ZTIME_START ! ! Geometric parameters ZROAD = ( 1. - ZBLD - ZGARDEN ) ZCAN_HW_RATIO = 0.5 * ZWALL_O_HOR / ( 1. - ZBLD ) ZSVF_ROAD = ( SQRT ( ZCAN_HW_RATIO ** 2 + 1. ) - ZCAN_HW_RATIO ) ZSVF_GARDEN = ZSVF_ROAD ZSVF_WALL = 0.5 * ( ZCAN_HW_RATIO + 1. - SQRT ( ZCAN_HW_RATIO ** 2 + 1. )) / ZCAN_HW_RATIO ZZ_LOWCAN = ZBLD_HEIGHT / 2 ZTOTS_O_HORS = 1. + ZWALL_O_HOR ZROOF_FRAC = ZBLD / ZTOTS_O_HORS ZWALL_FRAC = ZWALL_O_HOR / ZTOTS_O_HORS ZROAD_FRAC = ZROAD / ZTOTS_O_HORS ZGARDEN_FRAC = ZGARDEN / ZTOTS_O_HORS ZWALL_O_GRND = ZWALL_FRAC / ( ZROAD_FRAC + ZGARDEN_FRAC ) ZROAD_O_GRND = ZROAD / ( ZROAD + ZGARDEN ) ZGARDEN_O_GRND = ZGARDEN / ( ZROAD + ZGARDEN ) ! CALL BEM_MORPHO_STRUCT ( ZBLD , ZWALL_O_HOR , ZBLD_HEIGHT , PFLOOR_HEIGHT , & ZGR , ZN_FLOOR , ZWALL_O_BLD , ZGLAZ_O_BLD , ZMASS_O_BLD , & ZFLOOR_HW_RATIO , & ZF_FLOOR_MASS , ZF_FLOOR_WALL , ZF_FLOOR_WIN , & ZF_FLOOR_ROOF , ZF_WALL_FLOOR , ZF_WALL_MASS , & ZF_WALL_WIN , ZF_WIN_FLOOR , ZF_WIN_MASS , ZF_WIN_WALL , & ZF_MASS_FLOOR , ZF_MASS_WALL , ZF_MASS_WIN , ZF_WASTE_CAN , & ZF_WIN_WIN ) ! ! Window characteristics CALL WINDOW_DATA_STRUCT ( 1 , ZSHGC , PU_WIN , ZALB_WIN , ZABS_WIN , ZUGG_WIN , ZTRAN_WIN ) ! ! CALL SUNPOS ( IYEAR , IMONTH , IDAY , ZTIME , ZLON , ZLAT , XTSUN , XZENITH , XAZIM ) IYEAR2 = IYEAR IMONTH2 = IMONTH IDAY2 = IDAY ZTIME2 = ZTIME + XTSTEP_SURF CALL ADD_FORECAST_TO_DATE_SURF ( IYEAR2 , IMONTH2 , IDAY2 , ZTIME2 ) CALL SUNPOS ( IYEAR2 , IMONTH2 , IDAY2 , ZTIME2 , ZLON , ZLAT , XTSUN , XZENITH2 , XAZIM ) ! TPTIME % TIME = ZTIME TPTIME % TDATE % YEAR = IYEAR TPTIME % TDATE % MONTH = IMONTH TPTIME % TDATE % DAY = IDAY ZSW (:) = 0. DO JLOOP = 1 , SIZE ( XDIR_SW , 2 ) ZSW (:) = ZSW (:) + XDIR_SW (:, JLOOP ) + XSCA_SW (:, JLOOP ) END DO WHERE ( ZSW (:) > 0. ) XZENITH = MIN ( XZENITH , XPI / 2. - 0.01 ) XZENITH2 = MIN ( XZENITH2 , XPI / 2. - 0.01 ) ELSEWHERE XZENITH = MAX ( XZENITH , XPI / 2. ) XZENITH2 = MAX ( XZENITH2 , XPI / 2. ) END WHERE ! ! Exner functions ZEXNS = ( XPS / XP00 ) ** ( XRD / XCPD ) ZEXNA = ( XPA / XP00 ) ** ( XRD / XCPD ) ZTDIR_SW = XDIR_SW ( 1 , 1 ) ZTSCA_SW = XSCA_SW ( 1 , 1 ) KSW = 1 ! Only one spectral band here ! ! Sky model for diffuse radiation ! Add directionnal contrib from scattered radiation CALL CIRCUMSOLAR_RAD ( XDIR_SW (:, 1 ), XSCA_SW (:, 1 ), XZENITH , ZF1_o_B ) ZTDIR_SW (:, 1 ) = XDIR_SW (:, 1 ) + XSCA_SW (:, 1 ) * ZF1_o_B ZTSCA_SW (:, 1 ) = XSCA_SW (:, 1 ) * ( 1. - ZF1_o_B ) ZBEGIN_TRAFFIC_TIME = 2160 0. ZEND_TRAFFIC_TIME = 6480 0. ! WHERE ( XTSUN > ZBEGIN_TRAFFIC_TIME . AND . XTSUN < ZEND_TRAFFIC_TIME ) XH_TRAFFIC (:) = ZH_TRAFFIC (:) XLE_TRAFFIC (:) = ZLE_TRAFFIC (:) ELSEWHERE XH_TRAFFIC (:) = 0. XLE_TRAFFIC (:) = 0. END WHERE ! ! Wind speed ZVMOD = ZWIND ( 1 ) ZWAKE = 1. + ( 2. / XPI - 1. ) * 2. * ( ZCAN_HW_RATIO - 0.5 ) ZWAKE = MAX ( MIN ( ZWAKE , 1. ), 2. / XPI ) ZU_CANYON = ZWAKE * EXP ( - ZCAN_HW_RATIO / 4. ) * ZVMOD & * LOG ( ( 2. * ZBLD_HEIGHT / 3. ) / ZZ0 ) & / LOG ( ( ZZREF + 2. * ZBLD_HEIGHT / 3. ) / ZZ0 ) ZU_LOWCAN = ZU_CANYON ZT_LOWCAN = ZT_CANYON ZQ_LOWCAN = ZQ_CANYON ! ZPEW_A_COEF = 0. ZPEW_A_COEF_LOWCAN = 0. ZPEW_B_COEF = ZVMOD ZPEW_B_COEF_LOWCAN = ZU_LOWCAN ! CALL TEB_GARDEN_STRUCT ( LGARDEN , LGREENROOF , LSOLAR_PANEL , & HZ0H , HIMPLICIT_WIND , HROAD_DIR , HWALL_OPT , TPTIME , & XTSUN , ZT_CANYON , ZQ_CANYON , ZU_CANYON , & ZT_LOWCAN , ZQ_LOWCAN , ZU_LOWCAN , ZZ_LOWCAN , & ZTI_BLD , & ZT_ROOF , ZT_ROAD , ZT_WALL_A , ZT_WALL_B , & ZWS_ROOF , ZWS_ROAD , & HSNOW_ROOF , & ZWSNOW_ROOF , ZTSNOW_ROOF , ZRSNOW_ROOF , ZASNOW_ROOF , & ZTSSNOW_ROOF , ZESNOW_ROOF , & HSNOW_ROAD , & ZWSNOW_ROAD , ZTSNOW_ROAD , ZRSNOW_ROAD , ZASNOW_ROAD , & ZTSSNOW_ROAD , ZESNOW_ROAD , & ZPEW_A_COEF , ZPEW_B_COEF , & ZPEW_A_COEF_LOWCAN , ZPEW_B_COEF_LOWCAN , & XPS , XPA , ZEXNS , ZEXNA , & XTA , ZQA_KGKG , XRHOA , XCO2 , & XLW , ZTDIR_SW , ZTSCA_SW , XSW_BANDS , KSW , & XZENITH , XAZIM , & XRAIN , XSNOW , & ZZREF , ZZREF , ZVMOD , & XH_TRAFFIC , XLE_TRAFFIC , ZH_INDUSTRY , ZLE_INDUSTRY , & XTSTEP_SURF , & ZZ0 , & ZBLD , ZGARDEN , ZROAD_DIR , ZROAD , ZFRAC_GR , & ZBLD_HEIGHT , ZWALL_O_HOR , ZCAN_HW_RATIO , & ZROAD_O_GRND , ZGARDEN_O_GRND , ZWALL_O_GRND , & ZALB_ROOF , ZEMIS_ROOF , & ZHC_ROOF , ZTC_ROOF , ZD_ROOF , & ZALB_ROAD , ZEMIS_ROAD , ZSVF_ROAD , & ZHC_ROAD , ZTC_ROAD , ZD_ROAD , & ZALB_WALL , ZEMIS_WALL , ZSVF_WALL , & ZSVF_GARDEN , & ZHC_WALL , ZTC_WALL , ZD_WALL , & ZRN_ROOF , ZH_ROOF , ZLE_ROOF , ZLEW_ROOF , ZGFLUX_ROOF , & ZRUNOFF_ROOF , & ZRN_ROAD , ZH_ROAD , ZLE_ROAD , ZLEW_ROAD , ZGFLUX_ROAD , & ZRUNOFF_ROAD , & ZRN_WALL_A , ZH_WALL_A , ZLE_WALL_A , ZGFLUX_WALL_A , & ZRN_WALL_B , ZH_WALL_B , ZLE_WALL_B , ZGFLUX_WALL_B , & ZRN_STRLROOF , ZH_STRLROOF , ZLE_STRLROOF , ZGFLUX_STRLROOF , & ZRUNOFF_STRLROOF , & ZRN_BLT , ZH_BLT , ZLE_BLT , ZGFLUX_BLT , & ZRNSNOW_ROOF , ZHSNOW_ROOF , ZLESNOW_ROOF , ZGSNOW_ROOF , & ZMELT_ROOF , & ZRNSNOW_ROAD , ZHSNOW_ROAD , ZLESNOW_ROAD , ZGSNOW_ROAD , & ZMELT_ROAD , & ZRN_GRND , ZH_GRND , ZLE_GRND , ZGFLUX_GRND , & ZRN_TOWN , ZH_TOWN , ZLE_TOWN , ZGFLUX_TOWN , ZEVAP_TOWN , & ZRUNOFF_TOWN , ZSFCO2 , & ZUW_GRND , ZUW_ROOF , ZDUWDU_GRND , ZDUWDU_ROOF , & ZUSTAR_TOWN , ZCD , ZCDN , ZCH_TOWN , ZRI_TOWN , & ZTS_TOWN , ZEMIS_TOWN , ZDIR_ALB_TOWN , ZSCA_ALB_TOWN , & ZRESA_TOWN , ZDQS_TOWN , ZQF_TOWN , ZQF_BLD , & ZFLX_BLD , ZAC_ROAD , ZAC_GARDEN , ZAC_GREENROOF , & ZAC_ROAD_WAT , ZAC_GARDEN_WAT , ZAC_GREENROOF_WAT , & ZABS_SW_ROOF , ZABS_LW_ROOF , & ZABS_SW_SNOW_ROOF , ZABS_LW_SNOW_ROOF , & ZABS_SW_ROAD , ZABS_LW_ROAD , & ZABS_SW_SNOW_ROAD , ZABS_LW_SNOW_ROAD , & ZABS_SW_WALL_A , ZABS_LW_WALL_A , & ZABS_SW_WALL_B , ZABS_LW_WALL_B , & ZABS_SW_PANEL , ZABS_LW_PANEL , & ZABS_SW_GARDEN , ZABS_LW_GARDEN , & ZABS_SW_GREENROOF , ZABS_LW_GREENROOF , & ZG_GREENROOF_ROOF , & CCOOL_COIL , ZF_WATER_COND , CHEAT_COIL , & HNATVENT , ZNATVENT , IDAY , ZAUX_MAX , ZT_FLOOR , & ZT_MASS , ZH_BLD_COOL , ZT_BLD_COOL , ZH_BLD_HEAT , & ZLE_BLD_COOL , ZLE_BLD_HEAT , ZH_WASTE , ZLE_WASTE , & ZF_WASTE_CAN , ZHVAC_COOL , ZHVAC_HEAT , ZQIN , ZQIN_FRAD , & ZQIN_FLAT , ZGR , ZEFF_HEAT , ZINF , & ZTCOOL_TARGET , ZTHEAT_TARGET , ZHR_TARGET , ZT_WIN2 , & ZQI_BLD , ZV_VENT , ZCAP_SYS_HEAT , ZCAP_SYS_RAT , ZT_ADP , & ZM_SYS_RAT , ZCOP_RAT , ZCAP_SYS , ZM_SYS , ZCOP , ZQ_SYS , & ZT_SYS , ZTR_SW_WIN , ZFAN_POWER , ZHC_FLOOR , ZTC_FLOOR , & ZD_FLOOR , ZT_WIN1 , ZABS_SW_WIN , ZABS_LW_WIN , ZSHGC , & ZSHGC_SH , ZUGG_WIN , ZALB_WIN , ZABS_WIN , ZEMIT_LW_FAC , & ZEMIT_LW_GRND , ZT_RAD_IND , ZREF_SW_GRND , ZREF_SW_FAC , & ZHU_BLD , ZTIME , LSHADE , ZSHADE , GSHAD_DAY , & GNATVENT_NIGHT , & CBEM , & ZN_FLOOR , ZWALL_O_BLD , ZGLAZ_O_BLD , ZMASS_O_BLD , & ZFLOOR_HW_RATIO , ZF_FLOOR_MASS , ZF_FLOOR_WALL , & ZF_FLOOR_WIN , ZF_FLOOR_ROOF , ZF_WALL_FLOOR , ZF_WALL_MASS ,& ZF_WALL_WIN , ZF_WIN_FLOOR , ZF_WIN_MASS , ZF_WIN_WALL , & ZF_MASS_FLOOR , ZF_MASS_WALL , ZF_MASS_WIN , LCANOPY , & ZTRAN_WIN , CCH_BEM , ZROUGH_ROOF , ZROUGH_WALL , ZF_WIN_WIN ,& LPAR_RD_IRRIG , ZRD_START_MONTH , ZRD_END_MONTH , & ZRD_START_HOUR , ZRD_END_HOUR , ZRD_24H_IRRIG , ZIRRIG_ROAD ,& ZEMIS_PANEL , ZALB_PANEL , ZEFF_PANEL , ZFRAC_PANEL , & ZRESIDENTIAL , & ZTHER_PROD_PANEL , ZPHOT_PROD_PANEL , ZPROD_PANEL , & ZTHER_PROD_BLD , ZPHOT_PROD_BLD , ZPROD_BLD , & ZTHER_PRODC_DAY , ZH_PANEL , ZRN_PANEL , & ZDT_RES , ZDT_OFF , & ZCUR_TCOOL_TARGET , ZCUR_THEAT_TARGET , ZCUR_QIN ) ! Calculate the total (direct + diffuse radiations) town albedo IF ( ZTDIR_SW ( 1 , 1 ) == 0. ) THEN ZALB_TOWN = 0. ELSE ZALB_TOWN = ( ZDIR_ALB_TOWN * ZTDIR_SW ( 1 , 1 ) + ZSCA_ALB_TOWN * ZTSCA_SW ( 1 , 1 )) / ( ZTDIR_SW ( 1 , 1 ) + ZTSCA_SW ( 1 , 1 )) END IF ! TEB does not modify the wind direction ZDIR_CANYON = ZDIR ( 1 ) ! Town specific humidity assumed to be same as canyon humidity ZQ_TOWN = ZQ_CANYON XU_CANYON = ZU_CANYON ! The heating and cooling energy demand are converted ! from W/m²(bld) to W/m²(tot). ZHVAC_COOL_TOT = ZBLD * ZHVAC_COOL ZHVAC_HEAT_TOT = ZBLD * ZHVAC_HEAT END SUBROUTINE TEB_DRIVER END MODULE MODD_WRF_TEB_DRIVER","tags":"","loc":"sourcefile/modd_wrf_teb_driver.f90.html"},{"title":"modi_ol_read_atm_ascii.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_OL_READ_ATM_ASCII Source Code modi_ol_read_atm_ascii.F90 Source Code !auto_modi:spll_ol_read_atm_ascii.D MODULE MODI_OL_READ_ATM_ASCII INTERFACE SUBROUTINE OL_READ_ATM_ASCII ( KFORC_STEP , & PTA , PQA , PWIND , PDIR_SW , PSCA_SW , PLW , PSNOW , & PRAIN , PPS , PCO2 , PDIR ) IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( OUT ) :: PTA REAL , DIMENSION (:,:), INTENT ( OUT ) :: PQA REAL , DIMENSION (:,:), INTENT ( OUT ) :: PWIND REAL , DIMENSION (:,:), INTENT ( OUT ) :: PDIR_SW REAL , DIMENSION (:,:), INTENT ( OUT ) :: PSCA_SW REAL , DIMENSION (:,:), INTENT ( OUT ) :: PLW REAL , DIMENSION (:,:), INTENT ( OUT ) :: PSNOW REAL , DIMENSION (:,:), INTENT ( OUT ) :: PRAIN REAL , DIMENSION (:,:), INTENT ( OUT ) :: PPS REAL , DIMENSION (:,:), INTENT ( OUT ) :: PCO2 REAL , DIMENSION (:,:), INTENT ( OUT ) :: PDIR INTEGER , INTENT ( IN ) :: KFORC_STEP END SUBROUTINE OL_READ_ATM_ASCII END INTERFACE END MODULE MODI_OL_READ_ATM_ASCII","tags":"","loc":"sourcefile/modi_ol_read_atm_ascii.f90.html"},{"title":"modi_close_file.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_CLOSE_FILE Source Code modi_close_file.F90 Source Code !auto_modi:spll_close_file.D MODULE MODI_CLOSE_FILE INTERFACE SUBROUTINE CLOSE_FILE ( HPROGRAM , KUNIT ) IMPLICIT NONE CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HPROGRAM ! main program INTEGER , INTENT ( IN ) :: KUNIT ! logical unit of file END SUBROUTINE CLOSE_FILE END INTERFACE END MODULE MODI_CLOSE_FILE","tags":"","loc":"sourcefile/modi_close_file.f90.html"},{"title":"modi_open_close_bin_asc_forc.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_OPEN_CLOSE_BIN_ASC_FORC Source Code modi_open_close_bin_asc_forc.F90 Source Code !auto_modi:spll_open_close_bin_asc_forc.D MODULE MODI_OPEN_CLOSE_BIN_ASC_FORC INTERFACE SUBROUTINE OPEN_CLOSE_BIN_ASC_FORC ( HACTION , HFORCING , HACTION2 ) IMPLICIT NONE CHARACTER ( LEN = 5 ), INTENT ( IN ) :: HACTION ! action to do CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HFORCING ! forcing file type CHARACTER ( LEN = 1 ), INTENT ( IN ) :: HACTION2 ! 'R': read, 'W': write END SUBROUTINE OPEN_CLOSE_BIN_ASC_FORC END INTERFACE END MODULE MODI_OPEN_CLOSE_BIN_ASC_FORC","tags":"","loc":"sourcefile/modi_open_close_bin_asc_forc.f90.html"},{"title":"read_surf_atm.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_READ_SURF_ATM Subroutines READ_SURF_ATM Source Code read_surf_atm.F90 Source Code !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Copyright 1998-2013 Meteo-France ! This is part of the TEB software governed by the CeCILL licence version 2.1. ! See the following links for details: ! https://cecill.info/licences/Licence_CeCILL_V2.1-en.txt ! https://cecill.info/licences/Licence_CeCILL_V2.1-fr.txt !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! MODULE MODI_READ_SURF_ATM INTERFACE !************************************************************************** SUBROUTINE READ_SURF_ATM ( HPROGRAM , PFIELD , & KFORC_STEP , KNB , KINIT ) !************************************************************************** IMPLICIT NONE ! ! global variables INTEGER , INTENT ( IN ) :: KFORC_STEP INTEGER , INTENT ( IN ) :: KNB INTEGER , INTENT ( IN ) :: KINIT CHARACTER ( LEN = 6 ) , INTENT ( IN ) :: HPROGRAM REAL , DIMENSION (:,:), INTENT ( OUT ) :: PFIELD END SUBROUTINE READ_SURF_ATM END INTERFACE END MODULE MODI_READ_SURF_ATM ! !************************************************************************** SUBROUTINE READ_SURF_ATM ( HPROGRAM , PFIELD , & KFORC_STEP , KNB , KINIT ) !************************************************************************** ! !!    PURPOSE !!    ------- !         Read in the ascii file the atmospheric forcing for the actual time !         step KFORC_STEP, and for the next one. !         The two time step are needed for the time interpolation of the !         forcing. !         If the end of the file  is reached, set the two step to the last !         values. !         Return undef value if the variable is not present !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!\tA. Lemonsu  *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original     03/2008 ! ! IMPLICIT NONE ! ! global variables REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PFIELD INTEGER , INTENT ( IN ) :: KFORC_STEP INTEGER , INTENT ( IN ) :: KNB INTEGER , INTENT ( IN ) :: KINIT CHARACTER ( LEN = 6 ) , INTENT ( IN ) :: HPROGRAM ! local variables INTEGER :: I ! !---------------------------------------------------------------------------- ! IF ( HPROGRAM == 'ASCII ' ) THEN ! IF ( KFORC_STEP . EQ . 1 ) THEN REWIND ( KINIT ) DO I = 1 , KNB READ ( KINIT , * ) PFIELD (:, I ) ENDDO ELSE DO I = 1 , KNB - 1 PFIELD (:, I ) = PFIELD (:, I + 1 ) ENDDO READ ( KINIT , * ) PFIELD (:, KNB ) ENDIF ! ENDIF END SUBROUTINE READ_SURF_ATM","tags":"","loc":"sourcefile/read_surf_atm.f90.html"},{"title":"modd_arch.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_ARCH Source Code modd_arch.F90 Source Code !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Copyright 1998-2013 Meteo-France ! This is part of the TEB software governed by the CeCILL licence version 2.1. ! See the following links for details: ! https://cecill.info/licences/Licence_CeCILL_V2.1-en.txt ! https://cecill.info/licences/Licence_CeCILL_V2.1-fr.txt !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !     ################## MODULE MODD_ARCH !     ################## ! !!****  *MODD_ARCH - defines the architecture of the REALs in the machine !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!\tV. Masson    *Meteo France* !! !!    MODIFICATIONS !!    ------------- !! ! !*       0.   DECLARATIONS ! IMPLICIT NONE LOGICAL :: LITTLE_ENDIAN_ARCH = . FALSE . ! END MODULE MODD_ARCH","tags":"","loc":"sourcefile/modd_arch.f90.html"},{"title":"mode_char2real.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODE_CHAR2REAL Source Code mode_char2real.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. MODULE MODE_CHAR2REAL ! USE MODI_ABOR1_SFX ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! INTERFACE ASSIGNMENT ( = ) MODULE PROCEDURE CHAR_TO_REAL END INTERFACE ! CONTAINS ! SUBROUTINE CHAR_TO_REAL ( KOUT , HSTR ) USE MODD_ARCH , ONLY : LITTLE_ENDIAN_ARCH IMPLICIT NONE CHARACTER ( LEN =* ), DIMENSION (:), INTENT ( IN ) :: HSTR REAL , DIMENSION ( SIZE ( HSTR )), INTENT ( OUT ) :: KOUT INTEGER :: ISIZE , JI CHARACTER ( LEN = 8 ), DIMENSION (:), ALLOCATABLE :: YTEMP CHARACTER ( LEN = 4 ), DIMENSION (:), ALLOCATABLE :: YTEMP2 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CHAR2REAL:CHAR_TO_REAL' , 0 , ZHOOK_HANDLE ) SELECT CASE ( LEN ( HSTR ( 1 ))) CASE ( 8 ) ISIZE = SIZE ( HSTR ) IF ( LITTLE_ENDIAN_ARCH ) THEN ! must swap 8 bytes ALLOCATE ( YTEMP ( ISIZE )) DO JI = 1 , ISIZE YTEMP ( JI )( 1 : 1 ) = HSTR ( JI )( 8 : 8 ) YTEMP ( JI )( 2 : 2 ) = HSTR ( JI )( 7 : 7 ) YTEMP ( JI )( 3 : 3 ) = HSTR ( JI )( 6 : 6 ) YTEMP ( JI )( 4 : 4 ) = HSTR ( JI )( 5 : 5 ) YTEMP ( JI )( 5 : 5 ) = HSTR ( JI )( 4 : 4 ) YTEMP ( JI )( 6 : 6 ) = HSTR ( JI )( 3 : 3 ) YTEMP ( JI )( 7 : 7 ) = HSTR ( JI )( 2 : 2 ) YTEMP ( JI )( 8 : 8 ) = HSTR ( JI )( 1 : 1 ) END DO KOUT = TRANSFER ( YTEMP , 1.0_8 , ISIZE ) DEALLOCATE ( YTEMP ) ELSE KOUT = TRANSFER ( HSTR , 1.0_8 , ISIZE ) END IF CASE ( 4 ) ! EMULATE a 32 bits REAL ISIZE = SIZE ( HSTR ) IF ( LITTLE_ENDIAN_ARCH ) THEN ALLOCATE ( YTEMP2 ( ISIZE )) DO JI = 1 , ISIZE YTEMP2 ( JI )( 1 : 1 ) = HSTR ( JI )( 4 : 4 ) YTEMP2 ( JI )( 2 : 2 ) = HSTR ( JI )( 3 : 3 ) YTEMP2 ( JI )( 3 : 3 ) = HSTR ( JI )( 2 : 2 ) YTEMP2 ( JI )( 4 : 4 ) = HSTR ( JI )( 1 : 1 ) END DO KOUT = TRANSFER ( YTEMP2 , 1.0_4 , ISIZE ) DEALLOCATE ( YTEMP2 ) ELSE KOUT = TRANSFER ( HSTR , 1.0_4 , ISIZE ) END IF CASE ( 2 ) ! EMULATE a 16 bits signed INTEGER IF ( LITTLE_ENDIAN_ARCH ) THEN ! must swap 2 bytes KOUT = ICHAR ( HSTR (:)( 2 : 2 )) + 256 * ICHAR ( HSTR (:)( 1 : 1 )) ELSE KOUT = ICHAR ( HSTR (:)( 1 : 1 )) + 256 * ICHAR ( HSTR (:)( 2 : 2 )) END IF WHERE ( KOUT > 32767 ) KOUT = KOUT - 6553 6. END WHERE CASE ( 1 ) ! EMULATE an 8 bits signed INTEGER KOUT (:) = ICHAR ( HSTR (:)) WHERE ( KOUT > 127 ) KOUT = KOUT - 25 6. END WHERE CASE default CALL ABOR1_SFX ( 'MODE_CHAR2REAL: CONVERSION ERROR IN READ_DIRECT SUBROUTINE' ) END SELECT IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CHAR2REAL:CHAR_TO_REAL' , 1 , ZHOOK_HANDLE ) END SUBROUTINE CHAR_TO_REAL END MODULE MODE_CHAR2REAL","tags":"","loc":"sourcefile/mode_char2real.f90.html"},{"title":"sunpos.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_SUNPOS Subroutines SUNPOS Source Code sunpos.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL licence !SFX_LIC version 2.1. See Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !     ################## MODULE MODI_SUNPOS !     ################## ! INTERFACE ! SUBROUTINE SUNPOS ( KYEAR , KMONTH , KDAY , PTIME , PLON , PLAT , PTSUN , PZENITH , PAZIMSOL ) ! INTEGER , INTENT ( IN ) :: KYEAR ! current year INTEGER , INTENT ( IN ) :: KMONTH ! current month INTEGER , INTENT ( IN ) :: KDAY ! current day REAL , INTENT ( IN ) :: PTIME ! current time REAL , DIMENSION (:), INTENT ( IN ) :: PLON ! longitude REAL , DIMENSION (:), INTENT ( IN ) :: PLAT ! latitude REAL , DIMENSION (:), INTENT ( OUT ) :: PZENITH ! Solar zenithal angle REAL , DIMENSION (:), INTENT ( OUT ) :: PAZIMSOL ! Solar azimuthal angle REAL , DIMENSION (:), INTENT ( OUT ) :: PTSUN ! Solar time ! END SUBROUTINE SUNPOS ! END INTERFACE ! END MODULE MODI_SUNPOS ! !     ######### SUBROUTINE SUNPOS ( KYEAR , KMONTH , KDAY , PTIME , & PLON , PLAT , PTSUN , PZENITH , PAZIMSOL ) !     #################################################################################### ! !!****  *SUNPOS * - routine to compute the position of the sun !! !!    PURPOSE !!    ------- !!      The purpose of this routine is to compute the cosine and sinus of the !!    solar zenithal angle (angle defined by the local vertical at the position !!    XLAT, XLON and the direction of the sun) and the azimuthal solar !!    angle (angle between an horizontal direction (south or north according !!    to the terrestrial hemisphere) and the horizontal projection of the !!    direction of the sun. !! !!**  METHOD !!    ------ !!      The cosine and sinus of the zenithal solar angle  and the azimuthal !!    solar angle are computed from the true universal time, valid for the (XLAT, !!    XLON) location, and from the solar declination angle of the day. There !!    is a special convention to define the azimuthal solar angle. !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!      \"Radiative Processes in Meteorology and Climatology\" !!                          (1976)   Paltridge and Platt !! !!    AUTHOR !!    ------ !!      J.-P. Pinty      * Laboratoire d'Aerologie* !! !!    MODIFICATIONS !!    ------------- !!      Original             16/10/94 !!      Revised              12/09/95 !!      (J.Stein)            01:04/96  bug correction for ZZEANG !!      (K. Suhre)           14/02/97  bug correction for ZLON0 !!      (V. Masson)          01/03/03  add zenithal angle output !!      (V. Masson)          14/03/14  avoid discontinuous declination at 00UTC each day !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS , ONLY : XPI , XDAY ! IMPLICIT NONE ! ! !*       0.1   Declarations of dummy arguments : ! INTEGER , INTENT ( IN ) :: KYEAR ! current year INTEGER , INTENT ( IN ) :: KMONTH ! current month INTEGER , INTENT ( IN ) :: KDAY ! current day REAL , INTENT ( IN ) :: PTIME ! current time REAL , DIMENSION (:), INTENT ( IN ) :: PLON ! longitude REAL , DIMENSION (:), INTENT ( IN ) :: PLAT ! latutude ! REAL , DIMENSION (:), INTENT ( OUT ) :: PZENITH ! Solar zenithal angle REAL , DIMENSION (:), INTENT ( OUT ) :: PAZIMSOL ! Solar azimuthal angle REAL , DIMENSION (:), INTENT ( OUT ) :: PTSUN ! Solar time ! !*       0.2   declarations of local variables ! ! REAL :: ZUT ! Universal time ! REAL , DIMENSION ( SIZE ( PLON )) :: ZTUT ,& ! True (absolute) Universal Time ZSOLANG ,& ! Hourly solar angle ZSINAZI ,& ! Sine of the solar azimuthal angle ZCOSAZI ,& ! Cosine of the solar azimuthal angle ZLAT , & ZLON , & ! Array of latitudes and longitudes ZSINZEN , & !Sine of zenithal angle ZCOSZEN !Cosine of zenithal angle INTEGER , DIMENSION ( 0 : 11 ) :: IBIS , INOBIS ! Cumulative number of days per month ! for bissextile and regular years REAL :: ZDATE ! Julian day of the year REAL :: ZAD ! Angular Julian day of the year REAL :: ZDECSOL ! Daily solar declination angle REAL :: ZA1 , ZA2 ! Ancillary variables REAL :: ZTSIDER , & ZSINDEL , & !azimuthal angle ZCOSDEL !azimuthal angle ! INTEGER :: JI , JJ INTEGER :: IINDX1 , IINDX2 ! !------------------------------------------------------------------------------- ! !*       1.    TO COMPUTE THE TRUE SOLAR TIME !              ------------------------------- ! ZUT = MOD ( 2 4.0 + MOD ( PTIME / 360 0. , 2 4.0 ), 2 4.0 ) INOBIS (:) = ( / 0 , 31 , 59 , 90 , 120 , 151 , 181 , 212 , 243 , 273 , 304 , 334 / ) IBIS ( 0 : 1 ) = INOBIS ( 0 : 1 ) DO JI = 2 , 11 IBIS ( JI ) = INOBIS ( JI ) + 1 END DO IF ( MOD ( KYEAR , 4 ). EQ . 0 . AND . ( MOD ( KYEAR , 100 ). NE . 0 . OR . MOD ( KYEAR , 400 ). EQ . 0 )) THEN ZDATE = FLOAT ( KDAY + IBIS ( KMONTH - 1 )) - 1 + PTIME / XDAY ZAD = 2.0 * XPI * ZDATE / 36 6.0 ELSE ZDATE = FLOAT ( KDAY + INOBIS ( KMONTH - 1 )) - 1 + PTIME / XDAY ZAD = 2.0 * XPI * ZDATE / 36 5.0 END IF ZA1 = ( 1.00554 * ZDATE - 6.28306 ) * ( XPI / 18 0.0 ) ZA2 = ( 1.93946 * ZDATE + 2 3.35089 ) * ( XPI / 18 0.0 ) ZTSIDER = ( 7.67825 * SIN ( ZA1 ) + 1 0.09176 * SIN ( ZA2 )) / 6 0.0 ! !------------------------------------------------------------------------------- ! !*       2.     COMPUTE THE SOLAR DECLINATION ANGLE !               ----------------------------------- ! ZDECSOL = 0.006918 - 0.399912 * COS ( ZAD ) + 0.070257 * SIN ( ZAD ) & - 0.006758 * COS ( 2. * ZAD ) + 0.000907 * SIN ( 2. * ZAD ) & - 0.002697 * COS ( 3. * ZAD ) + 0.00148 * SIN ( 3. * ZAD ) ZSINDEL = SIN ( ZDECSOL ) ZCOSDEL = COS ( ZDECSOL ) !------------------------------------------------------------------------------- ! IINDX1 = 1 IINDX2 = SIZE ( PLON ) ! DO JJ = IINDX1 , IINDX2 ! !*       3.    LOADS THE ZLAT, ZLON ARRAYS !              --------------------------- ! ZLAT ( JJ ) = PLAT ( JJ ) * ( XPI / 18 0. ) ZLON ( JJ ) = PLON ( JJ ) * ( XPI / 18 0. ) ! !------------------------------------------------------------------------------- ! !*       4.    COMPUTE THE TRUE SOLAR TIME !              ---------------------------- ! ZTUT ( JJ ) = ZUT - ZTSIDER + ZLON ( JJ ) * (( 18 0. / XPI ) / 1 5.0 ) ! PTSUN ( JJ ) = MOD ( PTIME - ZTSIDER * 360 0. + PLON ( JJ ) * 24 0. , XDAY ) ! !------------------------------------------------------------------------------- !*       3.    COMPUTES THE COSINE AND SINUS OF THE ZENITHAL SOLAR ANGLE !              --------------------------------------------------------- ! ZSOLANG ( JJ ) = ( ZTUT ( JJ ) - 1 2.0 ) * 1 5.0 * ( XPI / 18 0. ) ! hour angle in radians ! ZCOSZEN ( JJ ) = SIN ( ZLAT ( JJ )) * ZSINDEL + & ! Cosine of the zenithal COS ( ZLAT ( JJ )) * ZCOSDEL * COS ( ZSOLANG ( JJ )) !       solar angle ! ZSINZEN ( JJ ) = SQRT ( 1. - ZCOSZEN ( JJ ) * ZCOSZEN ( JJ ) ) ! !------------------------------------------------------------------------------- ! !*       5.    ZENITHAL SOLAR ANGLE !              -------------------- ! PZENITH ( JJ ) = ACOS ( ZCOSZEN ( JJ )) ! !------------------------------------------------------------------------------- ! !*       6.    COMPUTE THE AZIMUTHAL SOLAR ANGLE (PAZIMSOL) !              -------------------------------------------- ! IF ( ZSINZEN ( JJ ) /= 0. ) THEN !Azimuth is measured clockwise from north ZSINAZI ( JJ ) = - ZCOSDEL * SIN ( ZSOLANG ( JJ )) / ZSINZEN ( JJ ) ZCOSAZI ( JJ ) = ( - SIN ( ZLAT ( JJ )) * ZCOSDEL * COS ( ZSOLANG ( JJ )) & + COS ( ZLAT ( JJ )) * ZSINDEL & ) / ZSINZEN ( JJ ) PAZIMSOL ( JJ ) = ATAN2 ( ZSINAZI ( JJ ), ZCOSAZI ( JJ )) ELSE PAZIMSOL ( JJ ) = XPI ENDIF ! ENDDO ! !------------------------------------------------------------------------------- ! END SUBROUTINE SUNPOS","tags":"","loc":"sourcefile/sunpos.f90.html"},{"title":"circumsolar_rad.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_CIRCUMSOLAR_RAD Subroutines CIRCUMSOLAR_RAD Source Code circumsolar_rad.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL licence !SFX_LIC version 2.1. See Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. MODULE MODI_CIRCUMSOLAR_RAD INTERFACE SUBROUTINE CIRCUMSOLAR_RAD ( PDIR_SW , PSCA_SW , PZENITH , PF1_o_B ) REAL , DIMENSION (:), INTENT ( IN ) :: PDIR_SW ! direct radiation REAL , DIMENSION (:), INTENT ( IN ) :: PSCA_SW ! scattered radiation REAL , DIMENSION (:), INTENT ( IN ) :: PZENITH ! solar zenith angle REAL , DIMENSION (:), INTENT ( OUT ) :: PF1_o_B ! coef END SUBROUTINE CIRCUMSOLAR_RAD END INTERFACE END MODULE MODI_CIRCUMSOLAR_RAD !     ############################################################################### SUBROUTINE CIRCUMSOLAR_RAD ( PDIR_SW , PSCA_SW , PZENITH , PF1_o_B ) !     ############################################################################### ! !!****  *CIRCUMSOLAR_RAD * !! !!    PURPOSE !!    ------- !! ! compute the fraction of the scattered solar radiation that has a ! directionnal behaviour, it is from the circumsolar region ! for an horizontal surface !! !!**  METHOD !!    ------ !! !!    REFERENCE !!    --------- !! ! Engeneering Reference, EnergyPlus DOE, 2012 ! Perez, 1990 !! !!    AUTHOR !!    ------ !!     G. Pigeon !! !!    MODIFICATIONS !!    ------------- !!      Original    27/11/2012 !!--------------------------------------------------------------- ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB USE MODD_CSTS , ONLY : XPI IMPLICIT NONE ! !*      0.1    declarations of arguments ! REAL , DIMENSION (:), INTENT ( IN ) :: PDIR_SW ! direct radiation REAL , DIMENSION (:), INTENT ( IN ) :: PSCA_SW ! scattered radiation REAL , DIMENSION (:), INTENT ( IN ) :: PZENITH ! solar zenith angle REAL , DIMENSION (:), INTENT ( OUT ) :: PF1_o_B ! coef ! !*      0.2    declarations of local variables ! REAL , DIMENSION ( SIZE ( PZENITH )) :: ZE !sky clearness factor REAL , DIMENSION ( SIZE ( PZENITH )) :: ZB ! b coef REAL , DIMENSION ( SIZE ( PZENITH )) :: ZF1 !factors depending on ZE and Z REAL , DIMENSION ( SIZE ( PZENITH )) :: ZF11 , ZF13 !factors depending on ZE REAL , PARAMETER :: ZK = 1.041 !coef. from EP Engineering Reference REAL , PARAMETER :: ZBMIN = 0.087 !coef. from EP Engineering Reference REAL ( KIND = JPRB ) :: ZHOOK_HANDLE REAL , DIMENSION ( SIZE ( PZENITH )) :: ZELEV INTEGER :: JJ !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_VERT_DOE' , 0 , ZHOOK_HANDLE ) ZELEV = XPI / 2. - PZENITH PF1_o_B = 0. WHERE ( PSCA_SW > 0 ) ZE = (( PSCA_SW + PDIR_SW ) / PSCA_SW + ZK * ZELEV ** 3 ) / ( 1 + ZK * ZELEV ** 3 ) ELSEWHERE ZE = - 1 ENDWHERE DO JJ = 1 , SIZE ( ZELEV ) ZB ( JJ ) = MAX ( ZBMIN , cos ( ZELEV ( JJ ))) ENDDO CALL FIJ ( ZE , ZF11 , ZF13 ) ZF1 = ZF11 + ZF13 * ZELEV PF1_o_B = ZF1 / ZB DO JJ = 1 , SIZE ( PF1_o_B ) PF1_o_B ( JJ ) = MIN ( PF1_o_B ( JJ ), 1. ) PF1_o_B ( JJ ) = MAX ( PF1_o_B ( JJ ), 0. ) ENDDO IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_VERT_DOE' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- CONTAINS SUBROUTINE FIJ ( PE , PF11 , PF13 ) REAL , DIMENSION (:), INTENT ( IN ) :: PE !sky clearness factor REAL , DIMENSION (:), INTENT ( OUT ) :: PF11 REAL , DIMENSION (:), INTENT ( OUT ) :: PF13 WHERE ( PE < 0 ) PF11 = 0 PF13 = 0 ELSEWHERE ( PE < 1.065 ) PF11 = - 0.0083117 PF13 = - 0.0620636 ELSEWHERE ( PE >= 1.065 . AND . PE < 1.230 ) PF11 = 0.1299457 PF13 = - 0.1513752 ELSEWHERE ( PE >= 1.230 . AND . PE < 1.500 ) PF11 = 0.3296958 PF13 = - 0.2210958 ELSEWHERE ( PE >= 1.500 . AND . PE < 1.950 ) PF11 = 0.5682053 PF13 = - 0.2951290 ELSEWHERE ( PE >= 1.950 . AND . PE < 2.800 ) PF11 = 0.8730280 PF13 = - 0.3616149 ELSEWHERE ( PE >= 2.800 . AND . PE < 4.500 ) PF11 = 1.1326077 PF13 = - 0.4118494 ELSEWHERE ( PE >= 4.500 . AND . PE < 6.200 ) PF11 = 1.0601591 PF13 = - 0.3589221 ELSEWHERE PF11 = 0.6777470 PF13 = - 0.2504286 ENDWHERE END SUBROUTINE FIJ END SUBROUTINE CIRCUMSOLAR_RAD","tags":"","loc":"sourcefile/circumsolar_rad.f90.html"},{"title":"modd_ch_tebn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_CH_TEB_n Source Code modd_ch_tebn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ##################### MODULE MODD_CH_TEB_n !     ###################### ! !! !!    PURPOSE !!    ------- ! ! ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! ! !!    AUTHOR !!    ------ !!  P. Tulet   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!  16/07/03 (P. Tulet)  restructured for externalization !------------------------------------------------------------------------------ ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_SV_n , ONLY : SV_t , SV_INIT ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE CH_TEB_t ! CHARACTER ( LEN = 28 ) :: CCHEM_SURF_FILE ! name of general (chemical) purpose ASCII input file CHARACTER ( LEN = 6 ) :: CCH_DRY_DEP !  deposition scheme REAL , DIMENSION (:,:), POINTER :: XDEP ! final dry deposition ! velocity  for nature REAL , DIMENSION (:,:), POINTER :: XSOILRC_SO2 ! for SO2 REAL , DIMENSION (:,:), POINTER :: XSOILRC_O3 ! for O3 LOGICAL :: LCH_BIO_FLUX ! flag for the calculation of ! biogenic fluxes LOGICAL :: LCH_NO_FLUX ! flag for the calculation of ! biogenic NO fluxes TYPE ( SV_t ) :: SVT CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CCH_NAMES ! NAME OF CHEMICAL SPECIES ! (FOR DIAG ONLY) CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CAER_NAMES ! NAME OF CHEMICAL SPECIES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CDSTNAMES ! NAME OF CHEMICAL SPECIES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CSLTNAMES ! NAME OF CHEMICAL SPECIES ! END TYPE CH_TEB_t CONTAINS ! SUBROUTINE CH_TEB_INIT ( YCH_TEB ) TYPE ( CH_TEB_t ), INTENT ( INOUT ) :: YCH_TEB REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_TEB_N:CH_TEB_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YCH_TEB % XDEP ) NULLIFY ( YCH_TEB % XSOILRC_SO2 ) NULLIFY ( YCH_TEB % XSOILRC_O3 ) NULLIFY ( YCH_TEB % CCH_NAMES ) NULLIFY ( YCH_TEB % CAER_NAMES ) NULLIFY ( YCH_TEB % CDSTNAMES ) NULLIFY ( YCH_TEB % CSLTNAMES ) YCH_TEB % CCHEM_SURF_FILE = ' ' YCH_TEB % CCH_DRY_DEP = ' ' YCH_TEB % LCH_BIO_FLUX = . FALSE . YCH_TEB % LCH_NO_FLUX = . FALSE . CALL SV_INIT ( YCH_TEB % SVT ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_TEB_N:CH_TEB_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_TEB_INIT END MODULE MODD_CH_TEB_n","tags":"","loc":"sourcefile/modd_ch_tebn.f90.html"},{"title":"teb_irrig.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines TEB_IRRIG Source Code teb_irrig.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE TEB_IRRIG ( OIRRIG , PTSTEP , KMONTH , PSOLAR_TIME , & PSTART_MONTH , PEND_MONTH , PSTART_HOUR , PEND_HOUR ,& P24H_IRRIG , PIRRIG ) !   ########################################################################## ! !!****  *TEB_IRRIG* !! !!    PURPOSE !!    ------- ! ! Computes the amount of water for irrigation ! ! !!**  METHOD !     ------ ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      C. DeMunck & V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    05/2013 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! ! LOGICAL , INTENT ( IN ) :: OIRRIG ! Flag for irrigation or not REAL , INTENT ( IN ) :: PTSTEP ! time step INTEGER , INTENT ( IN ) :: KMONTH ! Present Month REAL , DIMENSION (:), INTENT ( IN ) :: PSOLAR_TIME ! solar time (s since midnight) REAL , DIMENSION (:), INTENT ( IN ) :: PSTART_MONTH ! First month for irrigation (included) REAL , DIMENSION (:), INTENT ( IN ) :: PEND_MONTH ! Last  month for irrigation (included) REAL , DIMENSION (:), INTENT ( IN ) :: PSTART_HOUR ! First month for irrigation (included) REAL , DIMENSION (:), INTENT ( IN ) :: PEND_HOUR ! Last  month for irrigation (ecluded) REAL , DIMENSION (:), INTENT ( IN ) :: P24H_IRRIG ! 24h total irrigation REAL , DIMENSION (:), INTENT ( OUT ) :: PIRRIG ! present irrigation ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*      0.2    declarations of local variables ! LOGICAL , DIMENSION ( SIZE ( PIRRIG )) :: GMONTH !if irrigation occurs during present month LOGICAL , DIMENSION ( SIZE ( PIRRIG )) :: GHOUR !if irrigation occurs at     present time REAL , DIMENSION ( SIZE ( PIRRIG )) :: ZDURATION ! duration of irrigation per day (s) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'TEB_IRRIG' , 0 , ZHOOK_HANDLE ) ! !*      1.     Default !              ------- ! PIRRIG = 0. ! IF (. NOT . OIRRIG ) THEN IF ( LHOOK ) CALL DR_HOOK ( 'TEB_IRRIG' , 1 , ZHOOK_HANDLE ) RETURN END IF ! !------------------------------------------------------------------------------- ! !*      2.     Is present month irrigated ? !              ---------------------------- ! WHERE ( PSTART_MONTH <= PEND_MONTH ) ! for summer in North hemisphere GMONTH = KMONTH >= PSTART_MONTH . AND . KMONTH <= PEND_MONTH ELSEWHERE ! for summer in South hemisphere ! change of year during irrigation period GMONTH = KMONTH >= PSTART_MONTH . OR . KMONTH <= PEND_MONTH END WHERE ! !------------------------------------------------------------------------------- ! !*      3.     Is present time irrigated (for each location) ? !              ----------------------------------------------- ! GHOUR = . FALSE . ZDURATION = 0. ! WHERE ( PSTART_HOUR <= PEND_HOUR ) ! typically irrigation during day GHOUR = PSOLAR_TIME + PTSTEP >= PSTART_HOUR * 360 0. . AND . PSOLAR_TIME <= PEND_HOUR * 360 0. ZDURATION = 360 0. * ( PEND_HOUR - PSTART_HOUR ) ELSE WHERE ! typically irrigation during night ! midnight is during irrigation period GHOUR = PSOLAR_TIME + PTSTEP >= PSTART_HOUR * 360 0. . OR . PSOLAR_TIME < PEND_HOUR * 360 0. ZDURATION = 360 0. * ( PEND_HOUR + 2 4. - PSTART_HOUR ) END WHERE ! !------------------------------------------------------------------------------- ! !*      4.     Computes irrigation !              ------------------- ! !* if duration is very short, all water is irrigated during the timestep ZDURATION = MAX ( ZDURATION , PTSTEP ) ! !* Concentration of the total 24h irrigation during the period of irrigation WHERE ( GMONTH (:) . AND . GHOUR (:)) PIRRIG (:) = P24H_IRRIG (:) / ZDURATION (:) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'TEB_IRRIG' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE TEB_IRRIG","tags":"","loc":"sourcefile/teb_irrig.f90.html"},{"title":"modd_co2v_par.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_CO2V_PAR Source Code modd_co2v_par.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     #################### MODULE MODD_CO2V_PAR !     #################### ! !!*****MODD_CO2V_PAR* !! !!    PURPOSE !!    ------- !!    Supply constants and parameter values as !!    a function of vegetation class to describe !!    the vgegtation cover and for the !!    stomatal conductance model of Jacobs. !!    (Calvet et al. 1997, Agrig. and For. Met.) !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      A. Boone           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    26/10/97 !!      Modified    12/03/04  by P LeMoigne: XAMMIN in (kg m-2 s-1) !!      Modified    12/03/04  by P LeMoigne: XFZERO taken from Calvet 98 !!      Modified    18/10/04  by P LeMoigne: XFZERO splitted into 2 !!      P Le Moigne 09/2005 AGS modifs of L. Jarlan !       S. Lafont    03/2009 : change unit of EPSO GAMM ANMAX !!      A.L. Gibelin 04/2009 : correction of some AGS parameters and suppress !!                             useless parameters !!      A.L. Gibelin 04/2009 : add parameters for PHOTO='NCB' !!      A.L. Gibelin 06/2009 : add parameters for RESPSL='CNT' !!      B. Decharme  05/2012 : Add XCC_NITRO and XBIOMASST_LIM (optimization) !!      R. Alkama    05/2012 : parameters for 19 vegtype rather than 12 !!Seferian & Delire  06/2015 : updating XAMAX peding on TRY database Kattge et al. GCB 2011 !! !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! !                           *** First, CO2 parameters *** !                               --------------------- ! USE MODD_DATA_COVER_PAR , ONLY : NVEGTYPE_OLD , NVEGTYPE_ECOSG ! IMPLICIT NONE ! REAL , PARAMETER :: XSPIN_CO2 = 0.1 !                                       fraction of the total spinup period used !                                       to ramp up CO2 concentration from XCO2_START to XCO2_END ! REAL , PARAMETER :: XMCO2 = 4 4.0E-3 , XMC = 1 2.0E-3 !                                       molecular mass of CO2, !                                       and C (Carbon), respectively !                                       (used for conversions in kg) ! REAL , PARAMETER :: XPARCF = 0.48 !                                       coefficient: PAR fraction of incoming solar radiation ! REAL , PARAMETER :: XRACCF = 1.00 !                                       Factor for aerodynamic resistance for CO2 ! REAL , PARAMETER :: XPCCO2 = 0.40 !                                       proportion of Carbon in dry plant biomass (kgC/kgDM) ! REAL , PARAMETER :: XIAOPT = 50 0. , XDSPOPT = 0.0 !                                       optimum/initial values for absorbed global !                                       radiation, saturation deficit, respectively. REAL , PARAMETER :: XXGT = 0.5 !                                       spherical distribution of leaves ! REAL , PARAMETER :: XDIFRACF = 0.25 !                                       used in computation of fraction of diffusion ! REAL , PARAMETER :: XXBOMEGA = 0.9442719 !                                       Factor Assuming the albedo from simple diffusion !                                       of the leaf (PAR) or 'omega'=0.2 ! REAL , PARAMETER :: XRDCF = 1. / 9. !                                       Dark respiration factor/coefficient ! REAL , PARAMETER :: XCONDCTMIN = 0.0002 !                                       minimum canopy conductance !                                       or (1/5000) ! REAL , PARAMETER :: XCONDSTMIN = 1.0E-5 !                                       minimum stomatal conductance for CO2 !                                       or (1/100000) ! REAL , PARAMETER :: XANFMINIT = 1.E-8 !                                       initial maximum leaf assimilation ! REAL , PARAMETER :: XAIRTOH2O = 1.606 !                                       ratio XMD (AIR)/XMV (H2O) ! ! REAL , PARAMETER :: XCO2TOH2O = 1.6 !                                       ratio of the binary diffusivities of CO2 and H2O in air ! ! REAL , PARAMETER :: XAW = 4.7 , XASW = 2.8 , XBW = 7.0 !                                       coefficient of stress universal relationship !                                       for Woody species ! REAL , PARAMETER :: XDMAXN = 3.0E-2 , XDMAXX = 3.0E-1 !                                       minimum and maximum air deficit stress parameters !                                       used for Herbaceous offensive and defensive strategy ! ! !                      Parameter values [C3,C4] at 25 C: ! REAL , PARAMETER , DIMENSION ( 2 ) :: XTOPT = ( / 2 5.0 , 3 5.0 / ) !                                       optimum/initial temperatures for evaluating !                                       compensation points ! REAL , PARAMETER , DIMENSION ( 2 ) :: XFZERO1 = ( / 0.85 , 0.50 / ) ! AGS LAI REAL , PARAMETER , DIMENSION ( 2 ) :: XFZERO2 = ( / 0.95 , 0.60 / ) ! AST, LST, NIT, NCB !                                       CO2_atm/CO2_int with no photorespiration or saturation deficit, !                                       used only for crops & herbaceous plants REAL , PARAMETER , DIMENSION ( 2 ) :: XFZEROTROP = ( / 0.74 , 0.74 / ) ! Tropical forests with and without !                                       Carrer et al. radiative transfer ! REAL , PARAMETER , DIMENSION ( 2 ) :: XEPSO = ( / 0.017E-6 , 0.014E-6 / ) !                                       maximum initial quantum use efficiency !                                       (kgCO2 J-1 PAR ) ! REAL , PARAMETER , DIMENSION ( 2 ) :: XGAMM = ( / 4 5.0 , 2.8 / ) !                                       CO2 conpensation concentration (ppmv) ! REAL , PARAMETER , DIMENSION ( 2 ) :: XQDGAMM = ( / 1.5 , 1.5 / ) !                                       Q10 function for CO2 conpensation concentration ! REAL , PARAMETER , DIMENSION ( 2 ) :: XQDGMES = ( / 2.0 , 2.0 / ) !                                       Q10 function for mesophyll conductance ! REAL , PARAMETER , DIMENSION ( 2 ) :: XT1GMES = ( / 5.0 , 1 3.0 / ) !                                       reference temperature for computing compensation !                                       concentration function for mesophyll conductance: !                                       minimum temperature ! REAL , PARAMETER , DIMENSION ( 2 ) :: XT2GMES = ( / 3 6.0 , 3 6.0 / ) !                                       reference temperature for computing compensation !                                       concentration function for mesophyll conductance: !                                       maximum temperature ! REAL , PARAMETER , DIMENSION ( 2 ) :: XQDAMAX = ( / 2.0 , 2.0 / ) !                                       Q10 function for leaf photosynthetic capacity ! REAL , PARAMETER , DIMENSION ( 2 ) :: XT1AMAX = ( / 8.0 , 1 3.0 / ) !                                       reference temperature for computing compensation !                                       concentration function for leaf photosynthetic !                                       capacity: minimum temperature ! REAL , PARAMETER , DIMENSION ( 2 ) :: XT2AMAX = ( / 3 8.0 , 3 8.0 / ) !                                       reference temperature for computing compensation !                                       concentration function for leaf photosynthetic !                                       capacity: maximum temperature ! REAL , PARAMETER , DIMENSION ( 2 ) :: XAH = ( / 2.381 , 5.323 / ) ! ! REAL , PARAMETER , DIMENSION ( 2 ) :: XBH = ( /- 0.6103 , - 0.8929 / ) !                                       coefficient of stress universal relationship !                                       for herbaceous plants ! ! ! Nitrogen option (YPHOTO='NIT' OR YPHOTO='NCB') parameters: ! REAL , PARAMETER :: XRESPFACTOR_NIT = 1.16E-7 !                                maintenance respiration rate (1% per day) !                                of structural biomass (Faurie, 1994) [s-1] ! REAL , PARAMETER :: XCA_NIT = 0.38 !                                rate of nitrogen dilution of above-ground biomass at all [CO2] !                                (Calvet and Soussana 2001, Gibelin et al. 2006) ! REAL , PARAMETER :: XCC_NIT = 0.753846 !                                Proportion of active biomass for 1t ha-1 !                                of total above-ground biomass [-] ! REAL , PARAMETER :: XCC_NITRO = 0.31425531725 !                                coef c for biomass in kg/m2 !                                Old : XCC_NIT/10.**XCA_NIT in nitro_decline.F90 ! REAL , PARAMETER :: XBIOMASST_LIM = 4.7540042445E-2 !                                threshold value for leaf biomass and total !                                above ground biomass in nitrogen dilution theory !                                Old : XCC_NITRO**(1.0/XCA_NIT) in nitro_decline.F90 ! ! ! Nitrogen option with allocation of carbon (YPHOTO='NCB') parameters: ! REAL , PARAMETER :: XCOEFF_MAINT_RESP_ZERO = 1.19E-4 / 8640 0. !                                value of coefficient for maintenance respiration at 0C (g/g/s) ! REAL , PARAMETER :: XSLOPE_MAINT_RESP = 0.16 !                                slope for maintenance respiration for temperature dependance (1/C) ! REAL , PARAMETER , DIMENSION ( NVEGTYPE_OLD ) :: XTAU_WOOD = & ( / 0. , 0. , 0. , 4 0. * 36 5. * 8640 0. , 5 0. * 36 5. * 8640 0. , 3 0. * 36 5. * 8640 0. , 0. , 0. , 0. , 0. , & 0. , 0. , 4 0. * 36 5. * 8640 0. , 4 0. * 36 5. * 8640 0. , 5 0. * 36 5. * 8640 0. , 4 0. * 36 5. * 8640 0. , & 5 0. * 36 5. * 8640 0. , 0. , 4 0. * 36 5. * 8640 0. / ) !                                 Residence time in woody pools (s) (YPHOTO='NCB') ! ! ! Soil carbon (YPHOTO='NCB' and YRESPSL='CNT') parameters: ! REAL , DIMENSION ( 6 ) :: XCN !                                       Biomass Carbon/Nitrogen ratio ! REAL , DIMENSION ( 6 ) :: XLC !                                       Biomass Lignin/Carbon ratio ! REAL , DIMENSION ( 6 , 2 ) :: XFRAC_LITTER !                                       Fraction of biomass pools going into litter pools ! REAL , DIMENSION ( 2 ) :: XTAU_LITTER !                                       Residence times in litter pools (s) ! REAL , DIMENSION ( 2 , 3 , 6 ) :: XFRAC_SOILCARB !                                       Fraction of litter decomposition flux that goes into soil ! REAL , DIMENSION ( 3 ) :: XTAU_SOILCARB !                                       Residence times in carbon pools (s) ! ! Radiative transfer parameters ! ! single scattering albedo REAL , PARAMETER :: XSSA_SUP = 0.15 ! single scatering albedo (PAR) for upper layer REAL , PARAMETER :: XSSA_INF = 0.15 ! single scatering albedo (PAR) for lower layer ! REAL , PARAMETER :: XSSA_SUP_PIR = 0.80 ! single scatering albedo (PAR) for upper layer REAL , PARAMETER :: XSSA_INF_PIR = 0.80 ! single scatering albedo (PAR) for lower layer ! upper layer (calibration should depend on vegetation type...) REAL , PARAMETER :: XK_SUP = 2. ! k_sup = 2*tan(zc); where zc is the crown angle REAL , PARAMETER :: XXSI_SUP = 2. ! hight/diameter ratio of the crown ! ! lower layer (calibration should depend on vegetation type...) REAL , PARAMETER :: XK_INF = 1. ! k_sup = 2*tan(zc); where zc is the crown angle REAL , PARAMETER :: XXSI_INF = 7. ! height/diameter ratio of the crown ! REAL , PARAMETER , DIMENSION ( NVEGTYPE_OLD ) :: XLAI_SHADE = & ! above this value shading is activated ( / 0. , 0. , 0. , 2. , 3. , 6. , 2. , 2. , 2. , 2. , 2. , 2. , 2. , 2. , 3. , 2. , 3. , 2. , 2. / ) REAL , PARAMETER , DIMENSION ( NVEGTYPE_OLD ) :: XXB_SUP = & ! b_sup = 1/omega_sup(zs=0) -1 calibration avec omega_sup(zs=0)=0.5 ( / 1. , 1. , 1. , 1. , 2. , 3. , 2. , 2. , 2. , 2. , 2. , 2. , 1. , 1. , 2. , 1. , 2. , 2. , 1. / ) REAL , PARAMETER , DIMENSION ( NVEGTYPE_OLD ) :: XXB_INF = & ! b_sup = 1/omega_sup(zs=0) -1 calibration avec omega_sup(zs=0)=0.5 ( / 1. , 1. , 1. , 4. , 2. , 4. , 1. , 1.5 , 1.5 , 1. , 1. , 1. , 4. , 4. , 2. , 4. , 2. , 1. , 4. / ) ! ! (Calvet et al. 2008) coefs for ratio of biomass to LAI with representation of nitrogen dilution fct of CO2 !REAL, PARAMETER, DIMENSION(NVEGTYPE_OLD) :: XPARAM = & !(/ 0., 0., 0., 2.56, 1.81, 1.81, 1.48, 1.48, 1.48, 1.81, 1.81, 1.81, 2.56, 2.56, 1.81, 2.56, & !  1.81, 1.81, 2.56 /) ! ! Kronecker flag for nitrogen dilution hypothesis (based on Yin et al., 2002) REAL , PARAMETER , DIMENSION ( NVEGTYPE_OLD ) :: XDILUDEC = & ( / 0. , 0. , 0. , 1. , 0. , 0. , 1. , 1. , 1. , 1. , 1. , 0. , 1. , 0. , 0. , 1. , 1. , 0. , 1. / ) ! ! Maximum Leaf photosynthetic capacity (kgCO2 m-2 s-1) ! Modified according to Kattge et al., 2009 median Vcmax at 25C values, except for TRBE : median-std ! For C3 PFTs : Ammax = Vcmax / 2.     (Jacobs, p 150) ! For C4 PFTs : Ammax = Vcmax ! Units : [Vcmax]=micromols_CO2 m-2 s-1, [Ammax]=kgCO2 m-2 s-1 --> [Ammax] = [Vcmax] * 44e-3 * 1e-6 REAL , PARAMETER , DIMENSION ( NVEGTYPE_OLD ) :: XAMAX = & ( / 1. , 1. , 1. , 1.3E-6 , 1.4E-6 , 0.484E-6 , 2.2E-6 , 1.7E-6 , 1.7E-6 , 1.7E-6 , 1.7E-6 , 1.7E-6 , & 0.9E-6 , 1.3E-6 , 1.4E-6 , 1.3E-6 , 0.9E-6 , 1.7E-6 , 1.2E-6 / ) ! INTEGER , PARAMETER , DIMENSION ( NVEGTYPE_ECOSG ) :: ITRANSFERT_ESG = & ( / 1 , 2 , 3 , 16 , 4 , 13 , 14 , 6 , 5 , 15 , 17 , 19 , 18 , 10 , 11 , 7 , 7 , 8 , 4 , 12 / ) END MODULE MODD_CO2V_PAR","tags":"","loc":"sourcefile/modd_co2v_par.f90.html"},{"title":"layer_e_budget.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines LAYER_E_BUDGET Source Code layer_e_budget.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !   ########################################################################## SUBROUTINE LAYER_E_BUDGET ( PT , PTSTEP , PIMPL , PHC , PTC , PD , PA , PB , PC , PY , PDQS ) !   ########################################################################## ! !!****  *FLOOR_LAYER_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of building floor temperatures ! ! !!**  METHOD !     ------ ! !    6 : equations for evolution of Ts_floor !        ************************************************************* ! !     dTf_k(t) / dt = 1/(df_k*Cf_k) * (- 2*Kf_k-1*(Tf_k-Tf_k-1)/(df_k-1 +df_k) !                                      - 2*Kf_k  *(Tf_k-Tf_k+1)/(df_k+1 +df_k) ) ! !     dTf_1(t) / dt = 1/(df_1*Cf_1) * (- 2*Kw_1*(Tw_1-Tw_2)/(dw_1 +dw_2)) ! !       with ! !   K*_k  = (d*_k+ d*_k+1)/(d*_k/k*_k+ d*_k+1/k*_k+1) ! ! ! The system is implicited (or semi-implicited). ! ! ZIMPL=1    ---> implicit system ! ZIMPL=0.5  ---> semi-implicit system ! ZIMPL=0    ---> explicit system ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      G. Pigeon           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    15/04/09 !!                     08/10 (G. Pigeon) computation of residual of energy balance !!                                       modification of the limit condition for !!                                       the deep temp. from the deep road temp. !!                                       to zero flux condition. idem for sfce T !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODI_TRIDIAG_GROUND ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT ! floor layers temperatures REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC ! heat capacity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC ! thermal conductivity for !road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PD ! depth of road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PA REAL , DIMENSION (:,:), INTENT ( IN ) :: PB REAL , DIMENSION (:,:), INTENT ( IN ) :: PC REAL , DIMENSION (:,:), INTENT ( IN ) :: PY REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS REAL , INTENT ( IN ) :: PIMPL ! implicitation coefficient ! !*      0.2    declarations of local variables ! ! REAL :: ZIMPL ! implicit coefficient REAL :: ZEXPL ! explicit coefficient ! REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: ZX ! solution ! REAL , DIMENSION ( SIZE ( PT , 1 )) :: ZEI ! internal energy of floor at t REAL , DIMENSION ( SIZE ( PT , 1 )) :: ZPEI ! internal energy of floor at time t+ ! INTEGER :: ILAYER ! number of floor layers INTEGER :: JLAYER ! loop counter INTEGER :: JJ ! loop counter REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'LAYER_E_BUDGET' , 0 , ZHOOK_HANDLE ) ! ILAYER = SIZE ( PT , 2 ) ! ZIMPL = PIMPL ZEXPL = 1. - PIMPL ! !------------------------------------------------------------------------------- ! !*      1.    Preliminaries : internal energy of floor at the current time step !             ----------------------------------------------------------------- ! ZEI (:) = 0. DO JLAYER = 1 , ILAYER DO JJ = 1 , SIZE ( PT , 1 ) ZEI ( JJ ) = ZEI ( JJ ) + ( PHC ( JJ , JLAYER ) * PD ( JJ , JLAYER ) * PT ( JJ , JLAYER ) ) ENDDO END DO ! !------------------------------------------------------------------------------- ! !*     2.     Tri-diagonal system resolution !              ------------------------------ ! CALL TRIDIAG_GROUND ( PA , PB , PC , PY , ZX ) ! DO JLAYER = 1 , ILAYER PT (:, JLAYER ) = ZX (:, JLAYER ) END DO ! !*      3.     heat storage inside floor and flux toward the floor !              --------------------------------------------------- ! !       3.1    internal energy of the floor at the next time step !              -------------------------------------------------- ! ZPEI (:) = 0.0 DO JLAYER = 1 , ILAYER DO JJ = 1 , SIZE ( PT , 1 ) ZPEI ( JJ ) = ZPEI ( JJ ) + ( PHC ( JJ , JLAYER ) * PD ( JJ , JLAYER ) * PT ( JJ , JLAYER ) ) ENDDO END DO ! !        3.2   heat storage flux inside floor !              ------------------------------ ! PDQS (:) = ( ZPEI (:) - ZEI (:)) / PTSTEP ! IF ( LHOOK ) CALL DR_HOOK ( 'LAYER_E_BUDGET' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- END SUBROUTINE LAYER_E_BUDGET","tags":"","loc":"sourcefile/layer_e_budget.f90.html"},{"title":"modd_dummy_surf_fieldsn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DUMMY_SURF_FIELDS_n Source Code modd_dummy_surf_fieldsn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     #################### MODULE MODD_DUMMY_SURF_FIELDS_n !     #################### ! !!****  *MODD_DUMMY_SURF_FIELDS* - declaration of dummy physiographic data arrays !! !!    PURPOSE !!    ------- !       The purpose of this declarative module is to specify  the !     dummy physiographic data arrays. ! !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    03/2004 !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE DUMMY_SURF_FIELDS_t ! INTEGER :: NDUMMY_NBR !                          ! number of dummy pgd fields chosen by user CHARACTER ( LEN = 3 ) , DIMENSION (:), POINTER :: CDUMMY_AREA !                          ! areas where dummy pgd fields are defined !                          ! 'ALL' : everywhere !                          ! 'SEA' : where sea exists !                          ! 'LAN' : where land exists !                          ! 'WAT' : where inland water exists !                          ! 'NAT' : where natural or agricultural areas exist !                          ! 'TWN' : where town areas exist !                          ! 'STR' : where streets are present !                          ! 'BLD' : where buildings are present !                          ! CHARACTER ( LEN = 20 ), DIMENSION (:), POINTER :: CDUMMY_NAME !                          ! name of the dummy pgd fields (for information) REAL , DIMENSION (:,:), POINTER :: XDUMMY_FIELDS !                          ! dummy pgd fields themselves ! !------------------------------------------------------------------------------- ! END TYPE DUMMY_SURF_FIELDS_t CONTAINS ! ! SUBROUTINE DUMMY_SURF_FIELDS_INIT ( YDUMMY_SURF_FIELDS ) TYPE ( DUMMY_SURF_FIELDS_t ), INTENT ( INOUT ) :: YDUMMY_SURF_FIELDS REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DUMMY_SURF_FIELDS_N:DUMMY_SURF_FIELDS_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDUMMY_SURF_FIELDS % CDUMMY_NAME ) NULLIFY ( YDUMMY_SURF_FIELDS % CDUMMY_AREA ) NULLIFY ( YDUMMY_SURF_FIELDS % XDUMMY_FIELDS ) YDUMMY_SURF_FIELDS % NDUMMY_NBR = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DUMMY_SURF_FIELDS_N:DUMMY_SURF_FIELDS_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DUMMY_SURF_FIELDS_INIT END MODULE MODD_DUMMY_SURF_FIELDS_n","tags":"","loc":"sourcefile/modd_dummy_surf_fieldsn.f90.html"},{"title":"spll_modi_close_namelist.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_CLOSE_NAMELIST Source Code spll_modi_close_namelist.f90 Source Code !auto_modi:spll_close_namelist.D MODULE MODI_CLOSE_NAMELIST INTERFACE SUBROUTINE CLOSE_NAMELIST ( HPROGRAM , KLUNAM ) IMPLICIT NONE CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HPROGRAM ! main program INTEGER , INTENT ( IN ) :: KLUNAM ! logical unit of namelist END SUBROUTINE CLOSE_NAMELIST END INTERFACE END MODULE MODI_CLOSE_NAMELIST","tags":"","loc":"sourcefile/spll_modi_close_namelist.f90.html"},{"title":"spll_modi_teb.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_TEB Source Code spll_modi_teb.f90 Source Code !auto_modi:spll_teb.D MODULE MODI_TEB INTERFACE SUBROUTINE TEB ( TOP , T , BOP , B , TIR , DMT , HIMPLICIT_WIND , PTSUN , & PT_CANYON , PQ_CANYON , PU_CANYON , PT_LOWCAN , PQ_LOWCAN , PU_LOWCAN , & PZ_LOWCAN , PPEW_A_COEF , PPEW_B_COEF , PPEW_A_COEF_LOWCAN , & PPEW_B_COEF_LOWCAN , PPS , PPA , PEXNS , PEXNA , PTA , PQA , PRHOA , & PLW_RAD , PRR , PSR , PZREF , PUREF , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , & PTSTEP , PDF_RF , PDN_RF , PDF_RD , PDN_RD , PQSAT_RF , PQSAT_RD , & PDELT_RF , PDELT_RD , PTS_GARDEN , PLEW_RF , PUW_GR , PLEW_RD , PLE_WL_A ,& PLE_WL_B , PRNSN_RF , PHSN_RF , PLESN_RF , PGSN_RF , PMELT_RF , PRN_GR , & PH_GR , PLE_GR , PGFLUX_GR , PDRAIN_GR , PRUNOFF_GR , PRNSN_RD , & PHSN_RD , PLESN_RD , PGSN_RD , PMELT_RD , PUW_RD , PUW_RF , PDUWDU_RD , & PDUWDU_RF , PUSTAR_TWN , PCD , PCDN , PCH_TWN , PRI_TWN , PRESA_TWN , & PAC_RF , PAC_RD , PAC_WL , PAC_TOP , PAC_GARDEN , PAC_RF_WAT , & PAC_RD_WAT , PLW_WA_TO_WB , PLW_WA_TO_R , PLW_WB_TO_R , PLW_WA_TO_NR , & PLW_WB_TO_NR , PLW_R_TO_WA , PLW_R_TO_WB , PLW_G_TO_WA , PLW_G_TO_WB , & PLW_S_TO_WA , PLW_S_TO_WB , PLW_S_TO_R , PLW_S_TO_NR , PLW_NR_TO_WA , & PLW_NR_TO_WB , PLW_NR_TO_WIN , PLW_WA_TO_WIN , PLW_WB_TO_WIN , & PLW_G_TO_WIN , PLW_R_TO_WIN , PLW_S_TO_WIN , PLW_WIN_TO_WA , & PLW_WIN_TO_WB , PLW_WIN_TO_R , PLW_WIN_TO_NR , KDAY , PEMIT_LW_FAC , & PEMIT_LW_RD , PT_RAD_IND , PHU_BLD , PTIME , PE_SHADING ) USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t IMPLICIT NONE TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_OPTIONS_t ), INTENT ( INOUT ) :: BOP TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option REAL , DIMENSION (:), INTENT ( IN ) :: PTSUN ! solar time   (s from midnight) REAL , DIMENSION (:), INTENT ( INOUT ) :: PT_CANYON ! canyon air temperature REAL , DIMENSION (:), INTENT ( INOUT ) :: PQ_CANYON ! canyon air specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PU_CANYON ! canyon hor. wind REAL , DIMENSION (:), INTENT ( IN ) :: PU_LOWCAN ! wind near the road REAL , DIMENSION (:), INTENT ( IN ) :: PT_LOWCAN ! temp. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PQ_LOWCAN ! hum. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PZ_LOWCAN ! height of atm. var. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_A_COEF_LOWCAN ! implicit coefficients for wind coupling REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_B_COEF_LOWCAN ! between low canyon wind and road REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PPA ! pressure at the first atmospheric level REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PH_TRAFFIC ! anthropogenic sensible REAL , DIMENSION (:), INTENT ( IN ) :: PLE_TRAFFIC ! anthropogenic latent REAL , DIMENSION (:), INTENT ( IN ) :: PEXNA ! exner function REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:), INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the first REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( INOUT ) :: PDF_RF ! snow-free    fraction on roofs REAL , DIMENSION (:), INTENT ( INOUT ) :: PDN_RF ! snow-covered fraction on roofs REAL , DIMENSION (:), INTENT ( INOUT ) :: PDF_RD ! snow-free    fraction on roads REAL , DIMENSION (:), INTENT ( INOUT ) :: PDN_RD ! snow-covered fraction on roads REAL , DIMENSION (:), INTENT ( OUT ) :: PQSAT_RF ! hum at saturation over roof REAL , DIMENSION (:), INTENT ( OUT ) :: PQSAT_RD ! hum at saturation over road REAL , DIMENSION (:), INTENT ( OUT ) :: PDELT_RF ! water fraction on roof REAL , DIMENSION (:), INTENT ( OUT ) :: PDELT_RD ! water fraction on road REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GARDEN ! GARDEN area surf temp. REAL , DIMENSION (:), INTENT ( OUT ) :: PLEW_RF ! latent heat flux over roof (snow) REAL , DIMENSION (:), INTENT ( OUT ) :: PLEW_RD ! latent heat flux over road (snow) REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_WL_A ! latent heat flux over wall REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_WL_B ! latent heat flux over wall REAL , DIMENSION (:), INTENT ( IN ) :: PUW_GR ! Momentum flux for greenroofs REAL , DIMENSION (:), INTENT ( OUT ) :: PRNSN_RF ! net radiation over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PHSN_RF ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PLESN_RF ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PGSN_RF ! flux under the snow REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT_RF ! snow melt REAL , DIMENSION (:), INTENT ( OUT ) :: PRNSN_RD ! net radiation over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PHSN_RD ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PLESN_RD ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PGSN_RD ! flux under the snow REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT_RD ! snow melt REAL , DIMENSION (:), INTENT ( OUT ) :: PUW_RD ! Momentum flux for roads REAL , DIMENSION (:), INTENT ( OUT ) :: PUW_RF ! Momentum flux for roofs REAL , DIMENSION (:), INTENT ( OUT ) :: PDUWDU_RD ! REAL , DIMENSION (:), INTENT ( OUT ) :: PDUWDU_RF ! REAL , DIMENSION (:), INTENT ( OUT ) :: PUSTAR_TWN ! friciton velocity over town REAL , DIMENSION (:), INTENT ( IN ) :: PRN_GR ! net radiation over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PH_GR ! sensible heat flux over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PLE_GR ! latent heat flux over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PGFLUX_GR ! flux through the greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PRUNOFF_GR ! runoff over green roofs REAL , DIMENSION (:), INTENT ( IN ) :: PDRAIN_GR ! outlet drainage at base of green roofs REAL , DIMENSION (:), INTENT ( OUT ) :: PCD ! town averaged drag coefficient REAL , DIMENSION (:), INTENT ( OUT ) :: PCDN ! town averaged neutral drag coefficient REAL , DIMENSION (:), INTENT ( OUT ) :: PCH_TWN ! town averaged heat transfer REAL , DIMENSION (:), INTENT ( OUT ) :: PRI_TWN ! town averaged Richardson number REAL , DIMENSION (:), INTENT ( OUT ) :: PRESA_TWN ! town aerodynamical resistance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_RF ! roof conductance REAL , DIMENSION (:), INTENT ( INOUT ) :: PAC_RD ! road conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_WL ! wall conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_TOP ! top conductance REAL , DIMENSION (:), INTENT ( IN ) :: PAC_GARDEN ! garden conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_RF_WAT ! roof water conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_RD_WAT ! roof water conductance REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_WB ! LW contrib. wall A (orB) -> wall B (or A) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_R ! LW contrib. wall       -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_R ! LW contrib. wall       -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_NR ! LW contrib. wall       -> road(snow) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_NR ! LW contrib. wall       -> road(snow) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WA ! LW contrib. road       -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WB ! LW contrib. road       -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WA ! LW contrib. GARDEN     -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WB ! LW contrib. GARDEN     -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WA ! LW contrib. road(snow) -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WB ! LW contrib. road(snow) -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WA ! LW contrib. sky        -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WB ! LW contrib. sky        -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_R ! LW contrib. sky        -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_NR ! LW contrib. sky        -> road(snow) INTEGER , INTENT ( IN ) :: KDAY ! Simulation day REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_WIN ! Radiative heat trasfer coeff wall-window REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_WIN ! Radiative heat trasfer coeff wall-window REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WIN ! Radiative heat trasfer coeff garden-window REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WIN ! Radiative heat trasfer coeff road-window REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WIN ! Radiative heat trasfer coeff window-sky REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_WA ! Radiative heat trasfer coeff window-wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_WB ! Radiative heat trasfer coeff window-wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_R ! Radiative heat trasfer coeff window-road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WIN ! Radiative heat trasfer coeff road(snow)-win REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_NR ! Radiative heat trasfer coeff win-road(snow) REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_RD ! LW fluxes emitted by road (W/m2 surf road) REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_FAC ! LW fluxes emitted by wall (W/m2 surf wall) REAL , DIMENSION (:), INTENT ( OUT ) :: PT_RAD_IND ! Indoor mean radiant temperature [K] REAL , DIMENSION (:), INTENT ( OUT ) :: PHU_BLD ! Indoor relative humidity 0 < (-) < 1 REAL , INTENT ( IN ) :: PTIME ! current time since midnight (UTC, s) REAL , DIMENSION (:), INTENT ( IN ) :: PE_SHADING !energy not ref., nor absorbed, nor END SUBROUTINE TEB END INTERFACE END MODULE MODI_TEB","tags":"","loc":"sourcefile/spll_modi_teb.f90.html"},{"title":"isba_snow_frac.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines ISBA_SNOW_FRAC Source Code isba_snow_frac.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE ISBA_SNOW_FRAC ( HSNOW , PWSNOW , PRSNOW , PASNOW , & PVEG , PLAI , PZ0 , PPSN , PPSNV_A , PPSNG , PPSNV ) !     ########################################################################## ! !!****  *ISBA_SNOW_FRAC* !! !!    PURPOSE !!    ------- ! !     Calculates grid-averaged albedo and emissivity (according to snow scheme) ! !!    EXTERNAL !!    -------- !! !!    none !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    AUTHOR !!    ------ !! !!      S. Belair           * Meteo-France * !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_SNOW_PAR , ONLY : XEMISSN , XEMCRIN , XSNOWDMIN , & XRHOSMAX_ES , XRHOSMIN_ES , & XWCRN_EXPL , XDCRN_EXPL ! USE MODD_PREP_SNOW , ONLY : LSNOW_FRAC_TOT ! USE MODE_SURF_SNOW_FRAC ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! CHARACTER ( LEN =* ) , INTENT ( IN ) :: HSNOW ! ISBA snow scheme ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PWSNOW ! snow reservoir REAL , DIMENSION (:,:), INTENT ( IN ) :: PRSNOW ! snow density REAL , DIMENSION (:) , INTENT ( IN ) :: PASNOW ! snow albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PVEG REAL , DIMENSION (:) , INTENT ( IN ) :: PLAI REAL , DIMENSION (:) , INTENT ( IN ) :: PZ0 REAL , DIMENSION (:) , INTENT ( INOUT ) :: PPSN REAL , DIMENSION (:) , INTENT ( INOUT ) :: PPSNV_A REAL , DIMENSION (:) , INTENT ( INOUT ) :: PPSNG REAL , DIMENSION (:) , INTENT ( INOUT ) :: PPSNV !                                     PVEG = fraction of vegetation !                                     PLAI = leaf area index !                                     PZ0  = roughness length for momentum !                                     PPSN = grid fraction covered by snow !                                     PPSNG = fraction of the ground covered by snow !                                     PPSNV = fraction of the veg covered by snow ! !------------------------------------------------------------------------------- ! !*      0.     Local variables !              --------------- ! INTEGER :: JLAYER REAL , DIMENSION ( SIZE ( PVEG )) :: ZSNOWSWE REAL , DIMENSION ( SIZE ( PVEG )) :: ZSNOWD REAL , DIMENSION ( SIZE ( PVEG )) :: ZSNOWRHO REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'ISBA_SNOW_FRAC' , 0 , ZHOOK_HANDLE ) ! !*      1.     Compute Total SWE (kg m-2) and snowpack average density (kg m-3) !              ---------------------------------------------------------------- ! ZSNOWSWE (:) = 0. ! DO JLAYER = 1 , SIZE ( PWSNOW , 2 ) ZSNOWSWE (:) = ZSNOWSWE (:) + PWSNOW (:, JLAYER ) END DO ! IF ( HSNOW == '3-L' . OR . HSNOW == 'CRO' ) THEN ZSNOWD (:) = 0. DO JLAYER = 1 , SIZE ( PWSNOW , 2 ) ZSNOWD (:) = ZSNOWD (:) + PWSNOW (:, JLAYER ) / PRSNOW (:, JLAYER ) END DO ZSNOWRHO (:) = ZSNOWSWE (:) / MAX ( XSNOWDMIN , ZSNOWD (:)) ZSNOWRHO (:) = MAX ( XRHOSMIN_ES , MIN ( XRHOSMAX_ES , ZSNOWRHO (:))) ELSE ZSNOWRHO (:) = PRSNOW (:, 1 ) END IF ! !*      2.     Snow fraction over ground !              ------------------------- ! IF ( HSNOW == 'CRO' . OR . HSNOW == '3-L' ) THEN PPSNG (:) = MIN ( 1.0 , ZSNOWD (:) / XDCRN_EXPL ) ELSE PPSNG (:) = SNOW_FRAC_GROUND ( ZSNOWSWE ) ENDIF ! !*      3.     Snow fraction over vegetation !              ----------------------------- ! IF ( HSNOW == 'EBA' ) THEN PPSNV_A (:) = SNOW_FRAC_VEG_A ( PPSNG , PLAI , PASNOW ) PPSNV (:) = PPSNV_A (:) ELSE PPSNV (:) = SNOW_FRAC_VEG ( PPSNG , ZSNOWSWE , PZ0 , ZSNOWRHO ) ENDIF ! !*      4.     Total snow fraction !              ------------------- ! PPSN (:) = SNOW_FRAC_NAT ( ZSNOWSWE , PPSNG , PPSNV , PVEG ) ! IF ( LSNOW_FRAC_TOT ) THEN PPSN (:) = MIN ( 1.0 , ZSNOWSWE (:) / XWCRN_EXPL ) PPSNG (:) = PPSN (:) PPSNV (:) = PPSN (:) ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( 'ISBA_SNOW_FRAC' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE ISBA_SNOW_FRAC","tags":"","loc":"sourcefile/isba_snow_frac.f90.html"},{"title":"mode_sbls.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODE_SBLS Source Code mode_sbls.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ############### MODULE MODE_SBLS !     ############### ! !!****  *MODE_SBLS * - contains Surface Boundary Layer characteristics functions !! !!    PURPOSE !!    ------- ! !!**  METHOD !!    ------ !! !! !! !!    EXTERNAL !!    -------- !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !!    Businger et al 1971,   Wyngaard and Cote 1974 !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original        13/10/99 !!      V. Masson       06/11/02 optimization and add Businger fonction for TKE !!      J. EScobar      28/11/2013 really avoid / 0 in test in real*4 !----------------------------------------------------------------------------- ! !*       0.    DECLARATIONS ! ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! INTERFACE BUSINGER_PHIM MODULE PROCEDURE BUSINGER_PHIM_0D MODULE PROCEDURE BUSINGER_PHIM_1D MODULE PROCEDURE BUSINGER_PHIM_2D MODULE PROCEDURE BUSINGER_PHIM_3D END INTERFACE INTERFACE BUSINGER_PHIH MODULE PROCEDURE BUSINGER_PHIH_0D MODULE PROCEDURE BUSINGER_PHIH_1D MODULE PROCEDURE BUSINGER_PHIH_2D MODULE PROCEDURE BUSINGER_PHIH_3D END INTERFACE INTERFACE BUSINGER_PHIE MODULE PROCEDURE BUSINGER_PHIE_0D MODULE PROCEDURE BUSINGER_PHIE_1D MODULE PROCEDURE BUSINGER_PHIE_2D MODULE PROCEDURE BUSINGER_PHIE_3D END INTERFACE INTERFACE PAULSON_PSIM MODULE PROCEDURE PAULSON_PSIM_0D MODULE PROCEDURE PAULSON_PSIM_1D MODULE PROCEDURE PAULSON_PSIM_2D MODULE PROCEDURE PAULSON_PSIM_3D END INTERFACE INTERFACE PAULSON_PSIH MODULE PROCEDURE PAULSON_PSIH_0D MODULE PROCEDURE PAULSON_PSIH_1D MODULE PROCEDURE PAULSON_PSIH_2D MODULE PROCEDURE PAULSON_PSIH_3D END INTERFACE INTERFACE LMO MODULE PROCEDURE LMO_0D MODULE PROCEDURE LMO_1D MODULE PROCEDURE LMO_2D END INTERFACE INTERFACE USTAR MODULE PROCEDURE USTAR_0D MODULE PROCEDURE USTAR_1D MODULE PROCEDURE USTAR_2D END INTERFACE ! !------------------------------------------------------------------------------- CONTAINS !------------------------------------------------------------------------------- ! FUNCTION BUSINGER_PHIM_3D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:,:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), & SIZE ( PZ_O_LMO , 2 ), SIZE ( PZ_O_LMO , 3 )) :: BUSINGER_PHIM_3D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIM_3D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:,:,:) < 0. ) BUSINGER_PHIM_3D (:,:,:) = ( 1. - 1 5. * PZ_O_LMO ) ** ( - 0.25 ) ELSEWHERE BUSINGER_PHIM_3D (:,:,:) = 1. + 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIM_3D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIM_3D ! !------------------------------------------------------------------------------- ! FUNCTION BUSINGER_PHIM_2D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), SIZE ( PZ_O_LMO , 2 )) :: BUSINGER_PHIM_2D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIM_2D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:,:) < 0. ) BUSINGER_PHIM_2D (:,:) = ( 1. - 1 5. * PZ_O_LMO ) ** ( - 0.25 ) ELSEWHERE BUSINGER_PHIM_2D (:,:) = 1. + 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIM_2D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIM_2D ! !------------------------------------------------------------------------------- ! FUNCTION BUSINGER_PHIM_1D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO )) :: BUSINGER_PHIM_1D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIM_1D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:) < 0. ) BUSINGER_PHIM_1D (:) = ( 1. - 1 5. * PZ_O_LMO ) ** ( - 0.25 ) ELSEWHERE BUSINGER_PHIM_1D (:) = 1. + 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIM_1D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIM_1D ! !------------------------------------------------------------------------------- ! FUNCTION BUSINGER_PHIM_0D ( PZ_O_LMO ) IMPLICIT NONE REAL , INTENT ( IN ) :: PZ_O_LMO REAL :: BUSINGER_PHIM_0D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIM_0D' , 0 , ZHOOK_HANDLE ) IF ( PZ_O_LMO < 0. ) THEN BUSINGER_PHIM_0D = ( 1. - 1 5. * PZ_O_LMO ) ** ( - 0.25 ) ELSE BUSINGER_PHIM_0D = 1. + 4.7 * PZ_O_LMO END IF IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIM_0D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIM_0D ! !------------------------------------------------------------------------------- !------------------------------------------------------------------------------- ! FUNCTION BUSINGER_PHIH_3D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:,:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), & SIZE ( PZ_O_LMO , 2 ), SIZE ( PZ_O_LMO , 3 )) :: BUSINGER_PHIH_3D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIH_3D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:,:,:) < 0. ) BUSINGER_PHIH_3D (:,:,:) = 0.74 * ( 1. - 9. * PZ_O_LMO ) ** ( - 0.5 ) ELSEWHERE BUSINGER_PHIH_3D (:,:,:) = 0.74 + 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIH_3D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIH_3D ! !------------------------------------------------------------------------------- ! FUNCTION BUSINGER_PHIH_2D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), SIZE ( PZ_O_LMO , 2 )) :: BUSINGER_PHIH_2D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIH_2D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:,:) < 0. ) BUSINGER_PHIH_2D (:,:) = 0.74 * ( 1. - 9. * PZ_O_LMO ) ** ( - 0.5 ) ELSEWHERE BUSINGER_PHIH_2D (:,:) = 0.74 + 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIH_2D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIH_2D ! !------------------------------------------------------------------------------- ! FUNCTION BUSINGER_PHIH_1D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO )) :: BUSINGER_PHIH_1D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIH_1D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:) < 0. ) BUSINGER_PHIH_1D (:) = 0.74 * ( 1. - 9. * PZ_O_LMO ) ** ( - 0.5 ) ELSEWHERE BUSINGER_PHIH_1D (:) = 0.74 + 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIH_1D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIH_1D ! !------------------------------------------------------------------------------- ! FUNCTION BUSINGER_PHIH_0D ( PZ_O_LMO ) IMPLICIT NONE REAL , INTENT ( IN ) :: PZ_O_LMO REAL :: BUSINGER_PHIH_0D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIH_0D' , 0 , ZHOOK_HANDLE ) IF ( PZ_O_LMO < 0. ) THEN BUSINGER_PHIH_0D = 0.74 * ( 1. - 9. * PZ_O_LMO ) ** ( - 0.5 ) ELSE BUSINGER_PHIH_0D = 0.74 + 4.7 * PZ_O_LMO END IF IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIH_0D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIH_0D ! !------------------------------------------------------------------------------- !------------------------------------------------------------------------------- ! FUNCTION BUSINGER_PHIE_3D ( PZ_O_LMO ) USE MODD_CANOPY_TURB , ONLY : XALPSBL IMPLICIT NONE REAL , DIMENSION (:,:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), & SIZE ( PZ_O_LMO , 2 ), SIZE ( PZ_O_LMO , 3 )) :: BUSINGER_PHIE_3D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIE_3D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:,:,:) < 0. ) BUSINGER_PHIE_3D (:,:,:) = ( 1. + ( - PZ_O_LMO ) ** ( 2. / 3. ) / XALPSBL ) & * ( 1. - 1 5. * PZ_O_LMO ) ** ( 0.5 ) ELSEWHERE BUSINGER_PHIE_3D (:,:,:) = 1. / ( 1. + 4.7 * PZ_O_LMO ) ** 2 END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIE_3D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIE_3D !------------------------------------------------------------------------------- ! FUNCTION BUSINGER_PHIE_2D ( PZ_O_LMO ) USE MODD_CANOPY_TURB , ONLY : XALPSBL IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), SIZE ( PZ_O_LMO , 2 )) :: BUSINGER_PHIE_2D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIE_2D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:,:) < 0. ) BUSINGER_PHIE_2D (:,:) = ( 1. + ( - PZ_O_LMO ) ** ( 2. / 3. ) / XALPSBL ) & * ( 1. - 1 5. * PZ_O_LMO ) ** ( 0.5 ) ELSEWHERE BUSINGER_PHIE_2D (:,:) = 1. / ( 1. + 4.7 * PZ_O_LMO ) ** 2 END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIE_2D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIE_2D !------------------------------------------------------------------------------- ! FUNCTION BUSINGER_PHIE_1D ( PZ_O_LMO ) USE MODD_CANOPY_TURB , ONLY : XALPSBL IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 )) :: BUSINGER_PHIE_1D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIE_1D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:) < 0. ) BUSINGER_PHIE_1D (:) = ( 1. + ( - PZ_O_LMO ) ** ( 2. / 3. ) / XALPSBL ) & * ( 1. - 1 5. * PZ_O_LMO ) ** ( 0.5 ) ELSEWHERE BUSINGER_PHIE_1D (:) = 1. / ( 1. + 4.7 * PZ_O_LMO ) ** 2 END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIE_1D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIE_1D !------------------------------------------------------------------------------- ! FUNCTION BUSINGER_PHIE_0D ( PZ_O_LMO ) USE MODD_CANOPY_TURB , ONLY : XALPSBL IMPLICIT NONE REAL , INTENT ( IN ) :: PZ_O_LMO REAL :: BUSINGER_PHIE_0D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIE_0D' , 0 , ZHOOK_HANDLE ) IF ( PZ_O_LMO < 0. ) THEN BUSINGER_PHIE_0D = ( 1. + ( - PZ_O_LMO ) ** ( 2. / 3. ) / XALPSBL ) & * ( 1. - 1 5. * PZ_O_LMO ) ** ( 0.5 ) ELSE BUSINGER_PHIE_0D = 1. / ( 1. + 4.7 * PZ_O_LMO ) ** 2 END IF IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIE_0D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIE_0D ! !------------------------------------------------------------------------------- !------------------------------------------------------------------------------- ! FUNCTION PAULSON_PSIM_3D ( PZ_O_LMO ) USE MODD_CSTS IMPLICIT NONE REAL , DIMENSION (:,:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), & SIZE ( PZ_O_LMO , 2 ), SIZE ( PZ_O_LMO , 3 )) :: PAULSON_PSIM_3D ! REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), & SIZE ( PZ_O_LMO , 2 ), SIZE ( PZ_O_LMO , 3 )) :: ZX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIM_3D' , 0 , ZHOOK_HANDLE ) ZX = 1. WHERE ( PZ_O_LMO (:,:,:) < 0. ) ZX = ( 1. - 1 5. * PZ_O_LMO ) ** ( 0.25 ) PAULSON_PSIM_3D (:,:,:) = LOG ( ( 1. + ZX ** 2 ) * ( 1 + ZX ) ** 2 / 8. ) - 2. * ATAN ( ZX ) + XPI / 2. ELSEWHERE PAULSON_PSIM_3D (:,:,:) = - 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIM_3D' , 1 , ZHOOK_HANDLE ) END FUNCTION PAULSON_PSIM_3D ! !------------------------------------------------------------------------------- ! FUNCTION PAULSON_PSIM_2D ( PZ_O_LMO ) USE MODD_CSTS IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), SIZE ( PZ_O_LMO , 2 )) :: PAULSON_PSIM_2D ! REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), SIZE ( PZ_O_LMO , 2 )) :: ZX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIM_2D' , 0 , ZHOOK_HANDLE ) ZX = 1. WHERE ( PZ_O_LMO (:,:) < 0. ) ZX = ( 1. - 1 5. * PZ_O_LMO ) ** ( 0.25 ) PAULSON_PSIM_2D (:,:) = LOG ( ( 1. + ZX ** 2 ) * ( 1 + ZX ) ** 2 / 8. ) - 2. * ATAN ( ZX ) + XPI / 2. ELSEWHERE PAULSON_PSIM_2D (:,:) = - 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIM_2D' , 1 , ZHOOK_HANDLE ) END FUNCTION PAULSON_PSIM_2D ! !------------------------------------------------------------------------------- ! FUNCTION PAULSON_PSIM_1D ( PZ_O_LMO ) USE MODD_CSTS IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 )) :: PAULSON_PSIM_1D ! REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 )) :: ZX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIM_1D' , 0 , ZHOOK_HANDLE ) ZX = 1. WHERE ( PZ_O_LMO (:) < 0. ) ZX = ( 1. - 1 5. * PZ_O_LMO ) ** ( 0.25 ) PAULSON_PSIM_1D (:) = LOG ( ( 1. + ZX ** 2 ) * ( 1 + ZX ) ** 2 / 8. ) - 2. * ATAN ( ZX ) + XPI / 2. ELSEWHERE PAULSON_PSIM_1D (:) = - 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIM_1D' , 1 , ZHOOK_HANDLE ) END FUNCTION PAULSON_PSIM_1D ! !------------------------------------------------------------------------------- ! FUNCTION PAULSON_PSIM_0D ( PZ_O_LMO ) USE MODD_CSTS IMPLICIT NONE REAL , INTENT ( IN ) :: PZ_O_LMO REAL :: PAULSON_PSIM_0D ! REAL :: ZX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIM_0D' , 0 , ZHOOK_HANDLE ) ZX = 1. IF ( PZ_O_LMO < 0. ) THEN ZX = ( 1. - 1 5. * PZ_O_LMO ) ** ( 0.25 ) PAULSON_PSIM_0D = LOG ( ( 1. + ZX ** 2 ) * ( 1 + ZX ) ** 2 / 8. ) - 2. * ATAN ( ZX ) + XPI / 2. ELSE PAULSON_PSIM_0D = - 4.7 * PZ_O_LMO END IF IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIM_0D' , 1 , ZHOOK_HANDLE ) END FUNCTION PAULSON_PSIM_0D ! !------------------------------------------------------------------------------- !------------------------------------------------------------------------------- ! FUNCTION PAULSON_PSIH_3D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:,:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), & SIZE ( PZ_O_LMO , 2 ), SIZE ( PZ_O_LMO , 3 )) :: PAULSON_PSIH_3D ! REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), & SIZE ( PZ_O_LMO , 2 ), SIZE ( PZ_O_LMO , 3 )) :: ZY REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIH_3D' , 0 , ZHOOK_HANDLE ) ZY = 1. WHERE ( PZ_O_LMO (:,:,:) < 0. ) ZY = ( 1. - 9. * PZ_O_LMO ) ** ( 0.5 ) PAULSON_PSIH_3D (:,:,:) = LOG ( ( 1. + ZY ) / 2. ) ELSEWHERE PAULSON_PSIH_3D (:,:,:) = - 4.7 * PZ_O_LMO / 0.74 END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIH_3D' , 1 , ZHOOK_HANDLE ) END FUNCTION PAULSON_PSIH_3D ! !------------------------------------------------------------------------------- ! FUNCTION PAULSON_PSIH_2D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), SIZE ( PZ_O_LMO , 2 )) :: PAULSON_PSIH_2D ! REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), SIZE ( PZ_O_LMO , 2 )) :: ZY REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIH_2D' , 0 , ZHOOK_HANDLE ) ZY = 1. WHERE ( PZ_O_LMO (:,:) < 0. ) ZY = ( 1. - 9. * PZ_O_LMO ) ** ( 0.5 ) PAULSON_PSIH_2D (:,:) = LOG ( ( 1. + ZY ) / 2. ) ELSEWHERE PAULSON_PSIH_2D (:,:) = - 4.7 * PZ_O_LMO / 0.74 END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIH_2D' , 1 , ZHOOK_HANDLE ) END FUNCTION PAULSON_PSIH_2D ! !------------------------------------------------------------------------------- ! FUNCTION PAULSON_PSIH_1D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 )) :: PAULSON_PSIH_1D ! REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 )) :: ZY REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIH_1D' , 0 , ZHOOK_HANDLE ) ZY = 1. WHERE ( PZ_O_LMO (:) < 0. ) ZY = ( 1. - 9. * PZ_O_LMO ) ** ( 0.5 ) PAULSON_PSIH_1D (:) = LOG ( ( 1. + ZY ) / 2. ) ELSEWHERE PAULSON_PSIH_1D (:) = - 4.7 * PZ_O_LMO / 0.74 END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIH_1D' , 1 , ZHOOK_HANDLE ) END FUNCTION PAULSON_PSIH_1D ! !------------------------------------------------------------------------------- ! FUNCTION PAULSON_PSIH_0D ( PZ_O_LMO ) IMPLICIT NONE REAL , INTENT ( IN ) :: PZ_O_LMO REAL :: PAULSON_PSIH_0D ! REAL :: ZY REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIH_0D' , 0 , ZHOOK_HANDLE ) ZY = 1. IF ( PZ_O_LMO < 0. ) THEN ZY = ( 1. - 9. * PZ_O_LMO ) ** ( 0.5 ) PAULSON_PSIH_0D = LOG ( ( 1. + ZY ) / 2. ) ELSE PAULSON_PSIH_0D = - 4.7 * PZ_O_LMO / 0.74 END IF IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIH_0D' , 1 , ZHOOK_HANDLE ) END FUNCTION PAULSON_PSIH_0D ! !------------------------------------------------------------------------------- !------------------------------------------------------------------------------- ! ! FUNCTION LMO_2D ( PUSTAR , PTHETA , PRV , PSFTH , PSFRV ) USE MODD_CSTS USE MODD_SURF_PAR , ONLY : XUNDEF IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( IN ) :: PUSTAR REAL , DIMENSION (:,:), INTENT ( IN ) :: PTHETA REAL , DIMENSION (:,:), INTENT ( IN ) :: PRV REAL , DIMENSION (:,:), INTENT ( IN ) :: PSFTH REAL , DIMENSION (:,:), INTENT ( IN ) :: PSFRV REAL , DIMENSION ( SIZE ( PUSTAR , 1 ), SIZE ( PUSTAR , 2 )) :: LMO_2D ! REAL , DIMENSION ( SIZE ( PUSTAR , 1 ), SIZE ( PUSTAR , 2 )) :: ZTHETAV REAL , DIMENSION ( SIZE ( PUSTAR , 1 ), SIZE ( PUSTAR , 2 )) :: ZQ0 REAL :: ZEPS REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:LMO_2D' , 0 , ZHOOK_HANDLE ) ZEPS = ( XRV - XRD ) / XRD ZTHETAV (:,:) = PTHETA (:,:) * ( 1. + ZEPS * PRV (:,:)) ZQ0 (:,:) = PSFTH (:,:) + ZTHETAV (:,:) * ZEPS * PSFRV (:,:) ! LMO_2D (:,:) = XUNDEF WHERE ( ZQ0 (:,:) /= 0. ) & LMO_2D (:,:) = - MAX ( PUSTAR (:,:), 1.E-6 ) ** 3 & / ( XKARMAN * XG / ZTHETAV (:,:) * ZQ0 (:,:) ) ! WHERE ( ABS ( LMO_2D ) > 1000 0. ) LMO_2D = XUNDEF IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:LMO_2D' , 1 , ZHOOK_HANDLE ) END FUNCTION LMO_2D ! !------------------------------------------------------------------------------- ! FUNCTION LMO_1D ( PUSTAR , PTHETA , PRV , PSFTH , PSFRV ) USE MODD_CSTS USE MODD_SURF_PAR , ONLY : XUNDEF IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PUSTAR REAL , DIMENSION (:), INTENT ( IN ) :: PTHETA REAL , DIMENSION (:), INTENT ( IN ) :: PRV REAL , DIMENSION (:), INTENT ( IN ) :: PSFTH REAL , DIMENSION (:), INTENT ( IN ) :: PSFRV REAL , DIMENSION ( SIZE ( PUSTAR )) :: LMO_1D ! REAL , DIMENSION ( SIZE ( PUSTAR )) :: ZTHETAV REAL :: ZEPS REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:LMO_1D' , 0 , ZHOOK_HANDLE ) ZEPS = ( XRV - XRD ) / XRD ! ZTHETAV (:) = PTHETA (:) * ( 1. + ZEPS * PRV (:)) ! LMO_1D (:) = XUNDEF WHERE ( PSFTH (:) / ZTHETAV (:) + ZEPS * PSFRV (:) /= 0. ) & LMO_1D (:) = - MAX ( PUSTAR (:), 1.E-6 ) ** 3 & / ( XKARMAN * XG & * ( PSFTH (:) / ZTHETAV (:) + ZEPS * PSFRV (:) ) ) WHERE ( ABS ( LMO_1D ) > 1000 0. ) LMO_1D = XUNDEF IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:LMO_1D' , 1 , ZHOOK_HANDLE ) END FUNCTION LMO_1D ! !------------------------------------------------------------------------------- ! FUNCTION LMO_0D ( PUSTAR , PTHETA , PRV , PSFTH , PSFRV ) USE MODD_CSTS USE MODD_SURF_PAR , ONLY : XUNDEF IMPLICIT NONE REAL , INTENT ( IN ) :: PUSTAR REAL , INTENT ( IN ) :: PTHETA REAL , INTENT ( IN ) :: PRV REAL , INTENT ( IN ) :: PSFTH REAL , INTENT ( IN ) :: PSFRV REAL :: LMO_0D ! REAL :: ZTHETAV REAL :: ZEPS REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:LMO_0D' , 0 , ZHOOK_HANDLE ) ZEPS = ( XRV - XRD ) / XRD ! ! ZTHETAV = PTHETA * ( 1. + ZEPS * PRV ) ! LMO_0D = XUNDEF IF ( PSFTH / ZTHETAV + ZEPS * PSFRV /= 0. ) & LMO_0D = - MAX ( PUSTAR , 1.E-6 ) ** 3 & / ( XKARMAN * ( XG / ZTHETAV * PSFTH & + XG * ZEPS * PSFRV ) ) IF ( ABS ( LMO_0D ) > 1000 0. ) LMO_0D = XUNDEF IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:LMO_0D' , 1 , ZHOOK_HANDLE ) END FUNCTION LMO_0D ! !------------------------------------------------------------------------------- !------------------------------------------------------------------------------- ! FUNCTION USTAR_2D ( PWIND , PZ , PZ0 , PLMO ) USE MODD_CSTS USE MODD_SURF_PAR , ONLY : XUNDEF IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( IN ) :: PWIND REAL , DIMENSION (:,:), INTENT ( IN ) :: PZ REAL , DIMENSION (:,:), INTENT ( IN ) :: PZ0 REAL , DIMENSION (:,:), INTENT ( IN ) :: PLMO REAL , DIMENSION ( SIZE ( PZ , 1 ), SIZE ( PZ , 2 )) :: USTAR_2D REAL , DIMENSION ( SIZE ( PZ , 1 ), SIZE ( PZ , 2 )) :: ZZ_O_LMO REAL , DIMENSION ( SIZE ( PZ , 1 ), SIZE ( PZ , 2 )) :: ZZ0_O_LMO REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !* purely unstable case IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:USTAR_2D' , 0 , ZHOOK_HANDLE ) USTAR_2D (:,:) = 0. ZZ_O_LMO (:,:) = XUNDEF ZZ0_O_LMO (:,:) = XUNDEF ! !* general case WHERE ( ABS ( PLMO ) > 1.E-20 . AND . PLMO /= XUNDEF ) ZZ_O_LMO = PZ (:,:) / PLMO (:,:) ZZ0_O_LMO = PZ0 (:,:) / PLMO (:,:) USTAR_2D (:,:) = PWIND (:,:) & * XKARMAN / ( LOG ( PZ (:,:) / PZ0 (:,:)) & - PAULSON_PSIM ( ZZ_O_LMO (:,:)) & + PAULSON_PSIM ( ZZ0_O_LMO (:,:)) ) END WHERE ! !* purely neutral case WHERE ( PLMO == XUNDEF ) ZZ_O_LMO = 0. USTAR_2D (:,:) = PWIND (:,:) & * XKARMAN / LOG ( PZ (:,:) / PZ0 (:,:)) END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:USTAR_2D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION USTAR_2D ! !------------------------------------------------------------------------------- ! FUNCTION USTAR_1D ( PWIND , PZ , PZ0 , PLMO ) USE MODD_CSTS USE MODD_SURF_PAR , ONLY : XUNDEF IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PWIND REAL , DIMENSION (:), INTENT ( IN ) :: PZ REAL , DIMENSION (:), INTENT ( IN ) :: PZ0 REAL , DIMENSION (:), INTENT ( IN ) :: PLMO REAL , DIMENSION ( SIZE ( PZ )) :: USTAR_1D REAL , DIMENSION ( SIZE ( PZ )) :: ZZ_O_LMO REAL , DIMENSION ( SIZE ( PZ )) :: ZZ0_O_LMO REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !* purely unstable case IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:USTAR_1D' , 0 , ZHOOK_HANDLE ) USTAR_1D (:) = 0. ZZ_O_LMO (:) = XUNDEF ZZ0_O_LMO (:) = XUNDEF ! !* general case WHERE ( ABS ( PLMO ) > 1.E-20 . AND . PLMO /= XUNDEF ) ZZ_O_LMO = PZ (:) / PLMO (:) ZZ0_O_LMO = PZ0 (:) / PLMO (:) USTAR_1D (:) = PWIND & * XKARMAN / ( LOG ( PZ (:) / PZ0 (:)) & - PAULSON_PSIM ( ZZ_O_LMO (:)) & + PAULSON_PSIM ( ZZ0_O_LMO (:)) ) END WHERE ! !* purely neutral case WHERE ( PLMO == XUNDEF ) ZZ_O_LMO = 0. USTAR_1D (:) = PWIND & * XKARMAN / LOG ( PZ (:) / PZ0 (:)) END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:USTAR_1D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION USTAR_1D ! !------------------------------------------------------------------------------- ! FUNCTION USTAR_0D ( PWIND , PZ , PZ0 , PLMO ) USE MODD_CSTS USE MODD_SURF_PAR , ONLY : XUNDEF IMPLICIT NONE REAL , INTENT ( IN ) :: PWIND REAL , INTENT ( IN ) :: PZ REAL , INTENT ( IN ) :: PZ0 REAL , INTENT ( IN ) :: PLMO REAL :: USTAR_0D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !* purely unstable case IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:USTAR_0D' , 0 , ZHOOK_HANDLE ) USTAR_0D = 0. ! !* general case IF ( ABS ( PLMO ) >= 1.E-20 . AND . PLMO /= XUNDEF ) & USTAR_0D = PWIND * XKARMAN / ( LOG ( PZ / PZ0 ) - PAULSON_PSIM ( PZ / PLMO ) + PAULSON_PSIM ( PZ0 / PLMO ) ) ! !* purely neutral case IF ( PLMO == XUNDEF ) & USTAR_0D = PWIND * XKARMAN / LOG ( PZ / PZ0 ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:USTAR_0D' , 1 , ZHOOK_HANDLE ) END FUNCTION USTAR_0D ! !------------------------------------------------------------------------------- ! END MODULE MODE_SBLS","tags":"","loc":"sourcefile/mode_sbls.f90.html"},{"title":"spll_modi_facade_e_budget.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_FACADE_E_BUDGET Source Code spll_modi_facade_e_budget.f90 Source Code !auto_modi:spll_facade_e_budget.D MODULE MODI_FACADE_E_BUDGET INTERFACE SUBROUTINE FACADE_E_BUDGET ( TOP , T , B , DMT , PTSTEP , PDN_RD , PRHOA , PAC_WL , PAC_BLD , & PLW_RAD , PPS , PEXNS , PT_CANYON , PTS_RD , PTSN_RD , PTS_GD , & PTS_FL , PLW_WA_TO_WB , PLW_R_TO_WA , PLW_R_TO_WB , & PLW_G_TO_WA , PLW_G_TO_WB , PLW_S_TO_WA , PLW_S_TO_WB , & PLW_NR_TO_WA , PLW_NR_TO_WB , PLW_WIN_TO_WA , PLW_WIN_TO_WB , & PLW_S_TO_WIN , PLW_WA_TO_WIN , PLW_WB_TO_WIN , PLW_R_TO_WIN ,& PLW_G_TO_WIN , PLW_NR_TO_WIN , PFLX_BLD_WL_A , PDQS_WL_A , & PFLX_BLD_WL_B , PDQS_WL_B , PEMIT_LW_FAC , PIMB_WL , & PRADHT_IN , PRAD_RF_WL , PRAD_RF_WIN , PRAD_WL_FL , & PRAD_WL_MA , PRAD_WIN_FL , PRAD_WIN_MA , PCONV_WL_BLD , & PCONV_WIN_BLD , PAC_WIN , PLOAD_IN_WL , PLOAD_IN_WIN ) USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t IMPLICIT NONE TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered fraction on roads REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! rho REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WL ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( IN ) :: PAC_BLD ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface Exner function REAL , DIMENSION (:), INTENT ( IN ) :: PT_CANYON ! air canyon temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_RD ! road surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTSN_RD ! road snow temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GD ! green area surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_FL ! floor layers temperatures [K] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_WB ! LW interactions wall  -> wall (both versions) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WA ! LW interactions road -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WB ! LW interactions road -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WA ! LW interactions garden -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WB ! LW interactions garden -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WA ! LW interactions sky   -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WB ! LW interactions sky   -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WA ! LW interactions road(snow) -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WB ! LW interactions road(snow) -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_WIN ! Radiative heat trasfer coeff wall-window REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_WIN ! Radiative heat trasfer coeff wall-window REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WIN ! Radiative heat trasfer coeff window-sky REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_WA ! Radiative heat trasfer coeff window-wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_WB ! Radiative heat trasfer coeff window-wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WIN ! Radiative heat trasfer coeff window-road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WIN ! Radiative heat trasfer coeff window-garden REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WIN ! Radiative heat trasfer coeff window-snow REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_WL_A ! flux from bld to wall REAL , DIMENSION (:), INTENT ( INOUT ) :: PDQS_WL_A ! heat storage inside the wall REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_WL_B ! flux from bld to wall REAL , DIMENSION (:), INTENT ( INOUT ) :: PDQS_WL_B ! heat storage inside the wall REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_FAC ! LW flux emitted by the facade (W/m2 of facade) REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_WL ! wall residual energy imbalance REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_WL ! rad. fluxes from roof to wall [W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_WIN ! rad. fluxes from roof to win [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WL_FL ! rad. fluxes from wall to floor [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WL_MA ! rad. fluxes from wall to mass [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WIN_FL ! rad. fluxes from window to floor [W m-2(win)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WIN_MA ! rad. fluxes from window to mass [W m-2(win)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_WL_BLD ! conv. fluxes from wall to bld [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_WIN_BLD ! conv. fluxes from window to bld [W m-2(wind.)] REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WIN ! window aerodynamic conductance REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_IN_WL ! solar + inter. heat gains W/m2 [wall] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_IN_WIN ! solar + inter. heat gains W/m2 [win] END SUBROUTINE FACADE_E_BUDGET END INTERFACE END MODULE MODI_FACADE_E_BUDGET","tags":"","loc":"sourcefile/spll_modi_facade_e_budget.f90.html"},{"title":"mode_thermos.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODE_THERMOS Source Code mode_thermos.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######spl MODULE MODE_THERMOS !     #################### ! !!****  *MODE_THERMO* - !! !!    PURPOSE !!    ------- ! ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!       NONE !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      V. Ducrocq       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    28/08/94 !!      Modified    01/2006 : sea flux parameterization. !!      B. Decharme 05/2013 : Qsat function of XTT !!                            so, Qsat=Qsati if Tg <= XTT and inversely !!      S. Belamari 03/2014 : new formula (QSAT_SEAWATER2) for sat. air pressure !!                            over seawater (with explicit salinity dependency) !! !-------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! !------------------------------------------------------------------------------- ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! INTERFACE PSAT MODULE PROCEDURE PSAT_0D MODULE PROCEDURE PSAT_1D MODULE PROCEDURE PSAT_2D END INTERFACE INTERFACE DPSAT MODULE PROCEDURE DPSAT_1D END INTERFACE INTERFACE QSAT MODULE PROCEDURE QSATW_0D MODULE PROCEDURE QSATW_1D MODULE PROCEDURE QSATW_2D END INTERFACE INTERFACE QSAT_SEAWATER MODULE PROCEDURE QSATSEAW_1D END INTERFACE INTERFACE QSAT_SEAWATER2 MODULE PROCEDURE QSATSEAW2_1D END INTERFACE INTERFACE DQSAT MODULE PROCEDURE DQSATW_O_DT_1D END INTERFACE INTERFACE QSATI MODULE PROCEDURE QSATI_1D MODULE PROCEDURE QSATI_2D END INTERFACE INTERFACE DQSATI MODULE PROCEDURE DQSATI_O_DT_1D END INTERFACE CONTAINS !------------------------------------------------------------------------------- !     ###################################### FUNCTION PSAT_0D ( PT ) RESULT ( PPSAT ) !     ###################################### !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS USE MODD_REPROD_OPER , ONLY : CQSAT ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , INTENT ( IN ) :: PT ! Temperature (Kelvin) REAL :: PPSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg) ! REAL :: ZALP , ZBETA , ZGAM ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:PSAT_0D' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZALP = XALPW ZBETA = XBETAW ZGAM = XGAMW ! IF ( CQSAT == 'NEW' . AND . PT <= XTT ) THEN ZALP = XALPI ZBETA = XBETAI ZGAM = XGAMI ENDIF ! PPSAT = EXP ( ZALP - ZBETA / PT - ZGAM * LOG ( PT ) ) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:PSAT_0D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION PSAT_0D !------------------------------------------------------------------------------- !     ###################################### FUNCTION PSAT_1D ( PT ) RESULT ( PPSAT ) !     ###################################### !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS USE MODD_REPROD_OPER , ONLY : CQSAT ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PT ! Temperature (Kelvin) REAL , DIMENSION ( SIZE ( PT )) :: PPSAT ! saturation vapor pressure (Pa) ! REAL , DIMENSION ( SIZE ( PT )) :: ZALP , ZBETA , ZGAM ! INTEGER :: JJ !loop index REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:PSAT_1D' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZALP (:) = XALPW ZBETA (:) = XBETAW ZGAM (:) = XGAMW ! IF ( CQSAT == 'NEW' ) THEN WHERE ( PT <= XTT ) ZALP (:) = XALPI ZBETA (:) = XBETAI ZGAM (:) = XGAMI ENDWHERE ENDIF ! !cdir nodep DO JJ = 1 , SIZE ( PT ) PPSAT ( JJ ) = EXP ( ZALP ( JJ ) - ZBETA ( JJ ) / PT ( JJ ) - ZGAM ( JJ ) * LOG ( PT ( JJ )) ) ENDDO ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:PSAT_1D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION PSAT_1D !------------------------------------------------------------------------------- !     ###################################### FUNCTION PSAT_2D ( PT , KMASK ) RESULT ( PPSAT ) !     ###################################### !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS USE MODD_REPROD_OPER , ONLY : CQSAT ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PT ! Temperature (Kelvin) INTEGER , DIMENSION (:), INTENT ( IN ) :: KMASK ! REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: PPSAT ! saturation vapor pressure (Pa) ! REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: ZALP , ZBETA , ZGAM ! INTEGER :: JJ , JL , INI , INL , IWORK !loop index REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:PSAT_2D' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! INI = SIZE ( PT , 1 ) INL = SIZE ( PT , 2 ) ! PPSAT (:,:) = 0.0 ! ZALP (:,:) = XALPW ZBETA (:,:) = XBETAW ZGAM (:,:) = XGAMW ! IF ( CQSAT == 'NEW' ) THEN WHERE ( PT (:,:) <= XTT ) ZALP (:,:) = XALPI ZBETA (:,:) = XBETAI ZGAM (:,:) = XGAMI ENDWHERE ENDIF ! DO JL = 1 , INL DO JJ = 1 , INI IWORK = KMASK ( JJ ) IF ( JL <= IWORK ) THEN PPSAT ( JJ , JL ) = EXP ( ZALP ( JJ , JL ) - ZBETA ( JJ , JL ) / PT ( JJ , JL ) - ZGAM ( JJ , JL ) * LOG ( PT ( JJ , JL )) ) ENDIF ENDDO ENDDO ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:PSAT_2D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION PSAT_2D !------------------------------------------------------------------------------- !     ###################################### FUNCTION DPSAT_1D ( PT ) RESULT ( PDPSAT ) !     ###################################### !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS USE MODD_REPROD_OPER , ONLY : CQSAT ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PT ! Temperature (Kelvin) ! REAL , DIMENSION ( SIZE ( PT )) :: PDPSAT ! REAL , DIMENSION ( SIZE ( PT )) :: ZBETA , ZGAM ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:DPSAT_1D' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZBETA (:) = XBETAW ZGAM (:) = XGAMW ! IF ( CQSAT == 'NEW' ) THEN WHERE ( PT <= XTT ) ZBETA (:) = XBETAI ZGAM (:) = XGAMI ENDWHERE ENDIF ! PDPSAT (:) = ZBETA (:) / PT (:) ** 2 - ZGAM (:) / PT (:) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:DPSAT_1D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION DPSAT_1D !------------------------------------------------------------------------------- !     ###################################### FUNCTION QSATW_0D ( PT , PP ) RESULT ( PQSAT ) !     ###################################### ! !!****  *QSATW * - function to compute saturation vapor humidity from !!                 temperature !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT), the saturation vapor pressure es(T) !!    (FOES(PT)) is computed by integration of the Clapeyron equation !!    from the triple point temperature Tt (XTT) and the saturation vapor !!    pressure of the triple point es(Tt) (XESTT), i.e !! !!         es(T)= EXP( alphaw - betaw /T - gammaw Log(T) ) !! !!     with : !!       alphaw (XALPW) = LOG(es(Tt))+ betaw/Tt + gammaw Log(Tt) !!       betaw (XBETAW) = Lv(Tt)/Rv + gammaw Tt !!       gammaw (XGAMW) = (Cl -Cpv) /Rv !! !!      Then, the specific humidity at saturation is deduced. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : comtains physical constants !!        XALPW   : Constant for saturation vapor pressure function !!        XBETAW  : Constant for saturation vapor pressure function !!        XGAMW   : Constant for saturation vapor pressure function !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    21/09/98 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , INTENT ( IN ) :: PT ! Temperature (Kelvin) REAL , INTENT ( IN ) :: PP ! Pressure (Pa) REAL :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg) ! !*       0.2   Declarations of local variables ! REAL :: ZFOES ! saturation vapor ! pressure ! (Pascal) ! REAL :: ZWORK1 REAL :: ZWORK2 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATW_0D' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZFOES = PSAT ( PT ) ZWORK1 = ZFOES / PP ZWORK2 = XRD / XRV ! !*       2.    COMPUTE SATURATION HUMIDITY !              --------------------------- ! PQSAT = ZWORK2 * ZWORK1 / ( 1. + ( ZWORK2 - 1. ) * ZWORK1 ) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATW_0D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION QSATW_0D !------------------------------------------------------------------------------- ! !     ###################################### FUNCTION QSATW_1D ( PT , PP ) RESULT ( PQSAT ) !     ###################################### ! !!****  *QSATW * - function to compute saturation vapor humidity from !!                 temperature !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT), the saturation vapor pressure es(T) !!    (FOES(PT)) is computed by integration of the Clapeyron equation !!    from the triple point temperature Tt (XTT) and the saturation vapor !!    pressure of the triple point es(Tt) (XESTT), i.e !! !!         es(T)= EXP( alphaw - betaw /T - gammaw Log(T) ) !! !!     with : !!       alphaw (XALPW) = LOG(es(Tt))+ betaw/Tt + gammaw Log(Tt) !!       betaw (XBETAW) = Lv(Tt)/Rv + gammaw Tt !!       gammaw (XGAMW) = (Cl -Cpv) /Rv !! !!      Then, the specific humidity at saturation is deduced. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : comtains physical constants !!        XALPW   : Constant for saturation vapor pressure function !!        XBETAW  : Constant for saturation vapor pressure function !!        XGAMW   : Constant for saturation vapor pressure function !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    21/09/98 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PT ! Temperature ! (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PP ! Pressure ! (Pa) REAL , DIMENSION ( SIZE ( PT )) :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg) ! !*       0.2   Declarations of local variables ! REAL , DIMENSION ( SIZE ( PT )) :: ZFOES ! saturation vapor ! pressure ! (Pascal) ! REAL , DIMENSION ( SIZE ( PT )) :: ZWORK1 REAL :: ZWORK2 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATW_1D' , 0 , ZHOOK_HANDLE ) ! ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZFOES (:) = PSAT ( PT (:)) ZWORK1 (:) = ZFOES (:) / PP (:) ZWORK2 = XRD / XRV ! !*       2.    COMPUTE SATURATION HUMIDITY !              --------------------------- ! PQSAT (:) = ZWORK2 * ZWORK1 (:) / ( 1. + ( ZWORK2 - 1. ) * ZWORK1 (:)) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATW_1D' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END FUNCTION QSATW_1D ! !------------------------------------------------------------------------------- !------------------------------------------------------------------------------- ! !     ###################################### FUNCTION QSATW_2D ( PT , PP , KMASK , KL ) RESULT ( PQSAT ) !     ###################################### ! !!****  *QSATW * - function to compute saturation vapor humidity from !!                 temperature !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT), the saturation vapor pressure es(T) !!    (FOES(PT)) is computed by integration of the Clapeyron equation !!    from the triple point temperature Tt (XTT) and the saturation vapor !!    pressure of the triple point es(Tt) (XESTT), i.e !! !!         es(T)= EXP( alphaw - betaw /T - gammaw Log(T) ) !! !!     with : !!       alphaw (XALPW) = LOG(es(Tt))+ betaw/Tt + gammaw Log(Tt) !!       betaw (XBETAW) = Lv(Tt)/Rv + gammaw Tt !!       gammaw (XGAMW) = (Cl -Cpv) /Rv !! !!      Then, the specific humidity at saturation is deduced. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : comtains physical constants !!        XALPW   : Constant for saturation vapor pressure function !!        XBETAW  : Constant for saturation vapor pressure function !!        XGAMW   : Constant for saturation vapor pressure function !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    21/09/98 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PT ! Temperature ! (Kelvin) REAL , DIMENSION (:,:), INTENT ( IN ) :: PP ! Pressure ! (Pa) ! INTEGER , DIMENSION (:), INTENT ( IN ), OPTIONAL :: KMASK !                                                KMASK = Number of soil moisture layers (DIF option) INTEGER , INTENT ( IN ), OPTIONAL :: KL !                                                KL = Max number of soil moisture layers (DIF option) ! REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg) ! !*       0.2   Declarations of local variables ! REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: ZFOES ! INTEGER , DIMENSION ( SIZE ( PT , 1 )) :: IMASK ! INTEGER :: INL REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATW_2D' , 0 , ZHOOK_HANDLE ) ! IF ( PRESENT ( KMASK ). AND . PRESENT ( KL )) THEN IMASK (:) = KMASK (:) INL = KL ELSE IMASK (:) = SIZE ( PT , 2 ) INL = SIZE ( PT , 2 ) ENDIF ! PQSAT (:,:) = XUNDEF ZFOES (:,:) = 0.0 ! ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZFOES (:, 1 : INL ) = PSAT ( PT (:, 1 : INL ), IMASK (:)) ! !*       2.    COMPUTE SATURATION HUMIDITY !              --------------------------- ! PQSAT (:,:) = XRD / XRV * ZFOES (:,:) / PP (:,:) / ( 1. + ( XRD / XRV - 1. ) * ZFOES (:,:) / PP (:,:)) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATW_2D' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END FUNCTION QSATW_2D ! !------------------------------------------------------------------------------- ! !------------------------------------------------------------------------------- ! !     ###################################### FUNCTION QSATSEAW_1D ( PT , PP ) RESULT ( PQSAT ) !     ###################################### ! !!****  *QSATW * - function to compute saturation vapor humidity from !!                 temperature !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature over saline seawater ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT), the saturation vapor pressure es(T) !!    (FOES(PT)) is computed by integration of the Clapeyron equation !!    from the triple point temperature Tt (XTT) and the saturation vapor !!    pressure of the triple point es(Tt) (XESTT), i.e !!    The reduction due to salinity is compute with the factor 0.98 (reduction of 2%) !! !!         es(T)= 0.98*EXP( alphaw - betaw /T - gammaw Log(T) ) !! !!     with : !!       alphaw (XALPW) = LOG(es(Tt))+ betaw/Tt + gammaw Log(Tt) !!       betaw (XBETAW) = Lv(Tt)/Rv + gammaw Tt !!       gammaw (XGAMW) = (Cl -Cpv) /Rv !! !!      Then, the specific humidity at saturation is deduced. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : comtains physical constants !!        XALPW   : Constant for saturation vapor pressure function !!        XBETAW  : Constant for saturation vapor pressure function !!        XGAMW   : Constant for saturation vapor pressure function !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH !!      Zeng, X., Zhao, M., and Dickinson, R. E., 1998 : Intercomparaison of bulk !!      aerodynamic algorithm for the computation of sea surface fluxes using !!      TOGA COARE and TAO data. Journal of Climate, vol 11, n�10, pp 2628--2644 !! !! !!    AUTHOR !!    ------ !!      C. Lebeaupin    * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    6/04/2005 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PT ! Temperature ! (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PP ! Pressure ! (Pa) REAL , DIMENSION ( SIZE ( PT )) :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg) ! !*       0.2   Declarations of local variables ! REAL , DIMENSION ( SIZE ( PT )) :: ZFOES ! saturation vapor ! pressure ! (Pascal) ! REAL , DIMENSION ( SIZE ( PT )) :: ZWORK1 REAL :: ZWORK2 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATSEAW_1D' , 0 , ZHOOK_HANDLE ) ! ZFOES (:) = PSAT ( PT (:)) ZFOES (:) = 0.98 * ZFOES (:) ! vapor pressure reduction of 2% over saline seawater could have a significant ! impact on the computation of surface latent heat flux under strong wind ! conditions (Zeng et al, 1998). ! ZWORK1 (:) = ZFOES (:) / PP (:) ZWORK2 = XRD / XRV ! !*       2.    COMPUTE SATURATION HUMIDITY !              --------------------------- ! PQSAT (:) = ZWORK2 * ZWORK1 (:) / ( 1. + ( ZWORK2 - 1. ) * ZWORK1 (:)) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATSEAW_1D' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END FUNCTION QSATSEAW_1D ! !------------------------------------------------------------------------------- !------------------------------------------------------------------------------- ! !     ###################################### FUNCTION QSATSEAW2_1D ( PT , PP , PSSS ) RESULT ( PQSAT ) !     ###################################### ! !!****  *QSATW * - function to compute saturation vapor humidity from !!                 temperature !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature over saline seawater ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT) and salinity S (PSSS), the saturation vapor !!    pressure es(T,S) (FOES(PT,PSSS)) is computed following Weiss and Price !!    (1980). !! !!      Then, the specific humidity at saturation is deduced. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : contains physical constants !! !!    REFERENCE !!    --------- !!      Weiss, R.F., and Price, B.A., 1980 : Nitrous oxide solubility in water !!      and seawater. Marine Chemistry, n�8, pp 347-359. !! !! !!    AUTHOR !!    ------ !!      S. Belamari     * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    19/03/2014 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS , ONLY : XRD , XRV ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PT ! Temperature ! (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PP ! Pressure ! (Pascal) REAL , DIMENSION (:), INTENT ( IN ) :: PSSS ! Salinity ! (g/kg) REAL , DIMENSION ( SIZE ( PT )) :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg) ! !*       0.2   Declarations of local variables ! REAL , DIMENSION ( SIZE ( PT )) :: ZFOES ! saturation vapor ! pressure ! (Pascal) ! REAL , DIMENSION ( SIZE ( PT )) :: ZWORK1 REAL :: ZWORK2 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATSEAW2_1D' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZFOES (:) = EXP ( 2 4.4543 - 6 7.4509 * ( 10 0.0 / PT (:)) - 4.8489 * LOG ( PT (:) / 10 0.0 ) & - 5.44E-04 * ( PSSS (:) / 1.00472 ) ) !see Sharqawy et al (2010) Eq32 p368 ZFOES (:) = ZFOES (:) * 101 3.25E+02 !convert from atm to Pa ! ZWORK1 (:) = ZFOES (:) / PP (:) ZWORK2 = XRD / XRV ! !*       2.    COMPUTE SATURATION SPECIFIC HUMIDITY !              ------------------------------------ ! PQSAT (:) = ZWORK2 * ZWORK1 (:) / ( 1.0 + ( ZWORK2 - 1.0 ) * ZWORK1 (:)) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATSEAW2_1D' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END FUNCTION QSATSEAW2_1D ! !------------------------------------------------------------------------------- !------------------------------------------------------------------------------- !     ############################################################## FUNCTION DQSATW_O_DT_1D ( PT , PP , PQSAT ) RESULT ( PDQSAT ) !     ############################################################## ! !!****  *QSATW * - function to compute saturation vapor humidity from !!                 temperature !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT), the saturation vapor pressure es(T) !!    (FOES(PT)) is computed by integration of the Clapeyron equation !!    from the triple point temperature Tt (XTT) and the saturation vapor !!    pressure of the triple point es(Tt) (XESTT), i.e !! !!         es(T)= EXP( alphaw - betaw /T - gammaw Log(T) ) !! !!     with : !!       alphaw (XALPW) = LOG(es(Tt))+ betaw/Tt + gammaw Log(Tt) !!       betaw (XBETAW) = Lv(Tt)/Rv + gammaw Tt !!       gammaw (XGAMW) = (Cl -Cpv) /Rv !! !!      Then, the specific humidity at saturation is deduced. !! !!      Finally, dqsat / dT  (T) is computed. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : comtains physical constants !!        XALPW   : Constant for saturation vapor pressure function !!        XBETAW  : Constant for saturation vapor pressure function !!        XGAMW   : Constant for saturation vapor pressure function !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    21/09/98 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PT ! Temperature ! (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PP ! Pressure ! (Pa) REAL , DIMENSION (:), INTENT ( IN ) :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg)) REAL , DIMENSION ( SIZE ( PT )) :: PDQSAT ! derivative according ! to temperature of ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg)) ! !*       0.2   Declarations of local variables ! REAL , DIMENSION ( SIZE ( PT )) :: ZFOES ! saturation vapor ! pressure ! (Pascal) ! REAL :: ZWORK1 REAL , DIMENSION ( SIZE ( PT )) :: ZWORK2 ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:DQSATW_O_DT_1D' , 0 , ZHOOK_HANDLE ) ! ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZWORK1 = XRD / XRV ZFOES (:) = PP (:) / ( 1. + ZWORK1 * ( 1. / PQSAT (:) - 1. )) ZWORK2 (:) = DPSAT ( PT (:)) ! !*       2.    DERIVATION ACCORDING TO TEMPERATURE !              ----------------------------------- ! PDQSAT (:) = ZWORK2 (:) * PQSAT (:) / ( 1. + ( ZWORK1 - 1. ) * ZFOES (:) / PP (:) ) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:DQSATW_O_DT_1D' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END FUNCTION DQSATW_O_DT_1D ! !------------------------------------------------------------------------------- !------------------------------------------------------------------------------- !     ############################################################## FUNCTION DQSATI_O_DT_1D ( PT , PP , PQSAT ) RESULT ( PDQSAT ) !     ############################################################## ! !!****  *QSATW * - function to compute saturation vapor humidity from !!                 temperature (with respect to ice) !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT), the saturation vapor pressure es(T) !!    (FOES(PT)) is computed by integration of the Clapeyron equation !!    from the triple point temperature Tt (XTT) and the saturation vapor !!    pressure of the triple point es(Tt) (XESTT), i.e !! !!         es(T)= EXP( alphaw - betaw /T - gammaw Log(T) ) !! !!     with : !!       alphaw (XALPW) = LOG(es(Tt))+ betaw/Tt + gammaw Log(Tt) !!       betaw (XBETAW) = Lv(Tt)/Rv + gammaw Tt !!       gammaw (XGAMW) = (Cl -Cpv) /Rv !! !!      Then, the specific humidity at saturation is deduced. !! !!      Finally, dqsat / dT  (T) is computed. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : comtains physical constants !!        XALPW   : Constant for saturation vapor pressure function !!        XBETAW  : Constant for saturation vapor pressure function !!        XGAMW   : Constant for saturation vapor pressure function !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    21/09/98 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PT ! Temperature ! (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PP ! Pressure ! (Pa) REAL , DIMENSION (:), INTENT ( IN ) :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg)) REAL , DIMENSION ( SIZE ( PT )) :: PDQSAT ! derivative according ! to temperature of ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg)) ! !*       0.2   Declarations of local variables ! REAL , DIMENSION ( SIZE ( PT )) :: ZFOES ! saturation vapor ! pressure ! (Pascal) ! REAL :: ZWORK1 REAL , DIMENSION ( SIZE ( PT )) :: ZWORK2 ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:DQSATI_O_DT_1D' , 0 , ZHOOK_HANDLE ) ! ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZWORK1 = XRD / XRV ZFOES (:) = PP (:) / ( 1. + ZWORK1 * ( 1. / PQSAT (:) - 1. )) ZWORK2 (:) = DPSAT ( PT (:)) ! !*       2.    DERIVATION ACCORDING TO TEMPERATURE !              ----------------------------------- ! PDQSAT (:) = ZWORK2 (:) * PQSAT (:) / ( 1. + ( ZWORK1 - 1. ) * ZFOES (:) / PP (:) ) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:DQSATI_O_DT_1D' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END FUNCTION DQSATI_O_DT_1D ! !------------------------------------------------------------------------------- !------------------------------------------------------------------------------- ! !     ###################################### FUNCTION QSATI_1D ( PT , PP ) RESULT ( PQSAT ) !     ###################################### ! !!****  *QSATI * - function to compute saturation vapor humidity from !!                 temperature !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT), the saturation vapor pressure es(T) !!    (FOES(PT)) is computed by integration of the Clapeyron equation !!    from the triple point temperature Tt (XTT) and the saturation vapor !!    pressure of the triple point es(Tt) (XESTT), i.e !! !!         es(T)= EXP( alphaw - betaw /T - gammaw Log(T) ) !! !!     with : !!       alphaw (XALPI) = LOG(es(Tt))+ betaw/Tt + gammaw Log(Tt) !!       betaw (XBETAI) = Lv(Tt)/Rv + gammaw Tt !!       gammaw (XGAMI) = (Cl -Cpv) /Rv !! !!      Then, the specific humidity at saturation is deduced. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : comtains physical constants !!        XALPI   : Constant for saturation vapor pressure function !!        XBETAI  : Constant for saturation vapor pressure function !!        XGAMI   : Constant for saturation vapor pressure function !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    21/09/98 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PT ! Temperature ! (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PP ! Pressure ! (Pa) REAL , DIMENSION ( SIZE ( PT )) :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg) ! !*       0.2   Declarations of local variables ! REAL , DIMENSION ( SIZE ( PT )) :: ZFOES ! saturation vapor ! pressure ! (Pascal) ! REAL , DIMENSION ( SIZE ( PT )) :: ZWORK1 REAL :: ZWORK2 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATI_1D' , 0 , ZHOOK_HANDLE ) ! ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZFOES (:) = PSAT ( PT (:)) ZWORK1 (:) = ZFOES (:) / PP (:) ZWORK2 = XRD / XRV ! !*       2.    COMPUTE SATURATION HUMIDITY !              --------------------------- ! PQSAT (:) = ZWORK2 * ZWORK1 (:) / ( 1. + ( ZWORK2 - 1. ) * ZWORK1 (:)) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATI_1D' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END FUNCTION QSATI_1D !------------------------------------------------------------------------------- !------------------------------------------------------------------------------- ! !     ###################################### FUNCTION QSATI_2D ( PT , PP , KMASK , KL ) RESULT ( PQSAT ) !     ###################################### ! !!****  *QSATI * - function to compute saturation vapor humidity from !!                 temperature !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT), the saturation vapor pressure es(T) !!    (FOES(PT)) is computed by integration of the Clapeyron equation !!    from the triple point temperature Tt (XTT) and the saturation vapor !!    pressure of the triple point es(Tt) (XESTT), i.e !! !!         es(T)= EXP( alphaw - betaw /T - gammaw Log(T) ) !! !!     with : !!       alphaw (XALPI) = LOG(es(Tt))+ betaw/Tt + gammaw Log(Tt) !!       betaw (XBETAI) = Lv(Tt)/Rv + gammaw Tt !!       gammaw (XGAMI) = (Cl -Cpv) /Rv !! !!      Then, the specific humidity at saturation is deduced. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : comtains physical constants !!        XALPI   : Constant for saturation vapor pressure function !!        XBETAI  : Constant for saturation vapor pressure function !!        XGAMI   : Constant for saturation vapor pressure function !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    21/09/98 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PT ! Temperature ! (Kelvin) REAL , DIMENSION (:,:), INTENT ( IN ) :: PP ! Pressure ! (Pa) ! INTEGER , DIMENSION (:), INTENT ( IN ), OPTIONAL :: KMASK !                                                KMASK = Number of soil moisture layers (DIF option) INTEGER , INTENT ( IN ), OPTIONAL :: KL !                                                KL = Max number of soil moisture layers (DIF option) ! REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg) ! !*       0.2   Declarations of local variables ! REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: ZFOES ! saturation vapor pressure (Pascal) ! INTEGER , DIMENSION ( SIZE ( PT , 1 )) :: IMASK ! INTEGER :: INL REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATI_2D' , 0 , ZHOOK_HANDLE ) ! IF ( PRESENT ( KMASK )) THEN IMASK (:) = KMASK (:) INL = KL ELSE IMASK (:) = SIZE ( PT , 2 ) INL = SIZE ( PT , 2 ) ENDIF ! PQSAT (:,:) = XUNDEF ZFOES (:,:) = 0.0 ! ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZFOES (:, 1 : INL ) = PSAT ( PT (:, 1 : INL ), IMASK (:)) ! !*       2.    COMPUTE SATURATION HUMIDITY !              --------------------------- ! PQSAT (:,:) = XRD / XRV * ZFOES (:,:) / PP (:,:) / ( 1. + ( XRD / XRV - 1. ) * ZFOES (:,:) / PP (:,:)) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATI_2D' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END FUNCTION QSATI_2D !------------------------------------------------------------------------------- !------------------------------------------------------------------------------- END MODULE MODE_THERMOS","tags":"","loc":"sourcefile/mode_thermos.f90.html"},{"title":"flag_teb_vegn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines FLAG_TEB_VEG_n Source Code flag_teb_vegn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE FLAG_TEB_VEG_n ( PEK , IO , PMASK , KFLAG ) !     ################################## ! !!****  *FLAG_TEB_VEG_n* - routine to flag ISBA variables where gardens are !!                            not present !! !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    10/2011 !! !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! ! ! USE MODD_ISBA_n , ONLY : ISBA_PE_t USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t ! USE MODD_CO2V_PAR , ONLY : XANFMINIT , XCONDCTMIN ! USE MODD_SURF_PAR , ONLY : XUNDEF ! USE MODI_FLAG_GR_SNOW ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! ! TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: IO REAL , DIMENSION (:), INTENT ( IN ) :: PMASK ! INTEGER , INTENT ( IN ) :: KFLAG ! 1 : to put physical values to run ISBA afterwards !                            ! 2 : to flag with XUNDEF value for points wihtout garden ! !*       0.2   Declarations of local variables !              ------------------------------- ! REAL :: ZWR , ZTG , ZWG , ZRESA , ZANFM , ZDEF INTEGER :: JL1 , JL2 ! loop counter on layers REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !------------------------------------------------------------------------------- ! ! !* 1D physical dimension ! IF ( LHOOK ) CALL DR_HOOK ( 'FLAG_TEB_VEG_N' , 0 , ZHOOK_HANDLE ) ! ZWR = XUNDEF ! IF ( KFLAG == 1 ) THEN ZTG = 30 0. ZWG = 0.5 ZRESA = 10 0. ZANFM = XANFMINIT ZDEF = 0. ELSEIF ( KFLAG == 2 ) THEN ZTG = XUNDEF ZWG = XUNDEF ZRESA = XUNDEF ZANFM = XUNDEF ZDEF = XUNDEF ENDIF ! !------------------------------------------------------------------------------- ! ! DO JL1 = 1 , IO % NGROUND_LAYER WHERE ( PMASK (:) == 0. ) PEK % XTG (:, JL1 ) = ZTG PEK % XWG (:, JL1 ) = ZWG PEK % XWGI (:, JL1 ) = ZDEF END WHERE END DO ! WHERE ( PMASK (:) == 0. ) PEK % XWR (:) = ZWR PEK % XRESA (:) = ZRESA END WHERE ! IF ( IO % CPHOTO /= 'NON' ) THEN ! WHERE ( PMASK (:) == 0. ) PEK % XANFM (:) = ZANFM PEK % XAN (:) = ZDEF PEK % XANDAY (:) = ZDEF PEK % XLE (:) = ZDEF END WHERE ! IF ( IO % CPHOTO == 'NIT' . OR . IO % CPHOTO == 'NCB' ) THEN ! WHERE ( PMASK (:) == 0. ) PEK % XLAI (:) = ZDEF ! ELSE IF ( IO % CPHOTO == 'AST' ) THEN ! DO JL1 = 1 , SIZE ( PEK % XBIOMASS , 2 ) WHERE ( PMASK (:) == 0. ) PEK % XBIOMASS (:, JL1 ) = ZDEF PEK % XRESP_BIOMASS (:, JL1 ) = ZDEF END WHERE END DO ! END IF ! ENDIF ! ! !------------------------------------------------------------------------------- ! !* Flag snow characteristics ! CALL FLAG_GR_SNOW ( KFLAG , PMASK (:) == 0. , PEK % TSNOW ) ! ! !* snow-free characteristics ! IF ( KFLAG == 1 ) THEN WHERE ( PMASK (:) == 0. ) PEK % XSNOWFREE_ALB (:) = 0.2 PEK % XSNOWFREE_ALB_VEG (:) = 0.2 PEK % XSNOWFREE_ALB_SOIL (:) = 0.2 END WHERE ELSEIF ( KFLAG == 2 ) THEN WHERE ( PMASK == 0. ) PEK % XSNOWFREE_ALB (:) = XUNDEF PEK % XSNOWFREE_ALB_VEG (:) = XUNDEF PEK % XSNOWFREE_ALB_SOIL (:) = XUNDEF END WHERE END IF ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'FLAG_TEB_VEG_N' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE FLAG_TEB_VEG_n","tags":"","loc":"sourcefile/flag_teb_vegn.f90.html"},{"title":"modd_diag_misc_tebn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DIAG_MISC_TEB_n Source Code modd_diag_misc_tebn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ############################ MODULE MODD_DIAG_MISC_TEB_n !     ############################ ! !!****  *MODD_DIAG_MISC_TEB - declaration of packed surface parameters for TEB scheme !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      P. Le Moigne   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       07/10/04 !!      C de Munck        02/13  adding runoff contributions for teb garden !!      V. Masson      06/2013  splits module in two ! ! !*       0.   DECLARATIONS !             ------------ ! ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! TYPE DIAG_MISC_TEB_t ! !* miscellaneous variables ! REAL , POINTER , DIMENSION (:) :: XZ0_TOWN ! town roughness length REAL , POINTER , DIMENSION (:) :: XQF_BLD ! domestic heating REAL , POINTER , DIMENSION (:) :: XFLX_BLD ! heat flux from bld REAL , POINTER , DIMENSION (:) :: XQF_TOWN ! total anthropogenic heat REAL , POINTER , DIMENSION (:) :: XDQS_TOWN ! storage inside building ! REAL , POINTER , DIMENSION (:) :: XH_WALL_A ! wall sensible heat flux          (W/m2) REAL , POINTER , DIMENSION (:) :: XH_WALL_B ! wall sensible heat flux          (W/m2) REAL , POINTER , DIMENSION (:) :: XH_ROOF ! roof sensible heat flux          (W/m2) REAL , POINTER , DIMENSION (:) :: XH_ROAD ! road sensible heat flux          (W/m2) REAL , POINTER , DIMENSION (:) :: XH_STRLROOF ! structural roof sens. heat flux  (W/m2) REAL , POINTER , DIMENSION (:) :: XH_BLT ! built surf sensible heat flux    (W/m2) REAL , POINTER , DIMENSION (:) :: XRN_WALL_A ! net radiation at wall            (W/m2) REAL , POINTER , DIMENSION (:) :: XRN_WALL_B ! net radiation at wall            (W/m2) REAL , POINTER , DIMENSION (:) :: XRN_ROOF ! net radiation at roof            (W/m2) REAL , POINTER , DIMENSION (:) :: XRN_ROAD ! net radiation at road            (W/m2) REAL , POINTER , DIMENSION (:) :: XRN_STRLROOF !net radiation at structural roofs(W/m2) REAL , POINTER , DIMENSION (:) :: XRN_BLT ! net radiation at built surf      (W/m2) REAL , POINTER , DIMENSION (:) :: XGFLUX_WALL_A !net wall conduction flux        (W/m2) REAL , POINTER , DIMENSION (:) :: XGFLUX_WALL_B !net wall conduction flux        (W/m2) REAL , POINTER , DIMENSION (:) :: XGFLUX_ROOF ! net roof conduction flux         (W/m2) REAL , POINTER , DIMENSION (:) :: XGFLUX_ROAD ! net road conduction flux         (W/m2) REAL , POINTER , DIMENSION (:) :: XGFLUX_STRLROOF !net structural roof cond flux (W/m2) REAL , POINTER , DIMENSION (:) :: XGFLUX_BLT ! net built surf conduction flux   (W/m2) REAL , POINTER , DIMENSION (:) :: XLE_ROOF ! roof latent heat flux            (W/m2) REAL , POINTER , DIMENSION (:) :: XLE_ROAD ! road latent heat flux            (W/m2) REAL , POINTER , DIMENSION (:) :: XLE_STRLROOF !structural roof latent heat flux (W/m2) REAL , POINTER , DIMENSION (:) :: XLE_BLT ! built surf latent heat flux      (W/m2) ! REAL , POINTER , DIMENSION (:) :: XRUNOFF_TOWN ! aggregated water runoff for town      (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XIRRIG_GARDEN ! summer ground irrigation rate         (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XRUNOFF_ROAD ! water runoff for roads                (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XIRRIG_ROAD ! road man-made watering rate           (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XRUNOFF_ROOF ! aggregated water runoff for roofs     (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XRUNOFF_STRLROOF ! water runoff for structural roofs     (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XIRRIG_GREENROOF ! summer ground irrigation rate         (kg/m2/s) ! REAL , POINTER , DIMENSION (:) :: XABS_SW_ROOF ! absorbed shortwave radiation over roofs REAL , POINTER , DIMENSION (:) :: XABS_SW_SNOW_ROOF ! absorbed longwave radiation over roofs REAL , POINTER , DIMENSION (:) :: XABS_LW_ROOF ! absorbed shortwave radiation over roofs REAL , POINTER , DIMENSION (:) :: XABS_LW_SNOW_ROOF ! absorbed longwave radiation over roofs REAL , POINTER , DIMENSION (:) :: XABS_SW_ROAD ! absorbed shortwave radiation over roads REAL , POINTER , DIMENSION (:) :: XABS_SW_SNOW_ROAD ! absorbed longwave radiation over roads REAL , POINTER , DIMENSION (:) :: XABS_LW_ROAD ! absorbed shortwave radiation over roads REAL , POINTER , DIMENSION (:) :: XABS_LW_SNOW_ROAD ! absorbed longwave radiation over roads REAL , POINTER , DIMENSION (:) :: XABS_SW_WALL_A ! absorbed shortwave radiation over walls REAL , POINTER , DIMENSION (:) :: XABS_SW_WALL_B ! absorbed shortwave radiation over walls REAL , POINTER , DIMENSION (:) :: XABS_LW_WALL_A ! absorbed shortwave radiation over walls REAL , POINTER , DIMENSION (:) :: XABS_LW_WALL_B ! absorbed shortwave radiation over walls REAL , POINTER , DIMENSION (:) :: XABS_SW_GARDEN ! absorbed shortwave radiation over green areas REAL , POINTER , DIMENSION (:) :: XABS_LW_GARDEN ! absorbed shortwave radiation over green areas REAL , POINTER , DIMENSION (:) :: XABS_SW_GREENROOF ! absorbed shortwave radiation over green roofs REAL , POINTER , DIMENSION (:) :: XABS_LW_GREENROOF ! absorbed shortwave radiation over green roofs REAL , POINTER , DIMENSION (:) :: XG_GREENROOF_ROOF ! Heat flux between green roof and structural roof REAL , POINTER , DIMENSION (:) :: XABS_SW_PANEL ! absorbed shortwave radiation over solar panels REAL , POINTER , DIMENSION (:) :: XABS_LW_PANEL ! absorbed longwave  radiation over solar panels ! REAL , POINTER , DIMENSION (:) :: XRN_PANEL ! net radiation           over solar panels (W/m2) REAL , POINTER , DIMENSION (:) :: XH_PANEL ! sensible heat flux      over solar panels (W/m2) REAL , POINTER , DIMENSION (:) :: XTHER_PROD_PANEL ! thermal      production of   solar panels (W/m2 thermal panel) REAL , POINTER , DIMENSION (:) :: XPHOT_PROD_PANEL ! photovoltaic production of   solar panels (W/m2 photovoltaic panel) REAL , POINTER , DIMENSION (:) :: XPROD_PANEL !              production of   solar panels (W/m2 panel) REAL , POINTER , DIMENSION (:) :: XTHER_PROD_BLD ! thermal      production of   solar panels (W/m2 bld) REAL , POINTER , DIMENSION (:) :: XPHOT_PROD_BLD ! photovoltaic production of   solar panels (W/m2 bld) REAL , POINTER , DIMENSION (:) :: XH_BLD_COOL ! Sensible cooling energy demand ! of the building [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XT_BLD_COOL ! Total cooling energy demand ! of the building [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XH_BLD_HEAT ! Heating energy demand ! of the building [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XLE_BLD_COOL ! Latent cooling energy demand ! of the building [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XLE_BLD_HEAT ! Latent heating energy demand ! of the building [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XH_WASTE ! Sensible waste heat from HVAC system ! [W m-2(tot)] REAL , POINTER , DIMENSION (:) :: XLE_WASTE ! Latent waste heat from HVAC system ! [W m-2(tot)] REAL , POINTER , DIMENSION (:) :: XHVAC_COOL ! Energy consumption of the cooling system ! [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XHVAC_HEAT ! Energy consumption of the heating system ! [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XCAP_SYS ! Actual capacity of the cooling system ! [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XM_SYS ! Actual HVAC mass flow rate ! [kg s-1 m-2(bld)] REAL , POINTER , DIMENSION (:) :: XCOP ! COP of the cooling system REAL , POINTER , DIMENSION (:) :: XQ_SYS ! Supply air specific humidity [kg kg-1] REAL , POINTER , DIMENSION (:) :: XT_SYS ! Supply air temperature [K] REAL , POINTER , DIMENSION (:) :: XTR_SW_WIN ! Solar radiation transmitted throught ! windows [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XFAN_POWER ! HVAC fan power REAL , POINTER , DIMENSION (:) :: XABS_SW_WIN ! window absorbed shortwave radiation [W m-2] REAL , POINTER , DIMENSION (:) :: XABS_LW_WIN ! absorbed infrared rad. [W m-2] REAL , POINTER , DIMENSION (:) :: XEMIT_LW_FAC ! LW flux emitted by the facade (W/m2 facade) REAL , POINTER , DIMENSION (:) :: XEMIT_LW_GRND ! LW flux emitted by the ground (W/m2 ground = road + garden) REAL , POINTER , DIMENSION (:) :: XT_RAD_IND !Indoor mean radiant temperature [K] REAL , POINTER , DIMENSION (:) :: XREF_SW_GRND ! total solar rad reflected by ground REAL , POINTER , DIMENSION (:) :: XREF_SW_FAC ! total solar rad reflected by facade REAL , POINTER , DIMENSION (:) :: XHU_BLD !Indoor relative humidity ! REAL , POINTER , DIMENSION (:) :: XTCOOL_TARGET ! current cooling setpoint of indoor air REAL , POINTER , DIMENSION (:) :: XTHEAT_TARGET ! current heating setpoint of indoor air REAL , POINTER , DIMENSION (:) :: XQIN ! current internal heat gains [W m-2(floor)] !------------------------------------------------------------------------------ ! END TYPE DIAG_MISC_TEB_t TYPE DIAG_MISC_TEB_NP_t ! TYPE ( DIAG_MISC_TEB_t ), POINTER :: AL (:) => NULL () ! END TYPE DIAG_MISC_TEB_NP_t ! CONTAINS ! SUBROUTINE DIAG_MISC_TEB_INIT ( YDIAG_MISC_TEB ) TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: YDIAG_MISC_TEB REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_TEB_N:DIAG_MISC_TEB_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDIAG_MISC_TEB % XZ0_TOWN ) NULLIFY ( YDIAG_MISC_TEB % XQF_BLD ) NULLIFY ( YDIAG_MISC_TEB % XFLX_BLD ) NULLIFY ( YDIAG_MISC_TEB % XQF_TOWN ) NULLIFY ( YDIAG_MISC_TEB % XDQS_TOWN ) NULLIFY ( YDIAG_MISC_TEB % XH_WALL_A ) NULLIFY ( YDIAG_MISC_TEB % XH_WALL_B ) NULLIFY ( YDIAG_MISC_TEB % XH_ROOF ) NULLIFY ( YDIAG_MISC_TEB % XH_ROAD ) NULLIFY ( YDIAG_MISC_TEB % XH_STRLROOF ) NULLIFY ( YDIAG_MISC_TEB % XH_BLT ) NULLIFY ( YDIAG_MISC_TEB % XRN_WALL_A ) NULLIFY ( YDIAG_MISC_TEB % XRN_WALL_B ) NULLIFY ( YDIAG_MISC_TEB % XRN_ROOF ) NULLIFY ( YDIAG_MISC_TEB % XRN_ROAD ) NULLIFY ( YDIAG_MISC_TEB % XRN_STRLROOF ) NULLIFY ( YDIAG_MISC_TEB % XRN_BLT ) NULLIFY ( YDIAG_MISC_TEB % XGFLUX_WALL_A ) NULLIFY ( YDIAG_MISC_TEB % XGFLUX_WALL_B ) NULLIFY ( YDIAG_MISC_TEB % XGFLUX_ROOF ) NULLIFY ( YDIAG_MISC_TEB % XGFLUX_ROAD ) NULLIFY ( YDIAG_MISC_TEB % XGFLUX_STRLROOF ) NULLIFY ( YDIAG_MISC_TEB % XGFLUX_BLT ) NULLIFY ( YDIAG_MISC_TEB % XLE_ROOF ) NULLIFY ( YDIAG_MISC_TEB % XLE_ROAD ) NULLIFY ( YDIAG_MISC_TEB % XLE_STRLROOF ) NULLIFY ( YDIAG_MISC_TEB % XLE_BLT ) NULLIFY ( YDIAG_MISC_TEB % XRUNOFF_TOWN ) NULLIFY ( YDIAG_MISC_TEB % XIRRIG_GARDEN ) NULLIFY ( YDIAG_MISC_TEB % XRUNOFF_ROAD ) NULLIFY ( YDIAG_MISC_TEB % XIRRIG_ROAD ) NULLIFY ( YDIAG_MISC_TEB % XRUNOFF_ROOF ) NULLIFY ( YDIAG_MISC_TEB % XRUNOFF_STRLROOF ) NULLIFY ( YDIAG_MISC_TEB % XIRRIG_GREENROOF ) NULLIFY ( YDIAG_MISC_TEB % XABS_LW_GREENROOF ) NULLIFY ( YDIAG_MISC_TEB % XG_GREENROOF_ROOF ) NULLIFY ( YDIAG_MISC_TEB % XABS_SW_PANEL ) NULLIFY ( YDIAG_MISC_TEB % XABS_LW_PANEL ) NULLIFY ( YDIAG_MISC_TEB % XRN_PANEL ) NULLIFY ( YDIAG_MISC_TEB % XH_PANEL ) NULLIFY ( YDIAG_MISC_TEB % XTHER_PROD_PANEL ) NULLIFY ( YDIAG_MISC_TEB % XPHOT_PROD_PANEL ) NULLIFY ( YDIAG_MISC_TEB % XPROD_PANEL ) NULLIFY ( YDIAG_MISC_TEB % XTHER_PROD_BLD ) NULLIFY ( YDIAG_MISC_TEB % XPHOT_PROD_BLD ) NULLIFY ( YDIAG_MISC_TEB % XT_BLD_COOL ) NULLIFY ( YDIAG_MISC_TEB % XH_BLD_COOL ) NULLIFY ( YDIAG_MISC_TEB % XH_BLD_HEAT ) NULLIFY ( YDIAG_MISC_TEB % XLE_BLD_COOL ) NULLIFY ( YDIAG_MISC_TEB % XLE_BLD_HEAT ) NULLIFY ( YDIAG_MISC_TEB % XHVAC_COOL ) NULLIFY ( YDIAG_MISC_TEB % XHVAC_HEAT ) NULLIFY ( YDIAG_MISC_TEB % XH_WASTE ) NULLIFY ( YDIAG_MISC_TEB % XLE_WASTE ) NULLIFY ( YDIAG_MISC_TEB % XCAP_SYS ) NULLIFY ( YDIAG_MISC_TEB % XM_SYS ) NULLIFY ( YDIAG_MISC_TEB % XCOP ) NULLIFY ( YDIAG_MISC_TEB % XQ_SYS ) NULLIFY ( YDIAG_MISC_TEB % XT_SYS ) NULLIFY ( YDIAG_MISC_TEB % XTR_SW_WIN ) NULLIFY ( YDIAG_MISC_TEB % XFAN_POWER ) NULLIFY ( YDIAG_MISC_TEB % XABS_SW_WIN ) NULLIFY ( YDIAG_MISC_TEB % XABS_LW_WIN ) NULLIFY ( YDIAG_MISC_TEB % XEMIT_LW_GRND ) NULLIFY ( YDIAG_MISC_TEB % XEMIT_LW_FAC ) NULLIFY ( YDIAG_MISC_TEB % XT_RAD_IND ) NULLIFY ( YDIAG_MISC_TEB % XREF_SW_GRND ) NULLIFY ( YDIAG_MISC_TEB % XREF_SW_FAC ) NULLIFY ( YDIAG_MISC_TEB % XHU_BLD ) NULLIFY ( YDIAG_MISC_TEB % XTCOOL_TARGET ) NULLIFY ( YDIAG_MISC_TEB % XTHEAT_TARGET ) NULLIFY ( YDIAG_MISC_TEB % XQIN ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_TEB_N:DIAG_MISC_TEB_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_MISC_TEB_INIT ! SUBROUTINE DIAG_MISC_TEB_NP_INIT ( YNDIAG_MISC_TEB , KPATCH ) TYPE ( DIAG_MISC_TEB_NP_t ), INTENT ( INOUT ) :: YNDIAG_MISC_TEB INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_TEB_N:DIAG_MISC_TEB_NP_INIT\" , 0 , ZHOOK_HANDLE ) IF (. NOT . ASSOCIATED ( YNDIAG_MISC_TEB % AL )) THEN ALLOCATE ( YNDIAG_MISC_TEB % AL ( KPATCH )) DO JP = 1 , KPATCH CALL DIAG_MISC_TEB_INIT ( YNDIAG_MISC_TEB % AL ( JP )) ENDDO ELSE DO JP = 1 , KPATCH CALL DIAG_MISC_TEB_INIT ( YNDIAG_MISC_TEB % AL ( JP )) ENDDO DEALLOCATE ( YNDIAG_MISC_TEB % AL ) ENDIF IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_TEB_N:DIAG_MISC_TEB_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_MISC_TEB_NP_INIT END MODULE MODD_DIAG_MISC_TEB_n","tags":"","loc":"sourcefile/modd_diag_misc_tebn.f90.html"},{"title":"roof_layer_e_budget.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines ROOF_LAYER_E_BUDGET Source Code roof_layer_e_budget.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE ROOF_LAYER_E_BUDGET ( TOP , T , B , PQSAT_ROOF , PAC_BLD , PTSTEP , PDN_ROOF , & PRHOA , PAC_ROOF , PAC_ROOF_WAT , PLW_RAD , PPS , & PDELT_ROOF , PTA , PQA , PEXNA , PEXNS , PABS_SW_ROOF , & PGSNOW_ROOF , PFLX_BLD_ROOF , PDQS_ROOF , PABS_LW_ROOF ,& PHFREE_ROOF , PLEFREE_ROOF , PIMB_ROOF , & PG_GREENROOF_ROOF , PRADHT_IN , PTS_FLOOR , PTI_WALL , & PRAD_ROOF_WALL , PRAD_ROOF_WIN , PRAD_ROOF_FLOOR , & PRAD_ROOF_MASS , PCONV_ROOF_BLD , PRR , PLOAD_IN_ROOF ) !   ########################################################################## ! !!****  *ROOF_LAYER_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of surface temperature of roofs ! ! !!**  METHOD !     ------ ! ! ! ! !    5 : equation for evolution of Ts_roof !        ********************************* ! !     dTt_1(t) / dt = 1/(dt_1*Ct_1) * (  Rn - H - LE !                                      - 2*Kt_1*(Tt_1-Tt_2)/(dt_1 +dt_2)       ) ! !     dTt_k(t) / dt = 1/(dt_k*Ct_k) * (- 2*Kt_k-1*(Tt_k-Tt_k-1)/(dt_k-1 +dt_k) !                                      - 2*Kt_k  *(Tt_k-Tt_k+1)/(dt_k+1 +dt_k) ) ! !       with ! !       K*_k  = (d*_k+ d*_k+1)/(d*_k/k*_k+ d*_k+1/k*_k+1) ! !       Rn = (dir_Rg + sca_Rg) (1-a) + emis * ( Rat - sigma Ts**4 (t+dt) ) ! !       H  = rho Cp CH V ( Ts (t+dt) - Tas ) ! !       LE = rho Lv CH V ( qs (t+dt) - qas ) ! !      where the as subscript denotes atmospheric values at ground level !      (and not at first half level) ! !      The tridiagonal systel is linearized with ! !       using      Ts**4 (t+dt) = Ts**4 (t) + 4*Ts**3 (t) * ( Ts(t+dt) - Ts(t) ) ! !       and  qs (t+dt) = Hu(t) * qsat(t) + Hu(t) dqsat/dT * ( Ts(t+dt) - Ts(t) ) ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !!                  17/10/05 (G. Pigeon) computation of storage inside the roofs !!                  26/04/12 (G. Pigeon) add term of heating of rain (new arg PRR+XCL) !!                     09/12 (G. Pigeon) modif of indoor conv. coef and implicit calculation !!                     10/12 (G. Pigeon) add indoor solar heat load !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS , ONLY : XCPD , XLVTT , XSTEFAN , XCL ! USE MODE_THERMOS ! USE MODI_LAYER_E_BUDGET USE MODI_LAYER_E_BUDGET_GET_COEF USE MODE_CONV_DOE ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , DIMENSION (:), INTENT ( INOUT ) :: PQSAT_ROOF ! q_sat(Ts) REAL , DIMENSION (:), INTENT ( IN ) :: PAC_BLD ! aerodynamical resistance ! inside building itself REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PDN_ROOF ! roof snow fraction REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density REAL , DIMENSION (:), INTENT ( IN ) :: PAC_ROOF ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( IN ) :: PAC_ROOF_WAT ! aerodynamical conductance (for water) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_ROOF ! fraction of water REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! air temperature at roof level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! air specific humidity ! at roof level REAL , DIMENSION (:), INTENT ( IN ) :: PEXNA ! exner function REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_ROOF ! absorbed solar radiation REAL , DIMENSION (:), INTENT ( IN ) :: PGSNOW_ROOF ! roof snow conduction !                                                   ! heat fluxes at mantel !                                                   ! base REAL , DIMENSION (:), INTENT ( IN ) :: PG_GREENROOF_ROOF ! heat conduction flux !                                                        between greenroof and !                                                        structural roof REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_ROOF ! flux from bld to roof REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_ROOF ! heat storage inside the roofs REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_ROOF ! absorbed infra-red rad. REAL , DIMENSION (:), INTENT ( OUT ) :: PHFREE_ROOF ! sensible heat flux of the ! snow free part of the roof REAL , DIMENSION (:), INTENT ( OUT ) :: PLEFREE_ROOF ! latent heat flux of the ! snow free part of the roof REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_ROOF ! residual energy imbalance ! of the roof for REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PTS_FLOOR ! surf. floor temp. (contact with bld air) REAL , DIMENSION (:), INTENT ( IN ) :: PTI_WALL ! indoor wall temp. REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_ROOF_WALL ! rad. fluxes from roof to wall [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_ROOF_WIN ! rad. fluxes from roof to win [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_ROOF_FLOOR ! rad. fluxes from roof to floor [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_ROOF_MASS ! rad. fluxes from roof to mass [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_ROOF_BLD ! conv. fluxes from roof to bld [W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PRR ! rain rate [kg m-2 s-1] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_IN_ROOF ! solar + int heat gain on roof W/m2 [roof] ! !*      0.2    declarations of local variables ! REAL :: ZIMPL = 1.0 ! implicit coefficient REAL :: ZEXPL = 0.0 ! explicit coefficient ! REAL , DIMENSION ( SIZE ( PTA )) :: ZDF_ROOF ! snow-free fraction REAL , DIMENSION ( SIZE ( PTA ), SIZE ( T % XT_ROOF , 2 )) :: ZA ,& ! lower diag. ZB ,& ! main  diag. ZC ,& ! upper diag. ZY ! r.h.s. ! REAL , DIMENSION ( SIZE ( PTA )) :: ZDQSAT_ROOF ! dq_sat/dTs REAL , DIMENSION ( SIZE ( PTA )) :: ZRHO_ACF_ROOF ! conductance * rho REAL , DIMENSION ( SIZE ( PTA )) :: ZRHO_ACF_ROOF_WAT ! conductance * rho (for water) REAL , DIMENSION ( SIZE ( PTA )) :: ZMTC_O_D_ROOF_IN ! thermal capacity times layer depth REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_ROOF ! roof surface temperature at previous time step REAL , DIMENSION ( SIZE ( PTA )) :: ZTRAD_ROOF ! roof radiative surface temperature at intermediate time step REAL , DIMENSION ( SIZE ( PTA )) :: ZTAER_ROOF ! roof aerodyn. surface temperature at intermediate time step REAL , DIMENSION ( SIZE ( PTA )) :: ZHEAT_RR ! heat used too cool/heat the rain from the roof REAL , DIMENSION ( SIZE ( PTA )) :: ZTI_ROOF ! temperature of internal roof layer used for radiative exchanges REAL , DIMENSION ( SIZE ( PTA )) :: ZTI_ROOF_CONV ! temperature of internal roof layer used for convective exchanges REAL , DIMENSION ( SIZE ( PTA )) :: ZCHTC_IN_ROOF ! Indoor roof convec heat transfer coefficient ! [W K-1 m-2(bld)] ! INTEGER :: JJ INTEGER :: IROOF_LAYER ! number of roof layers INTEGER :: JLAYER ! loop counter REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'ROOF_LAYER_E_BUDGET' , 0 , ZHOOK_HANDLE ) ! PRAD_ROOF_WALL (:) = XUNDEF PRAD_ROOF_WIN (:) = XUNDEF PRAD_ROOF_FLOOR (:) = XUNDEF PRAD_ROOF_MASS (:) = XUNDEF PCONV_ROOF_BLD (:) = XUNDEF ! ! *Convection heat transfer coefficients [W m-2 K-1] from EP Engineering Reference ! IROOF_LAYER = SIZE ( T % XT_ROOF , 2 ) ! ZCHTC_IN_ROOF (:) = CHTC_DOWN_DOE ( T % XT_ROOF (:, IROOF_LAYER ), B % XTI_BLD (:)) DO JJ = 1 , SIZE ( ZCHTC_IN_ROOF ) ZCHTC_IN_ROOF ( JJ ) = MAX ( 1. , ZCHTC_IN_ROOF ( JJ )) ENDDO ! CALL LAYER_E_BUDGET_GET_COEF ( T % XT_ROOF , PTSTEP , ZIMPL , T % XHC_ROOF , T % XTC_ROOF , T % XD_ROOF , & ZA , ZB , ZC , ZY ) ! ! DO JJ = 1 , SIZE ( PDN_ROOF ) ! ZDF_ROOF ( JJ ) = 1. - PDN_ROOF ( JJ ) ! ZTS_ROOF ( JJ ) = T % XT_ROOF ( JJ , 1 ) ZTI_ROOF ( JJ ) = T % XT_ROOF ( JJ , IROOF_LAYER ) ! !*      2.     Roof Ts coefficients !              -------------------- ! ZRHO_ACF_ROOF ( JJ ) = PRHOA ( JJ ) * PAC_ROOF ( JJ ) ZRHO_ACF_ROOF_WAT ( JJ ) = PRHOA ( JJ ) * PAC_ROOF_WAT ( JJ ) ! IF ( TOP % CBEM . EQ . 'DEF' ) THEN ZMTC_O_D_ROOF_IN ( JJ ) = 2. * T % XTC_ROOF ( JJ , IROOF_LAYER ) / T % XD_ROOF ( JJ , IROOF_LAYER ) ZMTC_O_D_ROOF_IN ( JJ ) = 1. / ( 1. / ZMTC_O_D_ROOF_IN ( JJ ) + 1. / ( XCPD * PRHOA ( JJ ) * PAC_BLD ( JJ )) ) ENDIF ! ENDDO ! !*      2.1    dqsat/dTs, and humidity for roofs !              --------------------------------- ! ZDQSAT_ROOF (:) = DQSAT ( ZTS_ROOF (:), PPS (:), PQSAT_ROOF (:)) ! !*      2.2    coefficients !              ------------ ! DO JJ = 1 , SIZE ( T % XT_ROOF , 1 ) ! ZB ( JJ , 1 ) = ZB ( JJ , 1 ) + ZDF_ROOF ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * ( & ZIMPL * ( XCPD / PEXNS ( JJ ) * ZRHO_ACF_ROOF ( JJ ) & + XLVTT * ZRHO_ACF_ROOF_WAT ( JJ ) * PDELT_ROOF ( JJ ) * ZDQSAT_ROOF ( JJ ) & + XSTEFAN * T % XEMIS_ROOF ( JJ ) * 4. * ZTS_ROOF ( JJ ) ** 3 & + PRR ( JJ ) * XCL )) !! heating/cooling of rain ! ZY ( JJ , 1 ) = ZY ( JJ , 1 ) + ( 1. - T % XGREENROOF ( JJ )) & * ( PDN_ROOF ( JJ ) * PGSNOW_ROOF ( JJ ) + ZDF_ROOF ( JJ ) * ( PABS_SW_ROOF ( JJ ) & + XCPD * ZRHO_ACF_ROOF ( JJ ) * ( PTA ( JJ ) / PEXNA ( JJ ) - ZEXPL * ZTS_ROOF ( JJ ) / PEXNS ( JJ )) & + T % XEMIS_ROOF ( JJ ) * PLW_RAD ( JJ ) & + XLVTT * ZRHO_ACF_ROOF_WAT ( JJ ) * PDELT_ROOF ( JJ ) & * ( PQA ( JJ ) - PQSAT_ROOF ( JJ ) + ZIMPL * ZDQSAT_ROOF ( JJ ) * ZTS_ROOF ( JJ ) ) & + XSTEFAN * T % XEMIS_ROOF ( JJ ) * ZTS_ROOF ( JJ ) ** 4 * ( 3. * ZIMPL - ZEXPL ) & + PRR ( JJ ) * XCL * ( PTA ( JJ ) - ZEXPL * ZTS_ROOF ( JJ )) ) ) & !! heating/cooling of rain + T % XGREENROOF ( JJ ) * PG_GREENROOF_ROOF ( JJ ) ! IF ( TOP % CBEM == \"DEF\" ) THEN ! ZB ( JJ , IROOF_LAYER ) = ZB ( JJ , IROOF_LAYER ) + ZIMPL * ZMTC_O_D_ROOF_IN ( JJ ) ! ZY ( JJ , IROOF_LAYER ) = ZY ( JJ , IROOF_LAYER ) & + ZMTC_O_D_ROOF_IN ( JJ ) * B % XTI_BLD ( JJ ) & - ZEXPL * ZMTC_O_D_ROOF_IN ( JJ ) * T % XT_ROOF ( JJ , IROOF_LAYER ) ! ELSEIF ( TOP % CBEM == \"BEM\" ) THEN ! ZB ( JJ , IROOF_LAYER ) = ZB ( JJ , IROOF_LAYER ) + ZIMPL * & ( ZCHTC_IN_ROOF ( JJ ) * 4. / 3. + PRADHT_IN ( JJ ) * & ( B % XF_FLOOR_MASS ( JJ ) + B % XF_FLOOR_WIN ( JJ ) + & B % XF_FLOOR_WALL ( JJ ) + B % XF_FLOOR_ROOF ( JJ ) )) ZY ( JJ , IROOF_LAYER ) = ZY ( JJ , IROOF_LAYER ) + & ZCHTC_IN_ROOF ( JJ ) * ( B % XTI_BLD ( JJ ) - 1. / 3. * T % XT_ROOF ( JJ , IROOF_LAYER ) * ( 4 * ZEXPL - 1. )) + & PRADHT_IN ( JJ ) * ( & B % XF_FLOOR_MASS ( JJ ) * ( B % XT_MASS ( JJ , 1 ) - ZEXPL * T % XT_ROOF ( JJ , IROOF_LAYER )) + & B % XF_FLOOR_WIN ( JJ ) * ( B % XT_WIN2 ( JJ ) - ZEXPL * T % XT_ROOF ( JJ , IROOF_LAYER )) + & B % XF_FLOOR_WALL ( JJ ) * ( PTI_WALL ( JJ ) - ZEXPL * T % XT_ROOF ( JJ , IROOF_LAYER )) + & B % XF_FLOOR_ROOF ( JJ ) * ( PTS_FLOOR ( JJ ) - ZEXPL * T % XT_ROOF ( JJ , IROOF_LAYER ))) + & PLOAD_IN_ROOF ( JJ ) ! ENDIF ! ENDDO ! ! CALL LAYER_E_BUDGET ( T % XT_ROOF , PTSTEP , ZIMPL , T % XHC_ROOF , T % XTC_ROOF , T % XD_ROOF , & ZA , ZB , ZC , ZY , PDQS_ROOF ) ! !------------------------------------------------------------------------------- ! !*     diagnostic: computation of flux between bld and internal roof layernfra-red radiation absorbed by roofs !              ------------------------------------- ! !* radiative surface temperature at intermediate time step ZTRAD_ROOF ( JJ ) = ( ZTS_ROOF ( JJ ) ** 4 + & 4. * ZIMPL * ZTS_ROOF ( JJ ) ** 3 * ( T % XT_ROOF ( JJ , 1 ) - ZTS_ROOF ( JJ )) ) ** 0.25 ! !* absorbed LW PABS_LW_ROOF ( JJ ) = T % XEMIS_ROOF ( JJ ) * ( PLW_RAD ( JJ ) - XSTEFAN * ZTRAD_ROOF ( JJ ) ** 4 ) ! !*      9.     Sensible heat flux between snow free roof and air !              ------------------------------------------------- ! !* aerodynamic surface temperature at the intermediate time step ZTAER_ROOF ( JJ ) = ZEXPL * ZTS_ROOF ( JJ ) + ZIMPL * T % XT_ROOF ( JJ , 1 ) PHFREE_ROOF ( JJ ) = ZRHO_ACF_ROOF ( JJ ) * XCPD * & ( ZTAER_ROOF ( JJ ) / PEXNS ( JJ ) - PTA ( JJ ) / PEXNA ( JJ ) ) ! ZHEAT_RR ( JJ ) = PRR ( JJ ) * XCL * ( ZTAER_ROOF ( JJ ) - PTA ( JJ )) ! !*      10.     Latent heat flux between snow free roof and air !              ------------------------------------------------- ! PLEFREE_ROOF ( JJ ) = ZRHO_ACF_ROOF_WAT ( JJ ) * XLVTT * PDELT_ROOF ( JJ ) * & ( PQSAT_ROOF ( JJ ) - PQA ( JJ ) + & ZIMPL * ZDQSAT_ROOF ( JJ ) * ( T % XT_ROOF ( JJ , 1 ) - ZTS_ROOF ( JJ )) ) ! !      13.     Energy imbalance for verification !              --------------------------------- PIMB_ROOF ( JJ ) = PABS_SW_ROOF ( JJ ) + PABS_LW_ROOF ( JJ ) - PDQS_ROOF ( JJ ) & - ZDF_ROOF ( JJ ) * ( PHFREE_ROOF ( JJ ) + PLEFREE_ROOF ( JJ )) & - PDN_ROOF ( JJ ) * PGSNOW_ROOF ( JJ ) + PFLX_BLD_ROOF ( JJ ) ! ENDDO ! !*      11.     New saturated specified humidity near the roof surface !              ------------------------------------------------------ ! PQSAT_ROOF (:) = QSAT ( T % XT_ROOF (:, 1 ), PPS (:)) ! !------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'ROOF_LAYER_E_BUDGET' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------- ! END SUBROUTINE ROOF_LAYER_E_BUDGET","tags":"","loc":"sourcefile/roof_layer_e_budget.f90.html"},{"title":"floor_layer_e_budget.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines FLOOR_LAYER_E_BUDGET Source Code floor_layer_e_budget.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !   ########################################################################## SUBROUTINE FLOOR_LAYER_E_BUDGET ( B , PTSTEP , PFLX_BLD_FL , PDQS_FL , PIMB_FL , PRADHT_IN , & PRAD_WL_FL , PRAD_RF_FL , PRAD_WIN_FL , PLOAD_FL , & PRAD_FL_MA , PCONV_FL_BLD ) !   ########################################################################## ! !!****  *FLOOR_LAYER_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of building floor temperatures ! ! !!**  METHOD !     ------ ! !    6 : equations for evolution of Ts_floor !        ************************************************************* ! !     dTf_k(t) / dt = 1/(df_k*Cf_k) * (- 2*Kf_k-1*(Tf_k-Tf_k-1)/(df_k-1 +df_k) !                                      - 2*Kf_k  *(Tf_k-Tf_k+1)/(df_k+1 +df_k) ) ! !     dTf_1(t) / dt = 1/(df_1*Cf_1) * (- 2*Kw_1*(Tw_1-Tw_2)/(dw_1 +dw_2)) ! !       with ! !   K*_k  = (d*_k+ d*_k+1)/(d*_k/k*_k+ d*_k+1/k*_k+1) ! ! ! The system is implicited (or semi-implicited). ! ! ZIMPL=1    ---> implicit system ! ZIMPL=0.5  ---> semi-implicit system ! ZIMPL=0    ---> explicit system ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      G. Pigeon           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    15/04/09 !!      G. Pigeon      08/10 computation of residual of energy balance !!                           modification of the limit condition for !!                           the deep temp. from the deep road temp. !!                           to zero flux condition. idem for sfce T !!      G. Pigeon      11/11 split in 2 for floor and mass to be flux conservative !!      G. Pigeon      09/12 modif of conv. coef + implicitation of the exchange !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_BEM_n , ONLY : BEM_t ! USE MODI_LAYER_E_BUDGET_GET_COEF USE MODI_LAYER_E_BUDGET USE MODE_CONV_DOE ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_FL !flux from building to floor REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_FL !heat storage inside the floor REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_FL !floor energy residual imbalance for verification REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_FL ! rad. fluxes from roof to floor[W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_WL_FL ! rad. fluxes from wall to floor[W m-2(wall)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_WIN_FL ! rad. fluxes from win to floor[W m-2(win)] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_FL ! solar and internal load to the floor REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_FL_MA ! rad. fluxes from floor to mass [W m-2(floor)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_FL_BLD ! conv. fluxes from floor to bld [W m-2(floor)] ! !*      0.2    declarations of local variables ! ! REAL :: ZIMPL = 1.0 ! implicit coefficient REAL :: ZEXPL = 0.0 ! explicit coefficient ! REAL , DIMENSION ( SIZE ( B % XT_FLOOR , 1 ), SIZE ( B % XT_FLOOR , 2 )) :: ZA ,& ! lower diag. ZB ,& ! main  diag. ZC ,& ! upper diag. ZY ! r.h.s. ! REAL , DIMENSION ( SIZE ( B % XT_FLOOR , 1 )) :: ZTS_FL ! surf. floor temp.  used for rad. exchanges REAL , DIMENSION ( SIZE ( B % XT_FLOOR , 1 )) :: ZTS_FL_CONV ! surf. floor temp. used for conv exchanges ! used during calculation REAL , DIMENSION ( SIZE ( B % XT_FLOOR , 1 )) :: ZCHTC_IN_FL ! Indoor floor convec heat transfer coefficient ! [W K-1 m-2(bld)] REAL ( KIND = JPRB ) :: ZHOOK_HANDLE INTEGER :: JJ !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'FLOOR_LAYER_E_BUDGET' , 0 , ZHOOK_HANDLE ) ! ! *Convection heat transfer coefficients [W m-2 K-1] !  From EP Engineering Reference ZCHTC_IN_FL (:) = CHTC_UP_DOE ( B % XT_FLOOR (:, 1 ), B % XTI_BLD (:)) DO JJ = 1 , SIZE ( ZCHTC_IN_FL ) ZCHTC_IN_FL ( JJ ) = MAX ( 1. , ZCHTC_IN_FL ( JJ )) ENDDO ! CALL LAYER_E_BUDGET_GET_COEF ( B % XT_FLOOR , PTSTEP , ZIMPL , B % XHC_FLOOR , B % XTC_FLOOR , B % XD_FLOOR , & ZA , ZB , ZC , ZY ) ! ZTS_FL (:) = B % XT_FLOOR (:, 1 ) ZB (:, 1 ) = ZB (:, 1 ) + ZIMPL * ( ZCHTC_IN_FL (:) * 4. / 3. + PRADHT_IN (:) * B % XF_FLOOR_MASS (:)) ZY (:, 1 ) = ZY (:, 1 ) & + ZCHTC_IN_FL (:) * ( B % XTI_BLD (:) - 1. / 3. * B % XT_FLOOR (:, 1 ) * ( 4 * ZEXPL - 1 )) & + B % XF_FLOOR_WIN (:) * PRAD_WIN_FL (:) + B % XF_FLOOR_WALL (:) * PRAD_WL_FL (:) & + B % XF_FLOOR_ROOF (:) * PRAD_RF_FL (:) & + PRADHT_IN (:) * B % XF_FLOOR_MASS (:) * ( B % XT_MASS (:, 1 ) - ZEXPL * B % XT_FLOOR (:, 1 )) & + PLOAD_FL (:) ! CALL LAYER_E_BUDGET ( B % XT_FLOOR , PTSTEP , ZIMPL , B % XHC_FLOOR , B % XTC_FLOOR , B % XD_FLOOR , & ZA , ZB , ZC , ZY , PDQS_FL ) ! !*      floor surface temperature used in the implicit formulation !       ---------------------------------------------------------- ZTS_FL_CONV (:) = 4. / 3. * ZIMPL * B % XT_FLOOR (:, 1 ) + 1. / 3. * ZTS_FL (:) * ( 4 * ZEXPL - 1. ) ZTS_FL (:) = ZEXPL * ZTS_FL (:) + ZIMPL * B % XT_FLOOR (:, 1 ) ! !*      fluxes with mass and indoor air !       ---------------------------------------------------------- PRAD_FL_MA (:) = PRADHT_IN (:) * ( ZTS_FL (:) - B % XT_MASS (:, 1 )) PCONV_FL_BLD (:) = ZCHTC_IN_FL (:) * ( ZTS_FL_CONV (:) - B % XTI_BLD (:)) ! !*     Flux between floor and indoor surfaces and air !       ------------------------------------------------ PFLX_BLD_FL (:) = - PCONV_FL_BLD (:) + B % XF_FLOOR_WIN (:) * PRAD_WIN_FL (:) & + B % XF_FLOOR_WALL (:) * PRAD_WL_FL (:) + B % XF_FLOOR_ROOF (:) * PRAD_RF_FL (:) & + PRADHT_IN (:) * B % XF_FLOOR_MASS (:) * ( B % XT_MASS (:, 1 ) - ZTS_FL (:)) & + PLOAD_FL (:) ! !*     Floor residual energy imbalance for verification !       ------------------------------------------------ PIMB_FL (:) = PFLX_BLD_FL (:) - PDQS_FL (:) ! IF ( LHOOK ) CALL DR_HOOK ( 'FLOOR_LAYER_E_BUDGET' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- END SUBROUTINE FLOOR_LAYER_E_BUDGET","tags":"","loc":"sourcefile/floor_layer_e_budget.f90.html"},{"title":"teb_garden.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines TEB_GARDEN Source Code teb_garden.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE TEB_GARDEN ( DTCO , G , TOP , T , BOP , B , TPN , TIR , DMT , GDM , GRM , KTEB_P , & HIMPLICIT_WIND , PTSUN , PT_CAN , PQ_CAN , PU_CAN , PT_LOWCAN , PQ_LOWCAN , & PU_LOWCAN , PZ_LOWCAN , PPEW_A_COEF , PPEW_B_COEF , PPEW_A_COEF_LOWCAN , & PPEW_B_COEF_LOWCAN , PPS , PPA , PEXNS , PEXNA , PTA , PQA , PRHOA , PCO2 , & PLW_RAD , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , PZENITH , PAZIM , PRR , PSR , & PZREF , PUREF , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , PTSTEP , PLEW_RF , PLEW_RD ,& PLE_WL_A , PLE_WL_B , PRNSN_RF , PHSN_RF , PLESN_RF , PGSN_RF , PMELT_RF , & PRNSN_RD , PHSN_RD , PLESN_RD , PGSN_RD , PMELT_RD , PRN_GRND , PH_GRND , & PLE_GRND , PGFLX_GRND , PRN_TWN , PH_TWN , PLE_TWN , PGFLX_TWN , PEVAP_TWN , & PSFCO2 , PUW_GRND , PUW_RF , PDUWDU_GRND , PDUWDU_RF , & PUSTAR_TWN , PCD , PCDN , PCH_TWN , PRI_TWN , PTS_TWN , PEMIS_TWN , & PDIR_ALB_TWN , PSCA_ALB_TWN , PRESA_TWN , PAC_RD , PAC_GD , PAC_GR , & PAC_RD_WAT , PAC_GD_WAT , PAC_GR_WAT , KDAY , PEMIT_LW_FAC , PEMIT_LW_GRND , & PT_RAD_IND , PREF_SW_GRND , PREF_SW_FAC , PHU_BLD , PTIME , PPROD_BLD ) !   ########################################################################## ! !!****  *TEB_GARDEN* !! !!    PURPOSE !!    ------- ! ! !!**  METHOD !     ------ ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      A. Lemonsu          * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!    Original    05/2009 !!                04/2012 add B%XTRAN_WIN !!    modified    08/2012 TOP%CCH_BEM/ ROUGH_WALL and ROUGH_ROOF for buildind conv coef. !!    modified    10/2012 add B%XF_WIN_WIN as arg !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_DATA_COVER_n , ONLY : DATA_COVER_t USE MODD_SFX_GRID_n , ONLY : GRID_t USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t ! USE MODD_DIAG_n , ONLY : DIAG_t USE MODD_DIAG_EVAP_ISBA_n , ONLY : DIAG_EVAP_ISBA_t USE MODD_DIAG_MISC_ISBA_n , ONLY : DIAG_MISC_ISBA_t ! USE MODD_SURFEX_n , ONLY : TEB_GARDEN_MODEL_t USE MODD_SURFEX_n , ONLY : TEB_GREENROOF_MODEL_t ! USE MODD_TYPE_DATE_SURF , ONLY : DATE_TIME USE MODD_CSTS , ONLY : XTT , XSTEFAN USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_SNOW_PAR , ONLY : XEMISSN , XANSMAX ! USE MODE_THERMOS USE MODE_SURF_SNOW_FRAC ! USE MODI_SOLAR_PANEL USE MODI_TEB_VEG_PROPERTIES USE MODI_WINDOW_SHADING_AVAILABILITY USE MODI_URBAN_SOLAR_ABS USE MODI_URBAN_LW_COEF USE MODI_GARDEN USE MODI_GREENROOF USE MODI_TEB USE MODI_AVG_URBAN_FLUXES USE MODI_BLD_OCC_CALENDAR ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! TYPE ( DATA_COVER_t ), INTENT ( INOUT ) :: DTCO ! TYPE ( GRID_t ), INTENT ( INOUT ) :: G ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_OPTIONS_t ), INTENT ( INOUT ) :: BOP TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_PANEL_t ), INTENT ( INOUT ) :: TPN TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT ! TYPE ( TEB_GARDEN_MODEL_t ), INTENT ( INOUT ) :: GDM TYPE ( TEB_GREENROOF_MODEL_t ), INTENT ( INOUT ) :: GRM ! INTEGER , INTENT ( IN ) :: KTEB_P ! TEB current patch number ! CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option !                                                         ! 'OLD' = direct !                                                         ! 'NEW' = Taylor serie, order 1 REAL , DIMENSION (:), INTENT ( IN ) :: PTSUN ! solar time   (s from midnight) ! REAL , DIMENSION (:) , INTENT ( INOUT ) :: PT_CAN ! canyon air temperature REAL , DIMENSION (:) , INTENT ( INOUT ) :: PQ_CAN ! canyon air specific humidity REAL , DIMENSION (:) , INTENT ( IN ) :: PU_CAN ! canyon hor. wind REAL , DIMENSION (:) , INTENT ( IN ) :: PU_LOWCAN ! wind near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PT_LOWCAN ! temp. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PQ_LOWCAN ! hum. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PZ_LOWCAN ! height of atm. var. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF_LOWCAN ! implicit coefficients for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF_LOWCAN ! between low canyon wind and road REAL , DIMENSION (:) , INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:) , INTENT ( IN ) :: PPA ! pressure at the first atmospheric level REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:) , INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PQA ! specific humidity at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNA ! exner function at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PRHOA ! air density at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PCO2 ! CO2 concentration in the air    (kg/m3) REAL , DIMENSION (:) , INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:,:), INTENT ( IN ) :: PDIR_SW ! incoming direct solar rad on an horizontal surface REAL , DIMENSION (:,:), INTENT ( IN ) :: PSCA_SW ! scattered incoming solar rad. REAL , DIMENSION (:) , INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) INTEGER , INTENT ( IN ) :: KSW ! number of short-wave spectral bands REAL , DIMENSION (:) , INTENT ( IN ) :: PZENITH ! solar zenithal angle REAL , DIMENSION (:) , INTENT ( IN ) :: PAZIM ! solar azimuthal angle ! (radian form N, clockwise) REAL , DIMENSION (:) , INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:) , INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:) , INTENT ( IN ) :: PH_TRAFFIC ! anthropogenic sensible heat fluxes due to traffic REAL , DIMENSION (:) , INTENT ( IN ) :: PLE_TRAFFIC ! anthropogenic latent heat fluxes due to traffic REAL , DIMENSION (:) , INTENT ( IN ) :: PZREF ! reference height of the first atm level (temperature) REAL , DIMENSION (:) , INTENT ( IN ) :: PUREF ! reference height of the first atm level (wind) REAL , INTENT ( IN ) :: PTSTEP ! time step ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PLEW_RF ! latent heat flux over roof (snow) REAL , DIMENSION (:) , INTENT ( OUT ) :: PLEW_RD ! latent heat flux over road (snow) REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_WL_A ! latent heat flux over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_WL_B ! latent heat flux over wall ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PRNSN_RF ! net radiation over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PHSN_RF ! sensible heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PLESN_RF ! latent heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PGSN_RF ! flux under the snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PMELT_RF ! snow melt REAL , DIMENSION (:) , INTENT ( OUT ) :: PRNSN_RD ! net radiation over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PHSN_RD ! sensible heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PLESN_RD ! latent heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PGSN_RD ! flux under the snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PMELT_RD ! snow melt ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_GRND ! net radiation over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_GRND ! sensible heat flux over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_GRND ! latent heat flux over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLX_GRND ! flux through the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_TWN ! net radiation over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_TWN ! sensible heat flux over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_TWN ! latent heat flux over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLX_TWN ! flux through the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PEVAP_TWN ! evaporation flux (kg/m2/s) REAL , DIMENSION (:) , INTENT ( OUT ) :: PSFCO2 ! flux of CO2       (m/s*kg_CO2/kg_air) REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW_GRND ! momentum flux for ground built surf REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW_RF ! momentum flux for roofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PDUWDU_GRND ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PDUWDU_RF ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PUSTAR_TWN ! friciton velocity over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PCD ! town averaged drag coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PCDN ! town averaged neutral drag coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PCH_TWN ! town averaged heat transfer coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PRI_TWN ! town averaged Richardson number REAL , DIMENSION (:) , INTENT ( OUT ) :: PTS_TWN ! town surface temperature REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIS_TWN ! town equivalent emissivity REAL , DIMENSION (:) , INTENT ( OUT ) :: PDIR_ALB_TWN ! town equivalent direct albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PSCA_ALB_TWN ! town equivalent diffuse albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PRESA_TWN ! town aerodynamical resistance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_RD ! road conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GD ! green area conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GR ! green roof conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_RD_WAT ! road conductance for latent heat REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GD_WAT ! green area conductance for latent heat REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GR_WAT ! green roof conductance for latent heat ! ! new arguments created after BEM ! INTEGER , INTENT ( IN ) :: KDAY ! Simulation day ! new argument for the UTCI calculation REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIT_LW_GRND ! LW flux emitted by the ground (W/m2 ground) REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIT_LW_FAC ! LW flux emitted by the facade (W/m2 ground) REAL , DIMENSION (:) , INTENT ( OUT ) :: PT_RAD_IND ! Indoor mean radiant temperature [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PREF_SW_GRND ! total solar rad reflected from ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PREF_SW_FAC ! total solar rad reflected from facade REAL , DIMENSION (:) , INTENT ( OUT ) :: PHU_BLD ! Indoor relative humidity 0 < (-) < 1 ! ! new arguments for shading, schedule or natural ventilation REAL , INTENT ( IN ) :: PTIME ! current time since midnight (UTC, s) ! !* arguments for solar panels ! REAL , DIMENSION (:), INTENT ( OUT ) :: PPROD_BLD ! Averaged     Energy production of solar panel on roofs (W/m2 bld  ) ! !*      0.2    Declarations of local variables ! TYPE ( DIAG_t ), POINTER :: GDDK TYPE ( DIAG_EVAP_ISBA_t ), POINTER :: GDDEK TYPE ( DIAG_MISC_ISBA_t ), POINTER :: GDDMK ! TYPE ( DIAG_t ), POINTER :: GRDK TYPE ( DIAG_EVAP_ISBA_t ), POINTER :: GRDEK TYPE ( DIAG_MISC_ISBA_t ), POINTER :: GRDMK ! REAL , DIMENSION ( SIZE ( PTA )) :: ZTA ! air temperature extrapolated at roof level REAL , DIMENSION ( SIZE ( PTA )) :: ZQA ! air humidity extrapolated at roof level ! REAL , DIMENSION ( SIZE ( PTA )) :: ZDN_RF ! snow fraction on roofs REAL , DIMENSION ( SIZE ( PTA )) :: ZDN_RD ! snow fraction on roads REAL , DIMENSION ( SIZE ( PTA )) :: ZDF_RF ! free-snow fraction on roofs REAL , DIMENSION ( SIZE ( PTA )) :: ZDF_RD ! free-snow fraction on roads REAL , DIMENSION ( SIZE ( PTA )) :: ZDELT_RD ! fraction of water on roads REAL , DIMENSION ( SIZE ( PTA )) :: ZDELT_RF ! fraction of water on roofs REAL , DIMENSION ( SIZE ( PTA )) :: ZAC_RF ! roof conductance REAL , DIMENSION ( SIZE ( PTA )) :: ZAC_RF_WAT ! roof water conductance REAL , DIMENSION ( SIZE ( PTA )) :: ZAC_WL ! wall conductance REAL , DIMENSION ( SIZE ( PTA )) :: ZAC_TOP ! top conductance REAL , DIMENSION ( SIZE ( PTA )) :: ZQSAT_RD ! hum of saturation for roads REAL , DIMENSION ( SIZE ( PTA )) :: ZQSAT_GD ! hum of saturation for green areas REAL , DIMENSION ( SIZE ( PTA )) :: ZQSAT_RF ! hum of saturation for roofs REAL , DIMENSION ( SIZE ( PTA )) :: ZQSAT_GR ! hum of saturation for green roofs ! ! coefficients for LW computations over snow (from previous time-step) ! REAL , DIMENSION ( SIZE ( PTA )) :: ZTSSN_RF ! roof snow temp at previous time-step REAL , DIMENSION ( SIZE ( PTA )) :: ZTSSN_RD ! road snow temp at previous time-step REAL , DIMENSION ( SIZE ( PTA )) :: ZESN_RF ! snow emissivity at previous time-step REAL , DIMENSION ( SIZE ( PTA )) :: ZESN_RD ! snow emissivity at previous time-step ! ! incoming shortwave radiation ! REAL , DIMENSION ( SIZE ( PTA )) :: ZDIR_SW ! direct  solar rad REAL , DIMENSION ( SIZE ( PTA )) :: ZSCA_SW ! diffuse solar rad INTEGER :: JSWB ! ! albedo & emissivity ! REAL , DIMENSION ( SIZE ( PTA )) :: ZALB_GD ! albedo     for green areas REAL , DIMENSION ( SIZE ( PTA )) :: ZEMIS_GD ! emissivity for green areas REAL , DIMENSION ( SIZE ( PTA )) :: ZALB_GR ! albedo     for green roofs REAL , DIMENSION ( SIZE ( PTA )) :: ZEMIS_GR ! emissivity for green roofs ! REAL , DIMENSION ( SIZE ( PTA )) :: ZALBNIR_TVEG_GD ! nearIR  veg tot albedo REAL , DIMENSION ( SIZE ( PTA )) :: ZALBVIS_TVEG_GD ! visible veg tot albedo REAL , DIMENSION ( SIZE ( PTA )) :: ZALBNIR_TSOIL_GD ! nearIR  soil tot albedo REAL , DIMENSION ( SIZE ( PTA )) :: ZALBVIS_TSOIL_GD ! visible soil tot albedo ! REAL , DIMENSION ( SIZE ( PTA )) :: ZALBNIR_TVEG_GR ! nearIR  veg tot albedo REAL , DIMENSION ( SIZE ( PTA )) :: ZALBVIS_TVEG_GR ! visible veg tot albedo REAL , DIMENSION ( SIZE ( PTA )) :: ZALBNIR_TSOIL_GR ! nearIR  soil tot albedo REAL , DIMENSION ( SIZE ( PTA )) :: ZALBVIS_TSOIL_GR ! visible soil tot albedo ! ! radiation received by surfaces ! REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_SW_RD ! solar rad received by roads REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_SW_WL_A ! solar rad received by walls REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_SW_WL_B ! solar rad received by walls REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_SW_GD ! solar rad received by gardens REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_SW_SN_RD ! solar rad received by snow on roads ! REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_LW_GD ! IR rad received by gardens ! REAL , DIMENSION ( SIZE ( PTA )) :: ZSW_RAD_GD ! solar radiation reaching urban green areas REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_SW_RF ! solar rad received by roofs in presence of solar panels ! ! coefficients for LW contributions ! REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WA_TO_WB ! LW contrib. wall       -> opposite wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WA_TO_R ! LW contrib. wall       -> road REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WB_TO_R ! LW contrib. wall       -> road REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WA_TO_G ! LW contrib. wall       -> green REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WB_TO_G ! LW contrib. wall       -> green REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WA_TO_WIN ! Radiative heat trasfer coeff wall-window REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WB_TO_WIN ! Radiative heat trasfer coeff wall-window ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WA_TO_NR ! LW contrib. wall       -> road(snow) REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WB_TO_NR ! LW contrib. wall       -> road(snow) REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_R_TO_WA ! LW contrib. road       -> wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_R_TO_WB ! LW contrib. road       -> wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_R_TO_WIN ! Radiative heat trasfer coeff road-window ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_G_TO_WA ! LW contrib. green      -> wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_G_TO_WB ! LW contrib. green      -> wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_G_TO_WIN ! L.W. interactions GARDEN areas->road ! REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WIN_TO_WA ! Radiative heat trasfer coeff window-wall ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WIN_TO_WB ! Radiative heat trasfer coeff window-wall ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WIN_TO_R ! Radiative heat trasfer coeff window-road ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WIN_TO_G ! Radiative heat trasfer coeff window-garden ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WIN_TO_NR ! Radiative heat trasfer coeff window-road(snow) ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_S_TO_WA ! LW contrib. sky        -> wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_S_TO_WB ! LW contrib. sky        -> wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_S_TO_R ! LW contrib. sky        -> road REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_S_TO_G ! LW contrib. sky        -> green REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_S_TO_WIN ! Radiative heat trasfer coeff window-sky ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_S_TO_NR ! LW contrib. sky        -> road(snow) REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_NR_TO_WA ! LW contrib. road(snow) -> wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_NR_TO_WB ! LW contrib. road(snow) -> wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_NR_TO_WIN ! L.W. interactions snow(road)->GARDEN areas ! REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_SW_WIN ! solar received by windows [W m-2(win)] REAL , DIMENSION ( SIZE ( PTA )) :: ZT_SKY ! sky temperature [K] REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_LW_RF ! Incoming LW on roofs in presence of solar panels ! ! local variable at previous time-step ! REAL , DIMENSION ( SIZE ( PTA )) :: ZPET_A_COEF REAL , DIMENSION ( SIZE ( PTA )) :: ZPET_B_COEF REAL , DIMENSION ( SIZE ( PTA )) :: ZPEQ_A_COEF REAL , DIMENSION ( SIZE ( PTA )) :: ZPEQ_B_COEF ! REAL , DIMENSION ( SIZE ( PTA )) :: ZUW_RD ! momentum flux for roads REAL , DIMENSION ( SIZE ( PTA )) :: ZUW_GD ! momentum flux for green areas REAL , DIMENSION ( SIZE ( PTA )) :: ZUW_GR ! momentum flux for green roofs REAL , DIMENSION ( SIZE ( PTA )) :: ZDUWDU_RD ! ! REAL , DIMENSION ( SIZE ( PTA )) :: ZAC_AGG_GD ! aggreg. aeodynamic resistance for green areas REAL , DIMENSION ( SIZE ( PTA )) :: ZHU_AGG_GD ! aggreg. relative humidity for green areas REAL , DIMENSION ( SIZE ( PTA )) :: ZAC_AGG_GR ! aggreg. aeodynamic resistance for green roofs REAL , DIMENSION ( SIZE ( PTA )) :: ZHU_AGG_GR ! aggreg. relative humidity for green roofs ! !  surfaces relative fractions ! REAL , DIMENSION ( SIZE ( PTA )) :: ZRF_FRAC ! roof, wall and REAL , DIMENSION ( SIZE ( PTA )) :: ZWL_FRAC ! road fractions REAL , DIMENSION ( SIZE ( PTA )) :: ZRD_FRAC ! of exchange surf. REAL , DIMENSION ( SIZE ( PTA )) :: ZGD_FRAC ! REAL , DIMENSION ( SIZE ( PTA )) :: ZTOTS_O_HORS ! total canyon+roof surface !                                             ! over horizontal surface REAL , DIMENSION ( SIZE ( PTA )) :: ZWL_O_RD ! wall surface over road surface REAL , DIMENSION ( SIZE ( PTA )) :: ZWL_O_GRND ! wall surface over (road+green area) surface ! ! surface temperatures ! REAL , DIMENSION ( SIZE ( PTA )) :: ZMTC_O_GR_R1 ! mean thermal conductivity over distance !                                          ! between two layers (bottom GR & roof) ! ! fluxes from green surfaces ! REAL , DIMENSION ( SIZE ( PTA )) :: ZSFCO2_GD ! CO2 fluxes (m/s*kg_CO2/kg_air) REAL , DIMENSION ( SIZE ( PTA )) :: ZEMIT_LW_GD ! LW flux emitted by the garden (W/m2 garden) REAL , DIMENSION ( SIZE ( PTA )) :: ZSFCO2_GR ! CO2 fluxes over greenroofs (m/s*kg_CO2/kg_air) ! ! fluxes from built surfaces REAL , DIMENSION ( SIZE ( PTA )) :: ZEMIT_LW_RD ! LW flux emitted by the road (W/m2 road) ! ! fluxes from/to solar panel REAL , DIMENSION ( SIZE ( PTA )) :: ZEMIT_LWDN_PANEL ! LW flux emitted DOWNWARDS by the solar panel (W/m2 panel) REAL , DIMENSION ( SIZE ( PTA )) :: ZEMIT_LWUP_PANEL ! LW flux emitted UPWARDS   by the solar panel (W/m2 panel) REAL , DIMENSION ( SIZE ( PTA )) :: ZEMIT_LW_RF ! LW flux emitted UPWARDS   by the roof        (W/m2 roof ) ! REAL , DIMENSION ( SIZE ( PTA )) :: ZRN_GD , ZH_GD , ZLE_GD , ZGFLUX_GD , ZEVAP_GD , ZTSRAD_GD , ZRUNOFF_GD REAL , DIMENSIOn ( SIZE ( PTA )) :: ZRN_GR , ZH_GR , ZLE_GR , ZGFLUX_GR REAL , DIMENSION ( SIZE ( PTA )) :: ZEVAP_GR , ZTSRAD_GR , ZRUNOFF_GR , ZDRAIN_GR ! !new local variables for shading REAL , DIMENSION ( SIZE ( PTA )) :: ZE_SHADING ! energy not ref., nor absorbed, nor ! trans. by glazing [Wm-2(win)] LOGICAL , DIMENSION ( SIZE ( PTA )) :: GSHADE ! describes if one encounters the !                                                 ! conditions to close windows INTEGER :: JJ REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! !*      1.     Initializations !              --------------- ! !*      1.0    broadband radiative fluxes !              -------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'TEB_GARDEN' , 0 , ZHOOK_HANDLE ) ! GDDK => GDM % VD % ND % AL ( KTEB_P ) GDDEK => GDM % VD % NDE % AL ( KTEB_P ) GDDMK => GDM % VD % NDM % AL ( KTEB_P ) ! GRDK => GRM % VD % ND % AL ( KTEB_P ) GRDEK => GRM % VD % NDE % AL ( KTEB_P ) GRDMK => GRM % VD % NDM % AL ( KTEB_P ) ! ZDIR_SW (:) = 0. ZSCA_SW (:) = 0. ! DO JSWB = 1 , KSW DO JJ = 1 , SIZE ( PDIR_SW , 1 ) ZDIR_SW ( JJ ) = ZDIR_SW ( JJ ) + PDIR_SW ( JJ , JSWB ) ZSCA_SW ( JJ ) = ZSCA_SW ( JJ ) + PSCA_SW ( JJ , JSWB ) ENDDO END DO ! ! !*      1.1    surfaces relative fractions !              --------------------------- ! DO JJ = 1 , SIZE ( T % XROAD ) IF ( T % XROAD ( JJ ) . GT . 0. ) THEN ZTOTS_O_HORS ( JJ ) = 1. + T % XWALL_O_HOR ( JJ ) ZRF_FRAC ( JJ ) = T % XBLD ( JJ ) / ZTOTS_O_HORS ( JJ ) ZWL_FRAC ( JJ ) = T % XWALL_O_HOR ( JJ ) / ZTOTS_O_HORS ( JJ ) ZRD_FRAC ( JJ ) = T % XROAD ( JJ ) / ZTOTS_O_HORS ( JJ ) ZGD_FRAC ( JJ ) = T % XGARDEN ( JJ ) / ZTOTS_O_HORS ( JJ ) ZWL_O_RD ( JJ ) = ZWL_FRAC ( JJ ) / ZRD_FRAC ( JJ ) ZWL_O_GRND ( JJ ) = ZWL_FRAC ( JJ ) / ( ZRD_FRAC ( JJ ) + ZGD_FRAC ( JJ )) ELSEIF ( T % XBLD ( JJ ) . EQ . 0. . AND . T % XROAD ( JJ ) . EQ . 0. ) THEN ZTOTS_O_HORS ( JJ ) = 1. + T % XWALL_O_HOR ( JJ ) ZRF_FRAC ( JJ ) = 0. ZWL_FRAC ( JJ ) = T % XWALL_O_HOR ( JJ ) / ZTOTS_O_HORS ( JJ ) ZRD_FRAC ( JJ ) = 0. ZGD_FRAC ( JJ ) = T % XGARDEN ( JJ ) / ZTOTS_O_HORS ( JJ ) ZWL_O_RD ( JJ ) = 0. ZWL_O_GRND ( JJ ) = ZWL_FRAC ( JJ ) / ZGD_FRAC ( JJ ) ENDIF ENDDO ! !------------------------------------------------------------------------------- ! !*      2.     Snow-covered surfaces relative effects !              -------------------------------------- ! !*      2.1    Snow-covered surfaces relative fractions (at previous time-step) !              ---------------------------------------- CALL SNOW_FRAC_ROAD ( T % TSNOW_ROAD % WSNOW (:, 1 ), PSR (:) > 0. , ZDN_RD , ZDF_RD ) CALL SNOW_FRAC_ROOF ( T % TSNOW_ROOF % WSNOW (:, 1 ), PSR (:) > 0. , ZDN_RF , ZDF_RF ) ! !* new snow albedo ! WHERE ( T % TSNOW_ROAD % WSNOW (:, 1 ) == 0. . AND . PSR (:) > 0. ) T % TSNOW_ROAD % ALB (:) = XANSMAX WHERE ( T % TSNOW_ROOF % WSNOW (:, 1 ) == 0. . AND . PSR (:) > 0. ) T % TSNOW_ROOF % ALB (:) = XANSMAX ! !*      2.2    If snow was not present at previous time-step but is fallingadiative snow variables at previous time-step !              ---------------------------------------------- ! ZESN_RF (:) = T % TSNOW_ROOF % EMIS (:) ZESN_RD (:) = T % TSNOW_ROAD % EMIS (:) ZTSSN_RF (:) = T % TSNOW_ROOF % TS (:) ZTSSN_RD (:) = T % TSNOW_ROAD % TS (:) ! !------------------------------------------------------------------------------- ! !*      3.     Extrapolation of atmospheric T and q at roof level (for fluxes computation) !              -------------------------------------------------- ! ZTA (:) = PTA (:) * PEXNS (:) / PEXNA (:) ZQA (:) = PQA (:) * QSAT ( ZTA (:), PPS (:)) / QSAT ( PTA (:), PPA (:)) ! !------------------------------------------------------------------------------- ! !*      4.     Grid-averaged albedo and emissivity of green areas !              -------------------------------------------------- ! ZALB_GD = XUNDEF ZEMIS_GD = XUNDEF ZTSRAD_GD = XUNDEF ! IF ( TOP % LGARDEN ) THEN CALL TEB_VEG_PROPERTIES ( T % XGARDEN , GDM % O , GDM % NPE % AL ( KTEB_P ), & PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & ZTSRAD_GD , ZEMIS_GD , ZALB_GD , & PTA = PT_LOWCAN , & PALBNIR_TVEG = ZALBNIR_TVEG_GD , & PALBVIS_TVEG = ZALBVIS_TVEG_GD , & PALBNIR_TSOIL = ZALBNIR_TSOIL_GD , & PALBVIS_TSOIL = ZALBVIS_TSOIL_GD ) ENDIF ! ! for greenroofs : ! ZALB_GR = XUNDEF ZEMIS_GR = XUNDEF ZTSRAD_GR = XUNDEF ! IF ( TOP % LGREENROOF ) THEN CALL TEB_VEG_PROPERTIES ( T % XGREENROOF , GRM % O , GRM % NPE % AL ( KTEB_P ), & PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & ZTSRAD_GR , ZEMIS_GR , ZALB_GR , & PTA = PTA , & PALBNIR_TVEG = ZALBNIR_TVEG_GR , & PALBVIS_TVEG = ZALBVIS_TVEG_GR , & PALBNIR_TSOIL = ZALBNIR_TSOIL_GR , & PALBVIS_TSOIL = ZALBVIS_TSOIL_GR ) ENDIF ! !------------------------------------------------------------------------------- ! !*      5.     Occupation of buildings !              ----------------------- ! !* when building in unoccupied, target temperature is modified ! IF ( TOP % CBEM == \"BEM\" ) THEN CALL BLD_OCC_CALENDAR ( TOP % TTIME , PTSUN , T , B , 1. , DMT % XTCOOL_TARGET , DMT % XTHEAT_TARGET , DMT % XQIN ) ENDIF ! !------------------------------------------------------------------------------- ! !*      5.     Solar radiation !              --------------- ! ! !*       5.1   Windows management !              ------------------ ! !* checks if one encouters the conditions for closing the windows at day !  (needs to be equiped of solar protections and not to be confortable inside) ! GSHADE (:) = . FALSE . IF ( TOP % CBEM == \"BEM\" ) THEN CALL WINDOW_SHADING_AVAILABILITY ( B % LSHADE , B % XTI_BLD , DMT % XTCOOL_TARGET , GSHADE ) ! !* Reinitialize shading of windows when changing day ! WHERE ( PTSUN . LT . PTSTEP + 1E-3 ) B % LSHAD_DAY (:) = . FALSE . END IF ! ! !*       5.2   computes solar radiation exchanges !              ---------------------------------- ! CALL URBAN_SOLAR_ABS ( TOP , T , B , DMT , ZDIR_SW , ZSCA_SW , PZENITH , PAZIM , & TPN % XFRAC_PANEL , TPN % XALB_PANEL , ZALB_GD , & T % XSVF_GARDEN , ZALB_GR , ZDN_RF , ZDF_RF , & ZDN_RD , ZDF_RD , ZREC_SW_RD , ZREC_SW_SN_RD , & ZREC_SW_WL_A , ZREC_SW_WL_B , ZREC_SW_GD , & ZREC_SW_RF , PDIR_ALB_TWN , PSCA_ALB_TWN , & ZSW_RAD_GD , ZREC_SW_WIN , PREF_SW_GRND , & PREF_SW_FAC , ZE_SHADING , B % LSHAD_DAY , GSHADE ) ! !------------------------------------------------------------------------------- ! !*      6.     LW properties !              ------------- ! CALL URBAN_LW_COEF ( B , T , PLW_RAD , ZEMIS_GD , T % TSNOW_ROAD % TS , ZTSRAD_GD , & ZLW_WA_TO_WB , ZLW_WA_TO_R , ZLW_WB_TO_R , & ZLW_WA_TO_NR , ZLW_WB_TO_NR , ZLW_WA_TO_G , & ZLW_WB_TO_G , ZLW_WA_TO_WIN , ZLW_WB_TO_WIN , & ZLW_R_TO_WA , ZLW_R_TO_WB , ZLW_R_TO_WIN , & ZLW_G_TO_WA , ZLW_G_TO_WB , ZLW_G_TO_WIN , & ZLW_S_TO_WA , ZLW_S_TO_WB , ZLW_S_TO_R , & ZLW_S_TO_NR , ZLW_S_TO_G , ZLW_S_TO_WIN , & ZLW_WIN_TO_WA , ZLW_WIN_TO_WB , ZLW_WIN_TO_R , & ZLW_WIN_TO_NR , ZLW_WIN_TO_G , ZLW_NR_TO_WA , & ZLW_NR_TO_WB , ZLW_NR_TO_WIN ) ! !------------------------------------------------------------------------------- ! ! The subroutine is splitted in 2 because of compilation optimization issues CALL TEB_GARDEN2 CALL TEB_GARDEN3 ! IF ( LHOOK ) CALL DR_HOOK ( 'TEB_GARDEN' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- CONTAINS !------------------------------------------------------------------------------- SUBROUTINE TEB_GARDEN2 ! !*      7.     Terms of radiation absorption !              ----------------------------- ! !*      7.1    IR rad received by gardens (snow free and snow covered separately) !              -------------------------- ! IF ( TOP % LGARDEN ) THEN ZT_SKY (:) = ( PLW_RAD (:) / XSTEFAN ) ** 0.25 ZREC_LW_GD (:) = ( ZLW_S_TO_G (:) * ( ZT_SKY (:) - ZTSRAD_GD (:)) & + ZLW_WA_TO_G (:) * ( T % XT_WALL_A (:, 1 ) - ZTSRAD_GD (:)) & + ZLW_WB_TO_G (:) * ( T % XT_WALL_B (:, 1 ) - ZTSRAD_GD (:)) & + ZLW_WIN_TO_G (:) * ( B % XT_WIN1 (:) - ZTSRAD_GD (:)) ) & / ZEMIS_GD (:) + XSTEFAN * ZTSRAD_GD (:) ** 4 ELSE ZREC_LW_GD (:) = XUNDEF END IF ! !*     7.2     Effect of solar panels on incoming LW on roofs !              ---------------------------------------------- ! IF ( TOP % LSOLAR_PANEL ) THEN ! ! solar panels downwards surface is supposed to be at air temperature ! and to be have an emissivity of 1. ! ZEMIT_LWDN_PANEL = XSTEFAN * PTA ** 4 ! ! note that, for the time being, one considers that the solar panel ! intercept radiation both above roof and greenroofs (if any) ZREC_LW_RF = ( 1. - TPN % XFRAC_PANEL (:)) * PLW_RAD + TPN % XFRAC_PANEL (:) * ZEMIT_LWDN_PANEL ELSE ZEMIT_LWDN_PANEL = XUNDEF ZREC_LW_RF = PLW_RAD END IF ! !------------------------------------------------------------------------------- ! !*      8.     Treatment of green areas !              ------------------------ ! !*      8.1    Implicit coeefs for T and Q !              --------------------------- ! !* explicit coupling for the time being. !  canopy may need implicitation if there is a lot a garden in the grid mesh ! ZPET_A_COEF (:) = 0. ZPET_B_COEF (:) = PT_LOWCAN (:) / PEXNS (:) ZPEQ_A_COEF (:) = 0. ZPEQ_B_COEF (:) = PQ_LOWCAN (:) ! !*      8.2    Call ISBA for green areas !              ------------------------- ! IF ( TOP % LGARDEN ) THEN ! CALL GARDEN ( DTCO , G , T , TOP , TIR , GDM % DTV , GDM % GB , GDDK , GDDEK , GDDMK , & GDM % O , GDM % S , GDM % K , GDM % P , GDM % NPE % AL ( KTEB_P ), & HIMPLICIT_WIND , TOP % TTIME , PTSUN , PPEW_A_COEF_LOWCAN , PPEW_B_COEF_LOWCAN , & ZPET_A_COEF , ZPEQ_A_COEF , ZPET_B_COEF , ZPEQ_B_COEF , PTSTEP , PZREF , ZALB_GD , & PT_LOWCAN , PQ_LOWCAN , PEXNS , PRHOA , PCO2 , PPS , PRR , PSR , PZENITH , & ZREC_SW_GD , ZREC_LW_GD , PU_LOWCAN , ZALBNIR_TVEG_GD , ZALBVIS_TVEG_GD , & ZALBNIR_TSOIL_GD , ZALBVIS_TSOIL_GD , ZRN_GD , ZH_GD , ZLE_GD , ZGFLUX_GD , & ZSFCO2_GD , ZEVAP_GD , ZUW_GD , ZRUNOFF_GD , PAC_GD , ZQSAT_GD , ZTSRAD_GD , & ZAC_AGG_GD , ZHU_AGG_GD , DMT % XIRRIG_GARDEN ) PAC_GD_WAT (:) = PAC_GD (:) DMT % XABS_SW_GARDEN (:) = ( 1. - ZALB_GD (:)) * ZREC_SW_GD DMT % XABS_LW_GARDEN (:) = ZEMIS_GD (:) * ZREC_LW_GD (:) - XSTEFAN * ZEMIS_GD (:) * ZTSRAD_GD (:) ** 4 ZEMIT_LW_GD (:) = XSTEFAN * ZTSRAD_GD (:) ** 4 + ( 1 - ZEMIS_GD (:)) / ZEMIS_GD (:) * DMT % XABS_LW_GARDEN (:) ELSE ! ZRN_GD (:) = 0. ZH_GD (:) = 0. ZLE_GD (:) = 0. ZGFLUX_GD (:) = 0. ZEVAP_GD (:) = 0. ZRUNOFF_GD (:) = 0. ! ZTSRAD_GD (:) = XUNDEF ! ZUW_GD (:) = 0. PAC_GD (:) = 0. ZSFCO2_GD (:) = 0. ZQSAT_GD (:) = XUNDEF ZAC_AGG_GD (:) = XUNDEF ZHU_AGG_GD (:) = XUNDEF PAC_GD_WAT (:) = XUNDEF ZEMIT_LW_GD (:) = 0. ! DMT % XABS_SW_GARDEN (:) = XUNDEF DMT % XABS_LW_GARDEN (:) = XUNDEF ! DMT % XIRRIG_GARDEN (:) = 0. ! ENDIF ! !*      8.3    Call ISBA for greenroofs !              ------------------------- ! IF ( TOP % LGREENROOF ) THEN ! CALL GREENROOF ( DTCO , G , T , TOP , TIR , GRM % DTV , GRM % GB , GRDK , GRDEK , & GRDMK , GRM % O , GRM % S , GRM % K , GRM % P , GRM % NPE % AL ( KTEB_P ), & HIMPLICIT_WIND , TOP % TTIME , PTSUN , PPEW_A_COEF , PPEW_B_COEF , & ZPET_A_COEF , ZPEQ_A_COEF , ZPET_B_COEF , ZPEQ_B_COEF , PTSTEP , PZREF , & PUREF , ZALB_GD , PTA , PQA , PEXNS , PEXNA , PRHOA , PCO2 , PPS , PRR , PSR , PZENITH , & ZREC_SW_RF , ZREC_LW_RF , PVMOD , ZALBNIR_TVEG_GR , ZALBVIS_TVEG_GR , & ZALBNIR_TSOIL_GR , ZALBVIS_TSOIL_GR , ZRN_GR , ZH_GR , ZLE_GR , & ZGFLUX_GR , ZSFCO2_GR , ZEVAP_GR , ZUW_GR , ZRUNOFF_GR , ZDRAIN_GR , & PAC_GR , ZQSAT_GR , ZTSRAD_GR , ZAC_AGG_GR , ZHU_AGG_GR , & DMT % XG_GREENROOF_ROOF , DMT % XIRRIG_GREENROOF ) ! PAC_GR_WAT (:) = PAC_GR (:) DMT % XABS_SW_GREENROOF (:) = ( 1. - ZALB_GR (:)) * ZREC_SW_RF DMT % XABS_LW_GREENROOF (:) = ZEMIS_GR * ZREC_LW_RF - XSTEFAN * ZEMIS_GR * ZTSRAD_GR ** 4 ELSE ! ZRN_GR (:) = 0. ZH_GR (:) = 0. ZLE_GR (:) = 0. ZGFLUX_GR (:) = 0. ZEVAP_GR (:) = 0. ZRUNOFF_GR (:) = 0. ZDRAIN_GR (:) = 0. ! ZTSRAD_GR (:) = XUNDEF ! ZUW_GR (:) = 0. PAC_GR (:) = 0. ZSFCO2_GR (:) = 0. ZQSAT_GR (:) = XUNDEF ZAC_AGG_GR (:) = XUNDEF ZHU_AGG_GR (:) = XUNDEF ZMTC_O_GR_R1 (:) = XUNDEF ! DMT % XIRRIG_GREENROOF (:) = 0. DMT % XABS_SW_GREENROOF (:) = XUNDEF DMT % XABS_LW_GREENROOF (:) = XUNDEF DMT % XG_GREENROOF_ROOF (:) = XUNDEF ! ENDIF END SUBROUTINE TEB_GARDEN2 !------------------------------------------------------------------------------- SUBROUTINE TEB_GARDEN3 ! !*     9.      Treatment of built covers !              ------------------------- ! CALL TEB ( TOP , T , BOP , B , TIR , DMT , HIMPLICIT_WIND , & PTSUN , PT_CAN , PQ_CAN , PU_CAN , PT_LOWCAN , PQ_LOWCAN , PU_LOWCAN , & PZ_LOWCAN , PPEW_A_COEF , PPEW_B_COEF , PPEW_A_COEF_LOWCAN , & PPEW_B_COEF_LOWCAN , PPS , PPA , PEXNS , PEXNA , PTA , PQA , PRHOA , PLW_RAD , & PRR , PSR , PZREF , PUREF , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , PTSTEP , & ZDF_RF , ZDN_RF , ZDF_RD , ZDN_RD , ZQSAT_RF , ZQSAT_RD , ZDELT_RF , & ZDELT_RD , ZTSRAD_GD , PLEW_RF , ZUW_GR , PLEW_RD , PLE_WL_A , & PLE_WL_B , PRNSN_RF , PHSN_RF , PLESN_RF , PGSN_RF , PMELT_RF , & ZRN_GR , ZH_GR , ZLE_GR , ZGFLUX_GR , ZDRAIN_GR , ZRUNOFF_GR , & PRNSN_RD , PHSN_RD , PLESN_RD , PGSN_RD , PMELT_RD , ZUW_RD , PUW_RF , & ZDUWDU_RD , PDUWDU_RF , PUSTAR_TWN , PCD , PCDN , PCH_TWN , PRI_TWN , PRESA_TWN , & ZAC_RF , PAC_RD , ZAC_WL , ZAC_TOP , PAC_GD , ZAC_RF_WAT , PAC_RD_WAT , & ZLW_WA_TO_WB , ZLW_WA_TO_R , ZLW_WB_TO_R , ZLW_WA_TO_NR , ZLW_WB_TO_NR , & ZLW_R_TO_WA , ZLW_R_TO_WB , ZLW_G_TO_WA , ZLW_G_TO_WB , ZLW_S_TO_WA , & ZLW_S_TO_WB , ZLW_S_TO_R , ZLW_S_TO_NR , ZLW_NR_TO_WA , ZLW_NR_TO_WB , & ZLW_NR_TO_WIN , ZLW_WA_TO_WIN , ZLW_WB_TO_WIN , ZLW_G_TO_WIN , & ZLW_R_TO_WIN , ZLW_S_TO_WIN , ZLW_WIN_TO_WA , ZLW_WIN_TO_WB , & ZLW_WIN_TO_R , ZLW_WIN_TO_NR , KDAY , PEMIT_LW_FAC , ZEMIT_LW_RD , & PT_RAD_IND , PHU_BLD , PTIME , ZE_SHADING ) ! !------------------------------------------------------------------------------- ! !*    10.      Treatment of solar panels !              ------------------------- ! IF ( TOP % LSOLAR_PANEL ) THEN ! !* LW radiation coming upwards from roofs ! ZEMIT_LW_RF = ZREC_LW_RF & - ( T % XGREENROOF (:) * DMT % XABS_LW_GREENROOF (:) & + ( 1. - T % XGREENROOF (:)) * ZDF_RF (:) * DMT % XABS_LW_ROOF (:) & + ( 1. - T % XGREENROOF (:)) * ZDN_RF (:) * DMT % XABS_LW_SNOW_ROOF (:) ) ! ! note that, for the time being, one considers that the solar panel ! intercept radiation both above roof and greenroofs (if any) CALL SOLAR_PANEL ( TPN , DMT , PTSTEP , PTSUN , T % XRESIDENTIAL , ZEMIT_LW_RF , ZEMIT_LWDN_PANEL , & PLW_RAD , PTA , B % XN_FLOOR , PPROD_BLD ) ELSE PPROD_BLD = XUNDEF END IF !------------------------------------------------------------------------------- ! !*     11.     Aggregation !              ----------- ! CALL AVG_URBAN_FLUXES ( TOP , T , B , TPN , DMT , & PTS_TWN , PEMIS_TWN , PT_CAN , PQ_CAN , PT_LOWCAN , PQ_LOWCAN , & ZTA , ZQA , PRHOA , PPS , PH_TRAFFIC , PLE_TRAFFIC , ZWL_O_GRND , & ZESN_RF , ZEMIS_GR , PLW_RAD , ZAC_RF , ZAC_RF_WAT , ZAC_WL , PAC_RD , & PAC_RD_WAT , ZAC_TOP , PAC_GD , ZQSAT_GD , ZAC_AGG_GD , ZHU_AGG_GD , & ZQSAT_RF , ZQSAT_RD , ZDELT_RF , ZDELT_RD , ZRF_FRAC , ZWL_FRAC , & ZRD_FRAC , ZGD_FRAC , ZTOTS_O_HORS , ZDF_RF , ZDN_RF , ZDF_RD , ZDN_RD , & PLE_WL_A , PLE_WL_B , PLEW_RF , PLESN_RF , PLEW_RD , PLESN_RD , PHSN_RD , & ZTSRAD_GD , ZRN_GD , ZH_GD , ZLE_GD , ZGFLUX_GD , ZEVAP_GD , & ZRUNOFF_GD , ZEVAP_GR , ZRUNOFF_GR , ZDRAIN_GR , & PRN_GRND , PH_GRND , PLE_GRND , PGFLX_GRND , PRN_TWN , PH_TWN , PLE_TWN , & PGFLX_TWN , PEVAP_TWN , ZEMIT_LW_RD , ZEMIT_LW_GD , PEMIT_LW_GRND , ZEMIS_GD ) ! PSFCO2 (:) = T % XGARDEN (:) * ZSFCO2_GD (:) + T % XBLD (:) * T % XGREENROOF (:) * ZSFCO2_GR (:) ! no CO2 flux from built and road yet. ! !------------------------------------------------------------------------------- ! !*     12.     Momentum flux for ground built surfaces !              --------------------------------------- ! PUW_GRND (:) = ( T % XROAD (:) * ZUW_RD (:) + T % XGARDEN (:) * ZUW_GD (:)) / ( T % XROAD (:) + T % XGARDEN (:)) ! PDUWDU_GRND (:) = 0. ! END SUBROUTINE TEB_GARDEN3 ! !------------------------------------------------------------------------------- ! ! END SUBROUTINE TEB_GARDEN","tags":"","loc":"sourcefile/teb_garden.f90.html"},{"title":"modd_diagn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DIAG_n Source Code modd_diagn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !###################### MODULE MODD_DIAG_n !###################### ! !!****  *MODD_DIAG - declaration of diagnostics for ISBA scheme !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       01/2004 !!      Modified    01/2006 : sea flux parameterization. !!      Modified    04/2009 : precip for/from restart file. !!      Modified    08/2009 : BUDGETC for all tiles !!      P. Samuelsson 10/2014 : added min max for XT2M !!      Modified    09/2015 : M Lafaysse LSNOWDIMNC !!      Modified    06/2016 : M Lafaysse LRESETCUMUL ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_TYPE_DATE_SURF ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! TYPE DIAG_OPTIONS_t ! REAL :: XDIAG_TSTEP ! time step for diagnostics writing ! INTEGER :: N2M ! flag for 2 meters (and 10 meters) quantities LOGICAL :: LT2MMW ! flag to perform modified weighting of 2m temperature LOGICAL :: L2M_MIN_ZS ! flag for 2 meters quantities evaluated on !                         ! the minimum orographyy of the grid LOGICAL :: LSURF_BUDGET ! flag for surface energy budget LOGICAL :: LRAD_BUDGET ! flag for radiative energy budget ! LOGICAL :: LCOEF ! flag for transfer coefficients LOGICAL :: LSURF_VARS ! flag for surface variables LOGICAL :: LFRAC ! flag for writing fractions of each four tiles LOGICAL :: LDIAG_GRID ! flag for mean grid diag ! LOGICAL :: LSURF_BUDGETC ! flag for surface cumulated energy budget LOGICAL :: LRESET_BUDGETC ! flag for surface cumulated energy budget LOGICAL :: LREAD_BUDGETC ! flag for surface cumulated energy budget LOGICAL :: LPROVAR_TO_DIAG ! switch to write (or not) prognostic variable ! and allows puting field in diagnostics LOGICAL :: LSNOWDIMNC ! if true create a snow layer dimension in nc files LOGICAL :: LRESETCUMUL ! reset cumulated variables at 0 at each output timestep LOGICAL :: LSELECT ! switch to control which fields are written ! (only those whose naem appears in in text array) ! TYPE ( DATE_TIME ) :: TIME_BUDGETC ! CHARACTER ( LEN = 12 ), POINTER , DIMENSION (:) :: CSELECT ! Name of ouput fields if LSELECT=true ! LOGICAL :: LPGD ! flag for writing of PGD files LOGICAL :: LPATCH_BUDGET ! flag for patch output ! END TYPE DIAG_OPTIONS_t ! TYPE DIAG_t !------------------------------------------------------------------------------ ! !* variables for each patch ! !* averaged variables ! REAL , POINTER , DIMENSION (:) :: XRI ! Bulk-Richardson number           (-) REAL , POINTER , DIMENSION (:) :: XCD ! drag coefficient for wind        (W/s2) REAL , POINTER , DIMENSION (:) :: XCDN ! neutral drag coefficient                      (-) REAL , POINTER , DIMENSION (:) :: XCH ! drag coefficient for heat        (W/s) REAL , POINTER , DIMENSION (:) :: XCE ! drag coefficient for vapor       (W/s/K) ! REAL , POINTER , DIMENSION (:) :: XHU ! area averaged surface humidity coefficient    (-) REAL , POINTER , DIMENSION (:) :: XHUG ! baresoil surface humidity coefficient         (-) REAL , POINTER , DIMENSION (:) :: XHV ! Halstead coefficient                          (-) ! REAL , POINTER , DIMENSION (:) :: XRN ! net radiation at surface         (W/m2) REAL , POINTER , DIMENSION (:) :: XH ! sensible heat flux               (W/m2) REAL , POINTER , DIMENSION (:) :: XLE ! total latent heat flux           (W/m2) REAL , POINTER , DIMENSION (:) :: XLEI ! sublimation latent heat flux     (W/m2) REAL , POINTER , DIMENSION (:) :: XGFLUX ! net soil-vegetation flux         (W/m2) ! REAL , POINTER , DIMENSION (:) :: XEVAP ! total evaporation                (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XSUBL ! sublimation                      (kg/m2/s) ! REAL , POINTER , DIMENSION (:) :: XTS ! surface temperature              (K) REAL , POINTER , DIMENSION (:) :: XTSRAD ! surface temperature              (K) REAL , POINTER , DIMENSION (:) :: XALBT ! Total Albedo REAL , POINTER , DIMENSION (:) :: XSWE ! snow water equivalent (kg/m2) ! REAL , POINTER , DIMENSION (:) :: XT2M ! temperature at 2 meters          (K) REAL , POINTER , DIMENSION (:) :: XT2M_MIN ! Minimum temperature at 2 meters          (K) REAL , POINTER , DIMENSION (:) :: XT2M_MAX ! Maximum temperature at 2 meters          (K) REAL , POINTER , DIMENSION (:) :: XQ2M ! humidity    at 2 meters          (kg/kg) REAL , POINTER , DIMENSION (:) :: XHU2M ! relative humidity at 2 meters    (-) REAL , POINTER , DIMENSION (:) :: XHU2M_MIN ! Minimum relative humidity at 2 meters    (-) REAL , POINTER , DIMENSION (:) :: XHU2M_MAX ! Maximum relative humidity at 2 meters    (-) REAL , POINTER , DIMENSION (:) :: XQS ! humidity at surface              (kg/kg) REAL , POINTER , DIMENSION (:) :: XZON10M ! zonal wind at 10 meters          (m/s) REAL , POINTER , DIMENSION (:) :: XMER10M ! meridian wind at 10 meters       (m/s) REAL , POINTER , DIMENSION (:) :: XWIND10M ! wind at 10 meters                (m/s) REAL , POINTER , DIMENSION (:) :: XWIND10M_MAX ! Maximum wind at 10 meters    (m/s) ! REAL , POINTER , DIMENSION (:) :: XSFCO2 ! CO2 flux                         (m/s*kg_CO2/kg_air) ! REAL , POINTER , DIMENSION (:,:) :: XSWBD ! downward short wave radiation by spectral band   (W/m2) REAL , POINTER , DIMENSION (:,:) :: XSWBU ! upward short wave radiation by spectral band (W/m2) ! REAL , POINTER , DIMENSION (:) :: XLWD ! downward long wave radiation     (W/m2) REAL , POINTER , DIMENSION (:) :: XLWU ! upward long wave radiation       (W/m2) REAL , POINTER , DIMENSION (:) :: XSWD ! downward short wave radiation    (W/m2) REAL , POINTER , DIMENSION (:) :: XSWU ! upward short wave radiation      (W/m2) ! REAL , POINTER , DIMENSION (:) :: XFMU ! horizontal momentum flux zonal   (m2/s2) REAL , POINTER , DIMENSION (:) :: XFMV ! horizontal momentum flux meridian (m2/s2) ! REAL , POINTER , DIMENSION (:) :: XZ0 ! roughness length for momentum ! for vegetation and snow    (m) REAL , POINTER , DIMENSION (:) :: XZ0H ! roughness length for heat ! for vegetation and snow    (m) REAL , POINTER , DIMENSION (:) :: XZ0EFF ! effective roughness length for heat ! for vegetation and snow    (m) ! REAL , POINTER , DIMENSION (:) :: XT2M_MIN_ZS ! air temperature at 2 meters   (K) REAL , POINTER , DIMENSION (:) :: XQ2M_MIN_ZS ! air humidity at 2 meters      (kg/kg) REAL , POINTER , DIMENSION (:) :: XHU2M_MIN_ZS ! air relative humidity at 2 m  (-) REAL , POINTER , DIMENSION (:) :: XPS ! air pressure at the surface      (Pa) REAL , POINTER , DIMENSION (:) :: XRHOA ! air density  at the surface      (kg/m3) REAL , POINTER , DIMENSION (:) :: XSSO_FMU ! zonal friction    (with SSO)     (Pa) REAL , POINTER , DIMENSION (:) :: XSSO_FMV ! meridian friction (with SSO)     (Pa) ! REAL , POINTER , DIMENSION (:) :: XUREF ! reference height for momentum    (m) REAL , POINTER , DIMENSION (:) :: XZREF ! reference height for heat        (m) REAL , POINTER , DIMENSION (:) :: XTRAD ! radiative temperature at t       (K) REAL , POINTER , DIMENSION (:) :: XEMIS ! surface emissivity at t          (-) !------------------------------------------------------------------------------ ! END TYPE DIAG_t ! TYPE DIAG_NP_t ! TYPE ( DIAG_t ), POINTER :: AL (:) => NULL () ! END TYPE DIAG_NP_t ! CONTAINS ! SUBROUTINE DIAG_OPTIONS_INIT ( DGO ) TYPE ( DIAG_OPTIONS_t ), INTENT ( INOUT ) :: DGO REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_N:DIAG_OPTIONS_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( DGO % CSELECT ) DGO % XDIAG_TSTEP = 0. DGO % N2M = 0 DGO % LT2MMW = . FALSE . DGO % L2M_MIN_ZS = . FALSE . DGO % LSURF_BUDGET = . FALSE . DGO % LRAD_BUDGET = . FALSE . DGO % LCOEF = . FALSE . DGO % LSURF_VARS = . FALSE . DGO % LFRAC = . FALSE . DGO % LDIAG_GRID = . FALSE . DGO % LPGD = . FALSE . DGO % LPATCH_BUDGET = . FALSE . DGO % LSURF_BUDGETC = . FALSE . DGO % LRESET_BUDGETC = . FALSE . DGO % LREAD_BUDGETC = . FALSE . DGO % LPROVAR_TO_DIAG = . FALSE . DGO % LSNOWDIMNC = . FALSE . DGO % LRESETCUMUL = . FALSE . DGO % LSELECT = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_N:DIAG_OPTIONS_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_OPTIONS_INIT ! SUBROUTINE DIAG_NP_INIT ( ND , KPATCH ) TYPE ( DIAG_NP_t ), INTENT ( INOUT ) :: ND INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_N:DIAG_NP_INIT\" , 0 , ZHOOK_HANDLE ) IF (. NOT . ASSOCIATED ( ND % AL )) THEN ALLOCATE ( ND % AL ( KPATCH )) DO JP = 1 , KPATCH CALL DIAG_INIT ( ND % AL ( JP )) ENDDO ELSE DO JP = 1 , KPATCH CALL DIAG_INIT ( ND % AL ( JP )) ENDDO DEALLOCATE ( ND % AL ) ENDIF IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_N:DIAG_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_NP_INIT ! ! SUBROUTINE DIAG_INIT ( D ) TYPE ( DIAG_t ), INTENT ( INOUT ) :: D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_N:DIAG_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( D % XRI ) NULLIFY ( D % XCD ) NULLIFY ( D % XCDN ) NULLIFY ( D % XCH ) NULLIFY ( D % XCE ) NULLIFY ( D % XHU ) NULLIFY ( D % XHUG ) NULLIFY ( D % XHV ) NULLIFY ( D % XRN ) NULLIFY ( D % XH ) NULLIFY ( D % XLE ) NULLIFY ( D % XLEI ) NULLIFY ( D % XGFLUX ) NULLIFY ( D % XEVAP ) NULLIFY ( D % XSUBL ) NULLIFY ( D % XTS ) NULLIFY ( D % XTSRAD ) NULLIFY ( D % XALBT ) NULLIFY ( D % XSWE ) NULLIFY ( D % XT2M ) NULLIFY ( D % XT2M_MIN ) NULLIFY ( D % XT2M_MAX ) NULLIFY ( D % XQ2M ) NULLIFY ( D % XHU2M ) NULLIFY ( D % XQS ) NULLIFY ( D % XZON10M ) NULLIFY ( D % XMER10M ) NULLIFY ( D % XWIND10M ) NULLIFY ( D % XWIND10M_MAX ) NULLIFY ( D % XLWD ) NULLIFY ( D % XLWU ) NULLIFY ( D % XSWD ) NULLIFY ( D % XSWU ) NULLIFY ( D % XSWBD ) NULLIFY ( D % XSWBU ) NULLIFY ( D % XFMU ) NULLIFY ( D % XFMV ) NULLIFY ( D % XZ0 ) NULLIFY ( D % XZ0H ) NULLIFY ( D % XZ0EFF ) NULLIFY ( D % XT2M_MIN_ZS ) NULLIFY ( D % XQ2M_MIN_ZS ) NULLIFY ( D % XHU2M_MIN_ZS ) NULLIFY ( D % XPS ) NULLIFY ( D % XRHOA ) NULLIFY ( D % XSSO_FMU ) NULLIFY ( D % XSSO_FMV ) NULLIFY ( D % XUREF ) NULLIFY ( D % XZREF ) NULLIFY ( D % XTRAD ) NULLIFY ( D % XEMIS ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_N:DIAG_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_INIT END MODULE MODD_DIAG_n","tags":"","loc":"sourcefile/modd_diagn.f90.html"},{"title":"modd_isba_par.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_ISBA_PAR Source Code modd_isba_par.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ###################### MODULE MODD_ISBA_PAR !     ###################### ! !!****  *MODD_ISBA_PAR* - declaration of ISBA parameters !! !!    PURPOSE !!    ------- !       The purpose of this declarative module is to specify  the !     parameters related to the surface parameterization ISBA. ! !! !! !! !!    AUTHOR !!    ------ !!      S. Belair   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       29/04/95 !!      (V.Masson)     05/10/98+ add XCDZ0EFF, XRHOSMIN, XRHOSMAX !!      (V.Masson)     15/03/99 add number of layers !!      (A.Boone)      02/05/02 add ISBA-ES parameters !!      (A.Boone)      21/11/11 add Rsmax !!      (S.Gollvik)    20/02/12 add XFLXMAX !!      (A.Boone)      20/02/12 add ISBA-MEB parameters !!     (B. Decharme)      07/15 Add numerical adjustement for F2 soilstress function !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! IMPLICIT NONE ! !------------------------------------------------------------------------------ ! Vegetation: (for additional parameters related to vegetation, see ! modd_co2v_par.f90) !------------------------------------------------------------------------------ ! ! vegetation emissivity ! REAL , PARAMETER :: XEMISVEG = 0.97 ! ! drag coefficient in z0eff computation ! REAL , PARAMETER :: XCDZ0EFF = 0.8 ! ! minimum vegetation fraction (for C3 grassland: for the case with large ! VEG and low LAI, such as wintertime) ! REAL , PARAMETER :: XVEGMIN = 0.95 ! ! Maximum stomatal resistance (s m-1) ! REAL , PARAMETER :: XRS_MAX = 500 0. ! ! Factor to restore explicit Cv value (DIF option) ! REAL , PARAMETER :: XCVHEATF = 0.20 ! ! Numerical factor to prevent division by 0 for F2 soilstress function ! REAL , PARAMETER :: XDENOM_MIN = 1.E-12 ! !-------------------------------------------------------------------------------- ! Soil: !-------------------------------------------------------------------------------- ! ! Caracteristic time for ice in force-restore (s) ! REAL , PARAMETER :: XTAU_ICE = 330 0. ! ! Bare soil emissivity ! REAL , PARAMETER :: XEMISSOIL = 0.94 ! ! Minimum allowable volumetric liquid water content of soil ! REAL , PARAMETER :: XWGMIN = 0.001 ! (m3 m-3) ! ! Peters-Lidard et al. (JAS, 1998) from method of Johanssen (1975) ! thermal conductivity (option) parameters: ! REAL , PARAMETER :: XSPHSOIL = 73 3. ! J/(kg K) Soil specific heat REAL , PARAMETER :: XDRYWGHT = 270 0.0 ! kg/m3    Soil solids dry weight REAL , PARAMETER :: XCONDQRTZ = 7.7 ! W/(m K)  Quartz thermal conductivity REAL , PARAMETER :: XCONDOTH1 = 2.0 ! W/(m K)  Other thermal conductivity REAL , PARAMETER :: XCONDOTH2 = 3.0 ! W/(m K)  Other thermal conductivity REAL , PARAMETER :: XCONDWTR = 0.57 ! W/(m K)  Water thermal conductivity ! REAL , PARAMETER :: XOMRHO = 130 0. !Organic mater density (kg.m-3) REAL , PARAMETER :: XOMSPH = 192 6. !Organic mater specific heat              (J/(kg K)) REAL , PARAMETER :: XOMCONDDRY = 0.05 !Organic mater dry thermal conductivity   (W.m–1.K–1) REAL , PARAMETER :: XOMCONDSLD = 0.25 !Organic mater solid thermal conductivity (W.m–1.K–1) ! ! Maximum depth of the water table for soil thermal computation ! REAL , PARAMETER :: XWTD_MAXDEPTH = 10 0. !m ! ! Minimun depth of permafrost and limit area ! REAL , PARAMETER :: XPERMFRAC = 0.25 ! permafrost limit area (fraction) ! REAL , PARAMETER :: XPERMDEPTH = 1 2.0 ! permafrost depth (m) ! !-------------------------------------------------------------------------------- ! Vegetation radiative properties !-------------------------------------------------------------------------------- ! ! Wavelength between near-infra-red and visible parts of the solar spectra ! REAL , PARAMETER :: XRED_EDGE = 0.0000007 ! (m)   0.7 micro-m ! ! ! Wavelength between visible and UV parts of the solar spectra ! REAL , PARAMETER :: XUV_EDGE = 0.0000002 ! (m)   0.1 micro-m ! !-------------------------------------------------------------------------------- ! MEB: Multiple energy balance  parameters !-------------------------------------------------------------------------------- ! REAL , PARAMETER :: XFLXMAX = 500 0. ! [kg/(m**2*s)] !                        Maximum value of exchange coeffient !                        (should go to infinity, for some cases, i.e. when lai=>0) ! REAL , PARAMETER :: XLIMH = 2.0 ! m !                        Minimum forcing height above vegetation top (turbulence computations) ! ! Soil geometry if DF option !-------------------------------------------------------------------------------- ! INTEGER , PARAMETER :: NOPTIMLAYER = 14 REAL , DIMENSION ( NOPTIMLAYER ), PARAMETER :: XOPTIMGRID = & ( / 0.01 , 0.04 , 0.10 , 0.20 , 0.40 , 0.60 , 0.80 , 1.00 , 1.50 , 2.00 , 3.00 , 5.00 , 8.00 , 1 2.0 / ) ! !-------------------------------------------------------------------------------- ! END MODULE MODD_ISBA_PAR","tags":"","loc":"sourcefile/modd_isba_par.f90.html"},{"title":"spll_modi_ini_cturbs.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_INI_CTURBS Source Code spll_modi_ini_cturbs.f90 Source Code !auto_modi:spll_ini_cturbs.D MODULE MODI_INI_CTURBS INTERFACE SUBROUTINE INI_CTURBS END SUBROUTINE INI_CTURBS END INTERFACE END MODULE MODI_INI_CTURBS","tags":"","loc":"sourcefile/spll_modi_ini_cturbs.f90.html"},{"title":"modd_teb_irrign.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_TEB_IRRIG_n Source Code modd_teb_irrign.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################ MODULE MODD_TEB_IRRIG_n !     ################ ! !!****  *MODD_TEB_IRRIG_n - declaration of surface parameters for urban canopy !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       07/2006 ! !*       0.   DECLARATIONS !             ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE TEB_IRRIG_t ! LOGICAL :: LTEB_IRRIG ! flag to use irrigation for gardens or greenroofs LOGICAL :: LPAR_GD_IRRIG ! flag to use prescribed irrigation for gardens LOGICAL :: LPAR_GR_IRRIG ! flag to use prescribed irrigation for greenroofs LOGICAL :: LPAR_RD_IRRIG ! flag to use prescribed irrigation for roads REAL , POINTER , DIMENSION (:) :: XGD_START_MONTH ! gardens : start month for irrigation (included) REAL , POINTER , DIMENSION (:) :: XGD_END_MONTH ! gardens : end   month for irrigation (included) REAL , POINTER , DIMENSION (:) :: XGD_START_HOUR ! gardens : start solar hour for irrigation (included, hour) REAL , POINTER , DIMENSION (:) :: XGD_END_HOUR ! gardens : end   solar hour for irrigation (excluded, hour) REAL , POINTER , DIMENSION (:) :: XGD_24H_IRRIG ! gardens : total irrigation over 24 hours (kg/m2) REAL , POINTER , DIMENSION (:) :: XGR_START_MONTH ! greenroofs : start month for irrigation (included) REAL , POINTER , DIMENSION (:) :: XGR_END_MONTH ! greenroofs : end   month for irrigation (included) REAL , POINTER , DIMENSION (:) :: XGR_START_HOUR ! greenroofs : start solar hour for irrigation (included, hour) REAL , POINTER , DIMENSION (:) :: XGR_END_HOUR ! greenroofs : end   solar hour for irrigation (excluded, hour) REAL , POINTER , DIMENSION (:) :: XGR_24H_IRRIG ! greenroofs : total irrigation over 24 hours (kg/m2) REAL , POINTER , DIMENSION (:) :: XRD_START_MONTH ! roads : start month for irrigation (included) REAL , POINTER , DIMENSION (:) :: XRD_END_MONTH ! roads : end   month for irrigation (included) REAL , POINTER , DIMENSION (:) :: XRD_START_HOUR ! roads : start solar hour for irrigation (included, hour) REAL , POINTER , DIMENSION (:) :: XRD_END_HOUR ! roads : end   solar hour for irrigation (excluded, hour) REAL , POINTER , DIMENSION (:) :: XRD_24H_IRRIG ! roads : total irrigation over 24 hours (kg/m2) ! END TYPE TEB_IRRIG_t CONTAINS ! SUBROUTINE TEB_IRRIG_INIT ( YTEB_IRRIG ) TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: YTEB_IRRIG REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_IRRIG_N:TEB_IRRIG_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YTEB_IRRIG % XGD_START_MONTH ) NULLIFY ( YTEB_IRRIG % XGD_END_MONTH ) NULLIFY ( YTEB_IRRIG % XGD_START_HOUR ) NULLIFY ( YTEB_IRRIG % XGD_END_HOUR ) NULLIFY ( YTEB_IRRIG % XGD_24H_IRRIG ) NULLIFY ( YTEB_IRRIG % XGR_START_MONTH ) NULLIFY ( YTEB_IRRIG % XGR_END_MONTH ) NULLIFY ( YTEB_IRRIG % XGR_START_HOUR ) NULLIFY ( YTEB_IRRIG % XGR_END_HOUR ) NULLIFY ( YTEB_IRRIG % XGR_24H_IRRIG ) NULLIFY ( YTEB_IRRIG % XRD_START_MONTH ) NULLIFY ( YTEB_IRRIG % XRD_END_MONTH ) NULLIFY ( YTEB_IRRIG % XRD_START_HOUR ) NULLIFY ( YTEB_IRRIG % XRD_END_HOUR ) NULLIFY ( YTEB_IRRIG % XRD_24H_IRRIG ) YTEB_IRRIG % LTEB_IRRIG = . FALSE . YTEB_IRRIG % LPAR_GD_IRRIG = . FALSE . YTEB_IRRIG % LPAR_GR_IRRIG = . FALSE . YTEB_IRRIG % LPAR_RD_IRRIG = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_IRRIG_N:TEB_IRRIG_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE TEB_IRRIG_INIT END MODULE MODD_TEB_IRRIG_n","tags":"","loc":"sourcefile/modd_teb_irrign.f90.html"},{"title":"vslog.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines VSLOG Source Code vslog.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. SUBROUTINE VSLOG ( PA , PLOG , N ) ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! ! ! !   COMPUTES THE LOGARITHM IMPLICIT NONE INTEGER :: N REAL :: PA ( N ), PLOG ( N ) INTEGER :: J REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'VSLOG' , 0 , ZHOOK_HANDLE ) DO J = 1 , N PLOG ( J ) = LOG ( PA ( J )) END DO IF ( LHOOK ) CALL DR_HOOK ( 'VSLOG' , 1 , ZHOOK_HANDLE ) END","tags":"","loc":"sourcefile/vslog.f90.html"},{"title":"get_luout.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines GET_LUOUT Source Code get_luout.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE GET_LUOUT ( HPROGRAM , KLUOUT ) !     ####################################################### ! !!****  *GET_LUOUT* - routine to get output listing logical unit !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    01/2004 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! #ifdef SFX_LFI USE MODI_LFIGET_LUOUT #endif #ifdef SFX_MNH USE MODI_MNHGET_LUOUT #endif #ifdef SFX_ARO USE MODI_AROGET_LUOUT #endif ! IMPLICIT NONE ! ! !*       0.1   Declarations of arguments !              ------------------------- ! CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HPROGRAM ! program calling GROUND INTEGER , INTENT ( OUT ) :: KLUOUT ! Logical unit of output listing REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*       0.2   Declarations of local variables !              ------------------------------- ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'GET_LUOUT' , 0 , ZHOOK_HANDLE ) IF ( HPROGRAM == 'MESONH' ) THEN #ifdef SFX_MNH CALL MNHGET_LUOUT ( HPROGRAM , KLUOUT ) #endif ELSE IF ( HPROGRAM == 'AROME ' ) THEN #ifdef SFX_ARO CALL AROGET_LUOUT ( HPROGRAM , KLUOUT ) #endif ELSE IF ( HPROGRAM == 'LFI   ' ) THEN #ifdef SFX_LFI CALL LFIGET_LUOUT ( HPROGRAM , KLUOUT ) #endif ELSE KLUOUT = 10 END IF IF ( LHOOK ) CALL DR_HOOK ( 'GET_LUOUT' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE GET_LUOUT","tags":"","loc":"sourcefile/get_luout.f90.html"},{"title":"modd_flaken.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_FLAKE_n Source Code modd_flaken.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     #################### MODULE MODD_FLAKE_n !     #################### ! !!****  *MODD_FLAKE_n - declaration of surface parameters for the FLake model !!                      for inland water surfaces !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson  *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       01/2004 ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_TYPE_DATE_SURF ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! TYPE FLAKE_t ! !------------------------------------------------------------------------------------- ! General surface: !------------------------------------------------------------------------------------- ! REAL , POINTER , DIMENSION (:) :: XZS ! orography                     (m) REAL , POINTER , DIMENSION (:) :: XZ0 ! roughness length              (m) REAL , POINTER , DIMENSION (:) :: XUSTAR ! air friction velocity         (m/s) REAL , POINTER , DIMENSION (:) :: XEMIS ! water surface emissivity (NOT USED BY FLAKE) ! REAL , POINTER , DIMENSION (:,:) :: XCOVER ! fraction of each ecosystem    (-) !                                          ! F: no atmospheric layers below forcing level ! LOGICAL , POINTER , DIMENSION (:) :: LCOVER ! GCOVER(i)=T --> ith cover field is not 0. LOGICAL :: LSBL ! T: SBL scheme within the Surface Boundary Layer ! !------------------------------------------------------------------------------------- ! Date and time: !------------------------------------------------------------------------------------- ! TYPE ( DATE_TIME ) :: TTIME ! current date and time ! REAL :: XTSTEP ! time step ! REAL :: XOUT_TSTEP ! output writing time step ! !------------------------------------------------------------------------------------- ! FLake switches !------------------------------------------------------------------------------------- ! LOGICAL :: LSEDIMENTS ! flag to use or not the bottom sediments LOGICAL :: LSKINTEMP ! flag to use or not the skin temperature computation CHARACTER ( LEN = 3 ) :: CSNOW_FLK ! FLake snow scheme CHARACTER ( LEN = 5 ) :: CFLK_FLUX ! Type of flux computation CHARACTER ( LEN = 4 ) :: CFLK_ALB ! Type of albedo ! !------------------------------------------------------------------------------------- ! FLake parameters and variables !------------------------------------------------------------------------------------- ! REAL , POINTER , DIMENSION (:) :: XWATER_DEPTH ! Lake depth (m) REAL , POINTER , DIMENSION (:) :: XWATER_FETCH ! Lake fetch (m) REAL , POINTER , DIMENSION (:) :: XT_BS ! Temperature at the outer edge of the thermally !       active layer of the bottom sediments [K] REAL , POINTER , DIMENSION (:) :: XDEPTH_BS ! Depth of the thermally active layer of the !       bottom sediments [m] REAL , POINTER , DIMENSION (:) :: XCORIO ! The Coriolis parameter [s&#94;{-1}] REAL , POINTER , DIMENSION (:) :: XDIR_ALB ! Water surface direct albedo REAL , POINTER , DIMENSION (:) :: XSCA_ALB ! Water surface diffuse albedo REAL , POINTER , DIMENSION (:) :: XICE_ALB ! Ice surface albedo (for ESM coupling) REAL , POINTER , DIMENSION (:) :: XSNOW_ALB ! Snow surface albedo REAL , POINTER , DIMENSION (:) :: XEXTCOEF_WATER ! Extinction coefficient for the water [m&#94;{-1}] REAL , POINTER , DIMENSION (:) :: XEXTCOEF_ICE ! Extinction coefficient for the ice [m&#94;{-1}] REAL , POINTER , DIMENSION (:) :: XEXTCOEF_SNOW ! Extinction coefficient for the snow [m&#94;{-1}] REAL , POINTER , DIMENSION (:) :: XT_SNOW ! Temperature at the air-snow interface [K] REAL , POINTER , DIMENSION (:) :: XT_ICE ! Temperature at the snow-ice or air-ice !        interface [K] REAL , POINTER , DIMENSION (:) :: XT_MNW ! Mean temperature of the water column [K] REAL , POINTER , DIMENSION (:) :: XT_WML ! Mixed-layer temperature [K] REAL , POINTER , DIMENSION (:) :: XT_BOT ! Temperature at the water-bottom sediment !        interface [K] REAL , POINTER , DIMENSION (:) :: XT_B1 ! Temperature at the bottom of the upper !        layer of the sediments [K] REAL , POINTER , DIMENSION (:) :: XCT ! Shape factor (thermocline) REAL , POINTER , DIMENSION (:) :: XH_SNOW ! Snow thickness [m] REAL , POINTER , DIMENSION (:) :: XH_ICE ! Ice thickness [m] REAL , POINTER , DIMENSION (:) :: XH_ML ! Thickness of the mixed-layer [m] REAL , POINTER , DIMENSION (:) :: XH_B1 ! Thickness of the upper layer of bottom sediments [m] ! REAL , POINTER , DIMENSION (:) :: XTS ! surface temperature  (K) ! (water or ice or snow) ! !------------------------------------------------------------------------------------- ! Coupling field for Earth system model !------------------------------------------------------------------------------------- ! REAL , POINTER , DIMENSION (:) :: XCPL_FLAKE_EVAP ! Evaporation for ESM coupling REAL , POINTER , DIMENSION (:) :: XCPL_FLAKE_RAIN ! Rainfall for ESM coupling REAL , POINTER , DIMENSION (:) :: XCPL_FLAKE_SNOW ! Snowfall for ESM coupling ! END TYPE FLAKE_t ! !------------------------------------------------------------------------------------- ! CONTAINS ! !------------------------------------------------------------------------------------- ! ! ! ! ! !------------------------------------------------------------------------------------- ! SUBROUTINE FLAKE_INIT ( YFLAKE ) TYPE ( FLAKE_t ), INTENT ( INOUT ) :: YFLAKE REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_FLAKE_N:FLAKE_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YFLAKE % XZS ) NULLIFY ( YFLAKE % XZ0 ) NULLIFY ( YFLAKE % XUSTAR ) NULLIFY ( YFLAKE % XCOVER ) NULLIFY ( YFLAKE % LCOVER ) NULLIFY ( YFLAKE % XEMIS ) NULLIFY ( YFLAKE % XWATER_DEPTH ) NULLIFY ( YFLAKE % XWATER_FETCH ) NULLIFY ( YFLAKE % XT_BS ) NULLIFY ( YFLAKE % XDEPTH_BS ) NULLIFY ( YFLAKE % XCORIO ) NULLIFY ( YFLAKE % XDIR_ALB ) NULLIFY ( YFLAKE % XSCA_ALB ) NULLIFY ( YFLAKE % XICE_ALB ) NULLIFY ( YFLAKE % XSNOW_ALB ) NULLIFY ( YFLAKE % XEXTCOEF_WATER ) NULLIFY ( YFLAKE % XEXTCOEF_ICE ) NULLIFY ( YFLAKE % XEXTCOEF_SNOW ) NULLIFY ( YFLAKE % XT_SNOW ) NULLIFY ( YFLAKE % XT_ICE ) NULLIFY ( YFLAKE % XT_MNW ) NULLIFY ( YFLAKE % XT_WML ) NULLIFY ( YFLAKE % XT_BOT ) NULLIFY ( YFLAKE % XT_B1 ) NULLIFY ( YFLAKE % XCT ) NULLIFY ( YFLAKE % XH_SNOW ) NULLIFY ( YFLAKE % XH_ICE ) NULLIFY ( YFLAKE % XH_ML ) NULLIFY ( YFLAKE % XH_B1 ) NULLIFY ( YFLAKE % XTS ) NULLIFY ( YFLAKE % XCPL_FLAKE_EVAP ) NULLIFY ( YFLAKE % XCPL_FLAKE_RAIN ) NULLIFY ( YFLAKE % XCPL_FLAKE_SNOW ) YFLAKE % LSBL = . FALSE . YFLAKE % XTSTEP = 0. YFLAKE % XOUT_TSTEP = 0. YFLAKE % LSEDIMENTS = . FALSE . YFLAKE % LSKINTEMP = . FALSE . YFLAKE % CSNOW_FLK = '   ' YFLAKE % CFLK_ALB = '    ' YFLAKE % CFLK_FLUX = '     ' IF ( LHOOK ) CALL DR_HOOK ( \"MODD_FLAKE_N:FLAKE_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE FLAKE_INIT ! !------------------------------------------------------------------------------------- ! ! !------------------------------------------------------------------------------------- ! END MODULE MODD_FLAKE_n","tags":"","loc":"sourcefile/modd_flaken.f90.html"},{"title":"modd_emis_gr_fieldn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_EMIS_GR_FIELD_n Source Code modd_emis_gr_fieldn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ########################### MODULE MODD_EMIS_GR_FIELD_n !     ########################### ! !!****  *MODD_EMIS_GR_FIELD_n* - declaration of chemical emission data arrays !!                               for model n !!    PURPOSE !!    ------- !       The purpose of this declarative module is to specify  the !     chemical emission data arrays for model n. ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH (module MODD_EMIS_GR_FIELD) !! !! !!    AUTHOR !!    ------ !!      D. Gazen   *L.A.* !! !!    MODIFICATIONS !!    ------------- !!      Original    08/03/2001 !!      01/12/03    (D.Gazen) change emissions handling for surf. externalization !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_TYPE_EFUTIL ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE EMIS_GR_FIELD_t ! ! INTEGER :: NEMIS_GR_NBR !                          ! number of chemical pgd fields chosen by user CHARACTER ( LEN = 3 ) , DIMENSION (:), POINTER :: CEMIS_GR_AREA !                          ! areas where chemical pgd fields are defined !                          ! 'ALL' : everywhere !                          ! 'SEA' : where sea exists !                          ! 'LAN' : where land exists !                          ! 'WAT' : where inland water exists !                          ! 'NAT' : where natural or agricultural areas exist !                          ! 'TWN' : where town areas exist !                          ! 'STR' : where streets are present !                          ! 'BLD' : where buildings are present !                          ! CHARACTER ( LEN = 40 ), DIMENSION (:), POINTER :: CEMIS_GR_NAME !                          ! name of the chemical pgd fields (emitted species) ! INTEGER , DIMENSION (:), POINTER :: NEMIS_GR_TIME ! emission time ! REAL , DIMENSION (:,:,:), POINTER :: XEMIS_GR_FIELDS ! emission pgd fields values ! INTEGER :: NEMISPEC_NBR ! Number of chemical species ! TYPE ( EMISSVAR_T ), DIMENSION (:), POINTER :: TSEMISS ! Offline emission struct array ! TYPE ( PRONOSVAR_T ), POINTER :: TSPRONOSLIST ! Head pointer on pronostic !                                                              variables list !------------------------------------------------------------------------------- ! END TYPE EMIS_GR_FIELD_t CONTAINS ! SUBROUTINE EMIS_GR_FIELD_INIT ( YEMIS_GR_FIELD ) TYPE ( EMIS_GR_FIELD_t ), INTENT ( INOUT ) :: YEMIS_GR_FIELD REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_EMIS_GR_FIELD_N:EMIS_GR_FIELD_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YEMIS_GR_FIELD % CEMIS_GR_AREA ) NULLIFY ( YEMIS_GR_FIELD % CEMIS_GR_NAME ) NULLIFY ( YEMIS_GR_FIELD % NEMIS_GR_TIME ) NULLIFY ( YEMIS_GR_FIELD % XEMIS_GR_FIELDS ) YEMIS_GR_FIELD % NEMIS_GR_NBR = 0 YEMIS_GR_FIELD % NEMISPEC_NBR = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_EMIS_GR_FIELD_N:EMIS_GR_FIELD_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE EMIS_GR_FIELD_INIT END MODULE MODD_EMIS_GR_FIELD_n","tags":"","loc":"sourcefile/modd_emis_gr_fieldn.f90.html"},{"title":"spll_modi_surface_cd.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_SURFACE_CD Source Code spll_modi_surface_cd.f90 Source Code !auto_modi:spll_surface_cd.D MODULE MODI_SURFACE_CD INTERFACE SUBROUTINE SURFACE_CD ( PRI , PZREF , PUREF , PZ0EFF , PZ0H , & PCD , PCDN ) IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PRI ! Richardson number REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the wind REAL , DIMENSION (:), INTENT ( IN ) :: PZ0EFF ! roughness length for momentum REAL , DIMENSION (:), INTENT ( IN ) :: PZ0H ! roughness length for heat REAL , DIMENSION (:), INTENT ( OUT ) :: PCD ! drag coefficient for momentum REAL , DIMENSION (:), INTENT ( OUT ) :: PCDN ! neutral drag coefficient for momentum END SUBROUTINE SURFACE_CD END INTERFACE END MODULE MODI_SURFACE_CD","tags":"","loc":"sourcefile/spll_modi_surface_cd.f90.html"},{"title":"modd_flood_par.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_FLOOD_PAR Source Code modd_flood_par.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ###################### MODULE MODD_FLOOD_PAR !     ###################### ! !!****  *MODD_FLOOD_PAR* - declaration of parameters related !!                          to the flood parameterization !! !!    PURPOSE !!    ------- !       The purpose of this declarative module is to specify  the !     parameters related to the surface parameterization of flood. ! !! !! !! !!    AUTHOR !!    ------ !!      B. Decharme   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       02/2010 !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! IMPLICIT NONE ! REAL , SAVE :: XCFFV !                   Coefficient for calculation of floodplain fraction over vegetation ! REAL , SAVE :: XZ0FLOOD !                   Roughness length for flood (m) ! !------------------------------------------------------------------------------- ! END MODULE MODD_FLOOD_PAR","tags":"","loc":"sourcefile/modd_flood_par.f90.html"},{"title":"urban_exch_coef.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines URBAN_EXCH_COEF Source Code urban_exch_coef.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE URBAN_EXCH_COEF ( HZ0H , PZ0_O_Z0H , PTG , PQS , PEXNS , PEXNA , PTA , PQA , & PZREF , PUREF , PVMOD , PZ0 , & PRI , PCD , PCDN , PAC , PRA , PCH ) !          ####################################################################### ! !!****  *URBAN_DRAG* !! !!    PURPOSE !!    ------- ! !     Computes the surface drag coefficients over roof, road or town !     according several scientific formulations ! ! !!**  METHOD !!    ------ ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    01/2009    from urban_drag.f90 (modified by S.  Leroyer at CMC) !         01/2009 (S. Leroyer) option (HZ0H) for z0h applied on roof, road and town !!      B. Decharme    06/2009 limitation of Ri !!      B. Decharme    09/2009 limitation of Ri in surface_ri.F90 ! !------------------------------------------------------------------------------- USE MODI_SURFACE_RI USE MODI_SURFACE_CD USE MODI_SURFACE_AERO_COND USE MODI_WIND_THRESHOLD ! USE MODD_CSTS , ONLY : XKARMAN ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! USE MODI_FLXSURF3BX ! IMPLICIT NONE ! CHARACTER ( LEN = 6 ) :: HZ0H ! TEB option for z0h roof & road REAL , INTENT ( IN ) :: PZ0_O_Z0H ! z0/z0h ratio used in Mascart (1995) REAL , DIMENSION (:), INTENT ( IN ) :: PTG ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PQS ! surface specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PEXNA ! exner function ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind ! REAL , DIMENSION (:), INTENT ( IN ) :: PZ0 ! roughness length for momentum REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first ! atmospheric level REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the wind !                                             ! NOTE this is different from ZZREF !                                             ! ONLY in stand-alone/forced mode, !                                             ! NOT when coupled to a model (MesoNH) REAL , DIMENSION (:), INTENT ( OUT ) :: PRI ! Richardson number ! REAL , DIMENSION (:), INTENT ( OUT ) :: PCD ! drag coefficient for momentum REAL , DIMENSION (:), INTENT ( OUT ) :: PCDN ! neutral drag coefficient for momentum REAL , DIMENSION (:), INTENT ( OUT ) :: PAC ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PRA ! aerodynamical resistance REAL , DIMENSION (:), INTENT ( OUT ) :: PCH ! drag coefficient for heat ! !* local variables ! REAL , DIMENSION ( SIZE ( PZ0 )) :: ZZ0H ! roughness length for heat !* BRUT82 & KAND07 cases REAL , DIMENSION ( SIZE ( PTA )) :: cmu , ctu , rib , ftemp , fvap , ilmo ! temporary var for REAL , DIMENSION ( SIZE ( PTA )) :: ue , fcor , hBL , lzz0 , lzz0t , fm , fh ! flxsurf3 REAL , DIMENSION ( SIZE ( PTA )) :: z0h_roof , z0h_town , z0h_road ! local thermal roughness REAL , DIMENSION ( SIZE ( PTA )) :: zustar , zta , ztg REAL , DIMENSION ( SIZE ( PTA )) :: ZVMOD ! wind INTEGER N ! !* MASC95 case REAL , DIMENSION ( SIZE ( PTA )) :: ZDIRCOSZW ! orography slope cosine REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! !*      1.     Mascart 1995 exchange coefficients !              ---------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_EXCH_COEF' , 0 , ZHOOK_HANDLE ) IF ( HZ0H == 'MASC95' ) THEN ! ZZ0H = PZ0 / PZ0_O_Z0H ! fixed ratio for MASC95 ZDIRCOSZW = 1. ! no orography slope effect taken into account in TEB ! CALL SURFACE_RI ( PTG , PQS , PEXNS , PEXNA , PTA , PQA , & PZREF , PUREF , ZDIRCOSZW , PVMOD , PRI ) ! CALL SURFACE_CD ( PRI , PZREF , PUREF , PZ0 , ZZ0H , PCD , PCDN ) ! CALL SURFACE_AERO_COND ( PRI , PZREF , PUREF , PVMOD , PZ0 , ZZ0H , PAC , PRA , PCH ) ! ! !*      2.     Brutsaert 1982  or Kanda 2007 exchange coefficients !              --------------------------------------------------- ! ELSEIF ( HZ0H == 'BRUT82' . OR . HZ0H == 'KAND07' ) THEN ! initialisations fcor (:) = 1.0372462E-04 !RJ: can be removed N = SIZE ( PTA ) ! ! Set a minimum threshold to the wind ZVMOD (:) = WIND_THRESHOLD ( PVMOD (:), PUREF (:)) ! ! First guess of u* ZUSTAR (:) = 0.4 * ZVMOD (:) / LOG ( PUREF / PZ0 (:) ) ! IF ( HZ0H == 'KAND07' ) THEN ! Kanda 2007 ZZ0H (:) = PZ0 (:) * 7.4 * EXP ( - 1.29 * ( PZ0 (:) * zustar (:) / 1.461e-5 ) ** 0.25 ) ELSEIF ( HZ0H == 'BRUT82' ) THEN ! Brutsaert 1982 ZZ0H (:) = PZ0 (:) * 7.4 * EXP ( - 2.46 * ( PZ0 (:) * zustar (:) / 1.461e-5 ) ** 0.25 ) ENDIF ZTA = PTA / PEXNA ZTG = PTG / PEXNS CALL FLXSURF3BX ( cmu , ctu , PRI , ftemp , fvap , ilmo , & ue , fcor , ZTA , PQA , & PUREF , PZREF , ZVMOD , ZTG , PQS ,& hBL , PZ0 , ZZ0H , & lzz0 , lzz0t , fm , fh , N ) ! PCD (:) = ( cmu (:) / ue (:)) ** 2 PCDN (:) = ( XKARMAN / LOG ( PUREF (:) / PZ0 (:))) ** 2 PAC (:) = ( cmu (:) * ctu (:) / ue (:) ** 2 ) * ZVMOD (:) PRA (:) = 1. / PAC (:) PCH (:) = 1. / ( PRA (:) * ZVMOD (:)) ! END IF IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_EXCH_COEF' , 1 , ZHOOK_HANDLE ) END SUBROUTINE URBAN_EXCH_COEF","tags":"","loc":"sourcefile/urban_exch_coef.f90.html"},{"title":"modd_surf_par.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_SURF_PAR Source Code modd_surf_par.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !#################### MODULE MODD_SURF_PAR !#################### ! !!****  *MODD_SURF_PAR - declaration of surface parameters !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       02/2004 !!      J.Escobar     06/2013  for REAL4/8 add EPSILON management ! !*       0.   DECLARATIONS !             ------------ ! ! IMPLICIT NONE ! !----------------------------------------------------------------------------------------------------- INTEGER :: NVERSION ! surface version INTEGER :: NBUGFIX ! bugfix number of this version ! #ifndef SFX_MNH REAL , PARAMETER :: XUNDEF = 1.E+20 #else #ifdef MNH_MPI_DOUBLE_PRECISION REAL , PARAMETER :: XUNDEF = 1.E+20 ! HUGE(XUNDEF) ! Z'7FFFFFFFFFFFFFFF' !  undefined value #else REAL , PARAMETER :: XUNDEF = 1.E+6 ! HUGE(XUNDEF) ! Z'7FBFFFFF' ! undefined value #endif #endif INTEGER , PARAMETER :: NUNDEF = 1E+9 !  HUGE(NUNDEF) !  undefined value REAL , PARAMETER :: XSURF_EPSILON = EPSILON ( XSURF_EPSILON ) ! minimum REAL , PARAMETER :: XSURF_HUGE = HUGE ( XSURF_HUGE ) REAL , PARAMETER :: XSURF_TINY = TINY ( XSURF_TINY ) !----------------------------------------------------------------------------------------------------- ! END MODULE MODD_SURF_PAR","tags":"","loc":"sourcefile/modd_surf_par.f90.html"},{"title":"modd_sson.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_SSO_n Source Code modd_sson.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     #################### MODULE MODD_SSO_n !     ###################### ! !!****  *MODD_SSO - declaration of surface parameters related to orography !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson    *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       01/2004 ! !*       0.   DECLARATIONS !             ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! ! utilisé uniquement tel quel. TYPE SSO_t ! !----------------------------------------------------------------------------------------------------- ! ! Type of roughness ! CHARACTER ( LEN = 4 ) :: CROUGH ! type of orographic roughness !                              ! 'NONE' ! 'Z01D' ! 'Z04D' ! 'BE04' ! REAL , DIMENSION (:), POINTER :: XZ0EFFJPDIR ! heading of J direction (deg from N clockwise) ! REAL , DIMENSION (:), POINTER :: XSSO_SLOPE ! slope of S.S.O. REAL , DIMENSION (:), POINTER :: XSSO_ANIS ! anisotropy of S.S.O. REAL , DIMENSION (:), POINTER :: XSSO_DIR ! direction of S.S.O. (deg from N clockwise) REAL , DIMENSION (:), POINTER :: XSSO_STDEV ! S.S.O. standard deviation           (m) ! REAL , DIMENSION (:), POINTER :: XAVG_ZS ! averaged orography                      (m) REAL , DIMENSION (:), POINTER :: XSIL_ZS ! silhouette orography                    (m) REAL , DIMENSION (:), POINTER :: XMAX_ZS ! maximum subgrid orography               (m) REAL , DIMENSION (:), POINTER :: XMIN_ZS ! minimum subgrid orography               (m) ! Zo threshold REAL :: XFRACZ0 ! Z0=Min(Z0, Href/XFRACZ0) REAL :: XCOEFBE ! Beljaars coefficient ! !----------------------------------------------------------------------------------------------------- ! ! Subgrid orography parameters ! REAL , DIMENSION (:), POINTER :: XAOSIP , XAOSIM , XAOSJP , XAOSJM ! directional A/S quantities in 4 coordinate directions ! (IP: i index up;  IM: i index down;  JP: j index up;  JM: j index down) ! They are used in soil routines to compute effective roughness length ! REAL , DIMENSION (:), POINTER :: XHO2IP , XHO2IM , XHO2JP , XHO2JM ! directional h/2 quantities in 4 coordinate directions ! (IP: i index up;  IM: i index down;  JP: j index up;  JM: j index down) ! They are used in soil routines to compute effective roughness length ! REAL , DIMENSION (:), POINTER :: XZ0REL ! relief roughness length     (m) ! ! utilisé par l'atmosphère ! REAL , DIMENSION (:), POINTER :: XZ0EFFIP , XZ0EFFIM , XZ0EFFJP , XZ0EFFJM ! directional total roughness lenghts in 4 coordinate directions ! (IP: i index up;  IM: i index down;  JP: j index up;  JM: j index down) ! END TYPE SSO_t ! ! utilisé par isba ! TYPE SSO_NP_t ! TYPE ( SSO_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE SSO_NP_t ! CONTAINS ! SUBROUTINE SSO_INIT ( YSSO ) TYPE ( SSO_t ), INTENT ( INOUT ) :: YSSO REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SSO_N:SSO_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YSSO % XZ0EFFJPDIR ) NULLIFY ( YSSO % XSSO_SLOPE ) NULLIFY ( YSSO % XSSO_ANIS ) NULLIFY ( YSSO % XSSO_DIR ) NULLIFY ( YSSO % XSSO_STDEV ) NULLIFY ( YSSO % XAVG_ZS ) NULLIFY ( YSSO % XSIL_ZS ) NULLIFY ( YSSO % XMAX_ZS ) NULLIFY ( YSSO % XMIN_ZS ) NULLIFY ( YSSO % XAOSIP ) NULLIFY ( YSSO % XAOSIM ) NULLIFY ( YSSO % XAOSJP ) NULLIFY ( YSSO % XAOSJM ) NULLIFY ( YSSO % XHO2IP ) NULLIFY ( YSSO % XHO2IM ) NULLIFY ( YSSO % XHO2JP ) NULLIFY ( YSSO % XHO2JM ) NULLIFY ( YSSO % XZ0REL ) NULLIFY ( YSSO % XZ0EFFIP ) NULLIFY ( YSSO % XZ0EFFIM ) NULLIFY ( YSSO % XZ0EFFJP ) NULLIFY ( YSSO % XZ0EFFJM ) YSSO % CROUGH = ' ' YSSO % XFRACZ0 = 2. YSSO % XCOEFBE = 2. IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SSO_N:SSO_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE SSO_INIT ! SUBROUTINE SSO_NP_INIT ( YSSO_NP , KPATCH ) TYPE ( SSO_NP_t ), INTENT ( INOUT ) :: YSSO_NP INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SSO_N:SSO_NP_INIT\" , 0 , ZHOOK_HANDLE ) ! IF ( ASSOCIATED ( YSSO_NP % AL )) THEN DO JP = 1 , KPATCH CALL SSO_INIT ( YSSO_NP % AL ( JP )) ENDDO DEALLOCATE ( YSSO_NP % AL ) ELSE ALLOCATE ( YSSO_NP % AL ( KPATCH )) DO JP = 1 , KPATCH CALL SSO_INIT ( YSSO_NP % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SSO_N:SSO_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE SSO_NP_INIT ! END MODULE MODD_SSO_n","tags":"","loc":"sourcefile/modd_sson.f90.html"},{"title":"spll_modi_window_shading_availability.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_WINDOW_SHADING_AVAILABILITY Source Code spll_modi_window_shading_availability.f90 Source Code !auto_modi:spll_window_shading_availability.D MODULE MODI_WINDOW_SHADING_AVAILABILITY INTERFACE SUBROUTINE WINDOW_SHADING_AVAILABILITY ( OSHADE , PTI_BLD , PTCOOL_TARGET , OSHADE_POSSIBLE ) IMPLICIT NONE LOGICAL , DIMENSION (:), INTENT ( IN ) :: OSHADE ! TRUE if solar protections exist REAL , DIMENSION (:), INTENT ( IN ) :: PTI_BLD ! indoor air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTCOOL_TARGET ! Cooling setpoint of HVAC system LOGICAL , DIMENSION (:), INTENT ( OUT ) :: OSHADE_POSSIBLE ! TRUE if solar protections END SUBROUTINE WINDOW_SHADING_AVAILABILITY END INTERFACE END MODULE MODI_WINDOW_SHADING_AVAILABILITY","tags":"","loc":"sourcefile/spll_modi_window_shading_availability.f90.html"},{"title":"modd_type_snow.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_TYPE_SNOW Source Code modd_type_snow.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ##################### MODULE MODD_TYPE_SNOW !     ##################### ! !!****  *MODD_TYPE_SNOW* - declaration of surface snow types !! !!    PURPOSE !!    ------- !       The purpose of this declarative module is to define !      the surface snow types. ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      NONE !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      P. Jabouille   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    20/01/99 !!      F. solmon   01/06/00 adaptation for patch approach  (+1D) !!      V. Masson   01/2004  surface externalization !!      P. Samuelsson 07/2014 additional snow albedos !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! ! IMPLICIT NONE ! TYPE SURF_SNOW ! CHARACTER ( LEN = 3 ) :: SCHEME ! snow scheme used INTEGER :: NLAYER ! number of layers ! REAL , DIMENSION (:,:), POINTER :: DEPTH REAL , DIMENSION (:,:), POINTER :: WSNOW ! snow (& liq. water) content (kg/m2) REAL , DIMENSION (:,:), POINTER :: HEAT ! heat content                (J/m2) REAL , DIMENSION (:,:), POINTER :: T ! temperature '1-L' REAL , DIMENSION (:,:), POINTER :: TEMP ! temperature '3-L' (K) REAL , DIMENSION (:,:), POINTER :: RHO ! density REAL , DIMENSION (:), POINTER :: ALB ! snow surface albedo REAL , DIMENSION (:), POINTER :: ALBVIS ! snow surface visible albedo REAL , DIMENSION (:), POINTER :: ALBNIR ! snow surface near-infrared albedo REAL , DIMENSION (:), POINTER :: ALBFIR ! snow surface far-infrared albedo REAL , DIMENSION (:), POINTER :: EMIS ! snow surface emissivity REAL , DIMENSION (:), POINTER :: TS ! snow surface temperature REAL , DIMENSION (:,:), POINTER :: GRAN1 ! snow grain parameter 1 REAL , DIMENSION (:,:), POINTER :: GRAN2 ! snow grain parameter 2 REAL , DIMENSION (:,:), POINTER :: HIST ! snow historical variable !                                               (non dendritic case) REAL , DIMENSION (:,:), POINTER :: AGE ! snow grain age END TYPE SURF_SNOW ! TYPE NSURF_SNOW ! TYPE ( SURF_SNOW ), DIMENSION (:), POINTER :: AL ! END TYPE NSURF_SNOW ! CONTAINS ! SUBROUTINE TYPE_SNOW_INIT ( YSURF_SNOW ) ! TYPE ( SURF_SNOW ), INTENT ( INOUT ) :: YSURF_SNOW ! YSURF_SNOW % DEPTH => NULL () YSURF_SNOW % WSNOW => NULL () YSURF_SNOW % HEAT => NULL () YSURF_SNOW % T => NULL () YSURF_SNOW % TEMP => NULL () YSURF_SNOW % RHO => NULL () YSURF_SNOW % ALB => NULL () YSURF_SNOW % ALBVIS => NULL () YSURF_SNOW % ALBNIR => NULL () YSURF_SNOW % ALBFIR => NULL () YSURF_SNOW % EMIS => NULL () YSURF_SNOW % TS => NULL () YSURF_SNOW % GRAN1 => NULL () YSURF_SNOW % GRAN2 => NULL () YSURF_SNOW % HIST => NULL () YSURF_SNOW % AGE => NULL () ! END SUBROUTINE TYPE_SNOW_INIT ! END MODULE MODD_TYPE_SNOW","tags":"","loc":"sourcefile/modd_type_snow.f90.html"},{"title":"spll_modi_isba_albedo.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_ISBA_ALBEDO Source Code spll_modi_isba_albedo.f90 Source Code !auto_modi:spll_isba_albedo.D MODULE MODI_ISBA_ALBEDO INTERFACE SUBROUTINE ISBA_ALBEDO ( PEK , OTR_ML , OMEB , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & PFALB , PFFV , PFFG , PGLOBAL_SW , & PMEB_SCA_SW , PALBNIR_TVEG , PALBVIS_TVEG , & PALBNIR_TSOIL , PALBVIS_TSOIL ) USE MODD_ISBA_n , ONLY : ISBA_PE_t IMPLICIT NONE LOGICAL , INTENT ( IN ) :: OTR_ML LOGICAL , INTENT ( IN ) :: OMEB ! True = patch with multi-energy balance REAL , DIMENSION (:,:), INTENT ( IN ) :: PDIR_SW ! direct incoming solar radiation REAL , DIMENSION (:,:), INTENT ( IN ) :: PSCA_SW ! diffus incoming solar radiation REAL , DIMENSION (:) , INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) INTEGER , INTENT ( IN ) :: KSW ! number of short-wave spectral bands TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK REAL , DIMENSION (:) , INTENT ( IN ) :: PFALB ! Floodplain albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PFFV ! Floodplain fraction over vegetation REAL , DIMENSION (:) , INTENT ( IN ) :: PFFG ! Floodplain fraction over the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PGLOBAL_SW ! global incoming SW rad. REAL , DIMENSION (:) , INTENT ( OUT ) :: PMEB_SCA_SW ! diffuse incoming SW rad. REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBNIR_TVEG ! nearIR  veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBVIS_TVEG ! visible veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBNIR_TSOIL ! nearIR  soil tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBVIS_TSOIL ! visible soil tot albedo END SUBROUTINE ISBA_ALBEDO END INTERFACE END MODULE MODI_ISBA_ALBEDO","tags":"","loc":"sourcefile/spll_modi_isba_albedo.f90.html"},{"title":"spll_modi_add_forecast_to_date_surf.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_ADD_FORECAST_TO_DATE_SURF Source Code spll_modi_add_forecast_to_date_surf.f90 Source Code !auto_modi:spll_add_forecast_to_date_surf.D MODULE MODI_ADD_FORECAST_TO_DATE_SURF INTERFACE SUBROUTINE ADD_FORECAST_TO_DATE_SURF ( KYEAR , KMONTH , KDAY , PSEC ) IMPLICIT NONE INTEGER , INTENT ( INOUT ) :: KYEAR ! year of date INTEGER , INTENT ( INOUT ) :: KMONTH ! month of date INTEGER , INTENT ( INOUT ) :: KDAY ! day of date REAL , INTENT ( INOUT ) :: PSEC ! number of seconds since date at 00 UTC END SUBROUTINE ADD_FORECAST_TO_DATE_SURF END INTERFACE END MODULE MODI_ADD_FORECAST_TO_DATE_SURF","tags":"","loc":"sourcefile/spll_modi_add_forecast_to_date_surf.f90.html"},{"title":"modd_type_efutil.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_TYPE_EFUTIL Source Code modd_type_efutil.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ####################### MODULE MODD_TYPE_EFUTIL !     ####################### ! !!****  *MODD_TYPE_EFUTIL* - declaration of chemistry emissions types !! !!    PURPOSE !!    ------- !       The purpose of this declarative module is to define !       the types of variables necessary for chemistry emissions. ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      NONE !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      D. Gazen & C. Mari   *LA* !! !!    MODIFICATIONS !!    ------------- !!      Original    31/10/00 !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! ! IMPLICIT NONE ! ! INTEGER , PARAMETER :: JPNBCOEFFMAX = 50 ! TYPE EMISSVAR_T CHARACTER ( len = 32 ) :: CNAME ! Name of the EMISSION ! INTEGER :: NTX ! Current index on array !                                          NETIMES (needed in interpolation) ! INTEGER :: NPX ! Index to use when t > tmax (periodic) ! INTEGER , DIMENSION (:), POINTER :: NETIMES ! Emission times (ordered) ! INTEGER :: NDX ! Current index on array XEMISDATA ! REAL , DIMENSION (:,:), POINTER :: XEMISDATA ! Emission data array !                                              with size (X*Y,NWS) ! LOGICAL :: LREAD ! TRUE if emission data reading is needed ! INTEGER :: NWS ! Read window size for I/O ! REAL , DIMENSION (:), POINTER :: XFWORK ! Time interpolated emission data !                                           with size (X) END TYPE EMISSVAR_T ! TYPE PRONOSVAR_T INTEGER :: NAMINDEX ! pronostic name is CNAMES(NAMINDEX) ! INTEGER :: NBCOEFF ! number of coeff in agreg. equation ! REAL , DIMENSION ( JPNBCOEFFMAX ) :: XCOEFF ! agregation coeff array ! INTEGER , DIMENSION ( JPNBCOEFFMAX ) :: NEFINDEX ! array of index on the EMISSVAR_T array ! TYPE ( PRONOSVAR_T ), POINTER :: NEXT ! To build a PRONOSVAR_T link list END TYPE PRONOSVAR_T ! END MODULE MODD_TYPE_EFUTIL !","tags":"","loc":"sourcefile/modd_type_efutil.f90.html"},{"title":"mode_psychro.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODE_PSYCHRO Source Code mode_psychro.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !################## MODULE MODE_PSYCHRO !################## ! !!****  *MODE_PSYCHRO* - !! !!    PURPOSE !!    ------- ! ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!       NONE !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !! !!    MODIFICATIONS !!    ------------- !!      Original    12/04/11 !!      J.Escobar   11/13 :  remove space in ELSEWHERE statement ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! interface PE_FROM_PQ module procedure PE_FROM_PQ_0D module procedure PE_FROM_PQ_1D end interface PE_FROM_PQ interface TD_FROM_TQ module procedure TD_FROM_TQ_0D module procedure TD_FROM_TQ_1D end interface TD_FROM_TQ interface RV_FROM_TPTWB module procedure RV_FROM_TPTWB_0D module procedure RV_FROM_TPTWB_1D end interface RV_FROM_TPTWB interface TWB_FROM_TPQ module procedure TWB_FROM_TPQ_0D module procedure TWB_FROM_TPQ_1D end interface TWB_FROM_TPQ INTERFACE ENTH_FN_T_Q MODULE PROCEDURE ENTH_FN_T_Q END INTERFACE ENTH_FN_T_Q INTERFACE Q_FN_T_ENTH MODULE PROCEDURE Q_FN_T_ENTH END INTERFACE Q_FN_T_ENTH contains !PE_FROM_PQ !---------- function PE_FROM_PQ_0D ( PP , PQ ) RESULT ( PE ) !arguments and result REAL , INTENT ( IN ) :: PP !atmos. pressure (Pa) REAL , INTENT ( IN ) :: PQ !specific humidity (kg/kg) REAL :: PE !water vapour pressure (Pa) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:PE_FROM_PQ_0D' , 0 , ZHOOK_HANDLE ) PE = PQ * PP / ( 0.622 + 0.378 * PQ ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:PE_FROM_PQ_0D' , 1 , ZHOOK_HANDLE ) end function PE_FROM_PQ_0D function PE_FROM_PQ_1D ( PP , PQ ) RESULT ( PE ) !arguments and result REAL , DIMENSION (:), INTENT ( IN ) :: PP !atmos. pressure (Pa) REAL , DIMENSION (:), INTENT ( IN ) :: PQ !specific humidity (kg/kg) REAL , DIMENSION ( SIZE ( PQ )) :: PE !water vapour pressure (Pa) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:PE_FROM_PQ_1D' , 0 , ZHOOK_HANDLE ) PE (:) = PQ (:) * PP (:) / ( 0.622 + 0.378 * PQ (:)) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:PE_FROM_PQ_1D' , 1 , ZHOOK_HANDLE ) end function PE_FROM_PQ_1D !------------------------- !TD_FROM_TQ function TD_FROM_TQ_0D ( PT , PQ , PP ) RESULT ( PTD ) !!    MODIFICATIONS !!    ------------- !!       D.Meyer and R. Schoetter 2018: see a9c4c46889dca998ea9ca40e5e0edc62ecc75715 USE MODD_CSTS USE MODD_SURF_PAR , ONLY : XUNDEF !arguments and result REAL , INTENT ( IN ) :: PT ! Air Temp. (K) REAL , INTENT ( IN ) :: PQ ! Specific humidity (kg/kg) REAL , INTENT ( IN ) :: PP ! Atmospheric pressure (Pa) REAL :: PTD !Dew Point Air Temp. (K) !local variables REAL :: ALPHA REAL :: ZPE !water vapour pressure REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:TD_FROM_TQ_0D' , 0 , ZHOOK_HANDLE ) ZPE = PE_FROM_PQ ( PP , PQ ) ALPHA = LOG ( ZPE / 100 0. ) IF ( ( PT . GE . XTT ). AND .( PT . LE .( 9 3. + XTT )) ) THEN PTD = XTT + 6.54 + 1 4.526 * ALPHA + 0.7389 * ALPHA * ALPHA + 0.09486 * ALPHA ** 3 & + 0.4569 * ( ZPE / 100 0. ) ** 0.1984 ELSE IF ( PT . LT . XTT ) THEN PTD = XTT + 6.09 + 1 2.608 * ALPHA + 0.4959 * ALPHA * ALPHA ELSE PTD = XUNDEF ENDIF PTD = MIN ( PTD , PT ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:TD_FROM_TQ_0D' , 1 , ZHOOK_HANDLE ) end function TD_FROM_TQ_0D function TD_FROM_TQ_1D ( PT , PQ , PP ) RESULT ( PTD ) !!    MODIFICATIONS !!    ------------- !!       D.Meyer and R. Schoetter 2018: see a9c4c46889dca998ea9ca40e5e0edc62ecc75715 USE MODD_CSTS USE MODD_SURF_PAR , ONLY : XUNDEF !arguments and result REAL , DIMENSION (:), INTENT ( IN ) :: PT !Air Temp. (K) REAL , DIMENSION (:), INTENT ( IN ) :: PQ !Specific humidity (kg/kg) REAL , DIMENSION (:), INTENT ( IN ) :: PP ! Atmospheric pressure (Pa) REAL , DIMENSION ( SIZE ( PQ )) :: PTD !Dew Point Air Temp. (K) !local variables REAL , DIMENSION ( SIZE ( PQ )) :: ALPHA REAL , DIMENSION ( SIZE ( PQ )) :: ZPE !water vapour pressure REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:TD_FROM_TQ_1D' , 0 , ZHOOK_HANDLE ) ZPE (:) = PE_FROM_PQ ( PP (:), PQ (:)) ALPHA (:) = LOG ( ZPE (:) / 100 0. ) WHERE ( ( PT (:). GE . XTT ) . AND . ( PT (:). LE .( 9 3. + XTT )) ) PTD = XTT + 6.54 + 1 4.526 * ALPHA + 0.7389 * ALPHA * ALPHA + 0.09486 * ALPHA ** 3 & + 0.4569 * ( ZPE / 100 0. ) ** 0.1984 ELSEWHERE ( PT . LT . XTT ) PTD = XTT + 6.09 + 1 2.608 * ALPHA + 0.4959 * ALPHA * ALPHA ELSEWHERE PTD = XUNDEF END WHERE WHERE ( PTD (:). GT . PT (:)) PTD (:) = PT (:) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:TD_FROM_TQ_1D' , 1 , ZHOOK_HANDLE ) end function TD_FROM_TQ_1D !------------------------- !RV_FROM_TPTWB function RV_FROM_TPTWB_0D ( PT , PP , PTWB ) RESULT ( PRV ) !!    MODIFICATIONS !!    ------------- !!       D.Meyer and R. Schoetter 2018: see a9c4c46889dca998ea9ca40e5e0edc62ecc75715 USE MODE_THERMOS USE MODD_CSTS !arguments and result REAL , INTENT ( IN ) :: PT !Air temperature (K) REAL , INTENT ( IN ) :: PP !Atmos. Pressure (Pa) REAL , INTENT ( IN ) :: PTWB !Wet Bulb Temp. (K) REAL :: PRV !water vapor mixing ratio (kg/kg) REAL :: ZRVSAT !saturation water vapor mixing ratio REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:RV_FROM_TPTWB_0D' , 0 , ZHOOK_HANDLE ) ZRVSAT = QSAT ( PT , PP ) / ( 1. - QSAT ( PT , PP )) PRV = (( 250 1. - 2.326 * ( PTWB - XTT )) * ZRVSAT - 1.006 * ( PT - PTWB )) & / ( 250 1. + 1.86 * ( PT - XTT ) - 4.186 * ( PTWB - XTT )) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:RV_FROM_TPTWB_0D' , 1 , ZHOOK_HANDLE ) end function RV_FROM_TPTWB_0D function RV_FROM_TPTWB_1D ( PT , PP , PTWB ) RESULT ( PRV ) USE MODE_THERMOS USE MODD_CSTS !arguments and result REAL , DIMENSION (:), INTENT ( IN ) :: PT !Air temperature (K) REAL , DIMENSION (:), INTENT ( IN ) :: PP !Atmos. Pressure (Pa) REAL , DIMENSION (:), INTENT ( IN ) :: PTWB !Wet Bulb Temp. (K) REAL , DIMENSION ( SIZE ( PT )) :: PRV !water vapor mixing ratio (kg/kg) REAL , DIMENSION ( SIZE ( PT )) :: ZRVSAT !saturation water vapor mixing ratio REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:RV_FROM_TPTWB_1D' , 0 , ZHOOK_HANDLE ) ZRVSAT = QSAT ( PT (:), PP (:)) / ( 1 - QSAT ( PT (:), PP (:))) PRV (:) = (( 250 1. - 2.326 * ( PTWB (:) - XTT )) * ZRVSAT (:) - 1.006 * ( PT (:) - PTWB (:))) & / ( 250 1. + 1.86 * ( PT (:) - XTT ) - 4.186 * ( PTWB (:) - XTT )) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:RV_FROM_TPTWB_1D' , 1 , ZHOOK_HANDLE ) end function RV_FROM_TPTWB_1D !---------------------------- !TWB_FROM_TPQ !------------ function TWB_FROM_TPQ_0D ( PT , PP , PQ ) RESULT ( PTWB ) !!    MODIFICATIONS !!    ------------- !!       D.Meyer and R. Schoetter 2018: see a9c4c46889dca998ea9ca40e5e0edc62ecc75715 !arguments and results REAL , INTENT ( IN ) :: PT !air temperature (K) REAL , INTENT ( IN ) :: PQ !mixing ratio (kg/kg) REAL , INTENT ( IN ) :: PP !atmos. pressure (Pa) REAL :: PTWB !Wet Bulb Temp. (K) !local variable REAL :: ZTD !Dew Point Temp. (K) REAL :: ZTWBINF , ZTWBSUP , ZRV INTEGER :: JITER REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:TWB_FROM_TPQ_0D' , 0 , ZHOOK_HANDLE ) JITER = 1 ZTD = TD_FROM_TQ ( PT , PQ , PP ) !initial guess ZTWBSUP = PT ZTWBINF = ZTD PTWB = 0.5 * ( ZTWBSUP + ZTWBINF ) DO WHILE ( ( ABS ( ZTWBSUP - ZTWBINF ). GT . 0.01 ) . AND . ( JITER . LE . 50 ) ) ZRV = RV_FROM_TPTWB ( PT , PP , PTWB ) IF ( ZRV . GT . PQ / ( 1 - PQ )) THEN ZTWBSUP = PTWB ELSE ZTWBINF = PTWB ENDIF PTWB = 0.5 * ( ZTWBINF + ZTWBSUP ) JITER = JITER + 1 END DO IF ( JITER . GE . 49 ) STOP ( \"Maximum number of iterations exceeded in twb_from_tpq_0d\" ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:TWB_FROM_TPQ_0D' , 1 , ZHOOK_HANDLE ) end function TWB_FROM_TPQ_0D function TWB_FROM_TPQ_1D ( PT , PP , PQ ) RESULT ( PTWB ) !!    MODIFICATIONS !!    ------------- !!       D.Meyer and R. Schoetter 2018: see a9c4c46889dca998ea9ca40e5e0edc62ecc75715 !arguments and results REAL , DIMENSION (:), INTENT ( IN ) :: PT !air temperature (K) REAL , DIMENSION (:), INTENT ( IN ) :: PQ !humidity content (kg/kg) REAL , DIMENSION (:), INTENT ( IN ) :: PP !atmos. pressure (Pa) REAL , DIMENSION ( SIZE ( PT )) :: PTWB !Wet Bulb Temp. (K) !local variable REAL , DIMENSION ( SIZE ( PT )) :: ZTD !Dew Point Temp. (K) REAL , DIMENSION ( SIZE ( PT )) :: ZTWBINF , ZTWBSUP , ZRV INTEGER :: JITER , JI REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:TWB_FROM_TPQ_1D' , 0 , ZHOOK_HANDLE ) ZTD = TD_FROM_TQ ( PT , PQ , PP ) !initial guess ZTWBSUP = PT ZTWBINF = ZTD PTWB = 0.5 * ( ZTWBSUP + ZTWBINF ) DO JI = 1 , SIZE ( PT ) JITER = 1 DO WHILE ( ( ABS ( ZTWBSUP ( JI ) - ZTWBINF ( JI )) . GT . 0.01 ) . AND . ( JITER . LE . 50 )) ZRV ( JI ) = RV_FROM_TPTWB ( PT ( JI ), PP ( JI ), PTWB ( JI )) IF ( ZRV ( JI ) . GT . PQ ( JI ) / ( 1 - PQ ( JI ))) THEN ZTWBSUP ( JI ) = PTWB ( JI ) ELSE ZTWBINF ( JI ) = PTWB ( JI ) ENDIF PTWB ( JI ) = 0.5 * ( ZTWBINF ( JI ) + ZTWBSUP ( JI )) END DO IF ( JITER . GE . 49 ) STOP ( \"Maximum number of iterations exceeded in twb_from_tpq_1d\" ) END DO IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:TWB_FROM_TPQ_1D' , 1 , ZHOOK_HANDLE ) end function TWB_FROM_TPQ_1D !------------------------------------------------------------------------------- ! !     ###################################### FUNCTION ENTH_FN_T_Q ( PT , PQ ) RESULT ( PENTH ) !     ###################################### ! !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the enthalpy function !       of temperature and humidity content ! ! !!**  METHOD !!    ------ !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !! !!    AUTHOR !!    ------ !! !! !!    MODIFICATIONS !!    ------------- !!      Original    12/04/11 !!      A. Alias    01/2013   compi. on Bull : must be 1.0E-5 instead of 1.0D-5 !!      D.Meyer and R. Schoetter 2018: see a9c4c46889dca998ea9ca40e5e0edc62ecc75715 ! !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS , ONLY : XTT ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , INTENT ( IN ) :: PT ! Temperature (K) REAL , INTENT ( IN ) :: PQ ! Humidity content (kg/kg) REAL :: PENTH ! Enthalpy (J/kg) ! !*       0.2   Declarations of local variables ! REAL :: ZT ! Temperature (C) REAL :: ZRV ! Mixing ratio (kg/kg_da) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:ENTH_FN_T_Q' , 0 , ZHOOK_HANDLE ) ! ZT = PT - XTT ZRV = PQ / ( 1.0 - PQ ) ! IF ( ZRV . LT . 1.0E-5 ) ZRV = 1.0E-5 ! PENTH = 1.00484E3 * ZT + ZRV * ( 2.50094E6 + 1.85895E3 * ZT ) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:ENTH_FN_T_Q' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END FUNCTION ENTH_FN_T_Q ! !------------------------------------------------------------------------------- !------------------------------------------------------------------------------- !------------------------------------------------------------------------------- ! !     ###################################### FUNCTION Q_FN_T_ENTH ( PT , PENTH ) RESULT ( PQ ) !     ###################################### ! !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the humidity content !       as a function of temperature and enthalpy ! ! !!**  METHOD !!    ------ !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !! !!    AUTHOR !!    ------ !! !! !!    MODIFICATIONS !!    ------------- !!      Original    12/04/11 !!      D.Meyer and R. Schoetter 2018: see a9c4c46889dca998ea9ca40e5e0edc62ecc75715 ! !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS , ONLY : XTT ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , INTENT ( IN ) :: PT ! Temperature (K) REAL , INTENT ( IN ) :: PENTH ! Enthalpy (J/kg) REAL :: PQ ! Humidity content (kg/kg) ! !*       0.2   Declarations of local variables ! REAL :: ZT ! Temperature (C) REAL :: ZRV ! Mixing ratio (kg/kg_da) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:Q_FN_T_ENTH' , 0 , ZHOOK_HANDLE ) ! ZT = PT - XTT ! !    calculate mixing ratio ZRV = ( PENTH - 1.00484E3 * ZT ) / ( 2.50094E6 + 1.85895E3 * ZT ) ! !    validity test IF ( ZRV . LT . 0.0 ) ZRV = 1.E-5 ! !    calculate humidity content PQ = ZRV / ( 1.0 + ZRV ) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:Q_FN_T_ENTH' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END FUNCTION Q_FN_T_ENTH END MODULE MODE_PSYCHRO","tags":"","loc":"sourcefile/mode_psychro.f90.html"},{"title":"modd_idealn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_IDEAL_n Source Code modd_idealn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################# MODULE MODD_IDEAL_n !     ################# ! !!****  *MODD_IDEAL_n - declaration of surface parameters for an inland water surface !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       01/2004 ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_TYPE_DATE_SURF ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE IDEAL_t ! ! Time-step: ! REAL :: XTSTEP ! time step ! REAL :: XOUT_TSTEP ! output writing time step ! ! ! END TYPE IDEAL_t CONTAINS ! SUBROUTINE IDEAL_INIT ( YIDEAL ) TYPE ( IDEAL_t ), INTENT ( INOUT ) :: YIDEAL REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_IDEAL_N:IDEAL_INIT\" , 0 , ZHOOK_HANDLE ) YIDEAL % XTSTEP = 0. YIDEAL % XOUT_TSTEP = 0. IF ( LHOOK ) CALL DR_HOOK ( \"MODD_IDEAL_N:IDEAL_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE IDEAL_INIT END MODULE MODD_IDEAL_n","tags":"","loc":"sourcefile/modd_idealn.f90.html"},{"title":"spll_modi_window_e_budget.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_WINDOW_E_BUDGET Source Code spll_modi_window_e_budget.f90 Source Code !auto_modi:spll_window_e_budget.D MODULE MODI_WINDOW_E_BUDGET INTERFACE SUBROUTINE WINDOW_E_BUDGET ( B , PEMIS_WIN , PLW_W_TO_WIN , PLW_R_TO_WIN , PLW_G_TO_WIN , & PLW_NR_TO_WIN , PLW_S_TO_WIN , PRAD_RF_WIN , PRAD_WL_WIN , & PABS_SW_WIN , PLW_RAD , PAC_WL , PRADHT_IN , PTS_FL , PRHOA , & PDN_RD , PT_CANYON , PTS_WL , PTS_RD , PTSN_RD , PTS_GD , & PRAD_WIN_FL , PRAD_WIN_MA , PCONV_WIN_BLD , PEMIT_LW_WIN , & PABS_LW_WIN , PLOAD_IN_WIN ) USE MODD_BEM_n , ONLY : BEM_t IMPLICIT NONE TYPE ( BEM_t ), INTENT ( INOUT ) :: B REAL , DIMENSION (:), INTENT ( IN ) :: PEMIS_WIN ! window emissivity REAL , DIMENSION (:), INTENT ( IN ) :: PLW_W_TO_WIN ! Radiative heat trasfer coeff window-wall outdoor REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WIN ! Radiative heat trasfer coeff window-road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WIN ! Radiative heat trasfer coeff window-garden REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WIN ! Radiative heat trasfer coeff window-snow REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WIN ! Radiative heat trasfer coeff window-sky REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_WIN ! rad. fluxes from roof to win [W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_WL_WIN ! rad. fluxes from wall to win [W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_WIN ! window absorbed shortwave radiation [W m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WL ! aerodynamical conductance between wall and canyon REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient REAL , DIMENSION (:), INTENT ( IN ) :: PTS_FL ! floor layers temperatures [K] REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! rho REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered fraction on roads REAL , DIMENSION (:), INTENT ( IN ) :: PT_CANYON ! air canyon temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WL ! wall outdoor surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_RD ! road surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTSN_RD ! road snow temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GD ! green area surface temperature REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WIN_FL ! rad. fluxes from window to floor [W m-2(window)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WIN_MA ! rad. fluxes from window to mass [W m-2(window)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_WIN_BLD ! conv. fluxes from window to bld [W m-2(window)] REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_WIN ! Longwave radiation emitted by the window [W m-2(window)] REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_WIN ! Longwave radiation absorbed by the window [W m-2(window)] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_IN_WIN ! solar + internal heat gain END SUBROUTINE WINDOW_E_BUDGET END INTERFACE END MODULE MODI_WINDOW_E_BUDGET","tags":"","loc":"sourcefile/spll_modi_window_e_budget.f90.html"},{"title":"spll_modi_get_luout.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_GET_LUOUT Source Code spll_modi_get_luout.f90 Source Code !auto_modi:spll_get_luout.D MODULE MODI_GET_LUOUT INTERFACE SUBROUTINE GET_LUOUT ( HPROGRAM , KLUOUT ) IMPLICIT NONE CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HPROGRAM ! program calling GROUND INTEGER , INTENT ( OUT ) :: KLUOUT ! Logical unit of output listing END SUBROUTINE GET_LUOUT END INTERFACE END MODULE MODI_GET_LUOUT","tags":"","loc":"sourcefile/spll_modi_get_luout.f90.html"},{"title":"modd_diag_misc_flaken.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DIAG_MISC_FLAKE_n Source Code modd_diag_misc_flaken.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ############################ MODULE MODD_DIAG_MISC_FLAKE_n !     ############################ ! !!****  *MODD_DIAG_MISC_FLAKE - declaration of diagnostic variables for FLAKE scheme !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      P. Le Moigne   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       07/10/04 ! ! !*       0.   DECLARATIONS !             ------------ ! ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE DIAG_MISC_FLAKE_t !------------------------------------------------------------------------------ ! LOGICAL :: LWATER_PROFILE ! flag for miscellaneous terms of FLake scheme ! !* miscellaneous variables ! REAL , POINTER , DIMENSION (:) :: XZWAT_PROFILE ! depth of output levels (m) in namelist REAL , POINTER , DIMENSION (:) :: XZW_PROFILE ! depth of output levels (m) REAL , POINTER , DIMENSION (:,:) :: XTW_PROFILE ! Water temperature in output levels (K) ! ! !------------------------------------------------------------------------------ ! END TYPE DIAG_MISC_FLAKE_t CONTAINS ! SUBROUTINE DIAG_MISC_FLAKE_INIT ( DMF ) TYPE ( DIAG_MISC_FLAKE_t ), INTENT ( INOUT ) :: DMF REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_FLAKE_N:DIAG_MISC_FLAKE_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( DMF % XZWAT_PROFILE ) NULLIFY ( DMF % XZW_PROFILE ) NULLIFY ( DMF % XTW_PROFILE ) DMF % LWATER_PROFILE = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_FLAKE_N:DIAG_MISC_FLAKE_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_MISC_FLAKE_INIT END MODULE MODD_DIAG_MISC_FLAKE_n","tags":"","loc":"sourcefile/modd_diag_misc_flaken.f90.html"},{"title":"surface_ri.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines SURFACE_RI Source Code surface_ri.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE SURFACE_RI ( PTG , PQS , PEXNS , PEXNA , PTA , PQA , & PZREF , PUREF , PDIRCOSZW , PVMOD , PRI ) !   ###################################################################### ! !!****  *SURFACE_RI* !! !!    PURPOSE !!    ------- ! !     Computes the richardson number near the ground ! ! !!**  METHOD !!    ------ ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !!    MODD_GROUND_PAR !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    22/09/98 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_CSTS , ONLY : XRV , XRD , XG USE MODD_SURF_ATM , ONLY : XRIMAX USE MODI_WIND_THRESHOLD ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PTG ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PQS ! surface specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PEXNA ! exner function ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind ! REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first ! atmospheric level REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the wind !                                             ! NOTE this is different from ZZREF !                                             ! ONLY in stand-alone/forced mode, !                                             ! NOT when coupled to a model (MesoNH) REAL , DIMENSION (:), INTENT ( IN ) :: PDIRCOSZW ! Cosine of the angle between !                                             ! the normal to the surface and !                                             ! the vertical ! REAL , DIMENSION (:), INTENT ( OUT ) :: PRI ! Richardson number ! !*      0.2    declarations of local variables ! ! REAL , DIMENSION ( SIZE ( PTG )) :: ZTHVA , ZTHVS REAL , DIMENSION ( SIZE ( PVMOD )) :: ZVMOD REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! !       1.     Richardson number !              ----------------- ! !                                                 virtual potential !                                                 temperature at the !                                                 first atmospheric level and !                                                 at the surface ! IF ( LHOOK ) CALL DR_HOOK ( 'SURFACE_RI' , 0 , ZHOOK_HANDLE ) ! ZTHVA (:) = PTA (:) / PEXNA (:) * ( 1. + ( XRV / XRD - 1. ) * PQA (:) ) ZTHVS (:) = PTG (:) / PEXNS (:) * ( 1. + ( XRV / XRD - 1. ) * PQS (:) ) ! ZVMOD (:) = WIND_THRESHOLD ( PVMOD (:), PUREF (:)) ! ! Richardson's number PRI (:) = XG * PDIRCOSZW (:) * PUREF (:) * PUREF (:) & * ( ZTHVA (:) - ZTHVS (:)) / ( 0.5 * ( ZTHVA (:) + ZTHVS (:)) ) & / ( ZVMOD (:) * ZVMOD (:)) / PZREF (:) ! PRI (:) = MIN ( PRI (:), XRIMAX ) ! IF ( LHOOK ) CALL DR_HOOK ( 'SURFACE_RI' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END SUBROUTINE SURFACE_RI","tags":"","loc":"sourcefile/surface_ri.f90.html"},{"title":"layer_e_budget_get_coef.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines LAYER_E_BUDGET_GET_COEF Source Code layer_e_budget_get_coef.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !   ########################################################################## SUBROUTINE LAYER_E_BUDGET_GET_COEF ( PT , PTSTEP , PIMPL , PHC , PTC , PD , PA , PB , PC , PY ) !   ########################################################################## ! !!****  *LAYER_E_BUDGET_GET_COEF* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of building floor temperatures ! ! !!**  METHOD !     ------ ! !    6 : equations for evolution of Ts_floor !        ************************************************************* ! !     dTf_k(t) / dt = 1/(df_k*Cf_k) * (- 2*Kf_k-1*(Tf_k-Tf_k-1)/(df_k-1 +df_k) !                                      - 2*Kf_k  *(Tf_k-Tf_k+1)/(df_k+1 +df_k) ) ! !     dTf_1(t) / dt = 1/(df_1*Cf_1) * (- 2*Kw_1*(Tw_1-Tw_2)/(dw_1 +dw_2)) ! !       with ! !   K*_k  = (d*_k+ d*_k+1)/(d*_k/k*_k+ d*_k+1/k*_k+1) ! ! ! The system is implicited (or semi-implicited). ! ! ZIMPL=1    ---> implicit system ! ZIMPL=0.5  ---> semi-implicit system ! ZIMPL=0    ---> explicit system ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      G. Pigeon           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    15/04/09 !!                     08/10 (G. Pigeon) computation of residual of energy balance !!                                       modification of the limit condition for !!                                       the deep temp. from the deep road temp. !!                                       to zero flux condition. idem for sfce T !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PT ! floor layers temperatures REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC ! heat capacity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC ! thermal conductivity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PD ! depth of road layers REAL , DIMENSION (:,:), INTENT ( OUT ) :: PA REAL , DIMENSION (:,:), INTENT ( OUT ) :: PB REAL , DIMENSION (:,:), INTENT ( OUT ) :: PC REAL , DIMENSION (:,:), INTENT ( OUT ) :: PY REAL , INTENT ( IN ) :: PIMPL ! implicitation coefficient ! !*      0.2    declarations of local variables ! REAL :: ZIMPL ! implicit coefficient REAL :: ZEXPL ! explicit coefficient ! ! mean thermal conductivity over distance between 2 layers REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: ZMTC_O_D ! thermal capacity times layer depth REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: ZHC_D ! INTEGER :: ILAYER ! number of floor layers INTEGER :: JLAYER ! loop counter INTEGER :: JJ ! loop counter REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'LAYER_E_BUDGET_GET_COEF' , 0 , ZHOOK_HANDLE ) ! !*      1.     layer thermal properties !              ------------------------ ! ZIMPL = PIMPL ZEXPL = 1. - PIMPL ! ILAYER = SIZE ( PT , 2 ) ZMTC_O_D (:,:) = 0. ! DO JLAYER = 1 , ILAYER - 1 DO JJ = 1 , SIZE ( PT , 1 ) ZMTC_O_D ( JJ , JLAYER ) = 2. / ( PD ( JJ , JLAYER ) / PTC ( JJ , JLAYER ) + PD ( JJ , JLAYER + 1 ) / PTC ( JJ , JLAYER + 1 ) ) ZHC_D ( JJ , JLAYER ) = PHC ( JJ , JLAYER ) * PD ( JJ , JLAYER ) ENDDO END DO ! DO JJ = 1 , SIZE ( PT , 1 ) ZHC_D ( JJ , ILAYER ) = PHC ( JJ , ILAYER ) * PD ( JJ , ILAYER ) ENDDO ! !------------------------------------------------------------------------------- ! !*      3.    Surface layer coefficients !             ------------------------------ ! ! no implication for Ts and use of flux from BEM or BLD_E_BUDGET DO JLAYER = 1 , ILAYER DO JJ = 1 , SIZE ( PT , 1 ) ! IF ( JLAYER == 1 ) THEN PA ( JJ , JLAYER ) = 0. ELSE PA ( JJ , JLAYER ) = - ZIMPL * ZMTC_O_D ( JJ , JLAYER - 1 ) ENDIF ! IF ( JLAYER == ILAYER ) THEN PC ( JJ , JLAYER ) = 0. ELSE PC ( JJ , JLAYER ) = - ZIMPL * ZMTC_O_D ( JJ , JLAYER ) ENDIF ! PB ( JJ , JLAYER ) = ZHC_D ( JJ , JLAYER ) / PTSTEP PY ( JJ , JLAYER ) = ZHC_D ( JJ , JLAYER ) / PTSTEP * PT ( JJ , JLAYER ) ! IF ( JLAYER . GT . 1. ) THEN PB ( JJ , JLAYER ) = PB ( JJ , JLAYER ) + ZIMPL * ZMTC_O_D ( JJ , JLAYER - 1 ) PY ( JJ , JLAYER ) = PY ( JJ , JLAYER ) + ZEXPL * ZMTC_O_D ( JJ , JLAYER - 1 ) * ( PT ( JJ , JLAYER - 1 ) - PT ( JJ , JLAYER ) ) ENDIF ! IF ( JLAYER . LT . ILAYER ) THEN PB ( JJ , JLAYER ) = PB ( JJ , JLAYER ) + ZIMPL * ZMTC_O_D ( JJ , JLAYER ) PY ( JJ , JLAYER ) = PY ( JJ , JLAYER ) + ZEXPL * ZMTC_O_D ( JJ , JLAYER ) * ( PT ( JJ , JLAYER + 1 ) - PT ( JJ , JLAYER ) ) ENDIF ! ENDDO ! ENDDO ! IF ( LHOOK ) CALL DR_HOOK ( 'LAYER_E_BUDGET_GET_COEF' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- END SUBROUTINE LAYER_E_BUDGET_GET_COEF","tags":"","loc":"sourcefile/layer_e_budget_get_coef.f90.html"},{"title":"mode_surf_snow_frac.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODE_SURF_SNOW_FRAC Source Code mode_surf_snow_frac.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ########################## MODULE MODE_SURF_SNOW_FRAC !     ########################## ! !!****  *MODE_SURF_SNOW_FRAC* -  module for routines to compute snow fraction !!                               for surface schemes !! !!    PURPOSE !!    ------- ! !      The purpose of this routine is to store here all routines to compute !     snow fractions for the TEB scheme. This allows to insure a coherent !     way in retrieving snow fraction or snow contents. ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!       NONE !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    15/03/99 !!     (B.Decharme) 12/03/08  Make sure PPSNV <= PPSNG !-------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! ! !------------------------------------------------------------------------------- ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! CONTAINS !------------------------------------------------------------------------------- ! !     ############################################### FUNCTION SNOW_FRAC_GROUND ( PWSNOW ) RESULT ( PPSNG ) !     ############################################### ! USE MODD_SNOW_PAR , ONLY : XWCRN IMPLICIT NONE ! REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL , DIMENSION ( SIZE ( PWSNOW )) :: PPSNG ! snow fraction over bare ground REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_GROUND' , 0 , ZHOOK_HANDLE ) PPSNG (:) = PWSNOW (:) / ( PWSNOW (:) + XWCRN ) ! fraction of ground covered IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_GROUND' , 1 , ZHOOK_HANDLE ) ! END FUNCTION SNOW_FRAC_GROUND ! !------------------------------------------------------------------------------- ! !     ########################################################## FUNCTION WSNOW_FROM_SNOW_FRAC_GROUND ( PPSNG ) RESULT ( PWSNOW ) !     ########################################################## ! USE MODD_SNOW_PAR , ONLY : XWCRN IMPLICIT NONE ! REAL , DIMENSION (:), INTENT ( IN ) :: PPSNG ! snow fraction over bare ground REAL , DIMENSION ( SIZE ( PPSNG )) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:WSNOW_FROM_SNOW_FRAC_GROUND' , 0 , ZHOOK_HANDLE ) PWSNOW (:) = XWCRN * PPSNG (:) / ( 1. - PPSNG (:)) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:WSNOW_FROM_SNOW_FRAC_GROUND' , 1 , ZHOOK_HANDLE ) ! END FUNCTION WSNOW_FROM_SNOW_FRAC_GROUND !------------------------------------------------------------------------------- ! !     ######################################################### FUNCTION SNOW_FRAC_VEG ( PPSNG , PWSNOW , PZ0VEG , PRHOS ) RESULT ( PPSNV ) !     ######################################################### ! USE MODD_SNOW_PAR , ONLY : XWSNV IMPLICIT NONE ! REAL , DIMENSION (:), INTENT ( IN ) :: PPSNG ! snow fraction over bare ground REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL , DIMENSION (:), INTENT ( IN ) :: PZ0VEG ! vegetation roughness length for momentum REAL , DIMENSION (:), INTENT ( IN ) :: PRHOS ! snow density (kg/m3) REAL , DIMENSION ( SIZE ( PWSNOW )) :: PPSNV ! snow fraction over vegetation REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_VEG' , 0 , ZHOOK_HANDLE ) PPSNV (:) = PWSNOW (:) / ( PWSNOW (:) + PRHOS (:) * XWSNV * PZ0VEG (:)) ! Make sure PPSNV <= PPSNG PPSNV (:) = MIN ( PPSNV (:), PPSNG (:)) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_VEG' , 1 , ZHOOK_HANDLE ) ! END FUNCTION SNOW_FRAC_VEG ! !------------------------------------------------------------------------------- !     ********************************************************** FUNCTION SNOW_FRAC_VEG_A ( P_PSNG , P_LAI , P_SNOWALB ) RESULT ( PPSNV ) !     ********************************************************** ! IMPLICIT NONE ! REAL , DIMENSION (:), INTENT ( IN ) :: P_LAI ! leaf area index REAL , DIMENSION (:), INTENT ( IN ) :: P_SNOWALB ! snow albedo REAL , DIMENSION (:), INTENT ( IN ) :: P_PSNG ! snow fraction over bare ground REAL , DIMENSION ( SIZE ( P_LAI )) :: PPSNV ! snow fraction over vegetation ! ! ! ! Definition of local variables REAL , DIMENSION ( SIZE ( P_LAI )) :: FLAI ! snow fraction over vegetation REAL RLAIMAX , RLAI , A1 , A2 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_VEG_A' , 0 , ZHOOK_HANDLE ) RLAIMAX = 7. RLAI = 3. A1 = 0.87 A2 = 0.84 FLAI (:) = 1. WHERE ( P_LAI (:) > RLAI ) FLAI (:) = 1. - ( P_LAI (:) / RLAIMAX ) * ( MAX ( 0.0 ,( A1 - MAX ( A2 , P_SNOWALB (:)))) / ( A1 - A2 )) END WHERE PPSNV (:) = P_PSNG (:) * FLAI (:) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_VEG_A' , 1 , ZHOOK_HANDLE ) ! END FUNCTION SNOW_FRAC_VEG_A !------------------------------------------------------------------------------- ! !     ############################################################ FUNCTION SNOW_FRAC_NAT ( PWSNOW , PPSNG , PPSNV , PVEG ) RESULT ( PPSN ) !     ############################################################ ! IMPLICIT NONE ! REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL , DIMENSION (:), INTENT ( IN ) :: PPSNG ! snow fraction over bare ground REAL , DIMENSION (:), INTENT ( IN ) :: PPSNV ! snow fraction over vegetation REAL , DIMENSION (:), INTENT ( IN ) :: PVEG ! vegetation fraction REAL , DIMENSION ( SIZE ( PWSNOW )) :: PPSN ! snow fraction over natural areas REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_NAT' , 0 , ZHOOK_HANDLE ) PPSN (:) = ( 1 - PVEG (:)) * PPSNG (:) + PVEG (:) * PPSNV (:) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_NAT' , 1 , ZHOOK_HANDLE ) ! END FUNCTION SNOW_FRAC_NAT ! !------------------------------------------------------------------------------- ! !------------------------------------------------------------------------------- ! !     ############################################################## SUBROUTINE SNOW_FRAC_ROAD ( PWSNOW_ROAD , OSNOW , PDN_ROAD , PDF_ROAD ) !     ############################################################## ! USE MODD_SNOW_PAR , ONLY : XWCRN ! REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW_ROAD ! snow amount over roads (kg/m2) LOGICAL , DIMENSION (:), INTENT ( IN ) :: OSNOW ! T: snow-fall is occuring REAL , DIMENSION (:), INTENT ( OUT ) :: PDN_ROAD ! snow fraction over roads REAL , DIMENSION (:), INTENT ( OUT ) :: PDF_ROAD ! snow-free fraction over roads REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_ROAD' , 0 , ZHOOK_HANDLE ) PDF_ROAD (:) = 1. PDN_ROAD (:) = 0. ! ! due to the flatness of horizontal surfaces (compared to landscape and ! vegetation), the amount of snow necessary to cover the entire surface XWCRN ! is reduced (equal to 1kg/m2 instead of 10). ! WHERE ( PWSNOW_ROAD (:) > 0. . OR . OSNOW ) PDN_ROAD (:) = MAX ( MIN ( PWSNOW_ROAD (:) / ( PWSNOW_ROAD (:) + XWCRN * 0.1 ) , 0.7 ), 0.01 ) PDF_ROAD (:) = 1. - PDN_ROAD (:) END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_ROAD' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE SNOW_FRAC_ROAD ! !------------------------------------------------------------------------------- ! !     ############################################################## SUBROUTINE SNOW_FRAC_ROOF ( PWSNOW_ROOF , OSNOW , PDN_ROOF , PDF_ROOF ) !     ############################################################## ! USE MODD_SNOW_PAR , ONLY : XWCRN ! REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW_ROOF ! snow amount over roofs (kg/m2) LOGICAL , DIMENSION (:), INTENT ( IN ) :: OSNOW ! T: snow-fall is occuring REAL , DIMENSION (:), INTENT ( OUT ) :: PDN_ROOF ! snow fraction over roofs REAL , DIMENSION (:), INTENT ( OUT ) :: PDF_ROOF ! snow-free fraction over roofs REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_ROOF' , 0 , ZHOOK_HANDLE ) PDF_ROOF (:) = 1. PDN_ROOF (:) = 0. ! ! due to the flatness of horizontal surfaces (compared to landscape and ! vegetation), the amount of snow necessary to cover the entire surface XWCRN ! is reduced (equal to 1kg/m2 instead of 10). ! WHERE ( PWSNOW_ROOF (:) > 0. . OR . OSNOW ) PDN_ROOF (:) = MAX ( PWSNOW_ROOF (:) / ( PWSNOW_ROOF (:) + XWCRN * 0.1 ), 0.01 ) PDF_ROOF (:) = 1. - PDN_ROOF (:) END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_ROOF' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE SNOW_FRAC_ROOF ! !------------------------------------------------------------------------------- !------------------------------------------------------------------------------- ! routines bidon pour tora ! !     ######################################################## FUNCTION SNOW_FRAC_NAT_1D ( PWSNOW ) RESULT ( BIDON ) !     ######################################################## ! REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL :: BIDON REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_NAT_1D' , 0 , ZHOOK_HANDLE ) BIDON = PWSNOW ( 1 ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_NAT_1D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION SNOW_FRAC_NAT_1D ! !------------------------------------------------------------------------------- ! !     ######################################################## FUNCTION SNOW_FRAC_NAT_2D ( PWSNOW ) RESULT ( BIDON ) !     ######################################################## REAL :: BIDON REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW ! snow amount over natural areas (kg/msnow amount over natural areas (kg/m2) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_VEG_1D' , 0 , ZHOOK_HANDLE ) BIDON = PWSNOW ( 1 ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_VEG_1D' , 1 , ZHOOK_HANDLE ) END FUNCTION SNOW_FRAC_VEG_1D ! !------------------------------------------------------------------------------- ! !     ############################################################ FUNCTION SNOW_FRAC_VEG_2D ( PWSNOW ) RESULT ( BIDON ) !     ############################################################ REAL :: BIDON REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_VEG_2D' , 0 , ZHOOK_HANDLE ) BIDON = PWSNOW ( 1 ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_VEG_2D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION SNOW_FRAC_VEG_2D ! !------------------------------------------------------------------------------- !     ################################################## FUNCTION SNOW_FRAC_GROUND_1D ( PWSNOW ) RESULT ( BIDON ) !     ################################################## ! REAL :: BIDON REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_GROUND_1D' , 0 , ZHOOK_HANDLE ) BIDON = PWSNOW ( 1 ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_GROUND_1D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION SNOW_FRAC_GROUND_1D ! !------------------------------------------------------------------------------- ! !     ################################################## FUNCTION SNOW_FRAC_GROUND_2D ( PWSNOW ) RESULT ( BIDON ) !     ################################################## ! REAL :: BIDON REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_GROUND_2D' , 0 , ZHOOK_HANDLE ) BIDON = PWSNOW ( 1 ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_GROUND_2D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION SNOW_FRAC_GROUND_2D ! !------------------------------------------------------------------------------- !------------------------------------------------------------------------------- ! END MODULE MODE_SURF_SNOW_FRAC","tags":"","loc":"sourcefile/mode_surf_snow_frac.f90.html"},{"title":"urban_solar_abs.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines URBAN_SOLAR_ABS Source Code urban_solar_abs.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE URBAN_SOLAR_ABS ( TOP , T , B , DMT , PDIR_SW , PSCA_SW , PZENITH , PAZIM , & PFRAC_PANEL , PALB_PANEL , PALB_GD , PSVF_GD , PALB_GRF , & PDN_RF , PDF_RF , PDN_RD , PDF_RD , PREC_SW_RD , & PREC_SW_SN_RD , PREC_SW_WL_A , PREC_SW_WL_B , & PREC_SW_GD , PREC_SW_RF , PDIR_ALB_TWN , PSCA_ALB_TWN , & PSW_RAD_GD , PREC_SW_WIN , PREF_SW_GRND , PREF_SW_FAC , & PE_SHADING , OSHAD_DAY , OSHADE , OALB_ONLY ) !   ########################################################################## ! !!****  *URBAN_SOLAR_ABS* !! !!    PURPOSE !!    ------- ! !     Computes the solar radiation flux absorbed by roofs, roads and walls. !     The absorption by roofs is trivial. ! ! !!**  METHOD !     ------ ! ! !        computation of input solar radiation on each surface !        **************************************************** ! !    direct fluxes: !    ------------- ! !    dir_Rg_road (Wm-2) =   S * 2*theta0/pi !                         - S *2/tan(zen) * h/W /pi * (1-cos(theta0)) ! !    dir_Rg_wall (Wm-2) =   S / tan(zen) /pi * (1-cos(theta0)) !                         + S * W/h * (1/2 -theta0/pi) ! !   where zen      is the zenithal angle, from horizon !         h/W      is the aspect ratio of the canyon !         S        is the direct solar radiation flux on a horizontal surface ! !         theta0 = arcsin(min(W/h * tan(zen),1)) ! !   The surfaces will keep (1-a) times these fluxes, and reflect the !   remaining ! !    scattered fluxes: !    ---------------- ! !   sca_Rg_road = sca_Rg * SVF_road ! !   sca_Rg_wall = sca_Rg * SVF_wall ! ! !    solar flux and isotropic reflections : !    ------------------------------------ ! !  after 0 reflection, the absorbed part of the flux is: ! !      ARg_r(0) = (1-a_r) (sca_Rg_road + dir_Rg_road) ! !      ARg_w(0) = (1-a_w) (sca_Rg_wall + dir_Rg_wall) ! !    and the reflected parts are ! !      RRg_r(0) = a_r (sca_Rg_road + dir_Rg_road) ! !      RRg_w(0) = a_w (sca_Rg_wall + dir_Rg_wall) ! !  after n reflection: ! !      ARg_r(n) = ARg_r(n-1) + RRg_w(n-1) * (1-  SVF_r)(1-a_r) ! !      ARg_w(n) = ARg_w(n-1) + RRg_r(n-1) *      SVF_w (1-a_w) !                            + RRg_w(n-1) * (1-2*SVF_w)(1-a_w) ! !      RRg_r(n) = (1- SVF_r) a_r RRg_w(n-1) ! !      RRg_w(n) =     SVF_w  a_w RRg_r(n-1) !                +(1-2SVF_w) a_w RRg_w(n-1) ! ! !   i.e. !                                               n-1 !      ARg_r(n) = ARg_r(0) + (1-  SVF_r)(1-a_r) SUM RRg_w(k) !                                               k=0 ! !                                               n-1 !      ARg_w(n) = ARg_w(0) +      SVF_w (1-a_w) SUM RRg_r(k) !                                               k=0 !                                               n-1 !                          + (1-2*SVF_w)(1-a_w) SUM RRg_w(k) !                                               k=0 ! ! with ! !     n                             n-1 !    SUM RRg_r(k) = (1-  SVF_r) a_r SUM RRg_w(k)      +  RRg_r(0) !    k=0                            k=0 ! !     n                             n-1 !    SUM RRg_w(k) =      SVF_w  a_w SUM RRg_r(k) !    k=0                            k=0 !                                   n-1 !                  +(1-2*SVF_w) a_w SUM RRg_w(k)      +  RRg_w(0) !                                   k=0 ! ! !   Then ! !     n                                        n-1 !    SUM RRg_w(k) =  (1-2*SVF_w)       a_w     SUM RRg_w(k) !    k=0                                       k=0 !                                              n-2 !                  + (1-  SVF_r) SVF_w a_w a_r SUM RRg_w(k) !                                              k=0 ! !                  + RRg_w(0) + SVF_w a_w RRg_r(0) ! ! ! ! !  solving this system, lead after an infinity of reflections/absorptions: ! !    inf                      RRg_w(0) + SVF_w a_w RRg_r(0) !    SUM RRg_w(k) = ---------------------------------------------------- !    k=0             1 - (1-2*SVF_w) a_w - (1-  SVF_r) SVF_w a_w a_r ! ! !    inf            (1-  SVF_r) a_r ( a_w SVF_w RRg_r(0) + RRg_w(0) ) !    SUM RRg_r(k) = ------------------------------------------------------------ + RRg_r(0) !    k=0             1 - (1-2*SVF_w) a_w - (1-  SVF_r) SVF_w a_w a_r ! ! ! ARg_r(n) and ARg_w(n) follow ! ! ! If snow is present, the albedos in all these formulae (and only these, ! not the final net radiation budget) are modified by the albedo of the ! snow-covered surface. ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !!                  21/11/00 (V. Masson)  bug in reflections for roads !!                     12/02 (A. Lemonsu) bug in diagnostic of albedo !!                     12/11 (V. Masson ) adds road direction option !!                     01/12 (V. Masson ) adds 2 different wall direct insulations !!                     04/12 (G. Pigeon) add B%XTRAN_WIN !!                     09/12 (C. de Munck-A. Lemonsu) add green roofs !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t ! USE MODD_CSTS , ONLY : XPI USE MODD_BEM_CST , ONLY : XWIN_SW_MAX USE MODD_SURF_PAR , ONLY : XUNDEF ! USE MODI_WINDOW_SHADING ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP ! 'UNIF' : classical TEB version, all walls are identical ! 'TWO ' : the two opposite walls are different & receive different solar energy TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT ! REAL , DIMENSION (:), INTENT ( IN ) :: PDIR_SW ! incoming direct solar radiation REAL , DIMENSION (:), INTENT ( IN ) :: PSCA_SW ! scattered incoming solar rad. REAL , DIMENSION (:), INTENT ( IN ) :: PZENITH ! solar zenithal angle REAL , DIMENSION (:), INTENT ( IN ) :: PAZIM ! solar azimuthal angle !                                                      ! (radian from N, clockwise) REAL , DIMENSION (:), INTENT ( IN ) :: PFRAC_PANEL ! Fraction of solar panel on roofs (-) REAL , DIMENSION (:), INTENT ( IN ) :: PALB_PANEL ! Albedo     of solar panels (-) REAL , DIMENSION (:), INTENT ( IN ) :: PALB_GD ! GD areas albedo REAL , DIMENSION (:), INTENT ( IN ) :: PSVF_GD ! GD areas sky view factor REAL , DIMENSION (:), INTENT ( IN ) :: PALB_GRF ! green roof albedo REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RF ! snow-covered roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RF ! snow-free    roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered road fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RD ! snow-free    road fraction ! !new arguments for shading REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_RD ! solar radiation received !                                                      ! by snow-free roads REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_WL_A ! solar radiation received REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_WL_B ! solar radiation received !                                                    ! by snow-free walls REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_GD ! solar radiation received !                                                    ! by GD areas REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_RF ! solar radiation received !                                                    ! by RF areas (below solar panels if any) REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_SN_RD ! solar radiation received !                                                    ! by snow-covered roads REAL , DIMENSION (:), INTENT ( OUT ) :: PDIR_ALB_TWN ! town direct albedo REAL , DIMENSION (:), INTENT ( OUT ) :: PSCA_ALB_TWN ! town diffuse albedo ! REAL , DIMENSION (:), INTENT ( OUT ) :: PSW_RAD_GD ! solar radiation reaching GD areas REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_WIN ! solar radiation received by windows REAL , DIMENSION (:), INTENT ( OUT ) :: PREF_SW_GRND ! total solar radiation reflected by ground REAL , DIMENSION (:), INTENT ( OUT ) :: PREF_SW_FAC ! total solar radiation reflected by wall !new arguments for shading REAL , DIMENSION (:), INTENT ( OUT ) :: PE_SHADING ! Energy that is not reflected ! by the shading, nor transmitted through ! the bld, nor absorbed by the ! [W/m2(win)] LOGICAL , DIMENSION (:), INTENT ( INOUT ) :: OSHAD_DAY ! has shading been necessary this day ? LOGICAL , DIMENSION (:), INTENT ( IN ) :: OSHADE ! are building conditions favorable for !                                                      ! shading (independantly of solar irradiance) ? ! LOGICAL , INTENT ( IN ), OPTIONAL :: OALB_ONLY ! !*      0.2    declarations of local variables ! ! REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZDIR_SW ! direct and diffuse incoming radiation REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZSCA_SW ! with a minimum to compute albedo REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZTANZEN ! tangente of solar zenithal angle REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZTHETA0 ! canyon angle for !                                                       ! which solar !                                                       ! radiation !                                                       ! reaches the road ! REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZAALB_RD ! averaged albedo REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZDIR_SW_RD ! direct radiation reaching REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZDIR_SW_WL_A ! road, wall A, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZDIR_SW_WL_B ! wall B, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZDIR_SW_GD ! GD areas, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZDIR_SW_WL ! and on average on 2 walls REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZSCA_SW_RD ! diffuse radiation reaching REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZSCA_SW_WL ! road, wall, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZSCA_SW_GD ! and GD areas ! REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_RF ! solar radiation REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_RD ! absorbed by roofs, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_WL_A ! road, wall A, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_WL_B ! wall B, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_WL ! both walls on average, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_GD ! GD areas, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_GRF ! green roof areas, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_PANEL ! solar panels, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_WIN ! window (abs+trans), and snow REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_SN_RF ! over roof, wall, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_SN_RD ! and GD areas REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_RF ! solar radiation REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_RD ! absorbed by roofs, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_WL ! road, wall, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_GD ! GD areas, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_GRF ! green roof areas, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_PANEL ! solar panels, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_WIN ! window (abs+trans), and snow REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_SN_RF ! over roof and wall, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_SN_RD ! coming from diffuse rad. REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZDW ! difference of radiation !                                                       ! absorbed by the 2 walls ! REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZRD ! REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZRD_DIR ! Road direction !                                                     ! (radian from N, clockwise) REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZGD ! ! REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZREC_DIR_SW_WIN REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZREC_SCA_SW_WIN REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZAALB_WL ! REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZTRAN_WIN ! solar transmittivity of windows REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_WIN ! solar transmittivity of windows LOGICAL , DIMENSION ( SIZE ( PDIR_SW )) :: G_EFF_SHAD !TRUE if shading should be active considering actual rad ! LOGICAL :: GALB_ONLY INTEGER :: JJ ! loop index REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_SOLAR_ABS' , 0 , ZHOOK_HANDLE ) ! GALB_ONLY = . FALSE . IF ( PRESENT ( OALB_ONLY )) GALB_ONLY = OALB_ONLY ! ZDIR_SW = MAX ( PDIR_SW , 0. ) ZSCA_SW = MAX ( PSCA_SW , 0.000001 ) ! ZRD_DIR = T % XROAD_DIR (:) * XPI / 18 0. ! DO JJ = 1 , SIZE ( T % XROAD ) ! IF ( T % XROAD ( JJ ) + T % XGARDEN ( JJ ). NE . 0. ) THEN ZRD ( JJ ) = T % XROAD ( JJ ) / ( T % XROAD ( JJ ) + T % XGARDEN ( JJ )) ZGD ( JJ ) = T % XGARDEN ( JJ ) / ( T % XROAD ( JJ ) + T % XGARDEN ( JJ )) ELSE ZRD ( JJ ) = 0. ZGD ( JJ ) = 0. ENDIF ! !------------------------------------------------------------------------------- ! !*      1.     SOLAR RADIATIONS FOR ROOFS !              -------------------------- ! !* One supposes that solar panels, if present, intercept all solar radiation ! ZABS_DIR_SW_PANEL ( JJ ) = ZDIR_SW ( JJ ) * ( 1. - PALB_PANEL ( JJ )) ZABS_SCA_SW_PANEL ( JJ ) = ZSCA_SW ( JJ ) * ( 1. - PALB_PANEL ( JJ )) ! !* solar energy received by the surfaces below solar panels ZABS_DIR_SW_RF ( JJ ) = ZDIR_SW ( JJ ) * ( 1. - T % XALB_ROOF ( JJ )) * ( 1. - PFRAC_PANEL ( JJ )) ZABS_DIR_SW_SN_RF ( JJ ) = ZDIR_SW ( JJ ) * ( 1. - T % TSNOW_ROOF % ALB ( JJ )) * ( 1. - PFRAC_PANEL ( JJ )) ZABS_DIR_SW_GRF ( JJ ) = ZDIR_SW ( JJ ) * ( 1. - PALB_GRF ( JJ )) * ( 1. - PFRAC_PANEL ( JJ )) ZABS_SCA_SW_RF ( JJ ) = ZSCA_SW ( JJ ) * ( 1. - T % XALB_ROOF ( JJ )) * ( 1. - PFRAC_PANEL ( JJ )) ZABS_SCA_SW_SN_RF ( JJ ) = ZSCA_SW ( JJ ) * ( 1. - T % TSNOW_ROOF % ALB ( JJ )) * ( 1. - PFRAC_PANEL ( JJ )) ZABS_SCA_SW_GRF ( JJ ) = ZSCA_SW ( JJ ) * ( 1. - PALB_GRF ( JJ )) * ( 1. - PFRAC_PANEL ( JJ )) ! !------------------------------------------------------------------------------- ! !*      2.     SOLAR RADIATIONS FOR ROADS AND WALLS !              ------------------------------------ ! IF ( ABS ( 0.5 * XPI - PZENITH ( JJ )) < 1.E-6 ) THEN IF ( 0.5 * XPI - PZENITH ( JJ ) > 0. ) ZTANZEN ( JJ ) = TAN ( 0.5 * XPI - 1.E-6 ) IF ( 0.5 * XPI - PZENITH ( JJ ) <= 0. ) ZTANZEN ( JJ ) = TAN ( 0.5 * XPI + 1.E-6 ) ELSEIF ( ABS ( PZENITH ( JJ )) < 1.E-6 ) THEN ZTANZEN ( JJ ) = SIGN ( 1. , PZENITH ( JJ )) * TAN ( 1.E-6 ) ELSE ZTANZEN ( JJ ) = TAN ( PZENITH ( JJ )) ENDIF ! ! IF ( T % XBLD ( JJ ) . GT . 0. ) THEN ! !*      2.1    radiation coefficients !              ---------------------- ! IF ( TOP % CROAD_DIR == 'UNIF' ) THEN ZTHETA0 ( JJ ) = ASIN ( MIN ( ABS ( 1. / ZTANZEN ( JJ )) / T % XCAN_HW_RATIO ( JJ ), 1. ) ) ! !*      2.2    direct solar radiation received by roads and GARDEN areas !               ------------------------------------------------------- ! ZDIR_SW_RD ( JJ ) = ( ZDIR_SW ( JJ ) * 2. * ZTHETA0 ( JJ ) / XPI & - ZDIR_SW ( JJ ) * 2. * ZTANZEN ( JJ ) / XPI & * T % XCAN_HW_RATIO ( JJ ) * ( 1. - COS ( ZTHETA0 ( JJ ))) ) ! ZDIR_SW_GD ( JJ ) = ( ZDIR_SW ( JJ ) * 2. * ZTHETA0 ( JJ ) / XPI & - ZDIR_SW ( JJ ) * 2. * ZTANZEN ( JJ ) / XPI & * T % XCAN_HW_RATIO ( JJ ) * ( 1. - COS ( ZTHETA0 ( JJ ))) ) ELSE ZDIR_SW_RD ( JJ ) = ZDIR_SW ( JJ ) * & MAX ( 0. , 1. - T % XCAN_HW_RATIO ( JJ ) * ZTANZEN ( JJ ) * ABS ( SIN ( PAZIM ( JJ ) - ZRD_DIR ( JJ )))) ZDIR_SW_GD ( JJ ) = ZDIR_SW_RD ( JJ ) END IF ! !*      2.3    direct solar radiation received by walls !              ---------------------------------------- ! ZDIR_SW_WL ( JJ ) = ( ZDIR_SW ( JJ ) - ( ZDIR_SW_RD ( JJ ) * ZRD ( JJ ) + ZDIR_SW_GD ( JJ ) * ZGD ( JJ ))) & * 0.5 / T % XCAN_HW_RATIO ( JJ ) ! ELSE ! ZDIR_SW_RD ( JJ ) = ZDIR_SW ( JJ ) ZDIR_SW_GD ( JJ ) = ZDIR_SW ( JJ ) ZDIR_SW_WL ( JJ ) = 0. ! ENDIF ! IF ( TOP % CROAD_DIR == 'UNIF' . OR . TOP % CWALL_OPT == 'UNIF' ) THEN !* if walls are averaged, then ZDIR_SW_WL_A ( JJ ) = ZDIR_SW_WL ( JJ ) ZDIR_SW_WL_B ( JJ ) = ZDIR_SW_WL ( JJ ) ELSE !* if walls are separated, then radiation reaches the wall facing sun ! Note that wall A is the one facing mostly to the South (depending to ! road orientation), and wall B in the one facing mostly to the North ! ! In case of N-S road, wall A is the West  wall (= East-facing  wall), !                  and wall B is the East  wall (= West-facing  wall) ! In case of E-W road, wall A is the North wall (= South-facing wall), !                  and wall B is the South wall (= North-facing wall) IF ( SIN ( PAZIM ( JJ ) - ZRD_DIR ( JJ )) > 0. ) THEN ZDIR_SW_WL_A ( JJ ) = 2. * ZDIR_SW_WL ( JJ ) ZDIR_SW_WL_B ( JJ ) = 0. ELSE ZDIR_SW_WL_A ( JJ ) = 0. ZDIR_SW_WL_B ( JJ ) = 2. * ZDIR_SW_WL ( JJ ) END IF END IF ! ! ! !*      2.4    diffuse solar radiation received by roads and GARDEN areas !              --------------------------------------------------------- ! ZSCA_SW_RD ( JJ ) = ZSCA_SW ( JJ ) * T % XSVF_ROAD ( JJ ) ! ZSCA_SW_GD ( JJ ) = ZSCA_SW ( JJ ) * PSVF_GD ( JJ ) ! !*      2.5    diffuse solar radiation received by walls !              ----------------------------------------- ! ZSCA_SW_WL ( JJ ) = ZSCA_SW ( JJ ) * T % XSVF_WALL ( JJ ) ! !*      2.6    total solar radiation received by GARDEN areas !              --------------------------------------------- ! PSW_RAD_GD ( JJ ) = ZDIR_SW_GD ( JJ ) + ZSCA_SW_GD ( JJ ) ! !*      2.7    averaged albedos when snow is present !              ------------------------------------- ! ZAALB_RD ( JJ ) = PDF_RD ( JJ ) * T % XALB_ROAD ( JJ ) + PDN_RD ( JJ ) * T % TSNOW_ROAD % ALB ( JJ ) ! ! ENDDO ! !*      2.7b    averaged facade albedo !              ------------------------------------- ! IF ( TOP % CBEM == 'BEM' ) THEN ! ZTRAN_WIN (:) = B % XTRAN_WIN (:) ! G_EFF_SHAD (:) = OSHADE (:). AND .( ZDIR_SW_WL (:) + ZSCA_SW_WL (:) > XWIN_SW_MAX ) ! OSHAD_DAY (:) = G_EFF_SHAD (:) . OR . OSHAD_DAY (:) ! CALL WINDOW_SHADING ( B % XSHGC , B % XSHGC_SH , OSHAD_DAY , T % XALB_WALL , & B % XABS_WIN , ZABS_WIN , B % XALB_WIN , ZTRAN_WIN ) ! ELSE ! ZABS_WIN (:) = 0. B % XALB_WIN (:) = 0. ZTRAN_WIN (:) = 0. ! ENDIF ! ZAALB_WL (:) = B % XGR (:) * B % XALB_WIN (:) + ( 1. - B % XGR (:)) * T % XALB_WALL (:) ! !*      2.8    absorption of direct incoming solar radiation !              --------------------------------------------- ! ! CALL SOLAR_REFLECTIONS ( ZDIR_SW_RD , ZDIR_SW_WL , ZDIR_SW_GD , ZABS_DIR_SW_RD , & ZABS_DIR_SW_SN_RD , ZABS_DIR_SW_WL , ZABS_DIR_SW_GD , & ZABS_DIR_SW_WIN ) ! IF ( TOP % CROAD_DIR == 'UNIF' . OR . TOP % CWALL_OPT == 'UNIF' ) THEN !* if walls are averaged, then ZABS_DIR_SW_WL_A = ZABS_DIR_SW_WL ZABS_DIR_SW_WL_B = ZABS_DIR_SW_WL ELSE !* if walls are separated, then radiation reaches the wall facing sun ! Note that wall A is the one facing mostly to the North (depending to ! road orientation), and wall B in the one facing mostly to the South. ZDW = ( 1. - T % XALB_WALL (:)) * ZAALB_WL (:) * ( 1. - 2. * T % XSVF_WALL (:)) & / ( 1. + ZAALB_WL (:) * ( 1. - 2. * T % XSVF_WALL (:))) & * 0.5 * ( ZDIR_SW_WL_A (:) - ZDIR_SW_WL_B (:)) & + 0.5 * ( 1. - T % XALB_WALL (:)) * ( ZDIR_SW_WL_A - ZDIR_SW_WL_B ) ZABS_DIR_SW_WL_A = ZABS_DIR_SW_WL + ZDW ZABS_DIR_SW_WL_B = ZABS_DIR_SW_WL - ZDW END IF ! !*      2.9    absorption of diffuse incoming solar radiation !              ---------------------------------------------- ! CALL SOLAR_REFLECTIONS ( ZSCA_SW_RD , ZSCA_SW_WL , ZSCA_SW_GD , & ZABS_SCA_SW_RD , ZABS_SCA_SW_SN_RD , & ZABS_SCA_SW_WL , ZABS_SCA_SW_GD , ZABS_SCA_SW_WIN ) ! ! solar flux reflected for wall and road ! PREF_SW_GRND = ZRD * T % XALB_ROAD / ( 1. - T % XALB_ROAD ) * ( ZABS_DIR_SW_RD + ZABS_SCA_SW_RD ) & + ZGD * PALB_GD / ( 1. - PALB_GD ) * ( ZABS_DIR_SW_GD + ZABS_SCA_SW_GD ) ! PREF_SW_FAC = ( 1 - B % XGR ) * T % XALB_WALL / ( 1. - T % XALB_WALL ) * ( ZABS_DIR_SW_WL + ZABS_SCA_SW_WL ) & + B % XGR * B % XALB_WIN / ( 1 - B % XALB_WIN ) * ( ZABS_DIR_SW_WIN + ZABS_SCA_SW_WIN ) ! !------------------------------------------------------------------------------- ! !*      3.     Town albedo !              ----------- ! !*      3.1    direct albedo !              ------------- ! CALL TOWN_ALBEDO ( ZDIR_SW , ZABS_DIR_SW_RF , ZABS_DIR_SW_SN_RF , & ZABS_DIR_SW_RD , ZABS_DIR_SW_SN_RD , ZABS_DIR_SW_WL , & ZABS_DIR_SW_GD , ZABS_DIR_SW_GRF , ZABS_DIR_SW_WIN , & ZABS_DIR_SW_PANEL , PDIR_ALB_TWN ) ! !*      3.2    direct albedo !              ------------- ! CALL TOWN_ALBEDO ( ZSCA_SW , ZABS_SCA_SW_RF , ZABS_SCA_SW_SN_RF , & ZABS_SCA_SW_RD , ZABS_SCA_SW_SN_RD , ZABS_SCA_SW_WL , & ZABS_SCA_SW_GD , ZABS_SCA_SW_GRF , ZABS_SCA_SW_WIN , & ZABS_SCA_SW_PANEL , PSCA_ALB_TWN ) ! WHERE ( PDIR_ALB_TWN == XUNDEF ) PDIR_ALB_TWN = PSCA_ALB_TWN ! IF ( GALB_ONLY ) THEN IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_SOLAR_ABS' , 1 , ZHOOK_HANDLE ) RETURN ENDIF !------------------------------------------------------------------------------- ! !*      4.     Trivial cases !              ------------- ! WHERE ( PDIR_SW (:) == 0. ) ZABS_DIR_SW_RF (:) = 0. ZABS_DIR_SW_RD (:) = 0. ZABS_DIR_SW_WL_A (:) = 0. ZABS_DIR_SW_WL_B (:) = 0. ZABS_DIR_SW_GD (:) = 0. ZABS_DIR_SW_GRF (:) = 0. ZABS_DIR_SW_PANEL (:) = 0. ZABS_DIR_SW_WIN (:) = 0. ZABS_DIR_SW_SN_RF (:) = 0. ZABS_DIR_SW_SN_RD (:) = 0. END WHERE ! WHERE ( PSCA_SW (:) == 0. ) ZABS_SCA_SW_RF (:) = 0. ZABS_SCA_SW_RD (:) = 0. ZABS_SCA_SW_WL (:) = 0. ZABS_SCA_SW_GD (:) = 0. ZABS_SCA_SW_GRF (:) = 0. ZABS_SCA_SW_PANEL (:) = 0. ZABS_SCA_SW_WIN (:) = 0. ZABS_SCA_SW_SN_RF (:) = 0. ZABS_SCA_SW_SN_RD (:) = 0. END WHERE ! DMT % XABS_SW_ROOF (:) = 0. DMT % XABS_SW_ROAD (:) = 0. DMT % XABS_SW_WALL_A (:) = 0. DMT % XABS_SW_WALL_B (:) = 0. DMT % XABS_SW_GARDEN (:) = 0. DMT % XABS_SW_GREENROOF (:) = 0. DMT % XABS_SW_SNOW_ROOF (:) = 0. DMT % XABS_SW_SNOW_ROAD (:) = 0. IF ( TOP % CBEM == \"BEM\" ) THEN DMT % XABS_SW_WIN (:) = 0. ENDIF ! PREC_SW_WIN (:) = 0. PREC_SW_RD (:) = 0. PREC_SW_WL_A (:) = 0. PREC_SW_WL_B (:) = 0. PREC_SW_GD (:) = 0. PREC_SW_SN_RD (:) = 0. PREC_SW_RF (:) = 0. ! !------------------------------------------------------------------------------- ! ! IF ( TOP % CBEM == 'BEM' ) THEN ! DO JJ = 1 , SIZE ( T % XROAD ) ! ! solar radiation absorbed (but not transmitted) by windows ! ZREC_DIR_SW_WIN ( JJ ) = ZABS_DIR_SW_WIN ( JJ ) / ( 1. - B % XALB_WIN ( JJ )) ZREC_SCA_SW_WIN ( JJ ) = ZABS_SCA_SW_WIN ( JJ ) / ( 1. - B % XALB_WIN ( JJ )) ! PREC_SW_WIN ( JJ ) = ZREC_DIR_SW_WIN ( JJ ) + ZREC_SCA_SW_WIN ( JJ ) ! DMT % XABS_SW_WIN ( JJ ) = ( ZREC_DIR_SW_WIN ( JJ ) + ZREC_SCA_SW_WIN ( JJ )) * ZABS_WIN ( JJ ) ! DMT % XTR_SW_WIN ( JJ ) = PREC_SW_WIN ( JJ ) * ZTRAN_WIN ( JJ ) ! ENDDO ! ENDIF ! DO JJ = 1 , SIZE ( T % XROAD ) ! !*      5.     Total solar radiation absorbed by each surface !              ---------------------------------------------- ! ! solar radiation absorbed by roofs ! DMT % XABS_SW_ROOF ( JJ ) = ZABS_DIR_SW_RF ( JJ ) + ZABS_SCA_SW_RF ( JJ ) ! ! solar radiation absorbed by roads ! DMT % XABS_SW_ROAD ( JJ ) = ZABS_DIR_SW_RD ( JJ ) + ZABS_SCA_SW_RD ( JJ ) ! ! solar radiation absorbed by GARDEN areas ! DMT % XABS_SW_GARDEN ( JJ ) = ZABS_DIR_SW_GD ( JJ ) + ZABS_SCA_SW_GD ( JJ ) ! ! solar radiation absorbed by GRF areas ! DMT % XABS_SW_GREENROOF ( JJ ) = ZABS_DIR_SW_GRF ( JJ ) + ZABS_SCA_SW_GRF ( JJ ) ! ! solar radiation absorbed by walls ! DMT % XABS_SW_WALL_A ( JJ ) = ZABS_DIR_SW_WL_A ( JJ ) + ZABS_SCA_SW_WL ( JJ ) DMT % XABS_SW_WALL_B ( JJ ) = ZABS_DIR_SW_WL_B ( JJ ) + ZABS_SCA_SW_WL ( JJ ) ! ! ! solar radiation absorbed by snow on roofs ! DMT % XABS_SW_SNOW_ROOF ( JJ ) = ZABS_DIR_SW_SN_RF ( JJ ) + ZABS_SCA_SW_SN_RF ( JJ ) ! ! solar radiation absorbed by snow on roads ! DMT % XABS_SW_SNOW_ROAD ( JJ ) = ZABS_DIR_SW_SN_RD ( JJ ) + ZABS_SCA_SW_SN_RD ( JJ ) ! !------------------------------------------------------------------------------- ! !*      6.     total solar radiation received by roads and GARDEN areas !              ------------------------------------------------------- ! PREC_SW_RD ( JJ ) = DMT % XABS_SW_ROAD ( JJ ) / ( 1. - T % XALB_ROAD ( JJ )) ! PREC_SW_SN_RD ( JJ ) = DMT % XABS_SW_SNOW_ROAD ( JJ ) / ( 1. - T % TSNOW_ROAD % ALB ( JJ )) ! PREC_SW_WL_A ( JJ ) = DMT % XABS_SW_WALL_A ( JJ ) / ( 1. - T % XALB_WALL ( JJ )) PREC_SW_WL_B ( JJ ) = DMT % XABS_SW_WALL_B ( JJ ) / ( 1. - T % XALB_WALL ( JJ )) ! PREC_SW_GD ( JJ ) = DMT % XABS_SW_GARDEN ( JJ ) / ( 1. - PALB_GD ( JJ )) ! !*      6.2    total solar radiation received by roof surfaces below solar panels ! PREC_SW_RF ( JJ ) = ( PDIR_SW ( JJ ) + PSCA_SW ( JJ )) * ( 1. - PFRAC_PANEL ( JJ )) ! !------------------------------------------------------------------------------- ! !*      7.     total solar radiation transmitted inside building !*             and energy not ref., nor absorbed, nor transmitted !              -------------------------------------------------- ! !               [W/m2(bld)] PE_SHADING ( JJ ) = PREC_SW_WIN ( JJ ) * ( 1. - B % XALB_WIN ( JJ ) - ZABS_WIN ( JJ ) - ZTRAN_WIN ( JJ )) !               [W/m2(win)] ENDDO ! IF ( TOP % LSOLAR_PANEL ) THEN ! DO JJ = 1 , SIZE ( T % XROAD ) ! ! solar radiation absorbed by solar panels ! DMT % XABS_SW_PANEL ( JJ ) = ZABS_DIR_SW_PANEL ( JJ ) + ZABS_SCA_SW_PANEL ( JJ ) ! ENDDO ! ENDIF ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_SOLAR_ABS' , 1 , ZHOOK_HANDLE ) CONTAINS ! !------------------------------------------------------------------------------- SUBROUTINE SOLAR_REFLECTIONS ( ZSW_RD , ZSW_WL , ZSW_GD , ZABS_SW_RD , ZABS_SW_SN_RD , & ZABS_SW_WL , ZABS_SW_GD , ZABS_SW_WIN ) ! REAL , DIMENSION (:), INTENT ( IN ) :: ZSW_RD ! solar radiation received by road, REAL , DIMENSION (:), INTENT ( IN ) :: ZSW_WL ! wall, and GD areas REAL , DIMENSION (:), INTENT ( IN ) :: ZSW_GD ! before reflection REAL , DIMENSION (:), INTENT ( OUT ) :: ZABS_SW_RD ! solar radiation absorbed by REAL , DIMENSION (:), INTENT ( OUT ) :: ZABS_SW_SN_RD ! solar radiation absorbed by REAL , DIMENSION (:), INTENT ( OUT ) :: ZABS_SW_WL ! road, snow over road, and wall REAL , DIMENSION (:), INTENT ( OUT ) :: ZABS_SW_GD ! solar radiation absorbed by garden REAL , DIMENSION (:), INTENT ( OUT ) :: ZABS_SW_WIN ! solar radiation absorbed by window ! REAL , DIMENSION ( SIZE ( ZSW_RD )) :: ZREF0_SW_RD ! first solar reflection REAL , DIMENSION ( SIZE ( ZSW_RD )) :: ZREF0_SW_WL ! against road, wall REAL , DIMENSION ( SIZE ( ZSW_RD )) :: ZREF0_SW_GD ! and GD areas REAL , DIMENSION ( SIZE ( ZSW_RD )) :: ZSREF_SW_RD ! sum of all reflections REAL , DIMENSION ( SIZE ( ZSW_RD )) :: ZSREF_SW_WL ! against road, wall, REAL , DIMENSION ( SIZE ( ZSW_RD )) :: ZSREF_SW_GD ! and GD areas ! REAL , DIMENSION ( SIZE ( ZSW_RD )) :: ZWORK1 , ZWORK2 , ZDENOM INTEGER :: JJ REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'SOLAR_REFLECTIONS' , 0 , ZHOOK_HANDLE ) ! DO JJ = 1 , SIZE ( ZSW_RD ) !*      A.     first solar radiation reflection !              -------------------------------- ! ZREF0_SW_RD ( JJ ) = ZAALB_RD ( JJ ) * ZSW_RD ( JJ ) ! ZREF0_SW_GD ( JJ ) = PALB_GD ( JJ ) * ZSW_GD ( JJ ) ! ZREF0_SW_WL ( JJ ) = ZAALB_WL ( JJ ) * ZSW_WL ( JJ ) ! !*      B.     sum of solar radiation reflected !              -------------------------------- ! ZDENOM ( JJ ) = 1. - ( 1. - 2. * T % XSVF_WALL ( JJ )) * T % XALB_WALL ( JJ ) - ( 1. - T % XSVF_ROAD ( JJ )) * & T % XSVF_WALL ( JJ ) * T % XALB_WALL ( JJ ) * ZAALB_RD ( JJ ) * ZRD ( JJ ) & - ( 1. - PSVF_GD ( JJ )) * & T % XSVF_WALL ( JJ ) * T % XALB_WALL ( JJ ) * PALB_GD ( JJ ) * ZGD ( JJ ) ZWORK1 ( JJ ) = T % XSVF_WALL ( JJ ) * T % XALB_WALL ( JJ ) * ZRD ( JJ ) ZWORK2 ( JJ ) = T % XSVF_WALL ( JJ ) * T % XALB_WALL ( JJ ) * ZGD ( JJ ) ! ! ZSREF_SW_WL ( JJ ) = ( ZREF0_SW_WL ( JJ ) + ZWORK1 ( JJ ) * ZREF0_SW_RD ( JJ ) & + ZWORK2 ( JJ ) * ZREF0_SW_GD ( JJ )) / ZDENOM ( JJ ) ZSREF_SW_RD ( JJ ) = (( 1. - T % XSVF_ROAD ( JJ )) * ZAALB_RD ( JJ ) * ZREF0_SW_WL ( JJ ) & + ( 1. - T % XSVF_ROAD ( JJ )) * ZAALB_RD ( JJ ) * ZWORK1 ( JJ ) * ZREF0_SW_RD ( JJ ) & + ( 1. - T % XSVF_ROAD ( JJ )) * ZAALB_RD ( JJ ) * ZWORK2 ( JJ ) * ZREF0_SW_GD ( JJ )) & / ZDENOM ( JJ ) + ZREF0_SW_RD ( JJ ) ZSREF_SW_GD ( JJ ) = (( 1. - PSVF_GD ( JJ )) * PALB_GD ( JJ ) * ZREF0_SW_WL ( JJ ) & + ( 1. - PSVF_GD ( JJ )) * PALB_GD ( JJ ) * ZWORK1 ( JJ ) * ZREF0_SW_RD ( JJ ) & + ( 1. - PSVF_GD ( JJ )) * PALB_GD ( JJ ) * ZWORK2 ( JJ ) * ZREF0_SW_GD ( JJ ) )& / ZDENOM ( JJ ) + ZREF0_SW_GD ( JJ ) ! !*      C.     total solar radiation received by roads and GD areas !              ------------------------------------------------------- ! ZABS_SW_RD ( JJ ) = ( 1. - T % XALB_ROAD ( JJ )) * ( ZSW_RD ( JJ ) + ZSREF_SW_WL ( JJ ) * ( 1. - T % XSVF_ROAD ( JJ ))) ! ZABS_SW_SN_RD ( JJ ) = ( 1. - T % TSNOW_ROAD % ALB ( JJ )) * & ( ZSW_RD ( JJ ) + ZSREF_SW_WL ( JJ ) * ( 1. - T % XSVF_ROAD ( JJ ))) ! ZABS_SW_GD ( JJ ) = ( 1. - PALB_GD ( JJ )) * ( ZSW_GD ( JJ ) + ZSREF_SW_WL ( JJ ) * ( 1. - PSVF_GD ( JJ ))) ! ! !*      D.     total solar radiation received by walls !              --------------------------------------- ! ZABS_SW_WL ( JJ ) = ( 1. - T % XALB_WALL ( JJ )) & * ( ZSW_WL ( JJ ) & + ZSREF_SW_RD ( JJ ) * T % XSVF_WALL ( JJ ) * ZRD ( JJ ) & + ZSREF_SW_GD ( JJ ) * T % XSVF_WALL ( JJ ) * ZGD ( JJ ) & + ZSREF_SW_WL ( JJ ) * ( 1. - 2. * T % XSVF_WALL ( JJ )) ) ! ZABS_SW_WIN ( JJ ) = ( 1. - B % XALB_WIN ( JJ )) & * ( ZSW_WL ( JJ ) & + ZSREF_SW_RD ( JJ ) * T % XSVF_WALL ( JJ ) * ZRD ( JJ ) & + ZSREF_SW_GD ( JJ ) * T % XSVF_WALL ( JJ ) * ZGD ( JJ ) & + ZSREF_SW_WL ( JJ ) * ( 1. - 2. * T % XSVF_WALL ( JJ )) ) ! ENDDO ! IF ( LHOOK ) CALL DR_HOOK ( 'SOLAR_REFLECTIONS' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE SOLAR_REFLECTIONS ! !------------------------------------------------------------------------------- ! SUBROUTINE TOWN_ALBEDO ( ZSW , ZABS_SW_RF , ZABS_SW_SN_RF , ZABS_SW_RD , ZABS_SW_SN_RD ,& ZABS_SW_WL , ZABS_SW_GD , ZABS_SW_GRF , ZABS_SW_WIN , & ZABS_SW_PANEL , ZALBEDO ) ! REAL , DIMENSION (:), INTENT ( IN ) :: ZSW ! incoming solar radiation REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_RF ! solar radiation absorbed by roofs REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_RD ! solar radiation absorbed by roads REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_WL ! solar radiation absorbed by walls REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_WIN ! solar radiation absorbed & transmitted by windows REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_GD ! solar radiation absorbed by GARDEN areas REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_GRF ! solar radiation absorbed by green roof areas REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_SN_RF ! solar radiation absorbed by roof snow REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_SN_RD ! solar radiation absorbed by road snow REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_PANEL ! solar radiation absorbed by solar panels REAL , DIMENSION (:), INTENT ( OUT ) :: ZALBEDO ! town averaged albedo REAL , DIMENSION ( SIZE ( ZSW )) :: ZSW_UP ! outgoing solar radiation INTEGER :: JJ REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'TOWN_ALBEDO' , 0 , ZHOOK_HANDLE ) DO JJ = 1 , SIZE ( ZSW ) ZSW_UP ( JJ ) = ZSW ( JJ ) & - ( T % XBLD ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * PDF_RF ( JJ ) * ZABS_SW_RF ( JJ )& + T % XBLD ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * PDN_RF ( JJ ) * ZABS_SW_SN_RF ( JJ )& + T % XBLD ( JJ ) * T % XGREENROOF ( JJ ) * ZABS_SW_GRF ( JJ )& + T % XBLD ( JJ ) * PFRAC_PANEL ( JJ ) * ZABS_SW_PANEL ( JJ )& + T % XROAD ( JJ ) * PDF_RD ( JJ ) * ZABS_SW_RD ( JJ ) & + T % XROAD ( JJ ) * PDN_RD ( JJ ) * ZABS_SW_SN_RD ( JJ )& + T % XGARDEN ( JJ ) * ZABS_SW_GD ( JJ ) & + T % XWALL_O_HOR ( JJ ) * ( 1. - B % XGR ( JJ )) * ZABS_SW_WL ( JJ ) & + T % XWALL_O_HOR ( JJ ) * B % XGR ( JJ ) * ZABS_SW_WIN ( JJ ) ) ! IF ( ZSW ( JJ ) > 0. ) THEN ZALBEDO ( JJ ) = ZSW_UP ( JJ ) / ZSW ( JJ ) ELSE ZALBEDO ( JJ ) = XUNDEF END IF ! ENDDO IF ( LHOOK ) CALL DR_HOOK ( 'TOWN_ALBEDO' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE TOWN_ALBEDO ! !------------------------------------------------------------------------------- ! END SUBROUTINE URBAN_SOLAR_ABS","tags":"","loc":"sourcefile/urban_solar_abs.f90.html"},{"title":"modd_ch_isban.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_CH_ISBA_n Source Code modd_ch_isban.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ##################### MODULE MODD_CH_ISBA_n !     ###################### ! !! !!    PURPOSE !!    ------- ! ! ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! ! !!    AUTHOR !!    ------ !!  P. Tulet   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!  16/07/03 (P. Tulet)  restructured for externalization !------------------------------------------------------------------------------ ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_SV_n , ONLY : SV_t , SV_INIT ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE CH_ISBA_t ! CHARACTER ( LEN = 28 ) :: CCHEM_SURF_FILE ! name of general (chemical) purpose ASCII input file CHARACTER ( LEN = 6 ) :: CCH_DRY_DEP !  deposition scheme REAL , DIMENSION (:,:), POINTER :: XDEP ! final dry deposition ! velocity  for nature REAL , DIMENSION (:), POINTER :: XSOILRC_SO2 ! for SO2 REAL , DIMENSION (:), POINTER :: XSOILRC_O3 ! for O3 LOGICAL :: LCH_BIO_FLUX ! flag for the calculation of ! biogenic fluxes LOGICAL :: LCH_NO_FLUX ! flag for the calculation of ! biogenic NO fluxes TYPE ( SV_t ) :: SVI CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CCH_NAMES ! NAME OF CHEMICAL SPECIES ! (FOR DIAG ONLY) CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CAER_NAMES ! NAME OF CHEMICAL SPECIES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CDSTNAMES ! NAME OF CHEMICAL SPECIES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CSLTNAMES ! NAME OF CHEMICAL SPECIES ! END TYPE CH_ISBA_t ! TYPE CH_ISBA_NP_t ! TYPE ( CH_ISBA_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE CH_ISBA_NP_t ! CONTAINS ! SUBROUTINE CH_ISBA_INIT ( YCH_ISBA ) TYPE ( CH_ISBA_t ), INTENT ( INOUT ) :: YCH_ISBA REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_ISBA_N:CH_ISBA_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YCH_ISBA % XDEP ) NULLIFY ( YCH_ISBA % XSOILRC_SO2 ) NULLIFY ( YCH_ISBA % XSOILRC_O3 ) NULLIFY ( YCH_ISBA % CCH_NAMES ) NULLIFY ( YCH_ISBA % CAER_NAMES ) NULLIFY ( YCH_ISBA % CDSTNAMES ) NULLIFY ( YCH_ISBA % CSLTNAMES ) YCH_ISBA % CCHEM_SURF_FILE = ' ' YCH_ISBA % CCH_DRY_DEP = ' ' YCH_ISBA % LCH_BIO_FLUX = . FALSE . YCH_ISBA % LCH_NO_FLUX = . FALSE . CALL SV_INIT ( YCH_ISBA % SVI ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_ISBA_N:CH_ISBA_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_ISBA_INIT ! SUBROUTINE CH_ISBA_NP_INIT ( YCH_ISBA_NP , KPATCH ) TYPE ( CH_ISBA_NP_t ), INTENT ( INOUT ) :: YCH_ISBA_NP INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_ISBA_N:CH_ISBA_NP_INIT\" , 0 , ZHOOK_HANDLE ) ! IF ( ASSOCIATED ( YCH_ISBA_NP % AL )) THEN DO JP = 1 , KPATCH CALL CH_ISBA_INIT ( YCH_ISBA_NP % AL ( JP )) ENDDO DEALLOCATE ( YCH_ISBA_NP % AL ) ELSE ALLOCATE ( YCH_ISBA_NP % AL ( KPATCH )) DO JP = 1 , KPATCH CALL CH_ISBA_INIT ( YCH_ISBA_NP % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_ISBA_N:CH_ISBA_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_ISBA_NP_INIT ! END MODULE MODD_CH_ISBA_n","tags":"","loc":"sourcefile/modd_ch_isban.f90.html"},{"title":"modd_canopy_turb.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_CANOPY_TURB Source Code modd_canopy_turb.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################ MODULE MODD_CANOPY_TURB !     ################ ! !!****  *MODD_CANOPY_TURB - declaration of surface parameters for urban canopy !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       07/2006 ! !*       0.   DECLARATIONS !             ------------ ! IMPLICIT NONE ! !--------------------------------------------------------------------------- REAL , SAVE :: XTKEMIN ! mimimum value for the TKE REAL , SAVE :: XCEP ! Constant for wind pressure-correlations REAL , SAVE :: XCED ! constant into the dissipation term of the TKE eq. REAL , SAVE :: XALPSBL ! constant linking TKE and friction velocity in the SBL REAL , SAVE :: XA0 ! Constant a0 for wind pressure-correlations REAL , SAVE :: XCTP ! Constant for temperature and vapor pressure-correlations !--------------------------------------------------------------------------- REAL , SAVE :: XCMFS ! constant for the momentum flux due to shear ! REAL , SAVE :: XCSHF ! constant for the sensible heat flux ! REAL , SAVE :: XASBL ! constant used to define mixing length in the SBL ! !--------------------------------------------------------------------------- ! END MODULE MODD_CANOPY_TURB","tags":"","loc":"sourcefile/modd_canopy_turb.f90.html"},{"title":"spll_modi_vegetation_evol.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_VEGETATION_EVOL Source Code spll_modi_vegetation_evol.f90 Source Code !auto_modi:spll_vegetation_evol.D MODULE MODI_VEGETATION_EVOL INTERFACE SUBROUTINE VEGETATION_EVOL ( IO , DTI , PK , PEK , OAGRIP , PTSTEP , KMONTH , KDAY , PTIME , & PLAT , PRHOA , P_CO2 , ISSK , PRESP_BIOMASS_INST , PSWDIR ) USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t USE MODD_DATA_ISBA_n , ONLY : DATA_ISBA_t USE MODD_ISBA_n , ONLY : ISBA_P_t , ISBA_PE_t USE MODD_SSO_n , ONLY : SSO_t USE MODD_TYPE_DATE_SURF IMPLICIT NONE TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: IO TYPE ( DATA_ISBA_t ), INTENT ( INOUT ) :: DTI TYPE ( ISBA_P_t ), INTENT ( INOUT ) :: PK TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK LOGICAL , INTENT ( IN ) :: OAGRIP ! agricultural practices REAL , INTENT ( IN ) :: PTSTEP ! time step INTEGER , INTENT ( IN ) :: KMONTH ! current month INTEGER , INTENT ( IN ) :: KDAY ! current day REAL , INTENT ( IN ) :: PTIME ! current time since midnight REAL , DIMENSION (:), INTENT ( IN ) :: PLAT ! latitude of each grid point REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density REAL , DIMENSION (:), INTENT ( IN ) :: P_CO2 ! CO2 concentration [ppmm] TYPE ( SSO_t ), INTENT ( INOUT ) :: ISSK REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PRESP_BIOMASS_INST ! instantaneous respiration of biomass (kgCO2/kgair m/s) REAL , DIMENSION (:), INTENT ( IN ), OPTIONAL :: PSWDIR ! Global incoming shortwave radiation (W m-2) END SUBROUTINE VEGETATION_EVOL END INTERFACE END MODULE MODI_VEGETATION_EVOL","tags":"","loc":"sourcefile/spll_modi_vegetation_evol.f90.html"},{"title":"modd_tebn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_TEB_n Source Code modd_tebn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################ MODULE MODD_TEB_n !     ################ ! !!****  *MODD_TEB_n - declaration of surface parameters for urban surface !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       01/2004 !!      A. Lemonsu      07/2012         Key for urban hydrology !!      V. Masson       06/2013         splits module in two ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_TYPE_SNOW USE MODD_TYPE_DATE_SURF ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE !-------------------------------------------------------------------------- TYPE TEB_t ! TEB scheme option ! ! Geometric Parameters: ! REAL , POINTER , DIMENSION (:) :: XROAD_DIR ! Road direction (deg from North, clockwise) REAL , POINTER , DIMENSION (:) :: XGARDEN ! fraction of veg in the streets   (-) REAL , POINTER , DIMENSION (:) :: XGREENROOF ! fraction of greenroofs on roofs  (-) REAL , POINTER , DIMENSION (:) :: XBLD ! fraction of buildings            (-) REAL , POINTER , DIMENSION (:) :: XROAD ! fraction of roads                (-) REAL , POINTER , DIMENSION (:) :: XCAN_HW_RATIO ! canyon    h/W                    (-) REAL , POINTER , DIMENSION (:) :: XBLD_HEIGHT ! buildings height 'h'             (m) REAL , POINTER , DIMENSION (:) :: XWALL_O_HOR ! wall surf. / hor. surf.          (-) REAL , POINTER , DIMENSION (:) :: XROAD_O_GRND ! road surf. / (road + garden surf.) (-) REAL , POINTER , DIMENSION (:) :: XGARDEN_O_GRND ! gard. surf. / (road + garden surf.)(-) REAL , POINTER , DIMENSION (:) :: XWALL_O_GRND ! wall surf. / (road + garden surf.) (-) REAL , POINTER , DIMENSION (:) :: XWALL_O_BLD ! wall surf. / bld surf. (-) REAL , POINTER , DIMENSION (:) :: XZ0_TOWN ! roughness length for momentum    (m) REAL , POINTER , DIMENSION (:) :: XSVF_ROAD ! road sky view factor             (-) REAL , POINTER , DIMENSION (:) :: XSVF_GARDEN ! green area sky view factor       (-) REAL , POINTER , DIMENSION (:) :: XSVF_WALL ! wall sky view factor             (-) ! ! Roof parameters ! REAL , POINTER , DIMENSION (:) :: XALB_ROOF ! roof albedo                      (-) REAL , POINTER , DIMENSION (:) :: XEMIS_ROOF ! roof emissivity                  (-) REAL , POINTER , DIMENSION (:,:) :: XHC_ROOF ! roof layers heat capacity        (J/K/m3) REAL , POINTER , DIMENSION (:,:) :: XTC_ROOF ! roof layers thermal conductivity (W/K/m) REAL , POINTER , DIMENSION (:,:) :: XD_ROOF ! depth of roof layers             (m) REAL , POINTER , DIMENSION (:) :: XROUGH_ROOF ! roof roughness coef ! ! ! Road parameters ! REAL , POINTER , DIMENSION (:) :: XALB_ROAD ! road albedo                      (-) REAL , POINTER , DIMENSION (:) :: XEMIS_ROAD ! road emissivity                  (-) REAL , POINTER , DIMENSION (:,:) :: XHC_ROAD ! road layers heat capacity        (J/K/m3) REAL , POINTER , DIMENSION (:,:) :: XTC_ROAD ! road layers thermal conductivity (W/K/m) REAL , POINTER , DIMENSION (:,:) :: XD_ROAD ! depth of road layers             (m) ! ! Wall parameters ! REAL , POINTER , DIMENSION (:) :: XALB_WALL ! wall albedo                      (-) REAL , POINTER , DIMENSION (:) :: XEMIS_WALL ! wall emissivity                  (-) REAL , POINTER , DIMENSION (:,:) :: XHC_WALL ! wall layers heat capacity        (J/K/m3) REAL , POINTER , DIMENSION (:,:) :: XTC_WALL ! wall layers thermal conductivity (W/K/m) REAL , POINTER , DIMENSION (:,:) :: XD_WALL ! depth of wall layers             (m) REAL , POINTER , DIMENSION (:) :: XROUGH_WALL ! wall roughness coef ! ! Building's use type ! REAL , POINTER , DIMENSION (:) :: XRESIDENTIAL ! fraction of Residential use      (-) REAL :: XDT_RES ! target temperature change when unoccupied (K) (residential buildings) REAL :: XDT_OFF ! target temperature change when unoccupied (K) (offices buildings) ! ! anthropogenic fluxes ! REAL , POINTER , DIMENSION (:) :: XH_TRAFFIC ! anthropogenic sensible !                                                  ! heat fluxes due to traffic       (W/m2) REAL , POINTER , DIMENSION (:) :: XLE_TRAFFIC ! anthropogenic latent !                                                  ! heat fluxes due to traffic       (W/m2) REAL , POINTER , DIMENSION (:) :: XH_INDUSTRY ! anthropogenic sensible !                                                  ! heat fluxes due to factories     (W/m2) REAL , POINTER , DIMENSION (:) :: XLE_INDUSTRY ! anthropogenic latent !                                                  ! heat fluxes due to factories     (W/m2) ! ! temperatures for boundary conditions ! REAL , POINTER , DIMENSION (:) :: XTI_ROAD ! road interior temperature        (K) ! ! Prognostic variables: ! REAL , POINTER , DIMENSION (:) :: XWS_ROOF ! roof water reservoir             (kg/m2) REAL , POINTER , DIMENSION (:) :: XWS_ROAD ! road water reservoir             (kg/m2) REAL , POINTER , DIMENSION (:,:) :: XT_ROOF ! roof layer temperatures          (K) REAL , POINTER , DIMENSION (:,:) :: XT_ROAD ! road layer temperatures          (K) REAL , POINTER , DIMENSION (:,:) :: XT_WALL_A ! wall layer temperatures          (K) REAL , POINTER , DIMENSION (:,:) :: XT_WALL_B ! wall layer temperatures          (K) ! REAL , POINTER , DIMENSION (:) :: XAC_ROOF ! roof aerodynamic conductance     () REAL , POINTER , DIMENSION (:) :: XAC_ROAD ! road aerodynamic conductance     () REAL , POINTER , DIMENSION (:) :: XAC_WALL ! wall aerodynamic conductance     () REAL , POINTER , DIMENSION (:) :: XAC_TOP ! top  aerodynamic conductance     () REAL , POINTER , DIMENSION (:) :: XAC_ROOF_WAT ! water aerodynamic conductance    () REAL , POINTER , DIMENSION (:) :: XAC_ROAD_WAT ! water aerodynamic conductance    () ! REAL , POINTER , DIMENSION (:) :: XQSAT_ROOF ! humidity of saturation for roofs (kg/kg) REAL , POINTER , DIMENSION (:) :: XQSAT_ROAD ! humidity of saturation for roads (kg/kg) ! REAL , POINTER , DIMENSION (:) :: XDELT_ROOF ! humidity of saturation for roofs (-) REAL , POINTER , DIMENSION (:) :: XDELT_ROAD ! humidity of saturation for roads (-) ! ! Semi-prognostic variables: ! REAL , POINTER , DIMENSION (:) :: XT_CANYON ! canyon air temperature           (K) REAL , POINTER , DIMENSION (:) :: XQ_CANYON ! canyon air specific humidity     (kg/kg) ! ! ! Prognostic snow: ! TYPE ( SURF_SNOW ) :: TSNOW_ROOF ! snow state on roofs: !                                                  ! scheme type/option               (-) !                                                  ! number of layers                 (-) !                                                  ! snow (& liq. water) content      (kg/m2) !                                                  ! heat content                     (J/m2) !                                                  ! temperature                      (K) !                                                  ! density                          (kg m-3) TYPE ( SURF_SNOW ) :: TSNOW_ROAD ! snow state on roads: !                                                  ! scheme type/option               (-) !                                                  ! number of layers                 (-) !                                                  ! snow (& liq. water) content      (kg/m2) !                                                  ! heat content                     (J/m2) !                                                  ! temperature                      (K) !                                                  ! density                          (kg m-3) !                                                  ! density                          (kg m-3) TYPE ( SURF_SNOW ) :: TSNOW_GARDEN ! snow state on green areas: !                                                  ! scheme type/option               (-) !                                                  ! number of layers                 (-) !                                                  ! snow (& liq. water) content      (kg/m2) !                                                  ! heat content                     (J/m2) !                                                  ! temperature                      (K) !                                                  ! density                          (kg m-3) ! END TYPE TEB_t TYPE TEB_NP_t ! TYPE ( TEB_t ), POINTER :: AL (:) => NULL () ! END TYPE TEB_NP_t ! CONTAINS !---------------------------------------------------------------------------- ! SUBROUTINE TEB_INIT ( YTEB ) TYPE ( TEB_t ), INTENT ( INOUT ) :: YTEB REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_N:TEB_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YTEB % XROAD_DIR ) NULLIFY ( YTEB % XGARDEN ) NULLIFY ( YTEB % XGREENROOF ) NULLIFY ( YTEB % XBLD ) NULLIFY ( YTEB % XROAD ) NULLIFY ( YTEB % XCAN_HW_RATIO ) NULLIFY ( YTEB % XBLD_HEIGHT ) NULLIFY ( YTEB % XWALL_O_HOR ) NULLIFY ( YTEB % XROAD_O_GRND ) NULLIFY ( YTEB % XGARDEN_O_GRND ) NULLIFY ( YTEB % XWALL_O_GRND ) NULLIFY ( YTEB % XWALL_O_BLD ) NULLIFY ( YTEB % XZ0_TOWN ) NULLIFY ( YTEB % XSVF_ROAD ) NULLIFY ( YTEB % XSVF_GARDEN ) NULLIFY ( YTEB % XSVF_WALL ) NULLIFY ( YTEB % XALB_ROOF ) NULLIFY ( YTEB % XEMIS_ROOF ) NULLIFY ( YTEB % XHC_ROOF ) NULLIFY ( YTEB % XTC_ROOF ) NULLIFY ( YTEB % XD_ROOF ) NULLIFY ( YTEB % XALB_ROAD ) NULLIFY ( YTEB % XEMIS_ROAD ) NULLIFY ( YTEB % XHC_ROAD ) NULLIFY ( YTEB % XTC_ROAD ) NULLIFY ( YTEB % XD_ROAD ) NULLIFY ( YTEB % XALB_WALL ) NULLIFY ( YTEB % XEMIS_WALL ) NULLIFY ( YTEB % XHC_WALL ) NULLIFY ( YTEB % XTC_WALL ) NULLIFY ( YTEB % XD_WALL ) NULLIFY ( YTEB % XH_TRAFFIC ) NULLIFY ( YTEB % XLE_TRAFFIC ) NULLIFY ( YTEB % XH_INDUSTRY ) NULLIFY ( YTEB % XLE_INDUSTRY ) NULLIFY ( YTEB % XTI_ROAD ) NULLIFY ( YTEB % XWS_ROOF ) NULLIFY ( YTEB % XWS_ROAD ) NULLIFY ( YTEB % XT_ROOF ) NULLIFY ( YTEB % XT_ROAD ) NULLIFY ( YTEB % XT_WALL_A ) NULLIFY ( YTEB % XT_WALL_B ) NULLIFY ( YTEB % XAC_ROOF ) NULLIFY ( YTEB % XAC_ROAD ) NULLIFY ( YTEB % XAC_WALL ) NULLIFY ( YTEB % XAC_TOP ) NULLIFY ( YTEB % XAC_ROOF_WAT ) NULLIFY ( YTEB % XAC_ROAD_WAT ) NULLIFY ( YTEB % XQSAT_ROOF ) NULLIFY ( YTEB % XQSAT_ROAD ) NULLIFY ( YTEB % XDELT_ROOF ) NULLIFY ( YTEB % XDELT_ROAD ) NULLIFY ( YTEB % XT_CANYON ) NULLIFY ( YTEB % XQ_CANYON ) NULLIFY ( YTEB % XROUGH_ROOF ) NULLIFY ( YTEB % XROUGH_WALL ) NULLIFY ( YTEB % XRESIDENTIAL ) YTEB % XDT_RES = 0. YTEB % XDT_OFF = 0. IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_N:TEB_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE TEB_INIT ! SUBROUTINE TEB_NP_INIT ( YNTEB , KPATCH ) TYPE ( TEB_NP_t ), INTENT ( INOUT ) :: YNTEB INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_N:TEB_NP_INIT\" , 0 , ZHOOK_HANDLE ) IF (. NOT . ASSOCIATED ( YNTEB % AL )) THEN ALLOCATE ( YNTEB % AL ( KPATCH )) DO JP = 1 , KPATCH CALL TEB_INIT ( YNTEB % AL ( JP )) ENDDO ELSE DO JP = 1 , KPATCH CALL TEB_INIT ( YNTEB % AL ( JP )) ENDDO DEALLOCATE ( YNTEB % AL ) ENDIF IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_N:TEB_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE TEB_NP_INIT END MODULE MODD_TEB_n","tags":"","loc":"sourcefile/modd_tebn.f90.html"},{"title":"modd_data_seafluxn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DATA_SEAFLUX_n Source Code modd_data_seafluxn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ########################## MODULE MODD_DATA_SEAFLUX_n !     ########################## ! !!****  *MODD_DATA_SEAFLUX - declaration of SEAFLUX surface parameters for SEAFLUX scheme !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      P. Le Moigne  *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       09/2007 ! !*       0.   DECLARATIONS !             ------------ ! ! USE MODD_TYPE_DATE_SURF ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE DATA_SEAFLUX_t !------------------------------------------------------------------------------- ! TYPE ( DATE_TIME ), POINTER , DIMENSION (:) :: TDATA_SST ! date of sst field ! !------------------------------------------------------------------------------- ! REAL , POINTER , DIMENSION (:,:) :: XDATA_SST ! sea surface temperature for !                                                   ! each grid mesh                   (-) ! !------------------------------------------------------------------------------- ! INTEGER :: NTIME ! number of time data !                                                   ! for SST ! !------------------------------------------------------------------------------- ! LOGICAL :: LSST_DATA ! flag to use SST data ! !------------------------------------------------------------------------------- END TYPE DATA_SEAFLUX_t CONTAINS ! SUBROUTINE DATA_SEAFLUX_INIT ( YDATA_SEAFLUX ) TYPE ( DATA_SEAFLUX_t ), INTENT ( INOUT ) :: YDATA_SEAFLUX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_SEAFLUX_N:DATA_SEAFLUX_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDATA_SEAFLUX % XDATA_SST ) YDATA_SEAFLUX % NTIME = 0 YDATA_SEAFLUX % LSST_DATA = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_SEAFLUX_N:DATA_SEAFLUX_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DATA_SEAFLUX_INIT END MODULE MODD_DATA_SEAFLUX_n","tags":"","loc":"sourcefile/modd_data_seafluxn.f90.html"},{"title":"spll_modi_floor_layer_e_budget.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_FLOOR_LAYER_E_BUDGET Source Code spll_modi_floor_layer_e_budget.f90 Source Code !auto_modi:spll_floor_layer_e_budget.D MODULE MODI_FLOOR_LAYER_E_BUDGET INTERFACE SUBROUTINE FLOOR_LAYER_E_BUDGET ( B , PTSTEP , PFLX_BLD_FL , PDQS_FL , PIMB_FL , PRADHT_IN , & PRAD_WL_FL , PRAD_RF_FL , PRAD_WIN_FL , PLOAD_FL , & PRAD_FL_MA , PCONV_FL_BLD ) USE MODD_BEM_n , ONLY : BEM_t IMPLICIT NONE TYPE ( BEM_t ), INTENT ( INOUT ) :: B REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_FL !flux from building to floor REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_FL !heat storage inside the floor REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_FL !floor energy residual imbalance for verification REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_FL ! rad. fluxes from roof to floor[W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_WL_FL ! rad. fluxes from wall to floor[W m-2(wall)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_WIN_FL ! rad. fluxes from win to floor[W m-2(win)] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_FL ! solar and internal load to the floor REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_FL_MA ! rad. fluxes from floor to mass [W m-2(floor)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_FL_BLD ! conv. fluxes from floor to bld [W m-2(floor)] END SUBROUTINE FLOOR_LAYER_E_BUDGET END INTERFACE END MODULE MODI_FLOOR_LAYER_E_BUDGET","tags":"","loc":"sourcefile/spll_modi_floor_layer_e_budget.f90.html"},{"title":"modd_diag_evap_isban.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DIAG_EVAP_ISBA_n Source Code modd_diag_evap_isban.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !######################## MODULE MODD_DIAG_EVAP_ISBA_n !######################## ! !!****  *MODD_DIAG_NAT - declaration of packed surface parameters for NAT scheme !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      P. Le Moigne   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       07/11/03 !!      P. Samuelsson  04/2012   MEB ! !*       0.   DECLARATIONS !             ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE DIAG_EVAP_ISBA_t !------------------------------------------------------------------------------ ! LOGICAL :: LSURF_EVAP_BUDGET ! flag for all terms of evaporation LOGICAL :: LWATER_BUDGET ! flag for isba water budget including input ! fluxes (rain and snow) and reservoir tendencies ! !* variables for each patch ! REAL , POINTER , DIMENSION (:) :: XLEG ! latent heat of evaporation over the ground   (W/m2) REAL , POINTER , DIMENSION (:) :: XLEGI ! surface soil ice sublimation                 (W/m2) REAL , POINTER , DIMENSION (:) :: XLEV ! latent heat of evaporation over vegetation   (W/m2) REAL , POINTER , DIMENSION (:) :: XLES ! latent heat of sublimation over the snow     (W/m2) REAL , POINTER , DIMENSION (:) :: XLESL ! latent heat of evaporation over the snow     (W/m2) REAL , POINTER , DIMENSION (:) :: XLER ! evaporation from canopy water interception   (W/m2) REAL , POINTER , DIMENSION (:) :: XLETR ! evapotranspiration of the vegetation         (W/m2) REAL , POINTER , DIMENSION (:) :: XUSTAR ! friction velocity from snow-free !                                               ! surface (ISBA-ES:3-L)                         (m/s REAL , POINTER , DIMENSION (:) :: XSNDRIFT ! blowing snow sublimation (ES or Crocus)      (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XRESTORE ! surface energy budget restore term            (W/m2) REAL , POINTER , DIMENSION (:) :: XDRAIN ! soil drainage flux                           (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XQSB ! lateral subsurface flux (dif option)         (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XRUNOFF ! sub-grid and supersaturation runoff          (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XHORT ! sub-grid Horton runoff from the SGH scheme   (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XRRVEG !  precipitation intercepted by the vegetation (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XMELT ! snow melt                                    (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XMELTADV ! advective energy from snow melt water !                                               ! (ISBA-ES:3-L)                                 (W/m2) REAL , POINTER , DIMENSION (:) :: XIFLOOD ! Floodplains infiltration                     (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XPFLOOD ! Precipitation intercepted by the floodplains (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XLE_FLOOD ! Floodplains evapotration                     (W/m2) REAL , POINTER , DIMENSION (:) :: XLEI_FLOOD ! Floodplains evapotration                     (W/m2) REAL , POINTER , DIMENSION (:) :: XICEFLUX ! ice calving flux                             (kg/m2) REAL , POINTER , DIMENSION (:) :: XDRIP ! dripping from the vegetation reservoir       (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XIRRIG_FLUX ! irrigation rate (as soil input)              (kg/m2/s) ! REAL , POINTER , DIMENSION (:) :: XGPP ! Gross Primary Production                     (kgCO2/m2/s) REAL , POINTER , DIMENSION (:) :: XRESP_AUTO ! Autotrophic respiration                      (kgCO2/m2/s) REAL , POINTER , DIMENSION (:) :: XRESP_ECO ! Ecosystem respiration                        (kgCO2/m2/s) ! ! REAL , POINTER , DIMENSION (:) :: XLELITTER ! MEB: interception evaporation from understory vegetation [W/m2] REAL , POINTER , DIMENSION (:) :: XLELITTERI ! MEB: interception evaporation from understory vegetation [W/m2] REAL , POINTER , DIMENSION (:) :: XDRIPLIT ! REAL , POINTER , DIMENSION (:) :: XRRLIT ! ! REAL , POINTER , DIMENSION (:) :: XLEV_CV ! MEB: total evapotranspiration from vegetation canopy overstory [W/m2] REAL , POINTER , DIMENSION (:) :: XLES_CV ! XLESC MEB: total snow sublimation from vegetation canopy overstory [W/m2] REAL , POINTER , DIMENSION (:) :: XLETR_CV ! MEB: transpiration from overstory canopy vegetation [W/m2] REAL , POINTER , DIMENSION (:) :: XLER_CV ! MEB: interception evaporation from overstory canopy vegetation [W/m2] REAL , POINTER , DIMENSION (:) :: XLE_CV ! XLE_V_C MEB: latent heat flux from vegetation canopy overstory [W/m2] REAL , POINTER , DIMENSION (:) :: XH_CV ! H_V_C MEB: sensible heat flux from vegetation canopy overstory [W/m2] REAL , POINTER , DIMENSION (:) :: XMELT_CV ! MEB: snow melt rate from the overstory snow reservoir [kg/m2/s] REAL , POINTER , DIMENSION (:) :: XFRZ_CV ! MEB: snow refreeze rate from the overstory snow reservoir [kg/m2/s] ! REAL , POINTER , DIMENSION (:) :: XLETR_GV ! MEB: transpiration from understory vegetation [W/m2] REAL , POINTER , DIMENSION (:) :: XLER_GV ! MEB: interception evaporation from understory vegetation [W/m2] REAL , POINTER , DIMENSION (:) :: XLE_GV ! LEG_C MEB: latent heat flux from understory [W/m2] REAL , POINTER , DIMENSION (:) :: XH_GV ! H_G_C MEB: sensible heat flux from understory [W/m2] ! REAL , POINTER , DIMENSION (:) :: XLE_GN ! LE_N_C MEB: latent heat flux from the snow on the ground [W/m2] !      NOTE total latent heat flux from the snowpack !      possibly includes a contribution from snow covering the canopy REAL , POINTER , DIMENSION (:) :: XEVAP_GN ! EVAP_N_C MEB: Total evap from snow on the ground to canopy air space  [kg/m2/s] REAL , POINTER , DIMENSION (:) :: XH_GN ! H_N_C MEB: sensible heat flux from the snow on the ground [W/m2] !      NOTE total sensible heat flux from the snowpack !      possibly includes a contribution from snow covering the canopy REAL , POINTER , DIMENSION (:) :: XSR_GN ! MEB: snow unloading rate from the overstory reservoir [kg/m2/s] REAL , POINTER , DIMENSION (:) :: XSWDOWN_GN ! MEB: total shortwave radiation transmitted through the canopy !      reaching the snowpack/ground understory [W/m2] REAL , POINTER , DIMENSION (:) :: XLWDOWN_GN ! MEB: total shortwave radiation transmitted through and emitted by the canopy !      reaching the snowpack/ground understory (explicit part) [W/m2] ! REAL , POINTER , DIMENSION (:) :: XEVAP_G ! EVAP_G_C MEB: Total evap from ground to canopy air space [kg/m2/s] REAL , POINTER , DIMENSION (:) :: XLE_CA ! LE_C_A MEB: latent heat flux from canopy air space to the atmosphere [W/m2] !      NOTE total latent heat flux to the atmosphere also possibly !      includes a contribution from snow covering the canopy REAL , POINTER , DIMENSION (:) :: XH_CA ! H_C_A MEB: sensible heat flux from canopy air space to the atmosphere [W/m2] !      NOTE total sensible heat flux to the atmosphere also possibly !      includes a contribution from snow covering the canopy ! REAL , POINTER , DIMENSION (:) :: XSWUP ! MEB: net *total* (surface) upwelling shortwave radiation to atmosphere [W/m2] REAL , POINTER , DIMENSION (:) :: XLWUP ! MEB: net *total* (surface) upwelling longwave radiation to atmosphere [W/m2] REAL , POINTER , DIMENSION (:) :: XSWNET_V ! MEB: net vegetation canopy shortwave radiation [W/m2] REAL , POINTER , DIMENSION (:) :: XSWNET_G ! MEB: net ground shortwave radiation [W/m2] REAL , POINTER , DIMENSION (:) :: XSWNET_N ! MEB: net snow shortwave radiation [W/m2] REAL , POINTER , DIMENSION (:) :: XSWNET_NS ! MEB: net snow shortwave radiation for *surface* layer !     (i.e. net snow shortwave radiation less absorbed radiation) [W/m2] REAL , POINTER , DIMENSION (:) :: XLWNET_V ! MEB: net vegetation canopy longwave radiation [W/m2] REAL , POINTER , DIMENSION (:) :: XLWNET_G ! MEB: net ground longwave radiation [W/m2] REAL , POINTER , DIMENSION (:) :: XLWNET_N ! MEB: net snow longwave radiation [W/m2] ! ! REAL , POINTER , DIMENSION (:) :: XDWG ! liquid soil moisture time tendencies         (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XDWGI ! solid soil moisture time tendencies          (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XDWR ! canopy water time tendencies                 (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XDSWE ! snow water equivalent time tendencies        (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XWATBUD ! ISBA water budget                            (kg/m2/s) ! REAL , POINTER , DIMENSION (:) :: XRAINFALL ! input rainfall rate for LWATER_BUDGET        (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XSNOWFALL ! input snowfall rate for LWATER_BUDGET        (kg/m2/s) ! ! Snowfree diagnostics ! REAL , POINTER , DIMENSION (:) :: XRN_SN_FR REAL , POINTER , DIMENSION (:) :: XH_SN_FR REAL , POINTER , DIMENSION (:) :: XLEI_SN_FR REAL , POINTER , DIMENSION (:) :: XLE_SN_FR REAL , POINTER , DIMENSION (:) :: XGFLUX_SN_FR ! REAL , POINTER , DIMENSION (:) :: XLEG_SN_FR REAL , POINTER , DIMENSION (:) :: XLEGI_SN_FR REAL , POINTER , DIMENSION (:) :: XLEV_SN_FR REAL , POINTER , DIMENSION (:) :: XLETR_SN_FR REAL , POINTER , DIMENSION (:) :: XUSTAR_SN_FR REAL , POINTER , DIMENSION (:) :: XLER_SN_FR ! !------------------------------------------------------------------------------ ! END TYPE DIAG_EVAP_ISBA_t ! TYPE DIAG_EVAP_ISBA_NP_t ! TYPE ( DIAG_EVAP_ISBA_t ), POINTER :: AL (:) => NULL () ! END TYPE DIAG_EVAP_ISBA_NP_t ! CONTAINS ! SUBROUTINE DIAG_EVAP_ISBA_NP_INIT ( YNDIAG_EVAP_ISBA , KPATCH ) TYPE ( DIAG_EVAP_ISBA_NP_t ), INTENT ( INOUT ) :: YNDIAG_EVAP_ISBA INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_EVAP_ISBA_N:DIAG_EVAP_ISBA_NP_INIT\" , 0 , ZHOOK_HANDLE ) IF (. NOT . ASSOCIATED ( YNDIAG_EVAP_ISBA % AL )) THEN ALLOCATE ( YNDIAG_EVAP_ISBA % AL ( KPATCH )) DO JP = 1 , KPATCH CALL DIAG_EVAP_ISBA_INIT ( YNDIAG_EVAP_ISBA % AL ( JP )) ENDDO ELSE DO JP = 1 , KPATCH CALL DIAG_EVAP_ISBA_INIT ( YNDIAG_EVAP_ISBA % AL ( JP )) ENDDO DEALLOCATE ( YNDIAG_EVAP_ISBA % AL ) ENDIF IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_EVAP_ISBA_N:DIAG_EVAP_ISBA_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_EVAP_ISBA_NP_INIT ! SUBROUTINE DIAG_EVAP_ISBA_INIT ( DE ) TYPE ( DIAG_EVAP_ISBA_t ), INTENT ( INOUT ) :: DE REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_EVAP_ISBA_N:DIAG_EVAP_ISBA_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( DE % XLEG ) NULLIFY ( DE % XLEGI ) NULLIFY ( DE % XLEV ) NULLIFY ( DE % XLES ) NULLIFY ( DE % XLESL ) NULLIFY ( DE % XLER ) NULLIFY ( DE % XLETR ) NULLIFY ( DE % XUSTAR ) NULLIFY ( DE % XSNDRIFT ) NULLIFY ( DE % XRESTORE ) NULLIFY ( DE % XDRAIN ) NULLIFY ( DE % XQSB ) NULLIFY ( DE % XRUNOFF ) NULLIFY ( DE % XHORT ) NULLIFY ( DE % XRRVEG ) NULLIFY ( DE % XMELT ) NULLIFY ( DE % XMELTADV ) NULLIFY ( DE % XIFLOOD ) NULLIFY ( DE % XPFLOOD ) NULLIFY ( DE % XLE_FLOOD ) NULLIFY ( DE % XLEI_FLOOD ) ! NULLIFY ( DE % XICEFLUX ) ! NULLIFY ( DE % XLELITTER ) NULLIFY ( DE % XLELITTERI ) NULLIFY ( DE % XDRIPLIT ) NULLIFY ( DE % XRRLIT ) NULLIFY ( DE % XLEV_CV ) NULLIFY ( DE % XLES_CV ) NULLIFY ( DE % XLETR_CV ) NULLIFY ( DE % XLER_CV ) NULLIFY ( DE % XLE_CV ) NULLIFY ( DE % XH_CV ) NULLIFY ( DE % XMELT_CV ) NULLIFY ( DE % XFRZ_CV ) NULLIFY ( DE % XLETR_GV ) NULLIFY ( DE % XLER_GV ) NULLIFY ( DE % XLE_GV ) NULLIFY ( DE % XH_GV ) NULLIFY ( DE % XLE_GN ) NULLIFY ( DE % XEVAP_GN ) NULLIFY ( DE % XH_GN ) NULLIFY ( DE % XSR_GN ) NULLIFY ( DE % XSWDOWN_GN ) NULLIFY ( DE % XLWDOWN_GN ) NULLIFY ( DE % XEVAP_G ) NULLIFY ( DE % XLE_CA ) NULLIFY ( DE % XH_CA ) NULLIFY ( DE % XSWUP ) NULLIFY ( DE % XLWUP ) NULLIFY ( DE % XSWNET_V ) NULLIFY ( DE % XSWNET_G ) NULLIFY ( DE % XSWNET_N ) NULLIFY ( DE % XSWNET_NS ) NULLIFY ( DE % XLWNET_V ) NULLIFY ( DE % XLWNET_G ) NULLIFY ( DE % XLWNET_N ) ! NULLIFY ( DE % XDRIP ) NULLIFY ( DE % XIRRIG_FLUX ) NULLIFY ( DE % XGPP ) NULLIFY ( DE % XRESP_AUTO ) NULLIFY ( DE % XRESP_ECO ) NULLIFY ( DE % XDWG ) NULLIFY ( DE % XDWGI ) NULLIFY ( DE % XDWR ) NULLIFY ( DE % XDSWE ) NULLIFY ( DE % XWATBUD ) ! NULLIFY ( DE % XRAINFALL ) NULLIFY ( DE % XSNOWFALL ) ! NULLIFY ( DE % XRN_SN_FR ) NULLIFY ( DE % XH_SN_FR ) NULLIFY ( DE % XLEI_SN_FR ) NULLIFY ( DE % XLE_SN_FR ) NULLIFY ( DE % XGFLUX_SN_FR ) NULLIFY ( DE % XLEG_SN_FR ) NULLIFY ( DE % XLEGI_SN_FR ) NULLIFY ( DE % XLEV_SN_FR ) NULLIFY ( DE % XLETR_SN_FR ) NULLIFY ( DE % XUSTAR_SN_FR ) NULLIFY ( DE % XLER_SN_FR ) DE % LSURF_EVAP_BUDGET = . FALSE . DE % LWATER_BUDGET = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_EVAP_ISBA_N:DIAG_EVAP_ISBA_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_EVAP_ISBA_INIT ! END MODULE MODD_DIAG_EVAP_ISBA_n","tags":"","loc":"sourcefile/modd_diag_evap_isban.f90.html"},{"title":"modd_sltn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_SLT_n Source Code modd_sltn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. MODULE MODD_SLT_n !Purpose: !Declare variables and constants necessary to do the sea salt calculations !Here are only the variables which depend on the grid! ! !Author: Alf Grini / Pierre Tulet ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! TYPE SLT_t REAL , DIMENSION (:), POINTER :: XEMISRADIUS_SLT ! Number median radius for each source mode REAL , DIMENSION (:), POINTER :: XEMISSIG_SLT ! sigma for each source mode END TYPE SLT_t ! CONTAINS ! SUBROUTINE SLT_INIT ( YSLT ) TYPE ( SLT_t ), INTENT ( INOUT ) :: YSLT REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SLT_N:SLT_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YSLT % XEMISRADIUS_SLT ) NULLIFY ( YSLT % XEMISSIG_SLT ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SLT_N:SLT_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE SLT_INIT ! END MODULE MODD_SLT_n","tags":"","loc":"sourcefile/modd_sltn.f90.html"},{"title":"spll_modi_surface_ri.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_SURFACE_RI Source Code spll_modi_surface_ri.f90 Source Code !auto_modi:spll_surface_ri.D MODULE MODI_SURFACE_RI INTERFACE SUBROUTINE SURFACE_RI ( PTG , PQS , PEXNS , PEXNA , PTA , PQA , & PZREF , PUREF , PDIRCOSZW , PVMOD , PRI ) IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PTG ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PQS ! surface specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PEXNA ! exner function REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the wind REAL , DIMENSION (:), INTENT ( IN ) :: PDIRCOSZW ! Cosine of the angle between REAL , DIMENSION (:), INTENT ( OUT ) :: PRI ! Richardson number END SUBROUTINE SURFACE_RI END INTERFACE END MODULE MODI_SURFACE_RI","tags":"","loc":"sourcefile/spll_modi_surface_ri.f90.html"},{"title":"modd_bem_optionn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_BEM_OPTION_n Source Code modd_bem_optionn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################ MODULE MODD_BEM_OPTION_n !     ################ ! !!****  *MODD_BEM_n - declaration of parameters and option for BEM !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      B. Bueno   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       10/2010 !!      G. Pigeon      06/2011 add LSHAD_DAY !!      G. Pigeon      07/2011 add LNATVENT_NIGHT !!      G. Pigeon      08/2011 change from MODD_BLD -> MODD_BEM !!      G. Pigeon      10/2011 add indoor relative surf. and view factors !!      G. Pigeon      09/2012 add TRAN_WIN !!      G. Pigeon      10/2012 add XF_WIN_WIN !!      V. Masson      06/2013 splits module in two ! !*       0.   DECLARATIONS !             ------------ ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE BEM_OPTIONS_t ! BLD scheme option ! ! Number of layers ! INTEGER :: NFLOOR_LAYER ! number of layers in walls CHARACTER ( LEN = 6 ) :: CCOOL_COIL ! type of cooling coil CHARACTER ( LEN = 6 ) :: CHEAT_COIL ! type of heating coil LOGICAL :: LAUTOSIZE ! Flag to activate autosize calculations ! END TYPE BEM_OPTIONS_t ! CONTAINS ! SUBROUTINE BEM_OPTIONS_INIT ( YBEM_OPTIONS ) TYPE ( BEM_OPTIONS_t ), INTENT ( INOUT ) :: YBEM_OPTIONS REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_BEM_N:BEM_OPTIONS_INIT\" , 0 , ZHOOK_HANDLE ) YBEM_OPTIONS % NFLOOR_LAYER = 0 YBEM_OPTIONS % CCOOL_COIL = '      ' YBEM_OPTIONS % CHEAT_COIL = '      ' YBEM_OPTIONS % LAUTOSIZE = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_BEM_N:BEM_OPTIONS_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE BEM_OPTIONS_INIT !---------------------------------------------------------------------------- ! END MODULE MODD_BEM_OPTION_n","tags":"","loc":"sourcefile/modd_bem_optionn.f90.html"},{"title":"modd_oceann.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_OCEAN_n Source Code modd_oceann.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################# MODULE MODD_OCEAN_n !     ################# ! !!****  *MODD_OCEAN_n - declaration of ocean varaiables !!                          for 1D oceanic model !! !!    PURPOSE !!    ------- !     Declaration of ocean varaiables ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      C. Lebeaupin   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       04/2006 !!      Modified       07/2012, P. Le Moigne : CMO1D phasing ! !*       0.   DECLARATIONS !             ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! TYPE OCEAN_t ! ! !   Switche for interactive coupling with oceanic model LOGICAL :: LMERCATOR !set to .true. to initialize oceanic var. from Mercator LOGICAL :: LCURRENT !set to .true. to make initialize ocean state with current LOGICAL :: LPROGSST !set to .true. to make SST evolve with tendance INTEGER :: NTIME_COUPLING ! coupling time frequency INTEGER :: NOCTCOUNT !oceanic model counter REAL :: XOCEAN_TSTEP ! time step of the oceanic 1D model ! ! General surface: ! REAL , POINTER , DIMENSION (:,:) :: XSEAT ! oceanic temperature profiles REAL , POINTER , DIMENSION (:,:) :: XSEAS ! oceanic salinity profiles REAL , POINTER , DIMENSION (:,:) :: XSEAU ! oceanic zonal current profiles REAL , POINTER , DIMENSION (:,:) :: XSEAV ! oceanic meridian current profiles REAL , POINTER , DIMENSION (:,:) :: XSEAE ! oceanic kinetic turbulent energy profiles (&#94;(1/2)) REAL , POINTER , DIMENSION (:,:) :: XSEABATH !bathymetry indice !=1 for free sea water !=0 for sea-bed REAL , POINTER , DIMENSION (:) :: XSEAHMO ! oceanic mixing lengths ! REAL , POINTER , DIMENSION (:,:) :: XLE , XLK ! oceanic mixing lengths REAL , POINTER , DIMENSION (:,:) :: XKMEL , XKMELM ! oceanic mixing coefficients ! REAL , POINTER , DIMENSION (:) :: XSEATEND ! SST tendance ! REAL , POINTER , DIMENSION (:,:) :: XDTFSOL ! Temp tendancy due to solar flux REAL , POINTER , DIMENSION (:) :: XDTFNSOL ! -------------------- non solar flux ! END TYPE OCEAN_t ! CONTAINS ! SUBROUTINE OCEAN_INIT ( YOCEAN ) TYPE ( OCEAN_t ), INTENT ( INOUT ) :: YOCEAN REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_OCEAN_N:OCEAN_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YOCEAN % XSEAT ) NULLIFY ( YOCEAN % XSEAS ) NULLIFY ( YOCEAN % XSEAU ) NULLIFY ( YOCEAN % XSEAV ) NULLIFY ( YOCEAN % XSEAE ) NULLIFY ( YOCEAN % XSEABATH ) NULLIFY ( YOCEAN % XSEAHMO ) NULLIFY ( YOCEAN % XLE ) NULLIFY ( YOCEAN % XLK ) NULLIFY ( YOCEAN % XKMEL ) NULLIFY ( YOCEAN % XKMELM ) NULLIFY ( YOCEAN % XSEATEND ) NULLIFY ( YOCEAN % XDTFNSOL ) NULLIFY ( YOCEAN % XDTFSOL ) YOCEAN % LMERCATOR = . FALSE . YOCEAN % LCURRENT = . FALSE . YOCEAN % LPROGSST = . FALSE . YOCEAN % NTIME_COUPLING = 0 YOCEAN % NOCTCOUNT = 0 YOCEAN % XOCEAN_TSTEP = 5 * 6 0. IF ( LHOOK ) CALL DR_HOOK ( \"MODD_OCEAN_N:OCEAN_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE OCEAN_INIT END MODULE MODD_OCEAN_n","tags":"","loc":"sourcefile/modd_oceann.f90.html"},{"title":"spll_modi_ini_surf_csts.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_INI_SURF_CSTS Source Code spll_modi_ini_surf_csts.f90 Source Code !auto_modi:spll_ini_surf_csts.D MODULE MODI_INI_SURF_CSTS INTERFACE SUBROUTINE INI_SURF_CSTS END SUBROUTINE INI_SURF_CSTS END INTERFACE END MODULE MODI_INI_SURF_CSTS","tags":"","loc":"sourcefile/spll_modi_ini_surf_csts.f90.html"},{"title":"flag_gr_snow.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines FLAG_GR_SNOW Source Code flag_gr_snow.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE FLAG_GR_SNOW ( KFLAG , OMASK , TPSNOW ) !     ########################################################## ! !!****  *FLAG_GR_SNOW* - routine to flag snow surface fields !! !!    PURPOSE !!    ------- !       Initialize snow surface fields. ! !!**  METHOD !!    ------ !! !! !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original       10/2011 !!      P. Samuelsson  07/2014 Added snow albedos !----------------------------------------------------------------------------- ! !*       0.    DECLARATIONS ! USE MODD_TYPE_SNOW ! USE MODD_SURF_PAR , ONLY : XUNDEF ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*       0.1   declarations of arguments ! INTEGER , INTENT ( IN ) :: KFLAG ! 1 : to put physical values to run ISBA afterwards !                            ! 2 : to flag with XUNDEF value for points wihtout LOGICAL , DIMENSION (:), INTENT ( IN ) :: OMASK ! T: points where snow values !                                          !    must be flagged TYPE ( SURF_SNOW ), INTENT ( INOUT ) :: TPSNOW ! snow characteristics ! !*       0.2   declarations of local variables ! REAL :: ZVAL INTEGER :: JLAYER REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'FLAG_GR_SNOW' , 0 , ZHOOK_HANDLE ) ! IF ( KFLAG == 1 ) THEN ZVAL = 0. ELSEIF ( KFLAG == 2 ) THEN ZVAL = XUNDEF ENDIF ! DO JLAYER = 1 , TPSNOW % NLAYER ! WHERE ( OMASK (:)) TPSNOW % WSNOW (:, JLAYER ) = ZVAL ! IF ( KFLAG == 1 ) THEN ! WHERE ( OMASK (:)) TPSNOW % RHO (:, JLAYER ) = XUNDEF ! IF ( SIZE ( TPSNOW % TEMP ) > 0 ) THEN WHERE ( OMASK (:)) TPSNOW % TEMP (:, JLAYER ) = XUNDEF TPSNOW % HEAT (:, JLAYER ) = XUNDEF END WHERE ENDIF ! IF ( SIZE ( TPSNOW % T ) > 0 ) WHERE ( OMASK (:)) TPSNOW % T (:, JLAYER ) = XUNDEF ! IF ( SIZE ( TPSNOW % GRAN1 ) > 0 ) THEN WHERE ( OMASK (:)) TPSNOW % GRAN1 (:, JLAYER ) = XUNDEF TPSNOW % GRAN2 (:, JLAYER ) = XUNDEF TPSNOW % HIST (:, JLAYER ) = XUNDEF TPSNOW % AGE (:, JLAYER ) = XUNDEF END WHERE END IF ! ENDIF ! ENDDO ! IF ( KFLAG == 1 ) THEN ! WHERE ( OMASK (:)) TPSNOW % ALB (:) = XUNDEF WHERE ( OMASK (:)) TPSNOW % ALBVIS (:) = XUNDEF WHERE ( OMASK (:)) TPSNOW % ALBNIR (:) = XUNDEF WHERE ( OMASK (:)) TPSNOW % ALBFIR (:) = XUNDEF ! IF ( SIZE ( TPSNOW % EMIS ) > 0 ) THEN WHERE ( OMASK (:)) TPSNOW % EMIS (:) = XUNDEF TPSNOW % TS (:) = XUNDEF END WHERE END IF ! ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( 'FLAG_GR_SNOW' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE FLAG_GR_SNOW","tags":"","loc":"sourcefile/flag_gr_snow.f90.html"},{"title":"spll_modi_solar_panel.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_SOLAR_PANEL Source Code spll_modi_solar_panel.f90 Source Code !auto_modi:spll_solar_panel.D MODULE MODI_SOLAR_PANEL INTERFACE SUBROUTINE SOLAR_PANEL ( TPN , DMT , PTSTEP , PTSUN , PRESIDENTIAL , PEMIT_LW_ROOF , & PEMIT_LWDN_PANEL , PLW_RAD , PTA , PN_FLOOR , PPROD_BLD ) USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t IMPLICIT NONE TYPE ( TEB_PANEL_t ), INTENT ( INOUT ) :: TPN TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT REAL , INTENT ( IN ) :: PTSTEP ! time step  (s) REAL , DIMENSION (:), INTENT ( IN ) :: PTSUN ! solar time (s since solar midnight) REAL , DIMENSION (:), INTENT ( IN ) :: PRESIDENTIAL ! Buildings Residential use fraction        (-) REAL , DIMENSION (:), INTENT ( IN ) :: PEMIT_LW_ROOF ! Upwards   LW flux from roof               (W/m2) REAL , DIMENSION (:), INTENT ( IN ) :: PEMIT_LWDN_PANEL ! Downwards LW flux from panel              (W/m2) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! Incoming Longwave radiation               (W/m2) REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! Air temperature                           (K) REAL , DIMENSION (:), INTENT ( IN ) :: PN_FLOOR ! number of floors                          (-) REAL , DIMENSION (:), INTENT ( OUT ) :: PPROD_BLD END SUBROUTINE SOLAR_PANEL END INTERFACE END MODULE MODI_SOLAR_PANEL","tags":"","loc":"sourcefile/spll_modi_solar_panel.f90.html"},{"title":"mode_pos_surf.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODE_POS_SURF Source Code mode_pos_surf.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !!    ############### MODULE MODE_POS_SURF !!    ############### !! USE MODI_ABOR1_SFX ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! INTERFACE POS !! MODULE PROCEDURE POSNAM MODULE PROCEDURE POSKEY !! END INTERFACE !! !! CONTAINS !! !!    ############################################## SUBROUTINE POSNAM ( KULNAM , HDNAML , OFOUND , KLUOUT ) !!    ############################################## !! !!*** *POSNAM* !! !!    PURPOSE !!    ------- !     To position namelist file at correct place for reading !     namelist CDNAML. !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !!    IMPLICIT ARGUMENT !!    ----------------- !! !!    REFERENCE !!    ---------- !!       ECMWF Research Department documentation of the IFS (Hamrud) !! !!    AUTHOR !!    ------- !!    I. Mallet  15/10/01 !! !!    MODIFICATIONS !!    -------------- !!       I. Mallet  15/10/01     adaptation to MesoNH (F90 norm) !------------------------------------------------------------------------------ ! IMPLICIT NONE ! !*       0.    DECLARATIONS !              ------------ ! !*       0.1   Declarations of arguments ! INTEGER , INTENT ( IN ) :: KULNAM CHARACTER ( LEN =* ), INTENT ( IN ) :: HDNAML LOGICAL , INTENT ( OUT ) :: OFOUND INTEGER , OPTIONAL , INTENT ( IN ) :: KLUOUT ! !*       0.2   Declarations of local variables ! CHARACTER ( LEN = 120 ) :: YLINE CHARACTER ( LEN = 1 ) :: YLTEST INTEGER :: ILEN , ILEY , INDL , IND1 , IRET INTEGER :: J , JA , JFILE LOGICAL :: LLOPENED ! CHARACTER ( LEN = 1 ), DIMENSION ( 26 ) :: YLO = ( / 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , & 'i' , 'j' , 'k' , 'l' , 'm' , 'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' / ) CHARACTER ( LEN = 1 ), DIMENSION ( 26 ) :: YUP = ( / 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , & 'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' , 'P' , 'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'W' , 'X' , 'Y' , 'Z' / ) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*       1.    POSITION FILE !              ------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_POS_SURF:POSNAM' , 0 , ZHOOK_HANDLE ) OFOUND = . FALSE . ILEN = LEN ( HDNAML ) ! !      CONTINUE READING THE FILE, THEN REWIND IF NOT FOUND DO JFILE = 1 , 2 search_nam : DO YLINE = ' ' READ ( UNIT = KULNAM , FMT = '(A)' , IOSTAT = IRET , END = 100 ) YLINE !   If file does not exist, most compilers would just create it and jump !   to the END label ; but a few of them would report an error: IF ( IRET /= 0 ) THEN INQUIRE ( KULNAM , OPENED = LLOPENED ) IF ( LLOPENED ) THEN IF ( PRESENT ( KLUOUT )) THEN WRITE ( KLUOUT , FMT =* ) 'MODE_POS_SURF : error reading from unit ' ,& KULNAM , ' file ' , HDNAML , ' line ' , YLINE CALL FLUSH ( KLUOUT ) ENDIF CALL ABOR1_SFX ( 'MODE_POS_SURF: read error in namelist file' ) ELSE EXIT search_nam END IF ELSE !     FIRST SEARCH for \"&\" IN THE LINE, THEN CORRECT LINE AND TEST : INDL = INDEX ( YLINE , '&' ) IF ( INDL . NE . 0 ) THEN ILEY = LEN ( YLINE ) DO J = 1 , ILEY DO JA = 1 , 26 IF ( YLINE ( J : J ) == YLO ( JA )) YLINE ( J : J ) = YUP ( JA ) END DO END DO IND1 = INDEX ( YLINE , '&' // HDNAML ) IF ( IND1 . NE . 0 ) THEN YLTEST = YLINE ( IND1 + ILEN + 1 : IND1 + ILEN + 1 ) IF ( YLTEST == ' ' ) THEN !           NAMELIST FOUND : RETURN BACKSPACE ( KULNAM ) OFOUND = . TRUE . IF ( PRESENT ( KLUOUT )) WRITE ( KLUOUT , FMT =* ) '-- namelist ' , HDNAML , ' read' IF ( LHOOK ) CALL DR_HOOK ( 'MODE_POS_SURF:POSNAM' , 1 , ZHOOK_HANDLE ) RETURN ENDIF ENDIF ENDIF ENDIF ENDDO search_nam 100 CONTINUE IF ( JFILE == 1 ) REWIND ( KULNAM ) ENDDO BACKSPACE ( KULNAM ) ! end of file: namelist name not found IF ( PRESENT ( KLUOUT )) & WRITE ( KLUOUT , FMT =* ) & '-- namelist ' , HDNAML , ' not found: default values used if required' IF ( LHOOK ) CALL DR_HOOK ( 'MODE_POS_SURF:POSNAM' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------ END SUBROUTINE POSNAM !! !! !!    ################################################ SUBROUTINE POSKEY ( KULNAM , KLUOUT , HKEYWD1 , HKEYWD2 ) !!    ################################################ !! !!*** *POSKEY* !! !!    PURPOSE !!    ------- !     To position namelist file at correct place after reading !     keyword HKEYWD !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !!    IMPLICIT ARGUMENT !!    ----------------- !! !!    REFERENCE !!    ---------- !! !!    AUTHOR !!    ------- !!       I. Mallet *Meteo-France* !! !!    MODIFICATIONS !!    -------------- !!       Original : 15/10/01 !------------------------------------------------------------------------------ ! IMPLICIT NONE ! !*       0.    DECLARATIONS !              ------------ ! !*       0.1   Declarations of arguments ! INTEGER , INTENT ( IN ) :: KULNAM INTEGER , INTENT ( IN ) :: KLUOUT CHARACTER ( LEN =* ), INTENT ( IN ) :: HKEYWD1 CHARACTER ( LEN =* ), OPTIONAL , INTENT ( IN ) :: HKEYWD2 ! !*       0.2   Declarations of local variables ! CHARACTER ( LEN = 120 ) :: YLINE INTEGER :: ILEN1 , ILEN2 , IRET REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*       1.    POSITION FILE !              ------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_POS_SURF:POSKEY' , 0 , ZHOOK_HANDLE ) REWIND ( KULNAM ) ILEN1 = LEN ( HKEYWD1 ) IF ( PRESENT ( HKEYWD2 )) ILEN2 = LEN ( HKEYWD2 ) ! search_key : DO YLINE = ' ' READ ( UNIT = KULNAM , FMT = '(A)' , IOSTAT = IRET , END = 100 ) YLINE IF ( IRET /= 0 ) THEN WRITE ( KLUOUT , FMT =* ) '-> error when reading line from unit ' , KULNAM ELSE YLINE = ADJUSTL ( YLINE ) IF ( YLINE ( 1 : ILEN1 ) . EQ . HKEYWD1 ( 1 : ILEN1 )) EXIT search_key ENDIF ENDDO search_key ! WRITE ( KLUOUT , FMT =* ) '-- keyword ' , HKEYWD1 , ' found' ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_POS_SURF:POSKEY' , 1 , ZHOOK_HANDLE ) RETURN ! ! end of file: keyword not found 100 CONTINUE IF (. NOT . PRESENT ( HKEYWD2 )) THEN CALL ABOR1_SFX ( 'MODE_POS_SURF: KEYWORD NOT FOUND: ' // HKEYWD1 ) ELSE ! !*       2.    SECOND KEYWORD: POSITION FILE !              ----------------------------- ! REWIND ( KULNAM ) search_key2 : DO YLINE = ' ' READ ( UNIT = KULNAM , FMT = '(A)' , IOSTAT = IRET , END = 101 ) YLINE IF ( IRET /= 0 ) THEN WRITE ( KLUOUT , FMT =* ) '-> error when reading line from unit ' , KULNAM ELSE YLINE = ADJUSTL ( YLINE ) IF ( YLINE ( 1 : ILEN2 ) . EQ . HKEYWD2 ( 1 : ILEN2 )) EXIT search_key2 ENDIF ENDDO search_key2 WRITE ( KLUOUT , FMT =* ) '-- keyword ' , HKEYWD2 , ' found' IF ( LHOOK ) CALL DR_HOOK ( 'MODE_POS_SURF:POSKEY' , 1 , ZHOOK_HANDLE ) RETURN END IF ! end of file: scd keyword not found 101 CONTINUE CALL ABOR1_SFX ( 'MODE_POS_SURF: KEYWORD NOT FOUND: ' // HKEYWD2 ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_POS_SURF:POSKEY' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------ END SUBROUTINE POSKEY ! END MODULE MODE_POS_SURF","tags":"","loc":"sourcefile/mode_pos_surf.f90.html"},{"title":"spll_modi_mass_layer_e_budget.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_MASS_LAYER_E_BUDGET Source Code spll_modi_mass_layer_e_budget.f90 Source Code !auto_modi:spll_mass_layer_e_budget.D MODULE MODI_MASS_LAYER_E_BUDGET INTERFACE SUBROUTINE MASS_LAYER_E_BUDGET ( B , PTSTEP , PFLX_BLD_MA , PDQS_MA , PIMB_MA , PRADHT_IN , & PRAD_WL_MA , PRAD_RF_MA , PRAD_WIN_MA , PLOAD_MA , & PRAD_FL_MA , PCONV_MA_BLD ) USE MODD_BEM_n , ONLY : BEM_t IMPLICIT NONE TYPE ( BEM_t ), INTENT ( INOUT ) :: B REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_MA !flux from building to floor REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_MA !heat storage inside the floor REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_MA !floor energy residual imbalance for verification REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_MA ! rad. fluxes from roof to floor[W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_WL_MA ! rad. fluxes from wall to floor[W m-2(wall)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_WIN_MA ! rad. fluxes from win to floor[W m-2(win)] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_MA ! solar and internal load to the floor REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_FL_MA ! rad. fluxes from floor to mass [W m-2(floor)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_MA_BLD ! conv. fluxes from floor to bld [W m-2(floor)] END SUBROUTINE MASS_LAYER_E_BUDGET END INTERFACE END MODULE MODI_MASS_LAYER_E_BUDGET","tags":"","loc":"sourcefile/spll_modi_mass_layer_e_budget.f90.html"},{"title":"modd_ocean_reln.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_OCEAN_REL_n Source Code modd_ocean_reln.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################## MODULE MODD_OCEAN_REL_n !     ################## ! !     Author : P. Peyrille !!    Date: 01/2012 !! !!  declaration of relaxation field, flag for ocean model ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! TYPE OCEAN_REL_t ! REAL :: XTAU_REL ! Time of relaxation  (s) ! REAL :: XQCORR ! correction coefficient  for surface fluxes  (BArnier et al. 1998) typcial val: 100. ! LOGICAL :: LREL_CUR ! flag for  relxation on current LOGICAL :: LREL_TS ! flag for relaxation on ocean temperature LOGICAL :: LFLUX_NULL ! Flag for testing zero  incoming flux at the surface ! LOGICAL :: LFLX_CORR ! Flag for  flux  correction LOGICAL :: LDIAPYCNAL ! Flag for diapycnal mixing activation ! REAL , POINTER , DIMENSION (:,:) :: XSEAU_REL ! ref. U current  profile (C) REAL , POINTER , DIMENSION (:,:) :: XSEAV_REL ! ref. V current  profile (C) REAL , POINTER , DIMENSION (:,:) :: XSEAT_REL ! ref. temperature  profile (C) REAL , POINTER , DIMENSION (:,:) :: XSEAS_REL ! ---- salinity   ---------- (%) ! END TYPE OCEAN_REL_t ! CONTAINS ! ! ! ! SUBROUTINE OCEAN_REL_INIT ( YOCEAN_REL ) TYPE ( OCEAN_REL_t ), INTENT ( INOUT ) :: YOCEAN_REL REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_OCEAN_REL_N:OCEAN_REL_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YOCEAN_REL % XSEAT_REL ) NULLIFY ( YOCEAN_REL % XSEAS_REL ) NULLIFY ( YOCEAN_REL % XSEAU_REL ) NULLIFY ( YOCEAN_REL % XSEAV_REL ) YOCEAN_REL % XTAU_REL = 0. YOCEAN_REL % XQCORR = 0. YOCEAN_REL % LREL_CUR = . FALSE . YOCEAN_REL % LREL_TS = . FALSE . YOCEAN_REL % LFLUX_NULL = . FALSE . YOCEAN_REL % LFLX_CORR = . FALSE . YOCEAN_REL % LDIAPYCNAL = . FALSE . ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_OCEAN_REL_N:OCEAN_REL_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE OCEAN_REL_INIT ! ! END MODULE MODD_OCEAN_REL_n","tags":"","loc":"sourcefile/modd_ocean_reln.f90.html"},{"title":"spll_modi_urban_snow_evol.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_URBAN_SNOW_EVOL Source Code spll_modi_urban_snow_evol.f90 Source Code !auto_modi:spll_urban_snow_evol.D MODULE MODI_URBAN_SNOW_EVOL INTERFACE SUBROUTINE URBAN_SNOW_EVOL ( T , B , PT_LWCN , PQ_LWCN , PU_LWCN , PTS_RF , PTS_RD , PTS_WL_A , & PTS_WL_B , PPS , PTA , PQA , PRHOA , PLW_RAD , PSR , PZREF , PUREF , & PVMOD , PTSTEP , PZ_LWCN , PDN_RF , PABS_SW_SN_RF , PABS_LW_SN_RF ,& PDN_RD , PABS_SW_SN_RD , PABS_LW_SN_RD , PRNSN_RF , PHSN_RF , & PLESN_RF , PGSN_RF , PMELT_RF , PRNSN_RD , PHSN_RD , PLESN_RD , & PGSN_RD , PMELT_RD , PLW_WA_TO_NR , PLW_WB_TO_NR , PLW_S_TO_NR , & PLW_WIN_TO_NR , PDQS_SN_RF , PDQS_SN_RD ) USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t IMPLICIT NONE TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B REAL , DIMENSION (:), INTENT ( IN ) :: PT_LWCN ! LWCN air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PQ_LWCN ! LWCN air specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PU_LWCN ! LWCN hor. wind REAL , DIMENSION (:), INTENT ( IN ) :: PTS_RF ! roof surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_RD ! road surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WL_A ! wall surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WL_B ! wall surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the first REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PZ_LWCN ! height of forcing REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RF ! snow-covered roof frac. REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_SN_RF ! SW absorbed by roof snow REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_SN_RF ! absorbed IR rad by snow on roof REAL , DIMENSION (:), INTENT ( INOUT ) :: PDN_RD ! snow-covered road frac. REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_SN_RD ! SW absorbed by road snow REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_SN_RD ! absorbed IR rad by snow on road REAL , DIMENSION (:), INTENT ( OUT ) :: PRNSN_RF ! net radiation over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PHSN_RF ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PLESN_RF ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PGSN_RF ! flux under the snow REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT_RF ! snow melt REAL , DIMENSION (:), INTENT ( OUT ) :: PRNSN_RD ! net radiation over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PHSN_RD ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PLESN_RD ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PGSN_RD ! flux under the snow REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT_RD ! snow melt REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_NR ! LW contrib. wall       -> road(snow) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_NR ! LW contrib. wall       -> road(snow) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_NR ! LW contrib. sky        -> road(snow) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_NR ! LW contrib. win       -> road(snow) REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_SN_RF ! Heat storage in snowpack on roofs REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_SN_RD ! Heat storage in snowpack on roads END SUBROUTINE URBAN_SNOW_EVOL END INTERFACE END MODULE MODI_URBAN_SNOW_EVOL","tags":"","loc":"sourcefile/spll_modi_urban_snow_evol.f90.html"},{"title":"facade_e_budget.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines FACADE_E_BUDGET Source Code facade_e_budget.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. SUBROUTINE FACADE_E_BUDGET ( TOP , T , B , DMT , PTSTEP , PDN_RD , PRHOA , PAC_WL , PAC_BLD , & PLW_RAD , PPS , PEXNS , PT_CANYON , PTS_RD , PTSN_RD , PTS_GD , & PTS_FL , PLW_WA_TO_WB , PLW_R_TO_WA , PLW_R_TO_WB , & PLW_G_TO_WA , PLW_G_TO_WB , PLW_S_TO_WA , PLW_S_TO_WB , & PLW_NR_TO_WA , PLW_NR_TO_WB , PLW_WIN_TO_WA , PLW_WIN_TO_WB , & PLW_S_TO_WIN , PLW_WA_TO_WIN , PLW_WB_TO_WIN , PLW_R_TO_WIN ,& PLW_G_TO_WIN , PLW_NR_TO_WIN , PFLX_BLD_WL_A , PDQS_WL_A , & PFLX_BLD_WL_B , PDQS_WL_B , PEMIT_LW_FAC , PIMB_WL , & PRADHT_IN , PRAD_RF_WL , PRAD_RF_WIN , PRAD_WL_FL , & PRAD_WL_MA , PRAD_WIN_FL , PRAD_WIN_MA , PCONV_WL_BLD , & PCONV_WIN_BLD , PAC_WIN , PLOAD_IN_WL , PLOAD_IN_WIN ) ! !   ########################################################################## ! !!****  *FACADE_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evolution of wall and window temperature from !     wall_layer_e_budget et window_e_budget ! ! !!**  METHOD !     ------ ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      G. Pigeon           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    10/11/2011 !!      G. Pigeon     /09/2012: new conv. coef for indoor/outdoor !!      G. Pigeon     /10/2012: new arg. : solar heat load for indoor !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS , ONLY : XCPD ! USE MODI_WALL_LAYER_E_BUDGET USE MODI_WINDOW_E_BUDGET USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT ! REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered fraction on roads REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! rho REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WL ! aerodynamical conductance !                                                 ! between wall and canyon REAL , DIMENSION (:), INTENT ( IN ) :: PAC_BLD ! aerodynamical conductance ! inside the building itself REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface Exner function REAL , DIMENSION (:), INTENT ( IN ) :: PT_CANYON ! air canyon temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_RD ! road surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTSN_RD ! road snow temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GD ! green area surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_FL ! floor layers temperatures [K] ! REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_WB ! LW interactions wall  -> wall (both versions) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WA ! LW interactions road -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WB ! LW interactions road -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WA ! LW interactions garden -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WB ! LW interactions garden -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WA ! LW interactions sky   -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WB ! LW interactions sky   -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WA ! LW interactions road(snow) -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WB ! LW interactions road(snow) -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_WIN ! Radiative heat trasfer coeff wall-window ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_WIN ! Radiative heat trasfer coeff wall-window ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WIN ! Radiative heat trasfer coeff window-sky ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_WA ! Radiative heat trasfer coeff window-wall ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_WB ! Radiative heat trasfer coeff window-wall ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WIN ! Radiative heat trasfer coeff window-road ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WIN ! Radiative heat trasfer coeff window-garden REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WIN ! Radiative heat trasfer coeff window-snow ! REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_WL_A ! flux from bld to wall REAL , DIMENSION (:), INTENT ( INOUT ) :: PDQS_WL_A ! heat storage inside the wall REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_WL_B ! flux from bld to wall REAL , DIMENSION (:), INTENT ( INOUT ) :: PDQS_WL_B ! heat storage inside the wall REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_FAC ! LW flux emitted by the facade (W/m2 of facade) REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_WL ! wall residual energy imbalance ! for verification [W m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_WL ! rad. fluxes from roof to wall [W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_WIN ! rad. fluxes from roof to win [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WL_FL ! rad. fluxes from wall to floor [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WL_MA ! rad. fluxes from wall to mass [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WIN_FL ! rad. fluxes from window to floor [W m-2(win)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WIN_MA ! rad. fluxes from window to mass [W m-2(win)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_WL_BLD ! conv. fluxes from wall to bld [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_WIN_BLD ! conv. fluxes from window to bld [W m-2(wind.)] REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WIN ! window aerodynamic conductance ! REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_IN_WL ! solar + inter. heat gains W/m2 [wall] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_IN_WIN ! solar + inter. heat gains W/m2 [win] !*      0.2    declarations of local variables ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZRAD_WL_WIN ! rad. fluxes between averaged wall and win [W m-2(wall)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZRAD_WL_A_WIN ! rad. fluxes between one wall and win [W m-2(wall)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZEMIS_WIN ! window emissivity REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZEMIT_LW_WIN ! Longwave radiation emitted by the window [W m-2(window)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZEMIT_LW_WL_A ! Longwave radiation emitted by the wall [W m-2(wall)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZEMIT_LW_WL_B ! Longwave radiation emitted by the wall [W m-2(wall)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZTS_WL_A ! surface temperature of wall A at previous time-step REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZTS_WL_B ! surface temperature of wall B at previous time-step REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZTI_WL_A ! internal temperature of wall A at previous time-step REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZTI_WL_B ! internal temperature of wall B at previous time-step REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZTS_WL ! surface temperature of averaged wall at new time-step REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZIMB_WL ! wall residual energy imbalance for verification [W m-2] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZRAD_WL_FL ! rad. fluxes from wall to floor [W m-2(wall)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZRAD_WL_MA ! rad. fluxes from wall to mass [W m-2(wall)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZCONV_WL_BLD ! conv. fluxes from wall to bld [W m-2(wall)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZLW_W_TO_WIN ! Radiative heat trasfer coeff wall-window [W K-1 m-2] INTEGER :: IWL REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'FACADE_E_BUDGET' , 0 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- PRAD_WL_FL = XUNDEF PRAD_WL_MA = XUNDEF PRAD_WIN_FL = XUNDEF PRAD_WIN_MA = XUNDEF PCONV_WL_BLD = XUNDEF PCONV_WIN_BLD = XUNDEF ! !* surface temperature of the opposite wall !  ---------------------------------------- ! ZTS_WL_A (:) = T % XT_WALL_A (:, 1 ) ZTS_WL_B (:) = T % XT_WALL_B (:, 1 ) IWL = SIZE ( T % XT_WALL_A , 2 ) ZTI_WL_A (:) = T % XT_WALL_A (:, IWL ) ZTI_WL_B (:) = T % XT_WALL_B (:, IWL ) ! ! *Convection heat transfer coefficients [W m-2 K-1] from EP Engineering Reference ! -------------------------------------------------------------------------------- ! ! ! *opaque balance of the facade for wall A !  --------------------------------------- ! CALL WALL_LAYER_E_BUDGET ( TOP , T , B , T % XT_WALL_A , ZTS_WL_B , ZTI_WL_B , PTSTEP , PDN_RD , & PRHOA , PAC_WL , PAC_BLD , PLW_RAD , PPS , PEXNS , DMT % XABS_SW_WALL_A ,& PT_CANYON , PTS_RD , PTSN_RD , PTS_GD , PTS_FL , PLW_WA_TO_WB , & PLW_R_TO_WA , PLW_G_TO_WA , PLW_NR_TO_WA , PLW_WIN_TO_WA , & PLW_S_TO_WA , PFLX_BLD_WL_A , PDQS_WL_A , DMT % XABS_LW_WALL_A , & ZEMIT_LW_WL_A , DMT % XH_WALL_A , ZIMB_WL , PRADHT_IN , PRAD_RF_WL , & ZRAD_WL_A_WIN , ZRAD_WL_FL , ZRAD_WL_MA , ZCONV_WL_BLD , & PLOAD_IN_WL ) ! PIMB_WL = 0.5 * ZIMB_WL PRAD_WL_FL = 0.5 * ZRAD_WL_FL PRAD_WL_MA = 0.5 * ZRAD_WL_MA PCONV_WL_BLD = 0.5 * ZCONV_WL_BLD ZRAD_WL_WIN = 0.5 * ZRAD_WL_A_WIN ! ! *opaque balance of the facade for wall B !  --------------------------------------- ! IF ( TOP % CWALL_OPT /= 'UNIF' ) THEN CALL WALL_LAYER_E_BUDGET ( TOP , T , B , T % XT_WALL_B , ZTS_WL_A , ZTI_WL_A , PTSTEP , PDN_RD , & PRHOA , PAC_WL , PAC_BLD , PLW_RAD , PPS , PEXNS , DMT % XABS_SW_WALL_B , & PT_CANYON , PTS_RD , PTSN_RD , PTS_GD , PTS_FL , PLW_WA_TO_WB , & PLW_R_TO_WB , PLW_G_TO_WB , PLW_NR_TO_WB , PLW_WIN_TO_WB , & PLW_S_TO_WB , PFLX_BLD_WL_B , PDQS_WL_B , DMT % XABS_LW_WALL_B , & ZEMIT_LW_WL_B , DMT % XH_WALL_B , ZIMB_WL , PRADHT_IN , PRAD_RF_WL ,& ZRAD_WL_A_WIN , ZRAD_WL_FL , ZRAD_WL_MA , ZCONV_WL_BLD , & PLOAD_IN_WL ) ELSE T % XT_WALL_B = T % XT_WALL_A DMT % XH_WALL_B = DMT % XH_WALL_A DMT % XABS_LW_WALL_B = DMT % XABS_LW_WALL_A PDQS_WL_B = PDQS_WL_A PFLX_BLD_WL_B = PFLX_BLD_WL_A ZEMIT_LW_WL_B = ZEMIT_LW_WL_A END IF ! PIMB_WL = PIMB_WL + 0.5 * ZIMB_WL PRAD_WL_FL = PRAD_WL_FL + 0.5 * ZRAD_WL_FL PRAD_WL_MA = PRAD_WL_MA + 0.5 * ZRAD_WL_MA PCONV_WL_BLD = PCONV_WL_BLD + 0.5 * ZCONV_WL_BLD ZRAD_WL_WIN = ZRAD_WL_WIN + 0.5 * ZRAD_WL_A_WIN ! !------------------------------------------------------------------------------- ! ! *Energy Balance for windows (averaged on both walls) !  --------------------------------------------------- ! IF ( TOP % CBEM == 'DEF' ) THEN ZEMIT_LW_WIN (:) = 0. END IF ! IF ( TOP % CBEM == 'BEM' ) THEN ZEMIS_WIN (:) = 0.84 ! From Engineering Reference documentation p219 ! (see http://apps1.eere.energy.gov/buildings/energyplus/ ZLW_W_TO_WIN (:) = PLW_WA_TO_WIN (:) + PLW_WB_TO_WIN (:) ZTS_WL (:) = XUNDEF WHERE ( ZLW_W_TO_WIN (:) > 0. ) & ZTS_WL (:) = ( PLW_WA_TO_WIN (:) * T % XT_WALL_A (:, 1 ) + PLW_WB_TO_WIN (:) * T % XT_WALL_B (:, 1 ) ) / ZLW_W_TO_WIN (:) CALL WINDOW_E_BUDGET ( B , ZEMIS_WIN , ZLW_W_TO_WIN , PLW_R_TO_WIN , PLW_G_TO_WIN , PLW_NR_TO_WIN , & PLW_S_TO_WIN , PRAD_RF_WIN , ZRAD_WL_WIN , DMT % XABS_SW_WIN , PLW_RAD , PAC_WIN , & PRADHT_IN , PTS_FL , PRHOA , PDN_RD , PT_CANYON , ZTS_WL , PTS_RD , PTSN_RD , & PTS_GD , PRAD_WIN_FL , PRAD_WIN_MA , PCONV_WIN_BLD , ZEMIT_LW_WIN , & DMT % XABS_LW_WIN , PLOAD_IN_WIN ) ENDIF !*        wall, and win emitted LW radiation on snow-free surfaces !         ---------------------------------------------------------------- ! ! PEMIT_LW_FAC (:) = 0.5 * ( ZEMIT_LW_WL_A (:) + ZEMIT_LW_WL_B (:)) * ( 1 - B % XGR (:)) + ZEMIT_LW_WIN (:) * B % XGR (:) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'FACADE_E_BUDGET' , 1 , ZHOOK_HANDLE ) END SUBROUTINE FACADE_E_BUDGET","tags":"","loc":"sourcefile/facade_e_budget.f90.html"},{"title":"spll_modi_flag_gr_snow.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_FLAG_GR_SNOW Source Code spll_modi_flag_gr_snow.f90 Source Code !auto_modi:spll_flag_gr_snow.D MODULE MODI_FLAG_GR_SNOW INTERFACE SUBROUTINE FLAG_GR_SNOW ( KFLAG , OMASK , TPSNOW ) USE MODD_TYPE_SNOW IMPLICIT NONE INTEGER , INTENT ( IN ) :: KFLAG ! 1 : to put physical values to run ISBA afterwards LOGICAL , DIMENSION (:), INTENT ( IN ) :: OMASK ! T: points where snow values TYPE ( SURF_SNOW ), INTENT ( INOUT ) :: TPSNOW ! snow characteristics END SUBROUTINE FLAG_GR_SNOW END INTERFACE END MODULE MODI_FLAG_GR_SNOW","tags":"","loc":"sourcefile/spll_modi_flag_gr_snow.f90.html"},{"title":"modd_data_tebn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DATA_TEB_n Source Code modd_data_tebn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################ MODULE MODD_DATA_TEB_n !     ################ ! !!****  *MODD_DATA_TEB_n - declaration of surface parameters for urban surface !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       01/2004 !!      Modified       08/2012 G. Pigeon ROUGH_WALL, ROUGH_ROOF ! !*       0.   DECLARATIONS !             ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE DATA_TEB_t ! LOGICAL :: LDATA_BLDTYPE LOGICAL :: LDATA_BLD_AGE LOGICAL :: LDATA_USETYPE LOGICAL :: LDATA_GARDEN LOGICAL :: LDATA_GREENROOF LOGICAL :: LDATA_ROAD_DIR LOGICAL :: LDATA_BLD LOGICAL :: LDATA_BLD_HEIGHT LOGICAL :: LDATA_WALL_O_HOR LOGICAL :: LDATA_Z0_TOWN LOGICAL :: LDATA_ALB_ROOF LOGICAL :: LDATA_EMIS_ROOF LOGICAL :: LDATA_HC_ROOF LOGICAL :: LDATA_TC_ROOF LOGICAL :: LDATA_D_ROOF LOGICAL :: LDATA_ALB_ROAD LOGICAL :: LDATA_EMIS_ROAD LOGICAL :: LDATA_HC_ROAD LOGICAL :: LDATA_TC_ROAD LOGICAL :: LDATA_D_ROAD LOGICAL :: LDATA_ALB_WALL LOGICAL :: LDATA_EMIS_WALL LOGICAL :: LDATA_HC_WALL LOGICAL :: LDATA_TC_WALL LOGICAL :: LDATA_D_WALL LOGICAL :: LDATA_H_TRAFFIC LOGICAL :: LDATA_LE_TRAFFIC LOGICAL :: LDATA_LE_INDUSTRY LOGICAL :: LDATA_H_INDUSTRY LOGICAL :: LDATA_ROUGH_ROOF LOGICAL :: LDATA_ROUGH_WALL LOGICAL :: LDATA_RESIDENTIAL LOGICAL :: LDATA_EMIS_PANEL LOGICAL :: LDATA_ALB_PANEL LOGICAL :: LDATA_EFF_PANEL LOGICAL :: LDATA_FRAC_PANEL ! ! Number of layers in the specification of thermal characteristics ! INTEGER :: NPAR_ROOF_LAYER ! number of layers in roofs INTEGER :: NPAR_ROAD_LAYER ! number of layers in roads INTEGER :: NPAR_WALL_LAYER ! number of layers in walls ! ! ! Geometric Parameters: ! INTEGER , POINTER , DIMENSION (:) :: NPAR_BLDTYPE ! type of buidlings INTEGER , POINTER , DIMENSION (:) :: NPAR_BLD_AGE ! date of construction of buildings INTEGER , POINTER , DIMENSION (:) :: NPAR_BLDCODE ! code for buildings (type+age) INTEGER , POINTER , DIMENSION (:) :: NPAR_USETYPE ! type of use in the buildings REAL , POINTER , DIMENSION (:) :: XPAR_GARDEN ! fraction of veg in the streets   (-) REAL , POINTER , DIMENSION (:) :: XPAR_GREENROOF ! fraction of greenroofs on roofs  (-) REAL , POINTER , DIMENSION (:) :: XPAR_ROAD_DIR ! road direction (deg from North, clockwise) REAL , POINTER , DIMENSION (:) :: XPAR_BLD ! fraction of buildings            (-) REAL , POINTER , DIMENSION (:) :: XPAR_BLD_HEIGHT ! buildings height 'h'             (m) REAL , POINTER , DIMENSION (:) :: XPAR_WALL_O_HOR ! wall surf. / hor. surf.          (-) REAL , POINTER , DIMENSION (:) :: XPAR_Z0_TOWN ! roughness length for momentum    (m) ! ! Roof parameters ! REAL , POINTER , DIMENSION (:) :: XPAR_ALB_ROOF ! roof albedo                      (-) REAL , POINTER , DIMENSION (:) :: XPAR_EMIS_ROOF ! roof emissivity                  (-) REAL , POINTER , DIMENSION (:,:) :: XPAR_HC_ROOF ! roof layers heat capacity        (J/K/m3) REAL , POINTER , DIMENSION (:,:) :: XPAR_TC_ROOF ! roof layers thermal conductivity (W/K/m) REAL , POINTER , DIMENSION (:,:) :: XPAR_D_ROOF ! depth of roof layers             (m) REAL , POINTER , DIMENSION (:) :: XPAR_ROUGH_ROOF ! outside roof roughness coef ! ! ! Road parameters ! REAL , POINTER , DIMENSION (:) :: XPAR_ALB_ROAD ! road albedo                      (-) REAL , POINTER , DIMENSION (:) :: XPAR_EMIS_ROAD ! road emissivity                  (-) REAL , POINTER , DIMENSION (:,:) :: XPAR_HC_ROAD ! road layers heat capacity        (J/K/m3) REAL , POINTER , DIMENSION (:,:) :: XPAR_TC_ROAD ! road layers thermal conductivity (W/K/m) REAL , POINTER , DIMENSION (:,:) :: XPAR_D_ROAD ! depth of road layers             (m) ! ! Wall parameters ! REAL , POINTER , DIMENSION (:) :: XPAR_ALB_WALL ! wall albedo                      (-) REAL , POINTER , DIMENSION (:) :: XPAR_EMIS_WALL ! wall emissivity                  (-) REAL , POINTER , DIMENSION (:,:) :: XPAR_HC_WALL ! wall layers heat capacity        (J/K/m3) REAL , POINTER , DIMENSION (:,:) :: XPAR_TC_WALL ! wall layers thermal conductivity (W/K/m) REAL , POINTER , DIMENSION (:,:) :: XPAR_D_WALL ! depth of wall layers             (m) REAL , POINTER , DIMENSION (:) :: XPAR_ROUGH_WALL ! outside wall roughness coef ! ! anthropogenic fluxes ! REAL , POINTER , DIMENSION (:) :: XPAR_H_TRAFFIC ! anthropogenic sensible !                                                  ! heat fluxes due to traffic       (W/m2) REAL , POINTER , DIMENSION (:) :: XPAR_LE_TRAFFIC ! anthropogenic latent !                                                  ! heat fluxes due to traffic       (W/m2) REAL , POINTER , DIMENSION (:) :: XPAR_H_INDUSTRY ! anthropogenic sensible !                                                  ! heat fluxes due to factories     (W/m2) REAL , POINTER , DIMENSION (:) :: XPAR_LE_INDUSTRY ! anthropogenic latent !                                                  ! heat fluxes due to factories     (W/m2) ! solar panels ! REAL , POINTER , DIMENSION (:) :: XPAR_EMIS_PANEL ! emissivity of solar panel      (-) REAL , POINTER , DIMENSION (:) :: XPAR_ALB_PANEL ! albedo     of solar panel      (-) REAL , POINTER , DIMENSION (:) :: XPAR_EFF_PANEL ! efficiency of solar panel      (-) REAL , POINTER , DIMENSION (:) :: XPAR_FRAC_PANEL ! fraction   of solar panel      (-) ! ! fraction of residential use ! REAL , POINTER , DIMENSION (:) :: XPAR_RESIDENTIAL ! fraction of residential use    (-) ! END TYPE DATA_TEB_t CONTAINS ! SUBROUTINE DATA_TEB_INIT ( YDATA_TEB ) TYPE ( DATA_TEB_t ), INTENT ( INOUT ) :: YDATA_TEB REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_TEB_N:DATA_TEB_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDATA_TEB % NPAR_BLDTYPE ) NULLIFY ( YDATA_TEB % NPAR_BLD_AGE ) NULLIFY ( YDATA_TEB % NPAR_BLDCODE ) NULLIFY ( YDATA_TEB % NPAR_USETYPE ) NULLIFY ( YDATA_TEB % XPAR_GARDEN ) NULLIFY ( YDATA_TEB % XPAR_GREENROOF ) NULLIFY ( YDATA_TEB % XPAR_ROAD_DIR ) NULLIFY ( YDATA_TEB % XPAR_BLD ) NULLIFY ( YDATA_TEB % XPAR_BLD_HEIGHT ) NULLIFY ( YDATA_TEB % XPAR_WALL_O_HOR ) NULLIFY ( YDATA_TEB % XPAR_Z0_TOWN ) NULLIFY ( YDATA_TEB % XPAR_ALB_ROOF ) NULLIFY ( YDATA_TEB % XPAR_EMIS_ROOF ) NULLIFY ( YDATA_TEB % XPAR_HC_ROOF ) NULLIFY ( YDATA_TEB % XPAR_TC_ROOF ) NULLIFY ( YDATA_TEB % XPAR_D_ROOF ) NULLIFY ( YDATA_TEB % XPAR_ALB_ROAD ) NULLIFY ( YDATA_TEB % XPAR_EMIS_ROAD ) NULLIFY ( YDATA_TEB % XPAR_HC_ROAD ) NULLIFY ( YDATA_TEB % XPAR_TC_ROAD ) NULLIFY ( YDATA_TEB % XPAR_D_ROAD ) NULLIFY ( YDATA_TEB % XPAR_ALB_WALL ) NULLIFY ( YDATA_TEB % XPAR_EMIS_WALL ) NULLIFY ( YDATA_TEB % XPAR_HC_WALL ) NULLIFY ( YDATA_TEB % XPAR_TC_WALL ) NULLIFY ( YDATA_TEB % XPAR_D_WALL ) NULLIFY ( YDATA_TEB % XPAR_H_TRAFFIC ) NULLIFY ( YDATA_TEB % XPAR_LE_TRAFFIC ) NULLIFY ( YDATA_TEB % XPAR_H_INDUSTRY ) NULLIFY ( YDATA_TEB % XPAR_LE_INDUSTRY ) NULLIFY ( YDATA_TEB % XPAR_ROUGH_ROOF ) NULLIFY ( YDATA_TEB % XPAR_ROUGH_WALL ) NULLIFY ( YDATA_TEB % XPAR_RESIDENTIAL ) NULLIFY ( YDATA_TEB % XPAR_EMIS_PANEL ) NULLIFY ( YDATA_TEB % XPAR_ALB_PANEL ) NULLIFY ( YDATA_TEB % XPAR_EFF_PANEL ) NULLIFY ( YDATA_TEB % XPAR_EMIS_PANEL ) YDATA_TEB % LDATA_BLDTYPE = . FALSE . YDATA_TEB % LDATA_BLD_AGE = . FALSE . YDATA_TEB % LDATA_USETYPE = . FALSE . YDATA_TEB % LDATA_GARDEN = . FALSE . YDATA_TEB % LDATA_GREENROOF = . FALSE . YDATA_TEB % LDATA_ROAD_DIR = . FALSE . YDATA_TEB % LDATA_BLD = . FALSE . YDATA_TEB % LDATA_BLD_HEIGHT = . FALSE . YDATA_TEB % LDATA_WALL_O_HOR = . FALSE . YDATA_TEB % LDATA_Z0_TOWN = . FALSE . YDATA_TEB % LDATA_ALB_ROOF = . FALSE . YDATA_TEB % LDATA_EMIS_ROOF = . FALSE . YDATA_TEB % LDATA_HC_ROOF = . FALSE . YDATA_TEB % LDATA_TC_ROOF = . FALSE . YDATA_TEB % LDATA_D_ROOF = . FALSE . YDATA_TEB % LDATA_ALB_ROAD = . FALSE . YDATA_TEB % LDATA_EMIS_ROAD = . FALSE . YDATA_TEB % LDATA_HC_ROAD = . FALSE . YDATA_TEB % LDATA_TC_ROAD = . FALSE . YDATA_TEB % LDATA_D_ROAD = . FALSE . YDATA_TEB % LDATA_ALB_WALL = . FALSE . YDATA_TEB % LDATA_EMIS_WALL = . FALSE . YDATA_TEB % LDATA_HC_WALL = . FALSE . YDATA_TEB % LDATA_TC_WALL = . FALSE . YDATA_TEB % LDATA_D_WALL = . FALSE . YDATA_TEB % LDATA_H_TRAFFIC = . FALSE . YDATA_TEB % LDATA_LE_TRAFFIC = . FALSE . YDATA_TEB % LDATA_H_INDUSTRY = . FALSE . YDATA_TEB % LDATA_LE_INDUSTRY = . FALSE . YDATA_TEB % LDATA_ROUGH_ROOF = . FALSE . YDATA_TEB % LDATA_ROUGH_WALL = . FALSE . YDATA_TEB % LDATA_RESIDENTIAL = . FALSE . YDATA_TEB % LDATA_EMIS_PANEL = . FALSE . YDATA_TEB % LDATA_ALB_PANEL = . FALSE . YDATA_TEB % LDATA_EFF_PANEL = . FALSE . YDATA_TEB % LDATA_FRAC_PANEL = . FALSE . YDATA_TEB % NPAR_ROOF_LAYER = 0 YDATA_TEB % NPAR_ROAD_LAYER = 0 YDATA_TEB % NPAR_WALL_LAYER = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_TEB_N:DATA_TEB_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DATA_TEB_INIT END MODULE MODD_DATA_TEB_n","tags":"","loc":"sourcefile/modd_data_tebn.f90.html"},{"title":"spll_modi_isba_snow_frac.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_ISBA_SNOW_FRAC Source Code spll_modi_isba_snow_frac.f90 Source Code !auto_modi:spll_isba_snow_frac.D MODULE MODI_ISBA_SNOW_FRAC INTERFACE SUBROUTINE ISBA_SNOW_FRAC ( HSNOW , PWSNOW , PRSNOW , PASNOW , & PVEG , PLAI , PZ0 , PPSN , PPSNV_A , PPSNG , PPSNV ) IMPLICIT NONE CHARACTER ( LEN =* ) , INTENT ( IN ) :: HSNOW ! ISBA snow scheme REAL , DIMENSION (:,:), INTENT ( IN ) :: PWSNOW ! snow reservoir REAL , DIMENSION (:,:), INTENT ( IN ) :: PRSNOW ! snow density REAL , DIMENSION (:) , INTENT ( IN ) :: PASNOW ! snow albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PVEG REAL , DIMENSION (:) , INTENT ( IN ) :: PLAI REAL , DIMENSION (:) , INTENT ( IN ) :: PZ0 REAL , DIMENSION (:) , INTENT ( INOUT ) :: PPSN REAL , DIMENSION (:) , INTENT ( INOUT ) :: PPSNV_A REAL , DIMENSION (:) , INTENT ( INOUT ) :: PPSNG REAL , DIMENSION (:) , INTENT ( INOUT ) :: PPSNV END SUBROUTINE ISBA_SNOW_FRAC END INTERFACE END MODULE MODI_ISBA_SNOW_FRAC","tags":"","loc":"sourcefile/spll_modi_isba_snow_frac.f90.html"},{"title":"modd_teb_paneln.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_TEB_PANEL_n Source Code modd_teb_paneln.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################ MODULE MODD_TEB_PANEL_n !     ################ ! !!****  *MODD_TEB_PANEL_n - declaration of solar panel parameters !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       08/2013 ! !*       0.   DECLARATIONS !             ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE TEB_PANEL_t ! REAL , POINTER , DIMENSION (:) :: XEMIS_PANEL ! emissivity of solar panels               (-) REAL , POINTER , DIMENSION (:) :: XALB_PANEL ! albedo of soolar panels                  (-) REAL , POINTER , DIMENSION (:) :: XEFF_PANEL ! Efficiency coefficient of solar panels   (-) REAL , POINTER , DIMENSION (:) :: XFRAC_PANEL ! Fraction of SOLAR panels on roofs        (-) REAL , POINTER , DIMENSION (:) :: XTHER_PRODC_DAY ! Present day integrated thermal production of energy    (J/m2 panel) ! END TYPE TEB_PANEL_t CONTAINS ! SUBROUTINE TEB_PANEL_INIT ( YTEB_PANEL ) TYPE ( TEB_PANEL_t ), INTENT ( INOUT ) :: YTEB_PANEL REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_PANEL_N:TEB_PANEL_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YTEB_PANEL % XEMIS_PANEL ) NULLIFY ( YTEB_PANEL % XALB_PANEL ) NULLIFY ( YTEB_PANEL % XEFF_PANEL ) NULLIFY ( YTEB_PANEL % XFRAC_PANEL ) NULLIFY ( YTEB_PANEL % XTHER_PRODC_DAY ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_PANEL_N:TEB_PANEL_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE TEB_PANEL_INIT END MODULE MODD_TEB_PANEL_n","tags":"","loc":"sourcefile/modd_teb_paneln.f90.html"},{"title":"wind_threshold.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Functions WIND_THRESHOLD Source Code wind_threshold.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### FUNCTION WIND_THRESHOLD ( PWIND , PUREF ) RESULT ( PWIND_NEW ) !   ############################################################################ ! !!****  *WIND_THRESHOLD* !! !!    PURPOSE !!    ------- ! !     Set a minimum value to the wind for exchange coefficient computations. !     This minimum value depends on the forcing height ! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    09/2007 !------------------------------------------------------------------------------- ! USE MODD_SURF_ATM , ONLY : XCISMIN , XVMODMIN , LALDTHRES ! !*       0.     DECLARATIONS !               ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PWIND ! wind REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! forcing level ! REAL , DIMENSION ( SIZE ( PWIND )) :: PWIND_NEW ! modified wind REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! ! !*      0.2    declarations of local variables ! !------------------------------------------------------------------------------- ! !  wind gradient ! IF ( LHOOK ) CALL DR_HOOK ( 'WIND_THRESHOLD' , 0 , ZHOOK_HANDLE ) IF (. NOT . LALDTHRES ) THEN ! !  minimum value for exchange coefficients computations : 1m/s / 10m PWIND_NEW = MAX ( PWIND , 0.1 * MIN ( 1 0. , PUREF ) ) ELSE !  minimum value for exchange coefficients computations : 1m/s / 10m PWIND_NEW = MAX ( XVMODMIN , SQRT ( PWIND ** 2 + ( XCISMIN * PUREF ) ** 2 ) ) ENDIF IF ( LHOOK ) CALL DR_HOOK ( 'WIND_THRESHOLD' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END FUNCTION WIND_THRESHOLD","tags":"","loc":"sourcefile/wind_threshold.f90.html"},{"title":"modd_prep_snow.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_PREP_SNOW Source Code modd_prep_snow.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################ MODULE MODD_PREP_SNOW !     ################ ! !!****  *MODD_PREP - declaration for field interpolations !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson    *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       01/2004 !!      Modif M Lafaysse 04/2014 : LSNOW_PREP_PERM ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_SNOW_PAR ! IMPLICIT NONE ! !-------------------------------------------------------------------------- ! !* climatological gradient for vertical extrapolations of snow content !  a rate of 8cm of snow per degree below 0 C is chosen for these mountain tops ! (climatology from Etchevers 2000 in the Alps and the Jura mountains). ! REAL , PARAMETER :: XWSNOW_CLIM_GRAD = - 0.08 * 30 0. * ( - 0.0065 ) ! !-------------------------------------------------------------------------- ! Parameters for snow field uniforn initialization ! LOGICAL :: LSNOW_FRAC_TOT INTEGER , PARAMETER :: NSNOW_LAYER_MAX = 50 LOGICAL :: LSNOW_PREP_PERM ! activate or disactivate initialization over permanent ice areas ! !-------------------------------------------------------------------------- ! !* normalized dimensions for interpolation grids for soil INTEGER , PARAMETER :: NGRID_LEVEL = 40 REAL , DIMENSION ( NGRID_LEVEL ) :: XGRID_SNOW = & ( / 0.01 , 0.02 , 0.03 , 0.04 , 0.05 , 0.06 , 0.08 , 0.10 , 0.12 , 0.14 ,& 0.16 , 0.18 , 0.21 , 0.25 , 0.30 , 0.35 , 0.40 , 0.45 , 0.50 , 0.55 ,& 0.60 , 0.65 , 0.70 , 0.75 , 0.80 , 0.85 , 0.87 , 0.88 , 0.89 , 0.90 ,& 0.91 , 0.92 , 0.93 , 0.94 , 0.95 , 0.96 , 0.97 , 0.98 , 0.99 , 1.00 / ) !-------------------------------------------------------------------------- ! END MODULE MODD_PREP_SNOW","tags":"","loc":"sourcefile/modd_prep_snow.f90.html"},{"title":"modd_ch_snapn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_CH_SNAP_n Source Code modd_ch_snapn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ########################### MODULE MODD_CH_SNAP_n !     ########################### ! !!****  *MODD_CH_SNAP_n* - declaration of chemical emission data arrays !! !!    PURPOSE !!    ------- !       The purpose of this declarative module is to specify  the !     chemical emission data arrays. ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      D. Gazen   *L.A.* !! !!    MODIFICATIONS !!    ------------- !!      Original    08/03/2001 !!      01/12/03    (D.Gazen) change emissions handling for surf. externalization !!      M.Leriche 04/2014  change length of CHARACTER for emission 6->12 !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_TYPE_EFUTIL ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! TYPE CH_EMIS_SNAP_t ! INTEGER :: NEMIS_NBR !                          ! number of chemical pgd fields chosen by user CHARACTER ( LEN = 3 ) :: CCONVERSION !                          ! Unit conversion code CHARACTER ( LEN = 5 ) :: CSNAP_TIME_REF !                          ! Reference time for Snap temporal profiles !                          !  'UTC  ' : UTC   time !                          !  'SOLAR' : SOLAR time !                          !  'LEGAL' : LEGAL time !                          ! CHARACTER ( LEN = 12 ), DIMENSION (:), POINTER :: CEMIS_NAME !                          ! name of the chemical fields (emitted species) CHARACTER ( LEN = 40 ), DIMENSION (:), POINTER :: CEMIS_COMMENT !                          ! comment on the chemical fields (emitted species) ! REAL , DIMENSION (:,:,:), POINTER :: XEMIS_FIELDS_SNAP ! Emission factor for !                                                         ! each chemical specie and !                                                         ! each snap REAL , DIMENSION (:,:), POINTER :: XEMIS_FIELDS ! Emission for each specie !                                                         ! (at a given time taking into !                                                         ! account all snaps) REAL , DIMENSION (:), POINTER :: XDELTA_LEGAL_TIME ! Difference (in hours)) between !                                                         ! Legal time and UTC time INTEGER :: NEMIS_SNAP ! number of snaps INTEGER :: NSNAP_M ! number of months INTEGER :: NSNAP_D ! number of days INTEGER :: NSNAP_H ! number of hours REAL , DIMENSION (:,:,:), POINTER :: XSNAP_MONTHLY REAL , DIMENSION (:,:,:), POINTER :: XSNAP_DAILY REAL , DIMENSION (:,:,:), POINTER :: XSNAP_HOURLY REAL , DIMENSION (:), POINTER :: XCONVERSION ! conversion factor ! TYPE ( PRONOSVAR_T ), POINTER :: TSPRONOSLIST ! Head pointer on pronostic !                                                              variables list !------------------------------------------------------------------------------- ! END TYPE CH_EMIS_SNAP_t CONTAINS ! SUBROUTINE CH_EMIS_SNAP_INIT ( YCH_EMIS_SNAP ) TYPE ( CH_EMIS_SNAP_t ), INTENT ( INOUT ) :: YCH_EMIS_SNAP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_SNAP_n:CH_EMIS_FIELD_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YCH_EMIS_SNAP % CEMIS_COMMENT ) NULLIFY ( YCH_EMIS_SNAP % CEMIS_NAME ) NULLIFY ( YCH_EMIS_SNAP % XDELTA_LEGAL_TIME ) NULLIFY ( YCH_EMIS_SNAP % XEMIS_FIELDS ) NULLIFY ( YCH_EMIS_SNAP % XEMIS_FIELDS_SNAP ) NULLIFY ( YCH_EMIS_SNAP % XSNAP_DAILY ) NULLIFY ( YCH_EMIS_SNAP % XSNAP_HOURLY ) NULLIFY ( YCH_EMIS_SNAP % XSNAP_MONTHLY ) NULLIFY ( YCH_EMIS_SNAP % XCONVERSION ) YCH_EMIS_SNAP % CCONVERSION = ' ' YCH_EMIS_SNAP % CSNAP_TIME_REF = ' ' YCH_EMIS_SNAP % NEMIS_NBR = 0 YCH_EMIS_SNAP % NEMIS_SNAP = 0 YCH_EMIS_SNAP % NSNAP_M = 0 YCH_EMIS_SNAP % NSNAP_D = 0 YCH_EMIS_SNAP % NSNAP_H = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_SNAP_n:CH_EMIS_FIELD_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_EMIS_SNAP_INIT END MODULE MODD_CH_SNAP_n","tags":"","loc":"sourcefile/modd_ch_snapn.f90.html"},{"title":"spll_modi_wall_layer_e_budget.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_WALL_LAYER_E_BUDGET Source Code spll_modi_wall_layer_e_budget.f90 Source Code !auto_modi:spll_wall_layer_e_budget.D MODULE MODI_WALL_LAYER_E_BUDGET INTERFACE SUBROUTINE WALL_LAYER_E_BUDGET ( TOP , T , B , PT_WL , PTS_WL_B , PTI_WL_B , PTSTEP , PDN_RD , & PRHOA , PAC_WL , PAC_BLD , PLW_RAD , PPS , PEXNS , PABS_SW_WL , & PT_CANYON , PTS_RD , PTSNOW_RD , PTS_GD , PTS_FL , & PLW_WA_TO_WB , PLW_R_TO_W , PLW_G_TO_W , PLW_NR_TO_W , & PLW_WIN_TO_W , PLW_S_TO_W , PFLX_BLD_WL , PDQS_WL , & PABS_LW_WL , PEMIT_LW_WL , PH_WL , PIMB_WL , PRADHT_IN , & PRAD_RF_WL , PRAD_WL_WIN , PRAD_WL_FL , PRAD_WL_MA , & PCONV_WL_BLD , PLOAD_IN_WL ) USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t IMPLICIT NONE TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_WL ! wall layers temperatures REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WL_B ! opposite wall surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTI_WL_B ! opposite wall internal temperature REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered fraction on roads REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! rho REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WL ! aerodynamical conductance [m/s] REAL , DIMENSION (:), INTENT ( IN ) :: PAC_BLD ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface Exner function REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_WL ! absorbed solar radiation REAL , DIMENSION (:), INTENT ( IN ) :: PT_CANYON ! air canyon temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_RD ! road surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTSNOW_RD ! road snow temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GD ! green area surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_FL ! floor layers temperatures [K] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_WB ! LW interactions wall  -> opposite wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_W ! LW interactions road -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_W ! LW interactions garden -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_W ! LW interactions sky   -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_W ! LW interactions road(snow) -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_W ! Radiative heat trasfer coeff wall-window REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_WL ! flux from bld to wall REAL , DIMENSION (:), INTENT ( INOUT ) :: PDQS_WL ! heat storage inside the wall REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_WL ! absorbed infrared rad. [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_WL ! LW flux emitted by the wall [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PH_WL ! Sensible heat flux from wall to air [W/m2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_WL ! wall residual energy imbalance REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_WL ! rad. fluxes from roof to wall [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WL_WIN ! rad. fluxes from wall to win  [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WL_FL ! rad. fluxes from wall to floor [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WL_MA ! rad. fluxes from wall to mass [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_WL_BLD ! conv. fluxes from wall to bld [W m-2(wall)] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_IN_WL ! LOAD from solar heat gain + rad int. gains  W/m2 [Wall] END SUBROUTINE WALL_LAYER_E_BUDGET END INTERFACE END MODULE MODI_WALL_LAYER_E_BUDGET","tags":"","loc":"sourcefile/spll_modi_wall_layer_e_budget.f90.html"},{"title":"modd_data_tsz0n.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DATA_TSZ0_n Source Code modd_data_tsz0n.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ########################## MODULE MODD_DATA_TSZ0_n !     ########################## ! !!****  *MODD_DATA_TSZ0 - declaration of TSZ0 surface parameters for TSZ0 scheme !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      P. Le Moigne  *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       09/2007 ! !*       0.   DECLARATIONS !             ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE DATA_TSZ0_t !------------------------------------------------------------------------------- INTEGER :: NTIME REAL , POINTER , DIMENSION (:) :: XDATA_DTS REAL , POINTER , DIMENSION (:) :: XDATA_DHUGRD !------------------------------------------------------------------------------- END TYPE DATA_TSZ0_t CONTAINS ! SUBROUTINE DATA_TSZ0_INIT ( YDATA_TSZ0 ) TYPE ( DATA_TSZ0_t ), INTENT ( INOUT ) :: YDATA_TSZ0 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_TSZ0_N:DATA_TSZ0_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDATA_TSZ0 % XDATA_DTS ) NULLIFY ( YDATA_TSZ0 % XDATA_DHUGRD ) YDATA_TSZ0 % NTIME = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_TSZ0_N:DATA_TSZ0_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DATA_TSZ0_INIT END MODULE MODD_DATA_TSZ0_n","tags":"","loc":"sourcefile/modd_data_tsz0n.f90.html"},{"title":"modd_data_covern.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DATA_COVER_n Source Code modd_data_covern.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     #################### MODULE MODD_DATA_COVER_n !     ###################### ! !!****  *MODD_DATA_COVER_n* - declaration of correspondances between surface !!                            classes and variables, for parameters that !!                            can change as function of physical options !!                            (GARDENs or not). !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson    *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       09/2011 ! !*       0.   DECLARATIONS !             ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE DATA_COVER_t ! !----------------------------------------------------------------------------------------------------- ! REAL , DIMENSION (:,:,:), POINTER :: XDATA_WEIGHT ! REAL , DIMENSION (:), POINTER :: XDATA_TOWN ! artificial surfaces fraction REAL , DIMENSION (:), POINTER :: XDATA_NATURE ! natural and cul. fraction REAL , DIMENSION (:), POINTER :: XDATA_SEA ! sea fraction REAL , DIMENSION (:), POINTER :: XDATA_WATER ! inland water fraction REAL , DIMENSION (:,:), POINTER :: XDATA_VEGTYPE ! vegetation types fractions REAL , DIMENSION (:), POINTER :: XDATA_GARDEN ! garden fraction REAL , DIMENSION (:), POINTER :: XDATA_BLD ! building fraction in ! artificial areas REAL , DIMENSION (:), POINTER :: XDATA_WALL_O_HOR ! ratio of vert. surf. !                                                  ! over hor. surf. ! LOGICAL :: LGARDEN ! T: define urban green areas !                                                 ! F: no urban green areas ! INTEGER :: NYEAR ! current year for ecoclimap2 ! !----------------------------------------------------------------------------------------------------- ! END TYPE DATA_COVER_t CONTAINS ! SUBROUTINE DATA_COVER_INIT ( YDATA_COVER ) TYPE ( DATA_COVER_t ), INTENT ( INOUT ) :: YDATA_COVER REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_COVER_N:DATA_COVER_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDATA_COVER % XDATA_WEIGHT ) NULLIFY ( YDATA_COVER % XDATA_TOWN ) NULLIFY ( YDATA_COVER % XDATA_NATURE ) NULLIFY ( YDATA_COVER % XDATA_SEA ) NULLIFY ( YDATA_COVER % XDATA_WATER ) NULLIFY ( YDATA_COVER % XDATA_VEGTYPE ) NULLIFY ( YDATA_COVER % XDATA_GARDEN ) NULLIFY ( YDATA_COVER % XDATA_BLD ) NULLIFY ( YDATA_COVER % XDATA_WALL_O_HOR ) YDATA_COVER % LGARDEN = . FALSE . YDATA_COVER % NYEAR = 9999 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_COVER_N:DATA_COVER_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DATA_COVER_INIT END MODULE MODD_DATA_COVER_n","tags":"","loc":"sourcefile/modd_data_covern.f90.html"},{"title":"spll_modi_urban_exch_coef.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_URBAN_EXCH_COEF Source Code spll_modi_urban_exch_coef.f90 Source Code !auto_modi:spll_urban_exch_coef.D MODULE MODI_URBAN_EXCH_COEF INTERFACE SUBROUTINE URBAN_EXCH_COEF ( HZ0H , PZ0_O_Z0H , PTG , PQS , PEXNS , PEXNA , PTA , PQA , & PZREF , PUREF , PVMOD , PZ0 , & PRI , PCD , PCDN , PAC , PRA , PCH ) IMPLICIT NONE CHARACTER ( LEN = 6 ) :: HZ0H ! TEB option for z0h roof & road REAL , INTENT ( IN ) :: PZ0_O_Z0H ! z0/z0h ratio used in Mascart (1995) REAL , DIMENSION (:), INTENT ( IN ) :: PTG ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PQS ! surface specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PEXNA ! exner function REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PZ0 ! roughness length for momentum REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the wind REAL , DIMENSION (:), INTENT ( OUT ) :: PRI ! Richardson number REAL , DIMENSION (:), INTENT ( OUT ) :: PCD ! drag coefficient for momentum REAL , DIMENSION (:), INTENT ( OUT ) :: PCDN ! neutral drag coefficient for momentum REAL , DIMENSION (:), INTENT ( OUT ) :: PAC ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PRA ! aerodynamical resistance REAL , DIMENSION (:), INTENT ( OUT ) :: PCH ! drag coefficient for heat END SUBROUTINE URBAN_EXCH_COEF END INTERFACE END MODULE MODI_URBAN_EXCH_COEF","tags":"","loc":"sourcefile/spll_modi_urban_exch_coef.f90.html"},{"title":"spll_modi_dx_air_cooling_coil_cv.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_DX_AIR_COOLING_COIL_CV Source Code spll_modi_dx_air_cooling_coil_cv.f90 Source Code !auto_modi:spll_dx_air_cooling_coil_cv.D MODULE MODI_DX_AIR_COOLING_COIL_CV INTERFACE SUBROUTINE DX_AIR_COOLING_COIL_CV ( PT_CANYON , PQ_CANYON , PPS , PRHOA , & PT_IN , PQ_IN , PCOP_RAT , PCAP_SYS_RAT , & PT_ADP , PF_WATER_COND , & PM_SYS , PH_BLD_COOL , PH_WASTE , PLE_WASTE , & PCOP , PCAP_SYS , PT_OUT , PQ_OUT , & PDX_POWER , PT_BLD_COOL ) REAL , INTENT ( IN ) :: PT_CANYON ! Canyon air temperature [K] REAL , INTENT ( IN ) :: PQ_CANYON ! Canyon air humidity ratio [kg kg-1] REAL , INTENT ( IN ) :: PPS ! Canyon air pressure [Pa] REAL , INTENT ( IN ) :: PRHOA ! Canyon air density [kg m-3] REAL , INTENT ( IN ) :: PT_IN ! Actual inlet air temperature [K] REAL , INTENT ( IN ) :: PQ_IN ! Actual inlet air humidity ratio [kg kg-1] REAL , INTENT ( IN ) :: PCOP_RAT ! Rated COP REAL , INTENT ( IN ) :: PCAP_SYS_RAT ! Rated capacity [W] REAL , INTENT ( IN ) :: PT_ADP ! Apparatus dewpoint [K] REAL , INTENT ( IN ) :: PF_WATER_COND ! fraction of evaporation of the condenser REAL , INTENT ( INOUT ) :: PM_SYS ! HVAC air mass flow rate [kg s-1] REAL , INTENT ( INOUT ) :: PH_BLD_COOL ! Sensible cooling load REAL , INTENT ( OUT ) :: PH_WASTE ! Sensible heat rejected by the condenser [W] REAL , INTENT ( OUT ) :: PLE_WASTE ! Latent heat rejected by the condenser [W] REAL , INTENT ( OUT ) :: PCOP ! Actual COP REAL , INTENT ( OUT ) :: PCAP_SYS ! Actual capacity [W] REAL , INTENT ( OUT ) :: PT_OUT ! Actual outlet temperature [K] REAL , INTENT ( OUT ) :: PQ_OUT ! Actual outlet humidity ratio [kg kg-1] REAL , INTENT ( OUT ) :: PDX_POWER ! Electrical power consumed by the DX unit [W] REAL , INTENT ( OUT ) :: PT_BLD_COOL ! Total energy supplied by the DX unit [W] END SUBROUTINE DX_AIR_COOLING_COIL_CV END INTERFACE END MODULE MODI_DX_AIR_COOLING_COIL_CV","tags":"","loc":"sourcefile/spll_modi_dx_air_cooling_coil_cv.f90.html"},{"title":"modd_diag_misc_seaicen.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DIAG_MISC_SEAICE_n Source Code modd_diag_misc_seaicen.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ###################### MODULE MODD_DIAG_MISC_SEAICE_n !     ###################### ! !!****  *MODD_DIAG_SEAICE - declaration of diagnostics for sea ice model !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      S.S�n�si   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       08/2013 ! !*       0.   DECLARATIONS !             ------------ ! ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE DIAG_MISC_SEAICE_t !------------------------------------------------------------------------------ ! LOGICAL :: LDIAG_MISC_SEAICE ! flag for SeaIce variables ! !* averaged variables ! REAL , POINTER , DIMENSION (:) :: XSIT ! Sea ice thickness REAL , POINTER , DIMENSION (:) :: XSND ! Sea ice snow depth REAL , POINTER , DIMENSION (:) :: XMLT ! Sea mixed layer temp. seen by Gelato !------------------------------------------------------------------------------ ! END TYPE DIAG_MISC_SEAICE_t CONTAINS ! SUBROUTINE DIAG_MISC_SEAICE_INIT ( YDIAG_MISC_SEAICE ) TYPE ( DIAG_MISC_SEAICE_t ), INTENT ( INOUT ) :: YDIAG_MISC_SEAICE REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_SEAICE_N:DIAG_MISC_SEAICE_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDIAG_MISC_SEAICE % XSIT ) NULLIFY ( YDIAG_MISC_SEAICE % XSND ) NULLIFY ( YDIAG_MISC_SEAICE % XMLT ) YDIAG_MISC_SEAICE % LDIAG_MISC_SEAICE = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_SEAICE_N:DIAG_MISC_SEAICE_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_MISC_SEAICE_INIT END MODULE MODD_DIAG_MISC_SEAICE_n","tags":"","loc":"sourcefile/modd_diag_misc_seaicen.f90.html"},{"title":"spll_modi_wind_threshold.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_WIND_THRESHOLD Source Code spll_modi_wind_threshold.f90 Source Code !auto_modi:spll_wind_threshold.D MODULE MODI_WIND_THRESHOLD INTERFACE FUNCTION WIND_THRESHOLD ( PWIND , PUREF ) RESULT ( PWIND_NEW ) IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PWIND ! wind REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! forcing level REAL , DIMENSION ( SIZE ( PWIND )) :: PWIND_NEW ! modified wind END FUNCTION WIND_THRESHOLD END INTERFACE END MODULE MODI_WIND_THRESHOLD","tags":"","loc":"sourcefile/spll_modi_wind_threshold.f90.html"},{"title":"window_shading_availability.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines WINDOW_SHADING_AVAILABILITY Source Code window_shading_availability.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ########################################################################################################### SUBROUTINE WINDOW_SHADING_AVAILABILITY ( OSHADE , PTI_BLD , PTCOOL_TARGET , OSHADE_POSSIBLE ) !     ########################################################################################################### ! !!****  *WINDOW_SHADING_AVAILABILITY* !! !!    PURPOSE !!    ------- !!* checks if one encouters the conditions for closing the windows at day !  (needs to be equiped of solar protections and not to be confortable inside) ! !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      G. Pigeon   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    10/2011 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_BEM_CST , ONLY : XCOMFORT_TEMP_FOR_SHADING_USE ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! LOGICAL , DIMENSION (:), INTENT ( IN ) :: OSHADE ! TRUE if solar protections exist REAL , DIMENSION (:), INTENT ( IN ) :: PTI_BLD ! indoor air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTCOOL_TARGET ! Cooling setpoint of HVAC system LOGICAL , DIMENSION (:), INTENT ( OUT ) :: OSHADE_POSSIBLE ! TRUE if solar protections !                                                     ! are likely to be used today if !                                                     ! solar irradiance is enough ! !*       0.2   Declarations of local variables ! ! !------------------------------------------------------------------------------- ! ! ! OSHADE_POSSIBLE (:) = OSHADE (:) . AND . & ( PTI_BLD (:) . GE . XCOMFORT_TEMP_FOR_SHADING_USE & . OR . PTI_BLD (:) . EQ . PTCOOL_TARGET (:) ) ! END SUBROUTINE WINDOW_SHADING_AVAILABILITY","tags":"","loc":"sourcefile/window_shading_availability.f90.html"},{"title":"spll_modi_road_layer_e_budget.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_ROAD_LAYER_E_BUDGET Source Code spll_modi_road_layer_e_budget.f90 Source Code !auto_modi:spll_road_layer_e_budget.D MODULE MODI_ROAD_LAYER_E_BUDGET INTERFACE SUBROUTINE ROAD_LAYER_E_BUDGET ( T , B , PTSTEP , PDN_ROAD , PRHOA , PAC_ROAD , PAC_ROAD_WAT , & PLW_RAD , PPS , PQSAT_ROAD , PDELT_ROAD , PEXNS , & PABS_SW_ROAD , PGSNOW_ROAD , PQ_LOWCAN , PT_LOWCAN , & PTS_WALL_A , PTS_WALL_B , PTSNOW_ROAD , PTS_GARDEN , & PLW_WA_TO_R , PLW_WB_TO_R , PLW_S_TO_R , PLW_WIN_TO_R , & PEMIT_LW_ROAD , PDQS_ROAD , PABS_LW_ROAD , PHFREE_ROAD , & PLEFREE_ROAD , PIMB_ROAD , PRR ) USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t IMPLICIT NONE TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PDN_ROAD ! road snow fraction REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! rho REAL , DIMENSION (:), INTENT ( IN ) :: PAC_ROAD ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( IN ) :: PAC_ROAD_WAT ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PQSAT_ROAD ! q_sat(Ts) REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_ROAD ! fraction of water REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface Exner function REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_ROAD ! absorbed solar radiation REAL , DIMENSION (:), INTENT ( IN ) :: PGSNOW_ROAD ! road snow conduction REAL , DIMENSION (:), INTENT ( IN ) :: PQ_LOWCAN ! and specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PT_LOWCAN ! low canyon air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WALL_A ! wall surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WALL_B ! wall surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTSNOW_ROAD ! road snow temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GARDEN ! green area surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_R ! LW interactions wall  -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_R ! LW interactions wall  -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_R ! LW interactions sky   -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_R ! LW interactions window -> road REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_ROAD ! LW flux emitted by the road (W/m2 of road) REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_ROAD !heat storage inside the road REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_ROAD ! absorbed infrared rad. REAL , DIMENSION (:), INTENT ( OUT ) :: PHFREE_ROAD ! sensible heat flux on the REAL , DIMENSION (:), INTENT ( OUT ) :: PLEFREE_ROAD ! latent heat flux on the REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_ROAD ! road residual energy imbalance REAL , DIMENSION (:), INTENT ( IN ) :: PRR ! rain rate [kg m-2 s-1] END SUBROUTINE ROAD_LAYER_E_BUDGET END INTERFACE END MODULE MODI_ROAD_LAYER_E_BUDGET","tags":"","loc":"sourcefile/spll_modi_road_layer_e_budget.f90.html"},{"title":"modd_teb_optionn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_TEB_OPTION_n Source Code modd_teb_optionn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################ MODULE MODD_TEB_OPTION_n !     ################ ! !!****  *MODD_TEB_n - declaration of surface parameters for urban surface !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       01/2004 !!      A. Lemonsu      07/2012         Key for urban hydrology !!      V. Masson       06/2013         splits module ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_TYPE_DATE_SURF ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE TEB_OPTIONS_t ! TEB scheme option ! LOGICAL :: LCANOPY ! T: SBL scheme within the canopy ! F: no atmospheric layers below forcing level LOGICAL :: LGARDEN ! T: Urban green areas (call ISBA from TEB) ! F: No urban green areas CHARACTER ( LEN = 4 ) :: CROAD_DIR ! TEB option for road directions ! 'UNIF' : no specific direction ! 'ORIE' : many road ORIEntations ! ( one per TEB patch) CHARACTER ( LEN = 4 ) :: CWALL_OPT ! TEB option for walls ! 'UNIF' : uniform walls ! 'TWO ' : two separated walls CHARACTER ( LEN = 3 ) :: CBLD_ATYPE ! Type of averaging for walls ! 'ARI'  : Characteristics are !          linearly averaged ! 'MAJ ' : Majoritary building in !          grid mesh is chosen CHARACTER ( LEN = 6 ) :: CZ0H ! TEB option for z0h roof & road ! 'MASC95' : Mascart et al 1995 ! 'BRUT82' : Brustaert     1982 ! 'KAND07' : Kanda         2007 CHARACTER ( LEN = 5 ) :: CCH_BEM ! BEM option for roof/wall outside convective coefficient ! 'DOE-2' : DOE-2 model from ! EnergyPlus Engineering reference, p65 CHARACTER ( LEN = 3 ) :: CBEM ! TEB option for the building energy model ! 'DEF':  DEFault version force-restore model from Masson et al. 2002 ! 'BEM':  Building Energy Model Bueno et al. 2011 CHARACTER ( LEN = 3 ) :: CTREE ! TEB option for the high vegetation ! 'DEF':  DEFault version without radiative, dynamic effects or turbulent fluxes ! 'RAD':  only RADiative effects ! 'DYN':  radiative and DYNamic effects ! 'FLX':  radiative, dynamic effects, and turbulent fluxes LOGICAL :: LGREENROOF ! T: green roofs (call ISBA from TEB) LOGICAL :: LHYDRO ! T: urban subsoil and hydrology processes LOGICAL :: LSOLAR_PANEL ! T: solar panels on roofs ! ! type of initialization of vegetation: from cover types (ecoclimap) or parameters prescribed ! LOGICAL :: LECOCLIMAP ! T: parameters computed from ecoclimap !                                                ! F: they are read in the file ! ! General surface: ! REAL , POINTER , DIMENSION (:) :: XZS ! orography                        (m) REAL , POINTER , DIMENSION (:,:) :: XCOVER ! fraction of each ecosystem       (-) LOGICAL , POINTER , DIMENSION (:) :: LCOVER ! GCOVER(i)=T --> ith cover field is not 0. INTEGER :: NTEB_PATCH ! number of TEB patches REAL , POINTER , DIMENSION (:,:) :: XTEB_PATCH ! fraction of each TEB patch ! ! Number of layers ! INTEGER :: NROOF_LAYER ! number of layers in roofs INTEGER :: NROAD_LAYER ! number of layers in roads INTEGER :: NWALL_LAYER ! number of layers in walls ! ! Date: ! TYPE ( DATE_TIME ) :: TTIME ! current date and time ! ! Time-step: ! REAL :: XTSTEP ! time step for TEB ! REAL :: XOUT_TSTEP ! TEB output writing time step ! END TYPE TEB_OPTIONS_t CONTAINS !---------------------------------------------------------------------------- ! SUBROUTINE TEB_OPTIONS_INIT ( YTEB_OPTIONS ) TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: YTEB_OPTIONS REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_N:TEB_OPTIONS_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YTEB_OPTIONS % XZS ) NULLIFY ( YTEB_OPTIONS % XCOVER ) NULLIFY ( YTEB_OPTIONS % LCOVER ) NULLIFY ( YTEB_OPTIONS % XTEB_PATCH ) YTEB_OPTIONS % LCANOPY = . FALSE . YTEB_OPTIONS % LGARDEN = . FALSE . YTEB_OPTIONS % CROAD_DIR = ' ' YTEB_OPTIONS % CWALL_OPT = ' ' YTEB_OPTIONS % CBLD_ATYPE = ' ' YTEB_OPTIONS % CZ0H = ' ' YTEB_OPTIONS % CCH_BEM = ' ' YTEB_OPTIONS % CBEM = ' ' YTEB_OPTIONS % CTREE = ' ' YTEB_OPTIONS % LGREENROOF = . FALSE . YTEB_OPTIONS % LHYDRO = . FALSE . YTEB_OPTIONS % LSOLAR_PANEL = . FALSE . YTEB_OPTIONS % LECOCLIMAP = . FALSE . YTEB_OPTIONS % NTEB_PATCH = 0 YTEB_OPTIONS % NROOF_LAYER = 0 YTEB_OPTIONS % NROAD_LAYER = 0 YTEB_OPTIONS % NWALL_LAYER = 0 YTEB_OPTIONS % XTSTEP = 0. YTEB_OPTIONS % XOUT_TSTEP = 0. IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_N:TEB_OPTIONS_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE TEB_OPTIONS_INIT !---------------------------------------------------------------------------- END MODULE MODD_TEB_OPTION_n","tags":"","loc":"sourcefile/modd_teb_optionn.f90.html"},{"title":"modd_snow_par.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_SNOW_PAR Source Code modd_snow_par.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ###################### MODULE MODD_SNOW_PAR !     ###################### ! !!****  *MODD_SNOW_PAR* - declaration of parameters related !!                          to the snow parameterization !! !!    PURPOSE !!    ------- !       The purpose of this declarative module is to specify  the !     parameters related to the surface parameterization of snow. ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!\tV. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       01/2004 !! P. Samuelsson  10/2014   MEB complements !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! IMPLICIT NONE ! !-------------------------------------------------------------------------------- ! Snow on the ground: Given in ini_surf_csts and/or in NAM_SURF_CSTS !-------------------------------------------------------------------------------- ! ! Snow emissivity: ! REAL , SAVE :: XEMISSN ! ! Minimum and maximum values of the albedo of snow: ! REAL , SAVE :: XANSMIN REAL , SAVE :: XANSMAX ! ! Minimum and maximum values of the albedo of permanet snow/ice: ! REAL , SAVE :: XAGLAMIN REAL , SAVE :: XAGLAMAX ! ! Use recommended settings for snow albedo (FALSE = ISBA default) ! LOGICAL , SAVE :: LMEBREC ! ! Fraction of maximum value of the albedo of snow that is reached for melting ! snow ! REAL , SAVE :: XANSFRACMEL ! ! Threeshold temperature above which the snow albedo starts to decrease ! REAL , SAVE :: XTEMPANS ! ! Minimum value of the albedo of snow reached under canopy vegetation: ! REAL , SAVE :: XANSMINMEB ! ! Prescribed ice albedo in 3 spectral bands for glacier simulation with CROCUS scheme. REAL , SAVE :: XALBICE1 , XALBICE2 , XALBICE3 ! ! Density threshold for ice detection in CROCUS scheme. REAL , SAVE :: XRHOTHRESHOLD_ICE !for ageing effects REAL , SAVE :: XVAGING_NOGLACIER , XVAGING_GLACIER ! percentage of the total pore volume to compute the max liquid water holding capacity REAL , SAVE :: XPERCENTAGEPORE ! Height (m) of aged snow in glacier case (allows Pn=1) ! REAL , SAVE :: XHGLA ! ! Coefficient for calculation of snow fraction over vegetation ! REAL , SAVE :: XWSNV ! ! Roughness length of pure snow surface (m) ! REAL , SAVE :: XZ0SN ! ! Roughness length for heat of pure snow surface (m) ! REAL , SAVE :: XZ0HSN ! ! Roughness length ratio between ice and snow REAL , SAVE :: XZ0ICEZ0SNOW ! ! Snow Melt timescale with D95 (s): needed to prevent time step ! dependence of melt when snow fraction < unity. ! REAL , SAVE :: XTAU_SMELT ! !-------------------------------------------------------------------------------- ! Snow on the ground: PARAMETER !-------------------------------------------------------------------------------- ! ! Critical value of the equivalent water content ! of the snow reservoir for snow fractional coverage and albedo computations ! REAL , PARAMETER :: XWCRN = 1 0.0 ! (kg m-2) Veg (default value) REAL , PARAMETER :: XWCRN_EXPL = 1.0 ! (kg m-2) Veg explicit REAL , PARAMETER :: XWCRN_ROOF = 1.0 ! (kg m-2)  Roofs REAL , PARAMETER :: XWCRN_ROAD = 1.0 ! (kg m-2)  Roads REAL , PARAMETER :: XWCRN_VEG = 1.0 ! (kg m-2)  Urban veg ! ! Critical value of the total snow depth for ground snow fractional coverage ! REAL , PARAMETER :: XDCRN_EXPL = 0.01 ! (m) Veg explicit ! ! Critical value of snow emissivity ! REAL , PARAMETER :: XEMCRIN = 0.98 ! ! Minimum and maximum values of the albedo of snow: ! REAL , PARAMETER :: XANSMIN_ROOF = 0.30 ! (-)   Roofs REAL , PARAMETER :: XANSMIN_ROAD = 0.15 ! (-)   Roads ! REAL , PARAMETER :: XANSMAX_ROOF = 0.85 ! (-)   Roofs REAL , PARAMETER :: XANSMAX_ROAD = 0.85 ! (-)   Roads ! ! Snow aging coefficients (albedo and Force-Restore density): ! REAL , PARAMETER :: XANS_TODRY = 0.008 ! (-) Veg (default value) REAL , PARAMETER :: XANS_TODRY_ROOF = 0.008 ! (-)  Roofs REAL , PARAMETER :: XANS_TODRY_ROAD = 0.008 ! (-)  Roads REAL , PARAMETER :: XANS_TODRY_MEB = 0.016 ! (-) Surface under canopy vegetation ! REAL , PARAMETER :: XANS_T = 0.240 ! (-) Veg (default value) REAL , PARAMETER :: XANS_T_ROOF = 0.174 ! (-)  Roofs REAL , PARAMETER :: XANS_T_ROAD = 0.174 ! (-)  Roads (alley simul) REAL , PARAMETER :: XANS_T_MEB = 0.480 ! (-) Surface under canopy vegetation ! ! Minimum and maximum values of the density of snow ! for Force-Restore snow option ! REAL , PARAMETER :: XRHOSMIN = 10 0. ! (kg m-3)   Veg (Default value) REAL , PARAMETER :: XRHOSMIN_ROOF = 10 0. ! (kg m-3)   Roofs REAL , PARAMETER :: XRHOSMIN_ROAD = 10 0. ! (kg m-3)   Roads ! REAL , PARAMETER :: XRHOSMAX = 30 0. ! (kg m-3)   Veg (Default value) REAL , PARAMETER :: XRHOSMAX_ROOF = 30 0. ! (kg m-3)   Roofs REAL , PARAMETER :: XRHOSMAX_ROAD = 35 0. ! (kg m-3)   Roads ! ! Minimum and maximum values of the density of snow ! for ISBA-ES snow option ! REAL , PARAMETER :: XRHOSMIN_ES = 5 0. ! (kg m-3) REAL , PARAMETER :: XRHOSMAX_ES = 75 0. ! (kg m-3) ! ! ISBA-ES Critical snow depth at which snow grid thicknesses constant ! REAL , PARAMETER :: XSNOWCRITD = 0.03 ! (m) ! ! ISBA-ES Minimum total snow depth for thermal calculations. ! Used to prevent numerical problems as snow becomes vanishingly thin. ! REAL , PARAMETER :: XSNOWDMIN = 0.000001 ! (m) ! ! Maximum Richardson number limit for very stable conditions using the ISBA-ES 'RIL' option ! REAL , PARAMETER :: X_RI_MAX = 0.20 ! ! ISBA-ES Maximum snow liquid water holding capacity (fraction by mass) parameters: ! REAL , PARAMETER :: XWSNOWHOLDMAX2 = 0.10 ! (-) REAL , PARAMETER :: XWSNOWHOLDMAX1 = 0.03 ! (-) REAL , PARAMETER :: XSNOWRHOHOLD = 20 0.0 ! (kg/m3) ! ! ISBA-ES arameters for grain size computation : ! REAL , PARAMETER :: XSNOW_AGRAIN = 1.6e-4 ! (m) REAL , PARAMETER :: XSNOW_BGRAIN = 1.1e-13 ! (m13/kg4) REAL , PARAMETER :: XSNOW_CGRAIN = 0.5e-4 ! (m) REAL , PARAMETER :: XDSGRAIN_MAX = 2.796e-3 ! m ! !-------------------------------------------------------------------------------- ! Calibration coefficients for CROCUS and ES albedo computation !-------------------------------------------------------------------------------- ! REAL , PARAMETER :: XD1 = 1. , XD2 = 3. , XD3 = 4. , XX = 9 9. , & XVALB2 = . 96 , XVALB3 = 1.58 , XVALB4 = . 92 , XVALB5 = . 90 , & XVALB6 = 1 5.4 , XVALB7 = 34 6.3 , XVALB8 = 3 2.31 , XVALB9 = . 88 , & XVALB10 = . 200 , XVALB11 = . 6 , XVDIOP1 = 2.3E-3 , XVRPRE1 = . 5 , & XVRPRE2 = 1.5 ! ! for ageing effects: REAL , PARAMETER :: XVPRES1 = 8700 0. ! ! spectral bands ! INTEGER , PARAMETER :: NSPEC_BAND_SNOW = 3 ! ! for spectral distribution and thickness effects REAL , PARAMETER :: XVSPEC1 = . 71 , XVSPEC2 = . 21 , XVSPEC3 = . 08 ! ! for thickness effects REAL , PARAMETER :: XVW1 = . 80 , XVW2 = . 20 , XVD1 = . 02 , XVD2 = . 01 ! !-------------------------------------------------------------------------------- ! calibration coefficients for exctinction computation REAL , PARAMETER :: XVBETA1 = 1.92E-3 , XVBETA2 = 4 0. , XVBETA3 = 1.098E-2 , & XVBETA4 = 10 0. , XVBETA5 = 200 0. ! ! ISBA-ES minimum cosinus of zenithal angle REAL , PARAMETER :: XMINCOSZEN = 0.01 ! !-------------------------------------------------------------------------------- ! ISBA-ES Thermal conductivity coefficients from Anderson (1976): ! see Boone, Meteo-France/CNRM Note de Centre No. 70 (2002) ! REAL , PARAMETER :: XSNOWTHRMCOND1 = 0.02 ! [W/(m K)] REAL , PARAMETER :: XSNOWTHRMCOND2 = 2.5E-6 ! [W m5/(kg2 K)] ! ! ISBA-ES Thermal conductivity: Implicit vapor diffn effects ! (sig only for new snow OR high altitudes) ! from Sun et al. (1999): based on data from Jordan (1991) ! see Boone, Meteo-France/CNRM Note de Centre No. 70 (2002) ! REAL , PARAMETER :: XSNOWTHRMCOND_AVAP = - 0.06023 ! [W/(m K)] REAL , PARAMETER :: XSNOWTHRMCOND_BVAP = - 2.5425 ! (W/m) REAL , PARAMETER :: XSNOWTHRMCOND_CVAP = - 28 9.99 ! (K) ! ! Crocus thermal conducitivity coefficient from Yen (1981) REAL , PARAMETER :: XVRKZ6 = 1.88 ! !-------------------------------------------------------------------------------- ! ISBA-ES CROCUS (Pahaut 1976): snowfall density coefficients: ! REAL , PARAMETER :: XSNOWFALL_A_SN = 10 9.0 ! kg/m3 REAL , PARAMETER :: XSNOWFALL_B_SN = 6.0 ! kg/(m3 K) REAL , PARAMETER :: XSNOWFALL_C_SN = 2 6.0 ! kg/(m7/2 s1/2) ! ! Coefficients for the optimal vertical grid calculation REAL , PARAMETER :: XDZ1 = 0.01 REAL , PARAMETER :: XDZ2 = 0.0125 REAL , PARAMETER :: XDZ3 = 0.015 REAL , PARAMETER :: XDZ3_BIS = 0.03 REAL , PARAMETER :: XDZ4 = 0.04 REAL , PARAMETER :: XDZ5 = 0.05 REAL , PARAMETER :: XDZ_BASE = 0.02 REAL , PARAMETER :: XDZ_INTERNAL = 0.07 REAL , PARAMETER :: XSCALE_CM = 10 0. REAL , DIMENSION ( 5 ), PARAMETER :: XDZMAX_INTERNAL = ( / 0.5 , 1. , 2. , 4. , 1 0. / ) REAL , PARAMETER :: XDZMIN_TOP_EXTREM = 0.0001 ! ! Below this threshold of snowfall, new snowfall are aggregated with surface layer to avoid numerical problems ! (0.03 mm/h) REAL , PARAMETER :: XSNOWFALL_THRESHOLD = 0.0333 / 360 0. ! The ratio between a new surface layer thickness and the second layer surface thickness is limited to 1/10 REAL , PARAMETER :: XRATIO_NEWLAYER = 0.1 ! Coefficients for cases with very thick snowpacks REAL , PARAMETER :: XDEPTH_THRESHOLD1 = 3. REAL , PARAMETER :: XDEPTH_THRESHOLD2 = 2 0. REAL , PARAMETER :: XDEPTH_SURFACE = 3. ! ! Coefficients for computing the difference in 2 snow layer characteristics REAL , PARAMETER :: XDIFF_1 = 2 0. REAL , PARAMETER :: XDIFF_MAX = 20 0. REAL , PARAMETER :: XSCALE_DIFF = 2 5. ! ! Coeefficients for snow layer splitting REAL , PARAMETER :: XDZMIN_TOP = 0.01 REAL , PARAMETER :: XDZMIN_TOP_BIS = 0.005 REAL , PARAMETER :: XDZMIN_BOT = 0.02 REAL , PARAMETER :: XSPLIT_COEF = 8. ! ! Coeefficients for snow layer agregation REAL , PARAMETER :: XAGREG_COEF_1 = 5. REAL , PARAMETER :: XAGREG_COEF_2 = 4.5 ! !-------------------------------------------------------------------------------- ! ! Calibration coefficients REAL , PARAMETER :: XVTIME = 48 * 360 0. ! characteristic time for !compaction and metamorphism by wind drift ! REAL , PARAMETER :: XVROMAX = 35 0. !  maximum density for ! drift compaction     UNIT : kg m-3 REAL , PARAMETER :: XVROMIN = 5 0. !  minimum density for ! mobility computation UNIT : kg m-3 REAL , PARAMETER :: XVMOB1 = 0.295 !  coefficient for computing ! the mobility index REAL , PARAMETER :: XVMOB2 = 0.833 !  coefficient for computing ! the mobility index REAL , PARAMETER :: XVMOB3 = 0.583 !  coefficient for computing ! the mobility index REAL , PARAMETER :: XVMOB4 = - 0.0583 !  coefficient for computing ! the mobility index REAL , PARAMETER :: XVDRIFT1 = 2.868 !  coefficient for computing ! the drift index REAL , PARAMETER :: XVDRIFT2 = 0.085 !  coefficient for computing ! the drift index REAL , PARAMETER :: XVDRIFT3 = 3.25 !  coefficient for computing ! the drift index REAL , PARAMETER :: XVSIZEMIN = 3.E-4 !  minimum size decrease ! by drift  UNIT = m ! ! modif_EB pour sublim ! a pour but de tenir compte du fait que le vent moyen est > rafales ! on en tient compte egalement pour diminuer la duree de l'effet REAL , PARAMETER :: XCOEF_FF = 1.25 ! coefficient for gust diagnosis from average wind REAL , PARAMETER :: XCOEF_EFFECT = 1.0 ! coefficient for impact on density du drift REAL , PARAMETER :: XQS_REF = 2.E-5 ! valeur de reference de ZQS pour effet neige ! !-------------------------------------------------------------------------------- ! ! ISBA-ES snow grid parameters ! REAL , PARAMETER , DIMENSION ( 3 ) :: XSGCOEF1 = ( / 0.25 , 0.50 , 0.25 / ) REAL , PARAMETER , DIMENSION ( 2 ) :: XSGCOEF2 = ( / 0.05 , 0.34 / ) REAL , PARAMETER , DIMENSION ( 10 ) :: XSGCOEF3 = ( / 0.025 , 0.033 , 0.043 , & 0.055 , 0.071 , 0.091 , 0.117 , 0.150 , & 0.193 , 0.247 / ) ! ! Minimum total snow depth at which surface layer thickness is constant: ! REAL , PARAMETER :: XSNOWTRANS = 0.20 ! (m) REAL , PARAMETER :: XSNOWTRANS1 = 0.40 ! (m) REAL , PARAMETER :: XSNOWTRANS2 = 0.6061 ! (m) REAL , PARAMETER :: XSNOWTRANS3 = 0.7143 ! (m) REAL , PARAMETER :: XSNOWTRANS4 = 0.9259 ! (m) REAL , PARAMETER :: XSNOWTRANS5 = 1.4493 ! (m) ! !------------------------------------------------------------------------------ ! !Parameters for MEPRA grain type INTEGER , PARAMETER :: IFR = 0 INTEGER , PARAMETER :: IFR_LB = 1 INTEGER , PARAMETER :: ILB = 2 INTEGER , PARAMETER :: ILB_FIN = 3 INTEGER , PARAMETER :: ILB_ANG = 4 INTEGER , PARAMETER :: IROUL = 5 INTEGER , PARAMETER :: IFIN = 6 INTEGER , PARAMETER :: IFIN_AR = 7 INTEGER , PARAMETER :: IFIN_ANG = 8 INTEGER , PARAMETER :: IPL = 9 INTEGER , PARAMETER :: IPL_GOB = 10 INTEGER , PARAMETER :: IGOB = 11 INTEGER , PARAMETER :: IGEL = 12 INTEGER , PARAMETER :: IGOB_FON = 13 INTEGER , PARAMETER :: IRON_ANG = 14 ! !------------------------------------------------------------------------------ ! ! array which describes dendritic grain as a function of dendricity and sphericity ! these 2 variables are discretised in an 10*10 array ( between 0 and 1 by 0.1 step) INTEGER , DIMENSION ( 100 ), PARAMETER :: ICRIS_DEND1D = ( / & ILB_ANG , ILB_ANG , ILB_ANG , ILB , ILB , ILB , IFR_LB , IFR_LB , IFR , IFR ,& ILB_ANG , ILB_ANG , ILB_ANG , ILB , ILB , ILB , IFR_LB , IFR_LB , IFR , IFR ,& ILB_ANG , ILB_ANG , ILB_ANG , ILB , ILB , ILB , IFR_LB , IFR_LB , IFR , IFR ,& ILB_ANG , ILB_ANG , ILB_ANG , ILB , ILB , ILB , IFR_LB , IFR_LB , IFR , IFR ,& ILB_ANG , ILB_ANG , ILB_ANG , ILB , ILB , ILB , IFR_LB , IFR_LB , IFR , IFR ,& ILB_FIN , ILB_FIN , ILB_FIN , ILB , ILB , ILB , IFR_LB , IFR_LB , IFR , IFR ,& ILB_FIN , ILB_FIN , ILB_FIN , ILB , ILB , ILB , IFR_LB , IFR_LB , IFR , IFR ,& ILB_FIN , ILB_FIN , ILB_FIN , ILB , ILB , ILB , IFR_LB , IFR_LB , IFR , IFR ,& ILB_FIN , ILB_FIN , ILB_FIN , ILB , ILB , ILB , IFR_LB , IFR_LB , IFR , IFR ,& ILB_FIN , ILB_FIN , ILB_FIN , ILB , ILB , ILB , IFR_LB , IFR_LB , IFR , IFR / ) INTEGER , DIMENSION ( 180 ), PARAMETER :: ICRIS_NONDEND1D = ( / & IPL , IPL , IFIN_ANG , IFIN_ANG , IFIN_ANG , IFIN_ANG , IFIN_ANG , IFIN_ANG , IFIN , IFIN ,& IPL , IPL , IFIN_ANG , IFIN_ANG , IFIN_ANG , IFIN_ANG , IFIN_ANG , IFIN_ANG , IFIN , IFIN ,& IPL , IPL , IFIN_ANG , IFIN_ANG , IFIN_ANG , IFIN_ANG , IFIN_ANG , IFIN_ANG , IFIN , IFIN ,& IPL , IPL , IFIN_ANG , IFIN_ANG , IFIN_ANG , IFIN_ANG , IFIN_ANG , IFIN_ANG , IFIN , IFIN ,& IPL_GOB , IPL_GOB , IPL_GOB , IPL_GOB , IPL_GOB , IGOB_FON , IGOB_FON , IGOB_FON , IGOB_FON , IGOB_FON ,& IGOB , IGOB , IGOB , IGOB , IGOB , IGOB_FON , IGOB_FON , IGOB_FON , IGOB_FON , IGOB_FON ,& IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IFIN_AR , IFIN_AR , IFIN_AR , IFIN_AR , IFIN_AR ,& IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IGEL , IGEL , IGEL , IGEL , IGEL ,& IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IGEL , IGEL , IGEL , IGEL , IGEL ,& IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IGOB_FON , IGOB_FON , IGOB_FON , IGOB_FON , IGOB_FON ,& IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IGOB_FON , IGOB_FON , IGOB_FON , IGOB_FON , IGOB_FON ,& IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IGOB_FON , IGOB_FON , IGOB_FON , IGOB_FON , IGOB_FON ,& IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IFIN_AR , IFIN_AR , IFIN_AR , IFIN_AR , IFIN_AR ,& IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IGEL , IGEL , IGEL , IGEL , IGEL ,& IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IGEL , IGEL , IGEL , IGEL , IGEL ,& IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IGOB_FON , IGOB_FON , IGOB_FON , IGOB_FON , IGOB_FON ,& IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IGOB_FON , IGOB_FON , IGOB_FON , IGOB_FON , IGOB_FON ,& IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IRON_ANG , IGOB_FON , IGOB_FON , IGOB_FON , IGOB_FON , IGOB_FON / ) ! END MODULE MODD_SNOW_PAR","tags":"","loc":"sourcefile/modd_snow_par.f90.html"},{"title":"ini_cturbs.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines INI_CTURBS Source Code ini_cturbs.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. SUBROUTINE INI_CTURBS !! !!****     *INI_CTURBS*  - routine to initialize the turbulence scheme !!                        constants. !! !!      PURPOSE !!      ------- !         The purpose of this routine is to initialize the turbulence !       scheme constants that are stored in module MODD_CTURB ! !!      METHOD !!      ------ !!        The constants are set to their numerical values !! !!      AUTHOR !!      ------ !!        V. Masson         * Meteo-France * !! !!      MODIFICATIONS !!      ------------- !! -------------------------------------------------------------------------- ! !*        0. DECLARATIONS !            ------------ ! USE MODD_CSTS , ONLY : XKARMAN USE MODD_CANOPY_TURB , ONLY : XTKEMIN , XCEP , XCED , XALPSBL , XA0 , XCMFS , XASBL ,& XCSHF , XCTP ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !  --------------------------------------------------------------------------- ! !         1. SETTING THE NUMERICAL VALUES !            ---------------------------- ! !         1.1 Constant for dissipation of Tke ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'INI_CTURBS' , 0 , ZHOOK_HANDLE ) XCED = 0.845 !       Redelsperger-Sommeria (1981) = 0.70 !       Schmidt-Schumann      (1989) = 0.845 !       Cheng-Canuto-Howard   (2002) = 0.845 ! ! !         1.2 Constant for wind pressure-correlations ! XCEP = 2.11 !       Redelsperger-Sommeria (1981) = 4. !       Schmidt-Schumann      (1989) = 3.5 !       Cheng-Canuto-Howard   (2002) = 2.11 ! ! !         1.3 Constant a0 for wind pressure-correlations ! XA0 = 0.6 !       Redelsperger-Sommeria (1981) = 0.6 !       Schmidt-Schumann      (1989) = 0.55 !       Cheng-Canuto-Howard   (2002) = 0.6 ! ! !         1.4 Constant for temperature and vapor pressure-correlations ! XCTP = 4.65 !       Redelsperger-Sommeria (1981) = 4. !       Schmidt-Schumann      (1989) = 3.25 !       Cheng-Canuto-Howard   (2002) = 4.65 ! ! !         1.5 Value related to the TKE universal function within SBL ! XALPSBL = 4.63 !       Redelsperger et al 2001     = 4.63 !       Wyngaard et al. 1974        = 3.75 !       Stull 1988                  = 4.75 ! ! ! !         2. Derivated constants !            ------------------- ! !         2.1 Constant in fluxes equations ! XCMFS = 2. / 3. / XCEP * ( 1. - XA0 ) !Constant for the momentum flux due to shear (RS) ! ! Redelsperger-Sommeria (1981) ......... 0.066 ! Schmidt-Schumann      (1989) ......... 0.086 ! Cheng-Canuto-Howard   (2002) ......... 0.126 ! XCSHF = 2. / 3. / XCTP !Constant for the sensible heat flux(RS) ! ! Redelsperger-Sommeria (1981) ......... 0.167 ! Schmidt-Schumann      (1989) ......... 0.204 ! Cheng-Canuto-Howard   (2002) ......... 0.143 ! ! !         2.2 Value related to the TKE universal function within SBL ! ! XASBL = 0.5 * ( XALPSBL ** ( 3. / 2. ) * XKARMAN * XCED + XKARMAN / SQRT ( XALPSBL ) / XCMFS ) !       Redelsperger et al 2001 ! ! ! !         3. MINIMUM VALUES !            -------------- ! XTKEMIN = 1.E-4 IF ( LHOOK ) CALL DR_HOOK ( 'INI_CTURBS' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE INI_CTURBS","tags":"","loc":"sourcefile/ini_cturbs.f90.html"},{"title":"modd_bem_cst.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_BEM_CST Source Code modd_bem_cst.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ############### MODULE MODD_BEM_CST !     ############### ! !!****  *MODD_BEM_CST* - declaration of Technical constants for Building Energy Model !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      G. Pigeon    *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    04/2012 !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! IMPLICIT NONE REAL , PARAMETER :: XWIN_SW_MAX = 15 0. ! Maximum shortwave radiation received by !                                     ! windows before activation of shading !                                     ! (if available and pertinent). REAL , PARAMETER :: XCOMFORT_TEMP_FOR_SHADING_USE = 29 7.16 !                                     ! temperature above which one considers !                                     ! the use of shading protections ! END MODULE MODD_BEM_CST","tags":"","loc":"sourcefile/modd_bem_cst.f90.html"},{"title":"bld_e_budget.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines BLD_E_BUDGET Source Code bld_e_budget.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE BLD_E_BUDGET ( OTI_EVOL , PTSTEP , PBLD , PWALL_O_HOR , & PRHOA , PT_ROOF , PT_WALL , PTI_BLD , PTS_FLOOR ) !   ########################################################################## ! !!****  *BLD_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of the temperature of inside building air ! !!**  METHOD !     ------ ! !     The resistance term between the surfaces and the room is given !     by a standard value, which mimics both the convection !     and the radiative interactions in the room. !     This explains the very low resistance. It is used to compute !     the evolution of the surfaces only. !     This resistance value is 0.123 Km/W  (typical for inside surfaces). !     (ENVIRONMENTAL SCIENCE IN BUILDING, 3rd Edition, Randall McMullan, !      THE MACMILLAN PRESS Limited). ! ! ! !     On the contrary, the evolution of the air temperature is mainly !     governed by the convection (considering the low radiative absorption !     of the air itself). !     In order to have a simple formulation, a diurnal cycle is assumed, !     with a force restore formulation. ! !     The floor temperature is fixed ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    24/08/00 ! !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_CSTS , ONLY : XTT , XCPD , XDAY USE MODD_SURF_PAR , ONLY : XUNDEF ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! LOGICAL , INTENT ( IN ) :: OTI_EVOL ! true --> internal temp. of !                                                   !      of buildings evolves !                                                   ! false--> it is fixed REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PBLD ! building fraction REAL , DIMENSION (:), INTENT ( IN ) :: PWALL_O_HOR ! wall surf. / hor. surf. REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density ! at the lowest level REAL , DIMENSION (:,:), INTENT ( IN ) :: PT_ROOF ! roof layers temperatures REAL , DIMENSION (:,:), INTENT ( IN ) :: PT_WALL ! wall layers temperatures REAL , DIMENSION (:), INTENT ( INOUT ) :: PTI_BLD ! building air temperature ! computed with its equation evolution REAL , DIMENSION (:), INTENT ( IN ) :: PTS_FLOOR ! floor surface temperature ! !*      0.2    declarations of local variables ! ! REAL :: ZTAU ! temporal filter period ! INTEGER :: IROOF ! number of roof layers INTEGER :: IWALL ! number of wall layers REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'BLD_E_BUDGET' , 0 , ZHOOK_HANDLE ) ! !*      1.   initializations !            --------------- ! IROOF = SIZE ( PT_ROOF , 2 ) IWALL = SIZE ( PT_WALL , 2 ) ! !!! 27/01/2012 passé dans TEB !! PTS_FLOOR(:)= 19. + XTT !!! 27/01/2012 passé dans TEB ! !*      2.   no evolution of interior temperature if OTI_EVOL=.FALSE. !            -------------------------------------------------------- ! IF (. NOT . OTI_EVOL . AND . LHOOK ) CALL DR_HOOK ( 'BLD_E_BUDGET' , 1 , ZHOOK_HANDLE ) IF (. NOT . OTI_EVOL ) RETURN ! !*      3.   evolution of the internal temperature !            ------------------------------------- ! ZTAU = XDAY ! WHERE ( PBLD (:) . GT . 0. ) PTI_BLD (:) = PTI_BLD (:) * ( ZTAU - PTSTEP ) / ZTAU & + ( PT_ROOF (:, IROOF ) * PBLD (:) & + PT_WALL (:, IWALL ) * PWALL_O_HOR (:) & + PTS_FLOOR (:) * PBLD (:) ) & / ( 2. * PBLD (:) + PWALL_O_HOR (:) ) * PTSTEP / ZTAU ELSEWHERE PTI_BLD (:) = PTS_FLOOR (:) ENDWHERE ! ! !*      5.   internal temperature set to a minimum value (heating) !            ----------------------------------------------------- ! PTI_BLD (:) = MAX ( PTI_BLD (:) , PTS_FLOOR (:) ) ! IF ( LHOOK ) CALL DR_HOOK ( 'BLD_E_BUDGET' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- END SUBROUTINE BLD_E_BUDGET","tags":"","loc":"sourcefile/bld_e_budget.f90.html"},{"title":"modd_surf_atmn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_SURF_ATM_n Source Code modd_surf_atmn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     #################### MODULE MODD_SURF_ATM_n !     ###################### ! !!****  *MODD_SURF_ATM - declaration of surface parameters !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson and A. Boone   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       01/2004 ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_TYPE_DATE_SURF ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE SURF_ATM_t ! !----------------------------------------------------------------------------------------------------- ! ! Type of each surface scheme ! CHARACTER ( LEN = 6 ) :: CTOWN ! name of the urban surface scheme CHARACTER ( LEN = 6 ) :: CNATURE ! name of the soil&vegetation surface scheme CHARACTER ( LEN = 6 ) :: CWATER ! name of the scheme for inland water CHARACTER ( LEN = 6 ) :: CSEA ! name for the ocean scheme ! !----------------------------------------------------------------------------------------------------- ! ! Surface/Tile Fractions: ! REAL , POINTER , DIMENSION (:) :: XTOWN ! urban surface fraction of the grid box   (-) REAL , POINTER , DIMENSION (:) :: XNATURE ! natural surface fraction of the grid box (-) REAL , POINTER , DIMENSION (:) :: XWATER ! inland water fraction of the grid box    (-) REAL , POINTER , DIMENSION (:) :: XSEA ! sea/ocean fraction of the grid box       (-) ! !------------------------------------------------------------------------------- ! ! type of initialization of vegetation: from cover types (ecoclimap) or parameters prescribed ! LOGICAL :: LECOCLIMAP ! T: parameters computed from ecoclimap !                                              ! F: they are read in the file ! LOGICAL :: LECOSG ! T: parameters computed from ecosg !------------------------------------------------------------------------------- ! ! change water (not lake) to nature and/or town to rock : arrange cover properly ! LOGICAL :: LWATER_TO_NATURE ! T: Change Wetland treated as inland water into nature LOGICAL :: LTOWN_TO_ROCK ! T: Change Town into Rock ! !------------------------------------------------------------------------------- ! ! include urban green areas for urbanized covers ! LOGICAL :: LGARDEN ! T: define urban green areas !                                              ! F: no urban green areas ! !----------------------------------------------------------------------------------------------------- ! ! Masks and number of grid elements for each tile surface ! ! Sea/Ocean: ! INTEGER :: NSIZE_SEA ! number of grid points by proc containing a !                                                     ! sea surface                              (-) INTEGER :: NDIM_SEA ! total number of grid points containing a !                                                     ! sea surface                             (-) INTEGER , POINTER , DIMENSION (:) :: NR_SEA ! sea/ocean surface mask                  (-) ! ! Inland Water: ! INTEGER :: NSIZE_WATER ! number of grid points containing an !                                                     ! inland water surface                    (-) INTEGER :: NDIM_WATER ! total number of grid points by proc containing an !                                                     ! inland surface INTEGER , POINTER , DIMENSION (:) :: NR_WATER ! ! Town: ! INTEGER :: NSIZE_TOWN ! number of grid points by proc containing an !                                                     ! urban surface                           (-) INTEGER :: NDIM_TOWN ! total number of grid points containing an !                                                     ! urban surface INTEGER , POINTER , DIMENSION (:) :: NR_TOWN ! urban surface mask                      (-) ! ! Natural surface: ! INTEGER :: NSIZE_NATURE ! number of grid points by proc containing a !                                                     ! natural surface                         (-) INTEGER :: NDIM_NATURE ! total number of grid points containing a !                                                     ! natural surface                         (-) INTEGER , POINTER , DIMENSION (:) :: NR_NATURE ! natural surface mask                    (-) ! ! All surfaces: ! INTEGER :: NSIZE_FULL ! total number of grid points by proc     (-) INTEGER :: NDIM_FULL ! total number of grid points             (-) ! ! global sizes of the physical domain ! INTEGER :: NIMAX_SURF_ll INTEGER :: NJMAX_SURF_ll ! ! local sizes of the physical domain ! INTEGER :: NIMAX_SURF_LOC INTEGER :: NJMAX_SURF_LOC ! !----------------------------------------------------------------------------------------------------- ! ! Surface fields (only 1 horizontal dimension) ! REAL , POINTER , DIMENSION (:,:) :: XCOVER ! fraction of each ecosystem for each grid box (-) LOGICAL , POINTER , DIMENSION (:) :: LCOVER ! GCOVER(i)=T --> ith cover field is not 0. REAL , POINTER , DIMENSION (:) :: XZS ! orography                                    (m) ! !------------------------------------------------------------------------------- ! TYPE ( DATE_TIME ) :: TTIME ! current date and time ! REAL :: XOUT_TSTEP ! output writing time step ! !----------------------------------------------------------------------------------------------------- ! ! physical fields need into the restart file for ARPEGE/ALADIN run ! REAL , POINTER , DIMENSION (:) :: XRAIN ! Rainfall rate at surface               (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XSNOW ! snowfall rate at surface               (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XZ0 ! surface roughness length for momentum  (m) REAL , POINTER , DIMENSION (:) :: XZ0H ! surface roughness length for heat      (m) REAL , POINTER , DIMENSION (:) :: XQSURF ! specific humidity at surface           (kg/kg) ! !----------------------------------------------------------------------------------------------------- ! ! END TYPE SURF_ATM_t ! CONTAINS ! ! ! SUBROUTINE SURF_ATM_INIT ( YSURF_ATM ) TYPE ( SURF_ATM_t ), INTENT ( INOUT ) :: YSURF_ATM REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SURF_ATM_N:SURF_ATM_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YSURF_ATM % XTOWN ) NULLIFY ( YSURF_ATM % XNATURE ) NULLIFY ( YSURF_ATM % XWATER ) NULLIFY ( YSURF_ATM % XSEA ) NULLIFY ( YSURF_ATM % NR_SEA ) NULLIFY ( YSURF_ATM % NR_WATER ) NULLIFY ( YSURF_ATM % NR_TOWN ) NULLIFY ( YSURF_ATM % NR_NATURE ) NULLIFY ( YSURF_ATM % XCOVER ) NULLIFY ( YSURF_ATM % LCOVER ) NULLIFY ( YSURF_ATM % XZS ) NULLIFY ( YSURF_ATM % XRAIN ) NULLIFY ( YSURF_ATM % XSNOW ) NULLIFY ( YSURF_ATM % XZ0 ) NULLIFY ( YSURF_ATM % XZ0H ) NULLIFY ( YSURF_ATM % XQSURF ) YSURF_ATM % CTOWN = ' ' YSURF_ATM % CNATURE = ' ' YSURF_ATM % CWATER = ' ' YSURF_ATM % CSEA = ' ' YSURF_ATM % LECOCLIMAP = . FALSE . YSURF_ATM % LECOSG = . FALSE . YSURF_ATM % LWATER_TO_NATURE = . FALSE . YSURF_ATM % LTOWN_TO_ROCK = . FALSE . YSURF_ATM % LGARDEN = . FALSE . YSURF_ATM % NSIZE_SEA = 0 YSURF_ATM % NDIM_SEA = 0 YSURF_ATM % NSIZE_WATER = 0 YSURF_ATM % NDIM_WATER = 0 YSURF_ATM % NSIZE_TOWN = 0 YSURF_ATM % NDIM_TOWN = 0 YSURF_ATM % NSIZE_NATURE = 0 YSURF_ATM % NDIM_NATURE = 0 YSURF_ATM % NSIZE_FULL = 0 YSURF_ATM % NDIM_FULL = 0 YSURF_ATM % NIMAX_SURF_ll = 0 YSURF_ATM % NJMAX_SURF_ll = 0 YSURF_ATM % NIMAX_SURF_LOC = 0 YSURF_ATM % NJMAX_SURF_LOC = 0 YSURF_ATM % XOUT_TSTEP = 0. IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SURF_ATM_N:SURF_ATM_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE SURF_ATM_INIT END MODULE MODD_SURF_ATM_n","tags":"","loc":"sourcefile/modd_surf_atmn.f90.html"},{"title":"modd_data_cover_par.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DATA_COVER_PAR Source Code modd_data_cover_par.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ###################### MODULE MODD_DATA_COVER_PAR !     ###################### ! !!****  *MODD_DATA_COVER_PAR* - declaration of prognostic variables related !!                          to the ground parameterization !! !!    PURPOSE !!    ------- !       The purpose of this declarative module is to specify  the !     parameters related to the surface parameterization interface. ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      S. Belair   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       29/04/95 !!      (V.Masson)     05/10/98+ add XCDZ0EFF, XRHOSMIN, XRHOSMAX !!      (V.Masson)     15/03/99 add number of layers !!      (A.Boone)      02/05/02 add ISBA-ES parameters !!      (R.Alkama)     05/2012  add 7 new vegtypes (19 rather than 12) !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! IMPLICIT NONE ! !------------------------------------------------------------------------------ ! ! Maximum number of cover classes INTEGER :: JPCOVER !last class number of EUROPE INTEGER , PARAMETER :: NCOVER_ECO1_END = 255 !firt class number of EUROPE INTEGER , PARAMETER :: NCOVER_ECO2_START = 301 ! INTEGER , PARAMETER :: NVEGTYPE_OLD = 19 INTEGER , PARAMETER :: NVEGTYPE_ECOSG = 20 ! INTEGER , PARAMETER :: NWATTYPE = 2 INTEGER , PARAMETER :: NSEATYPE = 1 INTEGER , PARAMETER :: NTWNTYPE = 10 INTEGER , DIMENSION ( 4 ) :: NTYPE = ( / NSEATYPE , NWATTYPE , NVEGTYPE_ECOSG , NTWNTYPE / ) ! LOGICAL , DIMENSION ( NVEGTYPE_ECOSG ) :: LVEG_PRES ! INTEGER , PARAMETER :: NCOVER = 573 ! INTEGER :: NVEGTYPE ! ! number of vegetation types ! INTEGER :: NVT_C4 ! C4 cultures types INTEGER :: NVT_TRBE ! tropical broadleaf evergreen   EVER INTEGER :: NVT_TRBD ! tropical broadleaf deciduous   TREE INTEGER :: NVT_TEBE ! temperate broadleaf evergreen  TREE INTEGER :: NVT_TEBD ! temperate broadleaf cold-deciduous (summergreen)  TREE INTEGER :: NVT_TENE ! temperate needleleaf evergreen CONI INTEGER :: NVT_BOBD ! boreal broadleaf cold-deciduous (summergreen) TREE INTEGER :: NVT_BONE ! boreal needleleaf evergreen    CONI INTEGER :: NVT_BOND ! boreal needleleaf cold-deciduous (summergreen) CONI INTEGER :: NVT_BOGR ! Arctic Grass  C3               GRAS INTEGER :: NVT_SHRB ! Shrub        (TREE <= 2 m) INTEGER :: NVT_GRAS ! GRASsland      C3 INTEGER :: NVT_TROG ! TROpical Grass C4 INTEGER :: NVT_C3 ! C3 CULTures types INTEGER :: NVT_NO ! NO vegetation INTEGER :: NVT_ROCK ! ROCKs INTEGER :: NVT_SNOW ! Ice-cap ice-sheet INTEGER :: NVT_IRR ! IRRigated crops INTEGER :: NVT_PARK ! irrigated PARKs gardens or peat bogs ! INTEGER :: NVT_C3W ! winter C3 crops INTEGER :: NVT_C3S ! summer C3 crops INTEGER :: NVT_FLTR ! flooded trees INTEGER :: NVT_FLGR ! flooded grassland ! ! indexes of these types (C4 cultures types, Broadleaf TREEs, CONIferous trees, !                         EVERgreen broadleaf trees, GRASsland, TROpical Grass, !                         C3 CULTures types, NO vegetation, ROCKs, !                         IRRigated crops, irrigated PARKs gardens or peat bogs) ! INTEGER :: NUT_CPHR INTEGER :: NUT_CPMR INTEGER :: NUT_CPLR INTEGER :: NUT_OPHR INTEGER :: NUT_OPMR INTEGER :: NUT_OPLR INTEGER :: NUT_LWLR INTEGER :: NUT_LALR INTEGER :: NUT_SPAR INTEGER :: NUT_INDU ! !--------------------------------------------------------------------------------- ! ! Ecosystem corresponding to bare soil or permanent snow ! INTEGER :: NBARE_SOIL INTEGER :: NROCK INTEGER :: NPERMSNOW !--------------------------------------------------------------------------------- ! ! Free water bodies ! INTEGER , DIMENSION (:), ALLOCATABLE :: NSEA INTEGER , DIMENSION (:), ALLOCATABLE :: NWATER ! !--------------------------------------------------------------------------------- ! ! maximum number of tiles used at any grid point ! INTEGER :: NTILESFC = 4 ! !--------------------------------------------------------------------------------- ! !* building layers in the ecoclimap data ! INTEGER :: NDATA_ROOF_LAYER INTEGER :: NDATA_ROAD_LAYER INTEGER :: NDATA_WALL_LAYER INTEGER :: NDATA_FLOOR_LAYER ! !--------------------------------------------------------------------------------- !* names of all ecosystems ! CHARACTER ( LEN = 60 ), DIMENSION (:,:), ALLOCATABLE :: CNAMES !--------------------------------------------------------------------------------- ! ! reference height for CDN averaging ! REAL :: XCDREF = 2 0. ! !--------------------------------------------------------------------------------- END MODULE MODD_DATA_COVER_PAR","tags":"","loc":"sourcefile/modd_data_cover_par.f90.html"},{"title":"spll_modi_vslog.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_VSLOG Source Code spll_modi_vslog.f90 Source Code !auto_modi:spll_vslog.D MODULE MODI_VSLOG INTERFACE SUBROUTINE VSLOG ( PA , PLOG , N ) IMPLICIT NONE INTEGER :: N REAL :: PA ( N ), PLOG ( N ) END END INTERFACE END MODULE MODI_VSLOG","tags":"","loc":"sourcefile/spll_modi_vslog.f90.html"},{"title":"spll_modi_bem.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_BEM Source Code spll_modi_bem.f90 Source Code !auto_modi:spll_bem.D MODULE MODI_BEM INTERFACE SUBROUTINE BEM ( BOP , T , B , DMT , PTSTEP , PSUNTIME , KDAY , PPS , PRHOA , PT_CAN , & PQ_CAN , PU_CAN , PHU_BLD , PT_RAD_IND , PFLX_BLD_FL , PFLX_BLD_MA ,& PRADHT_IN , PRAD_RF_MA , PRAD_RF_FL , PRAD_WL_MA , PRAD_WL_FL ,& PRAD_WIN_MA , PRAD_WIN_FL , PCONV_RF_BLD , PCONV_WL_BLD , & PCONV_WIN_BLD , PLOAD_IN_FL , PLOAD_IN_MA ) USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t IMPLICIT NONE TYPE ( BEM_OPTIONS_t ), INTENT ( INOUT ) :: BOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT REAL , INTENT ( IN ) :: PTSTEP ! Time step REAL , DIMENSION (:), INTENT ( IN ) :: PSUNTIME ! current solar time since midnight (solar time, s) INTEGER , INTENT ( IN ) :: KDAY ! Simulation day REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! Canyon air pressure [Pa] REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! Air density at the lowest level [kg m-3] REAL , DIMENSION (:), INTENT ( IN ) :: PT_CAN ! Canyon air temperature [K] REAL , DIMENSION (:), INTENT ( IN ) :: PQ_CAN ! Canyon air specific humidity [kg kg-1] REAL , DIMENSION (:), INTENT ( IN ) :: PU_CAN ! Canyon wind speed (m s-1) REAL , DIMENSION (:), INTENT ( OUT ) :: PHU_BLD ! Indoor relative humidity 0 < (-) < 1 REAL , DIMENSION (:), INTENT ( IN ) :: PT_RAD_IND ! Indoor mean radiant temperature [K] REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_FL ! Heat flux from indoor air to floor REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_MA ! Heat flux from indoor air to mass REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_RF_MA ! Rad. fluxes between roof and mass REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_RF_FL ! Rad. fluxes between roof and floor REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_WL_MA ! Rad. fluxes between wall and mass REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_WL_FL ! Rad. fluxes between wall and floor REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_WIN_MA ! Rad. fluxes between wind. and mass REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_WIN_FL ! Rad. fluxes between wind. and floor REAL , DIMENSION (:) , INTENT ( IN ) :: PCONV_RF_BLD ! Conv. fluxes between roof and indoor air REAL , DIMENSION (:) , INTENT ( IN ) :: PCONV_WL_BLD ! Conv. fluxes between wall and indoor air REAL , DIMENSION (:) , INTENT ( IN ) :: PCONV_WIN_BLD ! Conv. fluxes between wind. and indoor air REAL , DIMENSION (:) , INTENT ( IN ) :: PLOAD_IN_FL ! solar + int heat gain on floor W/m2 [floor] REAL , DIMENSION (:) , INTENT ( IN ) :: PLOAD_IN_MA ! solar + int heat gain on floor W/m2 [mass] END SUBROUTINE BEM END INTERFACE END MODULE MODI_BEM","tags":"","loc":"sourcefile/spll_modi_bem.f90.html"},{"title":"spll_modi_surface_aero_cond.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_SURFACE_AERO_COND Source Code spll_modi_surface_aero_cond.f90 Source Code !auto_modi:spll_surface_aero_cond.D MODULE MODI_SURFACE_AERO_COND INTERFACE SUBROUTINE SURFACE_AERO_COND ( PRI , PZREF , PUREF , PVMOD , PZ0 ,& PZ0H , PAC , PRA , PCH ) IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PRI ! Richardson number REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the wind REAL , DIMENSION (:), INTENT ( IN ) :: PZ0 ! roughness length for momentum REAL , DIMENSION (:), INTENT ( IN ) :: PZ0H ! roughness length for heat REAL , DIMENSION (:), INTENT ( OUT ) :: PAC ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PRA ! aerodynamical resistance REAL , DIMENSION (:), INTENT ( OUT ) :: PCH ! drag coefficient for heat END SUBROUTINE SURFACE_AERO_COND END INTERFACE END MODULE MODI_SURFACE_AERO_COND","tags":"","loc":"sourcefile/spll_modi_surface_aero_cond.f90.html"},{"title":"modd_meb_par.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_MEB_PAR Source Code modd_meb_par.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ###################### MODULE MODD_MEB_PAR !     ###################### ! !!****  *MODD_MEB_PAR* - declaration of parameters related !!                          to the MEB parameterizations !! !!    PURPOSE !!    ------- !       The purpose of this declarative module is to specify  the !     parameters related to the surface parameterizations of MEB. ! !! !! !! !!    AUTHOR !!    ------ !!      P. Samuelsson !! !!    MODIFICATIONS !!    ------------- !!      Original       09/2013 !!      13/09/18 (A. Boone) Added Litter thermal and hydrological parameters !!                          herein !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! IMPLICIT NONE ! ! Extinction coefficient for view factor for long-wave radiation ! REAL , SAVE :: XTAU_LW ! ! MEB resistance increase factor for canopy air sapce ! REAL , SAVE :: XRAGNC_FACTOR ! ! MEB maximum vegetation-intercepted water fraction ! REAL , SAVE :: XKDELTA_WR ! ! Constants ! --------- ! ! Cuurently MEB considers 2 spectral bands, with weights below. ! As more bands are eventually added, one must adjust these weights ! and add more so that the total = NSPB_MEB ! INTEGER , PARAMETER :: NSPB_MEB = 2 ! number of bands (below) ! REAL , PARAMETER :: XSW_WGHT_VIS = 0.48 ! REAL , PARAMETER :: XSW_WGHT_NIR = 0.52 ! ! Litter thermal (THRM) and hydrological (HYD) properties ! ------------------------------------------------------- ! REAL , PARAMETER :: XLITTER_THRM_Z1 = 4 5.00 !litter bulk density (kg/m3) REAL , PARAMETER :: XLITTER_THRM_Z2 = 0.10 !coeff for litter conductivity (W/(mK)) REAL , PARAMETER :: XLITTER_THRM_Z3 = 0.03 !coeff for litter conductivity REAL , PARAMETER :: XLITTER_HYD_Z4 = 0.95 !litter porosity       (m3/m3) REAL , PARAMETER :: XLITTER_HYD_Z5 = 0.12 !litter field capacity (m3/m3) ! !------------------------------------------------------------------------------- ! END MODULE MODD_MEB_PAR","tags":"","loc":"sourcefile/modd_meb_par.f90.html"},{"title":"mode_conv_DOE.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODE_CONV_DOE Source Code mode_conv_DOE.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !################### MODULE MODE_CONV_DOE !################### ! !!****  *MODE_CONV_DOE* - !! !!    PURPOSE !!    ------- ! ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!       NONE !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!    G. Pigeon !! !!    MODIFICATIONS !!    ------------- !!      Original    20/08/12 ! !-------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! !-------------------------------------------------------------------------------- USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB INTERFACE CHTC_VERT_DOE MODULE PROCEDURE CHTC_VERT_DOE_0D MODULE PROCEDURE CHTC_VERT_DOE_1D END INTERFACE INTERFACE CHTC_UP_DOE MODULE PROCEDURE CHTC_UP_DOE_0D MODULE PROCEDURE CHTC_UP_DOE_1D END INTERFACE INTERFACE CHTC_SMOOTH_LEE_DOE MODULE PROCEDURE CHTC_SMOOTH_LEE_DOE_0D MODULE PROCEDURE CHTC_SMOOTH_LEE_DOE_1D END INTERFACE INTERFACE CHTC_SMOOTH_WIND_DOE MODULE PROCEDURE CHTC_SMOOTH_WIND_DOE_0D MODULE PROCEDURE CHTC_SMOOTH_WIND_DOE_1D END INTERFACE INTERFACE CHTC_ROUGH_DOE MODULE PROCEDURE CHTC_ROUGH_DOE_0D MODULE PROCEDURE CHTC_ROUGH_DOE_1D END INTERFACE ! CONTAINS !---------------------------- !############################################# FUNCTION CHTC_VERT_DOE_0D ( PTS , PTA ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_VERT_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     a vertical surface from surface temperature and air !     temperature ! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , INTENT ( IN ) :: PTS ! Surface temperature (Kelvin) REAL , INTENT ( IN ) :: PTA ! Air temperature (Kelvin) REAL :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_VERT_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE THE CHTC !              ---------------- ! PCHTC = 1.31 * ( ABS ( PTA - PTS )) ** ( 1. / 3. ) !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_VERT_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_VERT_DOE_0D !######################### !############################################# FUNCTION CHTC_VERT_DOE_1D ( PTS , PTA ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_VERT_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     a vertical surface from surface temperature and air !     temperature ! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PTS ! Surface temperature (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! Air temperature (Kelvin) REAL , DIMENSION ( SIZE ( PTS )) :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_VERT_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE THE CHTC !              ---------------- ! PCHTC = 1.31 * ( ABS ( PTA - PTS )) ** ( 1. / 3. ) !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_VERT_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_VERT_DOE_1D !######################### ! !############################################# FUNCTION CHTC_UP_DOE_1D ( PTS , PTA ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_UP_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     an upward surface from surface temperature and air !     temperature ! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , DIMENSION (:), INTENT ( IN ) :: PTS ! Surface temperature (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! Air temperature (Kelvin) REAL , DIMENSION ( SIZE ( PTS )) :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_UP_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE THE CHTC !              ---------------- ! WHERE ( PTA < PTS ) PCHTC = 9.482 * ( PTS - PTA ) ** ( 1. / 3. ) / ( 7.283 - 1 ) ELSE WHERE PCHTC = 1.810 * ( PTA - PTS ) ** ( 1. / 3. ) / ( 1.382 + 1 ) END WHERE ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_UP_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_UP_DOE_1D !####################### !############################################# FUNCTION CHTC_UP_DOE_0D ( PTS , PTA ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_UP_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     an upward surface from surface temperature and air !     temperature ! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , INTENT ( IN ) :: PTS ! Surface temperature (Kelvin) REAL , INTENT ( IN ) :: PTA ! Air temperature (Kelvin) REAL :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_UP_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE THE CHTC !              ---------------- ! IF ( PTA < PTS ) THEN PCHTC = 9.482 * ( PTS - PTA ) ** ( 1. / 3. ) / ( 7.283 - 1 ) ELSE PCHTC = 1.810 * ( PTA - PTS ) ** ( 1. / 3. ) / ( 1.382 + 1 ) ENDIF ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_UP_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_UP_DOE_0D !####################### ! !############################################# FUNCTION CHTC_DOWN_DOE ( PTS , PTA ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_DOWN_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     an downward surface from surface temperature and air !     temperature ! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , DIMENSION (:), INTENT ( IN ) :: PTS ! Surface temperature (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! Air temperature (Kelvin) REAL , DIMENSION ( SIZE ( PTS )) :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_DOWN_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE THE CHTC !              ---------------- ! WHERE ( PTA > PTS ) PCHTC = 9.482 * ( PTA - PTS ) ** ( 1. / 3. ) / ( 7.283 - 1 ) ELSE WHERE PCHTC = 1.810 * ( PTS - PTA ) ** ( 1. / 3. ) / ( 1.382 + 1 ) END WHERE ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_DOWN_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_DOWN_DOE !######################### ! !############################################# FUNCTION CHTC_SMOOTH_LEE_DOE_0D ( PCHTCN , PVMOD ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_SMOOTH_LEE_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     a leeward smooth surface from the natural convection coef and the !     wind speed ! !!**  METHOD !!    ------ !! !!    from EnergyPlus Engineering Reference, average the leeward/windward coef !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , INTENT ( IN ) :: PCHTCN ! Convective heat transfer coefficient for natural conv. [W/(m2.K)] REAL , INTENT ( IN ) :: PVMOD ! wind speed (m/s) REAL :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! !*       0.2   Declarations of local variables ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE REAL :: ZALEE , ZBLEE ! coef for leeward facade !---------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_SMOOTH_LEE_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    INITIALIZE COEF !              ---------------- ! ZALEE = 2.86 ZBLEE = 0.617 !*       2.    COMPUTE THE CHTC !              ---------------- ! PCHTC = SQRT ( PCHTCN ** 2 + ( ZALEE * PVMOD ** ZBLEE ) ** 2 ) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_SMOOTH_LEE_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_SMOOTH_LEE_DOE_0D !######################### !############################################# FUNCTION CHTC_SMOOTH_LEE_DOE_1D ( PCHTCN , PVMOD ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_SMOOTH_LEE_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     a leeward smooth surface from the natural convection coef and the !     wind speed ! !!**  METHOD !!    ------ !! !!    from EnergyPlus Engineering Reference, average the leeward/windward coef !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , DIMENSION (:), INTENT ( IN ) :: PCHTCN ! Convective heat transfer coefficient for natural conv. [W/(m2.K)] REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! wind speed (m/s) REAL , DIMENSION ( SIZE ( PCHTCN )) :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! !*       0.2   Declarations of local variables ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE REAL :: ZALEE , ZBLEE ! coef for windward/leeward facade !---------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_SMOOTH_LEE_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    INITIALIZE COEF !              ---------------- ! ZALEE = 2.86 ZBLEE = 0.617 !*       2.    COMPUTE THE CHTC !              ---------------- ! PCHTC = SQRT ( PCHTCN ** 2 + ( ZALEE * PVMOD ** ZBLEE ) ** 2 ) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_SMOOTH_LEE_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_SMOOTH_LEE_DOE_1D !######################### !############################################# FUNCTION CHTC_SMOOTH_WIND_DOE_0D ( PCHTCN , PVMOD ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_SMOOTH_WIND_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     a smooth surface from the natural convection coef and the !     wind speed ! !!**  METHOD !!    ------ !! !!    from EnergyPlus Engineering Reference, average the leeward/windward coef !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , INTENT ( IN ) :: PCHTCN ! Convective heat transfer coefficient for natural conv. [W/(m2.K)] REAL , INTENT ( IN ) :: PVMOD ! wind speed (m/s) REAL :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! !*       0.2   Declarations of local variables ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE REAL :: ZAWIND , ZBWIND ! coef for windward/leeward facade !---------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_SMOOTH_WIND_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    INITIALIZE COEF !              ---------------- ! ZAWIND = 2.38 ZBWIND = 0.89 !*       2.    COMPUTE THE CHTC !              ---------------- ! PCHTC = SQRT ( PCHTCN ** 2 + ( ZAWIND * PVMOD ** ZBWIND ) ** 2 ) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_SMOOTH_WIND_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_SMOOTH_WIND_DOE_0D !######################### !############################################# FUNCTION CHTC_SMOOTH_WIND_DOE_1D ( PCHTCN , PVMOD ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_SMOOTH_WIND_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     a windward smooth surface from the natural convection coef and the !     wind speed ! !!**  METHOD !!    ------ !! !!    from EnergyPlus Engineering Reference, average the leeward/windward coef !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , DIMENSION (:), INTENT ( IN ) :: PCHTCN ! Convective heat transfer coefficient for natural conv. [W/(m2.K)] REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! wind speed (m/s) REAL , DIMENSION ( SIZE ( PCHTCN )) :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! !*       0.2   Declarations of local variables ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE REAL :: ZAWIND , ZBWIND ! coef for windward facade !---------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_SMOOTH_WIND_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    INITIALIZE COEF !              ---------------- ! ZAWIND = 2.38 ZBWIND = 0.89 !*       2.    COMPUTE THE CHTC !              ---------------- ! PCHTC = SQRT ( PCHTCN ** 2 + ( ZAWIND * PVMOD ** ZBWIND ) ** 2 ) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_SMOOTH_WIND_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_SMOOTH_WIND_DOE_1D !######################### !############################################# FUNCTION CHTC_ROUGH_DOE_0D ( PCHTCN , PCHTCS , PROUGH ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_ROUGH_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     a rough surface from the natural convection coef, the !     smooth surface convective coef and the roughness coef ! !!**  METHOD !!    ------ !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , INTENT ( IN ) :: PCHTCN ! Convective heat transfer coefficient for natural conv. [W/(m2.K)] REAL , INTENT ( IN ) :: PCHTCS ! Convective heat transfer coefficient for a smooth surface [W/(m2.K)] REAL , INTENT ( IN ) :: PROUGH ! Convective heat transfer coefficient for a smooth surface [W/(m2.K)] REAL :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! !*       0.2   Declarations of local variables ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !---------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_ROUGH_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE THE CHTC !              ---------------- ! PCHTC = PCHTCN + PROUGH * ( PCHTCS - PCHTCN ) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_ROUGH_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_ROUGH_DOE_0D !######################### !############################################# FUNCTION CHTC_ROUGH_DOE_1D ( PCHTCN , PCHTCS , PROUGH ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_ROUGH_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     a rough surface from the natural convection coef, the !     smooth surface convective coef and the roughness coef ! !!**  METHOD !!    ------ !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , DIMENSION (:), INTENT ( IN ) :: PCHTCN ! Convective heat transfer coefficient for natural conv. [W/(m2.K)] REAL , DIMENSION (:), INTENT ( IN ) :: PCHTCS ! Convective heat transfer coefficient for a smooth surface [W/(m2.K)] REAL , DIMENSION (:), INTENT ( IN ) :: PROUGH ! Convective heat transfer coefficient for a smooth surface [W/(m2.K)] REAL , DIMENSION ( SIZE ( PCHTCN )) :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! !*       0.2   Declarations of local variables ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !---------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_ROUGH_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE THE CHTC !              ---------------- ! PCHTC = PCHTCN + PROUGH * ( PCHTCS - PCHTCN ) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_ROUGH_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_ROUGH_DOE_1D END MODULE MODE_CONV_DOE","tags":"","loc":"sourcefile/mode_conv_doe.f90.html"},{"title":"spll_modi_bld_occ_calendar.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_BLD_OCC_CALENDAR Source Code spll_modi_bld_occ_calendar.f90 Source Code !auto_modi:spll_bld_occ_calendar.D MODULE MODI_BLD_OCC_CALENDAR INTERFACE SUBROUTINE BLD_OCC_CALENDAR ( TPTIME , PTSUN , T , B , PQIN_FRAC , PTCOOL_TARGET , PTHEAT_TARGET , PQIN ) USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_TYPE_DATE_SURF , ONLY : DATE_TIME IMPLICIT NONE TYPE ( DATE_TIME ), INTENT ( INOUT ) :: TPTIME REAL , DIMENSION (:) , INTENT ( IN ) :: PTSUN ! current solar time  (s, UTC) TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B REAL , INTENT ( IN ) :: PQIN_FRAC ! Fraction of internal gains when unoccupied (-) REAL , DIMENSION (:) , INTENT ( OUT ) :: PTCOOL_TARGET ! Cooling setpoint of HVAC system [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PTHEAT_TARGET ! Heating setpoint of HVAC system [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PQIN ! Internal heat gains [W m-2(floor)] END SUBROUTINE BLD_OCC_CALENDAR END INTERFACE END MODULE MODI_BLD_OCC_CALENDAR","tags":"","loc":"sourcefile/spll_modi_bld_occ_calendar.f90.html"},{"title":"modd_water_par.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_WATER_PAR Source Code modd_water_par.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ###################### MODULE MODD_WATER_PAR !     ###################### ! !!****  *MODD_WATER_PAR* - declaration of parameters related !!                          to the water parameterization !! !!    PURPOSE !!    ------- !       The purpose of this declarative module is to specify  the !     parameters related to the surface parameterization of sea or !     water. ! !! !! !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       01/2004 !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! IMPLICIT NONE ! REAL , SAVE :: XALBWAT !                   water global albedo (option \"UNIF\") ! REAL , SAVE :: XALBSCA_WAT !                   water diffuse albedo ! REAL , SAVE :: XALBCOEF_TA96 !                   water direct albedo coefficient (TA96 computation) ! REAL , SAVE :: XEMISWAT !                   water emissivity ! REAL , SAVE :: XALBSEAICE !                   sea ice global albedo ! REAL , SAVE :: XALBWATICE !                   water ice global albedo ! REAL , SAVE :: XALBWATSNOW !                   water snow global albedo (for lake) ! REAL , SAVE :: XEMISWATICE !                   sea ice emissivity !------------------------------------------------------------------------------- ! END MODULE MODD_WATER_PAR","tags":"","loc":"sourcefile/modd_water_par.f90.html"},{"title":"ini_csts.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines INI_CSTS Source Code ini_csts.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE INI_CSTS !     ################## ! !!****  *INI_CSTS * - routine to initialize the module MODD_CST !! !!    PURPOSE !!    ------- !       The purpose of this routine is to initialize  the physical constants !     stored in  module MODD_CST. ! ! !!**  METHOD !!    ------ !!      The physical constants are set to their numerical values !! !! !!    EXTERNAL !!    -------- !!      FMLOOK : to retrieve logical unit number associated to a file !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST     : contains physical constants !! !!    REFERENCE !!    --------- !!      Book2 of the documentation (module MODD_CST, routine INI_CSTS) !! !! !!    AUTHOR !!    ------ !!      V. Ducrocq       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    18/05/94 !!      J. Stein    02/01/95  add the volumic mass of liquid water !!      J.-P. Pinty 13/12/95  add the water vapor pressure over solid ice !!      J. Stein    29/06/97  add XTH00 !!      V. Masson   05/10/98  add XRHOLI !!      C. Mari     31/10/00  add NDAYSEC !!      V. Masson   01/03/03  add XCONDI !!      A. Voldoire 01/12/09  add XTTSI, XICEC, XTTS for ESM !!      J. Escobar  28/03/2014 for pb with emissivity/aerosol reset XSURF_TINY=1.0e-80 in real8 case !! !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! USE MODI_INI_CTURBS ! USE MODI_INI_OCEAN_CSTS ! USE MODI_INI_SURF_CSTS ! IMPLICIT NONE ! !------------------------------------------------------------------------------- ! !*       1.     FUNDAMENTAL CONSTANTS !               --------------------- ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'INI_CSTS' , 0 , ZHOOK_HANDLE ) #ifdef SFX_MNH #ifdef MNH_MPI_DOUBLE_PRECISION XSURF_TINY = 1.0e-80 #else XSURF_TINY = TINY ( XSURF_TINY ) #endif #else XSURF_TINY = 1.0e-80 #endif XSURF_TINY_12 = SQRT ( XSURF_TINY ) XSURF_EPSILON = EPSILON ( XSURF_EPSILON ) * 1 0.0 XPI = 2. * ASIN ( 1. ) XKARMAN = 0.4 XBOLTZ = 1.380658E-23 XLIGHTSPEED = 29979245 8. XPLANCK = 6.6260755E-34 XAVOGADRO = 6.0221367E+23 ! !------------------------------------------------------------------------------- ! !*       2.     ASTRONOMICAL CONSTANTS !               ---------------------- ! XDAY = 8640 0. XSIYEA = 36 5.25 * XDAY * 2. * XPI / 6.283076 XSIDAY = XDAY / ( 1. + XDAY / XSIYEA ) XOMEGA = 2. * XPI / XSIDAY NDAYSEC = 24 * 3600 ! Number of seconds in a day ! !-------------------------------------------------------------------------------! ! ! !*       3.     TERRESTRIAL GEOIDE CONSTANTS !               ---------------------------- ! XRADIUS = 637122 9. XG = 9.80665 ! !------------------------------------------------------------------------------- ! !*       4.     REFERENCE PRESSURE !               ------------------- ! XP00 = 1.E5 XTH00 = 30 0. !------------------------------------------------------------------------------- ! !*       5.     RADIATION CONSTANTS !               ------------------- ! !JUAN OVERFLOW XSTEFAN = 2.* XPI**5 * XBOLTZ**4 / (15.* XLIGHTSPEED**2 * XPLANCK**3) XSTEFAN = ( 2. * XPI ** 5 / 1 5. ) * ( ( XBOLTZ / XPLANCK ) * XBOLTZ ) * ( XBOLTZ / ( XLIGHTSPEED * XPLANCK )) ** 2 XI0 = 137 0. ! !------------------------------------------------------------------------------- ! !*       6.     THERMODYNAMIC CONSTANTS !               ----------------------- ! XMD = 2 8.9644E-3 XMV = 1 8.0153E-3 XRD = XAVOGADRO * XBOLTZ / XMD XRV = XAVOGADRO * XBOLTZ / XMV XCPD = 7. * XRD / 2. XCPV = 4. * XRV XRHOLW = 100 0. XRHOLI = 91 7. XCONDI = 2.22 XCL = 4.218E+3 XCI = 2.106E+3 XTT = 27 3.16 XTTSI = XTT - 1.8 XICEC = 0.5 XTTS = XTT * ( 1 - XICEC ) + XTTSI * XICEC XLVTT = 2.5008E+6 XLSTT = 2.8345E+6 XLMTT = XLSTT - XLVTT XESTT = 61 1.14 XGAMW = ( XCL - XCPV ) / XRV XBETAW = ( XLVTT / XRV ) + ( XGAMW * XTT ) XALPW = LOG ( XESTT ) + ( XBETAW / XTT ) + ( XGAMW * LOG ( XTT )) XGAMI = ( XCI - XCPV ) / XRV XBETAI = ( XLSTT / XRV ) + ( XGAMI * XTT ) XALPI = LOG ( XESTT ) + ( XBETAI / XTT ) + ( XGAMI * LOG ( XTT )) ! !------------------------------------------------------------------------------- ! !*       7.     TURBULENCE CONSTANTS !               -------------------- ! CALL INI_CTURBS !------------------------------------------------------------------------------- ! !*       8.     OCEAN CONSTANTS !               --------------- ! CALL INI_OCEAN_CSTS ! !*       9.     SURFACE CONSTANTS !               ----------------- ! CALL INI_SURF_CSTS IF ( LHOOK ) CALL DR_HOOK ( 'INI_CSTS' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE INI_CSTS","tags":"","loc":"sourcefile/ini_csts.f90.html"},{"title":"modd_bld_descriptionn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_BLD_DESCRIPTION_n Source Code modd_bld_descriptionn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################ MODULE MODD_BLD_DESCRIPTION_n !     ################ ! !!****  *MODD_BLD_DESCRIPTION_n - declaration of surface parameters for typical !                               buildings !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      G. Pigeon   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       08/2011 !!       V. Masson     08/2013 adds solar panels !!       V. Masson     10/2013 adds residential fraction !!---------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE BLD_DESC_t ! ! Number of layers ! INTEGER :: NDESC_BLD ! number of types of buildings INTEGER :: NDESC_AGE ! number of building's construction dates ranges INTEGER :: NDESC_CODE ! number of codes for buildings (merges type & age) INTEGER :: NDESC_USE ! number of types of building's uses INTEGER :: NDESC_ROOF_LAYER ! number of layers in roofs INTEGER :: NDESC_ROAD_LAYER ! number of layers in roads INTEGER :: NDESC_WALL_LAYER ! number of layers in walls INTEGER :: NDESC_FLOOR_LAYER ! number of layers in floor INTEGER , POINTER , DIMENSION (:) :: NDESC_BLD_LIST ! list of the types for buildings INTEGER , POINTER , DIMENSION (:) :: NDESC_AGE_DATE ! list of the contruction dates for buildings INTEGER , POINTER , DIMENSION (:) :: NDESC_CODE_LIST ! list of the codes for buildings INTEGER , POINTER , DIMENSION (:) :: NDESC_AGE_LIST ! list of the contruction dates' codes INTEGER , POINTER , DIMENSION (:) :: NDESC_USE_LIST ! list of the codes for building's uses ! REAL , POINTER , DIMENSION (:) :: XDESC_ALB_ROOF ! Roof albedo REAL , POINTER , DIMENSION (:) :: XDESC_ALB_ROAD ! Road albedo REAL , POINTER , DIMENSION (:) :: XDESC_ALB_WALL ! Wall albedo REAL , POINTER , DIMENSION (:) :: XDESC_EMIS_ROOF ! Roof emissivity REAL , POINTER , DIMENSION (:) :: XDESC_EMIS_ROAD ! Road emissivity REAL , POINTER , DIMENSION (:) :: XDESC_EMIS_WALL ! Wall emissivity REAL , POINTER , DIMENSION (:) :: XDESC_TCOOL_TARGET ! cooling setpoint of indoor air REAL , POINTER , DIMENSION (:) :: XDESC_THEAT_TARGET ! heating setpoint of indoor air REAL , POINTER , DIMENSION (:) :: XDESC_F_WASTE_CAN ! fraction of waste heat into the canyon REAL , POINTER , DIMENSION (:) :: XDESC_EFF_HEAT ! efficiency of the heating system REAL , POINTER , DIMENSION (:,:) :: XDESC_HC_FLOOR ! heat capacity of floor layers [J m-3 K-1] REAL , POINTER , DIMENSION (:,:) :: XDESC_TC_FLOOR ! thermal conductivity of floor layers [W m-1 K-1] REAL , POINTER , DIMENSION (:,:) :: XDESC_D_FLOOR ! thickness of floor layers [m] REAL , POINTER , DIMENSION (:,:) :: XDESC_HC_ROOF ! heat capacity of roof layers [J m-3 K-1] REAL , POINTER , DIMENSION (:,:) :: XDESC_TC_ROOF ! thermal conductivity of roof layers [W m-1 K-1] REAL , POINTER , DIMENSION (:,:) :: XDESC_D_ROOF ! thickness of roof layers [m] REAL , POINTER , DIMENSION (:,:) :: XDESC_HC_ROAD ! heat capacity of road layers [J m-3 K-1] REAL , POINTER , DIMENSION (:,:) :: XDESC_TC_ROAD ! thermal conductivity of road layers [W m-1 K-1] REAL , POINTER , DIMENSION (:,:) :: XDESC_D_ROAD ! thickness of road layers [m] REAL , POINTER , DIMENSION (:,:) :: XDESC_HC_WALL ! heat capacity of wall layers [J m-3 K-1] REAL , POINTER , DIMENSION (:,:) :: XDESC_TC_WALL ! thermal conductivity of wall layers [W m-1 K-1] REAL , POINTER , DIMENSION (:,:) :: XDESC_D_WALL ! thickness of wall layers [m] REAL , POINTER , DIMENSION (:) :: XDESC_QIN ! internal heat gains [W m-2(floor)] REAL , POINTER , DIMENSION (:) :: XDESC_QIN_FRAD ! radiant fraction of internal heat gains REAL , POINTER , DIMENSION (:) :: XDESC_SHGC ! solar transmitance of windows REAL , POINTER , DIMENSION (:) :: XDESC_U_WIN ! glazing thermal resistance [K m W-2] REAL , POINTER , DIMENSION (:) :: XDESC_GR ! glazing ratio REAL , POINTER , DIMENSION (:) :: XDESC_SHGC_SH ! solar transmitance of windows + shading REAL , POINTER , DIMENSION (:) :: XDESC_FLOOR_HEIGHT ! building floor height [m] REAL , POINTER , DIMENSION (:) :: XDESC_INF ! infiltration/ventilation flow rate [AC/H] ! REAL , POINTER , DIMENSION (:) :: XDESC_F_WATER_COND ! fraction of evaporation for condensers REAL , POINTER , DIMENSION (:) :: XDESC_SHADE ! Flag to activate shading devices 0->inactivated , 1->activated REAL , POINTER , DIMENSION (:) :: XDESC_NATVENT ! Flag to describe bld surventilation solution 0-> NONE ; 1 -> MANU ; 2-> AUTO REAL , POINTER , DIMENSION (:) :: XDESC_QIN_FLAT ! Latent franction of internal heat gains REAL , POINTER , DIMENSION (:) :: XDESC_HR_TARGET ! Relative humidity setpoint REAL , POINTER , DIMENSION (:) :: XDESC_V_VENT ! Ventilation flow rate [AC/H] REAL , POINTER , DIMENSION (:) :: XDESC_COP_RAT ! Rated COP of the cooling system REAL , POINTER , DIMENSION (:) :: XDESC_GREENROOF ! Greenroof fraction REAL , POINTER , DIMENSION (:) :: XDESC_EMIS_PANEL ! Emissivity of Solar panels REAL , POINTER , DIMENSION (:) :: XDESC_ALB_PANEL ! Albedo     of Solar panels REAL , POINTER , DIMENSION (:) :: XDESC_EFF_PANEL ! Efficiency of Solar panels REAL , POINTER , DIMENSION (:) :: XDESC_FRAC_PANEL ! Fraction   of Solar panels on roofs REAL , POINTER , DIMENSION (:) :: XDESC_RESIDENTIAL ! Fraction of residential use ! END TYPE BLD_DESC_t CONTAINS ! ! ! ! SUBROUTINE BLD_DESC_INIT ( YBLD_DESC ) TYPE ( BLD_DESC_t ), INTENT ( INOUT ) :: YBLD_DESC REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_BLD_DESCRIPTION_n:BLD_DESC_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YBLD_DESC % NDESC_BLD_LIST ) NULLIFY ( YBLD_DESC % NDESC_CODE_LIST ) NULLIFY ( YBLD_DESC % NDESC_AGE_LIST ) NULLIFY ( YBLD_DESC % NDESC_AGE_DATE ) NULLIFY ( YBLD_DESC % NDESC_USE_LIST ) NULLIFY ( YBLD_DESC % XDESC_ALB_ROOF ) NULLIFY ( YBLD_DESC % XDESC_ALB_ROAD ) NULLIFY ( YBLD_DESC % XDESC_ALB_WALL ) NULLIFY ( YBLD_DESC % XDESC_EMIS_ROOF ) NULLIFY ( YBLD_DESC % XDESC_EMIS_ROAD ) NULLIFY ( YBLD_DESC % XDESC_EMIS_WALL ) NULLIFY ( YBLD_DESC % XDESC_TCOOL_TARGET ) NULLIFY ( YBLD_DESC % XDESC_THEAT_TARGET ) NULLIFY ( YBLD_DESC % XDESC_F_WASTE_CAN ) NULLIFY ( YBLD_DESC % XDESC_EFF_HEAT ) NULLIFY ( YBLD_DESC % XDESC_HC_FLOOR ) NULLIFY ( YBLD_DESC % XDESC_TC_FLOOR ) NULLIFY ( YBLD_DESC % XDESC_D_FLOOR ) NULLIFY ( YBLD_DESC % XDESC_HC_ROOF ) NULLIFY ( YBLD_DESC % XDESC_TC_ROOF ) NULLIFY ( YBLD_DESC % XDESC_D_ROOF ) NULLIFY ( YBLD_DESC % XDESC_HC_ROAD ) NULLIFY ( YBLD_DESC % XDESC_TC_ROAD ) NULLIFY ( YBLD_DESC % XDESC_D_ROAD ) NULLIFY ( YBLD_DESC % XDESC_HC_WALL ) NULLIFY ( YBLD_DESC % XDESC_TC_WALL ) NULLIFY ( YBLD_DESC % XDESC_D_WALL ) NULLIFY ( YBLD_DESC % XDESC_QIN ) NULLIFY ( YBLD_DESC % XDESC_QIN_FRAD ) NULLIFY ( YBLD_DESC % XDESC_SHGC ) NULLIFY ( YBLD_DESC % XDESC_U_WIN ) NULLIFY ( YBLD_DESC % XDESC_GR ) NULLIFY ( YBLD_DESC % XDESC_FLOOR_HEIGHT ) NULLIFY ( YBLD_DESC % XDESC_INF ) NULLIFY ( YBLD_DESC % XDESC_F_WATER_COND ) NULLIFY ( YBLD_DESC % XDESC_QIN_FLAT ) NULLIFY ( YBLD_DESC % XDESC_HR_TARGET ) NULLIFY ( YBLD_DESC % XDESC_V_VENT ) NULLIFY ( YBLD_DESC % XDESC_COP_RAT ) NULLIFY ( YBLD_DESC % XDESC_GREENROOF ) NULLIFY ( YBLD_DESC % XDESC_SHADE ) NULLIFY ( YBLD_DESC % XDESC_NATVENT ) NULLIFY ( YBLD_DESC % XDESC_EMIS_PANEL ) NULLIFY ( YBLD_DESC % XDESC_ALB_PANEL ) NULLIFY ( YBLD_DESC % XDESC_EFF_PANEL ) NULLIFY ( YBLD_DESC % XDESC_FRAC_PANEL ) NULLIFY ( YBLD_DESC % XDESC_RESIDENTIAL ) YBLD_DESC % NDESC_BLD = 0 YBLD_DESC % NDESC_AGE = 0 YBLD_DESC % NDESC_CODE = 0 YBLD_DESC % NDESC_USE = 0 YBLD_DESC % NDESC_ROOF_LAYER = 0 YBLD_DESC % NDESC_ROAD_LAYER = 0 YBLD_DESC % NDESC_WALL_LAYER = 0 YBLD_DESC % NDESC_FLOOR_LAYER = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_BLD_DESCRIPTION_n:BLD_DESC_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE BLD_DESC_INIT ! ! END MODULE MODD_BLD_DESCRIPTION_n","tags":"","loc":"sourcefile/modd_bld_descriptionn.f90.html"},{"title":"modd_reprod_oper.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_REPROD_OPER Source Code modd_reprod_oper.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ###################### MODULE MODD_REPROD_OPER !     ###################### ! !!****  *MODD_REPROD_OPER* - declaration of ISBA parameters !! !!    PURPOSE !!    ------- !       The purpose of this declarative module is to specify temporary !       old parameters related to the surface parameterization ISBA !       to ensure reproductibility with previous oper cycle ! !! !! !! !!    AUTHOR !!    ------ !!      B. Decharme   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       04/2013 !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! IMPLICIT NONE ! !------------------------------------------------------------------------------------ ! Old global ISBA param temporary activated in NAM_SURF_REPROD_OPER (for reproductibility) !------------------------------------------------------------------------------------ ! ! * Tropical evergreen forest parameter ! !XEVERG_RSMIN : old = 250. (Manzi 1993) but observations range !               from 140 to 180. According to Delire et al. (1997) and !               new tests over 6 local sites, 175. is recommended !               Should be the default after check with AROME/ALADIN ! REAL :: XEVERG_RSMIN ! !XEVERG_VEG : old = 0.99 (Manzi 1993) but according to Delire et al. (1997) and !             new tests over 6 local sites, 1.0 is recommended because 0.99 !             induces unrealistic bare soil evaporation for Tropical forest !             Should be the default after check with AROME/ALADIN ! REAL :: XEVERG_VEG ! ! * Soil depth average ! !CDGAVG : old         = 'ARI' Arithmetic average for all depths !         recommended = 'INV' Harmonic average for all depths ! CHARACTER ( LEN = 3 ) :: CDGAVG ! ! * Soil depth with ISBA-DF ! !CDGDIF : old         = 'SOIL' Total soil depth (d3) in Ecoclimap !         recommended = 'ROOT' Root depth (d2) in Ecoclimap ! CHARACTER ( LEN = 4 ) :: CDGDIF ! ! * wind implicitation ! CHARACTER ( LEN = 3 ) :: CIMPLICIT_WIND ! wind implicitation option !                                  ! 'OLD' = direct !                                  ! 'NEW' = Taylor serie, order 1 (recommended) ! ! * qsat computation ! CHARACTER ( LEN = 3 ) :: CQSAT ! qsat computation option !                         ! 'OLD' = do not depend on temperature !                         ! 'NEW' = qsat and qsati merged (recommended) ! ! * Charnock parameter ! CHARACTER ( LEN = 3 ) :: CCHARNOCK ! Charnock parameter option !                             ! 'OLD' = constant equal to XVCHRNK !                             ! 'NEW' = vary between 0.011 et 0.018 according !                             !         to Chris Fairall's data as in coare3.0 !                             !         (recommended) ! !-------------------------------------------------------------------------------- ! END MODULE MODD_REPROD_OPER","tags":"","loc":"sourcefile/modd_reprod_oper.f90.html"},{"title":"spll_modi_ini_ocean_csts.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_INI_OCEAN_CSTS Source Code spll_modi_ini_ocean_csts.f90 Source Code !auto_modi:spll_ini_ocean_csts.D MODULE MODI_INI_OCEAN_CSTS INTERFACE SUBROUTINE INI_OCEAN_CSTS END SUBROUTINE INI_OCEAN_CSTS END INTERFACE END MODULE MODI_INI_OCEAN_CSTS","tags":"","loc":"sourcefile/spll_modi_ini_ocean_csts.f90.html"},{"title":"isba_properties.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines ISBA_PROPERTIES Source Code isba_properties.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE ISBA_PROPERTIES ( IO , PEK , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & PASNOW , PANOSNOW , PESNOW , PENOSNOW , & PTSSNOW , PTSNOSNOW , & PALBNIR_TVEG , PALBVIS_TVEG , PALBNIR_TSOIL , PALBVIS_TSOIL ) !     ########################################################################## ! !!****  *ISBA_PROPERTIES* !! !!    PURPOSE !!    ------- ! !     Calculates grid-averaged albedo and emissivity (according to snow scheme) ! !!    EXTERNAL !!    -------- !! !!    none !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    AUTHOR !!    ------ !! !!\tS. Belair           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !! !!      P. Samuelsson  02/2012  MEB !! !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t USE MODD_ISBA_n , ONLY : ISBA_PE_t ! USE MODD_TYPE_SNOW USE MODD_SNOW_PAR , ONLY : XEMISSN , XEMCRIN , XSNOWDMIN , & XRHOSMAX_ES , XRHOSMIN_ES USE MODD_WATER_PAR , ONLY : XEMISWAT ! USE MODI_ISBA_SNOW_FRAC USE MODI_ISBA_ALBEDO ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: IO TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PDIR_SW ! direct incoming solar radiation REAL , DIMENSION (:,:), INTENT ( IN ) :: PSCA_SW ! diffus incoming solar radiation REAL , DIMENSION (:) , INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) INTEGER , INTENT ( IN ) :: KSW ! number of short-wave spectral bands ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PASNOW ! = snow albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PANOSNOW ! = snow free albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PESNOW ! = snow emissivity REAL , DIMENSION (:) , INTENT ( OUT ) :: PENOSNOW ! = snow free emissivity REAL , DIMENSION (:) , INTENT ( OUT ) :: PTSSNOW ! = snow radiative temperature REAL , DIMENSION (:) , INTENT ( OUT ) :: PTSNOSNOW ! = snow free radiative temperature ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBNIR_TVEG ! nearIR  veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBVIS_TVEG ! visible veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBNIR_TSOIL ! nearIR  soil tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBVIS_TSOIL ! visible soil tot albedo ! !*      0.2    declarations of local variables ! REAL , DIMENSION ( SIZE ( PDIR_SW , 1 )) :: ZGLOBAL_SW ! global incoming SW rad. REAL , DIMENSION ( SIZE ( PEK % XALBNIR )) :: ZALBF REAL , DIMENSION ( SIZE ( PEK % XALBNIR )) :: ZFFV REAL , DIMENSION ( SIZE ( PEK % XALBNIR )) :: ZFFG ! LOGICAL , PARAMETER :: GMEB = . FALSE . REAL , DIMENSION ( SIZE ( PDIR_SW , 1 )) :: ZP_MEB_SCA_SW , ZALBNIR_TSNOW , ZALBVIS_TSNOW REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'ISBA_PROPERTIES' , 0 , ZHOOK_HANDLE ) ! CALL ISBA_SNOW_FRAC ( PEK % TSNOW % SCHEME , PEK % TSNOW % WSNOW , PEK % TSNOW % RHO , PEK % TSNOW % ALB , & PEK % XVEG , PEK % XLAI , PEK % XZ0 , & PEK % XPSN , PEK % XPSNV_A , PEK % XPSNG , PEK % XPSNV ) ! !------------------------------------------------------------------------------- !*      2.     Compute snow-free albedo !              ------------------------ ! !* Snow-free surface albedo for each wavelength ! ZALBF = 0. ZFFV = 0. ZFFG = 0. ! CALL ISBA_ALBEDO ( PEK , IO % LTR_ML , GMEB , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & ZALBF , ZFFV , ZFFG , ZGLOBAL_SW , ZP_MEB_SCA_SW , & PALBNIR_TVEG , PALBVIS_TVEG , PALBNIR_TSOIL , PALBVIS_TSOIL ) PANOSNOW (:) = PEK % XSNOWFREE_ALB (:) !------------------------------------------------------------------------------- ! !*      3.     Compute aggeragted albedo and emissivity !              ---------------------------------------- ! IF ( PEK % TSNOW % SCHEME == '3-L' . OR . PEK % TSNOW % SCHEME == 'CRO' . OR . IO % CISBA == 'DIF' ) THEN ! ! NON-SNOW covered Grid averaged albedo and emissivity for explicit snow scheme: ! PASNOW (:) = PEK % TSNOW % ALB (:) PESNOW (:) = PEK % TSNOW % EMIS (:) PENOSNOW (:) = PEK % XEMIS (:) PTSSNOW (:) = PEK % TSNOW % TS (:) PTSNOSNOW (:) = PEK % XTG (:, 1 ) ELSE ! ! Grid averaged albedo and emissivity for composite snow scheme: ! IF ( PEK % TSNOW % SCHEME == 'EBA' ) THEN ! PASNOW (:) = PEK % TSNOW % ALB (:) PESNOW (:) = XEMCRIN PENOSNOW (:) = PEK % XEMIS (:) PTSSNOW (:) = PEK % XTG (:, 1 ) PTSNOSNOW (:) = PEK % XTG (:, 1 ) ELSE PASNOW (:) = PEK % TSNOW % ALB (:) PESNOW (:) = XEMISSN PENOSNOW (:) = PEK % XEMIS (:) PTSSNOW (:) = PEK % XTG (:, 1 ) PTSNOSNOW (:) = PEK % XTG (:, 1 ) ENDIF ! ENDIF IF ( LHOOK ) CALL DR_HOOK ( 'ISBA_PROPERTIES' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE ISBA_PROPERTIES","tags":"","loc":"sourcefile/isba_properties.f90.html"},{"title":"spll_modi_vegetation_update.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_VEGETATION_UPDATE Source Code spll_modi_vegetation_update.f90 Source Code !auto_modi:spll_vegetation_update.D MODULE MODI_VEGETATION_UPDATE INTERFACE SUBROUTINE VEGETATION_UPDATE ( DTCO , DTV , KDIM , IO , KK , PK , PEK , KPATCH , & PTSTEP , TTIME , PCOVER , OCOVER , & OAGRIP , HSFTYPE , OALB , ISSK , ODUPDATED , OABSENT ) USE MODD_ISBA_n , ONLY : ISBA_K_t , ISBA_P_t , ISBA_PE_t USE MODD_SSO_n , ONLY : SSO_t USE MODD_DATA_COVER_n , ONLY : DATA_COVER_t USE MODD_DATA_ISBA_n , ONLY : DATA_ISBA_t USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t USE MODD_TYPE_DATE_SURF IMPLICIT NONE TYPE ( DATA_COVER_t ), INTENT ( INOUT ) :: DTCO TYPE ( DATA_ISBA_t ), INTENT ( INOUT ) :: DTV INTEGER , INTENT ( IN ) :: KDIM TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: IO TYPE ( ISBA_K_t ), INTENT ( INOUT ) :: KK TYPE ( ISBA_P_t ), INTENT ( INOUT ) :: PK TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK INTEGER , INTENT ( IN ) :: KPATCH REAL , INTENT ( IN ) :: PTSTEP ! time step TYPE ( DATE_TIME ), INTENT ( IN ) :: TTIME ! UTC time REAL , DIMENSION (:,:), INTENT ( IN ) :: PCOVER ! cover types LOGICAL , DIMENSION (:), INTENT ( IN ) :: OCOVER LOGICAL , INTENT ( IN ) :: OAGRIP CHARACTER ( LEN =* ), INTENT ( IN ) :: HSFTYPE ! nature / garden LOGICAL , INTENT ( IN ) :: OALB TYPE ( SSO_t ), INTENT ( INOUT ) :: ISSK LOGICAL , INTENT ( OUT ) :: ODUPDATED ! T if parameters are being reset LOGICAL , DIMENSION (:), INTENT ( IN ), OPTIONAL :: OABSENT ! T where field is not defined END SUBROUTINE VEGETATION_UPDATE END INTERFACE END MODULE MODI_VEGETATION_UPDATE","tags":"","loc":"sourcefile/spll_modi_vegetation_update.f90.html"},{"title":"open_namelist.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines OPEN_NAMELIST Source Code open_namelist.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE OPEN_NAMELIST ( HPROGRAM , KLUNAM , HFILE ) !     ####################################################### ! !!****  *OPEN_NAMELIST* - routine to open a namelist file !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    01/2003 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! #ifdef SFX_OL USE MODI_OPEN_NAMELIST_OL #endif #ifdef SFX_ASC USE MODI_OPEN_NAMELIST_ASC #endif #ifdef SFX_FA USE MODI_OPEN_NAMELIST_FA #endif #ifdef SFX_LFI USE MODI_OPEN_NAMELIST_LFI #endif #ifdef SFX_NC USE MODI_OPEN_NAMELIST_NC #endif #ifdef SFX_MNH USE MODI_MNHOPEN_NAMELIST #endif #ifdef SFX_ARO USE MODI_AROOPEN_NAMELIST #endif ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HPROGRAM ! main program INTEGER , INTENT ( OUT ) :: KLUNAM ! logical unit of namelist CHARACTER ( LEN = 28 ), INTENT ( IN ), OPTIONAL :: HFILE ! ASCII file to open ! !*       0.2   Declarations of local variables !              ------------------------------- ! CHARACTER ( LEN = 28 ) :: YFILE REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'OPEN_NAMELIST' , 0 , ZHOOK_HANDLE ) IF ( PRESENT ( HFILE )) THEN YFILE = HFILE ELSE YFILE = '                            ' END IF IF ( HPROGRAM == 'MESONH' ) THEN #ifdef SFX_MNH CALL MNHOPEN_NAMELIST ( HPROGRAM , KLUNAM , YFILE ) #endif ELSE IF ( HPROGRAM == 'OFFLIN' ) THEN #ifdef SFX_OL CALL OPEN_NAMELIST_OL ( HPROGRAM , KLUNAM , YFILE ) #endif ELSE IF ( HPROGRAM == 'ASCII ' ) THEN #ifdef SFX_ASC CALL OPEN_NAMELIST_ASC ( HPROGRAM , KLUNAM , YFILE ) #endif ELSE IF ( HPROGRAM == 'AROME ' ) THEN #ifdef SFX_ARO CALL AROOPEN_NAMELIST ( HPROGRAM , KLUNAM , YFILE ) #endif ELSE IF ( HPROGRAM == 'FA    ' ) THEN #ifdef SFX_FA CALL OPEN_NAMELIST_FA ( HPROGRAM , KLUNAM , YFILE ) #endif ELSE IF ( HPROGRAM == 'LFI   ' ) THEN #ifdef SFX_LFI CALL OPEN_NAMELIST_LFI ( HPROGRAM , KLUNAM , YFILE ) #endif ELSE IF ( HPROGRAM == 'NC    ' ) THEN #ifdef SFX_NC CALL OPEN_NAMELIST_NC ( HPROGRAM , KLUNAM , YFILE ) #endif END IF ! IF ( LHOOK ) CALL DR_HOOK ( 'OPEN_NAMELIST' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE OPEN_NAMELIST","tags":"","loc":"sourcefile/open_namelist.f90.html"},{"title":"wall_layer_e_budget.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines WALL_LAYER_E_BUDGET Source Code wall_layer_e_budget.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !   ########################################################################## SUBROUTINE WALL_LAYER_E_BUDGET ( TOP , T , B , PT_WL , PTS_WL_B , PTI_WL_B , PTSTEP , PDN_RD , & PRHOA , PAC_WL , PAC_BLD , PLW_RAD , PPS , PEXNS , PABS_SW_WL , & PT_CANYON , PTS_RD , PTSNOW_RD , PTS_GD , PTS_FL , & PLW_WA_TO_WB , PLW_R_TO_W , PLW_G_TO_W , PLW_NR_TO_W , & PLW_WIN_TO_W , PLW_S_TO_W , PFLX_BLD_WL , PDQS_WL , & PABS_LW_WL , PEMIT_LW_WL , PH_WL , PIMB_WL , PRADHT_IN , & PRAD_RF_WL , PRAD_WL_WIN , PRAD_WL_FL , PRAD_WL_MA , & PCONV_WL_BLD , PLOAD_IN_WL ) !   ########################################################################## ! !!****  *ROAD_WALL_LAYER_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of roads and walls surface temperatures ! ! !!**  METHOD !     ------ ! !    6 : equations for evolution of Ts_road and Ts_wall simultaneously !        ************************************************************* ! !     dTw_k(t) / dt = 1/(dw_k*Cw_k) * (- 2*Kw_k-1*(Tw_k-Tw_k-1)/(dw_k-1 +dw_k) !                                      - 2*Kw_k  *(Tw_k-Tw_k+1)/(dw_k+1 +dw_k) ) ! !     dTw_1(t) / dt = 1/(dw_1*Cw_1) * (  Rn_w - H_w - LE_w !                                      - 2*Kw_1*(Tw_1-Tw_2)/(dw_1 +dw_2)       ) ! ! !       with ! !   K*_k  = (d*_k+ d*_k+1)/(d*_k/k*_k+ d*_k+1/k*_k+1) ! !   Rn_w = abs_Rg_w !  - sigma * emis_w                                                   * Ts_w**4 (t+dt) !  +         emis_w                       *      SVF_w                * LWR !  + sigma * emis_w * emis_r              *      SVF_w                * Ts_r**4 (t+dt) !  + sigma * emis_w * emis_w              * (1-2*SVF_w)               * Ts_w**4 (t+dt) !  +         emis_w            (1-emis_r) *      SVF_r  *      SVF_w  * LWR !  +         emis_w            (1-emis_w) *      SVF_w  * (1-2*SVF_w) * LWR !  + sigma * emis_w * emis_w * (1-emis_r) *      SVF_w  * (1-  SVF_r) * Ts_w**4 (t+dt) !  + sigma * emis_w * emis_w * (1-emis_w) * (1-2*SVF_w) * (1-2*SVF_w) * Ts_w**4 (t+dt) !  + sigma * emis_w * emis_r * (1-emis_w) *      SVF_w  * (1-2*SVF_w) * Ts_r**4 (t+dt) ! !  H_w  = rho Cp CH V ( Ts_w (t+dt) - Ta_canyon ) ! !  LE_w = rho Lv CH V ( qs_w (t+dt) - qa_canyon ) ! ! ! The system is implicited (or semi-implicited). ! ! ZIMPL=1    ---> implicit system ! ZIMPL=0.5  ---> semi-implicit system ! ZIMPL=0    ---> explicit system ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !!                  21/11/01 (V. Masson and A. Lemonsu) bug of latent flux !!                           for very strong evaporation (all reservoir emptied !!                           in one time-step) !!                     02/11 (V. Masson) splits the routine for road and walls separately !!                     01/12 (V. Masson) separates the 2 walls !!                     09/12 (G. Pigeon) modif internal convective coef convection !!                     10/12 (G. Pigeon) add solar heat gain of indoor wall !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS , ONLY : XCPD , XSTEFAN ! USE MODI_LAYER_E_BUDGET_GET_COEF USE MODI_LAYER_E_BUDGET USE MODE_CONV_DOE ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_WL ! wall layers temperatures REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WL_B ! opposite wall surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTI_WL_B ! opposite wall internal temperature REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered fraction on roads REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! rho REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WL ! aerodynamical conductance [m/s] !                                                 ! between wall and canyon REAL , DIMENSION (:), INTENT ( IN ) :: PAC_BLD ! aerodynamical conductance ! inside the building itself REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface Exner function REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_WL ! absorbed solar radiation REAL , DIMENSION (:), INTENT ( IN ) :: PT_CANYON ! air canyon temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_RD ! road surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTSNOW_RD ! road snow temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GD ! green area surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_FL ! floor layers temperatures [K] ! REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_WB ! LW interactions wall  -> opposite wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_W ! LW interactions road -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_W ! LW interactions garden -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_W ! LW interactions sky   -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_W ! LW interactions road(snow) -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_W ! Radiative heat trasfer coeff wall-window ! [W K-1 m-2] ! REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_WL ! flux from bld to wall REAL , DIMENSION (:), INTENT ( INOUT ) :: PDQS_WL ! heat storage inside the wall REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_WL ! absorbed infrared rad. [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_WL ! LW flux emitted by the wall [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PH_WL ! Sensible heat flux from wall to air [W/m2(wall)] ! wall = facade - glazing REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_WL ! wall residual energy imbalance ! for verification [W m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_WL ! rad. fluxes from roof to wall [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WL_WIN ! rad. fluxes from wall to win  [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WL_FL ! rad. fluxes from wall to floor [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WL_MA ! rad. fluxes from wall to mass [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_WL_BLD ! conv. fluxes from wall to bld [W m-2(wall)] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_IN_WL ! LOAD from solar heat gain + rad int. gains  W/m2 [Wall] ! !*      0.2    declarations of local variables ! ! REAL :: ZIMPL = 1.0 ! implicit coefficient REAL :: ZEXPL = 0.0 ! explicit coefficient ! REAL , DIMENSION ( SIZE ( PPS ), SIZE ( PT_WL , 2 )) :: ZA ,& ! lower diag. ZB ,& ! main  diag. ZC ,& ! upper diag. ZY ! r.h.s. ! REAL , DIMENSION ( SIZE ( PPS )) :: ZMTC_O_D_WL_IN REAL , DIMENSION ( SIZE ( PPS )) :: ZDF_RD ! Road snow free fraction REAL , DIMENSION ( SIZE ( PPS )) :: ZRHO_ACF_W ! rho * conductance !                                         !     * snow-free f. ! ! thermal capacity times layer depth REAL , DIMENSION ( SIZE ( PPS )) :: ZTS_WL ! wall surface temperature REAL , DIMENSION ( SIZE ( PPS )) :: ZTI_WL ! wall indoor surface temperature REAL , DIMENSION ( SIZE ( PPS )) :: ZTI_WL_CONV ! wall indoor surface temperature for conv. flux REAL , DIMENSION ( SIZE ( PPS )) :: ZT_SKY ! sky temperature [K] ! REAL , DIMENSION ( SIZE ( PPS )) :: ZTI_RF ! Indoor roof temperature [K] REAL , DIMENSION ( SIZE ( PPS )) :: ZDIF_RAD_WL_RF !diff between the rad flux that should receive the wall from the roof ! and what it really receives [W m-2(bld)] REAL , DIMENSION ( SIZE ( PPS )) :: ZRAD_WL_RF ! rad flux between the wall and the roof computed for the wall balance REAL , DIMENSION ( SIZE ( PPS )) :: ZF_WL_WL ! View factor wall-wall inside the building REAL , DIMENSION ( SIZE ( PPS )) :: ZCHTC_IN_WL ! indoor convective heat transfer coeff wall [W m-2 K-1] INTEGER :: IWL_LAYER ! number of wall layers INTEGER :: JJ ! loop counter REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'WALL_LAYER_E_BUDGET' , 0 , ZHOOK_HANDLE ) ! PFLX_BLD_WL = XUNDEF PIMB_WL = XUNDEF PRAD_WL_WIN = XUNDEF PRAD_WL_FL = XUNDEF PRAD_WL_MA = XUNDEF PCONV_WL_BLD = XUNDEF ! CALL LAYER_E_BUDGET_GET_COEF ( PT_WL , PTSTEP , ZIMPL , T % XHC_WALL , T % XTC_WALL , T % XD_WALL , & ZA , ZB , ZC , ZY ) ! IWL_LAYER = SIZE ( PT_WL , 2 ) ! DO JJ = 1 , SIZE ( PDN_RD ) ! ZDF_RD ( JJ ) = 1. - PDN_RD ( JJ ) ! ZTS_WL ( JJ ) = PT_WL ( JJ , 1 ) ZTI_WL ( JJ ) = PT_WL ( JJ , IWL_LAYER ) ! !*      2.1    outdoor convective flux properties !              ---------------------------------- ! ZRHO_ACF_W ( JJ ) = PRHOA ( JJ ) * PAC_WL ( JJ ) ! !*      2.2    Sky temperature !              --------------- ! ZT_SKY ( JJ ) = ( PLW_RAD ( JJ ) / XSTEFAN ) ** 0.25 ! !*      2.3    indoor average thermal conductivity !              ----------------------------------- ! IF ( TOP % CBEM . EQ . \"DEF\" ) THEN ZMTC_O_D_WL_IN ( JJ ) = 2. * T % XTC_WALL ( JJ , IWL_LAYER ) / T % XD_WALL ( JJ , IWL_LAYER ) ZMTC_O_D_WL_IN ( JJ ) = 1. / ( 1. / ZMTC_O_D_WL_IN ( JJ ) + 1. / ( XCPD * PRHOA ( JJ ) * PAC_BLD ( JJ ))) ENDIF ENDDO ! !*      2.4    indoor convective coefficient !              ----------------------------- ! ZCHTC_IN_WL (:) = CHTC_VERT_DOE ( PT_WL (:, IWL_LAYER ), B % XTI_BLD (:)) DO JJ = 1 , SIZE ( ZCHTC_IN_WL ) ZCHTC_IN_WL ( JJ ) = MAX ( 1. , ZCHTC_IN_WL ( JJ )) ENDDO ! !------------------------------------------------------------------------------- ! !*      3.    Outer wall layer coefficients !             ------------------------------ ! DO JJ = 1 , SIZE ( PT_WL , 1 ) ! ZB ( JJ , 1 ) = ZB ( JJ , 1 ) + ZIMPL * XCPD / PEXNS ( JJ ) * ZRHO_ACF_W ( JJ ) ! ZY ( JJ , 1 ) = ZY ( JJ , 1 ) + PABS_SW_WL ( JJ ) & + XCPD / PEXNS ( JJ ) * ZRHO_ACF_W ( JJ ) * ( PT_CANYON ( JJ ) - ZEXPL * ZTS_WL ( JJ ) ) ! ! ZB ( JJ , 1 ) = ZB ( JJ , 1 ) & + ZIMPL * ( PLW_S_TO_W ( JJ ) + PLW_WA_TO_WB ( JJ ) & + ZDF_RD ( JJ ) * PLW_R_TO_W ( JJ ) + PLW_G_TO_W ( JJ ) & + PDN_RD ( JJ ) * PLW_NR_TO_W ( JJ ) & + PLW_WIN_TO_W ( JJ ) ) ! ZY ( JJ , 1 ) = ZY ( JJ , 1 ) + & PLW_S_TO_W ( JJ ) * ( ZT_SKY ( JJ ) - ZEXPL * ZTS_WL ( JJ )) & + PLW_WA_TO_WB ( JJ ) * ( PTS_WL_B ( JJ ) - ZEXPL * ZTS_WL ( JJ )) & + ZDF_RD ( JJ ) * PLW_R_TO_W ( JJ ) * ( PTS_RD ( JJ ) - ZEXPL * ZTS_WL ( JJ )) & + PDN_RD ( JJ ) * PLW_NR_TO_W ( JJ ) * ( PTSNOW_RD ( JJ ) - ZEXPL * ZTS_WL ( JJ )) & + PLW_WIN_TO_W ( JJ ) * ( B % XT_WIN1 ( JJ ) - ZEXPL * ZTS_WL ( JJ )) ! IF ( SIZE ( PTS_GD ) > 0 ) THEN ZY ( JJ , 1 ) = ZY ( JJ , 1 ) + PLW_G_TO_W ( JJ ) * ( PTS_GD ( JJ ) - ZEXPL * ZTS_WL ( JJ )) ENDIF ! ENDDO ! !------------------------------------------------------------------------------- ! !*      4.    Inside wall layer coefficients !             ----------------------------- ! DO JJ = 1 , SIZE ( PT_WL , 1 ) ! IF ( TOP % CBEM == \"DEF\" ) THEN ! ZB ( JJ , IWL_LAYER ) = ZB ( JJ , IWL_LAYER ) + ZIMPL * ZMTC_O_D_WL_IN ( JJ ) ! ZY ( JJ , IWL_LAYER ) = ZY ( JJ , IWL_LAYER ) & + ZMTC_O_D_WL_IN ( JJ ) * B % XTI_BLD ( JJ ) & - ZEXPL * ZMTC_O_D_WL_IN ( JJ ) * PT_WL ( JJ , IWL_LAYER ) ! ELSEIF ( TOP % CBEM == \"BEM\" ) THEN ! ZF_WL_WL ( JJ ) = 1. - B % XF_WALL_MASS ( JJ ) - B % XF_WALL_WIN ( JJ ) - 2. * B % XF_WALL_FLOOR ( JJ ) ! ZB ( JJ , IWL_LAYER ) = ZB ( JJ , IWL_LAYER ) + ZIMPL * & ( ZCHTC_IN_WL ( JJ ) * 4. / 3. + PRADHT_IN ( JJ ) * & ( B % XF_WALL_MASS ( JJ ) + B % XF_WALL_WIN ( JJ ) & + ZF_WL_WL ( JJ ) + 2 * B % XF_WALL_FLOOR ( JJ ))) ! ZTI_RF ( JJ ) = PRAD_RF_WL ( JJ ) / PRADHT_IN ( JJ ) + PT_WL ( JJ , IWL_LAYER ) ! ZY ( JJ , IWL_LAYER ) = ZY ( JJ , IWL_LAYER ) + & ZCHTC_IN_WL ( JJ ) * ( B % XTI_BLD ( JJ ) - 1. / 3. * PT_WL ( JJ , IWL_LAYER ) * ( 4 * ZEXPL - 1 )) + & PRADHT_IN ( JJ ) * ( & B % XF_WALL_MASS ( JJ ) * ( B % XT_MASS ( JJ , 1 ) - ZEXPL * PT_WL ( JJ , IWL_LAYER )) + & B % XF_WALL_WIN ( JJ ) * ( B % XT_WIN2 ( JJ ) - ZEXPL * PT_WL ( JJ , IWL_LAYER )) + & B % XF_WALL_FLOOR ( JJ ) * ( PTS_FL ( JJ ) - ZEXPL * PT_WL ( JJ , IWL_LAYER )) + & ZF_WL_WL ( JJ ) * ( PTI_WL_B ( JJ ) - ZEXPL * PT_WL ( JJ , IWL_LAYER )) + & B % XF_WALL_FLOOR ( JJ ) * ( ZTI_RF ( JJ ) - ZEXPL * PT_WL ( JJ , IWL_LAYER )) ) + & PLOAD_IN_WL ( JJ ) ! ENDIF ! END DO ! !------------------------------------------------------------------------------- ! !*      5.    heat conduction calculation !             --------------------------- ! CALL LAYER_E_BUDGET ( PT_WL , PTSTEP , ZIMPL , T % XHC_WALL , T % XTC_WALL , T % XD_WALL , & ZA , ZB , ZC , ZY , PDQS_WL ) ! !------------------------------------------------------------------------------- ! !*   6.   diagnostics of flux echanged with the wall !         ------------------------------------------ ! ! !* radiative surface temperature used during the energy balance ZTS_WL (:) = ZIMPL * PT_WL (:, 1 ) + ZEXPL * ZTS_WL (:) ! PABS_LW_WL (:) = PLW_S_TO_W (:) * ( ZT_SKY (:) - ZTS_WL (:)) + & ZDF_RD (:) * PLW_R_TO_W (:) * ( PTS_RD (:) - ZTS_WL (:)) + & PLW_WA_TO_WB (:) * ( PTS_WL_B (:) - ZTS_WL (:)) + & PLW_WIN_TO_W (:) * ( B % XT_WIN1 (:) - ZTS_WL (:)) + & PDN_RD (:) * PLW_NR_TO_W (:) * ( PTSNOW_RD (:) - ZTS_WL (:)) ! IF ( SIZE ( PTS_GD ) > 0 ) THEN PABS_LW_WL (:) = PABS_LW_WL (:) + PLW_G_TO_W (:) * ( PTS_GD (:) - ZTS_WL (:)) ENDIF ! !* emitted lw flux PEMIT_LW_WL (:) = XSTEFAN * PT_WL (:, 1 ) ** 4 + & ( 1 - T % XEMIS_WALL (:)) / T % XEMIS_WALL (:) * PABS_LW_WL (:) ! !* sensible heat flux to outdoor PH_WL (:) = ZRHO_ACF_W (:) * XCPD / PEXNS (:) * & ( ZIMPL * PT_WL (:, 1 ) + ZEXPL * ZTS_WL (:) - PT_CANYON (:) ) ! IF ( TOP % CBEM == 'BEM' ) THEN ! !compute ZTI_WALL used in flux calculation ZTI_WL_CONV (:) = 4. / 3. * ZIMPL * PT_WL (:, IWL_LAYER ) + 1. / 3. * ZTI_WL (:) * ( 4 * ZEXPL - 1. ) ZTI_WL (:) = ZEXPL * ZTI_WL (:) + ZIMPL * PT_WL (:, IWL_LAYER ) ! !compute IR exchanged fluxes with the roof in the wall balance ZRAD_WL_RF (:) = PRADHT_IN (:) * ( ZTI_WL (:) - ZTI_RF (:)) !compute the difference with the IR flux echanged between roof and wall for !the roof balance, this difference will be added to the floor ZDIF_RAD_WL_RF (:) = ZRAD_WL_RF (:) + PRAD_RF_WL (:) !compute exchanged fluxes with other surfaces for which the balance is done after PRAD_WL_FL (:) = PRADHT_IN (:) * ( ZTI_WL (:) - PTS_FL (:)) ! contribution of the difference between the flux from the wall/flux from ! the roof PRAD_WL_FL (:) = PRAD_WL_FL (:) + ZDIF_RAD_WL_RF (:) PRAD_WL_MA (:) = PRADHT_IN (:) * ( ZTI_WL (:) - B % XT_MASS (:, 1 )) PRAD_WL_WIN (:) = PRADHT_IN (:) * ( ZTI_WL (:) - B % XT_WIN2 (:)) PCONV_WL_BLD (:) = ZCHTC_IN_WL (:) * ( ZTI_WL_CONV (:) - B % XTI_BLD (:)) ! ! PFLX_BLD_WL (:) = - PCONV_WL_BLD (:) & + B % XF_WALL_FLOOR (:) * PRAD_RF_WL (:) & + PRADHT_IN (:) * ( B % XF_WALL_MASS (:) * ( B % XT_MASS (:, 1 ) - ZTI_WL (:)) & + B % XF_WALL_WIN (:) * ( B % XT_WIN2 (:) - ZTI_WL (:)) & + B % XF_WALL_FLOOR (:) * ( PTS_FL (:) - ZTI_WL (:)) ) ! !* wall energy residual imbalance for verification !  ----------------------------------------------- PIMB_WL (:) = PABS_SW_WL (:) + PABS_LW_WL (:) & - PDQS_WL (:) - PH_WL (:) & + PFLX_BLD_WL (:) ! ! END IF ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'WALL_LAYER_E_BUDGET' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE WALL_LAYER_E_BUDGET","tags":"","loc":"sourcefile/wall_layer_e_budget.f90.html"},{"title":"modd_canopyn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_CANOPY_n Source Code modd_canopyn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################ MODULE MODD_CANOPY_n !     ################ ! !!****  *MODD_CANOPY_n - declaration of surface parameters for urban canopy !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       07/2006 ! !*       0.   DECLARATIONS !             ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE CANOPY_t ! INTEGER :: NLVL ! number      of levels in canopy REAL , POINTER , DIMENSION (:,:) :: XZ ! height of middle of each level grid   (m) REAL , POINTER , DIMENSION (:,:) :: XU ! wind        at each level in canopy   (m/s) REAL , POINTER , DIMENSION (:,:) :: XT ! temperature at each level in canopy   (m/s) REAL , POINTER , DIMENSION (:,:) :: XQ ! humidity    at each level in canopy   (kg/m3) REAL , POINTER , DIMENSION (:,:) :: XTKE ! Tke         at each level in canopy   (m2/s2) REAL , POINTER , DIMENSION (:,:) :: XLMO ! Monin-Obhukov length                  (m) REAL , POINTER , DIMENSION (:,:) :: XLM ! Mixing lentgh                         (m) REAL , POINTER , DIMENSION (:,:) :: XLEPS ! Dissipative length                    (m) REAL , POINTER , DIMENSION (:,:) :: XP ! pressure    at each level in canopy   (kg/m3) ! REAL , POINTER , DIMENSION (:,:) :: XDZ ! depth       of each level in canopy   (m) REAL , POINTER , DIMENSION (:,:) :: XZF ! height of bottom of each level grid   (m) REAL , POINTER , DIMENSION (:,:) :: XDZF ! depth between  each level in canopy   (m) ! END TYPE CANOPY_t ! CONTAINS ! SUBROUTINE CANOPY_INIT ( SB ) TYPE ( CANOPY_t ), INTENT ( INOUT ) :: SB REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CANOPY_N:CANOPY_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( SB % XZ ) NULLIFY ( SB % XU ) NULLIFY ( SB % XT ) NULLIFY ( SB % XQ ) NULLIFY ( SB % XTKE ) NULLIFY ( SB % XLMO ) NULLIFY ( SB % XLM ) NULLIFY ( SB % XLEPS ) NULLIFY ( SB % XP ) NULLIFY ( SB % XDZ ) NULLIFY ( SB % XZF ) NULLIFY ( SB % XDZF ) SB % NLVL = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CANOPY_N:CANOPY_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CANOPY_INIT END MODULE MODD_CANOPY_n","tags":"","loc":"sourcefile/modd_canopyn.f90.html"},{"title":"spll_modi_teb_garden.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_TEB_GARDEN Source Code spll_modi_teb_garden.f90 Source Code !auto_modi:spll_teb_garden.D MODULE MODI_TEB_GARDEN INTERFACE SUBROUTINE TEB_GARDEN ( DTCO , G , TOP , T , BOP , B , TPN , TIR , DMT , GDM , GRM , KTEB_P , & HIMPLICIT_WIND , PTSUN , PT_CAN , PQ_CAN , PU_CAN , PT_LOWCAN , PQ_LOWCAN , & PU_LOWCAN , PZ_LOWCAN , PPEW_A_COEF , PPEW_B_COEF , PPEW_A_COEF_LOWCAN , & PPEW_B_COEF_LOWCAN , PPS , PPA , PEXNS , PEXNA , PTA , PQA , PRHOA , PCO2 , & PLW_RAD , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , PZENITH , PAZIM , PRR , PSR , & PZREF , PUREF , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , PTSTEP , PLEW_RF , PLEW_RD ,& PLE_WL_A , PLE_WL_B , PRNSN_RF , PHSN_RF , PLESN_RF , PGSN_RF , PMELT_RF , & PRNSN_RD , PHSN_RD , PLESN_RD , PGSN_RD , PMELT_RD , PRN_GRND , PH_GRND , & PLE_GRND , PGFLX_GRND , PRN_TWN , PH_TWN , PLE_TWN , PGFLX_TWN , PEVAP_TWN , & PSFCO2 , PUW_GRND , PUW_RF , PDUWDU_GRND , PDUWDU_RF , & PUSTAR_TWN , PCD , PCDN , PCH_TWN , PRI_TWN , PTS_TWN , PEMIS_TWN , & PDIR_ALB_TWN , PSCA_ALB_TWN , PRESA_TWN , PAC_RD , PAC_GD , PAC_GR , & PAC_RD_WAT , PAC_GD_WAT , PAC_GR_WAT , KDAY , PEMIT_LW_FAC , PEMIT_LW_GRND , & PT_RAD_IND , PREF_SW_GRND , PREF_SW_FAC , PHU_BLD , PTIME , PPROD_BLD ) USE MODD_DATA_COVER_n , ONLY : DATA_COVER_t USE MODD_SFX_GRID_n , ONLY : GRID_t USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t USE MODD_SURFEX_n , ONLY : TEB_GARDEN_MODEL_t USE MODD_SURFEX_n , ONLY : TEB_GREENROOF_MODEL_t IMPLICIT NONE TYPE ( DATA_COVER_t ), INTENT ( INOUT ) :: DTCO TYPE ( GRID_t ), INTENT ( INOUT ) :: G TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_OPTIONS_t ), INTENT ( INOUT ) :: BOP TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_PANEL_t ), INTENT ( INOUT ) :: TPN TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT TYPE ( TEB_GARDEN_MODEL_t ), INTENT ( INOUT ) :: GDM TYPE ( TEB_GREENROOF_MODEL_t ), INTENT ( INOUT ) :: GRM INTEGER , INTENT ( IN ) :: KTEB_P ! TEB current patch number CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option REAL , DIMENSION (:), INTENT ( IN ) :: PTSUN ! solar time   (s from midnight) REAL , DIMENSION (:) , INTENT ( INOUT ) :: PT_CAN ! canyon air temperature REAL , DIMENSION (:) , INTENT ( INOUT ) :: PQ_CAN ! canyon air specific humidity REAL , DIMENSION (:) , INTENT ( IN ) :: PU_CAN ! canyon hor. wind REAL , DIMENSION (:) , INTENT ( IN ) :: PU_LOWCAN ! wind near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PT_LOWCAN ! temp. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PQ_LOWCAN ! hum. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PZ_LOWCAN ! height of atm. var. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF_LOWCAN ! implicit coefficients for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF_LOWCAN ! between low canyon wind and road REAL , DIMENSION (:) , INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:) , INTENT ( IN ) :: PPA ! pressure at the first atmospheric level REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:) , INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PQA ! specific humidity at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNA ! exner function at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PRHOA ! air density at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PCO2 ! CO2 concentration in the air    (kg/m3) REAL , DIMENSION (:) , INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:,:), INTENT ( IN ) :: PDIR_SW ! incoming direct solar rad on an horizontal surface REAL , DIMENSION (:,:), INTENT ( IN ) :: PSCA_SW ! scattered incoming solar rad. REAL , DIMENSION (:) , INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) INTEGER , INTENT ( IN ) :: KSW ! number of short-wave spectral bands REAL , DIMENSION (:) , INTENT ( IN ) :: PZENITH ! solar zenithal angle REAL , DIMENSION (:) , INTENT ( IN ) :: PAZIM ! solar azimuthal angle REAL , DIMENSION (:) , INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:) , INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:) , INTENT ( IN ) :: PH_TRAFFIC ! anthropogenic sensible heat fluxes due to traffic REAL , DIMENSION (:) , INTENT ( IN ) :: PLE_TRAFFIC ! anthropogenic latent heat fluxes due to traffic REAL , DIMENSION (:) , INTENT ( IN ) :: PZREF ! reference height of the first atm level (temperature) REAL , DIMENSION (:) , INTENT ( IN ) :: PUREF ! reference height of the first atm level (wind) REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:) , INTENT ( OUT ) :: PLEW_RF ! latent heat flux over roof (snow) REAL , DIMENSION (:) , INTENT ( OUT ) :: PLEW_RD ! latent heat flux over road (snow) REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_WL_A ! latent heat flux over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_WL_B ! latent heat flux over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PRNSN_RF ! net radiation over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PHSN_RF ! sensible heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PLESN_RF ! latent heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PGSN_RF ! flux under the snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PMELT_RF ! snow melt REAL , DIMENSION (:) , INTENT ( OUT ) :: PRNSN_RD ! net radiation over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PHSN_RD ! sensible heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PLESN_RD ! latent heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PGSN_RD ! flux under the snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PMELT_RD ! snow melt REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_GRND ! net radiation over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_GRND ! sensible heat flux over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_GRND ! latent heat flux over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLX_GRND ! flux through the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_TWN ! net radiation over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_TWN ! sensible heat flux over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_TWN ! latent heat flux over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLX_TWN ! flux through the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PEVAP_TWN ! evaporation flux (kg/m2/s) REAL , DIMENSION (:) , INTENT ( OUT ) :: PSFCO2 ! flux of CO2       (m/s*kg_CO2/kg_air) REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW_GRND ! momentum flux for ground built surf REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW_RF ! momentum flux for roofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PDUWDU_GRND ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PDUWDU_RF ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PUSTAR_TWN ! friciton velocity over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PCD ! town averaged drag coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PCDN ! town averaged neutral drag coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PCH_TWN ! town averaged heat transfer coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PRI_TWN ! town averaged Richardson number REAL , DIMENSION (:) , INTENT ( OUT ) :: PTS_TWN ! town surface temperature REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIS_TWN ! town equivalent emissivity REAL , DIMENSION (:) , INTENT ( OUT ) :: PDIR_ALB_TWN ! town equivalent direct albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PSCA_ALB_TWN ! town equivalent diffuse albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PRESA_TWN ! town aerodynamical resistance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_RD ! road conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GD ! green area conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GR ! green roof conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_RD_WAT ! road conductance for latent heat REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GD_WAT ! green area conductance for latent heat REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GR_WAT ! green roof conductance for latent heat INTEGER , INTENT ( IN ) :: KDAY ! Simulation day REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIT_LW_GRND ! LW flux emitted by the ground (W/m2 ground) REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIT_LW_FAC ! LW flux emitted by the facade (W/m2 ground) REAL , DIMENSION (:) , INTENT ( OUT ) :: PT_RAD_IND ! Indoor mean radiant temperature [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PREF_SW_GRND ! total solar rad reflected from ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PREF_SW_FAC ! total solar rad reflected from facade REAL , DIMENSION (:) , INTENT ( OUT ) :: PHU_BLD ! Indoor relative humidity 0 < (-) < 1 REAL , INTENT ( IN ) :: PTIME ! current time since midnight (UTC, s) REAL , DIMENSION (:), INTENT ( OUT ) :: PPROD_BLD ! Averaged     Energy production of solar panel on roofs (W/m2 bld  ) END SUBROUTINE TEB_GARDEN END INTERFACE END MODULE MODI_TEB_GARDEN","tags":"","loc":"sourcefile/spll_modi_teb_garden.f90.html"},{"title":"spll_modi_urban_lw_coef.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_URBAN_LW_COEF Source Code spll_modi_urban_lw_coef.f90 Source Code !auto_modi:spll_urban_lw_coef.D MODULE MODI_URBAN_LW_COEF INTERFACE SUBROUTINE URBAN_LW_COEF ( B , T , PLW_RAD , PEMIS_G , PTS_SR , PTS_G , & PLW_WA_TO_WB , PLW_WA_TO_R , PLW_WB_TO_R , & PLW_WA_TO_NR , PLW_WB_TO_NR , & PLW_WA_TO_G , PLW_WB_TO_G , & PLW_WA_TO_WIN , PLW_WB_TO_WIN , & PLW_R_TO_WA , PLW_R_TO_WB , PLW_R_TO_WIN , & PLW_G_TO_WA , PLW_G_TO_WB , PLW_G_TO_WIN , & PLW_S_TO_WA , PLW_S_TO_WB , PLW_S_TO_R , & PLW_S_TO_NR , PLW_S_TO_G , PLW_S_TO_WIN , & PLW_WIN_TO_WA , PLW_WIN_TO_WB , PLW_WIN_TO_R , & PLW_WIN_TO_NR , PLW_WIN_TO_G , & PLW_NR_TO_WA , PLW_NR_TO_WB , PLW_NR_TO_WIN ) USE MODD_BEM_n , ONLY : BEM_t USE MODD_TEB_n , ONLY : TEB_t IMPLICIT NONE TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_t ), INTENT ( INOUT ) :: T REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! incoming LW radiation REAL , DIMENSION (:), INTENT ( IN ) :: PEMIS_G ! GARDEN area emissivity REAL , DIMENSION (:), INTENT ( IN ) :: PTS_G ! garden surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_SR ! snow surface temperature REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WA_TO_WB ! L.W. interactions wall->opposite wall REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WA_TO_R ! L.W. interactions wall->road for road balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WB_TO_R ! L.W. interactions wall->road for road balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WA_TO_NR ! L.W. interactions wall->snow for snow balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WB_TO_NR ! L.W. interactions wall->snow for snow balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WA_TO_G ! L.W. interactions wall->GARDEN areas for garden balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WB_TO_G ! L.W. interactions wall->GARDEN areas for garden balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WA_TO_WIN ! L.W. interactions wall->win for window balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WB_TO_WIN ! L.W. interactions wall->win for window balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_R_TO_WA ! L.W. interactions road->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_R_TO_WB ! L.W. interactions road->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_R_TO_WIN ! L.W. interactions road->win for win balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_G_TO_WA ! L.W. interactions GARDEN areas->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_G_TO_WB ! L.W. interactions GARDEN areas->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_G_TO_WIN ! L.W. interactions GARDEN areas->road for window balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_WA ! L.W. interactions sky->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_WB ! L.W. interactions sky->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_R ! L.W. interactions sky->road for raod balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_NR ! L.W. interactions sky->snow for snow balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_G ! L.W. interactions sky->GARDEN areas for garden balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_WIN ! L.W. interactions sky->win for window balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WIN_TO_WA ! L.W. interactions win->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WIN_TO_WB ! L.W. interactions win->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WIN_TO_R ! L.W. interactions win->road for road balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WIN_TO_NR ! L.W. interactions win->GARDEN areas for snow balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WIN_TO_G ! L.W. interactions win->GARDEN areas for garden balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_NR_TO_WA ! L.W. interactions snow(road)->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_NR_TO_WB ! L.W. interactions snow(road)->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_NR_TO_WIN ! L.W. interactions snow(road)->WIN areas for window balance END SUBROUTINE URBAN_LW_COEF END INTERFACE END MODULE MODI_URBAN_LW_COEF","tags":"","loc":"sourcefile/spll_modi_urban_lw_coef.f90.html"},{"title":"bem.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines BEM Source Code bem.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !   ########################################################################## SUBROUTINE BEM ( BOP , T , B , DMT , PTSTEP , PSUNTIME , KDAY , PPS , PRHOA , PT_CAN , & PQ_CAN , PU_CAN , PHU_BLD , PT_RAD_IND , PFLX_BLD_FL , PFLX_BLD_MA ,& PRADHT_IN , PRAD_RF_MA , PRAD_RF_FL , PRAD_WL_MA , PRAD_WL_FL ,& PRAD_WIN_MA , PRAD_WIN_FL , PCONV_RF_BLD , PCONV_WL_BLD , & PCONV_WIN_BLD , PLOAD_IN_FL , PLOAD_IN_MA ) !   ########################################################################## ! !!****  *BEM* !! !!    PURPOSE !!    ------- ! !     Computes the temperature and humidity evolution of indoor air, !     building energy demand, HVAC energy consumption, !     waste heat from HVAC systems, and heat fluxes from indoor to building surfaces. ! ! !!**  METHOD !     ------ ! !              NOMENCLATURE: bld  - refers to building plant area; !                            floor- refers to building plant area multiplied !                                   by the number of floors; !                            wall - refers to wall area (excluding windows). !                            win  - refers to window area. !                            mass - refers to internal mass area. ! ! !        solar radiation transmitted through windows !        ******************************************* ! !     Qsol_tr_win = Qsol_facade * tr_win * GR ! ! !        indoor wall conv/rad heat transfer coefficients !        *********************************************** ! !     The calculation of CHTC accounts for favorable or unfavorable convection !     depending on the relative position between the hot layer and cold layer ! ! !        building energy demand !        ********************** ! !     Calculation of the cooling and heating, sensible and latent building energy demand. !     The sensible demand includes the convective heat transfer from indoor surfaces, the !     convective fraction of internal heat gains, and sensible infiltration/ventilation heat !     gains. The latent demand includes the latent fraction of internal heat gains and latent !     infiltration/ventilation heat gains. ! !        surface areas and volummes (referred to m2_bld) !        *********************************************** ! !     Awall   =  WALL_O_HOR * (1 - GR) / BLD [m2_wall/m2_bld] !     Awin    =  WALL_O_HOR * GR / BLD       [m2_win/m2_bld] !     Amass   =  2 * N_FLOOR                  [m2_mass/m2_bld] !     N_FLOOR  =  BLD_HEIGHT / FLOOR_HEIGHT   [#] !     Aroof   =  1                           [m2_roof/m2_bld] !     Afloor  =  1                           [m2_floor/m2_bld] !     Vol_air =  BLD_HEIGHT                  [m3_bld/m2_bld] ! ! !        evolution of the internal temperature !        ************************************* ! !                                  dTin !     Vol_air * ro_air * cp_air * ---- = h_wall * Awall * (Twall - Tin) !                                   dt    + h_roof * Aroof * (Troof -Tin) !                                         + h_floor * Afloor *(Tfloor - Tin) !                                         + h_mass * Amass * (Tmass - Tin) !                                         + h_win * Awin * (Twin - Tin) !                                         + Qig * (1 - fig_rad) * (1-fig_lat) !                                         + Vinf * ro_air * cp_air * (Tout - Tin) !                                         + Vsys * ro_air * cp_air * (Tsys - Tin) ! ! !        evolution of the internal specific humidity !        ******************************************* ! !                                  dQin !      Vol_air * ro_air * lv_air * ---- = Qig * fig_lat !                                   dt    + Vinf * ro_air * lv_air * (Qout - Qin) !                                         + Vsys * ro_air * lv_air * (Qsys - Qin) ! ! !        heat fluxes from indoor to surfaces !        *********************************** ! !      Qin_wall  = h_wall  * (Tin - Twall)  [W/m2_wall] !      Qin_roof  = h_roof  * (Tin - Troof)  [W/m2_roof] !      Qin_floor = h_floor * (Tin - Tfloor) [W/m2_floor] !      Qin_mass  = h_wall  * (Tin - Tmass) !                + Qig * fig_rad * (1-fig_lat)/ 2 !                + Qsol_tr_win              [W/m2_mass] ! ! !        energy consumption and waste heat from cooling system !        ***************************************************** ! !      Qhvac  = Qbld / COP !      Qwaste = Qbld + Qhvac ! ! !        energy consumption and waste heat from heating system !        ***************************************************** ! !      Qhvac  = Qbld / Eff !      Qwaste = Qhvac - Qbld ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      B. Bueno           * Meteo-France * !! !!!    MODIFICATIONS !!    ------------- !!     Original 2010 !!     G. Pigeon nov. 2011: inclusion floor/mass budget inside !!                          add automatic/manual ventilation !!                          conserve exchanges with the different surfaces inside 1 time step !!    G. Pigeon sept. 2012: use of TARP/DOE coef for indoor convection !!                          use of both T%XT_WALL_A and T%XT_WALL_B for calculations !!                          the internal mass depth is 1/2 of the floor depth !!                          add the option of no atmospheric heat releases by HVAC system (B%XF_WATER_COND < 0) !!    G. Pigeon oct. 2012:  use indoor air density + new solar heat gain distribution !!    V. Masson May  2013   implicitation of internal building temperature evolution !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t ! USE MODD_CSTS , ONLY : XCPD , XSTEFAN , XLVTT , XG , XRV , XRD USE MODE_THERMOS USE MODE_PSYCHRO USE MODI_DX_AIR_COOLING_COIL_CV USE MODI_FLOOR_LAYER_E_BUDGET USE MODI_MASS_LAYER_E_BUDGET USE MODE_CONV_DOE ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! USE MODD_CSTS , ONLY : XTT ! use MinimalDXCoolingDriver , only : SimMinimalDXCooling use mode_psychrolib , only : SetUnitSystem , SI , GetHumRatioFromSpecificHum , GetSpecificHumFromHumRatio ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! TYPE ( BEM_OPTIONS_t ), INTENT ( INOUT ) :: BOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT ! REAL , INTENT ( IN ) :: PTSTEP ! Time step REAL , DIMENSION (:), INTENT ( IN ) :: PSUNTIME ! current solar time since midnight (solar time, s) INTEGER , INTENT ( IN ) :: KDAY ! Simulation day ! REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! Canyon air pressure [Pa] REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! Air density at the lowest level [kg m-3] REAL , DIMENSION (:), INTENT ( IN ) :: PT_CAN ! Canyon air temperature [K] REAL , DIMENSION (:), INTENT ( IN ) :: PQ_CAN ! Canyon air specific humidity [kg kg-1] REAL , DIMENSION (:), INTENT ( IN ) :: PU_CAN ! Canyon wind speed (m s-1) ! REAL , DIMENSION (:), INTENT ( OUT ) :: PHU_BLD ! Indoor relative humidity 0 < (-) < 1 REAL , DIMENSION (:), INTENT ( IN ) :: PT_RAD_IND ! Indoor mean radiant temperature [K] ! REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_FL ! Heat flux from indoor air to floor ! [W m-2(bld)] REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_MA ! Heat flux from indoor air to mass ! [W m-2(bld)] REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient ! [W K-1 m-2] REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_RF_MA ! Rad. fluxes between roof and mass REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_RF_FL ! Rad. fluxes between roof and floor REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_WL_MA ! Rad. fluxes between wall and mass REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_WL_FL ! Rad. fluxes between wall and floor REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_WIN_MA ! Rad. fluxes between wind. and mass REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_WIN_FL ! Rad. fluxes between wind. and floor REAL , DIMENSION (:) , INTENT ( IN ) :: PCONV_RF_BLD ! Conv. fluxes between roof and indoor air REAL , DIMENSION (:) , INTENT ( IN ) :: PCONV_WL_BLD ! Conv. fluxes between wall and indoor air REAL , DIMENSION (:) , INTENT ( IN ) :: PCONV_WIN_BLD ! Conv. fluxes between wind. and indoor air REAL , DIMENSION (:) , INTENT ( IN ) :: PLOAD_IN_FL ! solar + int heat gain on floor W/m2 [floor] REAL , DIMENSION (:) , INTENT ( IN ) :: PLOAD_IN_MA ! solar + int heat gain on floor W/m2 [mass] ! !*      0.2    Declarations of local variables ! INTEGER :: IRF ! Number of roof layers INTEGER :: IWL ! Number of wall layers !REAL                           :: ZTCOMF_MAX   ! Maximum comfort temperature for nat.vent [K] ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZFAN_AP ! Fan design pressure increase [Pa] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZFAN_EFF ! Fan total efficiency ! LOGICAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: GSCHED ! Day-night schedule flag ! *to be transported to inputs* ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZF_NIGHT ! Reduction factor of int.gains at night REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZF_DAY ! Amplification factor of int.gains at daytime ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZAC_IN_MA_COOL , ZAC_IN_FL_COOL , & ZAC_IN_RF_COOL , ZAC_IN_WL_A_COOL , & ZAC_IN_WL_B_COOL , ZAC_IN_WIN_COOL REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZAC_IN_MA_HEAT , ZAC_IN_FL_HEAT , & ZAC_IN_RF_HEAT , ZAC_IN_WL_A_HEAT , & ZAC_IN_WL_B_HEAT , ZAC_IN_WIN_HEAT ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZQIN ! Internal heat gains [W m-2(bld)] ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZV_VENT ! Ventilation flow rate [m3 s-1 m-2(bld)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZINF ! Infiltration flow rate [m3 s-1 m-2(bld)] ! LOGICAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: GNAT_VENT ! Is Natural ventilation active ? REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZNAT_VENT ! Nat.vent airflow rate [m3 s-1 m-2(bld)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZTI_BLD ! Indoor air temperature at time step t + dt [K] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZTI_BLD_OPEN ! Indoor air temperature if windows opened REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZTI_BLD_CLOSED ! Indoor air temperature if windows closed ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZQCOOL_TRGT ! Specific humidity cooling setpoing [kg kg-1] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZQHEAT_TRGT ! Specific humidity heating setpoing [kg kg-1] ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZSHR ! Rated sensible heat rate REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZM_SYS_RAT ! Auxiliar mass flow rate [kg s-1 m-2(bld)] ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZXMIX ! Outdoor mixing fraction REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZT_MIX ! Mixing air temperature [K] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZQ_MIX ! Mixing air specific humidity [kg kg-1] ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZQI_BLD ! Indoor air humidity at time step t + dt [K} REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZWASTE ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZDQS_FL REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZIMB_FL REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZDQS_MA REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZIMB_MA REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZLOAD_FL ! sum of solar and internal loads on floor REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZLOAD_MA ! sum of solar and internal loads on mass REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZRAD_FL_MA ! Rad. fluxes from floor to mass REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZCONV_FL_BLD ! Conv. fluxes from floor to indoor air REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZCONV_MA_BLD ! Conv. fluxes from mass to indoor air REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZRHOI ! indoor air density ! INTEGER :: JJ ! Loop counter REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! Local variable used for the coupling with MinimalDX REAL :: OutdoorHumRatio , InletHumRatio , OutletHumRatio , OutdoorTDryBulb , InletTDryBulb , OutletTemperature ! ! Psychrolib: use International System of Units call SetUnitSystem ( SI ) ! !!REAL :: ZEXPL = 0.5 !explicit coefficient for internal temperature evol. !!REAL :: ZIMPL = 0.5 !implicit coef.. ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'BEM' , 0 , ZHOOK_HANDLE ) ! !*      1.   Initializations !            --------------- ! ZRHOI (:) = PPS (:) / ( XRD * B % XTI_BLD (:) * ( 1. + (( XRV / XRD ) - 1. ) * B % XQI_BLD (:) ) ) ! *Temperal definitions for nat.vent* !ZTCOMF_MAX  = 26. + 273.16 ! ! *Definitions ZFAN_AP (:) = 60 0.0 ZFAN_EFF (:) = 0.7 ! ! *Other calcs IRF = SIZE ( T % XT_ROOF , 2 ) IWL = SIZE ( T % XT_WALL_A , 2 ) ! ! ! initial condition of QI_BLD equivalent to 50% RH IF ( ANY ( B % XQI_BLD (:) <= 1E-6 )) B % XQI_BLD = 0.5 * QSAT ( B % XTI_BLD , PPS ) ! ! *Temperal definitions for shedule* GSCHED (:) = . FALSE . WHERE ( GSCHED (:)) ZF_NIGHT (:) = 0.8 ZF_DAY (:) = 1.2 ELSE WHERE ZF_NIGHT (:) = 1. ZF_DAY (:) = 1. END WHERE ! ! *Int.gains schedule ! ZQIN = DMT % XQIN * B % XN_FLOOR WHERE ( PSUNTIME (:) > 0. . AND . PSUNTIME (:) < 2520 0. ) ! night between 0000 and 0700 ZQIN (:) = ZQIN (:) * ZF_NIGHT (:) ELSEWHERE ZQIN (:) = ZQIN (:) * ZF_DAY (:) END WHERE ! *Change of units AC/H -> [m3 s-1 m-2(bld)] ZV_VENT (:) = B % XV_VENT (:) * T % XBLD_HEIGHT (:) / 360 0. ZINF (:) = B % XINF (:) * T % XBLD_HEIGHT (:) / 360 0. ! !*      2.   heat balance for building floor and mass !            ---------------------------------------- ! !*      2.1 total load on the internal mass or floor ZLOAD_FL (:) = ( ZQIN (:) * B % XQIN_FRAD (:) * ( 1. - B % XQIN_FLAT (:)) + DMT % XTR_SW_WIN (:)) / ( B % XMASS_O_BLD (:) + 1. ) WHERE ( B % XN_FLOOR (:) > 1. ) ZLOAD_MA (:) = ZLOAD_FL (:) ELSEWHERE ZLOAD_MA (:) = 0. ENDWHERE ! !*      2.2 FLOOR HEAT BALANCE ! CALL FLOOR_LAYER_E_BUDGET ( B , PTSTEP , PFLX_BLD_FL , ZDQS_FL , ZIMB_FL , PRADHT_IN , & PRAD_WL_FL , PRAD_RF_FL , PRAD_WIN_FL , PLOAD_IN_FL , & ZRAD_FL_MA , ZCONV_FL_BLD ) ! !*      2.3 MASS HEAT BALANCE ! CALL MASS_LAYER_E_BUDGET ( B , PTSTEP , PFLX_BLD_MA , ZDQS_MA , ZIMB_MA , PRADHT_IN , & PRAD_WL_MA , PRAD_RF_MA , PRAD_WIN_MA , PLOAD_IN_MA , & ZRAD_FL_MA , ZCONV_MA_BLD ) ! ! ZAC_IN_WL_A_COOL = CHTC_VERT_DOE ( T % XT_WALL_A (:, IWL ), DMT % XTCOOL_TARGET ) ZAC_IN_WL_B_COOL = CHTC_VERT_DOE ( T % XT_WALL_B (:, IWL ), DMT % XTCOOL_TARGET ) ZAC_IN_WIN_COOL = CHTC_VERT_DOE ( B % XT_WIN2 , DMT % XTCOOL_TARGET ) ZAC_IN_MA_COOL = CHTC_VERT_DOE ( B % XT_MASS (:, 1 ) , DMT % XTCOOL_TARGET ) ZAC_IN_RF_COOL = CHTC_DOWN_DOE ( T % XT_ROOF (:, IRF ) , DMT % XTCOOL_TARGET ) ZAC_IN_FL_COOL = CHTC_UP_DOE ( B % XT_FLOOR (:, 1 ) , DMT % XTCOOL_TARGET ) ZAC_IN_WL_A_HEAT = CHTC_VERT_DOE ( T % XT_WALL_A (:, IWL ), DMT % XTHEAT_TARGET ) ZAC_IN_WL_B_HEAT = CHTC_VERT_DOE ( T % XT_WALL_B (:, IWL ), DMT % XTHEAT_TARGET ) ZAC_IN_WIN_HEAT = CHTC_VERT_DOE ( B % XT_WIN2 , DMT % XTHEAT_TARGET ) ZAC_IN_MA_HEAT = CHTC_VERT_DOE ( B % XT_MASS (:, 1 ) , DMT % XTHEAT_TARGET ) ZAC_IN_RF_HEAT = CHTC_DOWN_DOE ( T % XT_ROOF (:, IRF ) , DMT % XTHEAT_TARGET ) ZAC_IN_FL_HEAT = CHTC_UP_DOE ( B % XT_FLOOR (:, 1 ) , DMT % XTHEAT_TARGET ) DO JJ = 1 , SIZE ( ZAC_IN_WIN_COOL ) ZAC_IN_WL_A_COOL ( JJ ) = MAX ( 1. , ZAC_IN_WL_A_COOL ( JJ )) ZAC_IN_WL_B_COOL ( JJ ) = MAX ( 1. , ZAC_IN_WL_B_COOL ( JJ )) ZAC_IN_WIN_COOL ( JJ ) = MAX ( 1. , ZAC_IN_WIN_COOL ( JJ )) ZAC_IN_MA_COOL ( JJ ) = MAX ( 1. , ZAC_IN_MA_COOL ( JJ )) ZAC_IN_RF_COOL ( JJ ) = MAX ( 1. , ZAC_IN_RF_COOL ( JJ )) ZAC_IN_FL_COOL ( JJ ) = MAX ( 1. , ZAC_IN_FL_COOL ( JJ )) ZAC_IN_WL_A_HEAT ( JJ ) = MAX ( 1. , ZAC_IN_WL_A_HEAT ( JJ )) ZAC_IN_WL_B_HEAT ( JJ ) = MAX ( 1. , ZAC_IN_WL_B_HEAT ( JJ )) ZAC_IN_WIN_HEAT ( JJ ) = MAX ( 1. , ZAC_IN_WIN_HEAT ( JJ )) ZAC_IN_MA_HEAT ( JJ ) = MAX ( 1. , ZAC_IN_MA_HEAT ( JJ )) ZAC_IN_RF_HEAT ( JJ ) = MAX ( 1. , ZAC_IN_RF_HEAT ( JJ )) ZAC_IN_FL_HEAT ( JJ ) = MAX ( 1. , ZAC_IN_FL_HEAT ( JJ )) ENDDO !*      4.   Indoor energy balance calculation !            --------------------------------- ! DO JJ = 1 , SIZE ( PT_CAN ) ! *first guess of indoor temperature ZTI_BLD ( JJ ) = B % XTI_BLD ( JJ ) + PTSTEP / ( ZRHOI ( JJ ) * XCPD * T % XBLD_HEIGHT ( JJ )) & * ( T % XWALL_O_BLD ( JJ ) * PCONV_WL_BLD ( JJ ) + B % XGLAZ_O_BLD ( JJ ) * PCONV_WIN_BLD ( JJ ) & + B % XMASS_O_BLD ( JJ ) * ZCONV_MA_BLD ( JJ ) + PCONV_RF_BLD ( JJ ) + ZCONV_FL_BLD ( JJ ) & + ZQIN ( JJ ) * ( 1 - B % XQIN_FRAD ( JJ )) * ( 1 - B % XQIN_FLAT ( JJ )) ) ! !################################################################################ ! *is natural surventilation active at the current time step ? !--------------------------------------------------------------------------------- ! !    *no surventilation possible IF ( B % CNATVENT ( JJ ) == 'NONE' ) THEN ! GNAT_VENT ( JJ ) = . FALSE . ! !    *automatic management of surventilation ELSEIF ( B % CNATVENT ( JJ ) == 'AUTO' . OR . B % CNATVENT ( JJ ) == 'MECH' ) THEN ! IF ( MOD ( PSUNTIME ( JJ ), 360 0. ) . LT . PTSTEP ) THEN ! IF ( B % XTI_BLD ( JJ ). GT . PT_CAN ( JJ ) + 1 ) THEN ! condition to enable the IF ( B % CNATVENT ( JJ ) == 'AUTO' ) THEN ! natural surventilation rate calculation (window opening) CALL GET_NAT_VENT ( B % XTI_BLD ( JJ ), PT_CAN ( JJ ), PU_CAN ( JJ ), B % XGR ( JJ ), & B % XFLOOR_HW_RATIO ( JJ ), T % XBLD_HEIGHT ( JJ ), ZNAT_VENT ( JJ )) ELSE IF ( B % CNATVENT ( JJ ) == 'MECH' ) THEN ! mechanical surventilation rate calculation : 5 volumes/hour ZNAT_VENT ( JJ ) = 5.0 * T % XBLD_HEIGHT ( JJ ) / 360 0. END IF ! ZTI_BLD_OPEN ( JJ ) = ZTI_BLD ( JJ ) & + ZNAT_VENT ( JJ ) * PTSTEP / T % XBLD_HEIGHT ( JJ ) * ( PT_CAN ( JJ ) - B % XTI_BLD ( JJ )) ZTI_BLD_CLOSED ( JJ ) = ZTI_BLD ( JJ ) & + ( ZINF ( JJ ) + ZV_VENT ( JJ )) * PTSTEP / T % XBLD_HEIGHT ( JJ ) * ( PT_CAN ( JJ ) - B % XTI_BLD ( JJ )) ! GNAT_VENT ( JJ ) = ( ZTI_BLD_OPEN ( JJ ) <= DMT % XTCOOL_TARGET ( JJ ) . AND . & ZTI_BLD_OPEN ( JJ ) < ZTI_BLD_CLOSED ( JJ ) . AND . & ZTI_BLD_OPEN ( JJ ) > DMT % XTHEAT_TARGET ( JJ ) + 4. ) ! ELSE GNAT_VENT ( JJ ) = . FALSE . ENDIF B % LNATVENT_NIGHT ( JJ ) = GNAT_VENT ( JJ ) ELSE GNAT_VENT ( JJ ) = B % LNATVENT_NIGHT ( JJ ) ENDIF ! !    *manual management of surventilation ELSEIF ( B % CNATVENT ( JJ ) == 'MANU' ) THEN ! B % LNATVENT_NIGHT ( JJ ) = B % LNATVENT_NIGHT ( JJ ) . AND . & . NOT . ( PSUNTIME ( JJ ) > 5. * 3600 . AND . PSUNTIME ( JJ ) < 1 8. * 3600 ) ! GNAT_VENT ( JJ ) = ( PSUNTIME ( JJ ) > 1 8. * 360 0. . AND . PSUNTIME ( JJ ) < 2 1. * 360 0. & . AND . PT_CAN ( JJ ) < B % XTI_BLD ( JJ ) + 2. & . AND . PT_CAN ( JJ ) > DMT % XTHEAT_TARGET ( JJ ) & . AND . ( B % XTI_BLD ( JJ ) > DMT % XTHEAT_TARGET ( JJ ) + 5. & . OR . B % XTI_BLD ( JJ ) == DMT % XTCOOL_TARGET ( JJ ) ) ) GNAT_VENT ( JJ ) = GNAT_VENT ( JJ ) . OR . B % LNATVENT_NIGHT ( JJ ) ! ENDIF ! ! Decicion about natural surventilation OK !################################################################################ ! ! !################################################################################ ! COMPUTE ENERGY DEMAND !--------------------------------------------------------------------------------- ! *If natural surventilation ACTIVE IF ( GNAT_VENT ( JJ )) THEN ! CALL GET_NAT_VENT ( B % XTI_BLD ( JJ ), PT_CAN ( JJ ), PU_CAN ( JJ ), B % XGR ( JJ ), & B % XFLOOR_HW_RATIO ( JJ ), T % XBLD_HEIGHT ( JJ ), ZNAT_VENT ( JJ ) ) ! ZV_VENT ( JJ ) = 0. ZINF ( JJ ) = 0. ! DMT % XH_BLD_COOL ( JJ ) = 0.0 ! No HVAC consumption DMT % XH_BLD_HEAT ( JJ ) = 0.0 DMT % XLE_BLD_COOL ( JJ ) = 0.0 ! No HVAC consumption DMT % XLE_BLD_HEAT ( JJ ) = 0.0 ! DMT % XT_BLD_COOL ( JJ ) = 0.0 ! No HVAC consumption DMT % XHVAC_COOL ( JJ ) = 0.0 DMT % XT_SYS ( JJ ) = B % XTI_BLD ( JJ ) ! No mechanical ventilation DMT % XQ_SYS ( JJ ) = B % XQI_BLD ( JJ ) ! DMT % XH_WASTE ( JJ ) = 0.0 DMT % XLE_WASTE ( JJ ) = 0.0 DMT % XFAN_POWER ( JJ ) = 0.0 DMT % XHVAC_HEAT ( JJ ) = 0.0 ! DMT % XM_SYS ( JJ ) = 0.0 DMT % XCOP ( JJ ) = 0.0 DMT % XCAP_SYS ( JJ ) = 0.0 ! ! *If natural surventilation INACTIVE ELSE ! ZNAT_VENT ( JJ ) = 0. ! ! ------------------------------------------------ ! * Building energy demand for heating and cooling ! ------------------------------------------------ ! DMT % XH_BLD_COOL ( JJ ) = T % XWALL_O_BLD ( JJ ) / 2. * ( ZAC_IN_WL_A_COOL ( JJ ) * ( T % XT_WALL_A ( JJ , IWL ) - DMT % XTCOOL_TARGET ( JJ )) & + ZAC_IN_WL_B_COOL ( JJ ) * ( T % XT_WALL_B ( JJ , IWL ) - DMT % XTCOOL_TARGET ( JJ ))) & + B % XGLAZ_O_BLD ( JJ ) * ZAC_IN_WIN_COOL ( JJ ) * ( B % XT_WIN2 ( JJ ) - DMT % XTCOOL_TARGET ( JJ )) & + ZAC_IN_MA_COOL ( JJ ) * B % XMASS_O_BLD ( JJ ) * ( B % XT_MASS ( JJ , 1 ) - DMT % XTCOOL_TARGET ( JJ )) & + ZAC_IN_RF_COOL ( JJ ) * ( T % XT_ROOF ( JJ , IRF ) - DMT % XTCOOL_TARGET ( JJ )) & + ZAC_IN_FL_COOL ( JJ ) * ( B % XT_FLOOR ( JJ , 1 ) - DMT % XTCOOL_TARGET ( JJ )) & + ZQIN ( JJ ) * ( 1 - B % XQIN_FRAD ( JJ )) * ( 1 - B % XQIN_FLAT ( JJ )) & + ( ZINF ( JJ ) + ZV_VENT ( JJ )) * ZRHOI ( JJ ) * XCPD * ( PT_CAN ( JJ ) - DMT % XTCOOL_TARGET ( JJ )) ! DMT % XH_BLD_HEAT ( JJ ) = - ( T % XWALL_O_BLD ( JJ ) / 2. * ( ZAC_IN_WL_A_HEAT ( JJ ) * ( T % XT_WALL_A ( JJ , IWL ) - DMT % XTHEAT_TARGET ( JJ )) & + ZAC_IN_WL_B_HEAT ( JJ ) * ( T % XT_WALL_B ( JJ , IWL ) - DMT % XTHEAT_TARGET ( JJ ))) & + B % XGLAZ_O_BLD ( JJ ) * ZAC_IN_WIN_HEAT ( JJ ) * ( B % XT_WIN2 ( JJ ) - DMT % XTHEAT_TARGET ( JJ )) & + ZAC_IN_MA_HEAT ( JJ ) * B % XMASS_O_BLD ( JJ ) * ( B % XT_MASS ( JJ , 1 ) - DMT % XTHEAT_TARGET ( JJ )) & + ZAC_IN_RF_HEAT ( JJ ) * ( T % XT_ROOF ( JJ , IRF ) - DMT % XTHEAT_TARGET ( JJ )) & + ZAC_IN_FL_HEAT ( JJ ) * ( B % XT_FLOOR ( JJ , 1 ) - DMT % XTHEAT_TARGET ( JJ )) & + ZQIN ( JJ ) * ( 1 - B % XQIN_FRAD ( JJ )) * ( 1 - B % XQIN_FLAT ( JJ )) & + ( ZINF ( JJ ) + ZV_VENT ( JJ )) * ZRHOI ( JJ ) * XCPD * ( PT_CAN ( JJ ) - DMT % XTHEAT_TARGET ( JJ ))) ! ZQCOOL_TRGT ( JJ ) = 0.62198 * B % XHR_TARGET ( JJ ) * PSAT ( DMT % XTCOOL_TARGET ( JJ )) / & ( PPS ( JJ ) - B % XHR_TARGET ( JJ ) * PSAT ( DMT % XTCOOL_TARGET ( JJ ))) ! DMT % XLE_BLD_COOL ( JJ ) = ZQIN ( JJ ) * B % XQIN_FLAT ( JJ ) & + ( ZINF ( JJ ) + ZV_VENT ( JJ )) * ZRHOI ( JJ ) * XLVTT * ( PQ_CAN ( JJ ) - ZQCOOL_TRGT ( JJ )) ! ZQHEAT_TRGT ( JJ ) = 0.62198 * B % XHR_TARGET ( JJ ) * PSAT ( DMT % XTHEAT_TARGET ( JJ )) / & ( PPS ( JJ ) - B % XHR_TARGET ( JJ ) * PSAT ( DMT % XTHEAT_TARGET ( JJ ))) ! DMT % XLE_BLD_HEAT ( JJ ) = ZQIN ( JJ ) * B % XQIN_FLAT ( JJ ) & + ( ZINF ( JJ ) + ZV_VENT ( JJ )) * ZRHOI ( JJ ) * XLVTT * ( PQ_CAN ( JJ ) - ZQHEAT_TRGT ( JJ )) ! ! * Autosize calculations ! IF ( BOP % LAUTOSIZE . AND . KDAY == 15 ) THEN ! IF ( DMT % XH_BLD_COOL ( JJ ) > B % XAUX_MAX ( JJ )) THEN ! B % XAUX_MAX ( JJ ) = DMT % XH_BLD_COOL ( JJ ) ! ! Cooling coil sensible heat rate ZSHR ( JJ ) = MIN ( XCPD * ( DMT % XTCOOL_TARGET ( JJ ) - B % XT_ADP ( JJ )) / & ( ENTH_FN_T_Q ( DMT % XTCOOL_TARGET ( JJ ), ZQCOOL_TRGT ( JJ )) - & ENTH_FN_T_Q ( B % XT_ADP ( JJ ), QSAT ( B % XT_ADP ( JJ ), PPS ( JJ )))), 1. ) ! Cooling Coil Capacity [W m-2(bld)] B % XCAP_SYS_RAT ( JJ ) = DMT % XH_BLD_COOL ( JJ ) / ZSHR ( JJ ) ! ! Cooling rated air flow rate [kg s-1 m-2(bld)] ZM_SYS_RAT ( JJ ) = DMT % XH_BLD_COOL ( JJ ) / XCPD / ( DMT % XTCOOL_TARGET ( JJ ) - ( 1 4.0 + 27 3.16 )) IF ( ZM_SYS_RAT ( JJ ) > B % XM_SYS_RAT ( JJ )) B % XM_SYS_RAT ( JJ ) = ZM_SYS_RAT ( JJ ) ! ! Impose condition IF ( B % XM_SYS_RAT ( JJ ) / ZRHOI ( JJ ) / B % XCAP_SYS_RAT ( JJ ) < 0.00004027 ) THEN B % XCAP_SYS_RAT ( JJ ) = B % XM_SYS_RAT ( JJ ) / ZRHOI ( JJ ) / 0.00004027 ELSE IF ( B % XM_SYS_RAT ( JJ ) / ZRHOI ( JJ ) / B % XCAP_SYS_RAT ( JJ ) > 0.00006041 ) THEN B % XCAP_SYS_RAT ( JJ ) = B % XM_SYS_RAT ( JJ ) / ZRHOI ( JJ ) / 0.00006041 END IF ! END IF ! END IF ! ! * END Autosize calculations ! ! * system efficiency ! ................... ! DMT % XM_SYS ( JJ ) = B % XM_SYS_RAT ( JJ ) DMT % XCOP ( JJ ) = B % XCOP_RAT ( JJ ) DMT % XCAP_SYS ( JJ ) = B % XCAP_SYS_RAT ( JJ ) ! ! * Mixing conditions ! ................. ! ZXMIX ( JJ ) = ZV_VENT ( JJ ) * ZRHOI ( JJ ) / DMT % XM_SYS ( JJ ) ZT_MIX ( JJ ) = ZXMIX ( JJ ) * PT_CAN ( JJ ) + ( 1. - ZXMIX ( JJ )) * B % XTI_BLD ( JJ ) ZQ_MIX ( JJ ) = ZXMIX ( JJ ) * PQ_CAN ( JJ ) + ( 1. - ZXMIX ( JJ )) * B % XQI_BLD ( JJ ) ! ! --------------------------------------------- ! * COOLING system : Performance and Waste heat ! --------------------------------------------- ! IF ( DMT % XH_BLD_COOL ( JJ ) >= 0.0 ) THEN ! ! *ideal system IF ( BOP % CCOOL_COIL == 'IDEAL' ) THEN ! DMT % XT_BLD_COOL ( JJ ) = DMT % XH_BLD_COOL ( JJ ) + DMT % XLE_BLD_COOL ( JJ ) !desactivation of LE_BLD_COOL impact on HVAC_COOL calculation !following too much impact in VURCA simulation (23/01/2012) !this would be the case for a vaporization system ! !DMT%XHVAC_COOL (JJ) = DMT%XT_BLD_COOL(JJ) / B%XCOP_RAT(JJ) DMT % XHVAC_COOL ( JJ ) = DMT % XH_BLD_COOL ( JJ ) / B % XCOP_RAT ( JJ ) IF ( DMT % XHVAC_COOL ( JJ ) < 0.0 ) DMT % XHVAC_COOL ( JJ ) = 0.0 ! DMT % XT_SYS ( JJ ) = ZT_MIX ( JJ ) - DMT % XH_BLD_COOL ( JJ ) / DMT % XM_SYS ( JJ ) / XCPD !DMT%XQ_SYS(JJ) = ZQ_MIX(JJ) - DMT%XLE_BLD_COOL(JJ) / DMT%XM_SYS(JJ)/ XLVTT !desactivation following too much impact in VURCA simulation !(23/01/2012) DMT % XQ_SYS ( JJ ) = ZQ_MIX ( JJ ) ! DMT % XH_WASTE ( JJ ) = DMT % XHVAC_COOL ( JJ ) * ( 1. + B % XCOP_RAT ( JJ )) * ( 1. - B % XF_WATER_COND ( JJ )) DMT % XLE_WASTE ( JJ ) = DMT % XHVAC_COOL ( JJ ) * ( 1. + B % XCOP_RAT ( JJ )) * B % XF_WATER_COND ( JJ ) ! ! *real system ELSEIF ( BOP % CCOOL_COIL == 'DXCOIL' ) THEN ! CALL DX_AIR_COOLING_COIL_CV ( PT_CAN ( JJ ), PQ_CAN ( JJ ), PPS ( JJ ), ZRHOI ( JJ ), ZT_MIX ( JJ ), & ZQ_MIX ( JJ ), B % XCOP_RAT ( JJ ), B % XCAP_SYS_RAT ( JJ ), & B % XT_ADP ( JJ ), B % XF_WATER_COND ( JJ ), DMT % XM_SYS ( JJ ), & DMT % XH_BLD_COOL ( JJ ), DMT % XH_WASTE ( JJ ), DMT % XLE_WASTE ( JJ ), & DMT % XCOP ( JJ ), DMT % XCAP_SYS ( JJ ), DMT % XT_SYS ( JJ ), & DMT % XQ_SYS ( JJ ), DMT % XHVAC_COOL ( JJ ), DMT % XT_BLD_COOL ( JJ ) ) ELSEIF ( BOP % CCOOL_COIL == 'MINIDX' ) THEN ! Notes: ! B%XT_ADP(JJ) -- i.e. PT_ADP in dx_air_cooling_coil_cv.F90 -- is no loger needed as the ADP is now calculated. ! B%XF_WATER_COND(JJ) -- i.e. PF_WATER_COND in dx_air_cooling_coil_cv.F90 -- is no longer used as ! MinimalDX only supoorts dry evaporators. B % XF_WATER_COND ( JJ ) = 0. ! In TEB the humidity is specified in terms of speicifc humidity, in MinimalDX the mixing ratio is used instead. OutdoorHumRatio = GetHumRatioFromSpecificHum ( PQ_CAN ( JJ )) InletHumRatio = GetHumRatioFromSpecificHum ( ZQ_MIX ( JJ )) ! In TEB the temperature is specified in K, in MinimalDX in degree C. OutdoorTDryBulb = PT_CAN ( JJ ) - XTT InletTDryBulb = ZT_MIX ( JJ ) - XTT call SimMinimalDXCooling ( OutdoorTDryBulb , & ! PT_CANYON   : OutdoorTDryBulb OutdoorHumRatio , & ! PQ_CANYON   : OutdoorSpecificHum PPS ( JJ ), & ! PPS         : OutdoorPressure InletTDryBulb , & ! PT_IN       : InletTDryBulb InletHumRatio , & ! PQ_IN       : InletHumRatio B % XCOP_RAT ( JJ ), & ! PCOP_RAT    : RatedCOP B % XCAP_SYS_RAT ( JJ ), & ! PCAP_SYS_RAT: RatedTotCap DMT % XH_BLD_COOL ( JJ ), & ! PH_BLD_COOL : SensibleCoolingLoad DMT % XM_SYS ( JJ ), & ! PM_SYS      : RatedAirMassFlowRate DMT % XCOP ( JJ ), & ! PCOP        : COP DMT % XCAP_SYS ( JJ ), & ! PCAP_SYS    : TotalCoolingCapacity OutletTemperature , & ! PT_OUT      : OutletTemperature OutletHumRatio , & ! PQ_OUT      : OutletHumRatio DMT % XHVAC_COOL ( JJ ), & ! PDX_POWER   : ElecCoolingPower DMT % XLE_WASTE ( JJ ), & ! LE_WASTE    : LatCoolingEnergyRate DMT % XT_BLD_COOL ( JJ ), & ! PT_BLD_COOL : TotalCoolingEnergyRate DMT % XH_WASTE ( JJ ) ) ! PH_WASTE    : TotalSensibleHeatOut DMT % XT_SYS ( JJ ) = OutletTemperature + XTT DMT % XQ_SYS ( JJ ) = GetSpecificHumFromHumRatio ( OutletHumRatio ) ENDIF !end type of cooling system !!! case of system without atmospheric releases. I-e releases in soil/water F_WATER_COND < 0 IF ( B % XF_WATER_COND ( JJ ) < 0 ) THEN DMT % XH_WASTE ( JJ ) = 0. DMT % XLE_WASTE ( JJ ) = 0. ENDIF !!!! ! !         From EP Engineering Reference (p. 647) DMT % XFAN_POWER ( JJ ) = DMT % XM_SYS ( JJ ) * ZFAN_AP ( JJ ) * ZFAN_EFF ( JJ ) * ZRHOI ( JJ ) ! DMT % XH_BLD_HEAT ( JJ ) = 0.0 DMT % XLE_BLD_HEAT ( JJ ) = 0.0 DMT % XHVAC_HEAT ( JJ ) = 0.0 ! ! --------------------------------------------- ! * HEATING system : Performance and Waste heat ! --------------------------------------------- ! ELSE IF ( DMT % XH_BLD_HEAT ( JJ ) > 0.0 ) THEN ! ! *specific computation for real heating system IF ( BOP % CHEAT_COIL . EQ . 'FINCAP' ) THEN IF ( DMT % XH_BLD_HEAT ( JJ ) > B % XCAP_SYS_HEAT ( JJ )) DMT % XH_BLD_HEAT ( JJ ) = B % XCAP_SYS_HEAT ( JJ ) END IF ! DMT % XT_SYS ( JJ ) = ZT_MIX ( JJ ) + DMT % XH_BLD_HEAT ( JJ ) / DMT % XM_SYS ( JJ ) / XCPD DMT % XQ_SYS ( JJ ) = ZQ_MIX ( JJ ) ! DMT % XHVAC_HEAT ( JJ ) = DMT % XH_BLD_HEAT ( JJ ) / B % XEFF_HEAT ( JJ ) DMT % XH_WASTE ( JJ ) = DMT % XHVAC_HEAT ( JJ ) - DMT % XH_BLD_HEAT ( JJ ) DMT % XLE_WASTE ( JJ ) = 0.0 DMT % XH_BLD_COOL ( JJ ) = 0.0 DMT % XLE_BLD_COOL ( JJ ) = 0.0 DMT % XT_BLD_COOL ( JJ ) = 0.0 DMT % XHVAC_COOL ( JJ ) = 0.0 !       From EP Engineering Reference (p. 647) DMT % XFAN_POWER ( JJ ) = DMT % XM_SYS ( JJ ) * ZFAN_AP ( JJ ) * ( ZFAN_EFF ( JJ ) * ZRHOI ( JJ )) ! ! ------------------------------ ! * NEITHEIR COOLING NOR HEATING ! ------------------------------ ! ELSE ! DMT % XH_BLD_COOL ( JJ ) = 0.0 DMT % XH_BLD_HEAT ( JJ ) = 0.0 DMT % XLE_BLD_COOL ( JJ ) = 0.0 DMT % XLE_BLD_HEAT ( JJ ) = 0.0 ! DMT % XT_BLD_COOL ( JJ ) = 0.0 DMT % XHVAC_COOL ( JJ ) = 0.0 DMT % XT_SYS ( JJ ) = ZT_MIX ( JJ ) DMT % XQ_SYS ( JJ ) = ZQ_MIX ( JJ ) DMT % XH_WASTE ( JJ ) = 0.0 DMT % XLE_WASTE ( JJ ) = 0.0 DMT % XFAN_POWER ( JJ ) = 0.0 DMT % XHVAC_HEAT ( JJ ) = 0.0 ! END IF !end for heating/cooling sytem ! END IF ! !--------------------------------------------------------------------------------- ! ENERGY DEMAND COMPUTED !################################################################################ ENDDO ! !--------------------------------------------------- ! EVOLUTION OF THE INTERNAL TEMPERATURE AND HUMIDITY !################################################### ! ZTI_BLD (:) = ( ZTI_BLD (:) + PTSTEP / T % XBLD_HEIGHT (:) * & (( ZINF (:) + ZNAT_VENT (:)) * PT_CAN (:) + DMT % XM_SYS (:) / ZRHOI (:) * ( DMT % XT_SYS (:) ) )) & / ( 1. + PTSTEP / T % XBLD_HEIGHT (:) * ( ZINF (:) + ZNAT_VENT (:) + DMT % XM_SYS (:) / ZRHOI (:)) ) ZQI_BLD (:) = ( B % XQI_BLD (:) + PTSTEP / T % XBLD_HEIGHT (:) * & ( ZQIN (:) * B % XQIN_FLAT (:) / ( ZRHOI (:) * XLVTT ) + ( ZINF (:) + ZNAT_VENT (:)) * ( PQ_CAN (:)) & + DMT % XM_SYS (:) / ZRHOI (:) * ( DMT % XQ_SYS (:) ) ))& / ( 1. + PTSTEP / T % XBLD_HEIGHT (:) * ( ZINF (:) + ZNAT_VENT (:) + DMT % XM_SYS (:) / ZRHOI (:)) ) ! ! Update variables B % XTI_BLD (:) = ZTI_BLD (:) B % XQI_BLD (:) = ZQI_BLD (:) ! ! Waste heat due to infiltration/ventilation ZWASTE (:) = ( ZINF (:) + ZV_VENT (:) + ZNAT_VENT (:)) * ZRHOI (:) DMT % XH_WASTE (:) = DMT % XH_WASTE (:) + ZWASTE (:) * XCPD * ( B % XTI_BLD (:) - PT_CAN (:)) DMT % XLE_WASTE (:) = DMT % XLE_WASTE (:) + ZWASTE (:) * XLVTT * ( B % XQI_BLD (:) - PQ_CAN (:)) ! ! IF ( LHOOK ) CALL DR_HOOK ( 'BEM' , 1 , ZHOOK_HANDLE ) ! CONTAINS ! SUBROUTINE GET_NAT_VENT ( PTI_BLD , PPT_CAN , PPU_CAN , PGR , PF_AUX , PPBLD_HEIGHT , PNAT_VENT ) ! IMPLICIT NONE ! REAL , INTENT ( IN ) :: PTI_BLD REAL , INTENT ( IN ) :: PPT_CAN REAL , INTENT ( IN ) :: PPU_CAN REAL , INTENT ( IN ) :: PGR REAL , INTENT ( IN ) :: PF_AUX REAL , INTENT ( IN ) :: PPBLD_HEIGHT REAL , INTENT ( OUT ) :: PNAT_VENT REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'BEM:GET_NAT_VENT' , 0 , ZHOOK_HANDLE ) ! PNAT_VENT = XG * ( PTI_BLD - PPT_CAN ) IF ( PNAT_VENT . LT . 0. ) THEN ! exceptional case with MANU ventilation system PNAT_VENT = PPBLD_HEIGHT / 360 0. !minimum value ELSE PNAT_VENT = 1. / 3. * ( PNAT_VENT / PPT_CAN ) ** ( 1. / 2. ) & * ( 1.5 + PTI_BLD / PNAT_VENT * 1. / 2. * PPU_CAN ** 2 * 0.1 ) ** ( 3. / 2. ) & * PGR * PF_AUX / 1.5 / 2. PNAT_VENT = MIN ( PNAT_VENT , 5.0 * PPBLD_HEIGHT / 360 0. ) ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( 'BEM:GET_NAT_VENT' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE GET_NAT_VENT ! END SUBROUTINE BEM","tags":"","loc":"sourcefile/bem.f90.html"},{"title":"modd_ch_watfluxn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_CH_WATFLUX_n Source Code modd_ch_watfluxn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ##################### MODULE MODD_CH_WATFLUX_n !     ###################### ! !! !!    PURPOSE !!    ------- ! ! ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! ! !!    AUTHOR !!    ------ !!  P. Tulet   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!  16/07/03 (P. Tulet)  restructured for externalization !------------------------------------------------------------------------------ ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_SV_n , ONLY : SV_t , SV_INIT ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE CH_WATFLUX_t ! CHARACTER ( LEN = 6 ) :: CCH_DRY_DEP ! deposition scheme REAL , DIMENSION (:,:), POINTER :: XDEP ! final dry deposition ! velocity  for lakes TYPE ( SV_t ) :: SVW CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CCH_NAMES ! NAME OF CHEMICAL SPECIES ! (FOR DIAG ONLY) CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CDSTNAMES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CSLTNAMES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CAER_NAMES ! END TYPE CH_WATFLUX_t ! CONTAINS ! SUBROUTINE CH_WATFLUX_INIT ( YCH_WATFLUX ) TYPE ( CH_WATFLUX_t ), INTENT ( INOUT ) :: YCH_WATFLUX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_WATFLUX_N:CH_WATFLUX_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YCH_WATFLUX % XDEP ) NULLIFY ( YCH_WATFLUX % CCH_NAMES ) NULLIFY ( YCH_WATFLUX % CAER_NAMES ) NULLIFY ( YCH_WATFLUX % CDSTNAMES ) NULLIFY ( YCH_WATFLUX % CSLTNAMES ) YCH_WATFLUX % CCH_DRY_DEP = ' ' CALL SV_INIT ( YCH_WATFLUX % SVW ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_WATFLUX_N:CH_WATFLUX_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_WATFLUX_INIT END MODULE MODD_CH_WATFLUX_n","tags":"","loc":"sourcefile/modd_ch_watfluxn.f90.html"},{"title":"spll_modi_ini_csts.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_INI_CSTS Source Code spll_modi_ini_csts.f90 Source Code !auto_modi:spll_ini_csts.D MODULE MODI_INI_CSTS INTERFACE SUBROUTINE INI_CSTS END SUBROUTINE INI_CSTS END INTERFACE END MODULE MODI_INI_CSTS","tags":"","loc":"sourcefile/spll_modi_ini_csts.f90.html"},{"title":"spll_modi_roof_layer_e_budget.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_ROOF_LAYER_E_BUDGET Source Code spll_modi_roof_layer_e_budget.f90 Source Code !auto_modi:spll_roof_layer_e_budget.D MODULE MODI_ROOF_LAYER_E_BUDGET INTERFACE SUBROUTINE ROOF_LAYER_E_BUDGET ( TOP , T , B , PQSAT_ROOF , PAC_BLD , PTSTEP , PDN_ROOF , & PRHOA , PAC_ROOF , PAC_ROOF_WAT , PLW_RAD , PPS , & PDELT_ROOF , PTA , PQA , PEXNA , PEXNS , PABS_SW_ROOF , & PGSNOW_ROOF , PFLX_BLD_ROOF , PDQS_ROOF , PABS_LW_ROOF ,& PHFREE_ROOF , PLEFREE_ROOF , PIMB_ROOF , & PG_GREENROOF_ROOF , PRADHT_IN , PTS_FLOOR , PTI_WALL , & PRAD_ROOF_WALL , PRAD_ROOF_WIN , PRAD_ROOF_FLOOR , & PRAD_ROOF_MASS , PCONV_ROOF_BLD , PRR , PLOAD_IN_ROOF ) USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t IMPLICIT NONE TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B REAL , DIMENSION (:), INTENT ( INOUT ) :: PQSAT_ROOF ! q_sat(Ts) REAL , DIMENSION (:), INTENT ( IN ) :: PAC_BLD ! aerodynamical resistance REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PDN_ROOF ! roof snow fraction REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density REAL , DIMENSION (:), INTENT ( IN ) :: PAC_ROOF ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( IN ) :: PAC_ROOF_WAT ! aerodynamical conductance (for water) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_ROOF ! fraction of water REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! air temperature at roof level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! air specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PEXNA ! exner function REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_ROOF ! absorbed solar radiation REAL , DIMENSION (:), INTENT ( IN ) :: PGSNOW_ROOF ! roof snow conduction REAL , DIMENSION (:), INTENT ( IN ) :: PG_GREENROOF_ROOF ! heat conduction flux REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_ROOF ! flux from bld to roof REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_ROOF ! heat storage inside the roofs REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_ROOF ! absorbed infra-red rad. REAL , DIMENSION (:), INTENT ( OUT ) :: PHFREE_ROOF ! sensible heat flux of the REAL , DIMENSION (:), INTENT ( OUT ) :: PLEFREE_ROOF ! latent heat flux of the REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_ROOF ! residual energy imbalance REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient REAL , DIMENSION (:), INTENT ( IN ) :: PTS_FLOOR ! surf. floor temp. (contact with bld air) REAL , DIMENSION (:), INTENT ( IN ) :: PTI_WALL ! indoor wall temp. REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_ROOF_WALL ! rad. fluxes from roof to wall [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_ROOF_WIN ! rad. fluxes from roof to win [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_ROOF_FLOOR ! rad. fluxes from roof to floor [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_ROOF_MASS ! rad. fluxes from roof to mass [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_ROOF_BLD ! conv. fluxes from roof to bld [W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PRR ! rain rate [kg m-2 s-1] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_IN_ROOF ! solar + int heat gain on roof W/m2 [roof] END SUBROUTINE ROOF_LAYER_E_BUDGET END INTERFACE END MODULE MODI_ROOF_LAYER_E_BUDGET","tags":"","loc":"sourcefile/spll_modi_roof_layer_e_budget.f90.html"},{"title":"spll_modi_flxsurf3bx.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_FLXSURF3BX Source Code spll_modi_flxsurf3bx.f90 Source Code !auto_modi:spll_flxsurf3bx.D MODULE MODI_FLXSURF3BX INTERFACE SUBROUTINE FLXSURF3BX ( CMU , CTU , RIB , FTEMP , FVAP , ILMO , & UE , FCOR , TA , QA , ZU , ZT , VA , & TG , QG , H , Z0 , Z0T , & LZZ0 , LZZ0T , FM , FH , N ) IMPLICIT NONE INTEGER :: N REAL :: CMU ( N ), CTU ( N ), RIB ( N ), FCOR ( N ), ILMO ( N ) REAL :: FTEMP ( N ), FVAP ( N ), TA ( N ), QA ( N ), ZU ( N ), ZT ( N ), VA ( N ) REAL :: TG ( N ), QG ( N ), H ( N ), Z0 ( N ), UE ( N ) REAL :: Z0T ( N ), LZZ0 ( N ), LZZ0T ( N ) REAL :: fm ( N ), fh ( N ) END SUBROUTINE FLXSURF3BX END INTERFACE END MODULE MODI_FLXSURF3BX","tags":"","loc":"sourcefile/spll_modi_flxsurf3bx.f90.html"},{"title":"spll_modi_bem_morpho.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_BEM_MORPHO Source Code spll_modi_bem_morpho.f90 Source Code !auto_modi:spll_bem_morpho.D MODULE MODI_BEM_MORPHO INTERFACE SUBROUTINE BEM_MORPHO ( PBLD , PWALL_O_HOR , PBLD_HEIGHT , PWALL_O_BLD , B ) USE MODD_BEM_n , ONLY : BEM_t IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PBLD ! Urban horizontal building density REAL , DIMENSION (:), INTENT ( IN ) :: PWALL_O_HOR ! Wall to horizontal surface ratio REAL , DIMENSION (:), INTENT ( IN ) :: PBLD_HEIGHT ! Average building height [m] REAL , DIMENSION (:), INTENT ( OUT ) :: PWALL_O_BLD ! wall surface per ground building surface [m2(wall)/m2(bld)] TYPE ( BEM_t ), INTENT ( INOUT ) :: B END SUBROUTINE BEM_MORPHO END INTERFACE END MODULE MODI_BEM_MORPHO","tags":"","loc":"sourcefile/spll_modi_bem_morpho.f90.html"},{"title":"modd_diag_oceann.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DIAG_OCEAN_n Source Code modd_diag_oceann.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ###################### MODULE MODD_DIAG_OCEAN_n !     ###################### ! !!****  *MODD_DIAG_OCEAN - declaration of diagnostics for ocean !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      C. Lebeaupin Brossier   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       02/2008 ! !*       0.   DECLARATIONS !             ------------ ! ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE DIAG_OCEAN_t !------------------------------------------------------------------------------ ! LOGICAL :: LDIAG_OCEAN ! flag for ocean variables ! !* averaged variables ! REAL , POINTER , DIMENSION (:) :: XTOCMOY ! mean temperature in CMO (�C) REAL , POINTER , DIMENSION (:) :: XSOCMOY ! mean salinity in CMO (psu) REAL , POINTER , DIMENSION (:) :: XUOCMOY ! mean zonal current in CMO (m/s) REAL , POINTER , DIMENSION (:) :: XVOCMOY ! mean meridian current in CMO (m/s) REAL , POINTER , DIMENSION (:) :: XDOCMOY ! mean density in CMO (kg/m3) !------------------------------------------------------------------------------ ! END TYPE DIAG_OCEAN_t CONTAINS ! SUBROUTINE DIAG_OCEAN_INIT ( YDIAG_OCEAN ) TYPE ( DIAG_OCEAN_t ), INTENT ( INOUT ) :: YDIAG_OCEAN REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_OCEAN_N:DIAG_OCEAN_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDIAG_OCEAN % XTOCMOY ) NULLIFY ( YDIAG_OCEAN % XSOCMOY ) NULLIFY ( YDIAG_OCEAN % XUOCMOY ) NULLIFY ( YDIAG_OCEAN % XVOCMOY ) NULLIFY ( YDIAG_OCEAN % XDOCMOY ) YDIAG_OCEAN % LDIAG_OCEAN = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_OCEAN_N:DIAG_OCEAN_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_OCEAN_INIT END MODULE MODD_DIAG_OCEAN_n","tags":"","loc":"sourcefile/modd_diag_oceann.f90.html"},{"title":"albedo_from_nir_vis.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines ALBEDO_FROM_NIR_VIS Source Code albedo_from_nir_vis.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE ALBEDO_FROM_NIR_VIS ( PSW_BANDS , PALBNIR , PALBVIS , PALBUV , PDIR_ALB , PSCA_ALB ) !     ########################################################################### ! !!****  *ALBEDO_FROM_NIR_VIS* - routine to initialize albedo for !!                              any wavelength from near-infra-red, !!                              visible and UV albedo !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    02/2003 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_ISBA_PAR , ONLY : XRED_EDGE , XUV_EDGE USE MODD_SURF_PAR , ONLY : XUNDEF ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! REAL , DIMENSION (:), INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) REAL , DIMENSION (:), INTENT ( IN ) :: PALBNIR ! near infra-red albedo REAL , DIMENSION (:), INTENT ( IN ) :: PALBVIS ! visible albedo REAL , DIMENSION (:), INTENT ( IN ) :: PALBUV ! UV albedo REAL , DIMENSION (:,:), INTENT ( OUT ) :: PDIR_ALB ! direct  albedo for each wavelength REAL , DIMENSION (:,:), INTENT ( OUT ) :: PSCA_ALB ! diffuse albedo for each wavelength ! !*       0.2   Declarations of local variables !              ------------------------------- ! INTEGER :: ISWB ! number of SW spectral bands INTEGER :: JSWB ! loop counter on number of SW spectral bands REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'ALBEDO_FROM_NIR_VIS' , 0 , ZHOOK_HANDLE ) ISWB = SIZE ( PSW_BANDS ) ! PDIR_ALB (:,:) = XUNDEF PSCA_ALB (:,:) = XUNDEF ! IF ( ISWB == 1 ) THEN WHERE ( PALBNIR (:) /= XUNDEF ) PDIR_ALB (:, 1 ) = 0.5 * ( PALBNIR (:) + PALBVIS (:)) ELSE DO JSWB = 1 , ISWB IF ( PSW_BANDS ( JSWB ) > XRED_EDGE ) THEN ! XRED_EDGE=0.7 micro-m PDIR_ALB (:, JSWB ) = PALBNIR (:) ELSE IF ( PSW_BANDS ( JSWB ) < XUV_EDGE ) THEN ! XUV_EDGE=0.25 micro-m PDIR_ALB (:, JSWB ) = PALBUV (:) ELSE PDIR_ALB (:, JSWB ) = PALBVIS (:) END IF END DO END IF ! PSCA_ALB (:,:) = PDIR_ALB (:,:) IF ( LHOOK ) CALL DR_HOOK ( 'ALBEDO_FROM_NIR_VIS' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END SUBROUTINE ALBEDO_FROM_NIR_VIS","tags":"","loc":"sourcefile/albedo_from_nir_vis.f90.html"},{"title":"isba_albedo.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines ISBA_ALBEDO Source Code isba_albedo.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE ISBA_ALBEDO ( PEK , OTR_ML , OMEB , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & PFALB , PFFV , PFFG , PGLOBAL_SW , & PMEB_SCA_SW , PALBNIR_TVEG , PALBVIS_TVEG , & PALBNIR_TSOIL , PALBVIS_TSOIL ) !     ########################################################################## ! !!****  *ISBA_ALBEDO* !! !!    PURPOSE !!    ------- ! !     Calculates grid-averaged albedo and emissivity (according to snow scheme) ! !!    EXTERNAL !!    -------- !! !!    none !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    AUTHOR !!    ------ !! !!\tS. Belair           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original !!      P. Samuelsson  02/2012  MEB !! !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_ISBA_n , ONLY : ISBA_PE_t ! USE MODD_SURF_PAR , ONLY : XUNDEF ! USE MODI_ALBEDO_FROM_NIR_VIS ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! LOGICAL , INTENT ( IN ) :: OTR_ML LOGICAL , INTENT ( IN ) :: OMEB ! True = patch with multi-energy balance !                                                 ! False = patch with classical ISBA ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PDIR_SW ! direct incoming solar radiation REAL , DIMENSION (:,:), INTENT ( IN ) :: PSCA_SW ! diffus incoming solar radiation REAL , DIMENSION (:) , INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) INTEGER , INTENT ( IN ) :: KSW ! number of short-wave spectral bands ! TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK ! REAL , DIMENSION (:) , INTENT ( IN ) :: PFALB ! Floodplain albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PFFV ! Floodplain fraction over vegetation REAL , DIMENSION (:) , INTENT ( IN ) :: PFFG ! Floodplain fraction over the ground ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PGLOBAL_SW ! global incoming SW rad. REAL , DIMENSION (:) , INTENT ( OUT ) :: PMEB_SCA_SW ! diffuse incoming SW rad. REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBNIR_TVEG ! nearIR  veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBVIS_TVEG ! visible veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBNIR_TSOIL ! nearIR  soil tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBVIS_TSOIL ! visible soil tot albedo ! !------------------------------------------------------------------------------- ! !*      0.     Local variables !              --------------- ! INTEGER :: JLAYER INTEGER :: JSWB REAL , DIMENSION ( SIZE ( PEK % XALBNIR )) :: ZSW_UP REAL , DIMENSION ( SIZE ( PEK % XALBNIR ), KSW ) :: ZDIR_ALB_WITHOUT_SNOW REAL , DIMENSION ( SIZE ( PEK % XALBNIR ), KSW ) :: ZSCA_ALB_WITHOUT_SNOW REAL , DIMENSION ( SIZE ( PEK % XALBNIR ), KSW ) :: ZDIR_ALB_VEG_WITHOUT_SNOW REAL , DIMENSION ( SIZE ( PEK % XALBNIR ), KSW ) :: ZSCA_ALB_VEG_WITHOUT_SNOW REAL , DIMENSION ( SIZE ( PEK % XALBNIR ), KSW ) :: ZDIR_ALB_SOIL_WITHOUT_SNOW REAL , DIMENSION ( SIZE ( PEK % XALBNIR ), KSW ) :: ZSCA_ALB_SOIL_WITHOUT_SNOW REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !------------------------------------------------------------------------------- ! !*      2.     Compute snow-free albedo !              ------------------------ ! !* Snow-free surface albedo for each wavelength ! IF ( LHOOK ) CALL DR_HOOK ( 'ISBA_ALBEDO' , 0 , ZHOOK_HANDLE ) ! IF ( OTR_ML ) THEN IF ( OMEB ) THEN PALBNIR_TVEG (:) = PEK % XALBNIR_VEG (:) PALBNIR_TSOIL (:) = ( 1. - PFFG (:)) * PEK % XALBNIR_SOIL (:) + PFFG (:) * PFALB (:) PALBVIS_TVEG (:) = PEK % XALBVIS_VEG (:) PALBVIS_TSOIL (:) = ( 1. - PFFG (:)) * PEK % XALBVIS_SOIL (:) + PFFG (:) * PFALB (:) ELSE PALBNIR_TVEG (:) = PEK % XALBNIR_VEG (:) PALBNIR_TSOIL (:) = PEK % XALBNIR_SOIL (:) PALBVIS_TVEG (:) = PEK % XALBVIS_VEG (:) PALBVIS_TSOIL (:) = PEK % XALBVIS_SOIL (:) ENDIF ELSE PALBNIR_TVEG (:) = XUNDEF PALBNIR_TSOIL (:) = XUNDEF PALBVIS_TVEG (:) = XUNDEF PALBVIS_TSOIL (:) = XUNDEF ENDIF ! CALL ALBEDO_FROM_NIR_VIS ( PSW_BANDS , PEK % XALBNIR (:), PEK % XALBVIS (:), PEK % XALBUV (:), & ZDIR_ALB_WITHOUT_SNOW , ZSCA_ALB_WITHOUT_SNOW ) ! !* total shortwave incoming radiation ! PGLOBAL_SW (:) = 0. PMEB_SCA_SW (:) = 0. DO JSWB = 1 , KSW PGLOBAL_SW (:) = PGLOBAL_SW (:) + ( PDIR_SW (:, JSWB ) + PSCA_SW (:, JSWB )) PMEB_SCA_SW (:) = PMEB_SCA_SW (:) + ( PSCA_SW (:, JSWB )) END DO ! !* snow-free global albedo (needed by ISBA) ! ZSW_UP (:) = 0. DO JSWB = 1 , KSW ZSW_UP (:) = ZSW_UP (:) & + ZDIR_ALB_WITHOUT_SNOW (:, JSWB ) * PDIR_SW (:, JSWB ) & + ZSCA_ALB_WITHOUT_SNOW (:, JSWB ) * PSCA_SW (:, JSWB ) END DO PEK % XSNOWFREE_ALB (:) = XUNDEF WHERE ( PGLOBAL_SW (:) > 0. ) PEK % XSNOWFREE_ALB (:) = ZSW_UP (:) / PGLOBAL_SW (:) ELSEWHERE PEK % XSNOWFREE_ALB (:) = ZDIR_ALB_WITHOUT_SNOW (:, 1 ) END WHERE ! IF ( PEK % TSNOW % SCHEME == 'EBA' ) THEN CALL ALBEDO_FROM_NIR_VIS ( PSW_BANDS , & PEK % XALBNIR_VEG (:), PEK % XALBVIS_VEG (:), PEK % XALBUV_VEG (:), & ZDIR_ALB_VEG_WITHOUT_SNOW , ZSCA_ALB_VEG_WITHOUT_SNOW ) ZSW_UP (:) = 0. DO JSWB = 1 , KSW ZSW_UP (:) = ZSW_UP (:) & + ZDIR_ALB_VEG_WITHOUT_SNOW (:, JSWB ) * PDIR_SW (:, JSWB ) & + ZSCA_ALB_VEG_WITHOUT_SNOW (:, JSWB ) * PSCA_SW (:, JSWB ) END DO PEK % XSNOWFREE_ALB_VEG (:) = XUNDEF WHERE ( PGLOBAL_SW (:) > 0. ) PEK % XSNOWFREE_ALB_VEG (:) = ZSW_UP (:) / PGLOBAL_SW (:) ! CALL ALBEDO_FROM_NIR_VIS ( PSW_BANDS , & PEK % XALBNIR_SOIL (:), PEK % XALBVIS_SOIL (:), PEK % XALBUV_SOIL (:), & ZDIR_ALB_SOIL_WITHOUT_SNOW , ZSCA_ALB_SOIL_WITHOUT_SNOW ) ZSW_UP (:) = 0. DO JSWB = 1 , KSW ZSW_UP (:) = ZSW_UP (:) & + ZDIR_ALB_SOIL_WITHOUT_SNOW (:, JSWB ) * PDIR_SW (:, JSWB ) & + ZSCA_ALB_SOIL_WITHOUT_SNOW (:, JSWB ) * PSCA_SW (:, JSWB ) END DO PEK % XSNOWFREE_ALB_SOIL (:) = XUNDEF WHERE ( PGLOBAL_SW (:) > 0. ) PEK % XSNOWFREE_ALB_SOIL (:) = ZSW_UP (:) / PGLOBAL_SW (:) ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( 'ISBA_ALBEDO' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE ISBA_ALBEDO","tags":"","loc":"sourcefile/isba_albedo.f90.html"},{"title":"modd_type_date_surf.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_TYPE_DATE_SURF Source Code modd_type_date_surf.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################# MODULE MODD_TYPE_DATE_SURF !     ################# ! !!****  *MODD_TYPE_DATE* - declaration of temporal types !! !!    PURPOSE !!    ------- !       The purpose of this declarative module is to define !      the time types. ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      NONE !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH (module MODD_TYPE_DATE) !! !!    AUTHOR !!    ------ !!      P. Jabouille   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    11/08/97 !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! ! IMPLICIT NONE ! TYPE DATE INTEGER :: YEAR = 0 INTEGER :: MONTH = 0 INTEGER :: DAY = 0 END TYPE DATE ! TYPE DATE_TIME TYPE ( DATE ) :: TDATE REAL :: TIME = 0. END TYPE DATE_TIME ! END MODULE MODD_TYPE_DATE_SURF","tags":"","loc":"sourcefile/modd_type_date_surf.f90.html"},{"title":"surface_aero_cond.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines SURFACE_AERO_COND Source Code surface_aero_cond.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !   ###################################################################### SUBROUTINE SURFACE_AERO_COND ( PRI , PZREF , PUREF , PVMOD , PZ0 ,& PZ0H , PAC , PRA , PCH ) !   ###################################################################### ! !!****  *SURFACE_AERO_COND* !! !!    PURPOSE !!    ------- ! !     Computes the drag coefficients for heat and momentum near the ground ! ! !!**  METHOD !!    ------ ! ! ! !    1 and 2 : computation of relative humidity near the ground ! !    3 : richardson number ! !    4 : the aerodynamical resistance for heat transfers is deduced ! !    5 : the drag coefficient for momentum ZCD is computed ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/01/98 !!                  02/04/01 (P Jabouille) limitation of Z0 with 0.5 PUREF !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_CSTS , ONLY : XKARMAN USE MODI_WIND_THRESHOLD ! USE MODE_THERMOS ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PRI ! Richardson number REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first ! atmospheric level REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the wind ! NOTE this is different from ZZREF ! ONLY in stand-alone/forced mode, ! NOT when coupled to a model (MesoNH) REAL , DIMENSION (:), INTENT ( IN ) :: PZ0 ! roughness length for momentum REAL , DIMENSION (:), INTENT ( IN ) :: PZ0H ! roughness length for heat ! REAL , DIMENSION (:), INTENT ( OUT ) :: PAC ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PRA ! aerodynamical resistance REAL , DIMENSION (:), INTENT ( OUT ) :: PCH ! drag coefficient for heat ! !*      0.2    declarations of local variables ! ! REAL , DIMENSION ( SIZE ( PRI )) :: ZZ0 , ZZ0H , ZMU , & ZFH , ZCHSTAR , ZPH , ZCDN , & ZSTA , ZDI , ZWORK1 , ZWORK2 , ZWORK3 REAL , DIMENSION ( SIZE ( PRI )) :: ZVMOD ! INTEGER :: JJ REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! Functions: REAL :: X , CHSTAR , PH CHSTAR ( X ) = 3.2165 + 4.3431 * X + 0.5360 * X * X - 0.0781 * X * X * X PH ( X ) = 0.5802 - 0.1571 * X + 0.0327 * X * X - 0.0026 * X * X * X ! !------------------------------------------------------------------------------- ! !*       4.     Surface aerodynamic resistance for heat transfers !               ------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'SURFACE_AERO_COND' , 0 , ZHOOK_HANDLE ) ZVMOD (:) = WIND_THRESHOLD ( PVMOD (:), PUREF (:)) ! DO JJ = 1 , SIZE ( PRI ) ZZ0 ( JJ ) = MIN ( PZ0 ( JJ ), PUREF ( JJ ) * 0.5 ) ZZ0H ( JJ ) = MIN ( ZZ0 ( JJ ), PZ0H ( JJ )) ZZ0H ( JJ ) = MIN ( ZZ0H ( JJ ), PZREF ( JJ ) * 0.5 ) ! ZWORK1 ( JJ ) = LOG ( PUREF ( JJ ) / ZZ0 ( JJ ) ) ZWORK2 ( JJ ) = PZREF ( JJ ) / ZZ0H ( JJ ) ZWORK3 ( JJ ) = ZVMOD ( JJ ) * ZVMOD ( JJ ) ZMU ( JJ ) = MAX ( LOG ( ZZ0 ( JJ ) / ZZ0H ( JJ ) ), 0.0 ) ZFH ( JJ ) = ZWORK1 ( JJ ) / LOG ( ZWORK2 ( JJ )) ! ZCHSTAR ( JJ ) = CHSTAR ( ZMU ( JJ )) ZPH ( JJ ) = PH ( ZMU ( JJ )) ! ! ZCDN ( JJ ) = ( XKARMAN / ZWORK1 ( JJ )) ** 2. ! ! ZSTA ( JJ ) = PRI ( JJ ) * ZWORK3 ( JJ ) ! ! IF ( PRI ( JJ ) < 0.0 ) THEN ZDI ( JJ ) = 1. / ( ZVMOD ( JJ ) & + ZCHSTAR ( JJ ) * ZCDN ( JJ ) * 1 5. & * ZWORK2 ( JJ ) ** ZPH ( JJ ) & * ZFH ( JJ ) * SQRT ( - ZSTA ( JJ )) & ) PAC ( JJ ) = ZCDN ( JJ ) * ( ZVMOD ( JJ ) - 1 5. * ZSTA ( JJ ) * ZDI ( JJ )) * ZFH ( JJ ) ELSE ZDI ( JJ ) = SQRT ( ZWORK3 ( JJ ) + 5. * ZSTA ( JJ ) ) PAC ( JJ ) = ZCDN ( JJ ) * ZVMOD ( JJ ) / ( 1. + 1 5. * ZSTA ( JJ ) * ZDI ( JJ ) & / ZWORK3 ( JJ ) / ZVMOD ( JJ ) ) * ZFH ( JJ ) ENDIF ! PRA ( JJ ) = 1. / PAC ( JJ ) ! PCH ( JJ ) = 1. / ( PRA ( JJ ) * ZVMOD ( JJ )) ! ENDDO IF ( LHOOK ) CALL DR_HOOK ( 'SURFACE_AERO_COND' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE SURFACE_AERO_COND","tags":"","loc":"sourcefile/surface_aero_cond.f90.html"},{"title":"window_e_budget.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines WINDOW_E_BUDGET Source Code window_e_budget.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. SUBROUTINE WINDOW_E_BUDGET ( B , PEMIS_WIN , PLW_W_TO_WIN , PLW_R_TO_WIN , PLW_G_TO_WIN , & PLW_NR_TO_WIN , PLW_S_TO_WIN , PRAD_RF_WIN , PRAD_WL_WIN , & PABS_SW_WIN , PLW_RAD , PAC_WL , PRADHT_IN , PTS_FL , PRHOA , & PDN_RD , PT_CANYON , PTS_WL , PTS_RD , PTSN_RD , PTS_GD , & PRAD_WIN_FL , PRAD_WIN_MA , PCONV_WIN_BLD , PEMIT_LW_WIN , & PABS_LW_WIN , PLOAD_IN_WIN ) !################################################################################################################################### ! !!****  *WINDOW_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of window temperature ! ! !!**  METHOD !     ------ ! ! window is supposed double pane with no thermal capacity ! a steady state energy balance is applied to both layers that exchanges U_WIN(T1 - T2) ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      B. Bueno           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    04/2011 !!      G. Pigeon   10/11/2011 exteranlized window balance from wall_layer_e_budget to window_e_budget and use fluxes from layers for !                              which the balance has been computed before (roof and wall) and returns the fluxes to the compartments !                              computed afterwards (floor, mass, bld) !!      G. Pigeon      09/2012 new indoor conv. coef !!      G. Pigeon      10/2012 separate abs from outdoor on both side of window !!                            + add loads for indoor face of the window !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_BEM_n , ONLY : BEM_t ! USE MODD_CSTS , ONLY : XCPD , XSTEFAN USE MODE_CONV_DOE USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , DIMENSION (:), INTENT ( IN ) :: PEMIS_WIN ! window emissivity REAL , DIMENSION (:), INTENT ( IN ) :: PLW_W_TO_WIN ! Radiative heat trasfer coeff window-wall outdoor ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WIN ! Radiative heat trasfer coeff window-road ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WIN ! Radiative heat trasfer coeff window-garden REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WIN ! Radiative heat trasfer coeff window-snow REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WIN ! Radiative heat trasfer coeff window-sky ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_WIN ! rad. fluxes from roof to win [W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_WL_WIN ! rad. fluxes from wall to win [W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_WIN ! window absorbed shortwave radiation [W m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WL ! aerodynamical conductance between wall and canyon REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PTS_FL ! floor layers temperatures [K] REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! rho REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered fraction on roads REAL , DIMENSION (:), INTENT ( IN ) :: PT_CANYON ! air canyon temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WL ! wall outdoor surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_RD ! road surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTSN_RD ! road snow temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GD ! green area surface temperature REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WIN_FL ! rad. fluxes from window to floor [W m-2(window)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WIN_MA ! rad. fluxes from window to mass [W m-2(window)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_WIN_BLD ! conv. fluxes from window to bld [W m-2(window)] REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_WIN ! Longwave radiation emitted by the window [W m-2(window)] REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_WIN ! Longwave radiation absorbed by the window [W m-2(window)] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_IN_WIN ! solar + internal heat gain ! !*      0.2    declarations of local variables ! REAL , DIMENSION ( SIZE ( PT_CANYON )) :: ZT_SKY ! sky temperature [K] REAL , DIMENSION ( SIZE ( PT_CANYON )) :: ZA12 ! REAL , DIMENSION ( SIZE ( PT_CANYON )) :: ZB2 ! auxiliar variables for window temperature REAL , DIMENSION ( SIZE ( PT_CANYON )) :: ZB1 ! calculations REAL , DIMENSION ( SIZE ( PT_CANYON )) :: ZA21 ! REAL , DIMENSION ( SIZE ( PT_CANYON )) :: ZCHTC_IN_WIN ! indoor convective heat transfer coef. window [W m-2 K-1] INTEGER :: JJ !*      Preliminaries !       ------------- ZCHTC_IN_WIN = CHTC_VERT_DOE ( B % XT_WIN2 , B % XTI_BLD ) DO JJ = 1 , SIZE ( ZCHTC_IN_WIN ) ZCHTC_IN_WIN ( JJ ) = MAX ( 1. , ZCHTC_IN_WIN ( JJ )) ENDDO !*      1.    Sky temperature !             --------------- ZT_SKY (:) = ( PLW_RAD (:) / XSTEFAN ) ** 0.25 ! ZA12 (:) = ZCHTC_IN_WIN (:) & + PRADHT_IN (:) * B % XF_WIN_MASS (:) & + PRADHT_IN (:) * B % XF_WIN_FLOOR (:) & + B % XUGG_WIN (:) ! ZB1 (:) = ZCHTC_IN_WIN (:) * B % XTI_BLD (:) & + PRADHT_IN (:) * B % XF_WIN_MASS (:) * B % XT_MASS (:, 1 ) & + B % XF_WIN_WALL (:) * PRAD_WL_WIN (:) & + B % XF_WIN_FLOOR (:) * PRAD_RF_WIN (:) & + PRADHT_IN (:) * B % XF_WIN_FLOOR (:) * PTS_FL (:) & + PLOAD_IN_WIN (:) + PABS_SW_WIN (:) / 2. ! ZA21 (:) = - PAC_WL (:) * PRHOA (:) * XCPD & - PLW_S_TO_WIN (:) & - PLW_W_TO_WIN (:) & - PLW_R_TO_WIN (:) * ( 1. - PDN_RD (:))& - PLW_G_TO_WIN (:) & - PLW_NR_TO_WIN (:) * PDN_RD (:) & - B % XUGG_WIN (:) ! ZB2 (:) = - PAC_WL (:) * PRHOA (:) * XCPD * PT_CANYON (:) & - PLW_S_TO_WIN (:) * ZT_SKY (:) & - PLW_W_TO_WIN (:) * PTS_WL (:) & - PLW_R_TO_WIN (:) * ( 1. - PDN_RD (:)) * PTS_RD (:) & - PLW_NR_TO_WIN (:) * PDN_RD (:) * PTSN_RD (:) & - PABS_SW_WIN (:) / 2. ! IF ( SIZE ( PTS_GD ) > 0 ) THEN ZB2 (:) = ZB2 (:) - PLW_G_TO_WIN (:) * PTS_GD (:) ENDIF ! ! compute outdoor temperature B % XT_WIN1 (:) = ( ZB2 (:) - ZB1 (:) * B % XUGG_WIN (:) / ZA12 (:) ) / & ( ZA21 (:) + B % XUGG_WIN (:) ** 2 / ZA12 (:) ) ! ! compute indoor temperature B % XT_WIN2 (:) = ( ZB1 (:) + B % XUGG_WIN (:) * B % XT_WIN1 (:) ) / ZA12 (:) ! ! outdoor infrared radiation absorded by the window PABS_LW_WIN (:) = PLW_S_TO_WIN (:) * ( ZT_SKY (:) - B % XT_WIN1 (:)) + & ( 1. - PDN_RD (:)) * PLW_R_TO_WIN (:) * ( PTS_RD (:) - B % XT_WIN1 (:)) + & PLW_W_TO_WIN (:) * ( PTS_WL (:) - B % XT_WIN1 (:)) + & PDN_RD (:) * PLW_NR_TO_WIN (:) * ( PTSN_RD (:) - B % XT_WIN1 (:)) ! IF ( SIZE ( PTS_GD ) > 0 ) THEN PABS_LW_WIN (:) = PABS_LW_WIN (:) + PLW_G_TO_WIN (:) * ( PTS_GD (:) - B % XT_WIN1 (:)) ENDIF ! ! outdoor infrared radiation emited by the window PEMIT_LW_WIN (:) = XSTEFAN * B % XT_WIN1 (:) ** 4 + ( 1 - PEMIS_WIN (:)) / PEMIS_WIN (:) * PABS_LW_WIN (:) ! PRAD_WIN_FL (:) = PRADHT_IN (:) * ( B % XT_WIN2 (:) - PTS_FL (:)) PRAD_WIN_MA (:) = PRADHT_IN (:) * ( B % XT_WIN2 (:) - B % XT_MASS (:, 1 )) PCONV_WIN_BLD (:) = ZCHTC_IN_WIN (:) * ( B % XT_WIN2 (:) - B % XTI_BLD (:)) ! END SUBROUTINE WINDOW_E_BUDGET","tags":"","loc":"sourcefile/window_e_budget.f90.html"},{"title":"modd_diag_misc_teb_optionsn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DIAG_MISC_TEB_OPTIONS_n Source Code modd_diag_misc_teb_optionsn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ############################ MODULE MODD_DIAG_MISC_TEB_OPTIONS_n !     ############################ ! !!****  *MODD_DIAG_MISC_TEB - declaration of packed surface parameters for TEB scheme !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      P. Le Moigne   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       07/10/04 !!      C de Munck        02/13  adding runoff contributions for teb garden !!      V. Masson      06/2013 splits module in two ! ! !*       0.   DECLARATIONS !             ------------ ! ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE DIAG_MISC_TEB_OPTIONS_t !------------------------------------------------------------------------------ ! LOGICAL :: LSURF_MISC_BUDGET ! flag for miscellaneous terms of teb scheme LOGICAL :: LSURF_EVAP_BUDGET ! flag for all terms of evaporation LOGICAL :: LSURF_DIAG_ALBEDO ! flag to write out diagnostic albedo ! END TYPE DIAG_MISC_TEB_OPTIONS_t ! CONTAINS ! SUBROUTINE DIAG_MISC_TEB_OPTIONS_INIT ( YDIAG_MISC_TEB_OPTIONS ) TYPE ( DIAG_MISC_TEB_OPTIONS_t ), INTENT ( INOUT ) :: YDIAG_MISC_TEB_OPTIONS REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_TEB_N:DIAG_MISC_TEB_OPTIONS_INIT\" , 0 , ZHOOK_HANDLE ) YDIAG_MISC_TEB_OPTIONS % LSURF_MISC_BUDGET = . FALSE . YDIAG_MISC_TEB_OPTIONS % LSURF_EVAP_BUDGET = . FALSE . YDIAG_MISC_TEB_OPTIONS % LSURF_DIAG_ALBEDO = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_TEB_N:DIAG_MISC_TEB_OPTIONS_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_MISC_TEB_OPTIONS_INIT END MODULE MODD_DIAG_MISC_TEB_OPTIONS_n","tags":"","loc":"sourcefile/modd_diag_misc_teb_optionsn.f90.html"},{"title":"modd_surf_atm.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_SURF_ATM Source Code modd_surf_atm.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     #################### MODULE MODD_SURF_ATM !     #################### ! !!****  *MODD_SURF_ATM - declaration of surface ATM !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      P. Le Moigne *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       10/2007 ! !*       0.   DECLARATIONS !             ------------ ! !!      B.Decharme     04/2009 Add flag used to Read/Write precipitation forcing from/into the restart file for ARPEGE/ALADIN run !!      B.Decharme     08/2009 Add flag used to know if you use SURFEX in the Earth System Model !!      B.Decharme     09/2012 New wind implicitation key option !!      B.Decharme     04/2013 Flag used to Read/Write some field from/into the restart file for coupling with ARPEGE/ALADIN !!                             Delete LRW_PRECIP, LSAVE_PRECIP !!                             Vertical shift for LW and Precip !!      R. Séférian    03/2014 Adding key for decouple CO2 for photosynthesis (XCO2UNCPL) ! IMPLICIT NONE ! !----------------------------------------------------------------------------------------------------- REAL :: XCISMIN ! minimum wind shear REAL :: XVMODMIN ! minimum wind speed LOGICAL :: LALDTHRES ! activate aladin threshold for wind ! LOGICAL :: LDRAG_COEF_ARP ! activate aladin formulation for Cd and Ch LOGICAL :: LALDZ0H ! LOGICAL :: LNOSOF ! No parameterization of Subgrid Orography effects on atmospheric Forcing LOGICAL :: LVERTSHIFT ! vertical shift from atmospheric orography to surface orography LOGICAL :: LVSHIFT_LW ! vertical shift for LW LOGICAL :: LVSHIFT_PRCP ! vertical shift for Precip ! LOGICAL :: LVZIUSTAR0_ARP ! activate aladin formulation for zoh over sea LOGICAL :: LRRGUST_ARP ! activate aladin formulation for CD CH, CDN, correction due to moist gustiness LOGICAL :: LCPL_ARP ! activate aladin formulation for Cp and L LOGICAL :: LQVNPLUS ! An option for the resolution of the surface temperature equation ! LOGICAL :: LCPL_GCM ! Flag used to Read/Write some field from/into the restart file for coupling with ARPEGE/ALADIN ! REAL :: XEDB REAL :: XEDC REAL :: XEDD REAL :: XEDK REAL :: XUSURIC REAL :: XUSURID REAL :: XUSURICL REAL :: XVCHRNK REAL :: XVZ0CM REAL :: XRIMAX REAL :: XDELTA_MAX ! Maximum fraction of the foliage covered by intercepted water for high vegetation ! REAL :: XWINDMIN ! minimum wind speed (canopy) ! REAL :: XRZHZ0M REAL :: XVZIUSTAR0 REAL :: XRRSCALE REAL :: XRRGAMMA REAL :: XUTILGUST ! REAL :: XCO2UNCPL ! uncoupled CO2 values (ppmv) ! !----------------------------------------------------------------------------------------------------- ! END MODULE MODD_SURF_ATM","tags":"","loc":"sourcefile/modd_surf_atm.f90.html"},{"title":"modd_ocean_csts.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_OCEAN_CSTS Source Code modd_ocean_csts.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ############### MODULE MODD_OCEAN_CSTS !     ############### ! !!****  *MODD_OCEAN_CSTS* - declaration of Physic constants for ocean !! !!    PURPOSE !!    ------- !       The purpose of this declarative module is to declare  the !     Physics constants for ocean. ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      C. Lebeaupin Brossier   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    01/2008 !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! IMPLICIT NONE ! REAL , SAVE :: XRHOSW , XRHOSWREF ! densities of seawater REAL , SAVE :: XCPSW ! Cp (for seawater) ! REAL , SAVE :: XGAMA ! fraction of Coriolis parameter in time ! REAL , SAVE :: XZCE , XCKL ! turbulence constants ! REAL , SAVE :: XR ! from Jerlov's (1976) REAL , SAVE :: XD1 , XD2 ! optical water C type I REAL , SAVE :: XALBEDOSW ! Albedo of seawater ! ! END MODULE MODD_OCEAN_CSTS","tags":"","loc":"sourcefile/modd_ocean_csts.f90.html"},{"title":"spll_modi_carbon_evol.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_CARBON_EVOL Source Code spll_modi_carbon_evol.f90 Source Code !auto_modi:spll_carbon_evol.D MODULE MODI_CARBON_EVOL INTERFACE SUBROUTINE CARBON_EVOL ( IO , KK , PK , PEK , DEK , PTSTEP , PRHOA , PRESP_BIOMASS_INST ) USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t USE MODD_ISBA_n , ONLY : ISBA_K_t , ISBA_P_t , ISBA_PE_t USE MODD_DIAG_EVAP_ISBA_n , ONLY : DIAG_EVAP_ISBA_t IMPLICIT NONE TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: IO TYPE ( ISBA_K_t ), INTENT ( INOUT ) :: KK TYPE ( ISBA_P_t ), INTENT ( INOUT ) :: PK TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK TYPE ( DIAG_EVAP_ISBA_t ), INTENT ( INOUT ) :: DEK REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density (kg/m3) REAL , DIMENSION (:,:), INTENT ( IN ) :: PRESP_BIOMASS_INST ! instantaneous respiration of biomass (kgCO2/kgair m/s) END SUBROUTINE CARBON_EVOL END INTERFACE END MODULE MODI_CARBON_EVOL","tags":"","loc":"sourcefile/spll_modi_carbon_evol.f90.html"},{"title":"modd_grid_conf_projn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_GRID_CONF_PROJ_n Source Code modd_grid_conf_projn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################ MODULE MODD_GRID_CONF_PROJ_n !     ################ ! !!****  *MODD_GRID_CONF_PROJ_n - declaration of Arome gris characteristics !! !!    PURPOSE !!    ------- !     Used if CINGRID_TYPE = 'CONF PROJ ' ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson    *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       20/09/02 ! !*       0.   DECLARATIONS !             ------------ ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! REAL , DIMENSION (:), ALLOCATABLE :: XX ! X coordinate (meters) REAL , DIMENSION (:), ALLOCATABLE :: XY ! Y coordinate (meters) ! REAL , DIMENSION (:,:), ALLOCATABLE :: XCX REAL , DIMENSION (:,:), ALLOCATABLE :: XCY INTEGER , DIMENSION (:,:), ALLOCATABLE :: NCIJ ! TYPE GRID_CONF_PROJ_t ! INTEGER :: NX ! number of points in X direction INTEGER :: NY ! number of points in Y direction ! REAL :: XLAT0 ! reference latitude REAL :: XLON0 ! reference longitude REAL :: XLATORI ! origin latitude REAL :: XLONORI ! origin longitude REAL :: XRPK ! projection parameter for the conformal projection REAL :: XBETA ! rotation   parameter for the conformal projection REAL :: XLATC ! centre latitude REAL :: XLONC ! centre longitude ! END TYPE GRID_CONF_PROJ_t ! CONTAINS ! SUBROUTINE GRID_CONF_PROJ_INIT ( YGRIDCONF ) TYPE ( GRID_CONF_PROJ_t ), INTENT ( INOUT ) :: YGRIDCONF REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_GRID_CONF_PROJ_n:GRID_CONF_PROJ_INIT\" , 0 , ZHOOK_HANDLE ) YGRIDCONF % NX = 0 YGRIDCONF % NY = 0 YGRIDCONF % XLAT0 = 0. YGRIDCONF % XLON0 = 0. YGRIDCONF % XLATORI = 0. YGRIDCONF % XLONORI = 0. YGRIDCONF % XRPK = 0. YGRIDCONF % XBETA = 0. YGRIDCONF % XLATC = 0. YGRIDCONF % XLONC = 0. IF ( LHOOK ) CALL DR_HOOK ( \"MODD_GRID_CONF_PROJ_n:GRID_CONF_PROJ_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE GRID_CONF_PROJ_INIT ! ! END MODULE MODD_GRID_CONF_PROJ_n","tags":"","loc":"sourcefile/modd_grid_conf_projn.f90.html"},{"title":"spll_modi_roof_impl_coef.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_ROOF_IMPL_COEF Source Code spll_modi_roof_impl_coef.f90 Source Code !auto_modi:spll_roof_impl_coef.D MODULE MODI_ROOF_IMPL_COEF INTERFACE SUBROUTINE ROOF_IMPL_COEF ( T , PTSTEP , PTDEEP_A , PTDEEP_B ) USE MODD_TEB_n , ONLY : TEB_t IMPLICIT NONE TYPE ( TEB_t ), INTENT ( INOUT ) :: T REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( OUT ) :: PTDEEP_A , PTDEEP_B END SUBROUTINE ROOF_IMPL_COEF END INTERFACE END MODULE MODI_ROOF_IMPL_COEF","tags":"","loc":"sourcefile/spll_modi_roof_impl_coef.f90.html"},{"title":"close_namelist.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines CLOSE_NAMELIST Source Code close_namelist.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE CLOSE_NAMELIST ( HPROGRAM , KLUNAM ) !     ####################################################### ! !!****  *CLOSE_NAMELIST* - generic routine to close a namelist file !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    01/2004 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! #ifdef SFX_ASC USE MODI_CLOSE_NAMELIST_ASC #endif #ifdef SFX_FA USE MODI_CLOSE_NAMELIST_FA #endif #ifdef SFX_LFI USE MODI_CLOSE_NAMELIST_LFI #endif #ifdef SFX_OL USE MODI_CLOSE_NAMELIST_OL #endif #ifdef SFX_NC USE MODI_CLOSE_NAMELIST_NC #endif #ifdef SFX_MNH USE MODI_MNHCLOSE_NAMELIST #endif #ifdef SFX_ARO USE MODI_AROCLOSE_NAMELIST #endif ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! ! !*       0.1   Declarations of arguments !              ------------------------- ! CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HPROGRAM ! main program INTEGER , INTENT ( IN ) :: KLUNAM ! logical unit of namelist REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*       0.2   Declarations of local variables !              ------------------------------- ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'CLOSE_NAMELIST' , 0 , ZHOOK_HANDLE ) IF ( HPROGRAM == 'MESONH' ) THEN #ifdef SFX_MNH CALL MNHCLOSE_NAMELIST ( HPROGRAM , KLUNAM ) #endif ELSE IF ( HPROGRAM == 'OFFLIN' ) THEN #ifdef SFX_OL CALL CLOSE_NAMELIST_OL ( HPROGRAM , KLUNAM ) #endif ELSE IF ( HPROGRAM == 'ASCII ' ) THEN #ifdef SFX_ASC CALL CLOSE_NAMELIST_ASC ( HPROGRAM , KLUNAM ) #endif ELSE IF ( HPROGRAM == 'AROME ' ) THEN #ifdef SFX_ARO CALL AROCLOSE_NAMELIST ( HPROGRAM , KLUNAM ) #endif ELSE IF ( HPROGRAM == 'FA    ' ) THEN #ifdef SFX_FA CALL CLOSE_NAMELIST_FA ( HPROGRAM , KLUNAM ) #endif ELSE IF ( HPROGRAM == 'LFI   ' ) THEN #ifdef SFX_LFI CALL CLOSE_NAMELIST_LFI ( HPROGRAM , KLUNAM ) #endif ELSE IF ( HPROGRAM == 'NC    ' ) THEN #ifdef SFX_NC CALL CLOSE_NAMELIST_NC ( HPROGRAM , KLUNAM ) #endif END IF IF ( LHOOK ) CALL DR_HOOK ( 'CLOSE_NAMELIST' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE CLOSE_NAMELIST","tags":"","loc":"sourcefile/close_namelist.f90.html"},{"title":"modd_diag_misc_isban.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DIAG_MISC_ISBA_n Source Code modd_diag_misc_isban.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ############################ MODULE MODD_DIAG_MISC_ISBA_n !     ############################ ! !!****  *MODD_DIAG_MISC_ISBA - declaration of packed surface parameters for ISBA scheme !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      P. Le Moigne   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       07/10/04 !!      A.L. Gibelin 04/2009 : Add respiration diagnostics !!      A.L. Gibelin 05/2009 : Add carbon spinup !!      A.L. Gibelin 07/2009 : Suppress RDK and transform GPP as a diagnostic !!       B. Decharme 05/2012 : Carbon fluxes in diag_evap !!       B. Decharme 07/2012 : New diag for DIF under LSURF_MISC_DIF key !!                               F2 stress !!                               Root zone swi, wg and wgi !!                               swi, wg and wgi comparable to ISBA-FR-DG2 and DG3 layers !!       B. Decharme 10/2012 : New diag for DIF !!                               active layer thickness over permafrost area !!                               frozen layer thickness over non-permafrost area !!       M. Lafaysse 09/2015 : new Crocus-MEPRA outputs !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE DIAG_MISC_ISBA_t !------------------------------------------------------------------------------ ! LOGICAL :: LSURF_MISC_BUDGET ! flag for miscellaneous terms of isba scheme LOGICAL :: LSURF_DIAG_ALBEDO ! flag to write out diagnostic albedo LOGICAL :: LSURF_MISC_DIF ! flag for miscellaneous terms of isba-dif scheme LOGICAL :: LPROSNOW ! flag for Crocus-MEPRA outputs LOGICAL :: LVOLUMETRIC_SNOWLIQ ! volumetric snow liquid water content (kg m-3) ! !* variables for each patch ! REAL , POINTER , DIMENSION (:) :: XHV ! Halstead coefficient REAL , POINTER , DIMENSION (:) :: XLAI ! leaf average index ! REAL , POINTER , DIMENSION (:,:) :: XSWI ! Soil wetness index REAL , POINTER , DIMENSION (:,:) :: XTSWI ! Total soil wetness index REAL , POINTER , DIMENSION (:) :: XSOIL_SWI ! Soil wetness index REAL , POINTER , DIMENSION (:) :: XSOIL_TSWI ! Total Soil wetness index REAL , POINTER , DIMENSION (:) :: XSOIL_TWG ! Soil water content (liquid+ice) (kg.m-2) REAL , POINTER , DIMENSION (:) :: XSOIL_TWGI ! Soil ice content (kg.m-2) REAL , POINTER , DIMENSION (:) :: XSOIL_WG ! Soil water content (liquid+ice) (m3.m-3) REAL , POINTER , DIMENSION (:) :: XSOIL_WGI ! Soil ice content (m3.m-3) ! REAL , POINTER , DIMENSION (:) :: XFRD2_TSWI ! ISBA-FR-DG2 comparable soil wetness index (DIF option) REAL , POINTER , DIMENSION (:) :: XFRD2_TWG ! ISBA-FR-DG2 comparable soil water content (liquid+ice) (DIF option) REAL , POINTER , DIMENSION (:) :: XFRD2_TWGI ! ISBA-FR-DG2 comparable soil ice content (DIF option) REAL , POINTER , DIMENSION (:) :: XFRD3_TSWI ! ISBA-FR-Deep comparable soil wetness index (DIF option) REAL , POINTER , DIMENSION (:) :: XFRD3_TWG ! ISBA-FR-Deep comparable soil water content (liquid+ice) (DIF option) REAL , POINTER , DIMENSION (:) :: XFRD3_TWGI ! ISBA-FR-Deep comparable soil ice content (DIF option) ! REAL , POINTER , DIMENSION (:) :: XALT ! Active layer thickness in permafrost area REAL , POINTER , DIMENSION (:) :: XFLT ! Frozen layer thickness in non-permmafrost area ! REAL , POINTER , DIMENSION (:) :: XRNSNOW ! net radiative flux from snow (ISBA-ES:3-L)    (W/m2) REAL , POINTER , DIMENSION (:) :: XHSNOW ! sensible heat flux from snow (ISBA-ES:3-L)    (W/m2) REAL , POINTER , DIMENSION (:) :: XHPSNOW ! heat release from rainfall (ISBA-ES:3-L)      (W/m2) REAL , POINTER , DIMENSION (:) :: XGFLUXSNOW ! net surface energy flux into snowpack !                                               ! (ISBA-ES:3-L)                                 (W/m2) REAL , POINTER , DIMENSION (:) :: XUSTARSNOW ! friction velocity  over snow !                                               ! (ISBA-ES:3-L)                                 (m/s) REAL , POINTER , DIMENSION (:) :: XGRNDFLUX ! soil/snow interface heat flux (ISBA-ES:3-L)   (W/m2) REAL , POINTER , DIMENSION (:) :: XSRSFC ! snowfall over snowpack (ISBA-ES:3-L)          (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XRRSFC ! rainfall over snowpack (ISBA-ES:3-L)          (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XCDSNOW ! snow drag coefficient (ISBA-ES:3-L)           (-) REAL , POINTER , DIMENSION (:) :: XCHSNOW ! heat turbulent transfer coefficient !                                               ! (ISBA-ES:3-L)                                 (-) REAL , POINTER , DIMENSION (:,:) :: XSNOWDZ ! snow layer thicknesses                        (m) REAL , POINTER , DIMENSION (:,:) :: XSNOWDEND ! dendricity (Crocus) REAL , POINTER , DIMENSION (:,:) :: XSNOWSPHER ! sphericity (Crocus) REAL , POINTER , DIMENSION (:,:) :: XSNOWSIZE ! grain size (Crocus) REAL , POINTER , DIMENSION (:,:) :: XSNOWSSA ! snow specific surface area (Crocus) REAL , POINTER , DIMENSION (:,:) :: XSNOWTYPEMEPRA ! snow grain type (Crocus-MEPRA) REAL , POINTER , DIMENSION (:,:) :: XSNOWRAM ! snow ram resistance (Crocus-MEPRA) REAL , POINTER , DIMENSION (:,:) :: XSNOWSHEAR ! snow shear resistance (Crocus-MEPRA) ! REAL , POINTER , DIMENSION (:) :: XSNOWHMASS ! heat content change due to mass !                                           ! changes in snowpack: for budget REAL , POINTER , DIMENSION (:,:) :: XSNOWLIQ ! snow liquid water profile (ISBA-ES:3-L) REAL , POINTER , DIMENSION (:,:) :: XSNOWTEMP ! snow temperature profile  (ISBA-ES:3-L) ! REAL , POINTER , DIMENSION (:) :: XTWSNOW ! Total snow reservoir REAL , POINTER , DIMENSION (:) :: XTDSNOW ! Total snow height REAL , POINTER , DIMENSION (:) :: XTTSNOW ! Total snow temperature ! REAL , POINTER , DIMENSION (:) :: XSNDPT_1DY , XSNDPT_3DY , XSNDPT_5DY , XSNDPT_7DY ! fresh snow depth in 1, 3, 5, 7 days REAL , POINTER , DIMENSION (:) :: XSNSWE_1DY , XSNSWE_3DY , XSNSWE_5DY , XSNSWE_7DY ! fresh snow water equivalent in 1, 3, 5, 7 days REAL , POINTER , DIMENSION (:) :: XSNRAM_SONDE ! penetration depth of the ram resistance sensor (2 DaN) REAL , POINTER , DIMENSION (:) :: XSN_WETTHCKN ! Thickness of wet snow at the top of the snowpack REAL , POINTER , DIMENSION (:) :: XSN_REFRZNTHCKN ! Thickness of refrozen snow at the top of the snowpack REAL , POINTER , DIMENSION (:) :: XPSNG ! Snow fraction over ground, diag at time t REAL , POINTER , DIMENSION (:) :: XPSNV ! Snow fraction over vegetation, diag at time t REAL , POINTER , DIMENSION (:) :: XPSN ! Total Snow fraction, diag at time t ! REAL , POINTER , DIMENSION (:) :: XFSAT ! Topmodel/dt92 saturated fraction ! REAL , POINTER , DIMENSION (:) :: XFFG ! Flood fraction over ground, diag at time t REAL , POINTER , DIMENSION (:) :: XFFV ! Flood fraction over vegetation, diag at time t REAL , POINTER , DIMENSION (:) :: XFF ! Total Flood fraction, diag at time t ! REAL , POINTER , DIMENSION (:) :: XSEUIL ! Irrigation threshold ! REAL , POINTER , DIMENSION (:) :: XFAPAR ! Fapar of vegetation REAL , POINTER , DIMENSION (:) :: XFAPIR ! Fapir of vegetation REAL , POINTER , DIMENSION (:) :: XDFAPARC ! Fapar of vegetation (cumul) REAL , POINTER , DIMENSION (:) :: XDFAPIRC ! Fapir of vegetation (cumul) REAL , POINTER , DIMENSION (:) :: XFAPAR_BS ! Fapar of bare soil REAL , POINTER , DIMENSION (:) :: XFAPIR_BS ! Fapir of bare soil REAL , POINTER , DIMENSION (:) :: XDLAI_EFFC ! Effective LAI (cumul) ! REAL , POINTER , DIMENSION (:) :: XCG ! heat capacity of the ground REAL , POINTER , DIMENSION (:) :: XC1 ! coefficients for the moisure REAL , POINTER , DIMENSION (:) :: XC2 ! equation. REAL , POINTER , DIMENSION (:) :: XWGEQ ! equilibrium volumetric water !                                               ! content REAL , POINTER , DIMENSION (:) :: XCT ! area-averaged heat capacity REAL , POINTER , DIMENSION (:) :: XRS ! stomatal resistance                            (s/m) ! !------------------------------------------------------------------------------ ! END TYPE DIAG_MISC_ISBA_t ! TYPE DIAG_MISC_ISBA_NP_t ! TYPE ( DIAG_MISC_ISBA_t ), POINTER :: AL (:) => NULL () ! END TYPE DIAG_MISC_ISBA_NP_t ! CONTAINS ! SUBROUTINE DIAG_MISC_ISBA_NP_INIT ( YNDIAG_MISC_ISBA , KPATCH ) TYPE ( DIAG_MISC_ISBA_NP_t ), INTENT ( INOUT ) :: YNDIAG_MISC_ISBA INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_ISBA_N:DIAG_MISC_ISBA_NP_INIT\" , 0 , ZHOOK_HANDLE ) IF (. NOT . ASSOCIATED ( YNDIAG_MISC_ISBA % AL )) THEN ALLOCATE ( YNDIAG_MISC_ISBA % AL ( KPATCH )) DO JP = 1 , KPATCH CALL DIAG_MISC_ISBA_INIT ( YNDIAG_MISC_ISBA % AL ( JP )) ENDDO ELSE DO JP = 1 , KPATCH CALL DIAG_MISC_ISBA_INIT ( YNDIAG_MISC_ISBA % AL ( JP )) ENDDO DEALLOCATE ( YNDIAG_MISC_ISBA % AL ) ENDIF IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_ISBA_N:DIAG_MISC_ISBA_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_MISC_ISBA_NP_INIT ! SUBROUTINE DIAG_MISC_ISBA_INIT ( DMI ) TYPE ( DIAG_MISC_ISBA_t ), INTENT ( INOUT ) :: DMI REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_ISBA_N:DIAG_MISC_ISBA_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( DMI % XHV ) NULLIFY ( DMI % XLAI ) NULLIFY ( DMI % XSWI ) NULLIFY ( DMI % XTSWI ) NULLIFY ( DMI % XSOIL_SWI ) NULLIFY ( DMI % XSOIL_TSWI ) NULLIFY ( DMI % XSOIL_TWG ) NULLIFY ( DMI % XSOIL_TWGI ) NULLIFY ( DMI % XSOIL_WG ) NULLIFY ( DMI % XSOIL_WGI ) NULLIFY ( DMI % XFRD2_TWG ) NULLIFY ( DMI % XFRD2_TWGI ) NULLIFY ( DMI % XFRD3_TSWI ) NULLIFY ( DMI % XFRD3_TWG ) NULLIFY ( DMI % XFRD3_TWGI ) NULLIFY ( DMI % XALT ) NULLIFY ( DMI % XFLT ) NULLIFY ( DMI % XRNSNOW ) NULLIFY ( DMI % XHSNOW ) NULLIFY ( DMI % XHPSNOW ) NULLIFY ( DMI % XGFLUXSNOW ) NULLIFY ( DMI % XUSTARSNOW ) NULLIFY ( DMI % XGRNDFLUX ) NULLIFY ( DMI % XSRSFC ) NULLIFY ( DMI % XRRSFC ) NULLIFY ( DMI % XCDSNOW ) NULLIFY ( DMI % XCHSNOW ) NULLIFY ( DMI % XSNOWDZ ) NULLIFY ( DMI % XSNOWDEND ) NULLIFY ( DMI % XSNOWSPHER ) NULLIFY ( DMI % XSNOWSIZE ) NULLIFY ( DMI % XSNOWTYPEMEPRA ) NULLIFY ( DMI % XSNOWSSA ) NULLIFY ( DMI % XSNOWRAM ) NULLIFY ( DMI % XSNOWSHEAR ) NULLIFY ( DMI % XSNDPT_1DY ) NULLIFY ( DMI % XSNDPT_3DY ) NULLIFY ( DMI % XSNDPT_5DY ) NULLIFY ( DMI % XSNDPT_7DY ) NULLIFY ( DMI % XSNSWE_1DY ) NULLIFY ( DMI % XSNSWE_3DY ) NULLIFY ( DMI % XSNSWE_5DY ) NULLIFY ( DMI % XSNSWE_7DY ) NULLIFY ( DMI % XSNRAM_SONDE ) NULLIFY ( DMI % XSN_REFRZNTHCKN ) NULLIFY ( DMI % XSN_WETTHCKN ) NULLIFY ( DMI % XSNOWHMASS ) NULLIFY ( DMI % XSNOWLIQ ) NULLIFY ( DMI % XSNOWTEMP ) NULLIFY ( DMI % XTWSNOW ) NULLIFY ( DMI % XTDSNOW ) NULLIFY ( DMI % XTTSNOW ) NULLIFY ( DMI % XPSNG ) NULLIFY ( DMI % XPSNV ) NULLIFY ( DMI % XPSN ) NULLIFY ( DMI % XFFG ) NULLIFY ( DMI % XFFV ) NULLIFY ( DMI % XFF ) NULLIFY ( DMI % XSEUIL ) NULLIFY ( DMI % XFAPAR ) NULLIFY ( DMI % XFAPIR ) NULLIFY ( DMI % XDFAPARC ) NULLIFY ( DMI % XDFAPIRC ) NULLIFY ( DMI % XFAPAR_BS ) NULLIFY ( DMI % XFAPIR_BS ) NULLIFY ( DMI % XDLAI_EFFC ) NULLIFY ( DMI % XCG ) NULLIFY ( DMI % XC1 ) NULLIFY ( DMI % XC2 ) NULLIFY ( DMI % XWGEQ ) NULLIFY ( DMI % XCT ) NULLIFY ( DMI % XRS ) DMI % LSURF_MISC_BUDGET = . FALSE . DMI % LSURF_DIAG_ALBEDO = . FALSE . DMI % LSURF_MISC_DIF = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_ISBA_N:DIAG_MISC_ISBA_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_MISC_ISBA_INIT END MODULE MODD_DIAG_MISC_ISBA_n","tags":"","loc":"sourcefile/modd_diag_misc_isban.f90.html"},{"title":"spll_modi_tridiag_ground.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_TRIDIAG_GROUND Source Code spll_modi_tridiag_ground.f90 Source Code !auto_modi:spll_tridiag_ground.D MODULE MODI_TRIDIAG_GROUND INTERFACE SUBROUTINE TRIDIAG_GROUND ( PA , PB , PC , PY , PX ) IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( IN ) :: PA ! lower diag. elements of A matrix REAL , DIMENSION (:,:), INTENT ( IN ) :: PB ! main  diag. elements of A matrix REAL , DIMENSION (:,:), INTENT ( IN ) :: PC ! upper diag. elements of A matrix REAL , DIMENSION (:,:), INTENT ( IN ) :: PY ! r.h.s. term REAL , DIMENSION (:,:), INTENT ( OUT ) :: PX ! solution of A.X = Y END SUBROUTINE TRIDIAG_GROUND END INTERFACE END MODULE MODI_TRIDIAG_GROUND","tags":"","loc":"sourcefile/spll_modi_tridiag_ground.f90.html"},{"title":"spll_modi_layer_e_budget.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_LAYER_E_BUDGET Source Code spll_modi_layer_e_budget.f90 Source Code !auto_modi:spll_layer_e_budget.D MODULE MODI_LAYER_E_BUDGET INTERFACE SUBROUTINE LAYER_E_BUDGET ( PT , PTSTEP , PIMPL , PHC , PTC , PD , PA , PB , PC , PY , PDQS ) IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT ! floor layers temperatures REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC ! heat capacity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC ! thermal conductivity for REAL , DIMENSION (:,:), INTENT ( IN ) :: PD ! depth of road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PA REAL , DIMENSION (:,:), INTENT ( IN ) :: PB REAL , DIMENSION (:,:), INTENT ( IN ) :: PC REAL , DIMENSION (:,:), INTENT ( IN ) :: PY REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS REAL , INTENT ( IN ) :: PIMPL ! implicitation coefficient END SUBROUTINE LAYER_E_BUDGET END INTERFACE END MODULE MODI_LAYER_E_BUDGET","tags":"","loc":"sourcefile/spll_modi_layer_e_budget.f90.html"},{"title":"modd_isba_optionsn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_ISBA_OPTIONS_n Source Code modd_isba_optionsn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !################## MODULE MODD_ISBA_OPTIONS_n !################## ! !!****  *MODD_ISBA - declaration of packed surface parameters for ISBA scheme !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      A. Boone   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       20/09/02 !!      A.L. Gibelin    04/2009 : BIOMASS and RESP_BIOMASS arrays !!      A.L. Gibelin    04/2009 : TAU_WOOD for NCB option !!      A.L. Gibelin    05/2009 : Add carbon spinup !!      A.L. Gibelin    06/2009 : Soil carbon variables for CNT option !!      A.L. Gibelin    07/2009 : Suppress RDK and transform GPP as a diagnostic !!      A.L. Gibelin    07/2009 : Suppress PPST and PPSTF as outputs !!      P. Samuelsson   02/2012 : MEB !! !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! TYPE ISBA_OPTIONS_t ! ! *  General PGD options ! LOGICAL :: LECOCLIMAP ! T: parameters computed from ecoclimap !                             ! F: they are read in the file ! LOGICAL :: LPAR ! T: parameters computed from ecoclimap !                             ! F: they are read in the file ! INTEGER :: NPATCH ! maximum number of sub-tiles (patches) !                             ! used at any grid point within a !                             ! natural surface fraction INTEGER :: NGROUND_LAYER ! number of ground layers ! CHARACTER ( LEN = 3 ) :: CISBA ! type of ISBA version: !                             ! '2-L' (default) !                             ! '3-L' !                             ! 'DIF' CHARACTER ( LEN = 4 ) :: CPEDOTF ! NOTE: Only used when HISBA = DIF !                             ! 'CH78' = Clapp and Hornberger 1978 for BC (Default) !                             ! 'CO84' = Cosby et al. 1988 for BC CHARACTER ( LEN = 3 ) :: CPHOTO ! type of photosynthesis !                             ! 'NON' !                             ! 'AST' !                             ! 'NIT' !                             ! 'NCB' ! REAL , POINTER , DIMENSION (:) :: XSOILGRID ! Soil layer grid as reference for DIF ! LOGICAL :: LTR_ML ! new radiative transfert ! REAL :: XRM_PATCH ! threshold to remove little fractions of patches ! LOGICAL :: LSOCP ! Soil organic carbon profile data LOGICAL :: LCTI ! Topographic index data LOGICAL :: LPERM ! Permafrost distribution data LOGICAL :: LNOF ! ! Type of vegetation (simplification of vegetation charaterization) ! CHARACTER ( LEN = 4 ) :: CTYPE_HVEG ! type of high vegetation CHARACTER ( LEN = 4 ) :: CTYPE_LVEG ! type of low vegetation CHARACTER ( LEN = 4 ) :: CTYPE_NVEG ! type of bare soil (no vegetation) CHARACTER ( LEN = 5 ) :: CTYP_COV ! type of green roof ! ! * AGS and Carbon PGD options ! INTEGER :: NNBIOMASS ! number of biomass pools INTEGER :: NNLITTER ! number of litter pools INTEGER :: NNLITTLEVS ! number of litter levels INTEGER :: NNSOILCARB ! number of soil carbon pools ! ! * PGD MEB OPTIONS ! LOGICAL , POINTER , DIMENSION (:) :: LMEB_PATCH ! Vector with T/F values ! True = treat patch with multi-energy balance ! False = treat patch with classical ISBA LOGICAL :: LFORC_MEASURE ! True = Forcing data from observations !                                               ! False = Forcing data from atmospheric model (default) LOGICAL :: LMEB_LITTER ! Activate Litter LOGICAL :: LMEB_GNDRES ! Activate Ground Resistance ! ! * General PREP options ! LOGICAL :: LCANOPY ! T: SBL scheme within the canopy !                  ! F: no atmospheric layers below forcing level ! ! * Carbon PREP options CHARACTER ( LEN = 3 ) :: CRESPSL ! Soil respiration !                             ! 'DEF' = Default: Norman (1992) !                             ! 'PRM' = New Parameterization !                             ! 'CNT' = CENTURY model (Gibelin 2007) ! ! ! * General MODEL options ! CHARACTER ( LEN = 4 ) :: CC1DRY ! C1 formulation for dry soils !                             ! 'DEF ' = DEFault: Giard-Bazile formulation !                             ! 'GB93' = Giordani 1993, Braud 1993 !                             ! discontinuous at WILT CHARACTER ( LEN = 4 ) :: CSCOND ! Thermal conductivity !                             ! 'DEF ' = DEFault: NP89 implicit method !                             ! 'PL98' = Peters-Lidard et al. 1998 used !                             ! for explicit computation of CG CHARACTER ( LEN = 3 ) :: CSOILFRZ ! soil freezing-physics option !                             ! 'DEF' = Default (Boone et al. 2000; !                             !        Giard and Bazile 2000) !                             ! 'LWT' = Phase changes as above, !                             !         but relation between unfrozen !                             !         water and temperature considered CHARACTER ( LEN = 4 ) :: CDIFSFCOND ! Mulch effects !                               ! 'MLCH' = include the insulating effect of !                               ! leaf litter/mulch on the surf. thermal cond. !                               ! 'DEF ' = no mulch effect !                               NOTE: Only used when YISBA = DIF CHARACTER ( LEN = 3 ) :: CSNOWRES ! Turbulent exchanges over snow !                               ! 'DEF' = Default: Louis (ISBA) !                               ! 'RIL' = Maximum Richardson number limit !                               !         for stable conditions ISBA-SNOW3L !                               !         turbulent exchange option CHARACTER ( LEN = 4 ) :: CALBEDO ! albedo type !                               ! 'DRY ' !                               ! 'EVOL' !                               ! 'WET ' !                               ! 'USER' !                            NOTE that when using the YISBA='DIF' multi-layer soil option, !                            the 'LWT' method is used. It is only an option !                            when using the force-restore soil method ('2-L' or '3-L') CHARACTER ( LEN = 3 ) :: CCPSURF ! specific heat at surface !                               ! 'DRY' = default value (dry Cp) !                               ! 'HUM' = Cp as a fct of specific humidity ! REAL :: XOUT_TSTEP ! ISBA output writing time step REAL :: XTSTEP ! ISBA time step REAL :: XCGMAX ! maximum soil heat capacity REAL :: XCDRAG ! drag coefficient in canopy ! LOGICAL :: LGLACIER ! True = Over permanent snow and ice, !                                 initialise WGI=WSAT, !                                 Hsnow>=10m and allow 0.8<SNOALB<0.85 ! False = No specific treatment LOGICAL :: LCANOPY_DRAG ! T: drag activated in SBL scheme within the canopy !                               ! F: no drag activated in SBL atmospheric layers LOGICAL :: LVEGUPD ! True = update vegetation parameters every decade LOGICAL :: LPERTSURF ! True  = apply random perturbations for ensemble prediction ! False = no random perturbation (default) ! ! ! * SGH model options ! ! - Adjustable physical parameters ! INTEGER :: NLAYER_HORT INTEGER :: NLAYER_DUN ! ! - Sub-grid hydrology and vertical hydrology ! CHARACTER ( LEN = 4 ) :: CRUNOFF ! surface runoff formulation !                            ! 'WSAT' !                            ! 'DT92' !                            ! 'SGH ' Topmodel ! CHARACTER ( LEN = 3 ) :: CKSAT ! ksat !                            ! 'DEF' = default value !                            ! 'SGH' = profil exponentiel ! LOGICAL :: LSOC ! soil organic carbon effect !                            ! False = default value !                            ! True  = soil SOC profil ! CHARACTER ( LEN = 3 ) :: CRAIN ! Rainfall spatial distribution ! 'DEF' = No rainfall spatial distribution ! 'SGH' = Rainfall exponential spatial distribution ! ! CHARACTER ( LEN = 3 ) :: CHORT ! Horton runoff ! 'DEF' = no Horton runoff ! 'SGH' = Horton runoff ! ! * AGS and carbon options ! LOGICAL :: LNITRO_DILU ! nitrogen dilution fct of CO2 (Calvet et al. 2008) ! False = keep vegetation parameters constant in time ! LOGICAL :: LSPINUPCARBS ! T: do the soil carb spinup, F: no LOGICAL :: LSPINUPCARBW ! T: do the wood carb spinup, F: no REAL :: XSPINMAXS ! max number of times CARBON_SOIL subroutine is ! called for each timestep in simulation during ! acceleration procedure number REAL :: XSPINMAXW ! max number of times the wood is accelerated REAL :: XCO2_START ! Pre-industrial CO2 concentration REAL :: XCO2_END ! Begin-transient CO2 concentration INTEGER :: NNBYEARSPINS ! nbr years needed to reaches soil equilibrium INTEGER :: NNBYEARSPINW ! nbr years needed to reaches wood equilibrium INTEGER :: NNBYEARSOLD ! nbr years executed at curent time step INTEGER :: NSPINS ! number of times the soil is accelerated INTEGER :: NSPINW ! number of times the wood is accelerated ! LOGICAL :: LAGRI_TO_GRASS ! During soil carbon spinup with ISBA-CC, ! grass parameters are attributed to all agricultural PFT ! ! * Snow model options ! LOGICAL :: LSNOWDRIFT , LSNOWDRIFT_SUBLIM ! Logicals for snowdrift and sublimation LOGICAL :: LSNOW_ABS_ZENITH ! if True modify solar absorption as a function of solar zenithal angle ! (physically wrong but better results in polar regions when CSNOWRAD=B92) ! Scheme of snow metamorphism (Crocus) CHARACTER ( 3 ) :: CSNOWMETAMO ! B92 (historical version, Brun et al 92), C13, T07, F06 (see Carmagnola et al 2014) ! ! radiative transfer scheme in snow (Crocus) CHARACTER ( 3 ) :: CSNOWRAD ! B92 (historical version, Brun et al 92), TAR, TA1, TA2 (see Libois et al 2013) ! ! * Other options ! LOGICAL :: LFLOOD ! Activation of the flooding scheme LOGICAL :: LWTD ! Activation of Water table depth coupling LOGICAL :: LCPL_RRM ! Activation of the coupling ! LOGICAL :: LTEMP_ARP ! True  = time-varying force-restore soil temperature (as in ARPEGE) ! False = No time-varying force-restore soil temperature (Default INTEGER :: NTEMPLAYER_ARP ! Number of force-restore soil temperature layer, including Ts (Default = 4) ! Only used if LTEMP_ARP=True REAL , POINTER , DIMENSION (:) :: XSODELX ! Pulsation for each layer (Only used if LTEMP_ARP=True) ! END TYPE ISBA_OPTIONS_t ! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! CONTAINS SUBROUTINE ISBA_OPTIONS_INIT ( IO ) TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: IO REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_OPTIONS_N:ISBA_OPTIONS_INIT\" , 0 , ZHOOK_HANDLE ) ! NULLIFY ( IO % XSOILGRID ) NULLIFY ( IO % LMEB_PATCH ) ! IO % CTYPE_HVEG = '    ' IO % CTYPE_LVEG = '    ' IO % CTYPE_NVEG = '    ' IO % CTYP_COV = '     ' IO % LPAR = . FALSE . IO % LECOCLIMAP = . FALSE . IO % NPATCH = 0 IO % NGROUND_LAYER = 0 IO % CISBA = ' ' IO % CPEDOTF = ' ' IO % CPHOTO = ' ' IO % LTR_ML = . FALSE . IO % XRM_PATCH = 0.0 IO % LSOCP = . FALSE . IO % LCTI = . FALSE . IO % LPERM = . FALSE . IO % LNOF = . FALSE . IO % NNBIOMASS = 0 IO % NNLITTER = 0 IO % NNLITTLEVS = 0 IO % NNSOILCARB = 0 IO % LFORC_MEASURE = . FALSE . IO % LMEB_LITTER = . FALSE . IO % LMEB_GNDRES = . FALSE . ! IO % LCANOPY = . FALSE . IO % CRESPSL = ' ' ! IO % CC1DRY = ' ' IO % CSCOND = ' ' IO % CSOILFRZ = ' ' IO % CDIFSFCOND = ' ' IO % CSNOWRES = ' ' IO % CALBEDO = ' ' IO % CCPSURF = ' ' IO % XOUT_TSTEP = 0. IO % XTSTEP = 0. IO % XCGMAX = 0. IO % XCDRAG = 0. IO % LGLACIER = . FALSE . IO % LCANOPY_DRAG = . FALSE . IO % LVEGUPD = . FALSE . IO % LPERTSURF = . FALSE . IO % NLAYER_HORT = 0 IO % NLAYER_DUN = 0 IO % CRUNOFF = ' ' IO % CKSAT = ' ' IO % CRAIN = ' ' IO % CHORT = ' ' IO % LSOC = . FALSE . IO % LNITRO_DILU = . FALSE . IO % LSPINUPCARBS = . FALSE . IO % LSPINUPCARBW = . FALSE . IO % XSPINMAXS = 0. IO % XSPINMAXW = 0. IO % XCO2_START = 0. IO % XCO2_END = 0. IO % NNBYEARSPINS = 0 IO % NNBYEARSPINW = 0 IO % NNBYEARSOLD = 0 IO % NSPINS = 1 IO % NSPINW = 1 IO % LAGRI_TO_GRASS = . FALSE . IO % LSNOWDRIFT = . TRUE . IO % LSNOWDRIFT_SUBLIM = . FALSE . IO % LSNOW_ABS_ZENITH = . FALSE . IO % CSNOWMETAMO = 'B92' IO % CSNOWRAD = 'B92' IO % LFLOOD = . FALSE . IO % LWTD = . FALSE . IO % LCPL_RRM = . FALSE . IO % LTEMP_ARP = . FALSE . IO % NTEMPLAYER_ARP = 0 ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_OPTIONS_N:ISBA_OPTIONS_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE ISBA_OPTIONS_INIT END MODULE MODD_ISBA_OPTIONS_n","tags":"","loc":"sourcefile/modd_isba_optionsn.f90.html"},{"title":"snow_cover_1layer.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines SNOW_COVER_1LAYER Source Code snow_cover_1layer.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE SNOW_COVER_1LAYER ( PTSTEP , PANSMIN , PANSMAX , PTODRY , PRHOSMIN , PRHOSMAX , & PRHOFOLD , OALL_MELT , PDRAIN_TIME , PWCRN , PZ0SN , PZ0HSN , & TPSNOW , PTG , PTG_COEFA , PTG_COEFB , PABS_SW , PLW1 , PLW2 , & PTA , PQA , PVMOD , PPS , PRHOA , PSR , PZREF , PUREF , PRNSNOW ,& PHSNOW , PLESNOW , PGSNOW , PMELT , PDQS_SNOW , PABS_LW ) !   ########################################################################## ! !!****  *SNOW_COVER_1LAYER* !! !!    PURPOSE !!    ------- ! !     One layer snow mantel scheme ! ! !!**  METHOD !     ------ ! ! ! The temperature equation is written as: ! !              b T+ = y ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    08/09/98 !!      J. Escobar 24/10/2012 : BUF PGI10.X , rewrite some 1 line WHERE statement !!      V. Masson  13/09/2013 : implicitation of coupling with roof below !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TYPE_SNOW , ONLY : SURF_SNOW ! USE MODD_CSTS , ONLY : XTT , XCI , XRHOLI , XRHOLW , XCPD , XLSTT , XLMTT , XDAY , XCONDI USE MODD_SNOW_PAR , ONLY : XEMISSN USE MODD_SURF_PAR , ONLY : XUNDEF ! USE MODE_THERMOS ! USE MODI_SURFACE_RI USE MODI_SURFACE_AERO_COND ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! ! REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , INTENT ( IN ) :: PANSMIN ! minimum snow albedo REAL , INTENT ( IN ) :: PANSMAX ! maximum snow albedo REAL , INTENT ( IN ) :: PTODRY ! snow albedo decreasing constant REAL , INTENT ( IN ) :: PRHOSMIN ! minimum snow density REAL , INTENT ( IN ) :: PRHOSMAX ! maximum snow density REAL , INTENT ( IN ) :: PRHOFOLD ! snow density increasing constant LOGICAL , INTENT ( IN ) :: OALL_MELT ! T --> all snow runs off if ! lower surf. temperature is ! positive REAL , INTENT ( IN ) :: PDRAIN_TIME ! drainage folding time (days) REAL , INTENT ( IN ) :: PWCRN ! critical snow amount necessary ! to cover the considered surface REAL , INTENT ( IN ) :: PZ0SN ! snow roughness length for momentum REAL , INTENT ( IN ) :: PZ0HSN ! snow roughness length for heat TYPE ( SURF_SNOW ), INTENT ( INOUT ) :: TPSNOW REAL , DIMENSION (:), INTENT ( IN ) :: PTG ! underlying ground temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTG_COEFA ! underlying ground temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTG_COEFB ! implicit terms REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW ! absorbed SW energy (Wm-2) REAL , DIMENSION (:), INTENT ( IN ) :: PLW1 ! LW coef independant of TSNOW ! (Wm-2)     usually equal to: !      emis_snow * LW_down ! REAL , DIMENSION (:), INTENT ( IN ) :: PLW2 ! LW coef dependant   of TSNOW ! (Wm-2 K-4) usually equal to: ! -1 * emis_snow * stefan_constant ! REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first ! atmospheric level (temperature) REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the first ! atmospheric level (wind) REAL , DIMENSION (:), INTENT ( OUT ) :: PRNSNOW ! net radiation over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PHSNOW ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PLESNOW ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PGSNOW ! flux under the snow REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT ! snow melting rate (kg/m2/s) REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_SNOW ! heat storage inside snow REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW ! absorbed LW rad by snow (W/m2) ! ! !*      0.2    declarations of local variables ! REAL :: ZEXPL = 0. REAL :: ZIMPL = 1. ! REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZEXNS , ZEXNA , ZDIRCOSZW REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZZ0 ! roughness length for momentum REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZZ0H ! roughness length forheat ! REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZRI ! Richardson number REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZAC ! aerodynamical conductance REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZRA ! aerodynamical resistance REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZCH ! drag coefficient for heat REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZB , ZY ! coefficients in Ts eq. REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZWSNOW ! snow before evolution REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZSNOW_HC ! snow heat capacity REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZSNOW_TC ! snow thermal conductivity REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZSNOW_D ! snow depth REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZMELT ! snow melting rate (kg/m3/s) REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZTS_SNOW ! snow surface temperature ! at previous time-step REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZQSAT ! specific humidity !                                         ! for ice REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZDQSAT ! d(specific humidity)/dT !                                         ! for ice ! REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZSR1 , ZSR2 ! norm. snow precip. ! LOGICAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: GSNOWMASK ! where snow is !                                             ! at previuos time-step LOGICAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: GFLUXMASK ! where fluxes can !                                             ! be computed at !                                             ! new time-step !                                             ! i.e. snow occurence !                                             ! at previous time-step !                                             ! OR snow fall INTEGER , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: JSNOWMASK1 , JSNOWMASK2 , JSNOWMASK3 ! where snow is or not !                                                                      ! at previuos time-step INTEGER , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: JFLUXMASK ! where fluxes can !                                             ! be computed at !                                             ! new time-step !                                             ! i.e. snow occurence !                                             ! at previous time-step !                                             ! OR snow fall ! REAL :: ZWSNOW_MIN = 0.1 ! minimum value of snow content (kg/m2) for prognostic !                        ! computations ! REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZEI_SNOW ! internal energy of snow REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZPEI_SNOW ! internal energy of snow at t+ REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZWORK1 REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZDQSATI , ZQSATI ! INTEGER :: JJ , JI , JCOMPT_SNOW1 , JCOMPT_SNOW2 , JCOMPT_SNOW3 , JCOMPT_FLUX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! ! IF ( LHOOK ) CALL DR_HOOK ( 'SNOW_COVER_1LAYER' , 0 , ZHOOK_HANDLE ) ZB (:) = 0. ZY (:) = 0. ZMELT (:) = 0. PMELT (:) = 0. PRNSNOW (:) = 0. PHSNOW (:) = 0. PLESNOW (:) = 0. PGSNOW (:) = 0. !RJ: workaround to prevent decomposition unstable xundef masks for Tx_LWA_SN_RD fields !RJ: in TEB_DIAGNOSTICS.nc during TEB_GARDEN_GREENROOF_BEM_3L_IRRIG_* tests !RJ: problem with decomposition handling somewhere else #ifdef RJ_PFIX PABS_LW (:) = 0.0 #else PABS_LW (:) = XUNDEF #endif ! !* snow reservoir before evolution ! ZWSNOW (:) = TPSNOW % WSNOW (:, 1 ) ZTS_SNOW (:) = MIN ( XTT , PTG (:)) ! ZSNOW_D (:) = 0. ZSNOW_TC (:) = 0. ZSNOW_HC (:) = 0. ! !------------------------------------------------------------------------------- ! !*      1.1    most useful masks !              ----------------- ! GSNOWMASK (:) = . FALSE . GFLUXMASK (:) = . FALSE . JSNOWMASK1 (:) = 0. JSNOWMASK2 (:) = 0. JSNOWMASK3 (:) = 0. JFLUXMASK (:) = 0. !*      1.2    drag !              ---- ! !*      1.2.1  defaults !              -------- ! !* variation of temperature with altitude is neglected ! ZEXNS (:) = 1. ZEXNA (:) = 1. ! !* slope is neglected in drag computation ! ZDIRCOSZW (:) = 1. ! !* roughness length are imposed: ! ZZ0 (:) = PZ0SN ZZ0H (:) = PZ0HSN ! ! !*      1.1    most useful masks !              ----------------- !* snow occurence at previous time-step ! !* snow occurence during the time-step for fluxes computation ! JCOMPT_SNOW1 = 0 JCOMPT_SNOW2 = 0 JCOMPT_SNOW3 = 0 JCOMPT_FLUX = 0 DO JJ = 1 , SIZE ( ZWSNOW ) IF ( ZWSNOW ( JJ ) > 0. ) THEN GSNOWMASK ( JJ ) = . TRUE . !* surface temperature ZTS_SNOW ( JJ ) = TPSNOW % TS ( JJ ) GFLUXMASK ( JJ ) = . TRUE . !gsnowmask=t JCOMPT_SNOW1 = JCOMPT_SNOW1 + 1 JSNOWMASK1 ( JCOMPT_SNOW1 ) = JJ !gfluxmask=t JCOMPT_FLUX = JCOMPT_FLUX + 1 JFLUXMASK ( JCOMPT_FLUX ) = JJ IF ( ZWSNOW ( JJ ) >= ZWSNOW_MIN ) THEN !second snow mask JCOMPT_SNOW3 = JCOMPT_SNOW3 + 1 JSNOWMASK3 ( JCOMPT_SNOW3 ) = JJ ELSE !lower limit of snow cover for prognostic computations !0.1 kg/m2 of snow water content TPSNOW % T ( JJ , 1 ) = MIN ( PTG ( JJ ), XTT ) ENDIF ELSE TPSNOW % T ( JJ , 1 ) = MIN ( PTG ( JJ ), XTT ) !gsnowmask=false JCOMPT_SNOW2 = JCOMPT_SNOW2 + 1 JSNOWMASK2 ( JCOMPT_SNOW2 ) = JJ IF ( PSR ( JJ ) > 0. ) THEN GFLUXMASK ( JJ ) = . TRUE . JCOMPT_FLUX = JCOMPT_FLUX + 1 JFLUXMASK ( JCOMPT_FLUX ) = JJ ENDIF ENDIF ENDDO ! !------------------------------------------------------------------------------- ! !*      1.2    drag !              ---- ! !*      1.2.2   qsat (Tsnow) !              ------------ ! ZQSAT (:) = QSATI ( ZTS_SNOW (:), PPS (:) ) ! !*      1.2.3  Richardson number !              ----------------- ! !* snow is present on all the considered surface. !* computation occurs where snow is and/or falls. ! CALL SURFACE_RI ( ZTS_SNOW , ZQSAT , ZEXNS , ZEXNA , PTA , PQA , & PZREF , PUREF , ZDIRCOSZW , PVMOD , ZRI ) ! !*      1.2.4  Aerodynamical conductance !              ------------------------- ! CALL SURFACE_AERO_COND ( ZRI , PZREF , PUREF , PVMOD , ZZ0 , ZZ0H , ZAC , ZRA , ZCH ) ! !------------------------------------------------------------------------------- ! !*      2.     snow thermal characteristics !              ---------------------------- !cdir nodep DO JJ = 1 , JCOMPT_SNOW1 ! JI = JSNOWMASK1 ( JJ ) ! !*      2.1    snow heat capacity ZSNOW_HC ( JI ) = TPSNOW % RHO ( JI , 1 ) * XCI * XRHOLI / XRHOLW !*      2.2    snow depth ZSNOW_D ( JI ) = ZWSNOW ( JI ) / TPSNOW % RHO ( JI , 1 ) !*      2.3    snow thermal conductivity ZSNOW_TC ( JI ) = XCONDI * ( TPSNOW % RHO ( JI , 1 ) / XRHOLW ) ** 1.885 !*      2.4    internal energy of snow ZEI_SNOW ( JI ) = ZSNOW_HC ( JI ) * ZSNOW_D ( JI ) * TPSNOW % T ( JI , 1 ) ! ENDDO ! !cdir nodep DO JJ = 1 , JCOMPT_SNOW2 ! JI = JSNOWMASK2 ( JJ ) ! !*      2.1    snow heat capacity ZSNOW_HC ( JI ) = PRHOSMIN * XCI * XRHOLI / XRHOLW !*      2.2    snow depth ZSNOW_D ( JI ) = PTSTEP * PSR ( JI ) / PRHOSMIN !*      2.3    snow thermal conductivity ZSNOW_TC ( JI ) = XCONDI * ( PRHOSMIN / XRHOLW ) ** 1.885 !*      2.4    internal energy of snow ZEI_SNOW ( JI ) = 0. ! ENDDO ! !------------------------------------------------------------------------------- ! !*      3.     Snow temperature evolution !              -------------------------- ! !*      3.5    dqsat/ dT (Tsnow) !              ----------------- ! ZDQSATI = DQSATI ( ZTS_SNOW (:), PPS (:), ZQSAT (:)) WHERE ( GSNOWMASK (:) . AND . ZWSNOW (:) >= ZWSNOW_MIN ) ZDQSAT (:) = ZDQSATI (:) END WHERE ! !*      3.1    coefficients from Temperature tendency !              -------------------------------------- ! !cdir nodep DO JJ = 1 , JCOMPT_SNOW3 ! JI = JSNOWMASK3 ( JJ ) ZWORK1 ( JI ) = ZSNOW_D ( JI ) * ZSNOW_HC ( JI ) / PTSTEP ! ZB ( JI ) = ZB ( JI ) + ZWORK1 ( JI ) ! !*      3.2    coefficients from solar radiation !          --------------------------------- ! ZY ( JI ) = ZY ( JI ) + ZWORK1 ( JI ) * TPSNOW % T ( JI , 1 ) + PABS_SW ( JI ) ! ! !*      3.3    coefficients from infra-red radiation !              ------------------------------------- ! ZWORK1 ( JI ) = PLW2 ( JI ) * TPSNOW % T ( JI , 1 ) ** 3 ! ZB ( JI ) = ZB ( JI ) - 4 * ZIMPL * ZWORK1 ( JI ) ! ZY ( JI ) = ZY ( JI ) + PLW1 ( JI ) + ZWORK1 ( JI ) * ( ZEXPL - 3. * ZIMPL ) * TPSNOW % T ( JI , 1 ) ! ! !*      3.4    coefficients from sensible heat flux !              ------------------------------------ ! ZWORK1 ( JI ) = XCPD * PRHOA ( JI ) * ZAC ( JI ) ! ZB ( JI ) = ZB ( JI ) + ZWORK1 ( JI ) * ZIMPL ! ZY ( JI ) = ZY ( JI ) - ZWORK1 ( JI ) * ( ZEXPL * TPSNOW % T ( JI , 1 ) - PTA ( JI ) ) ! ! !*      3.6    coefficients from latent heat flux !              ---------------------------------- ! ZWORK1 ( JI ) = XLSTT * PRHOA ( JI ) * ZAC ( JI ) ! ZB ( JI ) = ZB ( JI ) + ZWORK1 ( JI ) * ZIMPL * ZDQSAT ( JI ) ! ZY ( JI ) = ZY ( JI ) - ZWORK1 ( JI ) * ( ZQSAT ( JI ) - PQA ( JI ) - ZIMPL * ZDQSAT ( JI ) * TPSNOW % T ( JI , 1 ) ) ! !*      3.7    coefficients from conduction flux at snow base !              ---------------------------------------------- ! ZWORK1 ( JI ) = ZSNOW_TC ( JI ) / ( 0.5 * ZSNOW_D ( JI )) ! ZB ( JI ) = ZB ( JI ) + ZWORK1 ( JI ) * ZIMPL / ( 1. + ZWORK1 ( JI ) * PTG_COEFA ( JI ) ) ! ZY ( JI ) = ZY ( JI ) - ZWORK1 ( JI ) * ( ZEXPL * TPSNOW % T ( JI , 1 ) - PTG_COEFB ( JI )) & / ( 1. + ZWORK1 ( JI ) * PTG_COEFA ( JI ) ) ! !*      3.8    guess of snow temperature before accumulation and melting !              --------------------------------------------------------- ! TPSNOW % T ( JI , 1 ) = ZY ( JI ) / ZB ( JI ) ! ENDDO ! !------------------------------------------------------------------------------- ! !*      4.     Snow melt !              --------- ! !*      4.1    melting !              ------- ! !cdir nodep DO JJ = 1 , JCOMPT_SNOW1 ! JI = JSNOWMASK1 ( JJ ) ! ZMELT ( JI ) = MAX ( TPSNOW % T ( JI , 1 ) - XTT , 0. ) * ZSNOW_HC ( JI ) / XLMTT / PTSTEP ! ZMELT ( JI ) = MIN ( ZMELT ( JI ) , ZWSNOW ( JI ) / ZSNOW_D ( JI ) / PTSTEP ) ! TPSNOW % T ( JI , 1 ) = MIN ( TPSNOW % T ( JI , 1 ) , XTT ) ! ENDDO ! !*      4.2    run-off of all snow if lower surface temperature is positive !              ------------------------------------------------------------ ! !* this option is used when snow is located on sloping roofs for example. ! IF ( OALL_MELT ) THEN WHERE ( GSNOWMASK (:) . AND . PTG (:) > XTT . AND . ZWSNOW (:) >= ZWSNOW_MIN ) PMELT (:) = PMELT (:) + ZWSNOW (:) / PTSTEP END WHERE END IF ! !*      4.3    output melting in kg/m2/s !              ------------------------- ! PMELT (:) = ZMELT (:) * ZSNOW_D (:) ! !------------------------------------------------------------------------------- ! !*      5.     fluxes !              ------ ! !*      5.3    qsat (Tsnow) !              ------------ ! ZQSATI = QSATI ( TPSNOW % T (:, 1 ), PPS (:)) WHERE ( GFLUXMASK (:)) ZQSAT (:) = ZQSATI (:) END WHERE ! !*      5.1    net radiation (with Ts lin. extrapolation) !              ------------- ! !cdir nodep DO JJ = 1 , JCOMPT_FLUX ! JI = JFLUXMASK ( JJ ) ! PABS_LW ( JI ) = PLW1 ( JI ) + PLW2 ( JI ) * TPSNOW % T ( JI , 1 ) ** 4 ! PRNSNOW ( JI ) = PABS_SW ( JI ) + PABS_LW ( JI ) ! ! !*      5.2    sensible heat flux !              ------------------ ! PHSNOW ( JI ) = XCPD * PRHOA ( JI ) * ZAC ( JI ) * ( TPSNOW % T ( JI , 1 ) - PTA ( JI ) ) ! ! !*      5.4    latent heat flux !              ---------------- ! PLESNOW ( JI ) = XLSTT * PRHOA ( JI ) * ZAC ( JI ) * ( ZQSAT ( JI ) - PQA ( JI ) ) ! ! !*      5.5    Conduction heat flux !              -------------------- ! !PGSNOW(JI) = ZSNOW_TC(JI)/(0.5*ZSNOW_D(JI)) * ( TPSNOW%T(JI,1) - PTG(JI) ) PGSNOW ( JI ) = ZSNOW_TC ( JI ) / ( 0.5 * ZSNOW_D ( JI )) * ( TPSNOW % T ( JI , 1 ) - PTG_COEFB ( JI ) ) & / ( 1. + ZSNOW_TC ( JI ) / ( 0.5 * ZSNOW_D ( JI )) * PTG_COEFA ( JI ) ) ! ! !*      5.6    If ground T>0 C, Melting is estimated from conduction heat flux !              --------------------------------------------------------------- ! IF ( PTG ( JI ) > XTT ) PMELT ( JI ) = MAX ( PMELT ( JI ), - PGSNOW ( JI ) / XLMTT ) ! ENDDO ! !------------------------------------------------------------------------------- ! !*      6.     reservoir evolution !              ------------------- ! !cdir nodep DO JJ = 1 , SIZE ( TPSNOW % WSNOW , 1 ) ! !*      6.1    snow fall !              --------- ! TPSNOW % WSNOW ( JJ , 1 ) = TPSNOW % WSNOW ( JJ , 1 ) + PTSTEP * PSR ( JJ ) ! ! !*      6.2    sublimation !              ----------- ! PLESNOW ( JJ ) = MIN ( PLESNOW ( JJ ), XLSTT * TPSNOW % WSNOW ( JJ , 1 ) / PTSTEP ) ! TPSNOW % WSNOW ( JJ , 1 ) = MAX ( TPSNOW % WSNOW ( JJ , 1 ) - PTSTEP * PLESNOW ( JJ ) / XLSTT , 0. ) ! IF ( TPSNOW % WSNOW ( JJ , 1 ) < 1.E-8 * PTSTEP ) TPSNOW % WSNOW ( JJ , 1 ) = 0. ! !*      6.3    melting !              ------- ! PMELT ( JJ ) = MIN ( PMELT ( JJ ), TPSNOW % WSNOW ( JJ , 1 ) / PTSTEP ) ! TPSNOW % WSNOW ( JJ , 1 ) = MAX ( TPSNOW % WSNOW ( JJ , 1 ) - PTSTEP * PMELT ( JJ ) , 0. ) ! IF ( TPSNOW % WSNOW ( JJ , 1 ) < 1.E-8 * PTSTEP ) TPSNOW % WSNOW ( JJ , 1 ) = 0. ! IF ( TPSNOW % WSNOW ( JJ , 1 ) == 0. ) PGSNOW ( JJ ) = MAX ( PGSNOW ( JJ ), - PMELT ( JJ ) * XLMTT ) ! ENDDO ! !*      6.4    time dependent drainage !              ----------------------- ! IF ( PDRAIN_TIME > 0. ) THEN WHERE ( TPSNOW % WSNOW (:, 1 ) > 0. ) TPSNOW % WSNOW (:, 1 ) = TPSNOW % WSNOW (:, 1 ) * EXP ( - PTSTEP / PDRAIN_TIME / XDAY ) END WHERE END IF ! !*      6.5    melting of last 1mm of snow depth !              --------------------------------- ! WHERE ( TPSNOW % WSNOW (:, 1 ) < ZWSNOW_MIN . AND . PMELT (:) > 0. . AND . PSR (:) == 0. ) PMELT (:) = PMELT (:) + TPSNOW % WSNOW (:, 1 ) / PTSTEP TPSNOW % WSNOW (:, 1 ) = 0. END WHERE ! WHERE ( TPSNOW % WSNOW (:, 1 ) < 1.E-8 * PTSTEP ) TPSNOW % WSNOW (:, 1 ) = 0. END WHERE ! !------------------------------------------------------------------------------- ! !*      7.     albedo evolution !              ---------------- ! !*      7.1    If melting occurs or not !              ----------------------- ! ! !cdir nodep DO JJ = 1 , JCOMPT_SNOW1 ! JI = JSNOWMASK1 ( JJ ) ! IF ( PMELT ( JI ) > 0. ) THEN ! TPSNOW % ALB ( JI ) = ( TPSNOW % ALB ( JI ) - PANSMIN ) * EXP ( - PRHOFOLD * PTSTEP / XDAY ) + PANSMIN & + PSR ( JI ) * PTSTEP / PWCRN * PANSMAX ! ELSEIF ( PMELT ( JI ) == 0. ) THEN TPSNOW % ALB ( JI ) = TPSNOW % ALB ( JI ) - PTODRY * PTSTEP / XDAY + PSR ( JI ) * PTSTEP / PWCRN * PANSMAX ! ENDIF ! ENDDO ! !------------------------------------------------------------------------------- ! !*      8.     density evolution !              ----------------- ! !*      8.1    old snow !              -------- ! !cdir nodep DO JJ = 1 , JCOMPT_SNOW1 ! JI = JSNOWMASK1 ( JJ ) ! IF ( TPSNOW % WSNOW ( JI , 1 ) > 0. ) THEN ! ZSR1 ( JI ) = MAX ( TPSNOW % WSNOW ( JI , 1 ) , PSR ( JI ) * PTSTEP ) ! TPSNOW % RHO ( JI , 1 ) = ( TPSNOW % RHO ( JI , 1 ) - PRHOSMAX ) * EXP ( - PRHOFOLD * PTSTEP / XDAY ) + PRHOSMAX TPSNOW % RHO ( JI , 1 ) = ( ( ZSR1 ( JI ) - PSR ( JI ) * PTSTEP ) * TPSNOW % RHO ( JI , 1 ) & + ( PSR ( JI ) * PTSTEP ) * PRHOSMIN ) / ZSR1 ( JI ) ENDIF ! ENDDO ! !*      8.2    fresh snow !              ---------- ! !cdir nodep DO JJ = 1 , SIZE ( TPSNOW % WSNOW , 1 ) IF ( TPSNOW % WSNOW ( JJ , 1 ) > 0. ) THEN TPSNOW % ALB ( JJ ) = MAX ( TPSNOW % ALB ( JJ ), PANSMIN ) TPSNOW % ALB ( JJ ) = MIN ( TPSNOW % ALB ( JJ ), PANSMAX ) IF ( ZWSNOW ( JJ ) == 0. ) THEN TPSNOW % ALB ( JJ ) = PANSMAX TPSNOW % EMIS ( JJ ) = XEMISSN TPSNOW % RHO ( JJ , 1 ) = PRHOSMIN ENDIF ENDIF ENDDO ! !------------------------------------------------------------------------------- ! !*      9.     fresh snow accumulation (if more than 1mm of snow depth) !              ----------------------- ! !cdir nodep DO JJ = 1 , JCOMPT_SNOW3 ! JI = JSNOWMASK3 ( JJ ) ! IF ( PSR ( JI ) > 0. . AND . TPSNOW % WSNOW ( JI , 1 ) > 0. ) THEN ! ZSR2 ( JI ) = MIN ( TPSNOW % WSNOW ( JI , 1 ) , PSR ( JI ) * PTSTEP ) ! TPSNOW % T ( JI , 1 ) = ( ( TPSNOW % WSNOW ( JI , 1 ) - ZSR2 ( JI ) ) * TPSNOW % T ( JI , 1 ) & + ZSR2 ( JI ) * MIN ( PTA ( JI ) , XTT )) / ( TPSNOW % WSNOW ( JI , 1 ) ) ENDIF ! ENDDO ! !------------------------------------------------------------------------------- ! !*     10.     Surface temperature !              ------------------- ! !* note that if the relation between snow pack temperature and its !  surface temperature is modified, think to modify it also in !  subroutine init_snow_lw.f90 ! WHERE ( GSNOWMASK (:) ) TPSNOW % TS (:) = TPSNOW % T (:, 1 ) END WHERE ! !------------------------------------------------------------------------------- ! !*     11.     bogus values !              ------------ ! !*     11.1    snow characteristics where snow IS present at current time-step !              --------------------------------------------------------------- ! WHERE ( TPSNOW % WSNOW (:, 1 ) == 0. ) TPSNOW % T (:, 1 ) = XUNDEF TPSNOW % RHO (:, 1 ) = XUNDEF TPSNOW % ALB (:) = XUNDEF TPSNOW % TS (:) = XUNDEF TPSNOW % EMIS (:) = XUNDEF END WHERE ! ! !------------------------------------------------------------------------------- ! !*     12.     Heat storage inside snow pack ! WHERE ( GSNOWMASK (:)) ZPEI_SNOW (:) = ZSNOW_HC (:) * ZSNOW_D (:) * TPSNOW % T (:, 1 ) ELSEWHERE ZPEI_SNOW (:) = 0. END WHERE PDQS_SNOW (:) = ( ZPEI_SNOW (:) - ZEI_SNOW (:)) / PTSTEP ! IF ( LHOOK ) CALL DR_HOOK ( 'SNOW_COVER_1LAYER' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END SUBROUTINE SNOW_COVER_1LAYER","tags":"","loc":"sourcefile/snow_cover_1layer.f90.html"},{"title":"urban_lw_coef.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines URBAN_LW_COEF Source Code urban_lw_coef.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !   ########################################################################## SUBROUTINE URBAN_LW_COEF ( B , T , PLW_RAD , PEMIS_G , PTS_SR , PTS_G , & PLW_WA_TO_WB , PLW_WA_TO_R , PLW_WB_TO_R , & PLW_WA_TO_NR , PLW_WB_TO_NR , & PLW_WA_TO_G , PLW_WB_TO_G , & PLW_WA_TO_WIN , PLW_WB_TO_WIN , & PLW_R_TO_WA , PLW_R_TO_WB , PLW_R_TO_WIN , & PLW_G_TO_WA , PLW_G_TO_WB , PLW_G_TO_WIN , & PLW_S_TO_WA , PLW_S_TO_WB , PLW_S_TO_R , & PLW_S_TO_NR , PLW_S_TO_G , PLW_S_TO_WIN , & PLW_WIN_TO_WA , PLW_WIN_TO_WB , PLW_WIN_TO_R , & PLW_WIN_TO_NR , PLW_WIN_TO_G , & PLW_NR_TO_WA , PLW_NR_TO_WB , PLW_NR_TO_WIN ) !   ########################################################################## ! !!****  *URBAN_LW_COEF* !! !!    PURPOSE !!    ------- ! !     Computes the coefficients before each of the temperatures in the !     radiative budgets ! ! !!**  METHOD !     ------ ! ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    08/09/98 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_BEM_n , ONLY : BEM_t USE MODD_TEB_n , ONLY : TEB_t ! USE MODD_CSTS , ONLY : XSTEFAN USE MODD_SURF_PAR , ONLY : XUNDEF ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_t ), INTENT ( INOUT ) :: T ! REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! incoming LW radiation REAL , DIMENSION (:), INTENT ( IN ) :: PEMIS_G ! GARDEN area emissivity ! REAL , DIMENSION (:), INTENT ( IN ) :: PTS_G ! garden surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_SR ! snow surface temperature ! REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WA_TO_WB ! L.W. interactions wall->opposite wall REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WA_TO_R ! L.W. interactions wall->road for road balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WB_TO_R ! L.W. interactions wall->road for road balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WA_TO_NR ! L.W. interactions wall->snow for snow balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WB_TO_NR ! L.W. interactions wall->snow for snow balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WA_TO_G ! L.W. interactions wall->GARDEN areas for garden balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WB_TO_G ! L.W. interactions wall->GARDEN areas for garden balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WA_TO_WIN ! L.W. interactions wall->win for window balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WB_TO_WIN ! L.W. interactions wall->win for window balance ! REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_R_TO_WA ! L.W. interactions road->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_R_TO_WB ! L.W. interactions road->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_R_TO_WIN ! L.W. interactions road->win for win balance ! REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_G_TO_WA ! L.W. interactions GARDEN areas->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_G_TO_WB ! L.W. interactions GARDEN areas->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_G_TO_WIN ! L.W. interactions GARDEN areas->road for window balance ! REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_WA ! L.W. interactions sky->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_WB ! L.W. interactions sky->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_R ! L.W. interactions sky->road for raod balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_NR ! L.W. interactions sky->snow for snow balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_G ! L.W. interactions sky->GARDEN areas for garden balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_WIN ! L.W. interactions sky->win for window balance ! REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WIN_TO_WA ! L.W. interactions win->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WIN_TO_WB ! L.W. interactions win->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WIN_TO_R ! L.W. interactions win->road for road balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WIN_TO_NR ! L.W. interactions win->GARDEN areas for snow balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WIN_TO_G ! L.W. interactions win->GARDEN areas for garden balance ! REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_NR_TO_WA ! L.W. interactions snow(road)->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_NR_TO_WB ! L.W. interactions snow(road)->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_NR_TO_WIN ! L.W. interactions snow(road)->WIN areas for window balance ! !*      0.2    declarations of local variables ! REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZT_S ! sky temperature ! REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZEMIS_WIN REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_W_W REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_R_W REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_R_WIN REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_W_R REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_W_G REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_W_WIN REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_W_NR REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_WIN_W REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_WIN_R REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_WIN_G REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_WIN_NR REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_G_W REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_G_WIN ! REAL :: ZE1 , ZE2 , ZF , ZT1 , ZT2 , ZLW ZLW ( ZE1 , ZE2 , ZF , ZT1 , ZT2 ) = 4. * XSTEFAN * ZE1 * ZE2 * ZF * (( ZT1 + ZT2 ) / 2. ) ** 3 ! INTEGER :: JJ REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_LW_COEF' , 0 , ZHOOK_HANDLE ) ! ZT_S (:) = ( PLW_RAD (:) / XSTEFAN ) ** 0.25 ! DO JJ = 1 , SIZE ( T % XROAD ) ! ZEMIS_WIN ( JJ ) = 0.84 !from Energy Plus Engineering Reference, p219 ! see http://apps1.eere.energy.gov/buildings/energyplus/ ! ZF_W_R ( JJ ) = T % XSVF_WALL ( JJ ) * ( T % XROAD ( JJ ) / ( 1. - T % XBLD ( JJ ))) ZF_W_G ( JJ ) = T % XSVF_WALL ( JJ ) * ( T % XGARDEN ( JJ ) / ( 1. - T % XBLD ( JJ ))) ZF_W_NR ( JJ ) = T % XSVF_WALL ( JJ ) ! ZF_WIN_R ( JJ ) = ZF_W_R ( JJ ) ZF_WIN_G ( JJ ) = ZF_W_G ( JJ ) ZF_WIN_NR ( JJ ) = ZF_W_NR ( JJ ) ! ZF_R_W ( JJ ) = ( 1 - T % XSVF_ROAD ( JJ )) * ( 1. - B % XGR ( JJ )) * 0.5 ZF_R_WIN ( JJ ) = ( 1 - T % XSVF_ROAD ( JJ )) * B % XGR ( JJ ) ! ZF_G_W ( JJ ) = ZF_R_W ( JJ ) ZF_G_WIN ( JJ ) = ZF_R_WIN ( JJ ) ! ZF_WIN_W ( JJ ) = ( 1. - 2. * T % XSVF_WALL ( JJ )) * ( 1. - B % XGR ( JJ )) ZF_W_W ( JJ ) = ( 1. - 2. * T % XSVF_WALL ( JJ )) * ( 1. - B % XGR ( JJ )) ZF_W_WIN ( JJ ) = ( 1. - 2. * T % XSVF_WALL ( JJ )) * B % XGR ( JJ ) ! ! PLW_WA_TO_WB ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_W ( JJ ), T % XT_WALL_A ( JJ , 1 ), T % XT_WALL_B ( JJ , 1 )) ! PLW_WA_TO_R ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), T % XEMIS_ROAD ( JJ ), ZF_R_W ( JJ ), T % XT_WALL_A ( JJ , 1 ), T % XT_ROAD ( JJ , 1 )) PLW_WB_TO_R ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), T % XEMIS_ROAD ( JJ ), ZF_R_W ( JJ ), T % XT_WALL_B ( JJ , 1 ), T % XT_ROAD ( JJ , 1 )) PLW_R_TO_WA ( JJ ) = ZLW ( T % XEMIS_ROAD ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_R ( JJ ), T % XT_ROAD ( JJ , 1 ), T % XT_WALL_A ( JJ , 1 )) PLW_R_TO_WB ( JJ ) = ZLW ( T % XEMIS_ROAD ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_R ( JJ ), T % XT_ROAD ( JJ , 1 ), T % XT_WALL_B ( JJ , 1 )) ! IF ( SIZE ( PTS_G ) > 0 ) THEN PLW_WA_TO_G ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), PEMIS_G ( JJ ), ZF_G_W ( JJ ), T % XT_WALL_A ( JJ , 1 ), PTS_G ( JJ )) PLW_WB_TO_G ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), PEMIS_G ( JJ ), ZF_G_W ( JJ ), T % XT_WALL_B ( JJ , 1 ), PTS_G ( JJ )) PLW_G_TO_WA ( JJ ) = ZLW ( PEMIS_G ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_G ( JJ ), PTS_G ( JJ ), T % XT_WALL_A ( JJ , 1 )) PLW_G_TO_WB ( JJ ) = ZLW ( PEMIS_G ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_G ( JJ ), PTS_G ( JJ ), T % XT_WALL_B ( JJ , 1 )) ELSE PLW_WA_TO_G ( JJ ) = 0. PLW_WB_TO_G ( JJ ) = 0. PLW_G_TO_WA ( JJ ) = 0. PLW_G_TO_WB ( JJ ) = 0. ENDIF ! ! IF ( PTS_SR ( JJ ) . EQ . XUNDEF ) THEN PLW_WA_TO_NR ( JJ ) = 0. PLW_WB_TO_NR ( JJ ) = 0. PLW_NR_TO_WA ( JJ ) = 0. PLW_NR_TO_WB ( JJ ) = 0. ! PLW_WIN_TO_NR ( JJ ) = 0. PLW_NR_TO_WIN ( JJ ) = 0 ! PLW_S_TO_NR ( JJ ) = 0. ELSE PLW_WA_TO_NR ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), T % TSNOW_ROAD % EMIS ( JJ ), ZF_R_W ( JJ ), T % XT_WALL_A ( JJ , 1 ), PTS_SR ( JJ )) PLW_WB_TO_NR ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), T % TSNOW_ROAD % EMIS ( JJ ), ZF_R_W ( JJ ), T % XT_WALL_B ( JJ , 1 ), PTS_SR ( JJ )) PLW_NR_TO_WA ( JJ ) = ZLW ( T % TSNOW_ROAD % EMIS ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_NR ( JJ ), PTS_SR ( JJ ), T % XT_WALL_A ( JJ , 1 )) PLW_NR_TO_WB ( JJ ) = ZLW ( T % TSNOW_ROAD % EMIS ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_NR ( JJ ), PTS_SR ( JJ ), T % XT_WALL_B ( JJ , 1 )) ! PLW_WIN_TO_NR ( JJ ) = ZLW ( ZEMIS_WIN ( JJ ), T % TSNOW_ROAD % EMIS ( JJ ), ZF_R_WIN ( JJ ), B % XT_WIN1 ( JJ ), PTS_SR ( JJ )) PLW_NR_TO_WIN ( JJ ) = ZLW ( T % TSNOW_ROAD % EMIS ( JJ ), ZEMIS_WIN ( JJ ), ZF_WIN_NR ( JJ ), PTS_SR ( JJ ), B % XT_WIN1 ( JJ )) ! PLW_S_TO_NR ( JJ ) = ZLW ( 1. , T % TSNOW_ROAD % EMIS ( JJ ), T % XSVF_ROAD ( JJ ), ZT_S ( JJ ), PTS_SR ( JJ )) ENDIF ! PLW_WIN_TO_R ( JJ ) = ZLW ( ZEMIS_WIN ( JJ ), T % XEMIS_ROAD ( JJ ), ZF_R_WIN ( JJ ), B % XT_WIN1 ( JJ ), T % XT_ROAD ( JJ , 1 )) PLW_R_TO_WIN ( JJ ) = ZLW ( T % XEMIS_ROAD ( JJ ), ZEMIS_WIN ( JJ ), ZF_WIN_R ( JJ ), T % XT_ROAD ( JJ , 1 ), B % XT_WIN1 ( JJ )) ! IF ( SIZE ( PTS_G ) > 0 ) THEN PLW_WIN_TO_G ( JJ ) = ZLW ( ZEMIS_WIN ( JJ ), PEMIS_G ( JJ ), ZF_G_WIN ( JJ ), B % XT_WIN1 ( JJ ), PTS_G ( JJ )) PLW_G_TO_WIN ( JJ ) = ZLW ( PEMIS_G ( JJ ), ZEMIS_WIN ( JJ ), ZF_WIN_G ( JJ ), PTS_G ( JJ ), B % XT_WIN1 ( JJ )) ELSE PLW_WIN_TO_G ( JJ ) = 0. PLW_G_TO_WIN ( JJ ) = 0. ENDIF ! PLW_WIN_TO_WA ( JJ ) = ZLW ( ZEMIS_WIN ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_WIN ( JJ ), B % XT_WIN1 ( JJ ), T % XT_WALL_A ( JJ , 1 )) PLW_WIN_TO_WB ( JJ ) = ZLW ( ZEMIS_WIN ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_WIN ( JJ ), B % XT_WIN1 ( JJ ), T % XT_WALL_B ( JJ , 1 )) PLW_WA_TO_WIN ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), ZEMIS_WIN ( JJ ), ZF_WIN_W ( JJ ), T % XT_WALL_A ( JJ , 1 ), B % XT_WIN1 ( JJ )) PLW_WB_TO_WIN ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), ZEMIS_WIN ( JJ ), ZF_WIN_W ( JJ ), T % XT_WALL_B ( JJ , 1 ), B % XT_WIN1 ( JJ )) ! PLW_S_TO_WIN ( JJ ) = ZLW ( 1. , ZEMIS_WIN ( JJ ), T % XSVF_WALL ( JJ ), ZT_S ( JJ ), B % XT_WIN1 ( JJ )) ! PLW_S_TO_WA ( JJ ) = ZLW ( 1. , T % XEMIS_WALL ( JJ ), T % XSVF_WALL ( JJ ), ZT_S ( JJ ), T % XT_WALL_A ( JJ , 1 )) PLW_S_TO_WB ( JJ ) = ZLW ( 1. , T % XEMIS_WALL ( JJ ), T % XSVF_WALL ( JJ ), ZT_S ( JJ ), T % XT_WALL_B ( JJ , 1 )) ! IF ( SIZE ( PTS_G ) > 0 ) THEN PLW_S_TO_G ( JJ ) = ZLW ( 1. , PEMIS_G ( JJ ), T % XSVF_ROAD ( JJ ), ZT_S ( JJ ), PTS_G ( JJ )) ENDIF PLW_S_TO_R ( JJ ) = ZLW ( 1. , T % XEMIS_ROAD ( JJ ), T % XSVF_ROAD ( JJ ), ZT_S ( JJ ), T % XT_ROAD ( JJ , 1 )) PLW_S_TO_NR ( JJ ) = ZLW ( 1. , T % TSNOW_ROAD % EMIS ( JJ ), T % XSVF_ROAD ( JJ ), ZT_S ( JJ ), PTS_SR ( JJ )) ! ENDDO !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_LW_COEF' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE URBAN_LW_COEF","tags":"","loc":"sourcefile/urban_lw_coef.f90.html"},{"title":"dx_air_cooling_coil_cv.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines DX_AIR_COOLING_COIL_CV Source Code dx_air_cooling_coil_cv.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. SUBROUTINE DX_AIR_COOLING_COIL_CV ( PT_CANYON , PQ_CANYON , PPS , PRHOA , & PT_IN , PQ_IN , PCOP_RAT , PCAP_SYS_RAT , & PT_ADP , PF_WATER_COND , & PM_SYS , PH_BLD_COOL , PH_WASTE , PLE_WASTE , & PCOP , PCAP_SYS , PT_OUT , PQ_OUT , & PDX_POWER , PT_BLD_COOL ) ! USE MODE_THERMOS USE MODE_PSYCHRO ! USE MODD_CSTS , ONLY : XCPD ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! ! Extracted from EP_Engineer_ref p. 518 ! REAL , INTENT ( IN ) :: PT_CANYON ! Canyon air temperature [K] REAL , INTENT ( IN ) :: PQ_CANYON ! Canyon air humidity ratio [kg kg-1] REAL , INTENT ( IN ) :: PPS ! Canyon air pressure [Pa] REAL , INTENT ( IN ) :: PRHOA ! Canyon air density [kg m-3] REAL , INTENT ( IN ) :: PT_IN ! Actual inlet air temperature [K] REAL , INTENT ( IN ) :: PQ_IN ! Actual inlet air humidity ratio [kg kg-1] REAL , INTENT ( IN ) :: PCOP_RAT ! Rated COP REAL , INTENT ( IN ) :: PCAP_SYS_RAT ! Rated capacity [W] REAL , INTENT ( IN ) :: PT_ADP ! Apparatus dewpoint [K] REAL , INTENT ( IN ) :: PF_WATER_COND ! fraction of evaporation of the condenser REAL , INTENT ( INOUT ) :: PM_SYS ! HVAC air mass flow rate [kg s-1] REAL , INTENT ( INOUT ) :: PH_BLD_COOL ! Sensible cooling load REAL , INTENT ( OUT ) :: PH_WASTE ! Sensible heat rejected by the condenser [W] REAL , INTENT ( OUT ) :: PLE_WASTE ! Latent heat rejected by the condenser [W] REAL , INTENT ( OUT ) :: PCOP ! Actual COP REAL , INTENT ( OUT ) :: PCAP_SYS ! Actual capacity [W] REAL , INTENT ( OUT ) :: PT_OUT ! Actual outlet temperature [K] REAL , INTENT ( OUT ) :: PQ_OUT ! Actual outlet humidity ratio [kg kg-1] REAL , INTENT ( OUT ) :: PDX_POWER ! Electrical power consumed by the DX unit [W] REAL , INTENT ( OUT ) :: PT_BLD_COOL ! Total energy supplied by the DX unit [W] ! REAL :: ZTWB_CANYON ! Canyon air wet-bulb temperature [ K] REAL :: ZCAPTEMP ! Total cooling capacity modifier curve function of temperature REAL :: ZTW_IN ! Wet-bulb temperature of the air entering the coil [ K] REAL :: ZT_COND ! Dry-bulb or wet-bulb air temperature entering the condenser [K] REAL :: ZEIRTEMP ! Energy input ratio modifier curve function of temperature REAL :: ZPLR ! Part load ratio REAL :: ZPARTLOADF ! Part load fraction correlation REAL :: ZSHR ! Actual coil sensible heat rate REAL :: ZH_ADP ! Enthalpy of air at ADP conditions [J/kg] REAL :: ZH_OUT ! Enthalpy of air leaving the cooling coil [J/kg] REAL :: ZH_IN ! Enthalpy of air entering the cooling coil [J/kg] ! Performance curves coefficients REAL :: ZA1 REAL :: ZB1 REAL :: ZC1 REAL :: ZD1 REAL :: ZE1 REAL :: ZF1 ! Total cooling capacity modifier curve function of flow fraction (desactivated) !REAL :: ZCAPFLOW !REAL :: ZA2 !REAL :: ZB2 !REAL :: ZC2 REAL :: ZA3 REAL :: ZB3 REAL :: ZC3 REAL :: ZD3 REAL :: ZE3 REAL :: ZF3 ! Energy input ratio modifier curve function of flow fraction (desactivated) !REAL :: ZEIRFLOW !REAL :: ZA4 !REAL :: ZB4 !REAL :: ZC4 REAL :: ZA5 REAL :: ZB5 REAL :: ZC5 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'DX_AIR_COOLING_COIL_CV' , 0 , ZHOOK_HANDLE ) ! !*      A.     Definitions !              ----------- ! ! !*      B.     Performance curves !              ------------------ ! Total cooling capacity modifier curve function of temperature ! Obtained from default vaules of EnergyPlus SingleSpeedDX ! DOE-2.1E, COOL-CAP-FT for PTAC w/ SI temps !  FurnaceDX DX Coil Cap-FT, Minimum Value of x, 12.77778; !                            Maximum Value of x, 23.88889; !                            Minimum Value of y, 23.88889; !                            Maximum Value of y, 46.11111 ZA1 = 0.942587793 !- Coefficient1 Constant ZB1 = 0.009543347 !- Coefficient2 x ZC1 = 0.00068377 !- Coefficient3 x**2 ZD1 = - 0.011042676 !- Coefficient4 y ZE1 = 0.000005249 !- Coefficient5 y**2 ZF1 = - 0.00000972 !- Coefficient6 x*y ! Total cooling capacity modifier curve function of flow fraction ! DOE-2.1E, RATED-CCAP-FFLOW for PTAC !  FurnaceDX DX Coil Cap-FF, Minimum Value of x, 0.5; !                            Maximum Value of x, 1.5; !ZA2 =  0.8           !- Coefficient1 Constant !ZB2 =  0.2           !- Coefficient2 x !ZC2 =  0             !- Coefficient3 x**2 ! Energy input ratio modifier curve function of temperature ! DOE-2.1E, COOL-EIR-FT for PTAC w/ SI temps !  FurnaceDX DX Coil EIR-FT,  Minimum Value of x, 12.77778; !                            Maximum Value of x, 23.88889; !                            Minimum Value of y, 23.88889; !                            Maximum Value of y, 46.11111 ZA3 = 0.342414409 !- Coefficient1 Constant ZB3 = 0.034885008 !- Coefficient2 x ZC3 = - 0.0006237 !- Coefficient3 x**2 ZD3 = 0.004977216 !- Coefficient4 y ZE3 = 0.000437951 !- Coefficient5 y**2 ZF3 = - 0.000728028 !- Coefficient6 x*y ! Energy input ratio modifier curve function of flow fraction ! DOE-2.1E, RATED-CEIR-FFLOW for PTAC !  FurnaceDX DX Coil EIR-FF, Minimum Value of x, 0.5; !                            Maximum Value of x, 1.5; !ZA4 = 1.1552         !- Coefficient1 Constant !ZB4 = -0.1808        !- Coefficient2 x !ZC4 = 0.0256         !- Coefficient3 x**2 ! Part load fraction correlation ! PLF = l.- Cd(1.-PLR) where Cd = 0.15 !  FurnaceDX DX Coil PLF, Minimum Value of x, 0.0; !                         Maximum Value of x, 1.0; ZA5 = 0.85 !- Coefficient1 Constant ZB5 = 0.15 !- Coefficient2 x ZC5 = 0 !- Coefficient3 x**2 ! ! !*      C.     Total cooling capacity !              ---------------------- ! IF ( PM_SYS / PRHOA / PCAP_SYS_RAT < 0.00004027 ) THEN PM_SYS = 0.00004027 * PCAP_SYS_RAT * PRHOA !     PRINT*,'ERROR: HVAC supply air flow rate must be greater than 0.00004027m3/s/W' ELSE IF ( PM_SYS / PRHOA / PCAP_SYS_RAT > 0.00006041 ) THEN PM_SYS = 0.00006041 * PCAP_SYS_RAT * PRHOA !     PRINT*,'ERROR: HVAC supply air flow rate must be lower than 0.00006041m3/s/W' END IF ! ! Wet-bulb temperature entering the cooling coil ZTW_IN = TWB_FROM_TPQ ( PT_IN , PPS , PQ_IN ) ! ! Dry-bulb temperature of the air entering an air-cooled condenser ! or wet-bulb temp entering a water-cooled condenser ZTWB_CANYON = TWB_FROM_TPQ ( PT_CANYON , PPS , PQ_CANYON ) ZT_COND = ZTWB_CANYON + ( PT_CANYON - ZTWB_CANYON ) * ( 1. - PF_WATER_COND ) ! ! Total cooling capacity modifier curve function of temperature ZCAPTEMP = ZA1 + ( ZTW_IN - 27 3.15 ) * ( ZB1 + ZC1 * ( ZTW_IN - 27 3.15 )) & + ( ZT_COND - 27 3.15 ) * ( ZD1 + ZE1 * ( ZT_COND - 27 3.15 )) & + ( ZTW_IN - 27 3.15 ) * ( ZT_COND - 27 3.15 ) * ZF1 ! ! Total cooling capacity PCAP_SYS = PCAP_SYS_RAT * ZCAPTEMP ! !*      D. Coil outlet conditions !          ---------------------- ! ! Inlet air enthalpy ZH_IN = ENTH_FN_T_Q ( PT_IN , PQ_IN ) ! Apparatus dewpoint enthalpy ZH_ADP = ENTH_FN_T_Q ( PT_ADP , QSAT ( PT_ADP , PPS )) ! ! Cooling coil sensible heat rate IF ( ZH_IN - ZH_ADP < 1 0. ) THEN ! ZSHR = 1. ! PT_OUT = PT_ADP PQ_OUT = PQ_IN ZH_OUT = ENTH_FN_T_Q ( PT_OUT , PQ_OUT ) PT_BLD_COOL = 0.0 ! ELSE ! ZSHR = MIN ( XCPD * ( PT_IN - PT_ADP ) / ( ZH_IN - ZH_ADP ), 1. ) ! ! ! Thermal load limited by the system capacity IF ( PH_BLD_COOL > PCAP_SYS * ZSHR ) PH_BLD_COOL = PCAP_SYS * ZSHR ! ! Outlet air temperature PT_OUT = PT_IN - PH_BLD_COOL / PM_SYS / XCPD IF ( PT_OUT < PT_ADP ) PT_OUT = PT_ADP ! ! Outlet air enthalpy ZH_OUT = ZH_IN - XCPD * ( PT_IN - PT_OUT ) / ZSHR ! ! Outlet air humidity ratio PQ_OUT = Q_FN_T_ENTH ( PT_OUT , ZH_OUT ) ! ! Total thermal energy supplied by the cooling coil PT_BLD_COOL = PM_SYS * ( ZH_IN - ZH_OUT ) ! END IF ! ! !*      D. HVAC efficiency and electrical power consumed by the DX unit !          ------------------------------------------------------------ ! ! Energy input ratio modifier curve function of temperature ZEIRTEMP = ZA3 + ( ZTW_IN - 27 3.15 ) * ( ZB3 + ZC3 * ( ZTW_IN - 27 3.15 )) & + ( ZT_COND - 27 3.15 ) * ( ZD3 + ZE3 * ( ZT_COND - 27 3.15 )) & + ( ZTW_IN - 27 3.15 ) * ( ZT_COND - 27 3.15 ) * ZF3 ! ! HVAC coefficient of performance PCOP = PCOP_RAT / ZEIRTEMP ! ! Part load fraction correlation ZPLR = PH_BLD_COOL / ( PCAP_SYS * ZSHR ) ! IF ( ZPLR > 1.0 ) ZPLR = 1.0 ! ZPARTLOADF = ZA5 + ZB5 * ZPLR + ZC5 * ZPLR ** 2 IF ( ZPARTLOADF < MIN ( 0.7 , ZPLR ) ) ZPARTLOADF = MIN ( 0.7 , ZPLR ) ! ! Electrical power consumed by the DX unit ! (compressors plus outdoor condenser fans) PDX_POWER = PCAP_SYS / PCOP * ZPLR / ZPARTLOADF ! ! !*      E. Waste heat emissions !          -------------------- ! ! Total heat rejected by the condenser PLE_WASTE = ( PT_BLD_COOL + PDX_POWER ) * PF_WATER_COND PH_WASTE = ( PT_BLD_COOL + PDX_POWER ) * ( 1. - PF_WATER_COND ) ! IF ( LHOOK ) CALL DR_HOOK ( 'DX_AIR_COOLING_COIL_CV' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE DX_AIR_COOLING_COIL_CV","tags":"","loc":"sourcefile/dx_air_cooling_coil_cv.f90.html"},{"title":"day_of_week.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines DAY_OF_WEEK Source Code day_of_week.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !################################################ SUBROUTINE DAY_OF_WEEK ( PYEAR , PMONTH , PDAY , PDOW ) !################################################ !! DAY_OF_WEEK !! !!  PURPOSE !!  ------- !! DAY_OF_WEEK COMPUTES THE DAY OF THE WEEK BASED UPON THE GIVEN DATE, !! MONTH AND YEAR.  IT USES THE ZELLER CONGRUENCE ALGORITHIM. !! PDAY IS THE DAY OF THE MONTH, 1 - 31 !! PMONTH IS THE MONTH OF THE YEAR, 1 - 12 !! PYEAR IS THE YEAR, E.G., 1977 !! IT RETURNS 1 FOR SUNDAY, 2 FOR MONDAY, ETC. !! !! AUTHOR !! ------ !! G. Pigeon *Météo-France* !! !! MODIFICATIONS !! ------------- !! Original  02/2010 USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! !! DECLARATION IMPLICIT NONE !! 1. declaraction of arguments INTEGER , INTENT ( IN ) :: PYEAR !current year (UTC) INTEGER , INTENT ( IN ) :: PMONTH !current month (UTC) INTEGER , INTENT ( IN ) :: PDAY !current day (UTC) INTEGER , INTENT ( OUT ) :: PDOW !current day of the week !! !! 2. declaration of local variables INTEGER :: DAY , YR , MN , N1 , N2 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'DAY_OF_WEEK' , 0 , ZHOOK_HANDLE ) ! YR = PYEAR MN = PMONTH !   IF JANUARY OR FEBRUARY, ADJUST MONTH AND YEAR IF ( MN . LE . 2 ) THEN MN = MN + 12 YR = YR - 1 END IF N1 = ( 26 * ( MN + 1 )) / 10 N2 = ( 125 * YR ) / 100 DAY = PDAY + N1 + N2 - ( YR / 100 ) + ( YR / 400 ) - 1 PDOW = MOD ( DAY , 7 ) + 1 ! IF ( LHOOK ) CALL DR_HOOK ( 'DAY_OF_WEEK' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE DAY_OF_WEEK","tags":"","loc":"sourcefile/day_of_week.f90.html"},{"title":"modd_bemn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_BEM_n Source Code modd_bemn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################ MODULE MODD_BEM_n !     ################ ! !!****  *MODD_BEM_n - declaration of parameters and option for BEM !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      B. Bueno   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       10/2010 !!      G. Pigeon      06/2011 add LSHAD_DAY !!      G. Pigeon      07/2011 add LNATVENT_NIGHT !!      G. Pigeon      08/2011 change from MODD_BLD -> MODD_BEM !!      G. Pigeon      10/2011 add indoor relative surf. and view factors !!      G. Pigeon      09/2012 add TRAN_WIN !!      G. Pigeon      10/2012 add XF_WIN_WIN !!      V. Masson      06/2013 splits module in two ! !*       0.   DECLARATIONS !             ------------ ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !-------------------------------------------------------------------------- ! TYPE BEM_t ! ! Floor parameters ! REAL , POINTER , DIMENSION (:,:) :: XHC_FLOOR ! floor layers heat capacity        (J/K/m3) REAL , POINTER , DIMENSION (:,:) :: XTC_FLOOR ! floor layers thermal conductivity (W/K/m) REAL , POINTER , DIMENSION (:,:) :: XD_FLOOR ! depth of floor layers             (m) ! ! HVAC parameters ! REAL , POINTER , DIMENSION (:) :: XTCOOL_TARGET ! cooling setpoint of indoor air REAL , POINTER , DIMENSION (:) :: XTHEAT_TARGET ! heating setpoint of indoor air REAL , POINTER , DIMENSION (:) :: XF_WASTE_CAN ! fraction of waste heat released into the canyon REAL , POINTER , DIMENSION (:) :: XEFF_HEAT ! efficiency of the heating system ! ! Indoor parameters ! REAL , POINTER , DIMENSION (:) :: XTI_BLD ! building interior temperature    (K) REAL , POINTER , DIMENSION (:,:) :: XT_FLOOR ! floor layer temperatures         (K) REAL , POINTER , DIMENSION (:,:) :: XT_MASS ! Air cooled building internal th. mass temperature (K) ! REAL , POINTER , DIMENSION (:) :: XQIN ! internal heat gains [W m-2(floor)] REAL , POINTER , DIMENSION (:) :: XQIN_FRAD ! radiant fraction of internal heat gains REAL , POINTER , DIMENSION (:) :: XSHGC ! solar heat gain coef. of windows REAL , POINTER , DIMENSION (:) :: XSHGC_SH ! solar heat gain coef. of windows + shading REAL , POINTER , DIMENSION (:) :: XU_WIN ! window U-factor [K m W-2] REAL , POINTER , DIMENSION (:) :: XTRAN_WIN ! window transmittance (-) REAL , POINTER , DIMENSION (:) :: XGR ! glazing ratio REAL , POINTER , DIMENSION (:) :: XFLOOR_HEIGHT ! building floor height [m] REAL , POINTER , DIMENSION (:) :: XINF ! infiltration/ventilation flow rate [AC/H] ! ! New parameters ! REAL , POINTER , DIMENSION (:) :: XF_WATER_COND ! fraction of evaporation for condensers (cooling system) REAL , POINTER , DIMENSION (:) :: XAUX_MAX ! Auxiliar variable for autosize calcs REAL , POINTER , DIMENSION (:) :: XQIN_FLAT ! Latent franction of internal heat gains REAL , POINTER , DIMENSION (:) :: XHR_TARGET ! Relative humidity setpoint REAL , POINTER , DIMENSION (:) :: XT_WIN2 ! Indoor window temperature [K] REAL , POINTER , DIMENSION (:) :: XQI_BLD ! Indoor air specific humidity [kg kg-1] REAL , POINTER , DIMENSION (:) :: XV_VENT ! Ventilation flow rate [AC/H] REAL , POINTER , DIMENSION (:) :: XCAP_SYS_HEAT ! Capacity of the heating system ! [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XCAP_SYS_RAT ! Rated capacity of the cooling system ! [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XT_ADP ! Apparatus dewpoint temperature of the ! cooling coil [K] REAL , POINTER , DIMENSION (:) :: XM_SYS_RAT ! Rated HVAC mass flow rate ! [kg s-1 m-2(bld)] REAL , POINTER , DIMENSION (:) :: XCOP_RAT ! Rated COP of the cooling system REAL , POINTER , DIMENSION (:) :: XT_WIN1 ! outdoor window temperature [K] REAL , POINTER , DIMENSION (:) :: XALB_WIN ! window albedo REAL , POINTER , DIMENSION (:) :: XABS_WIN ! window absortance REAL , POINTER , DIMENSION (:) :: XT_SIZE_MAX ! Maximum outdoor air temperature for ! HVAC sizing [K] REAL , POINTER , DIMENSION (:) :: XT_SIZE_MIN ! Minimum outdoor air temperature for ! HVAC sizing [K] REAL , POINTER , DIMENSION (:) :: XUGG_WIN ! Window glass-to-glass U-factor [K m W-2] LOGICAL , POINTER , DIMENSION (:) :: LSHADE ! flag to activate shading devices -> LOGICAL in the code REAL , POINTER , DIMENSION (:) :: XSHADE ! flag to activate shading devices -> REAL for i/o 0. or 1. CHARACTER ( LEN = 4 ), POINTER , DIMENSION (:) :: CNATVENT ! flag to activate natural ventilation 'NONE', 'MANU', 'AUTO' REAL , POINTER , DIMENSION (:) :: XNATVENT ! flag to describe surventilation system for i/o ! 0 for NONE, 1 for MANU and 2 for AUTO LOGICAL , POINTER , DIMENSION (:) :: LSHAD_DAY !Has shading been necessary this day ? LOGICAL , POINTER , DIMENSION (:) :: LNATVENT_NIGHT !Has nocturnal surventilation been necessary and possible this night ? ! !indoor relative surfaces and view factors REAL , POINTER , DIMENSION (:) :: XN_FLOOR ! Number of floors REAL , POINTER , DIMENSION (:) :: XGLAZ_O_BLD ! Window area [m2_win/m2_bld] REAL , POINTER , DIMENSION (:) :: XMASS_O_BLD ! Mass area [m2_mass/m2_bld] REAL , POINTER , DIMENSION (:) :: XFLOOR_HW_RATIO ! H/W ratio of 1 floor level REAL , POINTER , DIMENSION (:) :: XF_FLOOR_MASS ! View factor floor-mass REAL , POINTER , DIMENSION (:) :: XF_FLOOR_WALL ! View factor floor-wall REAL , POINTER , DIMENSION (:) :: XF_FLOOR_WIN ! View factor floor-window REAL , POINTER , DIMENSION (:) :: XF_FLOOR_ROOF ! View factor floor-roof REAL , POINTER , DIMENSION (:) :: XF_WALL_FLOOR ! View factor wall-floor REAL , POINTER , DIMENSION (:) :: XF_WALL_MASS ! View factor wall-mass REAL , POINTER , DIMENSION (:) :: XF_WALL_WIN ! View factor wall-win REAL , POINTER , DIMENSION (:) :: XF_WIN_FLOOR ! View factor win-floor REAL , POINTER , DIMENSION (:) :: XF_WIN_MASS ! View factor win-mass REAL , POINTER , DIMENSION (:) :: XF_WIN_WALL ! View factor win-wall REAL , POINTER , DIMENSION (:) :: XF_WIN_WIN ! indoor View factor win-win REAL , POINTER , DIMENSION (:) :: XF_MASS_FLOOR ! View factor mass-floor REAL , POINTER , DIMENSION (:) :: XF_MASS_WALL ! View factor mass-wall REAL , POINTER , DIMENSION (:) :: XF_MASS_WIN ! View factor mass-window ! END TYPE BEM_t ! TYPE BEM_NP_t ! TYPE ( BEM_t ), POINTER :: AL (:) => NULL () ! END TYPE BEM_NP_t ! CONTAINS !---------------------------------------------------------------------------- ! SUBROUTINE BEM_INIT ( YBEM ) TYPE ( BEM_t ), INTENT ( INOUT ) :: YBEM REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_BEM_N:BEM_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YBEM % XF_WATER_COND ) NULLIFY ( YBEM % XHC_FLOOR ) NULLIFY ( YBEM % XTC_FLOOR ) NULLIFY ( YBEM % XD_FLOOR ) NULLIFY ( YBEM % XTCOOL_TARGET ) NULLIFY ( YBEM % XTHEAT_TARGET ) NULLIFY ( YBEM % XTI_BLD ) NULLIFY ( YBEM % XT_FLOOR ) NULLIFY ( YBEM % XT_MASS ) NULLIFY ( YBEM % XQIN ) NULLIFY ( YBEM % XQIN_FRAD ) NULLIFY ( YBEM % XSHGC ) NULLIFY ( YBEM % XSHGC_SH ) NULLIFY ( YBEM % XU_WIN ) NULLIFY ( YBEM % XTRAN_WIN ) NULLIFY ( YBEM % XGR ) NULLIFY ( YBEM % XFLOOR_HEIGHT ) NULLIFY ( YBEM % XEFF_HEAT ) NULLIFY ( YBEM % XINF ) NULLIFY ( YBEM % XF_WASTE_CAN ) NULLIFY ( YBEM % XAUX_MAX ) NULLIFY ( YBEM % XQIN_FLAT ) NULLIFY ( YBEM % XHR_TARGET ) NULLIFY ( YBEM % XT_WIN2 ) NULLIFY ( YBEM % XQI_BLD ) NULLIFY ( YBEM % XV_VENT ) NULLIFY ( YBEM % XCAP_SYS_HEAT ) NULLIFY ( YBEM % XCAP_SYS_RAT ) NULLIFY ( YBEM % XT_ADP ) NULLIFY ( YBEM % XM_SYS_RAT ) NULLIFY ( YBEM % XCOP_RAT ) NULLIFY ( YBEM % XT_WIN1 ) NULLIFY ( YBEM % XALB_WIN ) NULLIFY ( YBEM % XABS_WIN ) NULLIFY ( YBEM % XT_SIZE_MAX ) NULLIFY ( YBEM % XT_SIZE_MIN ) NULLIFY ( YBEM % XUGG_WIN ) NULLIFY ( YBEM % LSHAD_DAY ) NULLIFY ( YBEM % LNATVENT_NIGHT ) NULLIFY ( YBEM % LSHADE ) NULLIFY ( YBEM % XSHADE ) NULLIFY ( YBEM % CNATVENT ) NULLIFY ( YBEM % XNATVENT ) NULLIFY ( YBEM % XN_FLOOR ) NULLIFY ( YBEM % XGLAZ_O_BLD ) NULLIFY ( YBEM % XMASS_O_BLD ) NULLIFY ( YBEM % XFLOOR_HW_RATIO ) NULLIFY ( YBEM % XF_FLOOR_MASS ) NULLIFY ( YBEM % XF_FLOOR_WALL ) NULLIFY ( YBEM % XF_FLOOR_WIN ) NULLIFY ( YBEM % XF_FLOOR_ROOF ) NULLIFY ( YBEM % XF_WALL_FLOOR ) NULLIFY ( YBEM % XF_WALL_MASS ) NULLIFY ( YBEM % XF_WALL_WIN ) NULLIFY ( YBEM % XF_WIN_FLOOR ) NULLIFY ( YBEM % XF_WIN_MASS ) NULLIFY ( YBEM % XF_WIN_WALL ) NULLIFY ( YBEM % XF_WIN_WIN ) NULLIFY ( YBEM % XF_MASS_FLOOR ) NULLIFY ( YBEM % XF_MASS_WALL ) NULLIFY ( YBEM % XF_MASS_WIN ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_BEM_N:BEM_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE BEM_INIT ! SUBROUTINE BEM_NP_INIT ( YNBEM , KPATCH ) TYPE ( BEM_NP_t ), INTENT ( INOUT ) :: YNBEM INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_BEM_N:BEM_NP_INIT\" , 0 , ZHOOK_HANDLE ) IF (. NOT . ASSOCIATED ( YNBEM % AL )) THEN ALLOCATE ( YNBEM % AL ( KPATCH )) DO JP = 1 , KPATCH CALL BEM_INIT ( YNBEM % AL ( JP )) ENDDO ELSE DO JP = 1 , KPATCH CALL BEM_INIT ( YNBEM % AL ( JP )) ENDDO DEALLOCATE ( YNBEM % AL ) ENDIF IF ( LHOOK ) CALL DR_HOOK ( \"MODD_BEM_N:BEM_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE BEM_NP_INIT ! ! END MODULE MODD_BEM_n","tags":"","loc":"sourcefile/modd_bemn.f90.html"},{"title":"modd_data_bemn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DATA_BEM_n Source Code modd_data_bemn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################ MODULE MODD_DATA_BEM_n !     ################ ! !!****  *MODD_DATA_BEM_n - declaration of surface parameters for BEM !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      G. Pigeon   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       08/2011 ! !*       0.   DECLARATIONS !             ------------ ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE DATA_BEM_t ! LOGICAL :: LDATA_TCOOL_TARGET LOGICAL :: LDATA_THEAT_TARGET LOGICAL :: LDATA_F_WASTE_CAN LOGICAL :: LDATA_EFF_HEAT LOGICAL :: LDATA_HC_FLOOR LOGICAL :: LDATA_TC_FLOOR LOGICAL :: LDATA_D_FLOOR LOGICAL :: LDATA_QIN LOGICAL :: LDATA_QIN_FRAD LOGICAL :: LDATA_SHGC LOGICAL :: LDATA_U_WIN LOGICAL :: LDATA_GR LOGICAL :: LDATA_SHGC_SH LOGICAL :: LDATA_FLOOR_HEIGHT LOGICAL :: LDATA_INF LOGICAL :: LDATA_F_WATER_COND LOGICAL :: LDATA_SHADE LOGICAL :: LDATA_NATVENT LOGICAL :: LDATA_QIN_FLAT LOGICAL :: LDATA_HR_TARGET LOGICAL :: LDATA_V_VENT LOGICAL :: LDATA_CAP_SYS_HEAT LOGICAL :: LDATA_CAP_SYS_RAT LOGICAL :: LDATA_T_ADP LOGICAL :: LDATA_M_SYS_RAT LOGICAL :: LDATA_COP_RAT LOGICAL :: LDATA_T_SIZE_MAX LOGICAL :: LDATA_T_SIZE_MIN ! ! Number of layers in the specification of thermal characteristics ! INTEGER :: NPAR_FLOOR_LAYER ! number of layers in roofs ! ! ! Parameters: ! REAL , POINTER , DIMENSION (:) :: XPAR_TCOOL_TARGET ! cooling setpoint of indoor air REAL , POINTER , DIMENSION (:) :: XPAR_THEAT_TARGET ! heating setpoint of indoor air REAL , POINTER , DIMENSION (:) :: XPAR_F_WASTE_CAN ! fraction of waste heat into the canyon REAL , POINTER , DIMENSION (:) :: XPAR_EFF_HEAT ! efficiency of the heating system REAL , POINTER , DIMENSION (:,:) :: XPAR_HC_FLOOR ! heat capacity of floor layers [J m-3 K-1] REAL , POINTER , DIMENSION (:,:) :: XPAR_TC_FLOOR ! thermal conductivity of floor layers [W m-1 K-1] REAL , POINTER , DIMENSION (:,:) :: XPAR_D_FLOOR ! thickness of floor layers [m] REAL , POINTER , DIMENSION (:) :: XPAR_QIN ! internal heat gains [W m-2(floor)] REAL , POINTER , DIMENSION (:) :: XPAR_QIN_FRAD ! radiant fraction of internal heat gains REAL , POINTER , DIMENSION (:) :: XPAR_SHGC ! solar transmitance of windows REAL , POINTER , DIMENSION (:) :: XPAR_U_WIN ! glazing thermal resistance [K m W-2] REAL , POINTER , DIMENSION (:) :: XPAR_GR ! glazing ratio REAL , POINTER , DIMENSION (:) :: XPAR_SHGC_SH ! solar transmitance of windows + shading REAL , POINTER , DIMENSION (:) :: XPAR_FLOOR_HEIGHT ! building floor height [m] REAL , POINTER , DIMENSION (:) :: XPAR_INF ! infiltration/ventilation flow rate [AC/H] ! REAL , POINTER , DIMENSION (:) :: XPAR_F_WATER_COND ! fraction of evaporation for condensers REAL , POINTER , DIMENSION (:) :: XPAR_SHADE ! Flag to activate shading devices 0->inactivated , 1->activated REAL , POINTER , DIMENSION (:) :: XPAR_NATVENT ! Flag to describe bld surventilation solution 0-> NONE ; 1 -> MANU ; 2-> AUTO REAL , POINTER , DIMENSION (:) :: XPAR_QIN_FLAT ! Latent franction of internal heat gains REAL , POINTER , DIMENSION (:) :: XPAR_HR_TARGET ! Relative humidity setpoint REAL , POINTER , DIMENSION (:) :: XPAR_V_VENT ! Ventilation flow rate [AC/H] REAL , POINTER , DIMENSION (:) :: XPAR_CAP_SYS_HEAT ! Capacity of the heating system ! [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XPAR_CAP_SYS_RAT ! Rated capacity of the cooling system ! [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XPAR_T_ADP ! Apparatus dewpoint temperature of the ! cooling coil [K] REAL , POINTER , DIMENSION (:) :: XPAR_M_SYS_RAT ! Rated HVAC mass flow rate ! [kg s-1 m-2(bld)] REAL , POINTER , DIMENSION (:) :: XPAR_COP_RAT ! Rated COP of the cooling system REAL , POINTER , DIMENSION (:) :: XPAR_T_SIZE_MAX ! REAL , POINTER , DIMENSION (:) :: XPAR_T_SIZE_MIN ! ! END TYPE DATA_BEM_t CONTAINS ! ! ! ! SUBROUTINE DATA_BEM_INIT ( YDATA_BEM ) TYPE ( DATA_BEM_t ), INTENT ( INOUT ) :: YDATA_BEM REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_BEM_N:DATA_BEM_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDATA_BEM % XPAR_F_WASTE_CAN ) NULLIFY ( YDATA_BEM % XPAR_EFF_HEAT ) NULLIFY ( YDATA_BEM % XPAR_HC_FLOOR ) NULLIFY ( YDATA_BEM % XPAR_TC_FLOOR ) NULLIFY ( YDATA_BEM % XPAR_D_FLOOR ) NULLIFY ( YDATA_BEM % XPAR_QIN ) NULLIFY ( YDATA_BEM % XPAR_QIN_FRAD ) NULLIFY ( YDATA_BEM % XPAR_SHGC ) NULLIFY ( YDATA_BEM % XPAR_U_WIN ) NULLIFY ( YDATA_BEM % XPAR_GR ) NULLIFY ( YDATA_BEM % XPAR_FLOOR_HEIGHT ) NULLIFY ( YDATA_BEM % XPAR_INF ) NULLIFY ( YDATA_BEM % XPAR_F_WATER_COND ) NULLIFY ( YDATA_BEM % XPAR_QIN_FLAT ) NULLIFY ( YDATA_BEM % XPAR_V_VENT ) NULLIFY ( YDATA_BEM % XPAR_CAP_SYS_HEAT ) NULLIFY ( YDATA_BEM % XPAR_CAP_SYS_RAT ) NULLIFY ( YDATA_BEM % XPAR_T_ADP ) NULLIFY ( YDATA_BEM % XPAR_M_SYS_RAT ) NULLIFY ( YDATA_BEM % XPAR_COP_RAT ) NULLIFY ( YDATA_BEM % XPAR_T_SIZE_MAX ) NULLIFY ( YDATA_BEM % XPAR_T_SIZE_MIN ) NULLIFY ( YDATA_BEM % XPAR_SHADE ) NULLIFY ( YDATA_BEM % XPAR_NATVENT ) YDATA_BEM % LDATA_F_WASTE_CAN = . FALSE . YDATA_BEM % LDATA_EFF_HEAT = . FALSE . YDATA_BEM % LDATA_HC_FLOOR = . FALSE . YDATA_BEM % LDATA_TC_FLOOR = . FALSE . YDATA_BEM % LDATA_D_FLOOR = . FALSE . YDATA_BEM % LDATA_QIN = . FALSE . YDATA_BEM % LDATA_QIN_FRAD = . FALSE . YDATA_BEM % LDATA_SHGC = . FALSE . YDATA_BEM % LDATA_U_WIN = . FALSE . YDATA_BEM % LDATA_GR = . FALSE . YDATA_BEM % LDATA_SHGC_SH = . FALSE . YDATA_BEM % LDATA_FLOOR_HEIGHT = . FALSE . YDATA_BEM % LDATA_INF = . FALSE . YDATA_BEM % LDATA_F_WATER_COND = . FALSE . YDATA_BEM % LDATA_SHADE = . FALSE . YDATA_BEM % LDATA_NATVENT = . FALSE . YDATA_BEM % LDATA_V_VENT = . FALSE . YDATA_BEM % LDATA_QIN_FLAT = . FALSE . YDATA_BEM % LDATA_CAP_SYS_HEAT = . FALSE . YDATA_BEM % LDATA_CAP_SYS_RAT = . FALSE . YDATA_BEM % LDATA_T_ADP = . FALSE . YDATA_BEM % LDATA_M_SYS_RAT = . FALSE . YDATA_BEM % LDATA_COP_RAT = . FALSE . YDATA_BEM % LDATA_T_SIZE_MAX = . FALSE . YDATA_BEM % LDATA_T_SIZE_MIN = . FALSE . YDATA_BEM % NPAR_FLOOR_LAYER = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_BEM_N:DATA_BEM_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DATA_BEM_INIT ! ! END MODULE MODD_DATA_BEM_n","tags":"","loc":"sourcefile/modd_data_bemn.f90.html"},{"title":"avg_urban_fluxes.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines AVG_URBAN_FLUXES Source Code avg_urban_fluxes.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE AVG_URBAN_FLUXES ( TOP , T , B , TPN , DMT , & PTS_TWN , PEMIS_TWN , PT_CAN , & PQ_CAN , PT_LOWCAN , PQ_LOWCAN , PTA , PQA , PRHOA , PPS ,& PH_TRAFFIC , PLE_TRAFFIC , PWL_O_GRND , PESN_RF , & PEMIS_GR , PLW_RAD , PAC_RF , PAC_RF_WAT , PAC_WL , & PAC_RD , PAC_RD_WAT , PAC_TOP , PAC_GD , PQSAT_GD , & PAC_AGG_GD , PHU_AGG_GD , PQSAT_RF , PQSAT_RD , & PDELT_RF , PDELT_RD , PRF_FRAC , PWL_FRAC , PRD_FRAC , & PGD_FRAC , PTOTS_O_HORS , PDF_RF , PDN_RF , PDF_RD , & PDN_RD , PLE_WL_A , PLE_WL_B , PLEW_RF , PLESN_RF , & PLEW_RD , PLESN_RD , PHSN_RD , & PTSRAD_GD , PRN_GD , PH_GD , PLE_GD , PGFLUX_GD , PEVAP_GD ,& PRUNOFF_GD , PEVAP_GR , PRUNOFF_GR , PDRAIN_GR , & PRN_GRND , PH_GRND , PLE_GRND , PGFLX_GRND , & PRN_TWN , PH_TWN , PLE_TWN , PGFLX_TWN , PEVAP_TWN , & PEMIT_LW_RD , PEMIT_LW_GD , PEMIT_LW_GRND , PEMIS_GD ) !   ########################################################################## ! !!****  *AVG_URBAN_FLUXES* computes fluxes on urbanized surfaces !! !!    PURPOSE !!    ------- ! ! !!**  METHOD !     ------ ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !!                     12/02 (A. Lemonsu) modifications of emissivity and Tstown !!                     07/07 (P. LeMoigne) expression of latent heat fluxes as !!                           functions of w'theta' instead of w'T' !!                     17/10 (G. Pigeon)  computation of anthropogenic heat due !!                           to domestic heating !!                     10/11 (G. Pigeon) simplification for road, garden, roof, !!                           wall fractions !!                     08/13 (V. Masson) adds solar panels !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t ! USE MODD_CSTS , ONLY : XCPD , XLVTT , XLSTT , XSTEFAN ! USE MODE_THERMOS ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_PANEL_t ), INTENT ( INOUT ) :: TPN TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT ! REAL , DIMENSION (:), INTENT ( OUT ) :: PTS_TWN ! town surface temperature REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIS_TWN ! town equivalent emissivity REAL , DIMENSION (:), INTENT ( INOUT ) :: PT_CAN ! canyon air temperature REAL , DIMENSION (:), INTENT ( INOUT ) :: PQ_CAN ! canyon air specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PT_LOWCAN ! low canyon air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PQ_LOWCAN ! low canyon air specific humidity ! REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at roof level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity ! at roof level REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! surface pressure REAL , DIMENSION (:), INTENT ( IN ) :: PH_TRAFFIC ! anthropogenic sensible !                                                      ! heat fluxes due to traffic REAL , DIMENSION (:), INTENT ( IN ) :: PLE_TRAFFIC ! anthropogenic latent !                                                      ! heat fluxes due to traffic REAL , DIMENSION (:), INTENT ( IN ) :: PWL_O_GRND ! wall Surf. / ground (road+green) Surf. ! REAL , DIMENSION (:), INTENT ( IN ) :: PESN_RF ! snow roof emissivity ! REAL , DIMENSION (:), INTENT ( IN ) :: PEMIS_GR ! green roof emissivity ! REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! incoming longwave rad. ! REAL , DIMENSION (:), INTENT ( IN ) :: PAC_RF ! surface conductance !                                                      ! for heat transfers !                                                      ! above roofs REAL , DIMENSION (:), INTENT ( IN ) :: PAC_RF_WAT ! surface conductance !                                                      ! for heat transfers !                                                      ! above roofs (for water) REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WL ! surface conductance !                                                      ! for heat transfer !                                                      ! between wall and canyon REAL , DIMENSION (:), INTENT ( IN ) :: PAC_RD ! surface conductance !                                                      ! for heat transfers !                                                      ! between road and canyon REAL , DIMENSION (:), INTENT ( IN ) :: PAC_RD_WAT ! surface conductance !                                                      ! for heat transfers !                                                      ! inside canyon (for water) REAL , DIMENSION (:), INTENT ( IN ) :: PAC_TOP ! aerodynamical conductance !                                                      ! between atmosphere and !                                                      ! canyon top REAL , DIMENSION (:), INTENT ( IN ) :: PAC_GD ! aerodynamical conductance !                                                      ! between atmosphere and !                                                      ! green areas REAL , DIMENSION (:), INTENT ( IN ) :: PQSAT_GD ! q_sat(Ts) REAL , DIMENSION (:), INTENT ( IN ) :: PAC_AGG_GD ! aggregated aerodyn resistance for green areas REAL , DIMENSION (:), INTENT ( IN ) :: PHU_AGG_GD ! aggregated relative humidity for green areas ! REAL , DIMENSION (:), INTENT ( IN ) :: PQSAT_RF ! q_sat(Ts) REAL , DIMENSION (:), INTENT ( IN ) :: PQSAT_RD ! q_sat(Ts) REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_RF ! water fraction on snow-free REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_RD ! roof and roads REAL , DIMENSION (:), INTENT ( IN ) :: PRF_FRAC ! roof, wall, REAL , DIMENSION (:), INTENT ( IN ) :: PWL_FRAC ! road, and green area REAL , DIMENSION (:), INTENT ( IN ) :: PRD_FRAC ! fractions REAL , DIMENSION (:), INTENT ( IN ) :: PGD_FRAC ! of exchange surf. REAL , DIMENSION (:), INTENT ( IN ) :: PTOTS_O_HORS ! total canyon+roof surface !                                                    ! over horizontal surface REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RF ! snow-free    roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RF ! snow-covered roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RD ! snow-free    road fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered road fraction ! REAL , DIMENSION (:), INTENT ( IN ) :: PLE_WL_A ! latent heat flux over wall REAL , DIMENSION (:), INTENT ( IN ) :: PLE_WL_B ! latent heat flux over wall ! REAL , DIMENSION (:), INTENT ( IN ) :: PLEW_RF ! latent heat flux of snowfree roof REAL , DIMENSION (:), INTENT ( IN ) :: PLESN_RF ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PLEW_RD ! latent heat flux of snowfree road REAL , DIMENSION (:), INTENT ( IN ) :: PLESN_RD ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PHSN_RD ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PTSRAD_GD ! green area surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PRN_GD ! net radiation over green areas REAL , DIMENSION (:), INTENT ( IN ) :: PH_GD ! sensible heat flux over green areas REAL , DIMENSION (:), INTENT ( IN ) :: PLE_GD ! latent heat flux over green areas REAL , DIMENSION (:), INTENT ( IN ) :: PGFLUX_GD ! flux through the green areas REAL , DIMENSION (:), INTENT ( IN ) :: PEVAP_GD ! evaporation over gardens REAL , DIMENSION (:), INTENT ( IN ) :: PRUNOFF_GD ! surface runoff over green areas      (kg/m2/s) REAL , DIMENSION (:), INTENT ( IN ) :: PEVAP_GR ! evaporation over green roofs REAL , DIMENSION (:), INTENT ( IN ) :: PRUNOFF_GR ! surface runoff over green roofs      (kg/m2/s) REAL , DIMENSION (:), INTENT ( IN ) :: PDRAIN_GR ! outlet drainage at green roof base   (kg/m2/s) ! ! REAL , DIMENSION (:), INTENT ( OUT ) :: PRN_GRND ! net radiation over ground REAL , DIMENSION (:), INTENT ( OUT ) :: PH_GRND ! sensible heat flux over ground REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_GRND ! latent heat flux over ground REAL , DIMENSION (:), INTENT ( OUT ) :: PGFLX_GRND ! flux through the ground REAL , DIMENSION (:), INTENT ( OUT ) :: PRN_TWN ! net radiation over town REAL , DIMENSION (:), INTENT ( OUT ) :: PH_TWN ! sensible heat flux over town REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_TWN ! latent heat flux over town REAL , DIMENSION (:), INTENT ( OUT ) :: PGFLX_TWN ! flux through the ground for town REAL , DIMENSION (:), INTENT ( OUT ) :: PEVAP_TWN ! evaporation (kg/m2/s) ! REAL , DIMENSION (:), INTENT ( IN ) :: PEMIT_LW_RD ! LW emitted by the road (W/m2 road) REAL , DIMENSION (:), INTENT ( IN ) :: PEMIT_LW_GD ! LW emitted by the garden (W/m2 garden) REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_GRND ! LW emitted by the ground (road+garden) (W/m2 ground) ! REAL , DIMENSION (:), INTENT ( IN ) :: PEMIS_GD ! garden emissivity ! !*      0.2    declarations of local variables ! REAL , DIMENSION ( SIZE ( PLW_RAD )) :: ZLW_UP ! upwards radiations REAL , DIMENSION ( SIZE ( T % XROAD )) :: ZQSAT_CAN REAL , DIMENSION ( SIZE ( T % XROAD )) :: ZRD , ZGD ! REAL :: ZINTER INTEGER :: JJ REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'AVG_URBAN_FLUXES' , 0 , ZHOOK_HANDLE ) ! ZRD (:) = 0. ZGD (:) = 0. ! DO JJ = 1 , SIZE ( T % XROAD ) ! IF ( T % XROAD ( JJ ) + T % XGARDEN ( JJ ). NE . 0. ) THEN ZRD ( JJ ) = T % XROAD ( JJ ) / ( T % XROAD ( JJ ) + T % XGARDEN ( JJ )) ZGD ( JJ ) = T % XGARDEN ( JJ ) / ( T % XROAD ( JJ ) + T % XGARDEN ( JJ )) ELSE ZRD ( JJ ) = 0. ZGD ( JJ ) = 0. ENDIF ! !*      1.     Averaged fluxes for ground (green areas + road) !              ----------------------------------------------- ! PRN_GRND ( JJ ) = ZRD ( JJ ) * DMT % XRN_ROAD ( JJ ) + ZGD ( JJ ) * PRN_GD ( JJ ) ! PH_GRND ( JJ ) = ZRD ( JJ ) * DMT % XH_ROAD ( JJ ) + ZGD ( JJ ) * PH_GD ( JJ ) + PH_TRAFFIC ( JJ ) / ( 1. - T % XBLD ( JJ )) ! PLE_GRND ( JJ ) = ZRD ( JJ ) * DMT % XLE_ROAD ( JJ ) + ZGD ( JJ ) * PLE_GD ( JJ ) + PLE_TRAFFIC ( JJ ) / ( 1. - T % XBLD ( JJ )) ! PGFLX_GRND ( JJ ) = ZRD ( JJ ) * DMT % XGFLUX_ROAD ( JJ ) + ZGD ( JJ ) * PGFLUX_GD ( JJ ) ! ! PEMIT_LW_GRND ( JJ ) = T % XROAD_O_GRND ( JJ ) * PEMIT_LW_RD ( JJ ) + T % XGARDEN_O_GRND ( JJ ) * PEMIT_LW_GD ( JJ ) !------------------------------------------------------------------------------- ! !*      2.     Averaged fluxes JJ built + green areas !              ------------------------------------- ! PRN_TWN ( JJ ) = PTOTS_O_HORS ( JJ ) * ( & + PRF_FRAC ( JJ ) * DMT % XRN_ROOF ( JJ ) & + PRD_FRAC ( JJ ) * DMT % XRN_ROAD ( JJ ) & + PGD_FRAC ( JJ ) * PRN_GD ( JJ ) & + PWL_FRAC ( JJ ) * DMT % XRN_WALL_A ( JJ ) * 0.5 & + PWL_FRAC ( JJ ) * DMT % XRN_WALL_B ( JJ ) * 0.5 ) ! PH_TWN ( JJ ) = PTOTS_O_HORS ( JJ ) * ( & + PRF_FRAC ( JJ ) * DMT % XH_ROOF ( JJ ) & + PRD_FRAC ( JJ ) * DMT % XH_ROAD ( JJ ) & + PGD_FRAC ( JJ ) * PH_GD ( JJ ) & + PWL_FRAC ( JJ ) * DMT % XH_WALL_A ( JJ ) * 0.5 & + PWL_FRAC ( JJ ) * DMT % XH_WALL_B ( JJ ) * 0.5 ) & + PH_TRAFFIC ( JJ ) + T % XH_INDUSTRY ( JJ ) ! PLE_TWN ( JJ ) = PTOTS_O_HORS ( JJ ) * ( & PRF_FRAC ( JJ ) * DMT % XLE_ROOF ( JJ ) & + PRD_FRAC ( JJ ) * DMT % XLE_ROAD ( JJ ) & + PGD_FRAC ( JJ ) * PLE_GD ( JJ ) & + PWL_FRAC ( JJ ) * PLE_WL_A ( JJ ) * 0.5 & + PWL_FRAC ( JJ ) * PLE_WL_B ( JJ ) * 0.5 ) & + PLE_TRAFFIC ( JJ ) + T % XLE_INDUSTRY ( JJ ) ! PGFLX_TWN ( JJ ) = PTOTS_O_HORS ( JJ ) * ( & PRF_FRAC ( JJ ) * DMT % XGFLUX_ROOF ( JJ ) & + PRD_FRAC ( JJ ) * DMT % XGFLUX_ROAD ( JJ ) & + PGD_FRAC ( JJ ) * PGFLUX_GD ( JJ ) & + PWL_FRAC ( JJ ) * DMT % XGFLUX_WALL_A ( JJ ) * 0.5 & + PWL_FRAC ( JJ ) * DMT % XGFLUX_WALL_B ( JJ ) * 0.5 ) ! IF ( TOP % LSOLAR_PANEL ) THEN PRN_TWN ( JJ ) = PRN_TWN ( JJ ) + PTOTS_O_HORS ( JJ ) * ( PRF_FRAC ( JJ ) * DMT % XRN_PANEL ( JJ ) * TPN % XFRAC_PANEL ( JJ )) PH_TWN ( JJ ) = PH_TWN ( JJ ) + PTOTS_O_HORS ( JJ ) * ( PRF_FRAC ( JJ ) * DMT % XH_PANEL ( JJ ) * TPN % XFRAC_PANEL ( JJ )) ENDIF !------------------------------------------------------------------------------- ! !*      3.     Infra-red Radiative properties !              ------------------------------ ! !*      3.1    Upward IR radiation for town !              ---------------------------- ! ZLW_UP ( JJ ) = PLW_RAD ( JJ ) & - ( PRF_FRAC ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * PDF_RF ( JJ ) * DMT % XABS_LW_ROOF ( JJ ) & + PRF_FRAC ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * PDN_RF ( JJ ) * DMT % XABS_LW_SNOW_ROOF ( JJ ) & + PRF_FRAC ( JJ ) * T % XGREENROOF ( JJ ) * DMT % XABS_LW_GREENROOF ( JJ ) & + PRD_FRAC ( JJ ) * PDF_RD ( JJ ) * DMT % XABS_LW_ROAD ( JJ ) & + PRD_FRAC ( JJ ) * PDN_RD ( JJ ) * DMT % XABS_LW_SNOW_ROAD ( JJ ) & + PGD_FRAC ( JJ ) * DMT % XABS_LW_GARDEN ( JJ ) & + PWL_FRAC ( JJ ) * 0.5 * DMT % XABS_LW_WALL_A ( JJ ) & + PWL_FRAC ( JJ ) * 0.5 * DMT % XABS_LW_WALL_B ( JJ ) & ) * PTOTS_O_HORS ( JJ ) ! IF ( TOP % LSOLAR_PANEL ) THEN ZLW_UP ( JJ ) = ZLW_UP ( JJ ) - PTOTS_O_HORS ( JJ ) * ( PRF_FRAC ( JJ ) * DMT % XABS_LW_PANEL ( JJ ) * TPN % XFRAC_PANEL ( JJ )) ENDIF ! !*      3.2    Town emissivity !              --------------- ! PEMIS_TWN ( JJ ) = T % XBLD ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * PDF_RF ( JJ ) * T % XEMIS_ROOF ( JJ ) * ( 1. - TPN % XFRAC_PANEL ( JJ )) & + T % XBLD ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * PDN_RF ( JJ ) * PESN_RF ( JJ ) * ( 1. - TPN % XFRAC_PANEL ( JJ )) & + T % XBLD ( JJ ) * T % XGREENROOF ( JJ ) * PEMIS_GR ( JJ ) * ( 1. - TPN % XFRAC_PANEL ( JJ )) & + T % XBLD ( JJ ) * TPN % XEMIS_PANEL ( JJ ) * TPN % XFRAC_PANEL ( JJ ) & + T % XROAD ( JJ ) * ( T % XSVF_ROAD ( JJ ) * PDF_RD ( JJ ) * T % XEMIS_ROAD ( JJ ) & + T % XSVF_ROAD ( JJ ) * PDN_RD ( JJ ) * T % TSNOW_ROAD % EMIS ( JJ )) & + T % XGARDEN ( JJ ) * T % XSVF_GARDEN ( JJ ) * PEMIS_GD ( JJ ) & + T % XWALL_O_HOR ( JJ ) * T % XSVF_WALL ( JJ ) * T % XEMIS_WALL ( JJ ) ! !*      3.3    Town radiative surface temperature !              ---------------------------------- ! PTS_TWN ( JJ ) = (( ZLW_UP ( JJ ) - PLW_RAD ( JJ ) * ( 1. - PEMIS_TWN ( JJ ))) / PEMIS_TWN ( JJ ) / XSTEFAN ) ** 0.25 ! !------------------------------------------------------------------------------- ! !*      4.     Averaged evaporative flux (kg/m2/s) !              ----------------------------------- ! PEVAP_TWN ( JJ ) = PTOTS_O_HORS ( JJ ) * ( & PRF_FRAC ( JJ ) * PDF_RF ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * PLEW_RF ( JJ ) / XLVTT & + PRF_FRAC ( JJ ) * PDN_RF ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * PLESN_RF ( JJ ) / XLSTT & + PRF_FRAC ( JJ ) * T % XGREENROOF ( JJ ) * PEVAP_GR ( JJ ) & + PRD_FRAC ( JJ ) * PDF_RD ( JJ ) * PLEW_RD ( JJ ) / XLVTT & + PRD_FRAC ( JJ ) * PDN_RD ( JJ ) * PLESN_RD ( JJ ) / XLSTT & + PGD_FRAC ( JJ ) * PEVAP_GD ( JJ ) & + PWL_FRAC ( JJ ) * 0.5 * ( PLE_WL_A ( JJ ) + PLE_WL_B ( JJ )) / XLVTT )& + PLE_TRAFFIC ( JJ ) / XLVTT & + T % XLE_INDUSTRY ( JJ ) / XLVTT ! IF ( TOP % CBEM == \"BEM\" ) THEN PEVAP_TWN ( JJ ) = PEVAP_TWN ( JJ ) + PRF_FRAC ( JJ ) * ( 1. - B % XF_WASTE_CAN ( JJ )) * DMT % XLE_WASTE ( JJ ) / XLVTT ENDIF !------------------------------------------------------------------------------- ! !*      5.     Averaged runoff flux (kg/m2/s) !              ----------------------------------- ! DMT % XRUNOFF_TOWN ( JJ ) = (( 1. - T % XGREENROOF ( JJ )) * DMT % XRUNOFF_STRLROOF ( JJ ) & + T % XGREENROOF ( JJ ) * ( PRUNOFF_GR ( JJ ) + PDRAIN_GR ( JJ ))) * T % XBLD ( JJ ) & + T % XROAD ( JJ ) * DMT % XRUNOFF_ROAD ( JJ ) & + T % XGARDEN ( JJ ) * PRUNOFF_GD ( JJ ) !------------------------------------------------------------------------------- ! !*      6.    Air canyon temperature at time t+dt !             ----------------------------------- ! IF (. NOT . TOP % LCANOPY ) THEN ZINTER = PAC_RD ( JJ ) * PDF_RD ( JJ ) * ZRD ( JJ ) + PAC_GD ( JJ ) * ZGD ( JJ ) + PAC_WL ( JJ ) * PWL_O_GRND ( JJ ) + PAC_TOP ( JJ ) PT_CAN ( JJ ) = ( T % XT_ROAD ( JJ , 1 ) * PAC_RD ( JJ ) * PDF_RD ( JJ ) * ZRD ( JJ ) & + T % XT_WALL_A ( JJ , 1 ) * PAC_WL ( JJ ) * ( 1. - B % XGR ( JJ )) * PWL_O_GRND ( JJ ) * 0.5 & + T % XT_WALL_B ( JJ , 1 ) * PAC_WL ( JJ ) * ( 1. - B % XGR ( JJ )) * PWL_O_GRND ( JJ ) * 0.5 & + B % XT_WIN1 ( JJ ) * PAC_WL ( JJ ) * B % XGR ( JJ ) * PWL_O_GRND ( JJ ) & + PTA ( JJ ) * PAC_TOP ( JJ ) & + PH_TRAFFIC ( JJ ) / ( 1. - T % XBLD ( JJ )) / PRHOA ( JJ ) / XCPD & + PHSN_RD ( JJ ) * PDN_RD ( JJ ) / PRHOA ( JJ ) / XCPD ) & / ZINTER ! PT_CAN ( JJ ) = PT_CAN ( JJ ) + ( PTSRAD_GD ( JJ ) * PAC_GD ( JJ ) * ZGD ( JJ ) ) / ZINTER ! IF ( TOP % CBEM == \"BEM\" ) THEN PT_CAN ( JJ ) = PT_CAN ( JJ ) + ( DMT % XH_WASTE ( JJ ) * B % XF_WASTE_CAN ( JJ ) / ( 1 - T % XBLD ( JJ )) / PRHOA ( JJ ) / XCPD ) / ZINTER ENDIF !------------------------------------------------------------------------------- ! !*      7.     Air canyon specific humidity !              ---------------------------- ! ZINTER = PAC_RD_WAT ( JJ ) * PDF_RD ( JJ ) * PDELT_RD ( JJ ) * ZRD ( JJ ) + PAC_AGG_GD ( JJ ) * PHU_AGG_GD ( JJ ) * ZGD ( JJ ) + PAC_TOP ( JJ ) PQ_CAN ( JJ ) = ( PQSAT_RD ( JJ ) * PAC_RD_WAT ( JJ ) * PDF_RD ( JJ ) * ZRD ( JJ ) * PDELT_RD ( JJ ) & + PQSAT_GD ( JJ ) * PAC_AGG_GD ( JJ ) * PHU_AGG_GD ( JJ ) * ZGD ( JJ ) & + PQA ( JJ ) * PAC_TOP ( JJ ) & + PLE_TRAFFIC ( JJ ) / ( 1. - T % XBLD ( JJ )) / PRHOA ( JJ ) / XLVTT & + PLESN_RD ( JJ ) * PDN_RD ( JJ ) / PRHOA ( JJ ) / XLVTT * ZRD ( JJ ) ) / ZINTER IF ( TOP % CBEM == \"BEM\" ) THEN PQ_CAN ( JJ ) = PQ_CAN ( JJ ) + ( DMT % XLE_WASTE ( JJ ) * B % XF_WASTE_CAN ( JJ ) / ( 1 - T % XBLD ( JJ )) / PRHOA ( JJ ) / XLVTT ) / ZINTER ENDIF ENDIF ! ENDDO ! !*check that canyon specif. humidity lower than saturation ! ZQSAT_CAN (:) = QSAT ( PT_CAN (:), PPS (:)) WHERE ( PQ_CAN (:) > ZQSAT_CAN (:)) PQ_CAN (:) = ZQSAT_CAN (:) END WHERE ! IF ( LHOOK ) CALL DR_HOOK ( 'AVG_URBAN_FLUXES' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END SUBROUTINE AVG_URBAN_FLUXES","tags":"","loc":"sourcefile/avg_urban_fluxes.f90.html"},{"title":"modd_ch_emis_fieldn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_CH_EMIS_FIELD_n Source Code modd_ch_emis_fieldn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ########################### MODULE MODD_CH_EMIS_FIELD_n !     ########################### ! !!****  *MODD_CH_EMIS_FIELD_n* - declaration of chemical emission data arrays !! !!    PURPOSE !!    ------- !       The purpose of this declarative module is to specify  the !     chemical emission data arrays. ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      D. Gazen   *L.A.* !! !!    MODIFICATIONS !!    ------------- !!      Original    08/03/2001 !!      01/12/03    (D.Gazen) change emissions handling for surf. externalization !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_TYPE_EFUTIL ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! TYPE CH_EMIS_FIELD_t ! REAL :: XTIME_SIMUL = 0. INTEGER :: NTIME_MAX INTEGER :: NEMIS_NBR !                          ! number of chemical pgd fields chosen by user CHARACTER ( LEN = 3 ) , DIMENSION (:), POINTER :: CEMIS_AREA !                          ! areas where chemical pgd fields are defined !                          ! 'ALL' : everywhere !                          ! 'SEA' : where sea exists !                          ! 'LAN' : where land exists !                          ! 'WAT' : where inland water exists !                          ! 'NAT' : where natural or agricultural areas exist !                          ! 'TWN' : where town areas exist !                          ! 'STR' : where streets are present !                          ! 'BLD' : where buildings are present !                          ! CHARACTER ( LEN = 40 ), DIMENSION (:), POINTER :: CEMIS_COMMENT ! comment CHARACTER ( LEN = 40 ), DIMENSION (:), POINTER :: CEMIS_NAME !                          ! name of the chemical pgd fields (emitted species) ! INTEGER , DIMENSION (:), POINTER :: NEMIS_TIME ! emission time ! REAL , DIMENSION (:,:), POINTER :: XEMIS_FIELDS ! emission pgd fields values ! INTEGER :: NEMISPEC_NBR ! Number of chemical species ! TYPE ( EMISSVAR_T ), DIMENSION (:), POINTER :: TSEMISS ! Offline emission struct array ! TYPE ( PRONOSVAR_T ), POINTER :: TSPRONOSLIST ! Head pointer on pronostic !                                                              variables list !------------------------------------------------------------------------------- ! END TYPE CH_EMIS_FIELD_t CONTAINS ! SUBROUTINE CH_EMIS_FIELD_INIT ( YCH_EMIS_FIELD ) TYPE ( CH_EMIS_FIELD_t ), INTENT ( INOUT ) :: YCH_EMIS_FIELD REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_EMIS_FIELD_N:CH_EMIS_FIELD_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YCH_EMIS_FIELD % CEMIS_AREA ) NULLIFY ( YCH_EMIS_FIELD % CEMIS_COMMENT ) NULLIFY ( YCH_EMIS_FIELD % CEMIS_NAME ) NULLIFY ( YCH_EMIS_FIELD % NEMIS_TIME ) NULLIFY ( YCH_EMIS_FIELD % XEMIS_FIELDS ) NULLIFY ( YCH_EMIS_FIELD % TSEMISS ) YCH_EMIS_FIELD % XTIME_SIMUL = 0. YCH_EMIS_FIELD % NEMIS_NBR = 0 YCH_EMIS_FIELD % NTIME_MAX =- 1 YCH_EMIS_FIELD % NEMISPEC_NBR = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_EMIS_FIELD_N:CH_EMIS_FIELD_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_EMIS_FIELD_INIT END MODULE MODD_CH_EMIS_FIELD_n","tags":"","loc":"sourcefile/modd_ch_emis_fieldn.f90.html"},{"title":"spll_modi_bld_e_budget.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_BLD_E_BUDGET Source Code spll_modi_bld_e_budget.f90 Source Code !auto_modi:spll_bld_e_budget.D MODULE MODI_BLD_E_BUDGET INTERFACE SUBROUTINE BLD_E_BUDGET ( OTI_EVOL , PTSTEP , PBLD , PWALL_O_HOR , & PRHOA , PT_ROOF , PT_WALL , PTI_BLD , PTS_FLOOR ) IMPLICIT NONE LOGICAL , INTENT ( IN ) :: OTI_EVOL ! true --> internal temp. of REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PBLD ! building fraction REAL , DIMENSION (:), INTENT ( IN ) :: PWALL_O_HOR ! wall surf. / hor. surf. REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density REAL , DIMENSION (:,:), INTENT ( IN ) :: PT_ROOF ! roof layers temperatures REAL , DIMENSION (:,:), INTENT ( IN ) :: PT_WALL ! wall layers temperatures REAL , DIMENSION (:), INTENT ( INOUT ) :: PTI_BLD ! building air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_FLOOR ! floor surface temperature END SUBROUTINE BLD_E_BUDGET END INTERFACE END MODULE MODI_BLD_E_BUDGET","tags":"","loc":"sourcefile/spll_modi_bld_e_budget.f90.html"},{"title":"urban_snow_evol.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines URBAN_SNOW_EVOL Source Code urban_snow_evol.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE URBAN_SNOW_EVOL ( T , B , PT_LWCN , PQ_LWCN , PU_LWCN , PTS_RF , PTS_RD , PTS_WL_A , & PTS_WL_B , PPS , PTA , PQA , PRHOA , PLW_RAD , PSR , PZREF , PUREF , & PVMOD , PTSTEP , PZ_LWCN , PDN_RF , PABS_SW_SN_RF , PABS_LW_SN_RF ,& PDN_RD , PABS_SW_SN_RD , PABS_LW_SN_RD , PRNSN_RF , PHSN_RF , & PLESN_RF , PGSN_RF , PMELT_RF , PRNSN_RD , PHSN_RD , PLESN_RD , & PGSN_RD , PMELT_RD , PLW_WA_TO_NR , PLW_WB_TO_NR , PLW_S_TO_NR , & PLW_WIN_TO_NR , PDQS_SN_RF , PDQS_SN_RD ) !   ########################################################################## ! !!****  *URBAN_SNOW_EVOL* !! !!    PURPOSE !!    ------- ! ! !!**  METHOD !     ------ ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t ! USE MODD_SNOW_PAR , ONLY : XZ0SN , XZ0HSN , & XANSMIN_ROOF , XANSMAX_ROOF , XANS_TODRY_ROOF , & XANS_T_ROOF , XRHOSMIN_ROOF , XRHOSMAX_ROOF , & XWCRN_ROOF , & XANSMIN_ROAD , XANSMAX_ROAD , XANS_TODRY_ROAD , & XANS_T_ROAD , XRHOSMIN_ROAD , XRHOSMAX_ROAD , & XWCRN_ROAD USE MODD_CSTS , ONLY : XSTEFAN ! USE MODE_SURF_SNOW_FRAC ! USE MODI_ROOF_IMPL_COEF USE MODI_SNOW_COVER_1LAYER ! USE MODD_SURF_PAR , ONLY : XUNDEF ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , DIMENSION (:), INTENT ( IN ) :: PT_LWCN ! LWCN air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PQ_LWCN ! LWCN air specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PU_LWCN ! LWCN hor. wind REAL , DIMENSION (:), INTENT ( IN ) :: PTS_RF ! roof surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_RD ! road surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WL_A ! wall surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WL_B ! wall surface temperature ! REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first ! atmospheric level (temperature) REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the first ! atmospheric level (wind) ! at first atmospheric level REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PZ_LWCN ! height of forcing ! REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RF ! snow-covered roof frac. REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_SN_RF ! SW absorbed by roof snow REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_SN_RF ! absorbed IR rad by snow on roof REAL , DIMENSION (:), INTENT ( INOUT ) :: PDN_RD ! snow-covered road frac. REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_SN_RD ! SW absorbed by road snow REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_SN_RD ! absorbed IR rad by snow on road ! REAL , DIMENSION (:), INTENT ( OUT ) :: PRNSN_RF ! net radiation over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PHSN_RF ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PLESN_RF ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PGSN_RF ! flux under the snow REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT_RF ! snow melt REAL , DIMENSION (:), INTENT ( OUT ) :: PRNSN_RD ! net radiation over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PHSN_RD ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PLESN_RD ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PGSN_RD ! flux under the snow REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT_RD ! snow melt ! REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_NR ! LW contrib. wall       -> road(snow) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_NR ! LW contrib. wall       -> road(snow) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_NR ! LW contrib. sky        -> road(snow) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_NR ! LW contrib. win       -> road(snow) REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_SN_RF ! Heat storage in snowpack on roofs REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_SN_RD ! Heat storage in snowpack on roads ! !*      0.2    declarations of local variables ! REAL , DIMENSION ( SIZE ( PTA )) :: ZLW1_RD ! independant from REAL , DIMENSION ( SIZE ( PTA )) :: ZLW1_RF ! surface temperature ! REAL , DIMENSION ( SIZE ( PTA )) :: ZLW2_RD ! to be multiplied by REAL , DIMENSION ( SIZE ( PTA )) :: ZLW2_RF ! 4th power of !                                         ! surface temperature REAL , DIMENSION ( SIZE ( PTA )) :: ZSR_RF ! snow fall on roof snow (kg/s/m2 of snow) REAL , DIMENSION ( SIZE ( PTA )) :: ZSR_RD ! snow fall on road snow (kg/s/m2 of snow) ! REAL , DIMENSION ( SIZE ( PTA )) :: ZT_SKY ! sky temperature REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_COEFA ! Coefficient A for implicit coupling !                                         ! of snow with the underlying surface REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_COEFB ! Coefficient B for implicit coupling !                                         ! of snow with the underlying surface ! ! flags to call to snow routines ! LOGICAL :: GSN_RF , GSN_RD ! ! loop counters ! INTEGER :: JL REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_SNOW_EVOL' , 0 , ZHOOK_HANDLE ) PRNSN_RF (:) = 0. PHSN_RF (:) = 0. PLESN_RF (:) = 0. PGSN_RF (:) = 0. PMELT_RF (:) = 0. PRNSN_RD (:) = 0. PHSN_RD (:) = 0. PLESN_RD (:) = 0. PGSN_RD (:) = 0. PMELT_RD (:) = 0. PABS_LW_SN_RF (:) = 0. PABS_LW_SN_RD (:) = 0. ! !------------------------------------------------------------------------------- ! GSN_RF = ANY ( PSR (:) > 0. . OR . T % TSNOW_ROOF % WSNOW (:, 1 ) > 0. ) GSN_RD = ANY ( PSR (:) > 0. . OR . T % TSNOW_ROAD % WSNOW (:, 1 ) > 0. ) ! !------------------------------------------------------------------------------- ! !*      5.     Snow mantel model !              ----------------- ! !*      5.1    roofs !              ----- ! IF ( GSN_RF ) THEN ! !* initializes LW radiative coefficients ! ZLW1_RF (:) = T % TSNOW_ROOF % EMIS (:) * PLW_RAD (:) ZLW2_RF (:) = - T % TSNOW_ROOF % EMIS (:) * XSTEFAN ! !* The global amount of snow on roofs is supposed located on a !  fraction of the roof surface. All computations are then !  done only for each m2 of snow, and not for each m2 of roof. ! DO JL = 1 , SIZE ( T % TSNOW_ROOF % WSNOW , 2 ) WHERE ( PDN_RF (:) > 0. ) T % TSNOW_ROOF % WSNOW (:, JL ) = T % TSNOW_ROOF % WSNOW (:, JL ) / PDN_RF (:) END DO ZSR_RF = 0. WHERE ( PDN_RF (:) > 0. ) ZSR_RF (:) = PSR (:) / PDN_RF (:) ! !* Estimates implicit coupling between snow and roof ! (strictly equal to an implicit formulation for 100% snow coverage) ! CALL ROOF_IMPL_COEF ( T , PTSTEP , ZTS_COEFA , ZTS_COEFB ) ! !* call to snow mantel scheme ! IF ( T % TSNOW_ROOF % SCHEME == '1-L' ) & CALL SNOW_COVER_1LAYER ( PTSTEP , XANSMIN_ROOF , XANSMAX_ROOF , XANS_TODRY_ROOF , & XRHOSMIN_ROOF , XRHOSMAX_ROOF , XANS_T_ROOF , . TRUE ., 0. , & XWCRN_ROOF , XZ0SN , XZ0HSN , T % TSNOW_ROOF , PTS_RF , & ZTS_COEFA , ZTS_COEFB , PABS_SW_SN_RF , ZLW1_RF , ZLW2_RF ,& PTA , PQA , PVMOD , PPS , PRHOA , ZSR_RF , PZREF , PUREF , & PRNSN_RF , PHSN_RF , PLESN_RF , PGSN_RF , PMELT_RF , & PDQS_SN_RF , PABS_LW_SN_RF ) ! ! !* The global amount of snow on roofs is reported to total roof surface. ! DO JL = 1 , SIZE ( T % TSNOW_ROOF % WSNOW , 2 ) T % TSNOW_ROOF % WSNOW (:, JL ) = T % TSNOW_ROOF % WSNOW (:, JL ) * PDN_RF (:) END DO ! END IF ! !*      5.2    roads !              ----- ! IF ( GSN_RD ) THEN ! ZT_SKY (:) = ( PLW_RAD (:) / XSTEFAN ) ** 0.25 ! ZLW1_RD (:) = PLW_S_TO_NR (:) * ( ZT_SKY (:) - T % TSNOW_ROAD % TS (:)) & + PLW_WA_TO_NR (:) * ( PTS_WL_A (:) - T % TSNOW_ROAD % TS (:)) & + PLW_WB_TO_NR (:) * ( PTS_WL_B (:) - T % TSNOW_ROAD % TS (:)) & + PLW_WIN_TO_NR (:) * ( B % XT_WIN1 (:) - T % TSNOW_ROAD % TS (:)) ZLW2_RD (:) = 0.0 ! !* The global amount of snow on roads is supposed located on a !  fraction of the road surface. All computations are then !  done only for each m2 of snow, and not for each m2 of road. ! DO JL = 1 , SIZE ( T % TSNOW_ROAD % WSNOW , 2 ) WHERE ( PDN_RD (:) > 0. ) T % TSNOW_ROAD % WSNOW (:, JL ) = T % TSNOW_ROAD % WSNOW (:, JL ) / PDN_RD (:) END DO ZSR_RD = 0. WHERE ( PDN_RD (:) > 0. ) ZSR_RD (:) = PSR (:) / PDN_RD (:) ! !* no implicit coupling necessary with road ! ZTS_COEFA = 0. ZTS_COEFB = PTS_RD ! !* call to snow mantel scheme ! IF ( T % TSNOW_ROAD % SCHEME == '1-L' ) & CALL SNOW_COVER_1LAYER ( PTSTEP , XANSMIN_ROAD , XANSMAX_ROAD , XANS_TODRY_ROAD , & XRHOSMIN_ROAD , XRHOSMAX_ROAD , XANS_T_ROAD , . FALSE ., & 0. , XWCRN_ROAD , XZ0SN , XZ0HSN , T % TSNOW_ROAD , PTS_RD , & ZTS_COEFA , ZTS_COEFB , PABS_SW_SN_RD , ZLW1_RD , ZLW2_RD ,& PT_LWCN , PQ_LWCN , PU_LWCN , PPS , PRHOA , ZSR_RD , PZ_LWCN ,& PZ_LWCN , PRNSN_RD , PHSN_RD , PLESN_RD , PGSN_RD , & PMELT_RD , PDQS_SN_RD , PABS_LW_SN_RD ) ! !* The global amount of snow on roads is reported to total road surface. ! DO JL = 1 , SIZE ( T % TSNOW_ROAD % WSNOW , 2 ) T % TSNOW_ROAD % WSNOW (:, JL ) = T % TSNOW_ROAD % WSNOW (:, JL ) * PDN_RD (:) END DO ! WHERE ( T % TSNOW_ROAD % T (:, 1 ) . EQ . XUNDEF ) PDN_RD (:) = 0.0 ! END IF IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_SNOW_EVOL' , 1 , ZHOOK_HANDLE ) ! ! !------------------------------------------------------------------------------- ! END SUBROUTINE URBAN_SNOW_EVOL","tags":"","loc":"sourcefile/urban_snow_evol.f90.html"},{"title":"spll_modi_isba.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_ISBA Source Code spll_modi_isba.f90 Source Code !auto_modi:spll_isba.D MODULE MODI_ISBA INTERFACE SUBROUTINE ISBA ( IO , KK , PK , PEK , G , AG , DK , DEK , DMK , TPTIME , PPOI , PABC , PIACAN , & OMEB , PTSTEP , HIMPLICIT_WIND , PZREF , PUREF , PDIRCOSZW , & PTA , PQA , PEXNA , PRHOA , PPS , PEXNS , PRR , PSR , PZENITH , & PSCA_SW , PSW_RAD , PLW_RAD , PVMOD , PPEW_A_COEF , PPEW_B_COEF ,& PPET_A_COEF , PPEQ_A_COEF , PPET_B_COEF , PPEQ_B_COEF , & PALBNIR_TVEG , PALBVIS_TVEG , PALBNIR_TSOIL , PALBVIS_TSOIL , & PPALPHAN , PZ0G_WITHOUT_SNOW , PZ0_MEBV , PZ0H_MEBV , & PZ0EFF_MEBV , PZ0_MEBN , PZ0H_MEBN , PZ0EFF_MEBN , PTDEEP_A , & PCSP , PFFG_NOSNOW , PFFV_NOSNOW , PEMIST , PUSTAR , PAC_AGG , & PHU_AGG , PRESP_BIOMASS_INST , PDEEP_FLUX , PIRRIG_GR ) USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t USE MODD_ISBA_n , ONLY : ISBA_K_t , ISBA_P_t , ISBA_PE_t USE MODD_SFX_GRID_n , ONLY : GRID_t USE MODD_AGRI_n , ONLY : AGRI_t USE MODD_DIAG_n , ONLY : DIAG_t USE MODD_DIAG_EVAP_ISBA_n , ONLY : DIAG_EVAP_ISBA_t USE MODD_DIAG_MISC_ISBA_n , ONLY : DIAG_MISC_ISBA_t USE MODD_TYPE_DATE_SURF , ONLY : DATE_TIME IMPLICIT NONE TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: IO TYPE ( ISBA_K_t ), INTENT ( INOUT ) :: KK TYPE ( ISBA_P_t ), INTENT ( INOUT ) :: PK TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK TYPE ( GRID_t ), INTENT ( INOUT ) :: G TYPE ( AGRI_t ), INTENT ( INOUT ) :: AG TYPE ( DIAG_t ), INTENT ( INOUT ) :: DK TYPE ( DIAG_EVAP_ISBA_t ), INTENT ( INOUT ) :: DEK TYPE ( DIAG_MISC_ISBA_t ), INTENT ( INOUT ) :: DMK TYPE ( DATE_TIME ), INTENT ( IN ) :: TPTIME ! current date and time REAL , DIMENSION (:), INTENT ( IN ) :: PPOI ! Gaussian weights (as above) REAL , DIMENSION (:), INTENT ( INOUT ) :: PABC ! abscissa needed for integration REAL , DIMENSION (:,:), INTENT ( OUT ) :: PIACAN ! PAR in the canopy at different gauss level LOGICAL , INTENT ( IN ) :: OMEB ! True = patch with multi-energy balance REAL , INTENT ( IN ) :: PTSTEP ! timestep of the integration CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! normal distance of the first REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the wind REAL , DIMENSION (:), INTENT ( IN ) :: PDIRCOSZW ! Director Cosinus along z REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! Temperature REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PEXNA ! Exner function REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! Pressure REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! Exner function REAL , DIMENSION (:), INTENT ( IN ) :: PRR ! Rain rate (in kg/m2/s) REAL , DIMENSION (:), INTENT ( IN ) :: PSR ! Snow rate (in kg/m2/s) REAL , DIMENSION (:), INTENT ( IN ) :: PZENITH ! solar zenith angle REAL , DIMENSION (:), INTENT ( IN ) :: PSW_RAD ! solar   incoming radiation REAL , DIMENSION (:), INTENT ( IN ) :: PSCA_SW ! solar diffuse incoming radiation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! thermal incoming radiation REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! modulus of the wind REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_A_COEF , PPEW_B_COEF , & PPET_A_COEF , PPEQ_A_COEF , & PPET_B_COEF , PPEQ_B_COEF REAL , DIMENSION (:), INTENT ( IN ) :: PALBNIR_TVEG ! tot albedo of vegetation in NIR (needed for LM_TR) REAL , DIMENSION (:), INTENT ( IN ) :: PALBVIS_TVEG ! tot albedo of vegetation in VIS REAL , DIMENSION (:), INTENT ( IN ) :: PALBNIR_TSOIL ! tot albedo of bare soil in NIR REAL , DIMENSION (:), INTENT ( IN ) :: PALBVIS_TSOIL ! tot albedo of bare soil in VIS REAL , DIMENSION (:), INTENT ( IN ) :: PPALPHAN ! snow/canopy transition coefficient REAL , DIMENSION (:), INTENT ( IN ) :: PZ0G_WITHOUT_SNOW ! roughness length for momentum at snow-free canopy floor REAL , DIMENSION (:), INTENT ( IN ) :: PZ0_MEBV ! roughness length for momentum over MEB vegetation part of patch REAL , DIMENSION (:), INTENT ( IN ) :: PZ0H_MEBV ! roughness length for heat over MEB vegetation part of path REAL , DIMENSION (:), INTENT ( IN ) :: PZ0EFF_MEBV ! roughness length for momentum over MEB vegetation part of patch REAL , DIMENSION (:), INTENT ( IN ) :: PZ0_MEBN ! roughness length for momentum over MEB snow part of patch REAL , DIMENSION (:), INTENT ( IN ) :: PZ0H_MEBN ! roughness length for heat over MEB snow part of path REAL , DIMENSION (:), INTENT ( IN ) :: PZ0EFF_MEBN ! roughness length for momentum over MEB snow part of patch REAL , DIMENSION (:), INTENT ( IN ) :: PTDEEP_A ! Deep soil temperature (prescribed) REAL , DIMENSION (:), INTENT ( IN ) :: PCSP ! atmospheric CO2 concentration REAL , DIMENSION (:), INTENT ( IN ) :: PFFG_NOSNOW ! Without snow (ES) REAL , DIMENSION (:), INTENT ( IN ) :: PFFV_NOSNOW ! Without snow (ES) REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIST ! grid-area surface emissivity REAL , DIMENSION (:), INTENT ( OUT ) :: PUSTAR ! friction velocity REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_AGG ! aggregated aerodynamic conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PHU_AGG ! aggregated relative humidity REAL , DIMENSION (:,:), INTENT ( OUT ) :: PRESP_BIOMASS_INST ! instantaneous biomass respiration (kgCO2/kgair m/s) REAL , DIMENSION (:), INTENT ( OUT ) :: PDEEP_FLUX ! Heat flux at bottom of ISBA (W/m2) REAL , DIMENSION (:), INTENT ( IN ) :: PIRRIG_GR ! ground irrigation rate (kg/m2/s) END SUBROUTINE ISBA END INTERFACE END MODULE MODI_ISBA","tags":"","loc":"sourcefile/spll_modi_isba.f90.html"},{"title":"flxsurf3bx.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines FLXSURF3BX Source Code flxsurf3bx.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !-------------------------------------- LICENCE BEGIN ------------------------------------ !Environment Canada - Atmospheric Science and Technology License/Disclaimer, !                     version 3; Last Modified: May 7, 2008. !This is free but copyrighted software; you can use/redistribute/modify it under the terms !of the Environment Canada - Atmospheric Science and Technology License/Disclaimer !version 3 or (at your option) any later version that should be found at: !http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html ! !This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; !without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. !See the above mentioned License/Disclaimer for more details. !You should have received a copy of the License/Disclaimer along with this software; !if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), !CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca !-------------------------------------- LICENCE END -------------------------------------- !copyright (C) 2001  MSC-RPN COMM  %%%RPNPHY%%% !!!S/P  FLXSURF3 ! SUBROUTINE FLXSURF3BX ( CMU , CTU , RIB , FTEMP , FVAP , ILMO , & & UE , FCOR , TA , QA , ZU , ZT , VA , & & TG , QG , H , Z0 , Z0T , & & LZZ0 , LZZ0T , FM , FH , N ) ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB !RJ: added modi, after freeform conversion USE MODI_VSLOG ! IMPLICIT NONE INTEGER :: N REAL :: CMU ( N ), CTU ( N ), RIB ( N ), FCOR ( N ), ILMO ( N ) REAL :: FTEMP ( N ), FVAP ( N ), TA ( N ), QA ( N ), ZU ( N ), ZT ( N ), VA ( N ) REAL :: TG ( N ), QG ( N ), H ( N ), Z0 ( N ), UE ( N ) REAL :: Z0T ( N ), LZZ0 ( N ), LZZ0T ( N ) REAL :: fm ( N ), fh ( N ) ! !Author !          Y.Delage (Jul 1990) !Revision ! 001      G. Pellerin (Jun 94) New function for unstable case ! 002      G. Pellerin (Jui 94) New formulation for stable case ! 003      B. Bilodeau (Nov 95) Replace VK by KARMAN ! 004      M. Desgagne (Dec 95) Add safety code in function ff !                               and ensures that RIB is non zero ! 005      R. Sarrazin (Jan 96) Correction for H ! 006      C. Girard (Nov 95) - Diffuse T instead of Tv ! 007      G. Pellerin (Feb 96) Revised calculation for H (stable) ! 008      G. Pellerin (Feb 96) Remove corrective terms to CTU ! 009      Y. Delage and B. Bilodeau (Jul 97) - Cleanup ! 010      Y. Delage (Feb 98) - Addition of HMIN ! 011      D. Talbot and Y. Delage (Jan 02) - !             Correct bug of zero divide by dg in loop 35 ! 012      Y. Delage (Oct 03) - Set top of surface layer at ZU +Z0 !                   - Output UE instead of UE**2 and rename subroutine !                   - Change iteration scheme for stable case !                   - Introduce log-linear profile for near-neutral stable cases !                   - set VAMIN inside flxsurf and initialise ILMO and H !                   - Put stability functions into local functions via stabfunc.h ! 013      Y. Delage (Sep 04) - Input of wind and temperature/humidity !                                at different levels ! 014      R. McTaggart-Cowan and B. Bilodeau (May 2006) - !             Clean up stabfunc.h ! 015      L. Spacek (Dec 07) - Correction of the log-linear profile !                               Double precision for rib calculations ! !Object !          to calculate surface layer transfer coefficients and fluxes ! !Arguments ! !          - Output - ! CMU      transfer coefficient of momentum times UE ! CTU      transfer coefficient of temperature times UE ! RIB      bulk Richardson number ! FTEMP    temperature flux ! FVAP     vapor flux ! ILMO     (1/length of Monin-Obukov) ! UE       friction velocity ! H        height of the boundary layer ! FM       momentum stability function ! FH       heat stability function ! LZZ0     log ((zu+z0)/z0) ! LZZ0T    log ((zt+z0)/z0t) ! !          - Input - ! FCOR     Coriolis factor ! ZU       height of wind input (measured from model base at topo height + Z0) ! ZT       height of temperature and humidity input ! TA       potential temperature at ZT ! QA       specific humidity at ZT ! VA       wind speed at ZU ! TG       surface temperature ! QG       specific humidity at the surface ! Z0       roughness length for momentum      flux calculations ! Z0T      roughness length for heat/moisture flux calculations ! N        horizontal dimension ! ! !RJ #include \"surfcon.h\" !RJ       LOGICAL :: INIT !     PHYSICAL CONSTANTS REAL , PARAMETER :: CPD = . 10054 6e+4 ! J K-1 kg-1    ! specific heat of dry air REAL , PARAMETER :: CPV = . 18694 6e+4 ! J K-1 kg-1    ! specific heat of water vapour REAL , PARAMETER :: RGASD = . 2870 5e+3 ! J K-1 kg-1    ! gas constant for dry air REAL , PARAMETER :: RGASV = . 4615 1e+3 ! J K-1 kg-1    ! gas constant for water vapour REAL , PARAMETER :: TRPL = . 2731 6e+3 ! K             ! triple point of water REAL , PARAMETER :: TCDK = . 2731 5e+3 !               ! conversion from kelvin to celsius REAL , PARAMETER :: RAUW = . 1e+4 !               ! density of liquid H2O REAL , PARAMETER :: EPS1 = . 62194800221014 !               ! RGASD/RGASV REAL , PARAMETER :: EPS2 = . 3780199778986 !               ! 1 - EPS1 REAL , PARAMETER :: DELTA = . 6077686814144 !               ! 1/EPS1 - 1 REAL , PARAMETER :: CAPPA = . 28549121795 !               ! RGASD/CPD REAL , PARAMETER :: TGL = . 2731 6e+3 ! K             ! ice temperature in the atmosphere REAL , PARAMETER :: CONSOL = . 136 7e+4 ! W m-2         ! solar constant REAL , PARAMETER :: GRAV = . 98061 6e+1 ! M s-2         ! gravitational acceleration REAL , PARAMETER :: RAYT = . 63712 2e+7 ! M             ! mean radius of the earth REAL , PARAMETER :: STEFAN = . 56694 8e-7 ! J m-2 s-1 K-4 ! Stefan-Boltzmann constant REAL , PARAMETER :: PI = . 31415926535 9e+1 !               ! PI constant = ACOS(-1) REAL , PARAMETER :: OMEGA = . 729 2e-4 ! s-1           ! angular speed of rotation of the earth REAL , PARAMETER :: KNAMS = . 514791 !               ! conversion from knots to m/s REAL , PARAMETER :: STLO = . 662848658394 3e-3 ! K s2 m-2      ! Schuman-Newell Lapse Rate REAL , PARAMETER :: KARMAN = . 35 !               ! Von Karman constant REAL , PARAMETER :: RIC = . 2 !               ! Critical Richardson number REAL , PARAMETER :: CHLC = . 250 1e+7 ! J kg-1        ! latent heat of condensation REAL , PARAMETER :: CHLF = . 33 4e+6 ! J kg-1        ! latent heat of fusion REAL , PARAMETER :: T1S = . 2731 6e+3 ! K             ! constant used to calculate L/Cp in fcn HTVOCP REAL , PARAMETER :: T2S = . 2581 6e+3 ! K             ! constant used to calculate L/Cp in fcn HTVOCP REAL , PARAMETER :: AW = . 313501282994 8e+4 !               ! constant used to calculate L/Cp in fcn HTVOCP REAL , PARAMETER :: BW = . 236707576631 6e+1 !               ! constant used to calculate L/Cp in fcn HTVOCP REAL , PARAMETER :: AI = . 286488771308 7e+4 !               ! constant used to calculate L/Cp in fcn HTVOCP REAL , PARAMETER :: BI = . 166093131502 !               ! constant used to calculate L/Cp in fcn HTVOCP REAL , PARAMETER :: SLP = . 666666666666 7e-1 !               ! constant used to calculate L/Cp in fcn HTVOCP !RJ #include \"consphy.h\" !     INITIALIZES THE CONSTANTS FOR THE COMMONS OF THE FLXSURF3 ROUTINE FROM !     CANADIAN METEOROLOGICAL CENTER REAL , PARAMETER :: AS = 1 2. REAL , PARAMETER :: ASX = 5. REAL , PARAMETER :: CI = 4 0. REAL , PARAMETER :: BS = 1.0 REAL , PARAMETER :: BETA = 1.0 REAL , PARAMETER :: FACTN = 1.2 REAL , PARAMETER :: HMIN = 3 0. REAL , PARAMETER :: ANGMAX = 0.85 REAL , PARAMETER :: RAC3 = SQRT ( 3. ) ! !* ! INTEGER , PARAMETER :: JDBL = 8 ! INTEGER :: J INTEGER :: IT INTEGER , PARAMETER :: ITMAX = 3 REAL , PARAMETER :: HMAX = 150 0.0 REAL , PARAMETER :: CORMIN = 0.7E-4 REAL , PARAMETER :: EPSLN = 1.0e-05 REAL , PARAMETER :: VAMIN = 0.1 REAL :: CM , CT , ZP REAL :: F , G , DG REAL :: hi , HE , HS , unsl REAL ( KIND = JDBL ) :: DTHV , TVA , TVS REAL :: HL , U REAL :: CS , XX , XX0 , YY , YY0 REAL :: ZB , DD , ILMOX REAL :: DF , ZZ , betsasx REAL :: aa , bb , cc REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! DF ( ZZ ) = ( 1 - ZZ * hi ) * sqrt ( 1 + 4 * AS * BETA * unsl * ZZ / ( 1 - ZZ * hi )) CS = AS * 2.5 betsasx = 1. / asx ! IF ( LHOOK ) CALL DR_HOOK ( 'FLXSURF3BX' , 0 , ZHOOK_HANDLE ) ! DO J = 1 , N LZZ0 ( J ) = 1 + ZU ( J ) / Z0 ( J ) LZZ0T ( J ) = ( ZT ( J ) + Z0 ( J )) / Z0T ( J ) ENDDO ! call vslog ( LZZ0T , LZZ0T , N ) call vslog ( LZZ0 , LZZ0 , N ) ! DO J = 1 , N ! !  CALCULATE THE RICHARDSON NUMBER ZP = ZU ( J ) ** 2 / ( ZT ( J ) + Z0 ( J ) - Z0T ( J )) u = max ( vamin , va ( j )) tva = ( 1.0_JDBL + DELTA * QA ( J )) * TA ( J ) tvs = ( 1.0_JDBL + DELTA * QG ( J )) * TG ( J ) dthv = tva - tvs RIB ( J ) = GRAV / ( tvs + 0.5_JDBL * dthv ) * ZP * dthv / ( u * u ) if ( rib ( j ) >= 0.0_JDBL ) rib ( j ) = max ( rib ( j ), EPSLN ) if ( rib ( j ) < 0.0_JDBL ) rib ( j ) = min ( rib ( j ), - EPSLN ) ! !  FIRST APPROXIMATION TO ILMO IF ( RIB ( J ) > 0.0_JDBL ) THEN FM ( J ) = LZZ0 ( J ) + CS * RIB ( J ) / max ( 2 * z0 ( j ), 1.0_JDBL ) FH ( J ) = BETA * ( LZZ0T ( J ) + CS * RIB ( J )) / & & max ( sqrt ( z0 ( j ) * z0t ( j )), 1.0_JDBL ) ILMO ( J ) = RIB ( J ) * FM ( J ) * FM ( J ) / ( ZP * FH ( J )) F = MAX ( ABS ( FCOR ( J )), CORMIN ) H ( J ) = BS * sqrt ( KARMAN * u / ( ILMO ( J ) * F * fm ( j ))) ELSE FM ( J ) = LZZ0 ( J ) - min ( 0.7_JDBL + log ( 1 - rib ( j )), LZZ0 ( J ) - 1 ) FH ( J ) = BETA * ( LZZ0T ( J ) - min ( 0.7_JDBL + log ( 1 - rib ( j )), LZZ0T ( J ) - 1 )) ILMO ( J ) = RIB ( J ) * FM ( J ) * FM ( J ) / ( ZP * FH ( J )) ENDIF ENDDO ! ! - - - - - - - - -  BEGINNING OF ITERATION LOOP - - - - - - - - - - - DO 35 IT = 1 , ITMAX DO 35 J = 1 , N u = max ( vamin , va ( j )) ZP = ZU ( J ) ** 2 / ( ZT ( J ) + Z0 ( J ) - Z0T ( J )) IF ( RIB ( J ) > 0.0_JDBL ) THEN !---------------------------------------------------------------------- !  STABLE CASE ILMO ( J ) = max ( EPSLN , ILMO ( J )) hl = ( ZU ( J ) + 10 * Z0 ( J )) * FACTN F = MAX ( ABS ( FCOR ( J )), CORMIN ) hs = BS * sqrt ( KARMAN * u / ( ILMO ( J ) * F * fm ( j ))) H ( J ) = MAX ( HMIN , hs , hl , factn / ( 4 * AS * BETA * ilmo ( j ))) hi = 1 / h ( j ) !CDIR IEXPAND fm ( J ) = LZZ0 ( J ) + psi ( ZU ( J ) + Z0 ( J ), hi , ilmo ( j )) - psi ( Z0 ( J ), hi , ilmo ( j )) !CDIR IEXPAND fh ( J ) = BETA * ( LZZ0T ( J ) + psi ( ZT ( J ) + Z0 ( J ), hi , ilmo ( j )) - psi ( Z0T ( J ), hi , & & ilmo ( j ))) unsl = ILMO ( J ) DG =- ZP * FH ( J ) / ( FM ( J ) * FM ( J )) * ( 1 + beta * ( DF ( ZT ( J ) + Z0 ( J )) - DF ( Z0T ( J ))) / & & ( 2 * FH ( J )) - ( DF ( ZU ( J ) + Z0 ( J )) - DF ( Z0 ( J ))) / FM ( J )) !---------------------------------------------------------------------- !  UNSTABLE CASE ELSE ILMO ( J ) = MIN ( 0. , ILMO ( J )) !CDIR IEXPAND FM ( J ) = fmi ( zu ( j ) + z0 ( j ), z0 ( j ), lzz0 ( j ), ilmo ( j ), xx , xx0 ) !CDIR IEXPAND FH ( J ) = fhi ( zt ( j ) + z0 ( j ), z0t ( j ), lzz0t ( j ), ilmo ( j ), yy , yy0 ) DG =- ZP * FH ( J ) / ( FM ( J ) * FM ( J )) * ( 1 + beta / FH ( J ) * ( 1 / YY - 1 / YY0 ) - 2 / FM ( J ) * & & ( 1 / XX - 1 / XX0 )) ENDIF !---------------------------------------------------------------------- IF ( IT < ITMAX ) THEN G = RIB ( J ) - FH ( J ) / ( FM ( J ) * FM ( J )) * ZP * ILMO ( J ) ILMO ( J ) = ILMO ( J ) - G / DG ENDIF 35 CONTINUE ! - - - - - -  - - - END OF ITERATION LOOP - - - - - - - - - - - - - - ! DO 80 J = 1 , N u = max ( vamin , va ( j )) if ( asx < as ) then !---------------------------------------------------------------------- !  CALCULATE ILMO AND STABILITY FUNCTIONS FROM LOG-LINEAR PROFILE !     (SOLUTION OF A QUADRATIC EQATION) ! zb = zu ( j ) / ( zt ( j ) + z0 ( j ) - z0t ( j )) !  DISCRIMINANT dd = ( beta * lzz0t ( j ) * zb ) ** 2 - 4 * rib ( j ) * asx * lzz0 ( j ) * & & ( beta * lzz0t ( j ) * zb - lzz0 ( j )) if ( rib ( j ) > 0.0_JDBL . and . rib ( j ) < betsasx . and . dd >= 0. ) then !  COEFFICIENTS aa = asx * asx * rib ( j ) - asx bb =- beta * lzz0t ( j ) * zb + 2 * rib ( j ) * asx * lzz0 ( j ) cc = rib ( j ) * lzz0 ( j ) ** 2 !  SOLUTION if ( bb >= 0 ) then ilmox = ( - bb - sqrt ( dd )) / ( 2 * zu ( j ) * aa ) else ilmox = 2 * cc / ( zu ( j ) * ( - bb + sqrt ( dd ))) endif if ( ilmox < ilmo ( j )) then ilmo ( j ) = ilmox fm ( j ) = lzz0 ( j ) + asx * zu ( j ) * ilmox fh ( j ) = beta * lzz0t ( j ) + asx * ( zt ( j ) + z0 ( j ) - z0t ( j )) * ilmox endif endif endif !---------------------------------------------------------------------- CM = KARMAN / FM ( J ) CT = KARMAN / FH ( J ) UE ( J ) = u * CM CMU ( J ) = CM * UE ( J ) CTU ( J ) = CT * UE ( J ) if ( rib ( j ) > 0.0_JDBL ) then !          stable case H ( J ) = MIN ( H ( J ), hmax ) else !          unstable case F = MAX ( ABS ( FCOR ( J )), CORMIN ) he = max ( HMIN , 0.3_JDBL * UE ( J ) / F ) H ( J ) = MIN ( he , hmax ) endif FTEMP ( J ) =- CTU ( J ) * ( TA ( J ) - TG ( J )) FVAP ( J ) =- CTU ( J ) * ( QA ( J ) - QG ( J )) 80 CONTINUE IF ( LHOOK ) CALL DR_HOOK ( 'FLXSURF3BX' , 1 , ZHOOK_HANDLE ) CONTAINS !RJ: inlining directly !RJ #include \"stabfunc2.h\" ! !   Internal function FMI !   Stability function for momentum in the unstable regime (ilmo<0) !   Reference: Delage Y. and Girard C. BLM 58 (19-31) Eq. 19 ! FUNCTION FMI ( Z2 , Z02 , LZZ02 , ILMO2 , X , X0 ) IMPLICIT NONE ! REAL :: FMI REAL , INTENT ( IN ) :: Z2 , Z02 , LZZ02 , ILMO2 REAL , INTENT ( OUT ) :: X , X0 ! X = ( 1 - CI * Z2 * BETA * ILMO2 ) ** ( 0.16666666 ) X0 = ( 1 - CI * Z02 * BETA * ILMO2 ) ** ( 0.16666666 ) FMI = LZZ02 + LOG (( X0 + 1 ) ** 2 * SQRT ( X0 ** 2 - X0 + 1 ) * ( X0 ** 2 + X0 + 1 ) ** 1.5 & & / (( X + 1 ) ** 2 * SQRT ( X ** 2 - X + 1 ) * ( X ** 2 + X + 1 ) ** 1.5 )) & & + RAC3 * ATAN ( RAC3 * (( X ** 2 - 1 ) * X0 - ( X0 ** 2 - 1 ) * X ) / & & (( X0 ** 2 - 1 ) * ( X ** 2 - 1 ) + 3 * X * X0 )) ! RETURN END FUNCTION FMI ! !   Internal function FHI !   Stability function for heat and moisture in the unstable regime (ilmo<0) !   Reference: Delage Y. and Girard C. BLM 58 (19-31) Eq. 17 ! FUNCTION FHI ( Z2 , Z0T2 , LZZ0T2 , ILMO2 , Y , Y0 ) IMPLICIT NONE ! REAL :: FHI REAL , INTENT ( IN ) :: Z2 , Z0T2 , LZZ0T2 , ILMO2 REAL , INTENT ( OUT ) :: Y , Y0 ! Y = ( 1 - CI * Z2 * BETA * ILMO2 ) ** ( 0.33333333 ) Y0 = ( 1 - CI * Z0T2 * BETA * ILMO2 ) ** ( 0.33333333 ) FHI = BETA * ( LZZ0T2 + 1.5 * LOG (( Y0 ** 2 + Y0 + 1 ) / ( Y ** 2 + Y + 1 )) + RAC3 * & & ATAN ( RAC3 * 2 * ( Y - Y0 ) / (( 2 * Y0 + 1 ) * ( 2 * Y + 1 ) + 3 ))) ! RETURN END FUNCTION FHI ! !   Internal function psi !   Stability function for momentum in the stable regime (unsl>0) !   Reference :  Y. Delage, BLM, 82 (p23-48) (Eqs.33-37) ! FUNCTION PSI ( Z2 , HI2 , ILMO2 ) IMPLICIT NONE ! REAL :: PSI REAL :: a , b , c , d REAL , INTENT ( IN ) :: ILMO2 , Z2 , HI2 ! d = 4 * AS * BETA * ILMO2 c = d * hi2 - hi2 ** 2 b = d - 2 * hi2 a = sqrt ( 1 + b * z2 - c * z2 ** 2 ) psi = 0.5 * ( a - z2 * hi2 - log ( 1 + b * z2 * 0.5 + a ) - & & b / ( 2 * sqrt ( c )) * asin (( b - 2 * c * z2 ) / d )) ! RETURN END FUNCTION PSI ! END SUBROUTINE FLXSURF3BX","tags":"","loc":"sourcefile/flxsurf3bx.f90.html"},{"title":"window_data.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines WINDOW_DATA Source Code window_data.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ############################################################# SUBROUTINE WINDOW_DATA ( KI , B ) !     ############################################################# ! ! !!****  *WINDOW_DATA* !! !!    PURPOSE !!    ------- ! !     Computes the radiative properties of the window ! ! !!**  METHOD !!     ------ !! uses U_WIN (window conductivity) and SHGC (window solar heat gain coef) !! to compute the normal incident transmittance/reflectance !! a factor to normal incident tran/ref is applied to take into account all !! possible incidence between 18deg and 72deg !! !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! Simple Window Model from EnergyPlus Engineering Reference V7, 2012, p. 217. !! !!    AUTHOR !!    ------ !! !!      B. Bueno           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    11/10 !!      G. Pigeon & J. Le Bras  09/12 apply new factor to normal incident tran/ref !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_BEM_n , ONLY : BEM_t ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! INTEGER , INTENT ( IN ) :: KI ! number of points TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , DIMENSION ( KI ) :: ZR_IW ! interior film resistance under winter conditions REAL , DIMENSION ( KI ) :: ZR_OW ! exterior fild resistance uder winter conditions REAL , DIMENSION ( KI ) :: ZR_IS ! interior film resistance under summer conditions REAL , DIMENSION ( KI ) :: ZR_OS ! exterior fild resistance uder summer conditions REAL , DIMENSION ( KI ) :: ZFRAC ! inward flowing fraction REAL , DIMENSION ( KI ) :: ZTRAN_WIN_NORM ! Window transmittance for normal incident beam REAL , DIMENSION ( KI ) :: ZALB_WIN_NORM ! Window reflectance for normal incident beam REAL , DIMENSION ( KI ) :: ZFAC_TRAN ! transmittance factor of the window to the normal incidence REAL , DIMENSION ( KI ) :: ZFAC_ALB ! reflectance (albedo) factor of the window to normal incidence REAL ( KIND = JPRB ) :: ZHOOK_HANDLE REAL :: TA , RA , TBCD , RBCD , TD , RD , TE , RE , TFGHI , RFGHI , TFH , RFH , TJ , RJ ! !* initialization and determine transmittance and reflectance factor of the window !Curve AT temp Et        RA = R temp Et TA = 0.9237767331 ; RA = 1.6911265959 TBCD = 0.8802058937 ; RBCD = 1.5239470129 TD = 0.893430955 ; RD = 1.0888507586 TE = 0.8743096978 ; RE = 1.5494187256 TFH = 0.8424427652 ; RFH = 1.0983010317 TFGHI = 0.8327695761 ; RFGHI = 1.3316554732 TJ = 0.7889001341 ; RJ = 1.0837577691 WHERE ( B % XU_WIN <= 1.42 ) !from 3 building BLD, TOUR and MI-2005 !ZONE 1 WHERE ( B % XSHGC >= 0.45 ) ZFAC_TRAN = TE ZFAC_ALB = RE END WHERE !ZONE 2 WHERE ( B % XSHGC < 0.45 . AND . B % XSHGC > 0.35 ) ZFAC_TRAN = TJ + ( B % XSHGC - 0.35 ) * ( TE - TJ ) / ( 0.45 - 0.35 ) ZFAC_ALB = RJ + ( B % XSHGC - 0.35 ) * ( RE - RJ ) / ( 0.45 - 0.35 ) END WHERE !ZONE 3 WHERE ( B % XSHGC <= 0.35 ) ZFAC_TRAN = TJ ZFAC_ALB = RJ END WHERE END WHERE WHERE ( B % XU_WIN > 1.42 . AND . B % XU_WIN < 1.70 ) !ZONE 4 WHERE ( B % XSHGC >= 0.55 ) ZFAC_TRAN = TE ZFAC_ALB = RE END WHERE !ZONE 5 WHERE ( B % XSHGC > 0.5 . AND . B % XSHGC < 0.55 ) ZFAC_TRAN = TE + ( B % XU_WIN - 1.42 ) * (( TFGHI + ( B % XSHGC - 0.5 ) * ( TE - TFGHI ) / ( 0.55 - 0.50 )) - TE ) / ( 1.70 - 1.42 ) ZFAC_ALB = RE + ( B % XU_WIN - 1.42 ) * (( RFGHI + ( B % XSHGC - 0.5 ) * ( RE - RFGHI ) / ( 0.55 - 0.50 )) - RE ) / ( 1.70 - 1.42 ) END WHERE !ZONE 6 WHERE ( B % XSHGC >= 0.45 . AND . B % XSHGC <= 0.5 ) ZFAC_TRAN = TE + ( B % XU_WIN - 1.42 ) * ( TFGHI - TE ) / ( 1.70 - 1.42 ) ZFAC_ALB = RE + ( B % XU_WIN - 1.42 ) * ( RFGHI - RE ) / ( 1.70 - 1.42 ) END WHERE !ZONE 7 WHERE ( B % XSHGC > 0.35 . AND . B % XSHGC < 0.45 ) ZFAC_TRAN = ( TJ + ( B % XSHGC - 0.35 ) * ( TE - TJ ) / ( 0.45 - 0.35 )) + & ( B % XU_WIN - 1.42 ) * ( TFGHI - ( TJ + ( B % XSHGC - 0.35 ) * ( TE - TJ ) / ( 0.45 - 0.35 ))) / ( 1.70 - 1.42 ) ZFAC_ALB = ( RJ + ( B % XSHGC - 0.35 ) * ( RE - RJ ) / ( 0.45 - 0.35 )) + & ( B % XU_WIN - 1.42 ) * ( RFGHI - ( RJ + ( B % XSHGC - 0.35 ) * ( RE - RJ ) / ( 0.45 - 0.35 ))) / ( 1.70 - 1.42 ) END WHERE !ZONE 8 WHERE ( B % XSHGC >= 0.30 . AND . B % XSHGC <= 0.35 ) ZFAC_TRAN = TJ + ( B % XU_WIN - 1.42 ) * ( TFGHI - TJ ) / ( 1.70 - 1.42 ) ZFAC_ALB = RJ + ( B % XU_WIN - 1.42 ) * ( RFGHI - RJ ) / ( 1.70 - 1.42 ) END WHERE !ZONE 9 WHERE ( B % XSHGC > 0.25 . AND . B % XSHGC < 0.35 ) ZFAC_TRAN = TJ + ( B % XU_WIN - 1.42 ) * (( TFH + ( B % XSHGC - 0.25 ) * ( TJ - TFH ) / ( 0.30 - 0.25 )) - TJ ) / ( 1.70 - 1.42 ) ZFAC_ALB = RJ + ( B % XU_WIN - 1.42 ) * (( RFH + ( B % XSHGC - 0.25 ) * ( RJ - RFH ) / ( 0.30 - 0.25 )) - RJ ) / ( 1.70 - 1.42 ) END WHERE !ZONE 10 WHERE ( B % XSHGC <= 0.25 ) ZFAC_TRAN = TJ + ( B % XU_WIN - 1.42 ) * ( TFH - TJ ) / ( 1.70 - 1.42 ) ZFAC_ALB = RJ + ( B % XU_WIN - 1.42 ) * ( RFH - RJ ) / ( 1.70 - 1.42 ) END WHERE END WHERE WHERE ( B % XU_WIN >= 1.70 . AND . B % XU_WIN <= 3.41 ) !ZONE 11 WHERE ( B % XSHGC >= 0.55 ) ZFAC_TRAN = TE ZFAC_ALB = RE END WHERE !ZONE 12 WHERE ( B % XSHGC > 0.5 . AND . B % XSHGC < 0.55 ) ZFAC_TRAN = TFGHI + ( B % XSHGC - 0.50 ) * ( TE - TFGHI ) / ( 0.55 - 0.50 ) ZFAC_ALB = RFGHI + ( B % XSHGC - 0.50 ) * ( RE - RFGHI ) / ( 0.55 - 0.50 ) END WHERE !ZONE 13 WHERE ( B % XSHGC >= 0.30 . AND . B % XSHGC <= 0.50 ) ZFAC_TRAN = TFGHI ZFAC_ALB = RFGHI END WHERE !ZONE 14 WHERE ( B % XSHGC > 0.25 . AND . B % XSHGC < 0.30 ) ZFAC_TRAN = TFH + ( B % XSHGC - 0.25 ) * ( TFGHI - TFH ) / ( 0.30 - 0.25 ) ZFAC_ALB = RFGHI + ( B % XSHGC - 0.25 ) * ( RFGHI - RFH ) / ( 0.30 - 0.25 ) END WHERE !ZONE 15 WHERE ( B % XSHGC <= 0.25 ) ZFAC_TRAN = TFH ZFAC_ALB = RFH END WHERE END WHERE WHERE ( B % XU_WIN > 3.41 . AND . B % XU_WIN < 4.54 ) !ZONE 16 WHERE ( B % XSHGC >= 0.65 ) ZFAC_TRAN = TE + ( B % XU_WIN - 3.41 ) * ( TA - TE ) / ( 4.54 - 3.41 ) ZFAC_ALB = RE + ( B % XU_WIN - 3.41 ) * ( RA - RE ) / ( 4.54 - 3.41 ) END WHERE !ZONE 17 WHERE ( B % XSHGC > 0.60 . AND . B % XSHGC < 0.65 ) ZFAC_TRAN = TE + ( B % XU_WIN - 3.41 ) * (( TBCD + ( B % XSHGC - 0.60 ) * ( TA - TBCD ) / ( 0.65 - 0.60 )) - TE ) / ( 4.54 - 3.41 ) ZFAC_ALB = RE + ( B % XU_WIN - 3.41 ) * (( RBCD + ( B % XSHGC - 0.60 ) * ( RA - RBCD ) / ( 0.65 - 0.60 )) - RE ) / ( 4.54 - 3.41 ) END WHERE !ZONE 18 WHERE ( B % XSHGC >= 0.55 . AND . B % XSHGC <= 0.60 ) ZFAC_TRAN = TE + ( B % XU_WIN - 3.41 ) * ( TBCD - TE ) / ( 4.54 - 3.41 ) ZFAC_ALB = RE + ( B % XU_WIN - 3.41 ) * ( RBCD - RE ) / ( 4.54 - 3.41 ) END WHERE !ZONE 19 WHERE ( B % XSHGC > 0.50 . AND . B % XSHGC < 0.55 ) ZFAC_TRAN = ( TFGHI + ( B % XSHGC - 0.50 ) * ( TE - TFGHI ) / ( 0.55 - 0.50 )) + & ( B % XU_WIN - 3.41 ) * ( TBCD - ( TFGHI + ( B % XSHGC - 0.50 ) * ( TE - TFGHI ) / ( 0.55 - 0.50 ))) / ( 4.54 - 3.41 ) ZFAC_ALB = ( RFGHI + ( B % XSHGC - 0.50 ) * ( RE - RFGHI ) / ( 0.55 - 0.50 )) + & ( B % XU_WIN - 3.41 ) * ( RBCD - ( RFGHI + ( B % XSHGC - 0.50 ) * ( RE - RFGHI ) / ( 0.55 - 0.50 ))) / ( 4.54 - 3.41 ) END WHERE !ZONE 20 WHERE ( B % XSHGC >= 0.45 . AND . B % XSHGC <= 0.50 ) ZFAC_TRAN = TFGHI + ( B % XU_WIN - 3.41 ) * ( TBCD - TFGHI ) / ( 4.54 - 3.41 ) ZFAC_ALB = RFGHI + ( B % XU_WIN - 3.41 ) * ( RBCD - RFGHI ) / ( 4.54 - 3.41 ) END WHERE !ZONE 21 WHERE ( B % XSHGC > 0.30 . AND . B % XSHGC < 0.45 ) ZFAC_TRAN = TFGHI + ( B % XU_WIN - 3.41 ) * (( TA + ( B % XSHGC - 0.30 ) * ( TBCD - TA ) / ( 0.45 - 0.30 )) - TFGHI ) / ( 4.54 - 3.41 ) ZFAC_ALB = RFGHI + ( B % XU_WIN - 3.41 ) * (( RA + ( B % XSHGC - 0.30 ) * ( RBCD - RA ) / ( 0.45 - 0.30 )) - RFGHI ) / ( 4.54 - 3.41 ) END WHERE !ZONE 22 WHERE ( B % XSHGC > 0.25 . AND . B % XSHGC < 0.30 ) ZFAC_TRAN = ( TFH + ( B % XSHGC - 0.25 ) * ( TFGHI - TFH ) / ( 0.30 - 0.25 )) + & ( B % XU_WIN - 3.41 ) * ( TD - ( TFH + ( B % XSHGC - 0.30 ) * ( TFGHI - TFH ) / ( 0.30 - 0.25 ))) / ( 4.54 - 3.41 ) ZFAC_ALB = ( RFH + ( B % XSHGC - 0.25 ) * ( RFGHI - RFH ) / ( 0.30 - 0.25 )) + & ( B % XU_WIN - 3.41 ) * ( RD - ( RFH + ( B % XSHGC - 0.30 ) * ( RFGHI - RFH ) / ( 0.30 - 0.25 ))) / ( 4.54 - 3.41 ) END WHERE !ZONE 23 WHERE ( B % XSHGC <= 0.25 ) ZFAC_TRAN = TFH + ( B % XU_WIN - 3.41 ) * ( TD - TFH ) / ( 4.54 - 3.41 ) ZFAC_ALB = RFH + ( B % XU_WIN - 3.41 ) * ( RD - RFH ) / ( 4.54 - 3.41 ) END WHERE END WHERE WHERE ( B % XU_WIN >= 4.54 ) !ZONE 24 WHERE ( B % XSHGC >= 0.65 ) ZFAC_TRAN = TA ZFAC_ALB = RA END WHERE !ZONE 25 WHERE ( B % XSHGC >= 0.60 . AND . B % XSHGC <= 0.65 ) ZFAC_TRAN = TBCD + ( B % XSHGC - 0.60 ) * ( TA - TBCD ) / ( 0.65 - 0.60 ) ZFAC_ALB = RBCD + ( B % XSHGC - 0.60 ) * ( RA - RBCD ) / ( 0.65 - 0.60 ) END WHERE !ZONE 26 WHERE ( B % XSHGC >= 0.45 . AND . B % XSHGC <= 0.60 ) ZFAC_TRAN = TBCD ZFAC_ALB = RBCD END WHERE !ZONE 27 WHERE ( B % XSHGC >= 0.30 . AND . B % XSHGC <= 0.45 ) ZFAC_TRAN = TD + ( B % XSHGC - 0.30 ) * ( TBCD - TD ) / ( 0.45 - 0.30 ) ZFAC_ALB = RD + ( B % XSHGC - 0.30 ) * ( RBCD - RD ) / ( 0.45 - 0.30 ) END WHERE !ZONE 28 WHERE ( B % XSHGC <= 0.30 ) ZFAC_TRAN = TD ZFAC_ALB = RD END WHERE END WHERE !*      A.     Determine glass-to-glass U-factor !              --------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'WINDOW_DATA' , 0 , ZHOOK_HANDLE ) ! WHERE ( B % XU_WIN (:) < 5.85 ) ZR_IW (:) = 1. / ( 0.359073 * log ( B % XU_WIN (:)) + 6.949915 ) ELSEWHERE ZR_IW (:) = 1. / ( 1.788041 * B % XU_WIN (:) - 2.886625 ) END WHERE ! ZR_OW (:) = 1. / ( 0.025342 * B % XU_WIN (:) + 2 9.163853 ) ! B % XUGG_WIN (:) = 1. / ( 1. / B % XU_WIN (:) - ZR_IW (:) - ZR_OW (:)) ! !*      B.     Determine layer solar transmittance !              ----------------------------------- ! WHERE ( B % XU_WIN (:) > 4.5 ) WHERE ( B % XSHGC (:) < 0.7206 ) ZTRAN_WIN_NORM (:) = 0.939998 * B % XSHGC (:) ** 2 + 0.20332 * B % XSHGC (:) ELSE WHERE ZTRAN_WIN_NORM (:) = 1.30415 * B % XSHGC (:) - 0.30515 END WHERE END WHERE WHERE ( B % XU_WIN (:) < 3.4 ) WHERE ( B % XSHGC (:) <= 0.15 ) ZTRAN_WIN_NORM (:) = 0.41040 * B % XSHGC (:) ELSE WHERE ZTRAN_WIN_NORM (:) = 0.085775 * B % XSHGC (:) ** 2 + 0.963954 * B % XSHGC (:) - 0.084958 END WHERE END WHERE WHERE ( B % XU_WIN (:) >= 3.4 . AND . B % XU_WIN (:) <= 4.5 ) WHERE ( B % XSHGC (:) <= 0.15 ) ZTRAN_WIN_NORM (:) = 0.5 * ( 0.939998 * B % XSHGC (:) ** 2 + ( 0.20332 + 0.41040 ) * B % XSHGC (:)) ELSE WHERE WHERE ( B % XSHGC (:) > 0.15 . AND . B % XSHGC (:) < 0.7206 ) ZTRAN_WIN_NORM (:) = 0.5 * & (( 0.939998 + 0.085775 ) * B % XSHGC (:) ** 2 + ( 0.20332 + 0.963954 ) * B % XSHGC (:) - 0.084958 ) ELSE WHERE ZTRAN_WIN_NORM (:) = 0.5 * & ( 0.085775 * B % XSHGC (:) ** 2 + ( 0.963954 + 1.30415 ) * B % XSHGC (:) - ( 0.084958 + 0.30515 )) END WHERE END WHERE END WHERE ! ! !*      C.     Determine layer solar reflectance !              --------------------------------- ! WHERE ( B % XU_WIN (:) > 4.5 ) ZR_IS (:) = 1. / ( 2 9.436546 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) ** 3 & - 2 1.943415 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) ** 2 & + 9.945872 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) + 7.426151 ) ! ZR_OS (:) = 1. / ( 2.225824 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) + 2 0.57708 ) ELSE WHERE WHERE ( B % XU_WIN (:) >= 3.4 ) ZR_IS (:) = 0.5 * ( & 1. / ( 2 9.436546 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) ** 3 & - 2 1.943415 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) ** 2 & + 9.945872 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) + 7.426151 ) & + 1. / ( 19 9.8208128 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) ** 3 & - 9 0.639733 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) ** 2 & + 1 9.737055 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) + 6.766575 ) ) ! ZR_OS (:) = 0.5 * ( & 1. / ( 2.225824 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) + 2 0.57708 ) & + 1. / ( 5.763355 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) + 2 0.541528 ) ) ! ELSE WHERE ZR_IS (:) = 1. / ( 19 9.8208128 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) ** 3 & - 9 0.639733 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) ** 2 & + 1 9.737055 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) + 6.766575 ) ! ZR_OS (:) = 1. / ( 5.763355 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) + 2 0.541528 ) END WHERE ! END WHERE ! ZFRAC (:) = ( ZR_OS (:) + 0.5 * ( 1. / B % XUGG_WIN (:))) / & ( ZR_OS (:) + 1. / B % XUGG_WIN (:) + ZR_IS (:)) ! ZALB_WIN_NORM (:) = 1. - ZTRAN_WIN_NORM (:) - ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) / ZFRAC (:) ! !*      D.     Determine layer solar absortance !              -------------------------------- ! B % XTRAN_WIN (:) = ZTRAN_WIN_NORM (:) * ZFAC_TRAN B % XALB_WIN (:) = ZALB_WIN_NORM (:) * ZFAC_ALB ! B % XABS_WIN (:) = 1. - B % XALB_WIN (:) - B % XTRAN_WIN (:) ! IF ( LHOOK ) CALL DR_HOOK ( 'WINDOW_DATA' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE WINDOW_DATA","tags":"","loc":"sourcefile/window_data.f90.html"},{"title":"modd_sfx_gridn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_SFX_GRID_n Source Code modd_sfx_gridn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################## MODULE MODD_SFX_GRID_n !     ################## ! !!****  *MODD_ISBA - declaration of grid for ISBA scheme !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       01/2004 ! !*       0.   DECLARATIONS !             ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE GRID_t !------------------------------------------------------------------------------- ! ! Grid definition ! INTEGER :: NDIM ! number of points CHARACTER ( LEN = 10 ) :: CGRID ! grid type !                                              ! \"NONE        \" : no grid computations !                                              ! \"CONF PROJ   \" : conformal projection !                                              ! \"SURF ATM    \" : nature points of surf. atm. grid ! INTEGER :: NGRID_PAR ! size of XGRID_PAR REAL , POINTER , DIMENSION (:) :: XGRID_PAR ! lits of parameters used to define the grid !                                              ! (depends on value of CGRID) ! !------------------------------------------------------------------------------- ! ! General surface parameters: ! REAL , POINTER , DIMENSION (:) :: XLAT ! latitude (degrees +North)               (-) REAL , POINTER , DIMENSION (:) :: XLON ! longitude (degrees +East)               (-) REAL , POINTER , DIMENSION (:) :: XMESH_SIZE ! mesh size                               (m2) !------------------------------------------------------------------------------- ! END TYPE GRID_t ! TYPE GRID_NP_t ! TYPE ( GRID_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE GRID_NP_t ! CONTAINS ! SUBROUTINE GRID_INIT ( G ) TYPE ( GRID_t ), INTENT ( INOUT ) :: G REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SFX_GRID_N:IGRID_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( G % XGRID_PAR ) NULLIFY ( G % XLAT ) NULLIFY ( G % XLON ) NULLIFY ( G % XMESH_SIZE ) G % NDIM = 0 G % CGRID = ' ' IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SFX_GRID_N:GRID_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE GRID_INIT ! SUBROUTINE GRID_NP_INIT ( GP , KPATCH ) TYPE ( GRID_NP_t ), INTENT ( INOUT ) :: GP INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SFX_GRID_N:GRID_NP_INIT\" , 0 , ZHOOK_HANDLE ) IF ( ASSOCIATED ( GP % AL )) THEN DO JP = 1 , KPATCH CALL GRID_INIT ( GP % AL ( JP )) ENDDO DEALLOCATE ( GP % AL ) ELSE ALLOCATE ( GP % AL ( KPATCH )) DO JP = 1 , KPATCH CALL GRID_INIT ( GP % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SFX_GRID_N:GRID_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE GRID_NP_INIT ! END MODULE MODD_SFX_GRID_n","tags":"","loc":"sourcefile/modd_sfx_gridn.f90.html"},{"title":"spll_modi_snow_cover_1layer.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_SNOW_COVER_1LAYER Source Code spll_modi_snow_cover_1layer.f90 Source Code !auto_modi:spll_snow_cover_1layer.D MODULE MODI_SNOW_COVER_1LAYER INTERFACE SUBROUTINE SNOW_COVER_1LAYER ( PTSTEP , PANSMIN , PANSMAX , PTODRY , PRHOSMIN , PRHOSMAX , & PRHOFOLD , OALL_MELT , PDRAIN_TIME , PWCRN , PZ0SN , PZ0HSN , & TPSNOW , PTG , PTG_COEFA , PTG_COEFB , PABS_SW , PLW1 , PLW2 , & PTA , PQA , PVMOD , PPS , PRHOA , PSR , PZREF , PUREF , PRNSNOW ,& PHSNOW , PLESNOW , PGSNOW , PMELT , PDQS_SNOW , PABS_LW ) USE MODD_TYPE_SNOW , ONLY : SURF_SNOW IMPLICIT NONE REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , INTENT ( IN ) :: PANSMIN ! minimum snow albedo REAL , INTENT ( IN ) :: PANSMAX ! maximum snow albedo REAL , INTENT ( IN ) :: PTODRY ! snow albedo decreasing constant REAL , INTENT ( IN ) :: PRHOSMIN ! minimum snow density REAL , INTENT ( IN ) :: PRHOSMAX ! maximum snow density REAL , INTENT ( IN ) :: PRHOFOLD ! snow density increasing constant LOGICAL , INTENT ( IN ) :: OALL_MELT ! T --> all snow runs off if REAL , INTENT ( IN ) :: PDRAIN_TIME ! drainage folding time (days) REAL , INTENT ( IN ) :: PWCRN ! critical snow amount necessary REAL , INTENT ( IN ) :: PZ0SN ! snow roughness length for momentum REAL , INTENT ( IN ) :: PZ0HSN ! snow roughness length for heat TYPE ( SURF_SNOW ), INTENT ( INOUT ) :: TPSNOW REAL , DIMENSION (:), INTENT ( IN ) :: PTG ! underlying ground temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTG_COEFA ! underlying ground temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTG_COEFB ! implicit terms REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW ! absorbed SW energy (Wm-2) REAL , DIMENSION (:), INTENT ( IN ) :: PLW1 ! LW coef independant of TSNOW REAL , DIMENSION (:), INTENT ( IN ) :: PLW2 ! LW coef dependant   of TSNOW REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density REAL , DIMENSION (:), INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the first REAL , DIMENSION (:), INTENT ( OUT ) :: PRNSNOW ! net radiation over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PHSNOW ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PLESNOW ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PGSNOW ! flux under the snow REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT ! snow melting rate (kg/m2/s) REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_SNOW ! heat storage inside snow REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW ! absorbed LW rad by snow (W/m2) END SUBROUTINE SNOW_COVER_1LAYER END INTERFACE END MODULE MODI_SNOW_COVER_1LAYER","tags":"","loc":"sourcefile/spll_modi_snow_cover_1layer.f90.html"},{"title":"roof_impl_coef.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines ROOF_IMPL_COEF Source Code roof_impl_coef.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !   ############################################### SUBROUTINE ROOF_IMPL_COEF ( T , PTSTEP , PTDEEP_A , PTDEEP_B ) !   ############################################### ! !! !!    PURPOSE !!    ------- ! !     Computes the corfficients for implicitation of upper !     roof layer with what is above ! ! !!**  METHOD !     ------ ! !  One computes a guess assuming a zero flux condition at the base !  of the roof. One solves the half part of the tridiagonal matrix !  fromm bottom to top. ! !!     The classical tridiagonal algorithm is used to invert the !!     implicit operator (from bottom to top only). Its matrix is given by: !! !!     (  b(1)      c(1)      0        0        0         0        0        0  ) !!     (  a(2)      b(2)     c(2)      0  ...    0        0        0        0  ) !!     (   0        a(3)     b(3)     c(3)       0        0        0        0  ) !!      ....................................................................... !!     (   0   ...   0      a(k)      b(k)     c(k)       0   ...  0        0  ) !!      ....................................................................... !!     (   0         0        0        0        0 ...  a(n-1)   b(n-1)   c(n-1)) !!     (   0         0        0        0        0 ...     0      a(n)     b(n) ) !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    01/2013 !! !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_n , ONLY : TEB_t ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! USE MODI_LAYER_E_BUDGET_GET_COEF ! IMPLICIT NONE ! ! !*      0.1    Declarations of arguments ! TYPE ( TEB_t ), INTENT ( INOUT ) :: T ! REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( OUT ) :: PTDEEP_A , PTDEEP_B ! Deep soil temperature (prescribed) !                                      PTDEEP_A = Deep soil temperature !                                                 coefficient depending on flux !                                      PTDEEP_B = Deep soil temperature (prescribed) !                                               which models heating/cooling from !                                               below the diurnal wave penetration !                                               (surface temperature) depth. If it !                                               is FLAGGED as undefined, then the zero !                                               flux lower BC is applied. !                                      Tdeep = PTDEEP_B + PTDEEP_A * PDEEP_FLUX !                                              (with PDEEP_FLUX in W/m2) ! !*      0.2    Local variables ! REAL :: ZIMPL = 1.0 ! implicit coefficient INTEGER :: JK ! loop counter INTEGER :: ILAYER ! REAL , DIMENSION ( SIZE ( PTDEEP_A ), SIZE ( T % XT_ROOF , 2 )) :: ZA ,& ! lower diag. ZB ,& ! main  diag. ZC ,& ! upper diag. ZY ! r.h.s. REAL , DIMENSION ( SIZE ( PTDEEP_A )) :: ZDET ! work array REAL , DIMENSION ( SIZE ( PTDEEP_A ), SIZE ( T % XT_ROOF , 2 )) :: ZW ! work array REAL , DIMENSION ( SIZE ( PTDEEP_A ), SIZE ( T % XT_ROOF , 2 )) :: ZT ! guess of T ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'ROOF_IMPL_COEF' , 0 , ZHOOK_HANDLE ) ! !*      1.0    Coefficients of the tridioagonal matrix for heat conduction eq. !              --------------------------------------------------------------- ! ILAYER = SIZE ( T % XT_ROOF , 2 ) ! CALL LAYER_E_BUDGET_GET_COEF ( T % XT_ROOF , PTSTEP , ZIMPL , T % XHC_ROOF , T % XTC_ROOF , T % XD_ROOF , & ZA , ZB , ZC , ZY ) ! !------------------------------------------------------------------------------- ! !*      2.0    Solving of the equation from bottom to top !              ------------------------------------------ ! ! layer at bottom of roof ! ZDET (:) = ZB (:, ILAYER ) ! ZT (:, ILAYER ) = ZY (:, ILAYER ) / ZDET (:) ! ! internal layers & top layer (but without the external heat flux term) ! DO JK = ILAYER - 1 , 1 , - 1 ZW (:, JK ) = ZA (:, JK + 1 ) / ZDET (:) ZDET (:) = ZB (:, JK ) - ZC (:, JK ) * ZW (:, JK ) ZT (:, JK ) = ( ZY (:, JK ) - ZC (:, JK ) * ZT (:, JK + 1 ) ) / ZDET (:) ! + FLUX / ZDET !                                                          ! for layer 1 !                                                          ! because the external !                                                          ! flux would be !                                                          ! included in the Y !                                                          ! term END DO ! ! Implicit coefficients for the heat flux ! PTDEEP_B = ZT (:, 1 ) PTDEEP_A = 1. / ZDET (:) ! !* The following lines are here if you want to test the explicit coupling !PTDEEP_B = T%XT_ROOF(:,1) !PTDEEP_A = 0. !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'ROOF_IMPL_COEF' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END SUBROUTINE ROOF_IMPL_COEF","tags":"","loc":"sourcefile/roof_impl_coef.f90.html"},{"title":"modd_ch_seafluxn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_CH_SEAFLUX_n Source Code modd_ch_seafluxn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ##################### MODULE MODD_CH_SEAFLUX_n !     ###################### ! !! !!    PURPOSE !!    ------- ! ! ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! ! !!    AUTHOR !!    ------ !!  P. Tulet   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!  16/07/03 (P. Tulet)  restructured for externalization !------------------------------------------------------------------------------ ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_SV_n , ONLY : SV_t , SV_INIT ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE CH_SEAFLUX_t ! CHARACTER ( LEN = 6 ) :: CCH_DRY_DEP !  deposition scheme REAL , DIMENSION (:,:), POINTER :: XDEP ! final dry deposition ! velocity  for sea TYPE ( SV_t ) :: SVS CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CCH_NAMES ! NAME OF CHEMICAL SPECIES ! (FOR DIAG ONLY) CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CDSTNAMES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CSLTNAMES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CAER_NAMES ! END TYPE CH_SEAFLUX_t CONTAINS ! SUBROUTINE CH_SEAFLUX_INIT ( YCH_SEAFLUX ) TYPE ( CH_SEAFLUX_t ), INTENT ( INOUT ) :: YCH_SEAFLUX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_SEAFLUX_N:CH_SEAFLUX_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YCH_SEAFLUX % XDEP ) NULLIFY ( YCH_SEAFLUX % CCH_NAMES ) NULLIFY ( YCH_SEAFLUX % CAER_NAMES ) NULLIFY ( YCH_SEAFLUX % CDSTNAMES ) NULLIFY ( YCH_SEAFLUX % CSLTNAMES ) YCH_SEAFLUX % CCH_DRY_DEP = ' ' CALL SV_INIT ( YCH_SEAFLUX % SVS ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_SEAFLUX_N:CH_SEAFLUX_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_SEAFLUX_INIT END MODULE MODD_CH_SEAFLUX_n","tags":"","loc":"sourcefile/modd_ch_seafluxn.f90.html"},{"title":"mode_psychrolib.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules mode_psychrolib Source Code mode_psychrolib.f90 Source Code ! PsychroLib (version 2.5.0) (https://github.com/psychrometrics/psychrolib). ! Copyright (c) 2018-2020 The PsychroLib Contributors for the current library implementation. ! Copyright (c) 2017 ASHRAE Handbook — Fundamentals for ASHRAE equations and coefficients. ! Licensed under the MIT License. module mode_psychrolib !+ Module overview !+  Contains functions for calculating thermodynamic properties of gas-vapor mixtures !+  and standard atmosphere suitable for most engineering, physical, and meteorological !+  applications. !+ !+  Most of the functions are an implementation of the formulae found in the !+  2017 ASHRAE Handbook - Fundamentals, in both International System (SI), !+  and Imperial (IP) units. Please refer to the information included in !+  each function for their respective reference. !+ !+ Example !+  use psychrolib, only: GetTDewPointFromRelHum, SetUnitSystem, SI !+  ! Set the unit system, for example to SI (can be either 'SI' or 'IP') !+  call SetUnitSystem(SI) !+  ! Calculate the dew point temperature for a dry bulb temperature of 25 C and a relative humidity of 80% !+  print *, GetTDewPointFromRelHum(25.0, 0.80) !+ 21.3094 !+ !+ Copyright !+  - For the current library implementation !+     Copyright (c) 2018-2020 The PsychroLib Contributors. !+  - For equations and coefficients published ASHRAE Handbook — Fundamentals, Chapter 1 !+     Copyright (c) 2017 ASHRAE Handbook — Fundamentals (https://www.ashrae.org) !+ !+ License !+  MIT (https://github.com/psychrometrics/psychrolib/LICENSE.txt) !+ !+ Note from the Authors !+  We have made every effort to ensure that the code is adequate, however, we make no !+  representation with respect to its accuracy. Use at your own risk. Should you notice !+  an error, or if you have a suggestion, please notify us through GitHub at !+  https://github.com/psychrometrics/psychrolib/issues. !+ !+ Modifications from original PsychroLib version 2.5.0 !+ 20200421: `psychrolib` -> `mode_psychrolib` to avoid clashes with psychrolib used in MinimalDX. !+            PsychroLib is used by both TEB and MinimalDX but each use their own separate module file. implicit none private public :: IP public :: SI public :: SetUnitSystem public :: GetUnitSystem public :: isIP public :: GetTRankineFromTFahrenheit public :: GetTFahrenheitFromTRankine public :: GetTKelvinFromTCelsius public :: GetTCelsiusFromTKelvin public :: GetTWetBulbFromTDewPoint public :: GetTWetBulbFromRelHum public :: GetRelHumFromTDewPoint public :: GetRelHumFromTWetBulb public :: GetTDewPointFromRelHum public :: GetTDewPointFromTWetBulb public :: GetVapPresFromRelHum public :: GetRelHumFromVapPres public :: GetTDewPointFromVapPres public :: GetVapPresFromTDewPoint public :: GetTWetBulbFromHumRatio public :: GetHumRatioFromTWetBulb public :: GetHumRatioFromRelHum public :: GetRelHumFromHumRatio public :: GetHumRatioFromTDewPoint public :: GetTDewPointFromHumRatio public :: GetHumRatioFromVapPres public :: GetVapPresFromHumRatio public :: GetDryAirEnthalpy public :: GetDryAirDensity public :: GetDryAirVolume public :: GetTDryBulbFromEnthalpyAndHumRatio public :: GetHumRatioFromEnthalpyAndTDryBulb public :: GetSatVapPres public :: GetSatHumRatio public :: GetSatAirEnthalpy public :: GetVaporPressureDeficit public :: GetDegreeOfSaturation public :: GetMoistAirEnthalpy public :: GetMoistAirVolume public :: GetTDryBulbFromMoistAirVolumeAndHumRatio public :: GetMoistAirDensity public :: GetStandardAtmPressure public :: GetStandardAtmTemperature public :: GetSeaLevelPressure public :: GetStationPressure public :: GetSpecificHumFromHumRatio public :: GetHumRatioFromSpecificHum public :: CalcPsychrometricsFromTWetBulb public :: CalcPsychrometricsFromTDewPoint public :: CalcPsychrometricsFromRelHum public :: dLnPws_ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Global constants !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! real , parameter :: ZERO_FAHRENHEIT_AS_RANKINE = 45 9.67 !+ Zero degree Fahrenheit (°F) expressed as degree Rankine (°R). !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 39. real , parameter :: ZERO_CELSIUS_AS_KELVIN = 27 3.15 !+ Zero degree Celsius (°C) expressed as Kelvin (K). !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 39. real , parameter :: R_DA_IP = 5 3.350 !+ Universal gas constant for dry air (IP version) in ft lb_Force lb_DryAir⁻¹ R⁻¹. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1. real , parameter :: R_DA_SI = 28 7.042 !+ Universal gas constant for dry air (SI version) in J kg_DryAir⁻¹ K⁻¹. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1. integer , parameter :: IP = 1 integer , parameter :: SI = 2 integer :: PSYCHROLIB_UNITS = 0 ! 0 = undefined. !+ Unit system to use. real :: PSYCHROLIB_TOLERANCE = 1.0 !+ Tolerance of temperature calculations. integer , parameter :: MAX_ITER_COUNT = 100 !+ Maximum number of iterations before exiting while loops. real , parameter :: MIN_HUM_RATIO = 1e-7 !+ Minimum acceptable humidity ratio used/returned by any functions. !+ Any value above 0 or below the MIN_HUM_RATIO will be reset to this value. real , parameter :: FREEZING_POINT_WATER_IP = 3 2.0 !+ float: Freezing point of water in Fahrenheit. real , parameter :: FREEZING_POINT_WATER_SI = 0.0 !+ float: Freezing point of water in Celsius. real , parameter :: TRIPLE_POINT_WATER_IP = 3 2.018 !+ float: Triple point of water in Fahrenheit. real , parameter :: TRIPLE_POINT_WATER_SI = 0.01 !+ float: Triple point of water in Celsius. contains !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Helper functions !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! subroutine SetUnitSystem ( UnitSystem ) !+ Set the system of units to use (SI or IP). !+ Notes: this function *HAS TO BE CALLED* before the library can be used integer , intent ( in ) :: UnitSystem !+ Units: string indicating the system of units chosen (SI or IP) if (. not . ( UnitSystem == SI . or . UnitSystem == IP )) then error stop \"The system of units has to be either SI or IP.\" end if PSYCHROLIB_UNITS = UnitSystem ! Define tolerance on temperature calculations ! The tolerance is the same in IP and SI if ( UnitSystem == IP ) then PSYCHROLIB_TOLERANCE = 0.001 * 9.0 / 5.0 else PSYCHROLIB_TOLERANCE = 0.001 end if end subroutine SetUnitSystem function GetUnitSystem () result ( UnitSystem ) !+ Return the system of units in use. integer :: UnitSystem UnitSystem = PSYCHROLIB_UNITS end function GetUnitSystem function isIP () !+ Check whether the system in use is IP or SI logical :: isIP if ( PSYCHROLIB_UNITS == IP ) then isIP = . true . else if ( PSYCHROLIB_UNITS == SI ) then isIP = . false . else error stop \"The system of units has not been defined.\" end if end function isIP !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Conversion between temperature units !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetTRankineFromTFahrenheit ( TFahrenheit ) result ( TRankine ) !+ Utility function to convert temperature to degree Rankine (°R) !+ given temperature in degree Fahrenheit (°F). !+ Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 real , intent ( in ) :: TFahrenheit !+ Temperature in degree Fahrenheit real :: TRankine !+ Temperature in degree Rankine TRankine = TFahrenheit + ZERO_FAHRENHEIT_AS_RANKINE end function GetTRankineFromTFahrenheit function GetTFahrenheitFromTRankine ( TRankine ) result ( TFahrenheit ) !+ Utility function to convert temperature to degree Fahrenheit (°F) !+ given temperature in degree Rankine (°R). !+ Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 real , intent ( in ) :: TRankine !+ Temperature in degree Rankine real :: TFahrenheit !+ Temperature in degree Fahrenheit TFahrenheit = TRankine - ZERO_FAHRENHEIT_AS_RANKINE end function GetTFahrenheitFromTRankine function GetTKelvinFromTCelsius ( TCelsius ) result ( TKelvin ) !+ Utility function to convert temperature to Kelvin (K) !+ given temperature in degree Celsius (°C). !+ Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 real , intent ( in ) :: TCelsius !+ Temperature in degree Celsius real :: TKelvin !+ Tempearatyre in Kelvin TKelvin = TCelsius + ZERO_CELSIUS_AS_KELVIN end function GetTKelvinFromTCelsius function GetTCelsiusFromTKelvin ( TKelvin ) result ( TCelsius ) !+ Utility function to convert temperature to degree Celsius (°C) !+ given temperature in Kelvin (K). !+ Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 real , intent ( in ) :: TKelvin !+ Tempearatyre in Kelvin real :: TCelsius !+ Temperature in degree Celsius TCelsius = TKelvin - ZERO_CELSIUS_AS_KELVIN end function GetTCelsiusFromTKelvin !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Conversions between dew point, wet bulb, and relative humidity !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetTWetBulbFromTDewPoint ( TDryBulb , TDewPoint , Pressure ) result ( TWetBulb ) !+ Return wet-bulb temperature given dry-bulb temperature, dew-point temperature, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( TDewPoint > TDryBulb ) then error stop \"Error: dew point temperature is above dry bulb temperature\" end if HumRatio = GetHumRatioFromTDewPoint ( TDewPoint , Pressure ) TWetBulb = GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) end function GetTWetBulbFromTDewPoint function GetTWetBulbFromRelHum ( TDryBulb , RelHum , Pressure ) result ( TWetBulb ) !+ Return wet-bulb temperature given dry-bulb temperature, relative humidity, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( RelHum < 0.0 . or . RelHum > 1.0 ) then error stop \"Error: relative humidity is outside range [0,1]\" end if HumRatio = GetHumRatioFromRelHum ( TDryBulb , RelHum , Pressure ) TWetBulb = GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) end function GetTWetBulbFromRelHum function GetRelHumFromTDewPoint ( TDryBulb , TDewPoint ) result ( RelHum ) !+ Return relative humidity given dry-bulb temperature and dew-point temperature. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 22 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: RelHum !+ Relative humidity in range [0, 1] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real :: SatVapPres !+ Vapor pressure of saturated air in Psi [IP] or Pa [SI] if ( TDewPoint > TDryBulb ) then error stop \"Error: dew point temperature is above dry bulb temperature\" end if VapPres = GetSatVapPres ( TDewPoint ) SatVapPres = GetSatVapPres ( TDryBulb ) RelHum = VapPres / SatVapPres end function GetRelHumFromTDewPoint function GetRelHumFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) result ( RelHum ) !+ Return relative humidity given dry-bulb temperature, wet bulb temperature and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: RelHum !+ Relative humidity in range [0, 1] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( TWetBulb > TDryBulb ) then error stop \"Error: wet bulb temperature is above dry bulb temperature\" end if HumRatio = GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) RelHum = GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) end function GetRelHumFromTWetBulb function GetTDewPointFromRelHum ( TDryBulb , RelHum ) result ( TDewPoint ) !+ Return dew-point temperature given dry-bulb temperature and relative humidity. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( RelHum < 0.0 . or . RelHum > 1.0 ) then error stop \"Error: relative humidity is outside range [0,1]\" end if VapPres = GetVapPresFromRelHum ( TDryBulb , RelHum ) TDewPoint = GetTDewPointFromVapPres ( TDryBulb , VapPres ) end function GetTDewPointFromRelHum function GetTDewPointFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) result ( TDewPoint ) !+ Return dew-point temperature given dry-bulb temperature, wet-bulb temperature, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( TWetBulb > TDryBulb ) then error stop \"Error: wet bulb temperature is above dry bulb temperature\" end if HumRatio = GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) TDewPoint = GetTDewPointFromHumRatio ( TDryBulb , HumRatio , Pressure ) end function GetTDewPointFromTWetBulb !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Conversions between dew point, or relative humidity and vapor pressure !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetVapPresFromRelHum ( TDryBulb , RelHum ) result ( VapPres ) !+ Return partial pressure of water vapor as a function of relative humidity and temperature. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( RelHum < 0.0 . or . RelHum > 1.0 ) then error stop \"Error: relative humidity is outside range [0,1]\" end if VapPres = RelHum * GetSatVapPres ( TDryBulb ) end function GetVapPresFromRelHum function GetRelHumFromVapPres ( TDryBulb , VapPres ) result ( RelHum ) !+ Return relative humidity given dry-bulb temperature and vapor pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real :: RelHum !+ Relative humidity in range [0, 1] if ( VapPres < 0.0 ) then error stop \"Error: partial pressure of water vapor in moist air cannot be negative\" end if RelHum = VapPres / GetSatVapPres ( TDryBulb ) end function GetRelHumFromVapPres function dLnPws_ ( TDryBulb ) result ( dLnPws ) !+ Helper function returning the derivative of the natural log of the saturation vapor pressure !+ as a function of dry-bulb temperature. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1  eqn 5 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: dLnPws !+ Derivative of natural log of vapor pressure of saturated air in Psi [IP] or Pa [SI] real :: T !+ Dry bulb temperature in R [IP] or K [SI] if ( isIP ()) then T = GetTRankineFromTFahrenheit ( TDryBulb ) if ( TDryBulb <= TRIPLE_POINT_WATER_IP ) then dLnPws = 1.0214165E+04 / T ** 2 - 5.3765794E-03 + 2 * 1.9202377E-07 * T & + 3 * 3.5575832E-10 * T ** 2 - 4 * 9.0344688E-14 * T ** 3 + 4.1635019 / T else dLnPws = 1.0440397E+04 / T ** 2 - 2.7022355E-02 + 2 * 1.2890360E-05 * T & - 3 * 2.4780681E-09 * T ** 2 + 6.5459673 / T end if else T = GetTKelvinFromTCelsius ( TDryBulb ) if ( TDryBulb <= TRIPLE_POINT_WATER_SI ) then dLnPws = 5.6745359E+03 / T ** 2 - 9.677843E-03 + 2 * 6.2215701E-07 * T & + 3 * 2.0747825E-09 * T ** 2 - 4 * 9.484024E-13 * T ** 3 + 4.1635019 / T else dLnPws = 5.8002206E+03 / T ** 2 - 4.8640239E-02 + 2 * 4.1764768E-05 * T & - 3 * 1.4452093E-08 * T ** 2 + 6.5459673 / T end if end if end function dLnPws_ function GetTDewPointFromVapPres ( TDryBulb , VapPres ) result ( TDewPoint ) !+ Return dew-point temperature given dry-bulb temperature and vapor pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 5 and 6 !+ Notes: !+ The dew point temperature is solved by inverting the equation giving water vapor pressure !+ at saturation from temperature rather than using the regressions provided !+ by ASHRAE (eqn. 37 and 38) which are much less accurate and have a !+ narrower range of validity. !+ The Newton-Raphson (NR) method is used on the logarithm of water vapour !+ pressure as a function of temperature, which is a very smooth function !+ Convergence is usually achieved in 3 to 5 iterations. !+ TDryBulb is not really needed here, just used for convenience. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: lnVP !+ Natural logarithm of partial pressure of water vapor pressure in moist air real :: d_lnVP !+ Derivative of function, calculated numerically real :: lnVP_iter !+ Value of log of vapor water pressure used in NR calculation real :: TDewPoint_iter !+ Value of TDewPoint used in NR calculation real , dimension ( 2 ) :: BOUNDS !+ Valid temperature range in °F [IP] or °C [SI] integer :: index !+ Index used in the calculation ! Bounds and step size as a function of the system of units if ( isIP ()) then BOUNDS ( 1 ) = - 14 8.0 BOUNDS ( 2 ) = 39 2.0 else BOUNDS ( 1 ) = - 10 0.0 BOUNDS ( 2 ) = 20 0.0 end if ! Validity check -- bounds outside which a solution cannot be found if ( VapPres < GetSatVapPres ( BOUNDS ( 1 )) . or . VapPres > GetSatVapPres ( BOUNDS ( 2 ))) then error stop \"Error: partial pressure of water vapor is outside range of validity of equations\" end if ! We use NR to approximate the solution. TDewPoint = TDryBulb lnVP = log ( VapPres ) index = 1 do while (. true .) TDewPoint_iter = TDewPoint ! TDewPoint_iter used in NR calculation lnVP_iter = log ( GetSatVapPres ( TDewPoint_iter )) ! Derivative of function, calculated analytically d_lnVP = dLnPws_ ( TDewPoint_iter ) ! New estimate, bounded by the search domain defined above TDewPoint = TDewPoint_iter - ( lnVP_iter - lnVP ) / d_lnVP TDewPoint = max ( TDewPoint , BOUNDS ( 1 )) TDewPoint = min ( TDewPoint , BOUNDS ( 2 )) if ( abs ( TDewPoint - TDewPoint_iter ) <= PSYCHROLIB_TOLERANCE ) then exit end if if ( index > MAX_ITER_COUNT ) then error stop \"Convergence not reached in GetTDewPointFromVapPres. Stopping.\" end if index = index + 1 end do TDewPoint = min ( TDewPoint , TDryBulb ) end function GetTDewPointFromVapPres function GetVapPresFromTDewPoint ( TDewPoint ) result ( VapPres ) !+ Return vapor pressure given dew point temperature. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 36 real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] VapPres = GetSatVapPres ( TDewPoint ) end function GetVapPresFromTDewPoint !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Conversions from wet-bulb temperature, dew-point temperature, or relative humidity to humidity ratio !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) result ( TWetBulb ) !+ Return wet-bulb temperature given dry-bulb temperature, humidity ratio, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35 solved for Tstar real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real :: TDewPoint !+ TDewPoint : Dew-point temperature in °F [IP] or °C [SI] real :: TWetBulbSup !+ Upper value of wet bulb temperature in bissection method (initial guess is from dry bulb temperature) in °F [IP] or °C [SI] real :: TWetBulbInf !+ Lower value of wet bulb temperature in bissection method (initial guess is from dew point temperature) in °F [IP] or °C [SI] real :: Wstar !+ Humidity ratio at temperature Tstar in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO integer :: index !+ index used in iteration if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio cannot be negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) TDewPoint = GetTDewPointFromHumRatio ( TDryBulb , BoundedHumRatio , Pressure ) ! Initial guesses TWetBulbSup = TDryBulb TWetBulbInf = TDewPoint TWetBulb = ( TWetBulbInf + TWetBulbSup ) / 2.0 index = 1 ! Bisection loop do while (( TWetBulbSup - TWetBulbInf ) > PSYCHROLIB_TOLERANCE ) ! Compute humidity ratio at temperature Tstar Wstar = GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) ! Get new bounds if ( Wstar > BoundedHumRatio ) then TWetBulbSup = TWetBulb else TWetBulbInf = TWetBulb end if ! New guess of wet bulb temperature TWetBulb = ( TWetBulbSup + TWetBulbInf ) / 2.0 if ( index > MAX_ITER_COUNT ) then error stop \"Convergence not reached in GetTWetBulbFromHumRatio. Stopping.\" end if index = index + 1 end do end function GetTWetBulbFromHumRatio function GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) result ( HumRatio ) !+ Return humidity ratio given dry-bulb temperature, wet-bulb temperature, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: Wsstar !+ Humidity ratio at temperature Tstar in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( TWetBulb > TDryBulb ) then error stop \"Error: wet bulb temperature is above dry bulb temperature\" end if Wsstar = GetSatHumRatio ( TWetBulb , Pressure ) if ( isIP ()) then if ( TWetBulb >= FREEZING_POINT_WATER_IP ) then HumRatio = (( 109 3.0 - 0.556 * TWetBulb ) * Wsstar - 0.240 * ( TDryBulb - TWetBulb )) & / ( 109 3.0 + 0.444 * TDryBulb - TWetBulb ) else HumRatio = (( 122 0.0 - 0.04 * TWetBulb ) * Wsstar - 0.240 * ( TDryBulb - TWetBulb )) & / ( 122 0.0 + 0.444 * TDryBulb - 0.48 * TWetBulb ) end if else if ( TWetBulb >= FREEZING_POINT_WATER_SI ) then HumRatio = (( 250 1.0 - 2.326 * TWetBulb ) * Wsstar - 1.006 * ( TDryBulb - TWetBulb )) & / ( 250 1.0 + 1.86 * TDryBulb - 4.186 * TWetBulb ) else HumRatio = (( 283 0.0 - 0.24 * TWetBulb ) * Wsstar - 1.006 * ( TDryBulb - TWetBulb )) & / ( 283 0.0 + 1.86 * TDryBulb - 2.1 * TWetBulb ) end if end if ! Validity check. HumRatio = max ( HumRatio , MIN_HUM_RATIO ) end function GetHumRatioFromTWetBulb function GetHumRatioFromRelHum ( TDryBulb , RelHum , Pressure ) result ( HumRatio ) !+ Return humidity ratio given dry-bulb temperature, relative humidity, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( RelHum < 0.0 . or . RelHum > 1.0 ) then error stop \"Error: relative humidity is outside range [0,1]\" end if VapPres = GetVapPresFromRelHum ( TDryBulb , RelHum ) HumRatio = GetHumRatioFromVapPres ( VapPres , Pressure ) end function GetHumRatioFromRelHum function GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) result ( RelHum ) !+ Return relative humidity given dry-bulb temperature, humidity ratio, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: RelHum !+ Relative humidity in range [0, 1] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio cannot be negative\" end if VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) RelHum = GetRelHumFromVapPres ( TDryBulb , VapPres ) end function GetRelHumFromHumRatio function GetHumRatioFromTDewPoint ( TDewPoint , Pressure ) result ( HumRatio ) !+ Return humidity ratio given dew-point temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] VapPres = GetSatVapPres ( TDewPoint ) HumRatio = GetHumRatioFromVapPres ( VapPres , Pressure ) end function GetHumRatioFromTDewPoint function GetTDewPointFromHumRatio ( TDryBulb , HumRatio , Pressure ) result ( TDewPoint ) !+ Return dew-point temperature given dry-bulb temperature, humidity ratio, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio cannot be negative\" end if VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) TDewPoint = GetTDewPointFromVapPres ( TDryBulb , VapPres ) end function GetTDewPointFromHumRatio !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Conversions between humidity ratio and vapor pressure !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetHumRatioFromVapPres ( VapPres , Pressure ) result ( HumRatio ) !+ Return humidity ratio given water vapor pressure and atmospheric pressure. !+ Reference: !+ ASHRAE Fundamentals (2005) ch. 6 eqn. 22; !+ ASHRAE Fundamentals (2009) ch. 1 eqn. 22. real , intent ( in ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( VapPres < 0.0 ) then error stop \"Error: partial pressure of water vapor in moist air cannot be negative\" end if HumRatio = 0.621945 * VapPres / ( Pressure - VapPres ) ! Validity check. HumRatio = max ( HumRatio , MIN_HUM_RATIO ) end function GetHumRatioFromVapPres function GetVapPresFromHumRatio ( HumRatio , Pressure ) result ( VapPres ) !+ Return vapor pressure given humidity ratio and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 20 solved for pw real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) VapPres = Pressure * BoundedHumRatio / ( 0.621945 + BoundedHumRatio ) end function GetVapPresFromHumRatio !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Conversions between humidity ratio and specific humidity !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetSpecificHumFromHumRatio ( HumRatio ) result ( SpecificHum ) !+ Return the specific humidity from humidity ratio (aka mixing ratio). !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Dry_Air⁻¹ [IP] or kg_H₂O kg_Dry_Air⁻¹ [SI] real :: SpecificHum !+ Specific humidity in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio cannot be negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) SpecificHum = BoundedHumRatio / ( 1.0 + BoundedHumRatio ) end function GetSpecificHumFromHumRatio function GetHumRatioFromSpecificHum ( SpecificHum ) result ( HumRatio ) !+ Return the humidity ratio (aka mixing ratio) from specific humidity. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b (solved for humidity ratio) real , intent ( in ) :: SpecificHum !+ Specific humidity in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Dry_Air⁻¹ [IP] or kg_H₂O kg_Dry_Air⁻¹ [SI] if ( SpecificHum < 0.0 . or . SpecificHum >= 1.0 ) then error stop \"Error: specific humidity is outside range [0, 1)\" end if HumRatio = SpecificHum / ( 1.0 - SpecificHum ) ! Validity check. HumRatio = max ( HumRatio , MIN_HUM_RATIO ) end function GetHumRatioFromSpecificHum !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Dry Air Calculations !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetDryAirEnthalpy ( TDryBulb ) result ( DryAirEnthalpy ) !+ Return dry-air enthalpy given dry-bulb temperature. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 28 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: DryAirEnthalpy !+ Dry air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] if ( isIP ()) then DryAirEnthalpy = 0.240 * TDryBulb else DryAirEnthalpy = 1006 * TDryBulb end if end function GetDryAirEnthalpy function GetDryAirDensity ( TDryBulb , Pressure ) result ( DryAirDensity ) !+ Return dry-air density given dry-bulb temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 !+ Notes: !+ Eqn 14 for the perfect gas relationship for dry air. !+ Eqn 1 for the universal gas constant. !+ The factor 144 in IP is for the conversion of Psi = lb in⁻² to lb ft⁻². real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: DryAirDensity !+ Dry air density in lb ft⁻³ [IP] or kg m⁻³ [SI] if ( isIP ()) then DryAirDensity = ( 144 * Pressure ) / R_DA_IP / GetTRankineFromTFahrenheit ( TDryBulb ) else DryAirDensity = Pressure / R_DA_SI / GetTKelvinFromTCelsius ( TDryBulb ) end if end function GetDryAirDensity function GetDryAirVolume ( TDryBulb , Pressure ) result ( DryAirVolume ) !+ Return dry-air volume given dry-bulb temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 !+ Notes: !+ Eqn 14 for the perfect gas relationship for dry air. !+ Eqn 1 for the universal gas constant. !+ The factor 144 in IP is for the conversion of Psi = lb in⁻² to lb ft⁻². real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: DryAirVolume !+ Dry air volume in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] if ( isIP ()) then DryAirVolume = GetTRankineFromTFahrenheit ( TDryBulb ) * R_DA_IP / ( 144 * Pressure ) else DryAirVolume = GetTKelvinFromTCelsius ( TDryBulb ) * R_DA_SI / Pressure end if end function GetDryAirVolume function GetTDryBulbFromEnthalpyAndHumRatio ( MoistAirEnthalpy , HumRatio ) result ( TDryBulb ) !+ Return dry bulb temperature from enthalpy and humidity ratio. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30 !+ Notes: !+ Based on the `GetMoistAirEnthalpy` function, rearranged for temperature. real , intent ( in ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) if ( isIP ()) then TDryBulb = ( MoistAirEnthalpy - 106 1.0 * BoundedHumRatio ) / ( 0.240 + 0.444 * BoundedHumRatio ) else TDryBulb = ( MoistAirEnthalpy / 100 0.0 - 250 1.0 * BoundedHumRatio ) / ( 1.006 + 1.86 * BoundedHumRatio ) end if end function GetTDryBulbFromEnthalpyAndHumRatio function GetHumRatioFromEnthalpyAndTDryBulb ( MoistAirEnthalpy , TDryBulb ) result ( HumRatio ) !+ Return humidity ratio from enthalpy and dry-bulb temperature. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30 !+ Notes: !+ Based on the `GetMoistAirEnthalpy` function, rearranged for humidity ratio. real , intent ( in ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( isIP ()) then HumRatio = ( MoistAirEnthalpy - 0.240 * TDryBulb ) / ( 106 1.0 + 0.444 * TDryBulb ) else HumRatio = ( MoistAirEnthalpy / 100 0.0 - 1.006 * TDryBulb ) / ( 250 1.0 + 1.86 * TDryBulb ) end if ! Validity check. HumRatio = max ( HumRatio , MIN_HUM_RATIO ) end function GetHumRatioFromEnthalpyAndTDryBulb !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Saturated Air Calculations !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetSatVapPres ( TDryBulb ) result ( SatVapPres ) !+ Return saturation vapor pressure given dry-bulb temperature. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1  eqn 5 !+ Important note: the ASHRAE formulae are defined above and below the freezing point but have !+ a discontinuity at the freezing point. This is a small inaccuracy on ASHRAE's part: the formulae !+ should be defined above and below the triple point of water (not the feezing point) in which case !+ the discontinuity vanishes. It is essential to use the triple point of water otherwise function !+ GetTDewPointFromVapPres, which inverts the present function, does not converge properly around !+ the freezing point. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: SatVapPres !+ Vapor pressure of saturated air in Psi [IP] or Pa [SI] real :: LnPws !+ Log of Vapor Pressure of saturated air (dimensionless) real :: T !+ Dry bulb temperature in R [IP] or K [SI] if ( isIP ()) then if ( TDryBulb < - 14 8.0 . or . TDryBulb > 39 2.0 ) then error stop \"Error: dry bulb temperature must be in range [-148, 392]°F\" end if T = GetTRankineFromTFahrenheit ( TDryBulb ) if ( TDryBulb <= TRIPLE_POINT_WATER_IP ) then LnPws = ( - 1.0214165E+04 / T - 4.8932428 - 5.3765794E-03 * T + 1.9202377E-07 * T ** 2 & + 3.5575832E-10 * T ** 3 - 9.0344688E-14 * T ** 4 + 4.1635019 * log ( T )) else LnPws = - 1.0440397E+04 / T - 1.1294650E+01 - 2.7022355E-02 * T + 1.2890360E-05 * T ** 2 & - 2.4780681E-09 * T ** 3 + 6.5459673 * log ( T ) end if else if ( TDryBulb < - 10 0.0 . or . TDryBulb > 20 0.0 ) then error stop \"Error: dry bulb temperature must be in range [-100, 200]°C\" end if T = GetTKelvinFromTCelsius ( TDryBulb ) if ( TDryBulb <= TRIPLE_POINT_WATER_SI ) then LnPws = - 5.6745359E+03 / T + 6.3925247 - 9.677843E-03 * T + 6.2215701E-07 * T ** 2 & + 2.0747825E-09 * T ** 3 - 9.484024E-13 * T ** 4 + 4.1635019 * log ( T ) else LnPws = - 5.8002206E+03 / T + 1.3914993 - 4.8640239E-02 * T + 4.1764768E-05 * T ** 2 & - 1.4452093E-08 * T ** 3 + 6.5459673 * log ( T ) end if end if SatVapPres = exp ( LnPws ) end function GetSatVapPres function GetSatHumRatio ( TDryBulb , Pressure ) result ( SatHumRatio ) !+ Return humidity ratio of saturated air given dry-bulb temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 36, solved for W real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: SatHumRatio !+ Humidity ratio of saturated air in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: SatVaporPres !+ Vapor pressure of saturated air in in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] SatVaporPres = GetSatVapPres ( TDryBulb ) SatHumRatio = 0.621945 * SatVaporPres / ( Pressure - SatVaporPres ) ! Validity check. SatHumRatio = max ( SatHumRatio , MIN_HUM_RATIO ) end function GetSatHumRatio function GetSatAirEnthalpy ( TDryBulb , Pressure ) result ( SatAirEnthalpy ) !+ Return saturated air enthalpy given dry-bulb temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: SatAirEnthalpy !+ Saturated air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] SatAirEnthalpy = GetMoistAirEnthalpy ( TDryBulb , GetSatHumRatio ( TDryBulb , Pressure )) end function GetSatAirEnthalpy !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Moist Air Calculations !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetVaporPressureDeficit ( TDryBulb , HumRatio , Pressure ) result ( VaporPressureDeficit ) !+ Return Vapor pressure deficit given dry-bulb temperature, humidity ratio, and pressure. !+ Reference: !+ Oke (1987) eqn 2.13a real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: VaporPressureDeficit !+ Vapor pressure deficit in Psi [IP] or Pa [SI] real :: RelHum !+ Relative humidity in range [0, 1] if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if RelHum = GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) VaporPressureDeficit = GetSatVapPres ( TDryBulb ) * ( 1.0 - RelHum ) end function GetVaporPressureDeficit function GetDegreeOfSaturation ( TDryBulb , HumRatio , Pressure ) result ( DegreeOfSaturation ) !+ Return the degree of saturation (i.e humidity ratio of the air / humidity ratio of the air at saturation !+ at the same temperature and pressure) given dry-bulb temperature, humidity ratio, and atmospheric pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2009) ch. 1 eqn 12 !+ Notes: !+ This definition is absent from the 2017 Handbook. Using 2009 version instead. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: DegreeOfSaturation !+ Degree of saturation in arbitrary unit real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) DegreeOfSaturation = BoundedHumRatio / GetSatHumRatio ( TDryBulb , Pressure ) end function GetDegreeOfSaturation function GetMoistAirEnthalpy ( TDryBulb , HumRatio ) result ( MoistAirEnthalpy ) !+ Return moist air enthalpy given dry-bulb temperature and humidity ratio. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) if ( isIP ()) then MoistAirEnthalpy = 0.240 * TDryBulb + BoundedHumRatio * ( 106 1.0 + 0.444 * TDryBulb ) else MoistAirEnthalpy = ( 1.006 * TDryBulb + BoundedHumRatio * ( 250 1.0 + 1.86 * TDryBulb )) * 100 0.0 end if end function GetMoistAirEnthalpy function GetMoistAirVolume ( TDryBulb , HumRatio , Pressure ) result ( MoistAirVolume ) !+ Return moist air specific volume given dry-bulb temperature, humidity ratio, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 26 !+ Notes: !+ In IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26 !+ The factor 144 is for the conversion of Psi = lb in⁻² to lb ft⁻². real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ of dry air [IP] or in m³ kg⁻¹ of dry air [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) if ( isIP ()) then MoistAirVolume = R_DA_IP * GetTRankineFromTFahrenheit ( TDryBulb ) * ( 1.0 + 1.607858 * BoundedHumRatio ) / ( 14 4.0 * Pressure ) else MoistAirVolume = R_DA_SI * GetTKelvinFromTCelsius ( TDryBulb ) * ( 1.0 + 1.607858 * BoundedHumRatio ) / Pressure end if end function GetMoistAirVolume function GetTDryBulbFromMoistAirVolumeAndHumRatio ( MoistAirVolume , HumRatio , Pressure ) result ( TDryBulb ) !+ Return dry-bulb temperature given moist air specific volume, humidity ratio, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 26 !+ Notes: !+ In IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26 !+ The factor 144 is for the conversion of Psi = lb in⁻² to lb ft⁻². !+ Based on the `GetMoistAirVolume` function, rearranged for dry-bulb temperature. real , intent ( in ) :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ of dry air [IP] or in m³ kg⁻¹ of dry air [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) if ( isIP ()) then TDryBulb = GetTFahrenheitFromTRankine ( MoistAirVolume * ( 144 * Pressure ) & / ( R_DA_IP * ( 1 + 1.607858 * BoundedHumRatio ))) else TDryBulb = GetTCelsiusFromTKelvin ( MoistAirVolume * Pressure & / ( R_DA_SI * ( 1 + 1.607858 * BoundedHumRatio ))) end if end function GetTDryBulbFromMoistAirVolumeAndHumRatio function GetMoistAirDensity ( TDryBulb , HumRatio , Pressure ) result ( MoistAirDensity ) !+ Return moist air density given humidity ratio, dry bulb temperature, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 11 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: MoistAirDensity !+ Moist air density in lb ft⁻³ [IP] or kg m⁻³ [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) MoistAirDensity = ( 1.0 + BoundedHumRatio ) / GetMoistAirVolume ( TDryBulb , BoundedHumRatio , Pressure ) end function GetMoistAirDensity !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Standard atmosphere !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! function GetStandardAtmPressure ( Altitude ) result ( StandardAtmPressure ) !+ Return standard atmosphere barometric pressure, given the elevation (altitude). !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 3 real , intent ( in ) :: Altitude !+ Altitude in ft [IP] or m [SI] real :: StandardAtmPressure !+ Standard atmosphere barometric pressure in Psi [IP] or Pa [SI] if ( isIP ()) then StandardAtmPressure = 1 4.696 * ( 1.0 - 6.8754e-06 * Altitude ) ** 5.2559 else StandardAtmPressure = 101325 * ( 1 - 2.25577e-05 * Altitude ) ** 5.2559 end if end function GetStandardAtmPressure function GetStandardAtmTemperature ( Altitude ) result ( StandardAtmTemperature ) !+ Return standard atmosphere temperature, given the elevation (altitude). !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 4 real , intent ( in ) :: Altitude !+ Altitude in ft [IP] or m [SI] real :: StandardAtmTemperature !+ Standard atmosphere dry-bulb temperature in °F [IP] or °C [SI] if ( isIP ()) then StandardAtmTemperature = 5 9.0 - 0.00356620 * Altitude else StandardAtmTemperature = 1 5.0 - 0.0065 * Altitude end if end function GetStandardAtmTemperature function GetSeaLevelPressure ( StnPressure , Altitude , TDryBulb ) result ( SeaLevelPressure ) !+ Return sea level pressure given dry-bulb temperature, altitude above sea level and pressure. !+ Reference: !+ Hess SL, Introduction to theoretical meteorology, Holt Rinehart and Winston, NY 1959, !+ ch. 6.5; Stull RB, Meteorology for scientists and engineers, 2nd edition, !+ Brooks/Cole 2000, ch. 1. !+ Notes: !+ The standard procedure for the US is to use for TDryBulb the average !+ of the current station temperature and the station temperature from 12 hours ago. real , intent ( in ) :: StnPressure !+ Observed station pressure in Psi [IP] or Pa [SI] real , intent ( in ) :: Altitude !+ Altitude in ft [IP] or m [SI] real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: SeaLevelPressure !+ Sea level barometric pressure in Psi [IP] or Pa [SI] real :: TColumn !+ Average temperature in column of air in R [IP] or K [SI] real :: H !+ scale height (dimensionless) if ( isIP ()) then ! Calculate average temperature in column of air, assuming a lapse rate ! of 3.6 °F/1000ft TColumn = TDryBulb + 0.0036 * Altitude / 2.0 ! Determine the scale height H = 5 3.351 * GetTRankineFromTFahrenheit ( TColumn ) else ! Calculate average temperature in column of air, assuming a lapse rate ! of 6.5 °C/km TColumn = TDryBulb + 0.0065 * Altitude / 2.0 ! Determine the scale height H = 28 7.055 * GetTKelvinFromTCelsius ( TColumn ) / 9.807 end if ! Calculate the sea level pressure SeaLevelPressure = StnPressure * exp ( Altitude / H ) end function GetSeaLevelPressure function GetStationPressure ( SeaLevelPressure , Altitude , TDryBulb ) result ( StationPressure ) !+ Return station pressure from sea level pressure. !+ Reference: !+ See 'GetSeaLevelPressure' !+ Notes: !+ This function is just the inverse of 'GetSeaLevelPressure'. real , intent ( in ) :: SeaLevelPressure !+ Sea level barometric pressure in Psi [IP] or Pa [SI] real , intent ( in ) :: Altitude !+ Altitude in ft [IP] or m [SI] real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: StationPressure !+ Station pressure in Psi [IP] or Pa [SI] StationPressure = SeaLevelPressure / GetSeaLevelPressure ( 1.0 , Altitude , TDryBulb ) end function GetStationPressure !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Functions to set all psychrometric values !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! subroutine CalcPsychrometricsFromTWetBulb ( TDryBulb , & TWetBulb , & Pressure , & HumRatio , & TDewPoint , & RelHum , & VapPres , & MoistAirEnthalpy , & MoistAirVolume , & DegreeOfSaturation ) !+ Utility function to calculate humidity ratio, dew-point temperature, relative humidity, !+ vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given !+ dry-bulb temperature, wet-bulb temperature, and pressure. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real , intent ( out ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( out ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( out ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( out ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real , intent ( out ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real , intent ( out ) :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real , intent ( out ) :: DegreeOfSaturation !+ Degree of saturation [unitless] HumRatio = GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) TDewPoint = GetTDewPointFromHumRatio ( TDryBulb , HumRatio , Pressure ) RelHum = GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) MoistAirEnthalpy = GetMoistAirEnthalpy ( TDryBulb , HumRatio ) MoistAirVolume = GetMoistAirVolume ( TDryBulb , HumRatio , Pressure ) DegreeOfSaturation = GetDegreeOfSaturation ( TDryBulb , HumRatio , Pressure ) end subroutine CalcPsychrometricsFromTWetBulb subroutine CalcPsychrometricsFromTDewPoint ( TDryBulb , & TDewPoint , & Pressure , & HumRatio , & TWetBulb , & RelHum , & VapPres , & MoistAirEnthalpy , & MoistAirVolume , & DegreeOfSaturation ) !+ Utility function to calculate humidity ratio, wet-bulb temperature, relative humidity, !+ vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given !+ dry-bulb temperature, dew-point temperature, and pressure. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real , intent ( out ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( out ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( out ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( out ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real , intent ( out ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real , intent ( out ) :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real , intent ( out ) :: DegreeOfSaturation !+ Degree of saturation [unitless] HumRatio = GetHumRatioFromTDewPoint ( TDewPoint , Pressure ) TWetBulb = GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) RelHum = GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) MoistAirEnthalpy = GetMoistAirEnthalpy ( TDryBulb , HumRatio ) MoistAirVolume = GetMoistAirVolume ( TDryBulb , HumRatio , Pressure ) DegreeOfSaturation = GetDegreeOfSaturation ( TDryBulb , HumRatio , Pressure ) end subroutine CalcPsychrometricsFromTDewPoint subroutine CalcPsychrometricsFromRelHum ( TDryBulb , & RelHum , & Pressure , & HumRatio , & TWetBulb , & TDewPoint , & VapPres , & MoistAirEnthalpy , & MoistAirVolume , & DegreeOfSaturation ) !+ Utility function to calculate humidity ratio, wet-bulb temperature, dew-point temperature, !+ vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given !+ dry-bulb temperature, relative humidity and pressure. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real , intent ( out ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( out ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( out ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( out ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real , intent ( out ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real , intent ( out ) :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real , intent ( out ) :: DegreeOfSaturation !+ Degree of saturation [unitless] HumRatio = GetHumRatioFromRelHum ( TDryBulb , RelHum , Pressure ) TWetBulb = GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) TDewPoint = GetTDewPointFromHumRatio ( TDryBulb , HumRatio , Pressure ) VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) MoistAirEnthalpy = GetMoistAirEnthalpy ( TDryBulb , HumRatio ) MoistAirVolume = GetMoistAirVolume ( TDryBulb , HumRatio , Pressure ) DegreeOfSaturation = GetDegreeOfSaturation ( TDryBulb , HumRatio , Pressure ) end subroutine CalcPsychrometricsFromRelHum end module mode_psychrolib","tags":"","loc":"sourcefile/mode_psychrolib.f90.html"},{"title":"modd_data_isban.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DATA_ISBA_n Source Code modd_data_isban.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################## MODULE MODD_DATA_ISBA_n !     ################## ! !!****  *MODD_DATA_ISBA - declaration of DATA surface parameters for ISBA scheme !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson  *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       05/2005 !!      P Samuelsson   02/2012  MEB !!      B. Decharme    01/16 : Bug when vegetation veg, z0 and emis are imposed whith interactive vegetation ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_DATA_COVER_PAR , ONLY : NVEGTYPE_ECOSG , NVEGTYPE_OLD ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE DATA_ISBA_t !------------------------------------------------------------------------------- ! ! Mask and number of grid elements containing patches/tiles: ! REAL , POINTER , DIMENSION (:,:) :: XPAR_VEGTYPE ! fraction of each vegetation type for !                                                  ! each grid mesh                          (-) ! !------------------------------------------------------------------------------- ! INTEGER :: NVEGTYPE ! INTEGER :: NTIME ! number of time data !                                                      ! for VEG, LAI, EMIS, Z0 LOGICAL :: LDATA_MIXPAR ! LOGICAL :: LDATA_VEGTYPE ! LOGICAL , POINTER , DIMENSION (:) :: LDATA_LAI LOGICAL , POINTER , DIMENSION (:) :: LDATA_VEG LOGICAL , POINTER , DIMENSION (:) :: LDATA_Z0 LOGICAL , POINTER , DIMENSION (:) :: LDATA_EMIS LOGICAL , POINTER , DIMENSION (:) :: LDATA_ALBNIR_VEG LOGICAL , POINTER , DIMENSION (:) :: LDATA_ALBVIS_VEG LOGICAL , POINTER , DIMENSION (:) :: LDATA_ALBUV_VEG LOGICAL , POINTER , DIMENSION (:) :: LDATA_IRRIG LOGICAL , POINTER , DIMENSION (:) :: LDATA_WATSUP LOGICAL , POINTER , DIMENSION (:) :: LDATA_ALBNIR_SOIL LOGICAL , POINTER , DIMENSION (:) :: LDATA_ALBVIS_SOIL LOGICAL , POINTER , DIMENSION (:) :: LDATA_ALBUV_SOIL ! - For multi-energy balance (MEB) ! LOGICAL , POINTER , DIMENSION (:) :: LDATA_GNDLITTER LOGICAL , POINTER , DIMENSION (:) :: LDATA_Z0LITTER LOGICAL , POINTER , DIMENSION (:) :: LDATA_H_VEG ! LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_DG LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_ROOTFRAC LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_H_TREE LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_DICE LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_GROUND_DEPTH LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_ROOT_DEPTH LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_ROOT_EXTINCTION LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_ROOT_LIN LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_RSMIN LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_GAMMA LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_WRMAX_CF LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_CV LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_Z0_O_Z0H LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_RGL LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_BSLAI LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_LAIMIN LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_SEFOLD LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_GMES LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_RE25 LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_STRESS LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_F2I LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_GC LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_DMAX LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_CE_NITRO LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_CF_NITRO LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_CNA_NITRO LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_SEED_M LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_SEED_D LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_REAP_M LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_REAP_D ! LOGICAL :: LDATA_CONDSAT LOGICAL :: LDATA_MPOTSAT LOGICAL :: LDATA_BCOEF LOGICAL :: LDATA_WWILT LOGICAL :: LDATA_WFC LOGICAL :: LDATA_WSAT ! LOGICAL :: LIMP_VEG LOGICAL :: LIMP_Z0 LOGICAL :: LIMP_EMIS ! ! Input Parameters, per patch: ! ! - vegetation + bare soil: ! REAL , POINTER , DIMENSION (:,:) :: XPAR_Z0_O_Z0H ! ratio of surface roughness lengths !                                                      ! (momentum to heat)                      (-) REAL , POINTER , DIMENSION (:,:,:) :: XPAR_EMIS ! surface emissivity                      (-) REAL , POINTER , DIMENSION (:,:,:) :: XPAR_Z0 ! surface roughness length                (m) ! ! - vegetation: ! REAL , POINTER , DIMENSION (:,:,:) :: XPAR_ALBNIR_VEG ! vegetation near-infra-red albedo        (-) REAL , POINTER , DIMENSION (:,:,:) :: XPAR_ALBVIS_VEG ! vegetation visible albedo               (-) REAL , POINTER , DIMENSION (:,:,:) :: XPAR_ALBUV_VEG ! vegetation UV albedo                    (-) ! ! - vegetation: default option (Jarvis) and general parameters: ! REAL , POINTER , DIMENSION (:,:,:) :: XPAR_VEG ! vegetation cover fraction               (-) REAL , POINTER , DIMENSION (:,:) :: XPAR_WRMAX_CF ! coefficient for maximum water !                                                      ! interception !                                                      ! storage capacity on the vegetation      (-) REAL , POINTER , DIMENSION (:,:) :: XPAR_RSMIN ! minimum stomatal resistance             (s/m) REAL , POINTER , DIMENSION (:,:) :: XPAR_GAMMA ! coefficient for the calculation !                                                      ! of the surface stomatal !                                                      ! resistance REAL , POINTER , DIMENSION (:,:) :: XPAR_CV ! vegetation thermal inertia coefficient  (K m2/J) REAL , POINTER , DIMENSION (:,:) :: XPAR_RGL ! maximum solar radiation !                                                      ! usable in photosynthesis                (W/m2) REAL , POINTER , DIMENSION (:,:,:) :: XPAR_ROOTFRAC ! root fraction profile ('DIF' option) ! REAL , POINTER , DIMENSION (:,:) :: XPAR_ROOT_DEPTH ! root depth ('DIF' option) REAL , POINTER , DIMENSION (:,:) :: XPAR_ROOT_EXTINCTION ! root extinction parameter ('DIF' option) REAL , POINTER , DIMENSION (:,:) :: XPAR_ROOT_LIN ! root linear parameter ('DIF' option) ! ! - For multi-energy balance (MEB) ! REAL , POINTER , DIMENSION (:,:,:) :: XPAR_GNDLITTER ! ground litter fraction REAL , POINTER , DIMENSION (:,:,:) :: XPAR_Z0LITTER ! ground litter roughness length REAL , POINTER , DIMENSION (:,:,:) :: XPAR_H_VEG ! height of canopy vegetation ! !------------------------------------------------------------------------------- ! ! - vegetation: Ags parameters ('AGS', 'LAI', 'AST', 'LST', 'NIT', 'NCB' options) ! REAL , POINTER , DIMENSION (:,:) :: XPAR_BSLAI ! ratio d(biomass)/d(lai)                 (kg/m2) REAL , POINTER , DIMENSION (:,:) :: XPAR_LAIMIN ! minimum LAI (Leaf Area Index)           (m2/m2) REAL , POINTER , DIMENSION (:,:) :: XPAR_SEFOLD ! e-folding time for senescence           (s) REAL , POINTER , DIMENSION (:,:) :: XPAR_H_TREE ! height of trees                         (m) REAL , POINTER , DIMENSION (:,:) :: XPAR_GMES ! mesophyll conductance                   (m s-1) REAL , POINTER , DIMENSION (:,:) :: XPAR_RE25 ! Ecosystem respiration parameter         (kg m2 s-1) ! !------------------------------------------------------------------------------- ! ! - vegetation: Ags Stress parameters ('AST', 'LST', 'NIT', 'NCB' options) ! LOGICAL , POINTER , DIMENSION (:,:) :: LPAR_STRESS ! vegetation response type to water !                                                     ! stress (true:defensive false:offensive) (-) REAL , POINTER , DIMENSION (:,:) :: XPAR_F2I ! critical normilized soil water !                                                     ! content for stress parameterisation REAL , POINTER , DIMENSION (:,:) :: XPAR_GC ! cuticular conductance                   (m s-1) REAL , POINTER , DIMENSION (:,:) :: XPAR_DMAX ! maximum air saturation deficit !                                                     ! tolerate by vegetation                  (kg/kg) ! !------------------------------------------------------------------------------- ! ! - vegetation: Ags Nitrogen-model parameters ('NIT', 'NCB' option) ! REAL , POINTER , DIMENSION (:,:) :: XPAR_CE_NITRO ! leaf aera ratio sensitivity to !                                                       ! nitrogen concentration                (m2/kg) REAL , POINTER , DIMENSION (:,:) :: XPAR_CF_NITRO ! lethal minimum value of leaf area !                                                       ! ratio                                 (m2/kg) REAL , POINTER , DIMENSION (:,:) :: XPAR_CNA_NITRO ! nitrogen concentration of active !                                                       ! biomass                               (kg/kg) ! !------------------------------------------------------------------------------- ! ! - soil: primary parameters ! REAL , POINTER , DIMENSION (:,:,:) :: XPAR_DG ! soil layer depth                        (m) !                                                      ! NOTE: in Force-Restore mode, the !                                                      ! uppermost layer thickness is superficial !                                                      ! and is only explicitly used for soil !                                                      ! water phase changes                     (m) ! REAL , POINTER , DIMENSION (:,:) :: XPAR_GROUND_DEPTH ! ground depth (DIF option) ! REAL , POINTER , DIMENSION (:,:) :: XPAR_DICE ! depth of the soil column for the calculation !                                                        of the frozen soil fraction (m) (Force restore) ! ! - bare soil albedo ! REAL , POINTER , DIMENSION (:,:,:) :: XPAR_ALBNIR_SOIL ! soil near-infra-red albedo        (-) REAL , POINTER , DIMENSION (:,:,:) :: XPAR_ALBVIS_SOIL ! soil visible albedo               (-) REAL , POINTER , DIMENSION (:,:,:) :: XPAR_ALBUV_SOIL ! soil UV albedo                    (-) ! REAL , POINTER , DIMENSION (:,:) :: XPAR_CONDSAT REAL , POINTER , DIMENSION (:,:) :: XPAR_MPOTSAT REAL , POINTER , DIMENSION (:,:) :: XPAR_BCOEF REAL , POINTER , DIMENSION (:,:) :: XPAR_WWILT REAL , POINTER , DIMENSION (:,:) :: XPAR_WFC REAL , POINTER , DIMENSION (:,:) :: XPAR_WSAT ! !------------------------------------------------------------------------------- ! ! - Vegetation: Ags Prognostic (YPHOTO = ('NIT' or 'NCB') or prescribed (YPHOTO='NON' or 'AST') ! REAL , POINTER , DIMENSION (:,:,:) :: XPAR_LAI ! Leaf Area Index                         (m2/m2) ! REAL , POINTER , DIMENSION (:,:,:) :: XPAR_IRRIG REAL , POINTER , DIMENSION (:,:,:) :: XPAR_WATSUP REAL , POINTER , DIMENSION (:,:) :: XPAR_SEED_M REAL , POINTER , DIMENSION (:,:) :: XPAR_SEED_D REAL , POINTER , DIMENSION (:,:) :: XPAR_REAP_M REAL , POINTER , DIMENSION (:,:) :: XPAR_REAP_D ! !------------------------------------------------------------------------------- ! REAL , POINTER , DIMENSION (:) :: XPAR_FRAC_HVEG ! fraction of high vegetation REAL , POINTER , DIMENSION (:) :: XPAR_FRAC_LVEG ! fraction of low  vegetation REAL , POINTER , DIMENSION (:) :: XPAR_FRAC_NVEG ! fraction of bare soil REAL , POINTER , DIMENSION (:,:) :: XPAR_LAI_HVEG ! LAI      of high vegetation REAL , POINTER , DIMENSION (:,:) :: XPAR_LAI_LVEG ! LAI      of low  vegetation REAL , POINTER , DIMENSION (:) :: XPAR_H_HVEG ! height of trees ! END TYPE DATA_ISBA_t CONTAINS ! SUBROUTINE DATA_ISBA_INIT ( YDATA_ISBA ) TYPE ( DATA_ISBA_t ), INTENT ( INOUT ) :: YDATA_ISBA REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_ISBA_N:DATA_ISBA_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDATA_ISBA % XPAR_VEGTYPE ) NULLIFY ( YDATA_ISBA % XPAR_Z0_O_Z0H ) NULLIFY ( YDATA_ISBA % XPAR_EMIS ) NULLIFY ( YDATA_ISBA % XPAR_Z0 ) NULLIFY ( YDATA_ISBA % XPAR_ALBNIR_VEG ) NULLIFY ( YDATA_ISBA % XPAR_ALBVIS_VEG ) NULLIFY ( YDATA_ISBA % XPAR_ALBUV_VEG ) NULLIFY ( YDATA_ISBA % XPAR_VEG ) NULLIFY ( YDATA_ISBA % XPAR_WRMAX_CF ) NULLIFY ( YDATA_ISBA % XPAR_RSMIN ) NULLIFY ( YDATA_ISBA % XPAR_GAMMA ) NULLIFY ( YDATA_ISBA % XPAR_CV ) NULLIFY ( YDATA_ISBA % XPAR_RGL ) NULLIFY ( YDATA_ISBA % XPAR_ROOTFRAC ) NULLIFY ( YDATA_ISBA % XPAR_BSLAI ) NULLIFY ( YDATA_ISBA % XPAR_LAIMIN ) NULLIFY ( YDATA_ISBA % XPAR_SEFOLD ) NULLIFY ( YDATA_ISBA % XPAR_H_TREE ) NULLIFY ( YDATA_ISBA % XPAR_GMES ) NULLIFY ( YDATA_ISBA % XPAR_RE25 ) NULLIFY ( YDATA_ISBA % LPAR_STRESS ) NULLIFY ( YDATA_ISBA % XPAR_F2I ) NULLIFY ( YDATA_ISBA % XPAR_GC ) NULLIFY ( YDATA_ISBA % XPAR_DMAX ) NULLIFY ( YDATA_ISBA % XPAR_CE_NITRO ) NULLIFY ( YDATA_ISBA % XPAR_CF_NITRO ) NULLIFY ( YDATA_ISBA % XPAR_CNA_NITRO ) NULLIFY ( YDATA_ISBA % XPAR_DG ) NULLIFY ( YDATA_ISBA % XPAR_DICE ) NULLIFY ( YDATA_ISBA % XPAR_GROUND_DEPTH ) NULLIFY ( YDATA_ISBA % XPAR_ROOT_DEPTH ) NULLIFY ( YDATA_ISBA % XPAR_ROOT_EXTINCTION ) NULLIFY ( YDATA_ISBA % XPAR_ROOT_LIN ) NULLIFY ( YDATA_ISBA % XPAR_ALBNIR_SOIL ) NULLIFY ( YDATA_ISBA % XPAR_ALBVIS_SOIL ) NULLIFY ( YDATA_ISBA % XPAR_ALBUV_SOIL ) NULLIFY ( YDATA_ISBA % XPAR_LAI ) NULLIFY ( YDATA_ISBA % XPAR_IRRIG ) NULLIFY ( YDATA_ISBA % XPAR_WATSUP ) NULLIFY ( YDATA_ISBA % XPAR_SEED_M ) NULLIFY ( YDATA_ISBA % XPAR_SEED_D ) NULLIFY ( YDATA_ISBA % XPAR_REAP_M ) NULLIFY ( YDATA_ISBA % XPAR_REAP_D ) NULLIFY ( YDATA_ISBA % XPAR_GNDLITTER ) NULLIFY ( YDATA_ISBA % XPAR_Z0LITTER ) NULLIFY ( YDATA_ISBA % XPAR_H_VEG ) NULLIFY ( YDATA_ISBA % XPAR_FRAC_HVEG ) NULLIFY ( YDATA_ISBA % XPAR_FRAC_LVEG ) NULLIFY ( YDATA_ISBA % XPAR_FRAC_NVEG ) NULLIFY ( YDATA_ISBA % XPAR_LAI_HVEG ) NULLIFY ( YDATA_ISBA % XPAR_LAI_LVEG ) NULLIFY ( YDATA_ISBA % XPAR_H_HVEG ) NULLIFY ( YDATA_ISBA % XPAR_CONDSAT ) NULLIFY ( YDATA_ISBA % XPAR_MPOTSAT ) NULLIFY ( YDATA_ISBA % XPAR_BCOEF ) NULLIFY ( YDATA_ISBA % XPAR_WWILT ) NULLIFY ( YDATA_ISBA % XPAR_WFC ) NULLIFY ( YDATA_ISBA % XPAR_WSAT ) ! YDATA_ISBA % NVEGTYPE = 0 YDATA_ISBA % NTIME = 0 YDATA_ISBA % LDATA_MIXPAR = . FALSE . YDATA_ISBA % LDATA_VEGTYPE = . FALSE . ! NULLIFY ( YDATA_ISBA % LDATA_LAI ) NULLIFY ( YDATA_ISBA % LDATA_VEG ) NULLIFY ( YDATA_ISBA % LDATA_Z0 ) NULLIFY ( YDATA_ISBA % LDATA_EMIS ) NULLIFY ( YDATA_ISBA % LDATA_ALBNIR_VEG ) NULLIFY ( YDATA_ISBA % LDATA_ALBVIS_VEG ) NULLIFY ( YDATA_ISBA % LDATA_ALBUV_VEG ) NULLIFY ( YDATA_ISBA % LDATA_ALBNIR_SOIL ) NULLIFY ( YDATA_ISBA % LDATA_ALBVIS_SOIL ) NULLIFY ( YDATA_ISBA % LDATA_ALBUV_SOIL ) NULLIFY ( YDATA_ISBA % LDATA_GNDLITTER ) NULLIFY ( YDATA_ISBA % LDATA_Z0LITTER ) NULLIFY ( YDATA_ISBA % LDATA_H_VEG ) NULLIFY ( YDATA_ISBA % LDATA_IRRIG ) NULLIFY ( YDATA_ISBA % LDATA_WATSUP ) ! YDATA_ISBA % LDATA_DG (:) = . FALSE . YDATA_ISBA % LDATA_ROOTFRAC (:) = . FALSE . YDATA_ISBA % LDATA_H_TREE (:) = . FALSE . YDATA_ISBA % LDATA_DICE (:) = . FALSE . YDATA_ISBA % LDATA_GROUND_DEPTH (:) = . FALSE . YDATA_ISBA % LDATA_ROOT_DEPTH (:) = . FALSE . YDATA_ISBA % LDATA_ROOT_EXTINCTION (:) = . FALSE . YDATA_ISBA % LDATA_ROOT_LIN (:) = . FALSE . YDATA_ISBA % LDATA_RSMIN (:) = . FALSE . YDATA_ISBA % LDATA_GAMMA (:) = . FALSE . YDATA_ISBA % LDATA_WRMAX_CF (:) = . FALSE . YDATA_ISBA % LDATA_CV (:) = . FALSE . YDATA_ISBA % LDATA_RGL (:) = . FALSE . YDATA_ISBA % LDATA_Z0_O_Z0H (:) = . FALSE . YDATA_ISBA % LDATA_BSLAI (:) = . FALSE . YDATA_ISBA % LDATA_LAIMIN (:) = . FALSE . YDATA_ISBA % LDATA_SEFOLD (:) = . FALSE . YDATA_ISBA % LDATA_GMES (:) = . FALSE . YDATA_ISBA % LDATA_RE25 (:) = . FALSE . YDATA_ISBA % LDATA_STRESS (:) = . FALSE . YDATA_ISBA % LDATA_F2I (:) = . FALSE . YDATA_ISBA % LDATA_GC (:) = . FALSE . YDATA_ISBA % LDATA_DMAX (:) = . FALSE . YDATA_ISBA % LDATA_CE_NITRO (:) = . FALSE . YDATA_ISBA % LDATA_CF_NITRO (:) = . FALSE . YDATA_ISBA % LDATA_CNA_NITRO (:) = . FALSE . YDATA_ISBA % LDATA_SEED_M (:) = . FALSE . YDATA_ISBA % LDATA_SEED_D (:) = . FALSE . YDATA_ISBA % LDATA_REAP_M (:) = . FALSE . YDATA_ISBA % LDATA_REAP_D (:) = . FALSE . ! YDATA_ISBA % LDATA_CONDSAT = . FALSE . YDATA_ISBA % LDATA_MPOTSAT = . FALSE . YDATA_ISBA % LDATA_BCOEF = . FALSE . YDATA_ISBA % LDATA_WWILT = . FALSE . YDATA_ISBA % LDATA_WFC = . FALSE . YDATA_ISBA % LDATA_WSAT = . FALSE . ! YDATA_ISBA % LIMP_VEG = . FALSE . YDATA_ISBA % LIMP_Z0 = . FALSE . YDATA_ISBA % LIMP_EMIS = . FALSE . ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_ISBA_N:DATA_ISBA_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DATA_ISBA_INIT END MODULE MODD_DATA_ISBA_n","tags":"","loc":"sourcefile/modd_data_isban.f90.html"},{"title":"modd_ch_surfn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_CH_SURF_n Source Code modd_ch_surfn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ##################### MODULE MODD_CH_SURF_n !     ##################### ! !! !!    PURPOSE !!    ------- ! ! ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !! !!    AUTHOR !!    ------ !!  P. Tulet   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!  16/07/03 (P. Tulet)  restructured for externalization !!   10/2011 (S. Queguiner) Add CCH_EMIS !------------------------------------------------------------------------------ ! !*       0.   DECLARATIONS !             ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE CH_SURF_t ! CHARACTER ( LEN = 4 ) :: CCH_EMIS ! Option for chemical emissions ! 'NONE' : no emission ! 'AGGR' : one aggregated value !    for each specie and hour ! 'SNAP' : from SNAP data using !    potential emission & temporal profiles CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CCH_NAMES ! NAME OF CHEMICAL CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CAER_NAMES ! NAME OF AEROSOL SPECIES ! SPECIES (FOR DIAG ONLY) CHARACTER ( LEN = 28 ) :: CCHEM_SURF_FILE ! name of general ! (chemical) purpose ! ASCII input file REAL , DIMENSION (:), POINTER :: XCONVERSION ! emission unit ! conversion factor LOGICAL :: LCH_SURF_EMIS ! T : chemical emissions ! are used LOGICAL :: LCH_EMIS ! T : chemical emissions ! are present in the file ! END TYPE CH_SURF_t CONTAINS ! SUBROUTINE CH_SURF_INIT ( YCH_SURF ) TYPE ( CH_SURF_t ), INTENT ( INOUT ) :: YCH_SURF REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_SURF_N:CH_SURF_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YCH_SURF % CCH_NAMES ) NULLIFY ( YCH_SURF % CAER_NAMES ) NULLIFY ( YCH_SURF % XCONVERSION ) YCH_SURF % CCH_EMIS = ' ' YCH_SURF % CCHEM_SURF_FILE = ' ' YCH_SURF % LCH_SURF_EMIS = . FALSE . YCH_SURF % LCH_EMIS = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_SURF_N:CH_SURF_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_SURF_INIT END MODULE MODD_CH_SURF_n","tags":"","loc":"sourcefile/modd_ch_surfn.f90.html"},{"title":"modd_dstn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DST_n Source Code modd_dstn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. MODULE MODD_DST_n !Purpose: !Declare variables and constants necessary to do the dust calculations !Here are only the variables which depend on the grid! !Author: Alf Grini <alf.grini@cnrm.meteo.fr> ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE DST_t ! INTEGER , DIMENSION (:), POINTER :: NVT_DST !MASK: dust vegetation number to vegetation number INTEGER , DIMENSION (:), POINTER :: NSIZE_PATCH_DST !Number of points for a patch and a vegetation class INTEGER , DIMENSION (:,:), POINTER :: NR_PATCH_DST !Mask from patch-points to dust-points REAL , DIMENSION (:), POINTER :: Z0_EROD_DST !Roughness length momentum over erodible dust emitter sfc CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CSV_DST !Name of scalar variables REAL , DIMENSION (:,:), POINTER :: XSFDST !Dust variables to be send to output REAL , DIMENSION (:,:), POINTER :: XSFDSTM !Dust variables to be send to output REAL , DIMENSION (:), POINTER :: XEMISRADIUS_DST !Number median radius for each source mode REAL , DIMENSION (:), POINTER :: XEMISSIG_DST !sigma for each source mode REAL , DIMENSION (:), POINTER :: XMSS_FRC_SRC !Mass fraction of each source mode ! END TYPE DST_t ! TYPE DST_NP_t ! TYPE ( DST_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE DST_NP_t ! CONTAINS ! SUBROUTINE DST_INIT ( YDST ) TYPE ( DST_t ), INTENT ( INOUT ) :: YDST REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DST_N:DST_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDST % NVT_DST ) NULLIFY ( YDST % NSIZE_PATCH_DST ) NULLIFY ( YDST % NR_PATCH_DST ) NULLIFY ( YDST % Z0_EROD_DST ) NULLIFY ( YDST % CSV_DST ) NULLIFY ( YDST % XSFDST ) NULLIFY ( YDST % XSFDSTM ) NULLIFY ( YDST % XEMISRADIUS_DST ) NULLIFY ( YDST % XEMISSIG_DST ) NULLIFY ( YDST % XMSS_FRC_SRC ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DST_N:DST_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DST_INIT ! SUBROUTINE DST_NP_INIT ( YDST_NP , KPATCH ) TYPE ( DST_NP_t ), INTENT ( INOUT ) :: YDST_NP INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DST_N:DST_NP_INIT\" , 0 , ZHOOK_HANDLE ) ! IF ( ASSOCIATED ( YDST_NP % AL )) THEN DO JP = 1 , KPATCH CALL DST_INIT ( YDST_NP % AL ( JP )) ENDDO DEALLOCATE ( YDST_NP % AL ) ELSE ALLOCATE ( YDST_NP % AL ( KPATCH )) DO JP = 1 , KPATCH CALL DST_INIT ( YDST_NP % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DST_N:DST_NP_INIT\" , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE DST_NP_INIT ! END MODULE MODD_DST_n","tags":"","loc":"sourcefile/modd_dstn.f90.html"},{"title":"spll_modi_urban_drag.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_URBAN_DRAG Source Code spll_modi_urban_drag.f90 Source Code !auto_modi:spll_urban_drag.D MODULE MODI_URBAN_DRAG INTERFACE SUBROUTINE URBAN_DRAG ( TOP , T , B , HIMPLICIT_WIND , PTSTEP , PT_CANYON , PQ_CANYON , & PU_CANYON , PT_LOWCAN , PQ_LOWCAN , PU_LOWCAN , PZ_LOWCAN , & PTS_ROOF , PTS_ROAD , PTS_WALL , PTS_GARDEN , & PDELT_SNOW_ROOF , PDELT_SNOW_ROAD , PEXNS , PEXNA , PTA , & PQA , PPS , PRHOA , PZREF , PUREF , PVMOD , PWS_ROOF_MAX , & PWS_ROAD_MAX , PPEW_A_COEF , PPEW_B_COEF , & PPEW_A_COEF_LOWCAN , PPEW_B_COEF_LOWCAN , PQSAT_ROOF , & PQSAT_ROAD , PDELT_ROOF , PDELT_ROAD , PCD , PCDN , PAC_ROOF , & PAC_ROOF_WAT , PAC_WALL , PAC_ROAD , PAC_ROAD_WAT , PAC_TOP , & PAC_GARDEN , PRI , PUW_ROAD , PUW_ROOF , PDUWDU_ROAD , & PDUWDU_ROOF , PUSTAR_TOWN , PAC_WIN ) USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t IMPLICIT NONE TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option REAL , INTENT ( IN ) :: PTSTEP ! time-step REAL , DIMENSION (:), INTENT ( IN ) :: PT_CANYON ! canyon air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PQ_CANYON ! canyon air specific humidity. REAL , DIMENSION (:), INTENT ( IN ) :: PU_CANYON ! hor. wind in canyon REAL , DIMENSION (:), INTENT ( IN ) :: PU_LOWCAN ! wind near the road REAL , DIMENSION (:), INTENT ( IN ) :: PT_LOWCAN ! temp. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PQ_LOWCAN ! hum. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PZ_LOWCAN ! height of atm. var. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PTS_ROOF ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_ROAD ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WALL ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GARDEN ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_SNOW_ROOF ! fraction of snow on roof REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_SNOW_ROAD ! fraction of snow on road REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PEXNA ! exner function REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the first REAL , DIMENSION (:), INTENT ( IN ) :: PWS_ROOF_MAX ! maximum deepness of roof REAL , DIMENSION (:), INTENT ( IN ) :: PWS_ROAD_MAX ! and water reservoirs (kg/m2) REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients (m2s/kg) REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling     (m/s) REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_A_COEF_LOWCAN ! implicit coefficients for wind coupling (m2s/kg) REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_B_COEF_LOWCAN ! between low canyon wind and road (m/s) REAL , DIMENSION (:), INTENT ( OUT ) :: PQSAT_ROOF ! qsat(Ts) REAL , DIMENSION (:), INTENT ( OUT ) :: PQSAT_ROAD ! qsat(Ts) REAL , DIMENSION (:), INTENT ( OUT ) :: PDELT_ROOF ! water fraction on REAL , DIMENSION (:), INTENT ( OUT ) :: PDELT_ROAD ! snow-free surfaces REAL , DIMENSION (:), INTENT ( OUT ) :: PCD ! drag coefficient REAL , DIMENSION (:), INTENT ( OUT ) :: PCDN ! neutral drag coefficient REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_ROOF ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_ROOF_WAT ! aerodynamical conductance (for water) REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_WALL ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_ROAD ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_ROAD_WAT ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_TOP ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( IN ) :: PAC_GARDEN ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PRI ! Town Richardson number REAL , DIMENSION (:), INTENT ( OUT ) :: PUW_ROAD ! Momentum flux for roads REAL , DIMENSION (:), INTENT ( OUT ) :: PUW_ROOF ! Momentum flux for roofs REAL , DIMENSION (:), INTENT ( OUT ) :: PDUWDU_ROAD ! REAL , DIMENSION (:), INTENT ( OUT ) :: PDUWDU_ROOF ! REAL , DIMENSION (:), INTENT ( OUT ) :: PUSTAR_TOWN ! Fraction velocity for town REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_WIN ! aerodynamical conductance for window END SUBROUTINE URBAN_DRAG END INTERFACE END MODULE MODI_URBAN_DRAG","tags":"","loc":"sourcefile/spll_modi_urban_drag.f90.html"},{"title":"spll_modi_window_data.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_WINDOW_DATA Source Code spll_modi_window_data.f90 Source Code !auto_modi:spll_window_data.D MODULE MODI_WINDOW_DATA INTERFACE SUBROUTINE WINDOW_DATA ( KI , B ) USE MODD_BEM_n , ONLY : BEM_t IMPLICIT NONE INTEGER , INTENT ( IN ) :: KI ! number of points TYPE ( BEM_t ), INTENT ( INOUT ) :: B END SUBROUTINE WINDOW_DATA END INTERFACE END MODULE MODI_WINDOW_DATA","tags":"","loc":"sourcefile/spll_modi_window_data.f90.html"},{"title":"modd_surf_atm_gridn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_SURF_ATM_GRID_n Source Code modd_surf_atm_gridn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################## MODULE MODD_SURF_ATM_GRID_n !     ################## ! !!****  *MODD_SURF_ATM_GRID - declaration of SURF_ATM grid !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson  *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       01/2004 ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_SFX_GRID_n , ONLY : GRID_t , GRID_INIT ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE SURF_ATM_GRID_t !------------------------------------------------------------------------------- ! ! Grid definition ! TYPE ( GRID_t ) :: G !                                              ! (depends on value of CGRID) REAL , POINTER , DIMENSION (:) :: XGRID_FULL_PAR ! lits of parameters used to define the grid !                                                     ! (depends on value of CGRID) INTEGER :: NGRID_FULL_PAR ! size of XGRID_FULL_PAR ! INTEGER , POINTER , DIMENSION (:,:) :: NNEAR !------------------------------------------------------------------------------- ! ! General surface parameters: ! REAL , POINTER , DIMENSION (:) :: XJPDIR ! heading of J direction (deg from N clockwise) !------------------------------------------------------------------------------- ! END TYPE SURF_ATM_GRID_t ! CONTAINS ! SUBROUTINE SURF_ATM_GRID_INIT ( YSURF_ATM_GRID ) TYPE ( SURF_ATM_GRID_t ), INTENT ( INOUT ) :: YSURF_ATM_GRID REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SURF_ATM_GRID_N:SURF_ATM_GRID_INIT\" , 0 , ZHOOK_HANDLE ) CALL GRID_INIT ( YSURF_ATM_GRID % G ) NULLIFY ( YSURF_ATM_GRID % NNEAR ) NULLIFY ( YSURF_ATM_GRID % XGRID_FULL_PAR ) NULLIFY ( YSURF_ATM_GRID % XJPDIR ) YSURF_ATM_GRID % NGRID_FULL_PAR = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SURF_ATM_GRID_N:SURF_ATM_GRID_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE SURF_ATM_GRID_INIT ! END MODULE MODD_SURF_ATM_GRID_n","tags":"","loc":"sourcefile/modd_surf_atm_gridn.f90.html"},{"title":"spll_modi_teb_irrig.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_TEB_IRRIG Source Code spll_modi_teb_irrig.f90 Source Code !auto_modi:spll_teb_irrig.D MODULE MODI_TEB_IRRIG INTERFACE SUBROUTINE TEB_IRRIG ( OIRRIG , PTSTEP , KMONTH , PSOLAR_TIME , & PSTART_MONTH , PEND_MONTH , PSTART_HOUR , PEND_HOUR ,& P24H_IRRIG , PIRRIG ) IMPLICIT NONE LOGICAL , INTENT ( IN ) :: OIRRIG ! Flag for irrigation or not REAL , INTENT ( IN ) :: PTSTEP ! time step INTEGER , INTENT ( IN ) :: KMONTH ! Present Month REAL , DIMENSION (:), INTENT ( IN ) :: PSOLAR_TIME ! solar time (s since midnight) REAL , DIMENSION (:), INTENT ( IN ) :: PSTART_MONTH ! First month for irrigation (included) REAL , DIMENSION (:), INTENT ( IN ) :: PEND_MONTH ! Last  month for irrigation (included) REAL , DIMENSION (:), INTENT ( IN ) :: PSTART_HOUR ! First month for irrigation (included) REAL , DIMENSION (:), INTENT ( IN ) :: PEND_HOUR ! Last  month for irrigation (ecluded) REAL , DIMENSION (:), INTENT ( IN ) :: P24H_IRRIG ! 24h total irrigation REAL , DIMENSION (:), INTENT ( OUT ) :: PIRRIG ! present irrigation END SUBROUTINE TEB_IRRIG END INTERFACE END MODULE MODI_TEB_IRRIG","tags":"","loc":"sourcefile/spll_modi_teb_irrig.f90.html"},{"title":"teb.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines TEB Source Code teb.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !   ########################################################################## SUBROUTINE TEB ( TOP , T , BOP , B , TIR , DMT , HIMPLICIT_WIND , PTSUN , & PT_CANYON , PQ_CANYON , PU_CANYON , PT_LOWCAN , PQ_LOWCAN , PU_LOWCAN , & PZ_LOWCAN , PPEW_A_COEF , PPEW_B_COEF , PPEW_A_COEF_LOWCAN , & PPEW_B_COEF_LOWCAN , PPS , PPA , PEXNS , PEXNA , PTA , PQA , PRHOA , & PLW_RAD , PRR , PSR , PZREF , PUREF , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , & PTSTEP , PDF_RF , PDN_RF , PDF_RD , PDN_RD , PQSAT_RF , PQSAT_RD , & PDELT_RF , PDELT_RD , PTS_GARDEN , PLEW_RF , PUW_GR , PLEW_RD , PLE_WL_A ,& PLE_WL_B , PRNSN_RF , PHSN_RF , PLESN_RF , PGSN_RF , PMELT_RF , PRN_GR , & PH_GR , PLE_GR , PGFLUX_GR , PDRAIN_GR , PRUNOFF_GR , PRNSN_RD , & PHSN_RD , PLESN_RD , PGSN_RD , PMELT_RD , PUW_RD , PUW_RF , PDUWDU_RD , & PDUWDU_RF , PUSTAR_TWN , PCD , PCDN , PCH_TWN , PRI_TWN , PRESA_TWN , & PAC_RF , PAC_RD , PAC_WL , PAC_TOP , PAC_GARDEN , PAC_RF_WAT , & PAC_RD_WAT , PLW_WA_TO_WB , PLW_WA_TO_R , PLW_WB_TO_R , PLW_WA_TO_NR , & PLW_WB_TO_NR , PLW_R_TO_WA , PLW_R_TO_WB , PLW_G_TO_WA , PLW_G_TO_WB , & PLW_S_TO_WA , PLW_S_TO_WB , PLW_S_TO_R , PLW_S_TO_NR , PLW_NR_TO_WA , & PLW_NR_TO_WB , PLW_NR_TO_WIN , PLW_WA_TO_WIN , PLW_WB_TO_WIN , & PLW_G_TO_WIN , PLW_R_TO_WIN , PLW_S_TO_WIN , PLW_WIN_TO_WA , & PLW_WIN_TO_WB , PLW_WIN_TO_R , PLW_WIN_TO_NR , KDAY , PEMIT_LW_FAC , & PEMIT_LW_RD , PT_RAD_IND , PHU_BLD , PTIME , PE_SHADING ) !   ########################################################################## ! !!****  *TEB* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of prognostic variables and the fluxes !     over artificial surfaces as towns, taking into account the canyon like !     geometry of urbanized areas. ! ! !!**  METHOD !     ------ ! !     The prognostic variables are: !       - the surface temperature for roofs, roads, and walls !       - the water reservoir, whose maximum value is 10mm ! ! !    1 : Warning about snow !        ****************** ! !     Except for snow mantel evolution, all other computation with snow !   variables must be performed with these variables at previous time-step, !   and NOT new time-step. This insure coherence between snow fractions !   (computed at the begining) and other snow characteristics (albedo, Ts). ! ! !    2 : computation of input solar radiation on each surface !        **************************************************** ! !      Those are now done in subroutine urban_solar_abs.F90 ! !    3 : drag coefficient for momentum !        ***************************** ! ! !    4 : aerodynamical resistance for heat transfers !        ******************************************* ! ! !    5 : equation for evolution of Ts_roof !        ********************************* ! ! !       Rn = (dir_Rg + sca_Rg) (1-a) + emis * ( Rat - sigma Ts**4 (t+dt) ) ! !       H  = rho Cp CH V ( Ts (t+dt) - Tas ) ! !       LE = rho Lv CH V ( qs (t+dt) - qas ) ! !      where the as subscript denotes atmospheric values at ground level !      (and not at first half level) ! ! !    6 : equations for evolution of Ts_road and Ts_wall simultaneously !        ************************************************************* ! ! ! !   Rn_w = abs_Rg_w !  - sigma * emis_w                                                   * Ts_w**4 (t+dt) !  +         emis_w                       *      SVF_w                * Rat !  + sigma * emis_w * emis_r              *      SVF_w                * Ts_r**4 (t+dt) !  + sigma * emis_w * emis_w              * (1-2*SVF_w)               * Ts_w**4 (t+dt) !  + sigma * emis_w * emis_w * (1-emis_r) *      SVF_w  * (1-  SVF_r) * Ts_w**4 (t+dt) !  + sigma * emis_w * emis_w * (1-emis_w) * (1-2*SVF_w) * (1-2*SVF_w) * Ts_w**4 (t+dt) !  + sigma * emis_w * emis_r * (1-emis_w) *      SVF_w  * (1-2*SVF_w) * Ts_r**4 (t+dt) ! !   Rn_r = abs_Rg_r !  - sigma * emis_r                                                   * Ts_r**4 (t+dt) !  +         emis_r                       *    SVF_r                  * Rat !  + sigma * emis_r * emis_w              * (1-SVF_r)                 * Ts_w**4 (t+dt) !  + sigma * emis_r * emis_w * (1-emis_w) * (1-SVF_r)   * (1-2*SVF_w) * Ts_w**4 (t+dt) !  + sigma * emis_r * emis_r * (1-emis_w) * (1-SVF_r)   *      SVF_w  * Ts_r**4 (t+dt) ! !  H_w  = rho Cp CH V ( Ts_w (t+dt) - Ta_canyon ) ! !  LE_w = rho Lv CH V ( qs_w (t+dt) - qa_canyon ) ! !  H_r  = rho Cp CH V ( Ts_r (t+dt) - Ta_canyon ) ! !  LE_r = rho Lv CH V ( qs_r (t+dt) - qa_canyon ) ! ! with again !                AC_can * Swall/Sroad * Twall + AC_can * Troad + AC_top * Ta + H_traffic/Cp/rho/Sroad !   Ta_canyon = ------------------------------------------------------------------------------------- !                AC_can * Swall/Sroad         + AC_can         + AC_top ! ! !                 AC_can * delt_road * Hu_road * qsat(Troad) + AC_top * qa + LE_traffic/Lv/rho/Sroad !   qa_canyon = ------------------------------------------------------------------------------------ !                 AC_can * delt_road                        + AC_top ! ! ! ! !    7 : computation of fluxes for each surface type !        ******************************************* ! ! !    8 : averaging of the fluxes !        *********************** ! !   This is done on the total exchange surface (roof + wall + road), !  which is bigger than the horizontal surface (roof+road), leading !  to bigger fluxes. ! !   The fluxes due to industrial activity are directly added into the !  atmosphere ! ! !    9 : road reservoir evolution !        ************************ ! !   The roof reservoir runoff goes directly into the road reservoir. ! !   Runoff occurs for road reservoir (too much water), as well as drainage !   (evacuation system, typical time scale: 1 day) ! ! !------------------------ !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !!     21 / 10 / 2003   P. Tulet    output aerodynamical resistance !!     01 / 07 / 2005   P.Le Moigne Exner functions as arguments to urban_fluxes !!     17 / 10 / 2005   (G. Pigeon) computation of anthropogenic heat from domestic heating !!          01 / 2012   V. Masson   Separates the 2 walls !!     25 / 09 / 2012   B. Decharme new wind implicitation !!          07 / 2013   V. Masson   Adds road watering !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !     ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t ! USE MODD_TYPE_DATE_SURF , ONLY : DATE_TIME USE MODD_CSTS , ONLY : XTT , XSTEFAN , XCPD , XLVTT USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_SNOW_PAR , ONLY : XEMISSN , XANSMAX_ROOF , & XANSMAX_ROAD , XWCRN_ROOF , XWCRN_ROAD ! USE MODE_THERMOS USE MODE_SURF_SNOW_FRAC ! USE MODI_SNOW_COVER_1LAYER USE MODI_URBAN_DRAG USE MODI_URBAN_SNOW_EVOL USE MODI_ROOF_LAYER_E_BUDGET USE MODI_ROAD_LAYER_E_BUDGET USE MODI_FACADE_E_BUDGET USE MODI_URBAN_FLUXES USE MODI_URBAN_HYDRO USE MODI_BLD_E_BUDGET USE MODI_WIND_THRESHOLD USE MODI_BEM USE MODI_TEB_IRRIG ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_OPTIONS_t ), INTENT ( INOUT ) :: BOP TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT ! CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option !                                                     ! 'OLD' = direct !                                                     ! 'NEW' = Taylor serie, order 1 REAL , DIMENSION (:), INTENT ( IN ) :: PTSUN ! solar time   (s from midnight) REAL , DIMENSION (:), INTENT ( INOUT ) :: PT_CANYON ! canyon air temperature REAL , DIMENSION (:), INTENT ( INOUT ) :: PQ_CANYON ! canyon air specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PU_CANYON ! canyon hor. wind REAL , DIMENSION (:), INTENT ( IN ) :: PU_LOWCAN ! wind near the road REAL , DIMENSION (:), INTENT ( IN ) :: PT_LOWCAN ! temp. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PQ_LOWCAN ! hum. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PZ_LOWCAN ! height of atm. var. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_A_COEF_LOWCAN ! implicit coefficients for wind coupling REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_B_COEF_LOWCAN ! between low canyon wind and road REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PPA ! pressure at the first atmospheric level REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PH_TRAFFIC ! anthropogenic sensible !                                                  ! heat fluxes due to traffic REAL , DIMENSION (:), INTENT ( IN ) :: PLE_TRAFFIC ! anthropogenic latent !                                                  ! heat fluxes due to traffic REAL , DIMENSION (:), INTENT ( IN ) :: PEXNA ! exner function ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:), INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first ! atmospheric level (temperature) REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the first ! atmospheric level (wind) REAL , INTENT ( IN ) :: PTSTEP ! time step ! REAL , DIMENSION (:), INTENT ( INOUT ) :: PDF_RF ! snow-free    fraction on roofs REAL , DIMENSION (:), INTENT ( INOUT ) :: PDN_RF ! snow-covered fraction on roofs REAL , DIMENSION (:), INTENT ( INOUT ) :: PDF_RD ! snow-free    fraction on roads REAL , DIMENSION (:), INTENT ( INOUT ) :: PDN_RD ! snow-covered fraction on roads REAL , DIMENSION (:), INTENT ( OUT ) :: PQSAT_RF ! hum at saturation over roof REAL , DIMENSION (:), INTENT ( OUT ) :: PQSAT_RD ! hum at saturation over road REAL , DIMENSION (:), INTENT ( OUT ) :: PDELT_RF ! water fraction on roof REAL , DIMENSION (:), INTENT ( OUT ) :: PDELT_RD ! water fraction on road ! REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GARDEN ! GARDEN area surf temp. ! greenroof REAL , DIMENSION (:), INTENT ( OUT ) :: PLEW_RF ! latent heat flux over roof (snow) REAL , DIMENSION (:), INTENT ( OUT ) :: PLEW_RD ! latent heat flux over road (snow) REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_WL_A ! latent heat flux over wall REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_WL_B ! latent heat flux over wall ! REAL , DIMENSION (:), INTENT ( IN ) :: PUW_GR ! Momentum flux for greenroofs ! REAL , DIMENSION (:), INTENT ( OUT ) :: PRNSN_RF ! net radiation over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PHSN_RF ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PLESN_RF ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PGSN_RF ! flux under the snow REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT_RF ! snow melt REAL , DIMENSION (:), INTENT ( OUT ) :: PRNSN_RD ! net radiation over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PHSN_RD ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PLESN_RD ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PGSN_RD ! flux under the snow REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT_RD ! snow melt ! REAL , DIMENSION (:), INTENT ( OUT ) :: PUW_RD ! Momentum flux for roads REAL , DIMENSION (:), INTENT ( OUT ) :: PUW_RF ! Momentum flux for roofs REAL , DIMENSION (:), INTENT ( OUT ) :: PDUWDU_RD ! REAL , DIMENSION (:), INTENT ( OUT ) :: PDUWDU_RF ! REAL , DIMENSION (:), INTENT ( OUT ) :: PUSTAR_TWN ! friciton velocity over town ! REAL , DIMENSION (:), INTENT ( IN ) :: PRN_GR ! net radiation over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PH_GR ! sensible heat flux over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PLE_GR ! latent heat flux over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PGFLUX_GR ! flux through the greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PRUNOFF_GR ! runoff over green roofs REAL , DIMENSION (:), INTENT ( IN ) :: PDRAIN_GR ! outlet drainage at base of green roofs ! REAL , DIMENSION (:), INTENT ( OUT ) :: PCD ! town averaged drag coefficient REAL , DIMENSION (:), INTENT ( OUT ) :: PCDN ! town averaged neutral drag coefficient REAL , DIMENSION (:), INTENT ( OUT ) :: PCH_TWN ! town averaged heat transfer !                                                 ! coefficient REAL , DIMENSION (:), INTENT ( OUT ) :: PRI_TWN ! town averaged Richardson number REAL , DIMENSION (:), INTENT ( OUT ) :: PRESA_TWN ! town aerodynamical resistance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_RF ! roof conductance REAL , DIMENSION (:), INTENT ( INOUT ) :: PAC_RD ! road conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_WL ! wall conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_TOP ! top conductance REAL , DIMENSION (:), INTENT ( IN ) :: PAC_GARDEN ! garden conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_RF_WAT ! roof water conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_RD_WAT ! roof water conductance ! REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_WB ! LW contrib. wall A (orB) -> wall B (or A) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_R ! LW contrib. wall       -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_R ! LW contrib. wall       -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_NR ! LW contrib. wall       -> road(snow) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_NR ! LW contrib. wall       -> road(snow) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WA ! LW contrib. road       -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WB ! LW contrib. road       -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WA ! LW contrib. GARDEN     -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WB ! LW contrib. GARDEN     -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WA ! LW contrib. road(snow) -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WB ! LW contrib. road(snow) -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WA ! LW contrib. sky        -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WB ! LW contrib. sky        -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_R ! LW contrib. sky        -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_NR ! LW contrib. sky        -> road(snow) ! ! new arguments after BEM ! INTEGER , INTENT ( IN ) :: KDAY ! Simulation day REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_WIN ! Radiative heat trasfer coeff wall-window ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_WIN ! Radiative heat trasfer coeff wall-window ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WIN ! Radiative heat trasfer coeff garden-window ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WIN ! Radiative heat trasfer coeff road-window ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WIN ! Radiative heat trasfer coeff window-sky ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_WA ! Radiative heat trasfer coeff window-wall ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_WB ! Radiative heat trasfer coeff window-wall ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_R ! Radiative heat trasfer coeff window-road ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WIN ! Radiative heat trasfer coeff road(snow)-win ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_NR ! Radiative heat trasfer coeff win-road(snow) ! [W K-1 m-2] !new argument for PET calculation REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_RD ! LW fluxes emitted by road (W/m2 surf road) REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_FAC ! LW fluxes emitted by wall (W/m2 surf wall) REAL , DIMENSION (:), INTENT ( OUT ) :: PT_RAD_IND ! Indoor mean radiant temperature [K] REAL , DIMENSION (:), INTENT ( OUT ) :: PHU_BLD ! Indoor relative humidity 0 < (-) < 1 REAL , INTENT ( IN ) :: PTIME ! current time since midnight (UTC, s) REAL , DIMENSION (:), INTENT ( IN ) :: PE_SHADING !energy not ref., nor absorbed, nor !trans. by glazing [Wm-2(win)] ! !*      0.2    Declarations of local variables ! REAL , DIMENSION ( SIZE ( PTA )) :: ZVMOD ! wind REAL , DIMENSION ( SIZE ( PTA )) :: ZWS_RF_MAX ! maximum deepness of roof REAL , DIMENSION ( SIZE ( PTA )) :: ZWS_RD_MAX ! and road water reservoirs ! REAL , DIMENSION ( SIZE ( PTA )) :: ZAC_BLD ! surface conductance inside the building itself in DEF building model REAL , DIMENSION ( SIZE ( PTA )) :: ZTA ! air temperature extrapolated at roof level REAL , DIMENSION ( SIZE ( PTA )) :: ZQA ! air humidity extrapolated at roof level ! REAL , DIMENSION ( SIZE ( PTA )) :: ZDQS_RD ! heat storage inside road REAL , DIMENSION ( SIZE ( PTA )) :: ZDQS_RF ! heat storage inside roof REAL , DIMENSION ( SIZE ( PTA )) :: ZDQS_WL_A ! heat storage inside wall REAL , DIMENSION ( SIZE ( PTA )) :: ZDQS_WL_B ! heat storage inside wall REAL , DIMENSION ( SIZE ( PTA )) :: ZFLX_BLD_RF !heat flux from inside through roof REAL , DIMENSION ( SIZE ( PTA )) :: ZFLX_BLD_WL_A !heat flux from inside through wall REAL , DIMENSION ( SIZE ( PTA )) :: ZFLX_BLD_WL_B !heat flux from inside through wall REAL , DIMENSION ( SIZE ( PTA )) :: ZFLX_BLD_FL !heat flux from inside through floor REAL , DIMENSION ( SIZE ( PTA )) :: ZFLX_BLD_MA !heat flux from inside through mass ! REAL , DIMENSION ( SIZE ( PTA )) :: ZDQS_SN_RF ! heat storage inside roof snowpack REAL , DIMENSION ( SIZE ( PTA )) :: ZDQS_SN_RD ! heat storage inside road snowpack REAL , DIMENSION ( SIZE ( PTA )) :: ZMELT_BLT ! Snow melt for built & impervious part ! ! coefficients for LW computations over snow (from previous time-step) ! REAL , DIMENSION ( SIZE ( PTA )) :: ZTSSN_RD ! road snow temperature !                                          ! at previous time-step ! new local variables after BEM ! REAL , DIMENSION ( SIZE ( PTA )) :: ZIMB_RF ! residual energy imbalance ! of the roof for ! verification REAL , DIMENSION ( SIZE ( PTA )) :: ZIMB_RD ! road residual energy imbalance ! for verification [W m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZIMB_WL ! wall residual energy imbalance ! for verification [W m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_RD ! road surface temperature !                                            ! at previous time-step REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_WL_A ! wall A surface temperature !                                            ! at previous time-step REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_WL_B ! wall B surface temperature !                                            ! at previous time-step REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_WL ! averaged wall surface temperature !                                            ! at previous time-step REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_RF ! roof surface temperature !                                            ! at previous time-step REAL , DIMENSION ( SIZE ( PTA ), SIZE ( T % XT_WALL_A , 2 )) :: ZT_WL ! averaged wall surface temperature ! INTEGER :: IWL , IRF ! number of wall, roof layer REAL , DIMENSION ( SIZE ( PTA )) :: ZRADHT_IN ! Indoor radiant heat transfer coefficient ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_FL ! floor surface temperature [K] REAL , DIMENSION ( SIZE ( PTA )) :: ZRAD_RF_WL ! rad. flux from roof to averaged wall [W m-2(roof)] REAL , DIMENSION ( SIZE ( PTA )) :: ZRAD_RF_WIN ! rad. flux from roof to window [W m-2(roof)] REAL , DIMENSION ( SIZE ( PTA )) :: ZRAD_RF_FL ! rad. flux from roof to floor [W m-2(roof)] REAL , DIMENSION ( SIZE ( PTA )) :: ZRAD_RF_MA ! rad. flux from roof to mass [W m-2(roof)] REAL , DIMENSION ( SIZE ( PTA )) :: ZCONV_RF_BLD ! rad. flux from roof to bld [W m-2(roof)] REAL , DIMENSION ( SIZE ( PTA )) :: ZRAD_WL_FL ! rad. flux from averaged wall to floor [W m-2(wall)] REAL , DIMENSION ( SIZE ( PTA )) :: ZRAD_WL_MA ! rad. flux from averaged wall to mass [W m-2(wall)] REAL , DIMENSION ( SIZE ( PTA )) :: ZRAD_WIN_FL ! rad. flux from averaged wall to floor [W m-2(win)] REAL , DIMENSION ( SIZE ( PTA )) :: ZRAD_WIN_MA ! rad. flux from averaged wall to mass [W m-2(win)] REAL , DIMENSION ( SIZE ( PTA )) :: ZCONV_WL_BLD ! rad. flux from roof to bld [W m-2(wall)] REAL , DIMENSION ( SIZE ( PTA )) :: ZCONV_WIN_BLD ! rad. flux from roof to bld [W m-2(win)] REAL , DIMENSION ( SIZE ( PTA )) :: ZAC_WIN ! window aerodynamic conductance REAL , DIMENSION ( SIZE ( PTA )) :: ZLOAD_IN_RF ! indoor load on roof W/m2[roof] REAL , DIMENSION ( SIZE ( PTA )) :: ZLOAD_IN_FL ! indoor load on floor W/m2[floor] REAL , DIMENSION ( SIZE ( PTA )) :: ZLOAD_IN_WL ! indoor load on wall W/m2[wall] REAL , DIMENSION ( SIZE ( PTA )) :: ZLOAD_IN_WIN ! indoor load on win W/m2[win] REAL , DIMENSION ( SIZE ( PTA )) :: ZLOAD_IN_MA ! indoor load on mass W/m2[mass] ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'TEB' , 0 , ZHOOK_HANDLE ) ! !*      1.     Initializations !              --------------- ! !*      1.1    Water reservoirs !              ---------------- ! ZWS_RF_MAX = 1. ! (1mm) maximum deepness of roof water reservoir ZWS_RD_MAX = 1. ! (1mm) maximum deepness of road water reservoir ! !*      1.2    radiative snow variables at previous time-step !              ---------------------------------------------- ! ZTSSN_RD (:) = T % TSNOW_ROAD % TS (:) ! ! !*      1.3    indoor aerodynamique conductance for DEF case !              ---------------------------------------------- ! ZAC_BLD (:) = XUNDEF IF ( TOP % CBEM == 'DEF' ) ZAC_BLD = 1. / 0.123 / ( XCPD * PRHOA (:)) !* (normalized by rho Cp for convenience) !------------------------------------------------------------------------------- ! !*      1.3    number of roof/wall layer !              ------------------------- ! IWL = SIZE ( T % XT_WALL_A , 2 ) IRF = SIZE ( T % XT_ROOF , 2 ) ! ZTS_WL_A (:) = T % XT_WALL_A (:, 1 ) ZTS_WL_B (:) = T % XT_WALL_B (:, 1 ) ZTS_WL (:) = 0.5 * ( ZTS_WL_A (:) + ZTS_WL_B (:)) ZTS_RD (:) = T % XT_ROAD (:, 1 ) ZTS_RF (:) = T % XT_ROOF (:, 1 ) ! ! !*      1.4    load on indoor walls !              ------------------------- ! IF ( TOP % CBEM == 'BEM' ) THEN ! ZLOAD_IN_RF = B % XF_FLOOR_WIN * DMT % XTR_SW_WIN + DMT % XQIN * B % XN_FLOOR * ( 1 - B % XQIN_FLAT ) * B % XQIN_FRAD & / ( 2 + T % XWALL_O_BLD + B % XGLAZ_O_BLD + B % XMASS_O_BLD ) ! W/mnow-covered surfaces relative effects !              -------------------------------------- ! !*      2.1    Effects on water reservoirs !              --------------------------- ! ZWS_RF_MAX (:) = ZWS_RF_MAX (:) * PDF_RF (:) ZWS_RD_MAX (:) = ZWS_RD_MAX (:) * PDF_RD (:) ! !------------------------------------------------------------------------------- ! !*      3.     Surface drag !              ------------ ! CALL URBAN_DRAG ( TOP , T , B , HIMPLICIT_WIND , PTSTEP , PT_CANYON , PQ_CANYON , & PU_CANYON , PT_LOWCAN , PQ_LOWCAN , PU_LOWCAN , PZ_LOWCAN , & ZTS_RF , ZTS_RD , ZTS_WL , PTS_GARDEN , PDN_RF , PDN_RD , & PEXNS , PEXNA , PTA , PQA , PPS , PRHOA , PZREF , PUREF , & PVMOD , ZWS_RF_MAX , ZWS_RD_MAX , PPEW_A_COEF , & PPEW_B_COEF , PPEW_A_COEF_LOWCAN , PPEW_B_COEF_LOWCAN , & PQSAT_RF , PQSAT_RD , PDELT_RF , PDELT_RD , PCD , PCDN , & PAC_RF , PAC_RF_WAT , PAC_WL , PAC_RD , PAC_RD_WAT , & PAC_TOP , PAC_GARDEN , PRI_TWN , PUW_RD , PUW_RF , & PDUWDU_RD , PDUWDU_RF , PUSTAR_TWN , ZAC_WIN ) ! !* area-averaged heat transfer coefficient ! ZVMOD (:) = WIND_THRESHOLD ( PVMOD (:), PUREF (:)) ! PCH_TWN (:) = ( T % XBLD (:) * PAC_RF (:) + ( 1. - T % XBLD (:)) * PAC_TOP (:)) / ZVMOD (:) ! !* aggregation of momentum fluxes for roofs (=> derivate of flux also recalculated) ! PUW_RF (:) = ( 1 - T % XGREENROOF (:)) * PUW_RF (:) + T % XGREENROOF (:) * PUW_GR (:) WHERE ( PVMOD (:) /= 0. ) PDUWDU_RF (:) = 2. * PUW_RF (:) / PVMOD (:) ! !------------------------------------------------------------------------------- ! !*      4.     Extrapolation of atmospheric T and q at roof level (for fluxes computation) !              -------------------------------------------------- ! ZTA (:) = PTA (:) * PEXNS (:) / PEXNA (:) ZQA (:) = PQA (:) * QSAT ( PTA (:), PPS (:)) / QSAT ( ZTA (:), PPA (:)) ! !------------------------------------------------------------------------------- ! !*      5.     Snow mantel model !              ----------------- ! CALL URBAN_SNOW_EVOL ( T , B , PT_LOWCAN , PQ_LOWCAN , PU_LOWCAN , ZTS_RF , ZTS_RD , ZTS_WL_A , & ZTS_WL_B , PPS , ZTA , ZQA , PRHOA , PLW_RAD , PSR , PZREF , PUREF , PVMOD , & PTSTEP , PZ_LOWCAN , PDN_RF , DMT % XABS_SW_SNOW_ROOF , & DMT % XABS_LW_SNOW_ROOF , PDN_RD , DMT % XABS_SW_SNOW_ROAD , & DMT % XABS_LW_SNOW_ROAD , PRNSN_RF , PHSN_RF , PLESN_RF , PGSN_RF , & PMELT_RF , PRNSN_RD , PHSN_RD , PLESN_RD , PGSN_RD , PMELT_RD , & PLW_WA_TO_NR , PLW_WB_TO_NR , PLW_S_TO_NR , PLW_WIN_TO_NR , ZDQS_SN_RF , & ZDQS_SN_RD ) ! !------------------------------------------------------------------------------- ! !*      6.    LW properties !              ------------- ! PDF_RD (:) = 1. - PDN_RD (:) ! !------------------------------------------------------------------------------- ! !*      7.    Indoor radiative temperature !              --------------------------- ! ! uses the averaged temperature of both walls for the building energy balance ZT_WL (:,:) = 0.5 * ( T % XT_WALL_A (:,:) + T % XT_WALL_B (:,:)) ! SELECT CASE ( TOP % CBEM ) CASE ( \"DEF\" ) ZTS_FL (:) = 1 9. + XTT PT_RAD_IND (:) = ( T % XWALL_O_HOR (:) / T % XBLD (:) * ZT_WL (:, IWL ) + & T % XT_ROOF (:, IRF ) + ZTS_FL (:) ) / ( T % XWALL_O_HOR (:) / T % XBLD (:) + 1. + 1. ) ZRADHT_IN (:) = XUNDEF CASE ( \"BEM\" ) ZTS_FL (:) = B % XT_FLOOR (:, 1 ) PT_RAD_IND (:) = ( B % XT_MASS (:, 1 ) * B % XMASS_O_BLD (:) + ZT_WL (:, IWL ) * T % XWALL_O_BLD (:) & + ZTS_FL (:) + T % XT_ROOF (:, IRF ) + B % XT_WIN2 (:) * B % XGLAZ_O_BLD (:)) & / ( B % XMASS_O_BLD (:) + T % XWALL_O_BLD (:) + 1. + 1. + B % XGLAZ_O_BLD (:)) !             Assuming indoor surface emissivities of 0.9 ZRADHT_IN (:) = 0.9 * 0.9 * 4 * XSTEFAN * PT_RAD_IND (:) ** 3 END SELECT ! ! !*      7.    Roof Ts computation !              ------------------- ! !* ts_roof and qsat_roof are updated ! CALL ROOF_LAYER_E_BUDGET ( TOP , T , B , PQSAT_RF , ZAC_BLD , PTSTEP , PDN_RF , PRHOA , & PAC_RF , PAC_RF_WAT , PLW_RAD , PPS , PDELT_RF , ZTA , ZQA , & PEXNA , PEXNS , DMT % XABS_SW_ROOF , PGSN_RF , ZFLX_BLD_RF , & ZDQS_RF , DMT % XABS_LW_ROOF , DMT % XH_ROOF , PLEW_RF , ZIMB_RF , & DMT % XG_GREENROOF_ROOF , ZRADHT_IN , ZTS_FL , ZT_WL (:, IWL ),& ZRAD_RF_WL , ZRAD_RF_WIN , ZRAD_RF_FL , ZRAD_RF_MA , ZCONV_RF_BLD , & PRR , & !modif to add heating/cooling of rain ZLOAD_IN_RF ) ! !------------------------------------------------------------------------------- ! !*      8.    Road Ts computations !              ----------------------------- ! !* Road watering CALL TEB_IRRIG ( TIR % LPAR_RD_IRRIG , PTSTEP , TOP % TTIME % TDATE % MONTH , PTSUN , & TIR % XRD_START_MONTH , TIR % XRD_END_MONTH , TIR % XRD_START_HOUR , & TIR % XRD_END_HOUR , TIR % XRD_24H_IRRIG , DMT % XIRRIG_ROAD ) !* ts_road, ts_wall, qsat_road, t_canyon and q_canyon are updated ! CALL ROAD_LAYER_E_BUDGET ( T , B , PTSTEP , PDN_RD , PRHOA , PAC_RD , PAC_RD_WAT , & PLW_RAD , PPS , PQSAT_RD , PDELT_RD , PEXNS , & DMT % XABS_SW_ROAD , PGSN_RD , PQ_LOWCAN , PT_LOWCAN ,& ZTS_WL_A , ZTS_WL_B , ZTSSN_RD , PTS_GARDEN , & PLW_WA_TO_R , PLW_WB_TO_R , PLW_S_TO_R , & PLW_WIN_TO_R , PEMIT_LW_RD , ZDQS_RD , DMT % XABS_LW_ROAD , & DMT % XH_ROAD , PLEW_RD , ZIMB_RD , PRR + DMT % XIRRIG_ROAD ) ! !------------------------------------------------------------------------------- ! !*      8.     Wall Ts computations !              ----------------------------- ! CALL FACADE_E_BUDGET ( TOP , T , B , DMT , PTSTEP , PDN_RD , PRHOA , PAC_WL , ZAC_BLD , & PLW_RAD , PPS , PEXNS , PT_CANYON , ZTS_RD , ZTSSN_RD , PTS_GARDEN , & ZTS_FL , PLW_WA_TO_WB , PLW_R_TO_WA , PLW_R_TO_WB , & PLW_G_TO_WA , PLW_G_TO_WB , PLW_S_TO_WA , PLW_S_TO_WB , & PLW_NR_TO_WA , PLW_NR_TO_WB , PLW_WIN_TO_WA , & PLW_WIN_TO_WB , PLW_S_TO_WIN , PLW_WA_TO_WIN , & PLW_WB_TO_WIN , PLW_R_TO_WIN , PLW_G_TO_WIN , & PLW_NR_TO_WIN , ZFLX_BLD_WL_A , ZDQS_WL_A , & ZFLX_BLD_WL_B , ZDQS_WL_B , PEMIT_LW_FAC , ZIMB_WL , & ZRADHT_IN , ZRAD_RF_WL , ZRAD_RF_WIN , ZRAD_WL_FL , & ZRAD_WL_MA , ZRAD_WIN_FL , ZRAD_WIN_MA , ZCONV_WL_BLD , & ZCONV_WIN_BLD , ZAC_WIN , ZLOAD_IN_WL , ZLOAD_IN_WIN ) ! !------------------------------------------------------------------------------- ! !*      9.     Evolution of interior building air temperature !              ---------------------------------------------- ! ! uses the averaged temperature of both walls for the building energy balance ZT_WL (:,:) = 0.5 * ( T % XT_WALL_A (:,:) + T % XT_WALL_B (:,:)) ! SELECT CASE ( TOP % CBEM ) CASE ( \"DEF\" ) ! CALL BLD_E_BUDGET (. TRUE ., PTSTEP , T % XBLD , T % XWALL_O_HOR , & PRHOA , T % XT_ROOF , ZT_WL , B % XTI_BLD , ZTS_FL (:) ) !variables that needs to be computed apart B % XQI_BLD = 0.5 * QSAT ( B % XTI_BLD , PPS ) !variables that need to be set 0 for calculation ZFLX_BLD_FL (:) = 0. ZFLX_BLD_MA (:) = 0. !other variables PHU_BLD (:) = XUNDEF CASE ( \"BEM\" ) CALL BEM ( BOP , T , B , DMT , PTSTEP , PTSUN , KDAY , PPS , PRHOA , PT_CANYON , & PQ_CANYON , PU_CANYON , PHU_BLD , PT_RAD_IND , ZFLX_BLD_FL ,& ZFLX_BLD_MA , ZRADHT_IN , ZRAD_RF_MA , ZRAD_RF_FL , & ZRAD_WL_MA , ZRAD_WL_FL , ZRAD_WIN_MA , ZRAD_WIN_FL , & ZCONV_RF_BLD , ZCONV_WL_BLD , ZCONV_WIN_BLD , ZLOAD_IN_FL ,& ZLOAD_IN_MA ) DMT % XH_WASTE = DMT % XH_WASTE * T % XBLD DMT % XLE_WASTE = DMT % XLE_WASTE * T % XBLD END SELECT ! !------------------------------------------------------------------------------- ! !*      10.    Fluxes over built surfaces !              -------------------------- ! CALL URBAN_FLUXES ( TOP , T , B , DMT , HIMPLICIT_WIND , PT_CANYON , PPEW_A_COEF , PPEW_B_COEF , & PEXNS , PRHOA , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , PAC_WL , PCD , PDF_RF , & PDN_RF , PDF_RD , PDN_RD , PRNSN_RF , PHSN_RF , PLESN_RF , PGSN_RF , & PRNSN_RD , PHSN_RD , PLESN_RD , PGSN_RD , PMELT_RF , ZDQS_RF , PMELT_RD , & ZDQS_RD , ZDQS_WL_A , ZDQS_WL_B , ZFLX_BLD_RF , ZFLX_BLD_WL_A , & ZFLX_BLD_WL_B , ZFLX_BLD_FL , ZFLX_BLD_MA , PE_SHADING , PLEW_RF , & PRN_GR , PH_GR , PLE_GR , PGFLUX_GR , & PLEW_RD , PLE_WL_A , PLE_WL_B , ZMELT_BLT , PUSTAR_TWN ) ! ! ! Water transfer from snow reservoir to water reservoir in case of snow melt ! WHERE ( PMELT_RF (:) . GT . 0. ) T % XWS_ROOF (:) = MIN ( ZWS_RF_MAX , T % XWS_ROOF (:) + PMELT_RF (:) * PTSTEP ) ENDWHERE ! WHERE ( PMELT_RD (:) . GT . 0. ) T % XWS_ROAD (:) = MIN ( ZWS_RD_MAX , T % XWS_ROAD (:) + PMELT_RD (:) * PTSTEP ) ENDWHERE ! !------------------------------------------------------------------------------- ! !*      11.    Roof ans road reservoirs evolution !              ---------------------------------- ! CALL URBAN_HYDRO ( ZWS_RF_MAX , ZWS_RD_MAX , T % XWS_ROOF , T % XWS_ROAD , PRR , & DMT % XIRRIG_ROAD , PTSTEP , T % XBLD , DMT % XLE_ROOF , DMT % XLE_ROAD , & DMT % XRUNOFF_STRLROOF , DMT % XRUNOFF_ROAD ) ! IF ( TOP % LGREENROOF ) THEN DMT % XRUNOFF_ROOF (:) = ( 1. - T % XGREENROOF (:)) * DMT % XRUNOFF_STRLROOF (:) & + T % XGREENROOF (:) * ( PRUNOFF_GR (:) + PDRAIN_GR (:)) ELSE DMT % XRUNOFF_ROOF (:) = DMT % XRUNOFF_STRLROOF (:) ENDIF ! !------------------------------------------------------------------------------- ! !*      19.    Compute aerodynamical resistance !              -------------------------------- ! PRESA_TWN (:) = 1. / ( T % XBLD (:) * PAC_RF (:) + ( 1. - T % XBLD (:)) * PAC_TOP (:)) ! IF ( LHOOK ) CALL DR_HOOK ( 'TEB' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END SUBROUTINE TEB","tags":"","loc":"sourcefile/teb.f90.html"},{"title":"spll_modi_window_shading.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_WINDOW_SHADING Source Code spll_modi_window_shading.f90 Source Code !auto_modi:spll_window_shading.D MODULE MODI_WINDOW_SHADING INTERFACE SUBROUTINE WINDOW_SHADING ( PSHGC , PSHGC_SH , O_SHADE , PALB_WALL , & PABS_WIN , PABS_WINSH , PALB_WIN , PTRAN_WIN ) REAL , DIMENSION (:), INTENT ( IN ) :: PSHGC !Window solar heat gain coefficient REAL , DIMENSION (:), INTENT ( IN ) :: PSHGC_SH !Window + shading solar heat gain coefficient LOGICAL , DIMENSION (:), INTENT ( IN ) :: O_SHADE !use of shadings TRUE -> shadings ; REAL , DIMENSION (:), INTENT ( IN ) :: PALB_WALL !albedo of the wall REAL , DIMENSION (:), INTENT ( IN ) :: PABS_WIN !Window absorptivity REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_WINSH !Window absorptivity after shading REAL , DIMENSION (:), INTENT ( OUT ) :: PALB_WIN !Albedo of the ensemble window + shading REAL , DIMENSION (:), INTENT ( INOUT ) :: PTRAN_WIN !Window transmitivity END SUBROUTINE WINDOW_SHADING END INTERFACE END MODULE MODI_WINDOW_SHADING","tags":"","loc":"sourcefile/spll_modi_window_shading.f90.html"},{"title":"modd_gr_biogn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_GR_BIOG_n Source Code modd_gr_biogn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ##################### MODULE MODD_GR_BIOG_n !     ###################### ! !! !!!!****  *MODD_GR_BIOG_n* - Declaration of variables for biogenic emissions ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !!    AUTHOR !!    ------ !!      F. Solmon  *LA* !! !!    MODIFICATIONS !!    ------------- !!    P. Tulet  30/07/03 externalisation of biogenics fluxes !! !*       0.   DECLARATIONS !             ---------- ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE GR_BIOG_t ! ! ! !* Emission potential for isoprene and monoterpenes REAL , DIMENSION (:), POINTER :: XISOPOT REAL , DIMENSION (:), POINTER :: XMONOPOT ! !* Radiation at different level(cf Gauss) in the canopy REAL , DIMENSION (:,:), POINTER :: XIACAN ! PAR at 3 gauss level for each patch ! !* XFISO  = isoprene emission flux (ppp.m.s-1) !  XFMONO = monoterpenes emission flux (ppp m s-1) REAL , DIMENSION (:), POINTER :: XFISO , XFMONO !SOILNOX REAL , DIMENSION (:), POINTER :: XNOFLUX ! ! END TYPE GR_BIOG_t ! TYPE GR_BIOG_NP_t ! TYPE ( GR_BIOG_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE GR_BIOG_NP_t ! CONTAINS ! SUBROUTINE GR_BIOG_INIT ( YGR_BIOG ) TYPE ( GR_BIOG_t ), INTENT ( INOUT ) :: YGR_BIOG REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_GR_BIOG_N:GR_BIOG_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YGR_BIOG % XISOPOT ) NULLIFY ( YGR_BIOG % XMONOPOT ) NULLIFY ( YGR_BIOG % XIACAN ) NULLIFY ( YGR_BIOG % XFISO ) NULLIFY ( YGR_BIOG % XFMONO ) NULLIFY ( YGR_BIOG % XNOFLUX ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_GR_BIOG_N:GR_BIOG_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE GR_BIOG_INIT SUBROUTINE GR_BIOG_NP_INIT ( YGR_BIOG_NP , KPATCH ) TYPE ( GR_BIOG_NP_t ), INTENT ( INOUT ) :: YGR_BIOG_NP INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_GR_BIOG_N:GR_BIOG_NP_INIT\" , 0 , ZHOOK_HANDLE ) ! IF ( ASSOCIATED ( YGR_BIOG_NP % AL )) THEN DO JP = 1 , KPATCH CALL GR_BIOG_INIT ( YGR_BIOG_NP % AL ( JP )) ENDDO DEALLOCATE ( YGR_BIOG_NP % AL ) ELSE ALLOCATE ( YGR_BIOG_NP % AL ( KPATCH )) DO JP = 1 , KPATCH CALL GR_BIOG_INIT ( YGR_BIOG_NP % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_GR_BIOG_N:GR_BIOG_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE GR_BIOG_NP_INIT ! END MODULE MODD_GR_BIOG_n","tags":"","loc":"sourcefile/modd_gr_biogn.f90.html"},{"title":"spll_modi_urban_hydro.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_URBAN_HYDRO Source Code spll_modi_urban_hydro.f90 Source Code !auto_modi:spll_urban_hydro.D MODULE MODI_URBAN_HYDRO INTERFACE SUBROUTINE URBAN_HYDRO ( PWS_ROOF_MAX , PWS_ROAD_MAX , PWS_ROOF , PWS_ROAD , & PRR , PIRRIG_ROAD , PTSTEP , PBLD , PLE_ROOF , & PLE_ROAD , PRUNOFF_STRLROOF , PRUNOFF_ROAD ) IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PWS_ROOF_MAX ! maximum deepness of roof water reservoir REAL , DIMENSION (:), INTENT ( IN ) :: PWS_ROAD_MAX ! maximum deepness of road water reservoir REAL , DIMENSION (:), INTENT ( INOUT ) :: PWS_ROOF ! roof water reservoir REAL , DIMENSION (:), INTENT ( INOUT ) :: PWS_ROAD ! road water reservoir REAL , DIMENSION (:), INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:), INTENT ( IN ) :: PIRRIG_ROAD ! watering rate for roads REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PBLD ! fraction of buildings REAL , DIMENSION (:), INTENT ( IN ) :: PLE_ROOF ! latent heat flux over roof REAL , DIMENSION (:), INTENT ( IN ) :: PLE_ROAD ! latent heat flux over road REAL , DIMENSION (:), INTENT ( OUT ) :: PRUNOFF_STRLROOF ! runoff (kg/m2/s) REAL , DIMENSION (:), INTENT ( OUT ) :: PRUNOFF_ROAD ! runoff (kg/m2/s) END SUBROUTINE URBAN_HYDRO END INTERFACE END MODULE MODI_URBAN_HYDRO","tags":"","loc":"sourcefile/spll_modi_urban_hydro.f90.html"},{"title":"modd_watfluxn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_WATFLUX_n Source Code modd_watfluxn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     #################### MODULE MODD_WATFLUX_n !     #################### ! !!****  *MODD_WATFLUX_n - declaration of surface parameters for an inland water surface !! !!    PURPOSE !!    ------- !     Declaration of surface parameters ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Masson  *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       01/2004 ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_TYPE_DATE_SURF ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE WATFLUX_t ! ! General surface: ! REAL , POINTER , DIMENSION (:) :: XZS ! orography                     (m) REAL , POINTER , DIMENSION (:,:) :: XCOVER ! fraction of each ecosystem    (-) LOGICAL , POINTER , DIMENSION (:) :: LCOVER ! GCOVER(i)=T --> ith cover field is not 0. LOGICAL :: LSBL ! T: SBL scheme within the Surface Boundary Layer !                                          ! F: no atmospheric layers below forcing level CHARACTER ( LEN = 4 ) :: CWAT_ALB ! type of albedo ! LOGICAL :: LINTERPOL_TS ! Interpotalation of monthly TS CHARACTER ( LEN = 6 ) :: CINTERPOL_TS ! Interpotalation of monthly TS ! ! Inland water: ! REAL , POINTER , DIMENSION (:) :: XTS ! water surface temperature               (K) REAL , POINTER , DIMENSION (:) :: XTICE ! water ice temperature REAL , POINTER , DIMENSION (:) :: XZ0 ! water surface roughness length          (-) REAL , POINTER , DIMENSION (:) :: XEMIS ! water surface emissivity                (-) REAL , POINTER , DIMENSION (:) :: XDIR_ALB ! water surface direct albedo             (-) REAL , POINTER , DIMENSION (:) :: XSCA_ALB ! water surface diffuse albedo            (-) REAL , POINTER , DIMENSION (:) :: XICE_ALB ! water ice albedo (for ESM coupling)     (-) ! REAL , POINTER , DIMENSION (:,:) :: XTS_MTH ! Monthly water surface temperature               (K) ! REAL , POINTER , DIMENSION (:) :: XCPL_WATER_WIND ! 10m wind speed for ESM coupling REAL , POINTER , DIMENSION (:) :: XCPL_WATER_FWSU ! zonal wind stress for ESM coupling REAL , POINTER , DIMENSION (:) :: XCPL_WATER_FWSV ! meridian wind stress for ESM coupling REAL , POINTER , DIMENSION (:) :: XCPL_WATER_SNET ! Solar net heat flux REAL , POINTER , DIMENSION (:) :: XCPL_WATER_HEAT ! Non solar net heat flux REAL , POINTER , DIMENSION (:) :: XCPL_WATER_EVAP ! Evaporation for ESM coupling REAL , POINTER , DIMENSION (:) :: XCPL_WATER_RAIN ! Rainfall for ESM coupling REAL , POINTER , DIMENSION (:) :: XCPL_WATER_SNOW ! Snowfall for ESM coupling REAL , POINTER , DIMENSION (:) :: XCPL_WATER_FWSM ! wind stress module for ESM coupling ! REAL , POINTER , DIMENSION (:) :: XCPL_WATERICE_SNET ! solar net heat flux REAL , POINTER , DIMENSION (:) :: XCPL_WATERICE_HEAT ! Non solar net heat flux REAL , POINTER , DIMENSION (:) :: XCPL_WATERICE_EVAP ! Sublimation for ESM coupling ! ! Date: ! TYPE ( DATE_TIME ) :: TTIME ! current date and time TYPE ( DATE_TIME ) :: TZTIME ! ! Time-step: ! REAL :: XTSTEP ! time step ! REAL :: XOUT_TSTEP ! output writing time step ! ! END TYPE WATFLUX_t CONTAINS ! SUBROUTINE WATFLUX_INIT ( YWATFLUX ) TYPE ( WATFLUX_t ), INTENT ( INOUT ) :: YWATFLUX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_WATFLUX_N:WATFLUX_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YWATFLUX % XZS ) NULLIFY ( YWATFLUX % XCOVER ) NULLIFY ( YWATFLUX % LCOVER ) NULLIFY ( YWATFLUX % XTS ) NULLIFY ( YWATFLUX % XTICE ) NULLIFY ( YWATFLUX % XZ0 ) NULLIFY ( YWATFLUX % XEMIS ) NULLIFY ( YWATFLUX % XDIR_ALB ) NULLIFY ( YWATFLUX % XSCA_ALB ) NULLIFY ( YWATFLUX % XICE_ALB ) NULLIFY ( YWATFLUX % XTS_MTH ) NULLIFY ( YWATFLUX % XCPL_WATER_WIND ) NULLIFY ( YWATFLUX % XCPL_WATER_FWSU ) NULLIFY ( YWATFLUX % XCPL_WATER_FWSV ) NULLIFY ( YWATFLUX % XCPL_WATER_SNET ) NULLIFY ( YWATFLUX % XCPL_WATER_HEAT ) NULLIFY ( YWATFLUX % XCPL_WATER_EVAP ) NULLIFY ( YWATFLUX % XCPL_WATER_RAIN ) NULLIFY ( YWATFLUX % XCPL_WATER_SNOW ) NULLIFY ( YWATFLUX % XCPL_WATER_FWSM ) NULLIFY ( YWATFLUX % XCPL_WATERICE_SNET ) NULLIFY ( YWATFLUX % XCPL_WATERICE_HEAT ) NULLIFY ( YWATFLUX % XCPL_WATERICE_EVAP ) YWATFLUX % LSBL = . FALSE . YWATFLUX % CWAT_ALB = ' ' YWATFLUX % LINTERPOL_TS = . FALSE . YWATFLUX % CINTERPOL_TS = ' ' YWATFLUX % XTSTEP = 0. YWATFLUX % XOUT_TSTEP = 0. IF ( LHOOK ) CALL DR_HOOK ( \"MODD_WATFLUX_N:WATFLUX_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE WATFLUX_INIT END MODULE MODD_WATFLUX_n","tags":"","loc":"sourcefile/modd_watfluxn.f90.html"},{"title":"tridiag_ground.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines TRIDIAG_GROUND Source Code tridiag_ground.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE TRIDIAG_GROUND ( PA , PB , PC , PY , PX ) !      ######################################### ! ! !!****   *TRIDIAG_GROUND* - routine to solve a time implicit scheme !! !! !!     PURPOSE !!     ------- !        The purpose of this routine is to resolve the linear system: ! !       A.X = Y ! !      where A is a tridiagonal matrix, and X and Y two vertical vectors. !     However, the computations are performed at the same time for all !     the verticals where an inversion of the system is necessary. !     This explain the dimansion of the input variables. ! !!**   METHOD !!     ------ !! !!        Then, the classical tridiagonal algorithm is used to invert the !!     implicit operator. Its matrix is given by: !! !!     (  b(1)      c(1)      0        0        0         0        0        0  ) !!     (  a(2)      b(2)     c(2)      0  ...    0        0        0        0  ) !!     (   0        a(3)     b(3)     c(3)       0        0        0        0  ) !!      ....................................................................... !!     (   0   ...   0      a(k)      b(k)     c(k)       0   ...  0        0  ) !!      ....................................................................... !!     (   0         0        0        0        0 ...  a(n-1)   b(n-1)   c(n-1)) !!     (   0         0        0        0        0 ...     0      a(n)     b(n) ) !! !! !!       All these computations are purely vertical and vectorizations are !!     easely achieved by processing all the verticals in parallel. !! !!     EXTERNAL !!     -------- !! !!       NONE !! !!     IMPLICIT ARGUMENTS !!     ------------------ !! !!     REFERENCE !!     --------- !! !!     AUTHOR !!     ------ !!       V. Masson !! !!     MODIFICATIONS !!     ------------- !!       Original        May 13, 1998 !!       Modified : !!       B. Decharme  08/12 Loop optimization !! --------------------------------------------------------------------- ! !*       0. DECLARATIONS ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! ! !*       0.1 declarations of arguments ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PA ! lower diag. elements of A matrix REAL , DIMENSION (:,:), INTENT ( IN ) :: PB ! main  diag. elements of A matrix REAL , DIMENSION (:,:), INTENT ( IN ) :: PC ! upper diag. elements of A matrix REAL , DIMENSION (:,:), INTENT ( IN ) :: PY ! r.h.s. term ! REAL , DIMENSION (:,:), INTENT ( OUT ) :: PX ! solution of A.X = Y ! !*       0.2 declarations of local variables ! INTEGER :: JI ! number of point loop control INTEGER :: JK ! vertical loop control INTEGER :: INI ! number of point INTEGER :: INL ! number of vertical levels ! REAL , DIMENSION ( SIZE ( PA , 1 ) ) :: ZDET ! work array REAL , DIMENSION ( SIZE ( PA , 1 ), SIZE ( PA , 2 )) :: ZW ! work array REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! --------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'TRIDIAG_GROUND' , 0 , ZHOOK_HANDLE ) INI = SIZE ( PX , 1 ) INL = SIZE ( PX , 2 ) ! !*       1.  levels going up !            --------------- ! !*       1.1 first level !            ----------- ! ZDET (:) = PB (:, 1 ) PX (:, 1 ) = PY (:, 1 ) / ZDET (:) ! !*       1.2 other levels !            ------------ ! DO JK = 2 , INL DO JI = 1 , INI ZW ( JI , JK ) = PC ( JI , JK - 1 ) / ZDET ( JI ) ZDET ( JI ) = PB ( JI , JK ) - PA ( JI , JK ) * ZW ( JI , JK ) PX ( JI , JK ) = ( PY ( JI , JK ) - PA ( JI , JK ) * PX ( JI , JK - 1 ) ) / ZDET ( JI ) END DO END DO ! !------------------------------------------------------------------------------- ! !*       2.  levels going down !            ----------------- ! DO JK = INL - 1 , 1 , - 1 DO JI = 1 , INI PX ( JI , JK ) = PX ( JI , JK ) - ZW ( JI , JK + 1 ) * PX ( JI , JK + 1 ) END DO END DO IF ( LHOOK ) CALL DR_HOOK ( 'TRIDIAG_GROUND' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE TRIDIAG_GROUND","tags":"","loc":"sourcefile/tridiag_ground.f90.html"},{"title":"bld_occ_calendar.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines BLD_OCC_CALENDAR Source Code bld_occ_calendar.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !##################################################################################### SUBROUTINE BLD_OCC_CALENDAR ( TPTIME , PTSUN , T , B , PQIN_FRAC , PTCOOL_TARGET , PTHEAT_TARGET , PQIN ) !##################################################################################### !! **** BLD_OCC_CALENDAR * !! !!  PURPOSE !!  ------- !! BLD_OCC_CALENDAR defines the parameters relevant for BEM (TCOOL_TARGET, THEAT_TARGET and QIN) !! depending on the building use type (hence the DOW and local French TOD) * based on MUSCADE scenarii * !! !! AUTHOR !! ------ !! C. de Munck     *Météo-France* !! !! MODIFICATIONS !! ------------- !! Original  02/2013 ! USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t ! USE MODD_TYPE_DATE_SURF , ONLY : DATE_TIME ! USE MODD_CSTS , ONLY : XTT ! USE MODI_DAY_OF_WEEK ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !! 1. declaration of arguments ! TYPE ( DATE_TIME ), INTENT ( INOUT ) :: TPTIME REAL , DIMENSION (:) , INTENT ( IN ) :: PTSUN ! current solar time  (s, UTC) ! TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , INTENT ( IN ) :: PQIN_FRAC ! Fraction of internal gains when unoccupied (-) ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PTCOOL_TARGET ! Cooling setpoint of HVAC system [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PTHEAT_TARGET ! Heating setpoint of HVAC system [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PQIN ! Internal heat gains [W m-2(floor)] ! !! 2. declaration of local variables ! CHARACTER ( LEN = 6 ) :: CTIME ! Local time scheme (winter or summer time) INTEGER :: JDOW ! day of week INTEGER :: JJ ! REAL , DIMENSION ( SIZE ( PQIN )) :: ZTOD_BEG ! first Time Of Day that building unoccupied (UTC, s) REAL , DIMENSION ( SIZE ( PQIN )) :: ZTOD_END ! last Time Of Day that building unoccupied (UTC, s) REAL , DIMENSION ( SIZE ( PQIN )) :: ZDT ! Target temperature change when unoccupied (K) REAL ( KIND = JPRB ) :: ZTODOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'BLD_OCC_CALENDAR' , 0 , ZTODOOK_HANDLE ) ! !-------------------------------------------------------------------------------------- !  3. determine the day of the week and the local time scheme in France !-------------------------------------------------------------------------------------- ! CALL DAY_OF_WEEK ( TPTIME % TDATE % YEAR , TPTIME % TDATE % MONTH , TPTIME % TDATE % DAY , JDOW ) ! CTIME = 'WINTER' IF ( TPTIME % TDATE % MONTH >= 4 . AND . TPTIME % TDATE % MONTH <= 10 ) CTIME = 'SUMMER' ! !-------------------------------------------------------------------------------------- !  4. initialisation of parameters !-------------------------------------------------------------------------------------- ! ! Parameters assigned to the occupied values - read in namelist via BATI.csv : ! PTHEAT_TARGET (:) = B % XTHEAT_TARGET (:) ! PTCOOL_TARGET (:) = B % XTCOOL_TARGET (:) ! PQIN (:) = B % XQIN (:) ! ZTOD_BEG (:) = 0. ZTOD_END (:) = 0. ! !-------------------------------------------------------------------------------------- !  5. computes beginning and end of unoccupied calendar based on building USE TYPE !-------------------------------------------------------------------------------------- ! DO JJ = 1 , SIZE ( PTSUN ) ! IF ( T % XRESIDENTIAL ( JJ ) > 0.5 ) THEN ! RESIDENTIAL ! IF ( JDOW >= 2 . AND . JDOW <= 6 ) THEN ! week days ZTOD_BEG ( JJ ) = 9. * 360 0. !  9 UTC - WINTER time ZTOD_END ( JJ ) = 1 7. * 360 0. ! 17 UTC - WINTER time END IF ZDT ( JJ ) = T % XDT_RES ! ELSE ! IF ( JDOW >= 2 . AND . JDOW <= 7 ) THEN ! week days ZTOD_BEG ( JJ ) = 1 7. * 360 0. ! 17 UTC ZTOD_END ( JJ ) = 7. * 360 0. !  7 UTC ELSE ! week-end ZTOD_BEG ( JJ ) = 0. * 360 0. !   0 UTC ZTOD_END ( JJ ) = 2 4. * 360 0. !  24 UTC END IF ZDT ( JJ ) = T % XDT_OFF ! END IF ! adjustment of unoccupied TOD based on time scheme IF ( CTIME == 'SUMMER' ) THEN ZTOD_BEG ( JJ ) = ZTOD_BEG ( JJ ) - 360 0. ZTOD_END ( JJ ) = ZTOD_END ( JJ ) - 360 0. END IF ! ENDDO ! !-------------------------------------------------------------------------------------- !  6. modulate BEM input values for unoccupied building calendar !-------------------------------------------------------------------------------------- ! DO JJ = 1 , SIZE ( PTSUN ) ! IF (( ( ZTOD_BEG ( JJ ) < ZTOD_END ( JJ )) . AND . ( PTSUN ( JJ ) > ZTOD_BEG ( JJ ) . AND . PTSUN ( JJ ) < ZTOD_END ( JJ )) ) & . OR . & ( ( ZTOD_BEG ( JJ ) > ZTOD_END ( JJ )) . AND . (( PTSUN ( JJ ) > 0 . AND . PTSUN ( JJ ) < ZTOD_END ( JJ )) . OR . & ( PTSUN ( JJ ) > ZTOD_BEG ( JJ ) . AND . PTSUN ( JJ ) < 24 * 360 0. )))) THEN ! PTHEAT_TARGET ( JJ ) = B % XTHEAT_TARGET ( JJ ) - ZDT ( JJ ) PTCOOL_TARGET ( JJ ) = B % XTCOOL_TARGET ( JJ ) + ZDT ( JJ ) PQIN ( JJ ) = PQIN_FRAC * PQIN ( JJ ) ENDIF ! ENDDO ! !-------------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'BLD_OCC_CALENDAR' , 1 , ZTODOOK_HANDLE ) ! END SUBROUTINE BLD_OCC_CALENDAR","tags":"","loc":"sourcefile/bld_occ_calendar.f90.html"},{"title":"spll_modi_isba_properties.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_ISBA_PROPERTIES Source Code spll_modi_isba_properties.f90 Source Code !auto_modi:spll_isba_properties.D MODULE MODI_ISBA_PROPERTIES INTERFACE SUBROUTINE ISBA_PROPERTIES ( IO , PEK , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & PASNOW , PANOSNOW , PESNOW , PENOSNOW , & PTSSNOW , PTSNOSNOW , & PALBNIR_TVEG , PALBVIS_TVEG , PALBNIR_TSOIL , PALBVIS_TSOIL ) USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t USE MODD_ISBA_n , ONLY : ISBA_PE_t USE MODD_TYPE_SNOW IMPLICIT NONE TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: IO TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK REAL , DIMENSION (:,:), INTENT ( IN ) :: PDIR_SW ! direct incoming solar radiation REAL , DIMENSION (:,:), INTENT ( IN ) :: PSCA_SW ! diffus incoming solar radiation REAL , DIMENSION (:) , INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) INTEGER , INTENT ( IN ) :: KSW ! number of short-wave spectral bands REAL , DIMENSION (:) , INTENT ( OUT ) :: PASNOW ! = snow albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PANOSNOW ! = snow free albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PESNOW ! = snow emissivity REAL , DIMENSION (:) , INTENT ( OUT ) :: PENOSNOW ! = snow free emissivity REAL , DIMENSION (:) , INTENT ( OUT ) :: PTSSNOW ! = snow radiative temperature REAL , DIMENSION (:) , INTENT ( OUT ) :: PTSNOSNOW ! = snow free radiative temperature REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBNIR_TVEG ! nearIR  veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBVIS_TVEG ! visible veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBNIR_TSOIL ! nearIR  soil tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBVIS_TSOIL ! visible soil tot albedo END SUBROUTINE ISBA_PROPERTIES END INTERFACE END MODULE MODI_ISBA_PROPERTIES","tags":"","loc":"sourcefile/spll_modi_isba_properties.f90.html"},{"title":"ini_ocean_csts.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines INI_OCEAN_CSTS Source Code ini_ocean_csts.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. SUBROUTINE INI_OCEAN_CSTS !     ################## ! !!****  *INI_OCEAN_CSTS * - routine to initialize the module MODD_OCEAN_CSTS !! !!    PURPOSE !!    ------- !       The purpose of this routine is to initialize  the physical constants !     stored in  module MODD_OCEAN_CSTS. ! ! !!**  METHOD !!    ------ !!      The physical constants are set to their numerical values !! !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_OCEAN_CST     : contains physical constants !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      C. Lebeaupin Brossier       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    01/2008 !! !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_OCEAN_CSTS ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !------------------------------------------------------------------------------- ! ! !*       1.     THERMODYNAMICAL CONSTANTS OF SEAWATER !               ------------------------------------- ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'INI_OCEAN_CSTS' , 0 , ZHOOK_HANDLE ) ! XRHOSW = 102 4. XRHOSWREF = 102 4.458 XCPSW = 417 8.4 ! !*       2.     CORIOLIS FRACTION !               ----------------- XGAMA = 0.53 ! !*       3.     TURBULENCE CONSTANTS !               -------------------- XZCE = 1. / 0.7 XCKL = 0.1 ! !*       4.      RADIATION CONSTANTS !               -------------------- !from Jerlov's 1976 optical water C type I XR = 0.58 XD1 = 0.35 XD2 = 2 3. !albedo of seawater XALBEDOSW = 0.06 ! IF ( LHOOK ) CALL DR_HOOK ( 'INI_OCEAN_CSTS' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE INI_OCEAN_CSTS","tags":"","loc":"sourcefile/ini_ocean_csts.f90.html"},{"title":"spll_modi_albedo_from_nir_vis.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_ALBEDO_FROM_NIR_VIS Source Code spll_modi_albedo_from_nir_vis.f90 Source Code !auto_modi:spll_albedo_from_nir_vis.D MODULE MODI_ALBEDO_FROM_NIR_VIS INTERFACE SUBROUTINE ALBEDO_FROM_NIR_VIS ( PSW_BANDS , PALBNIR , PALBVIS , PALBUV , PDIR_ALB , PSCA_ALB ) IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) REAL , DIMENSION (:), INTENT ( IN ) :: PALBNIR ! near infra-red albedo REAL , DIMENSION (:), INTENT ( IN ) :: PALBVIS ! visible albedo REAL , DIMENSION (:), INTENT ( IN ) :: PALBUV ! UV albedo REAL , DIMENSION (:,:), INTENT ( OUT ) :: PDIR_ALB ! direct  albedo for each wavelength REAL , DIMENSION (:,:), INTENT ( OUT ) :: PSCA_ALB ! diffuse albedo for each wavelength END SUBROUTINE ALBEDO_FROM_NIR_VIS END INTERFACE END MODULE MODI_ALBEDO_FROM_NIR_VIS","tags":"","loc":"sourcefile/spll_modi_albedo_from_nir_vis.f90.html"},{"title":"spll_modi_day_of_week.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_DAY_OF_WEEK Source Code spll_modi_day_of_week.f90 Source Code !auto_modi:spll_day_of_week.D MODULE MODI_DAY_OF_WEEK INTERFACE SUBROUTINE DAY_OF_WEEK ( PYEAR , PMONTH , PDAY , PDOW ) IMPLICIT NONE INTEGER , INTENT ( IN ) :: PYEAR !current year (UTC) INTEGER , INTENT ( IN ) :: PMONTH !current month (UTC) INTEGER , INTENT ( IN ) :: PDAY !current day (UTC) INTEGER , INTENT ( OUT ) :: PDOW !current day of the week END SUBROUTINE DAY_OF_WEEK END INTERFACE END MODULE MODI_DAY_OF_WEEK","tags":"","loc":"sourcefile/spll_modi_day_of_week.f90.html"},{"title":"surface_cd.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines SURFACE_CD Source Code surface_cd.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !   ################################################################# SUBROUTINE SURFACE_CD ( PRI , PZREF , PUREF , PZ0EFF , PZ0H , & PCD , PCDN ) !   ################################################################# ! !!****  *SURFACE_CD* !! !!    PURPOSE !!    ------- ! !     Computes the drag coefficients for momentum near the ground ! ! !!**  METHOD !!    ------ ! ! ! !    1 and 2 : computation of relative humidity near the ground ! !    3 : richardson number ! !    4 : the aerodynamical resistance for heat transfers is deduced ! !    5 : the drag coefficient for momentum ZCD is computed ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !!    MODD_GROUND_PAR !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/01/98 !!                  02/04/01 (P Jabouille) limitation of Z0 with 0.5 PUREF !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_CSTS , ONLY : XKARMAN ! USE MODE_THERMOS ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PRI ! Richardson number REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first ! atmospheric level REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the wind !                                             ! NOTE this is different from ZZREF !                                             ! ONLY in stand-alone/forced mode, !                                             ! NOT when coupled to a model (MesoNH) REAL , DIMENSION (:), INTENT ( IN ) :: PZ0EFF ! roughness length for momentum ! with subgrid-scale orography REAL , DIMENSION (:), INTENT ( IN ) :: PZ0H ! roughness length for heat ! REAL , DIMENSION (:), INTENT ( OUT ) :: PCD ! drag coefficient for momentum REAL , DIMENSION (:), INTENT ( OUT ) :: PCDN ! neutral drag coefficient for momentum ! !*      0.2    declarations of local variables ! ! REAL :: ZZ0EFF , ZZ0H , ZMU , & ZCMSTAR , ZPM , ZCM , ZFM INTEGER :: JJ REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! Functions : REAL :: X , CMSTAR , PM CMSTAR ( X ) = 6.8741 + 2.6933 * X - 0.3601 * X * X + 0.0154 * X * X * X PM ( X ) = 0.5233 - 0.0815 * X + 0.0135 * X * X - 0.0010 * X * X * X !------------------------------------------------------------------------------- ! !*       1.     Drag coefficient for momentum transfers !               --------------------------------------- ! ! IF ( LHOOK ) CALL DR_HOOK ( 'SURFACE_CD' , 0 , ZHOOK_HANDLE ) DO JJ = 1 , SIZE ( PRI ) ZZ0EFF = MIN ( PZ0EFF ( JJ ), PUREF ( JJ ) * 0.5 ) ZZ0H = MIN ( ZZ0EFF , PZ0H ( JJ )) ! ZMU = LOG ( MIN ( ZZ0EFF / ZZ0H , 20 0. ) ) ! PCDN ( JJ ) = ( XKARMAN / LOG ( PUREF ( JJ ) / ZZ0EFF )) ** 2 ZCMSTAR = CMSTAR ( ZMU ) ZPM = PM ( ZMU ) ! ZCM = 1 0. * ZCMSTAR * PCDN ( JJ ) * ( PUREF ( JJ ) / ZZ0EFF ) ** ZPM ! IF ( PRI ( JJ ) > 0.0 ) THEN ZFM = 1. + 1 0. * PRI ( JJ ) / SQRT ( 1. + 5. * PRI ( JJ ) ) ZFM = 1. / ZFM ELSE ZFM = 1. - 1 0. * PRI ( JJ ) / ( 1. + ZCM * SQRT ( - PRI ( JJ )) ) ENDIF ! PCD ( JJ ) = PCDN ( JJ ) * ZFM ! ENDDO IF ( LHOOK ) CALL DR_HOOK ( 'SURFACE_CD' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE SURFACE_CD","tags":"","loc":"sourcefile/surface_cd.f90.html"},{"title":"modd_csts.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_CSTS Source Code modd_csts.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ############### MODULE MODD_CSTS !     ############### ! !!****  *MODD_CSTS* - declaration of Physic constants !! !!    PURPOSE !!    ------- !       The purpose of this declarative module is to declare  the !     Physics constants. ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      V. Ducrocq   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    16/05/94 !!      J. Stein    02/01/95  add xrholw !!      J.-P. Pinty 13/12/95  add XALPI,XBETAI,XGAMI !!      J. Stein    25/07/97  add XTH00 !!      V. Masson   05/10/98  add XRHOLI !!      C. Mari     31/10/00  add NDAYSEC !!      J. Escobar     06/13  add XSURF_TIMY XSURF_TIMY_12 XSURF_EPSILON for REAL*4 !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! IMPLICIT NONE REAL , SAVE :: XPI ! Pi ! REAL , SAVE :: XDAY , XSIYEA , XSIDAY ! day duration, sideral year duration, ! sideral day duration ! REAL , SAVE :: XKARMAN ! von karman constant REAL , SAVE :: XLIGHTSPEED ! light speed REAL , SAVE :: XPLANCK ! Planck constant REAL , SAVE :: XBOLTZ ! Boltzman constant REAL , SAVE :: XAVOGADRO ! Avogadro number ! REAL , SAVE :: XRADIUS , XOMEGA ! Earth radius, earth rotation REAL , SAVE :: XG ! Gravity constant ! REAL , SAVE :: XP00 ! Reference pressure ! REAL , SAVE :: XSTEFAN , XI0 ! Stefan-Boltzman constant, solar constant ! REAL , SAVE :: XMD , XMV ! Molar mass of dry air and molar mass of vapor REAL , SAVE :: XRD , XRV ! Gaz constant for dry air, gaz constant for vapor REAL , SAVE :: XCPD , XCPV ! Cpd (dry air), Cpv (vapor) REAL , SAVE :: XRHOLW ! Volumic mass of liquid water REAL , SAVE :: XCL , XCI ! Cl (liquid), Ci (ice) REAL , SAVE :: XTT ! Triple point temperature REAL , SAVE :: XTTSI ! Temperature of ice fusion over salty sea REAL , SAVE :: XTTS ! Equivalent temperature of ice fusion over a mixed of sea and sea-ice REAL , SAVE :: XICEC ! Threshold fraction over which the tile is considered as only covered with ice REAL , SAVE :: XLVTT ! Vaporization heat constant REAL , SAVE :: XLSTT ! Sublimation heat constant REAL , SAVE :: XLMTT ! Melting heat constant REAL , SAVE :: XESTT ! Saturation vapor pressure  at triple point ! temperature REAL , SAVE :: XALPW , XBETAW , XGAMW ! Constants for saturation vapor !  pressure  function REAL , SAVE :: XALPI , XBETAI , XGAMI ! Constants for saturation vapor !  pressure  function over solid ice REAL , SAVE :: XTH00 ! reference value  for the potential ! temperature REAL , SAVE :: XRHOLI ! Volumic mass of ice REAL , SAVE :: XCONDI ! thermal conductivity of ice (W m-1 K-1) ! INTEGER , SAVE :: NDAYSEC ! Number of seconds in a day ! REAL , SAVE :: XSURF_TINY ! minimum real on this machine REAL , SAVE :: XSURF_TINY_12 ! sqrt(minimum real on this machine) REAL , SAVE :: XSURF_EPSILON ! minimum space with 1.0 ! END MODULE MODD_CSTS","tags":"","loc":"sourcefile/modd_csts.f90.html"},{"title":"hook.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules PARKIND1 YOMHOOK Source Code hook.F90 Source Code !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! Copyright 1998-2013 Meteo-France ! This is part of the TEB software governed by the CeCILL licence version 2.1. ! See the following links for details: ! https://cecill.info/licences/Licence_CeCILL_V2.1-en.txt ! https://cecill.info/licences/Licence_CeCILL_V2.1-fr.txt !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !* The modules below are just proxi of a debugging code internal ! to Meteo-France and IFS softwares. These proxi have no use at all ! except the one to allow the compiling of the routines without having ! to change them from the ones in the SURFEX platform (containing TEB ! and other surface schemes). ! MODULE PARKIND1 INTEGER , PARAMETER :: JPRB = 4 END MODULE PARKIND1 ! MODULE YOMHOOK LOGICAL :: LHOOK = . FALSE . CONTAINS SUBROUTINE DR_HOOK ( HSTRING , KINTEGER , PREAL ) USE PARKIND1 CHARACTER ( LEN =* ) :: HSTRING INTEGER :: KINTEGER REAL ( KIND = JPRB ) :: PREAL print * , HSTRING , KINTEGER PREAL = 0. END SUBROUTINE DR_HOOK END MODULE YOMHOOK","tags":"","loc":"sourcefile/hook.f90.html"},{"title":"solar_panel.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines SOLAR_PANEL Source Code solar_panel.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE SOLAR_PANEL ( TPN , DMT , PTSTEP , PTSUN , PRESIDENTIAL , PEMIT_LW_ROOF , & PEMIT_LWDN_PANEL , PLW_RAD , PTA , PN_FLOOR , PPROD_BLD ) !   ########################################################################## ! !!****  *SOLAR_PANEL* !! !!    PURPOSE !!    ------- ! ! Computes the energy budget of the solar panels. ! ! !!**  METHOD !     ------ ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    08/2013 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS , ONLY : XSTEFAN ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_PANEL_t ), INTENT ( INOUT ) :: TPN TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT ! REAL , INTENT ( IN ) :: PTSTEP ! time step  (s) REAL , DIMENSION (:), INTENT ( IN ) :: PTSUN ! solar time (s since solar midnight) REAL , DIMENSION (:), INTENT ( IN ) :: PRESIDENTIAL ! Buildings Residential use fraction        (-) REAL , DIMENSION (:), INTENT ( IN ) :: PEMIT_LW_ROOF ! Upwards   LW flux from roof               (W/m2) REAL , DIMENSION (:), INTENT ( IN ) :: PEMIT_LWDN_PANEL ! Downwards LW flux from panel              (W/m2) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! Incoming Longwave radiation               (W/m2) REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! Air temperature                           (K) REAL , DIMENSION (:), INTENT ( IN ) :: PN_FLOOR ! number of floors                          (-) ! REAL , DIMENSION (:), INTENT ( OUT ) :: PPROD_BLD ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*      0.2    declarations of parameters ! ! coefficient to take into account irradiance to estimate surface temperature of panel REAL , PARAMETER :: XKT = 0.05 ! (Km2/W) ! ! coefficient to take into account optimum orientation of the solar panel REAL , PARAMETER :: XFT = 1.10 ! (-) ! ! optimum panel temperature for photovoltaic production REAL , PARAMETER :: XT_OPT = 29 8.15 ! (K) ! ! coefficient to take into account decrease of production for warm temperatures REAL , PARAMETER :: XT_LOSS = 0.005 ! (K-1) ! ! difference of temperature between cold and hot water REAL , PARAMETER :: XWATER_DT = 4 5. ! (K) ! ! density of m2 of panel per m2 of floor necessary for hot water production REAL , PARAMETER :: XTHER_FLOOR = 1. / 3 0. ! (-) ! ! Annual thermal production for an increase of 1K of the water temperature REAL , PARAMETER :: XTHER_RATE = 0.5 * 1.16 * 3 2. ! (kWh/year/m2 panel) ! !! Maximum irradiance above which there is no more heating necessary (target temperature reached quickly) !REAL, PARAMETER :: XTHER_IRR = 500.           ! (W/m2) ! Efficiency for thermal panels REAL , PARAMETER :: XTHER_EFF = 0.60 ! (-) ! ! ! ! !*      0.3    declarations of local variables ! REAL :: ZTHER_DAILY_TARGET ! daily target for thermal production         (J/m2) REAL , DIMENSION ( SIZE ( PTA )) :: ZIRRADIANCE ! incoming solar radiation normal to the solar panel (W/m2) REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_PANEL ! Surface temperature of the upwards face of the solar panel (K) REAL , DIMENSION ( SIZE ( PTA )) :: ZLWU_PANEL ! Upwards longwave radiation from the solar panel (W/m2) REAL , DIMENSION ( SIZE ( PTA )) :: ZTHER_FRAC ! Fraction of thermal      panels per m2 of roof  (m2 panel/m2 bld) REAL , DIMENSION ( SIZE ( PTA )) :: ZPHOT_FRAC ! Fraction of photovoltaic panels per m2 of roof  (m2 panel/m2 bld) REAL , DIMENSION ( SIZE ( PTA )) :: ZTHER_PRODC_DAY ! guess of daily production by thermal panels (J/m2) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'SOLAR_PANEL' , 0 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! !*      0.4    Default values for output variables !              ----------------------------------- ! DMT % XABS_LW_PANEL = XUNDEF ! Absorbed LW enerby by solar panel         (W/m2) DMT % XH_PANEL = XUNDEF ! Sensible heat released by the solar panel (W/m2) DMT % XRN_PANEL = XUNDEF ! Net radiation     of the solar panel      (W/m2) DMT % XTHER_PROD_PANEL = XUNDEF ! Thermal      Energy production of the solar panel      (W/m2) DMT % XPHOT_PROD_PANEL = XUNDEF ! Photovoltaic Energy production of the solar panel      (W/m2) DMT % XPROD_PANEL = XUNDEF ! Averaged     Energy production of the solar panel      (W/m2) DMT % XTHER_PROD_BLD = 0. ! Thermal      Energy production of the solar panel      (W/m2) DMT % XPHOT_PROD_BLD = 0. ! Photovoltaic Energy production of the solar panel      (W/m2) PPROD_BLD = 0. ! Averaged     Energy production of the solar panel      (W/m2) ! !------------------------------------------------------------------------------- ! !*      1.     Initializations !              --------------- ! !*      1.1    Checks hour for daily thermal production reset !              ---------------------------------------------- ! !* energy reset between midnight and 1AM. WHERE ( PTSUN (:) >= 0. . AND . PTSUN (:) <= 360 0. ) TPN % XTHER_PRODC_DAY (:) = 0. ! ! !*      1.2    Daily target production for thermal panels !              ------------------------------------------ ! ZTHER_DAILY_TARGET = ( 2. * XTHER_RATE ) * XWATER_DT * ( 100 0. / 36 5. * 360 0. ) ! (J/m2) ! the factor 2 is to remove the assumption of cloudy days in the annual mean production ! !------------------------------------------------------------------------------- !* Note that computations are done only where solar panels are present WHERE ( TPN % XFRAC_PANEL (:) > 0. ) !------------------------------------------------------------------------------- ! !*      2.     Irradiance on panel !              ------------------- ! ZIRRADIANCE (:) = XFT * DMT % XABS_SW_PANEL (:) / ( 1. - TPN % XALB_PANEL (:) ) ! !------------------------------------------------------------------------------- ! !*      3.     Solar panel temperature !              ----------------------- ! ZTS_PANEL (:) = PTA (:) + XKT * ZIRRADIANCE (:) ! !------------------------------------------------------------------------------- ! !*      4.     Upwards solar panel LW radiation !              -------------------------------- ! ZLWU_PANEL (:) = TPN % XEMIS_PANEL (:) * XSTEFAN * ZTS_PANEL (:) ** 4 & + ( 1. - TPN % XEMIS_PANEL (:)) * PLW_RAD (:) ! !------------------------------------------------------------------------------- ! !*      5.     Solar panel LW budget !              --------------------- ! DMT % XABS_LW_PANEL (:) = PLW_RAD (:) + PEMIT_LW_ROOF (:) - PEMIT_LWDN_PANEL (:) - ZLWU_PANEL (:) ! !------------------------------------------------------------------------------- ! !*      6.     Solar panel Net radiation !              ------------------------- ! DMT % XRN_PANEL (:) = DMT % XABS_SW_PANEL (:) + DMT % XABS_LW_PANEL (:) ! !------------------------------------------------------------------------------- ! !*      7.     Fraction of panel surface types !              ------------------------------- ! !*      7.1    Panel dedicated to thermal production of hot water !              -------------------------------------------------- ! ZTHER_FRAC (:) = MIN ( XTHER_FLOOR * PN_FLOOR (:) * PRESIDENTIAL (:), TPN % XFRAC_PANEL (:) ) ! (m2 thermal       panel / m2 roof) ! !*      7.2    Photovoltaic panel !              ------------------ ! ZPHOT_FRAC (:) = TPN % XFRAC_PANEL (:) - ZTHER_FRAC (:) ! (m2 photovoltaic panel / m2 roof) ! !------------------------------------------------------------------------------- ! !*      8.     Thermal Production of hot water (W/m2 thermal panel) !              ------------------------------- ! !*      8.1    Instantaneous production !              ------------------------ ! DMT % XTHER_PROD_PANEL (:) = XTHER_EFF * ZIRRADIANCE (:) ! (W/m2) !  DMT%XTHER_PROD_PANEL(:) = XTHER_RATE * XWATER_DT * (1000. / 24. / 365.) ! !*      8.2    Integrated daily production !              --------------------------- ! ZTHER_PRODC_DAY (:) = TPN % XTHER_PRODC_DAY (:) + PTSTEP * DMT % XTHER_PROD_PANEL (:) ! (J/m2) ! !*      8.3    Daily production limited by daily target !              ---------------------------------------- ! ZTHER_PRODC_DAY (:) = MIN ( ZTHER_PRODC_DAY (:) , ZTHER_DAILY_TARGET ) ! !*      8.4     Instantaneous production taking into account target limit if reached !               -------------------------------------------------------------------- ! DMT % XTHER_PROD_PANEL (:) = ( ZTHER_PRODC_DAY (:) - TPN % XTHER_PRODC_DAY (:) ) / PTSTEP ! !*      8.5    Updates daily production !              ------------------------ ! TPN % XTHER_PRODC_DAY (:) = ZTHER_PRODC_DAY (:) !------------------------------------------------------------------------------- ! !*      9.     Photovoltaic Production  (W/m2 photovoltaic panel) !              ----------------------- ! DMT % XPHOT_PROD_PANEL (:) = TPN % XEFF_PANEL (:) * ZIRRADIANCE (:) * MIN ( 1. , 1. - XT_LOSS * ( ZTS_PANEL (:) - XT_OPT )) ! !------------------------------------------------------------------------------- ! !*     10.     Averaged Production  (W/m2 panel) !              ------------------- ! DMT % XPROD_PANEL (:) = DMT % XTHER_PROD_PANEL (:) * ( ZTHER_FRAC (:) / TPN % XFRAC_PANEL (:)) & + DMT % XPHOT_PROD_PANEL (:) * ( ZPHOT_FRAC (:) / TPN % XFRAC_PANEL (:)) ! !------------------------------------------------------------------------------- ! !*     11.     Sensible heat flux  (W/m2 panel) !              ------------------ ! DMT % XH_PANEL (:) = DMT % XRN_PANEL (:) - DMT % XPROD_PANEL (:) ! !------------------------------------------------------------------------------- ! !*     12.     Productions per building (W/m2 bld) !              ------------------------ ! DMT % XTHER_PROD_BLD (:) = DMT % XTHER_PROD_PANEL (:) * ZTHER_FRAC (:) DMT % XPHOT_PROD_BLD (:) = DMT % XPHOT_PROD_PANEL (:) * ZPHOT_FRAC (:) PPROD_BLD (:) = DMT % XTHER_PROD_BLD (:) + DMT % XPHOT_PROD_PANEL (:) ! !------------------------------------------------------------------------------- END WHERE !------------------------------------------------------------------------------- ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'SOLAR_PANEL' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END SUBROUTINE SOLAR_PANEL","tags":"","loc":"sourcefile/solar_panel.f90.html"},{"title":"spll_modi_layer_e_budget_get_coef.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_LAYER_E_BUDGET_GET_COEF Source Code spll_modi_layer_e_budget_get_coef.f90 Source Code !auto_modi:spll_layer_e_budget_get_coef.D MODULE MODI_LAYER_E_BUDGET_GET_COEF INTERFACE SUBROUTINE LAYER_E_BUDGET_GET_COEF ( PT , PTSTEP , PIMPL , PHC , PTC , PD , PA , PB , PC , PY ) IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( IN ) :: PT ! floor layers temperatures REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC ! heat capacity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC ! thermal conductivity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PD ! depth of road layers REAL , DIMENSION (:,:), INTENT ( OUT ) :: PA REAL , DIMENSION (:,:), INTENT ( OUT ) :: PB REAL , DIMENSION (:,:), INTENT ( OUT ) :: PC REAL , DIMENSION (:,:), INTENT ( OUT ) :: PY REAL , INTENT ( IN ) :: PIMPL ! implicitation coefficient END SUBROUTINE LAYER_E_BUDGET_GET_COEF END INTERFACE END MODULE MODI_LAYER_E_BUDGET_GET_COEF","tags":"","loc":"sourcefile/spll_modi_layer_e_budget_get_coef.f90.html"},{"title":"urban_hydro.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines URBAN_HYDRO Source Code urban_hydro.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE URBAN_HYDRO ( PWS_ROOF_MAX , PWS_ROAD_MAX , PWS_ROOF , PWS_ROAD , & PRR , PIRRIG_ROAD , PTSTEP , PBLD , PLE_ROOF , & PLE_ROAD , PRUNOFF_STRLROOF , PRUNOFF_ROAD ) !   ########################################################################## ! !!****  *URBAN_HYDRO* !! !!    PURPOSE !!    ------- ! !     Computes the evolution of prognostic water reservoirs !     of urbanized areas. ! ! !!**  METHOD !     ------ ! ! !   The roof reservoir runoff goes directly into the road reservoir. ! !   Runoff occurs for road reservoir (too much water), as well as drainage !   (evacuation system, typical time scale: 1 day) ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_CSTS , ONLY : XLVTT ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PWS_ROOF_MAX ! maximum deepness of roof water reservoir REAL , DIMENSION (:), INTENT ( IN ) :: PWS_ROAD_MAX ! maximum deepness of road water reservoir REAL , DIMENSION (:), INTENT ( INOUT ) :: PWS_ROOF ! roof water reservoir REAL , DIMENSION (:), INTENT ( INOUT ) :: PWS_ROAD ! road water reservoir REAL , DIMENSION (:), INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:), INTENT ( IN ) :: PIRRIG_ROAD ! watering rate for roads REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PBLD ! fraction of buildings REAL , DIMENSION (:), INTENT ( IN ) :: PLE_ROOF ! latent heat flux over roof REAL , DIMENSION (:), INTENT ( IN ) :: PLE_ROAD ! latent heat flux over road ! REAL , DIMENSION (:), INTENT ( OUT ) :: PRUNOFF_STRLROOF ! runoff (kg/m2/s) REAL , DIMENSION (:), INTENT ( OUT ) :: PRUNOFF_ROAD ! runoff (kg/m2/s) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*      0.2    declarations of local variables ! ! !------------------------------------------------------------------------------- ! !*      1.     Roof reservoir evolution !              ------------------------ ! ! !                                           evolution of the water reservoir !                                           (if we don't consider the runoff) !                                           PRR in kg/m2/s therefore PWS in mm ! IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_HYDRO' , 0 , ZHOOK_HANDLE ) PWS_ROOF (:) = PWS_ROOF (:) & - PTSTEP * ( PLE_ROOF (:) / XLVTT - PRR (:) ) ! !                                           Ws_town must be positive ! PWS_ROOF (:) = MAX ( 0. , PWS_ROOF (:)) ! !                                           if Ws_town > Ws_town_max, !                                           there is runoff ! PRUNOFF_STRLROOF (:) = MAX ( 0. , ( PWS_ROOF (:) - PWS_ROOF_MAX (:)) / PTSTEP ) ! PWS_ROOF (:) = MIN ( PWS_ROOF (:), PWS_ROOF_MAX (:)) ! !------------------------------------------------------------------------------- ! !*      2.     Road reservoir evolution !              ------------------------ ! ! !                                           evolution of the water reservoir !                                           (if we don't consider the runoff) !                                           PRR in kg/m2/s therefore PWS in mm ! PWS_ROAD (:) = PWS_ROAD (:) & - PTSTEP * ( PLE_ROAD (:) / XLVTT - PRR (:) - PIRRIG_ROAD (:) ) ! !                                           Ws_town must be positive ! PWS_ROAD (:) = MAX ( 0. , PWS_ROAD (:)) ! !                                           if Ws_town > Ws_town_max, !                                           there is runoff ! PRUNOFF_ROAD (:) = MAX ( 0. , ( PWS_ROAD (:) - PWS_ROAD_MAX (:)) / PTSTEP ) ! PWS_ROAD (:) = MIN ( PWS_ROAD (:), PWS_ROAD_MAX (:)) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_HYDRO' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE URBAN_HYDRO","tags":"","loc":"sourcefile/urban_hydro.f90.html"},{"title":"spll_modi_flag_teb_veg_n.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_FLAG_TEB_VEG_n Source Code spll_modi_flag_teb_veg_n.f90 Source Code !auto_modi:spll_flag_teb_veg_n.D MODULE MODI_FLAG_TEB_VEG_n INTERFACE SUBROUTINE FLAG_TEB_VEG_n ( PEK , IO , PMASK , KFLAG ) USE MODD_ISBA_n , ONLY : ISBA_PE_t USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t IMPLICIT NONE TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: IO REAL , DIMENSION (:), INTENT ( IN ) :: PMASK INTEGER , INTENT ( IN ) :: KFLAG ! 1 : to put physical values to run ISBA afterwards END SUBROUTINE FLAG_TEB_VEG_n END INTERFACE END MODULE MODI_FLAG_TEB_VEG_n","tags":"","loc":"sourcefile/spll_modi_flag_teb_veg_n.f90.html"},{"title":"mass_layer_e_budget.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines MASS_LAYER_E_BUDGET Source Code mass_layer_e_budget.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !   ########################################################################## SUBROUTINE MASS_LAYER_E_BUDGET ( B , PTSTEP , PFLX_BLD_MA , PDQS_MA , PIMB_MA , PRADHT_IN , & PRAD_WL_MA , PRAD_RF_MA , PRAD_WIN_MA , PLOAD_MA , & PRAD_FL_MA , PCONV_MA_BLD ) !   ########################################################################## ! !!****  *MASS_LAYER_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of building floor temperatures ! ! !!**  METHOD !     ------ ! !    6 : equations for evolution of Ts_floor !        ************************************************************* ! !     dTf_k(t) / dt = 1/(df_k*Cf_k) * (- 2*Kf_k-1*(Tf_k-Tf_k-1)/(df_k-1 +df_k) !                                      - 2*Kf_k  *(Tf_k-Tf_k+1)/(df_k+1 +df_k) ) ! !     dTf_1(t) / dt = 1/(df_1*Cf_1) * (- 2*Kw_1*(Tw_1-Tw_2)/(dw_1 +dw_2)) ! !       with ! !   K*_k  = (d*_k+ d*_k+1)/(d*_k/k*_k+ d*_k+1/k*_k+1) ! ! ! The system is implicited (or semi-implicited). ! ! ZIMPL=1    ---> implicit system ! ZIMPL=0.5  ---> semi-implicit system ! ZIMPL=0    ---> explicit system ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      G. Pigeon           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    11/11 !!      G. Pigeon   09/12 modif internal convection coef !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_BEM_n , ONLY : BEM_t ! USE MODI_LAYER_E_BUDGET_GET_COEF USE MODI_LAYER_E_BUDGET USE MODE_CONV_DOE ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_MA !flux from building to floor REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_MA !heat storage inside the floor REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_MA !floor energy residual imbalance for verification REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_MA ! rad. fluxes from roof to floor[W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_WL_MA ! rad. fluxes from wall to floor[W m-2(wall)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_WIN_MA ! rad. fluxes from win to floor[W m-2(win)] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_MA ! solar and internal load to the floor REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_FL_MA ! rad. fluxes from floor to mass [W m-2(floor)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_MA_BLD ! conv. fluxes from floor to bld [W m-2(floor)] ! !*      0.2    declarations of local variables ! ! REAL :: ZIMPL = 1.0 ! implicit coefficient REAL :: ZEXPL = 0.0 ! explicit coefficient ! REAL , DIMENSION ( SIZE ( B % XT_MASS , 1 ), SIZE ( B % XT_MASS , 2 )) :: ZA ,& ! lower diag. ZB ,& ! main  diag. ZC ,& ! upper diag. ZY ! r.h.s. ! REAL , DIMENSION ( SIZE ( B % XT_MASS , 1 )) :: ZTS_MA ! surf. mass temp. ! used during calculation REAL , DIMENSION ( SIZE ( B % XT_MASS , 1 )) :: ZTS_MA_CONV ! surf. mass temp. used for conv flux REAL , DIMENSION ( SIZE ( B % XT_MASS , 1 )) :: ZCHTC_IN_MA ! Indoor floor convec heat transfer coefficient ! [W K-1 m-2(bld)] INTEGER :: JJ REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MASS_LAYER_E_BUDGET' , 0 , ZHOOK_HANDLE ) ! ! *Convection heat transfer coefficients [W m-2 K-1] from EP Engineering Reference ! ZCHTC_IN_MA (:) = CHTC_VERT_DOE ( B % XT_MASS (:, 1 ), B % XTI_BLD (:)) DO JJ = 1 , SIZE ( ZCHTC_IN_MA ) ZCHTC_IN_MA ( JJ ) = MAX ( 1. , ZCHTC_IN_MA ( JJ )) ENDDO ! CALL LAYER_E_BUDGET_GET_COEF ( B % XT_MASS , PTSTEP , ZIMPL , B % XHC_FLOOR , B % XTC_FLOOR , B % XD_FLOOR / 2. , & ZA , ZB , ZC , ZY ) ! ZTS_MA (:) = B % XT_MASS (:, 1 ) ZB (:, 1 ) = ZB (:, 1 ) + ZIMPL * 4. / 3. * ZCHTC_IN_MA (:) ZY (:, 1 ) = ZY (:, 1 ) & + ZCHTC_IN_MA (:) * ( B % XTI_BLD (:) - 1. / 3. * B % XT_MASS (:, 1 ) * ( 4 * ZEXPL - 1. )) & + B % XF_MASS_WIN (:) * PRAD_WIN_MA (:) + B % XF_MASS_WALL (:) * PRAD_WL_MA (:) & + B % XF_MASS_FLOOR (:) * ( PRAD_RF_MA (:) + PRAD_FL_MA (:)) + PLOAD_MA (:) ! CALL LAYER_E_BUDGET ( B % XT_MASS , PTSTEP , ZIMPL , B % XHC_FLOOR , B % XTC_FLOOR , B % XD_FLOOR / 2. , & ZA , ZB , ZC , ZY , PDQS_MA ) ! !*      calculation of temperature used in energy balance calculation !       ------------------------------------------------------------- ! ZTS_MA_CONV (:) = ZIMPL * 4. / 3. * B % XT_MASS (:, 1 ) + 1. / 3 * ZTS_MA (:) * ( 4 * ZEXPL - 1. ) ZTS_MA (:) = ZEXPL * ZTS_MA (:) + ZIMPL * B % XT_MASS (:, 1 ) ! !*      calculation of convection flux between mass and building air !       ------------------------------------------------------------ ! PCONV_MA_BLD (:) = ZCHTC_IN_MA (:) * ( ZTS_MA_CONV (:) - B % XTI_BLD (:)) ! !*      For diagnostics calculation of flux exchanged between the mass and the !       indoor !       ------------------------------------------------ ! PFLX_BLD_MA (:) = - PCONV_MA_BLD (:) + B % XF_MASS_WIN (:) * PRAD_WIN_MA (:) & + B % XF_MASS_WALL (:) * PRAD_WL_MA (:) & + B % XF_MASS_FLOOR (:) * ( PRAD_RF_MA (:) + PRAD_FL_MA (:)) + PLOAD_MA (:) ! !*      Floor residual energy imbalance for verification !       ------------------------------------------------ ! PIMB_MA (:) = PFLX_BLD_MA (:) - PDQS_MA (:) ! IF ( LHOOK ) CALL DR_HOOK ( 'MASS_LAYER_E_BUDGET' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- END SUBROUTINE MASS_LAYER_E_BUDGET","tags":"","loc":"sourcefile/mass_layer_e_budget.f90.html"},{"title":"modd_ch_flaken.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_CH_FLAKE_n Source Code modd_ch_flaken.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ##################### MODULE MODD_CH_FLAKE_n !     ###################### ! !! !!    PURPOSE !!    ------- ! ! ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! ! !!    AUTHOR !!    ------ !!  P. Tulet   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!  16/07/03 (P. Tulet)  restructured for externalization !!      Modified    04/2013, P. Le Moigne: FLake chemistry !------------------------------------------------------------------------------ ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_SV_n , ONLY : SV_t , SV_INIT ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE CH_FLAKE_t ! CHARACTER ( LEN = 6 ) :: CCH_DRY_DEP ! deposition scheme REAL , DIMENSION (:,:), POINTER :: XDEP ! final dry deposition ! velocity  for lakes TYPE ( SV_t ) :: SVF ! (FOR DIAG ONLY) CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CCH_NAMES ! NAME OF CHEMICAL SPECIES ! (FOR DIAG ONLY) CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CDSTNAMES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CSLTNAMES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CAER_NAMES ! END TYPE CH_FLAKE_t CONTAINS ! SUBROUTINE CH_FLAKE_INIT ( YCH_FLAKE ) TYPE ( CH_FLAKE_t ), INTENT ( INOUT ) :: YCH_FLAKE REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_FLAKE_N:CH_FLAKE_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YCH_FLAKE % XDEP ) NULLIFY ( YCH_FLAKE % CCH_NAMES ) NULLIFY ( YCH_FLAKE % CAER_NAMES ) NULLIFY ( YCH_FLAKE % CDSTNAMES ) NULLIFY ( YCH_FLAKE % CSLTNAMES ) YCH_FLAKE % CCH_DRY_DEP = ' ' CALL SV_INIT ( YCH_FLAKE % SVF ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_FLAKE_N:CH_FLAKE_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_FLAKE_INIT END MODULE MODD_CH_FLAKE_n","tags":"","loc":"sourcefile/modd_ch_flaken.f90.html"},{"title":"ini_surf_csts.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines INI_SURF_CSTS Source Code ini_surf_csts.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. SUBROUTINE INI_SURF_CSTS !     ################## ! !!****  *INI_SURF_CSTS * - routine to initialize all surface parameter as !!                         emissivity and albedo !! !!    PURPOSE !!    ------- ! !!**  METHOD !!    ------ !!      The physical constants are set to their default numerical values !!      or specified in namelist NAM_SURF_CSTS !! !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      B. Decharme       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    08/2009 !!      M Lafaysse 05/2014 : snow parameters !!      B. Decharme    05/13 : Add NAM_SURF_REPROD_OPER for versions reproductibility !!      P. Samuelsson 10/2014 MEB !!      B. Decharme    01/16 : Update XCFFV !! !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_SURF_CONF , ONLY : CPROGNAME ! USE MODD_WATER_PAR USE MODD_FLOOD_PAR USE MODD_MEB_PAR , ONLY : XTAU_LW , & XRAGNC_FACTOR , XKDELTA_WR USE MODD_SNOW_PAR , ONLY : XEMISSN , XANSMIN , XANSMAX , & XAGLAMIN , XAGLAMAX , XHGLA , & XWSNV , XZ0SN , XZ0HSN , & XTAU_SMELT , & XALBICE1 , XALBICE2 , XALBICE3 , & XRHOTHRESHOLD_ICE , XZ0ICEZ0SNOW , & XVAGING_NOGLACIER , XVAGING_GLACIER , & XPERCENTAGEPORE , & LMEBREC , & XANSFRACMEL , XTEMPANS , & XANSMINMEB ! USE MODI_GET_LUOUT USE MODI_OPEN_NAMELIST USE MODI_CLOSE_NAMELIST USE MODE_POS_SURF ! USE MODD_REPROD_OPER , ONLY : XEVERG_RSMIN , XEVERG_VEG , & CDGAVG , CIMPLICIT_WIND , & CQSAT , CCHARNOCK , CDGDIF USE MODI_TEST_NAM_VAR_SURF ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! INTEGER :: ILUOUT ! unit of output listing file INTEGER :: ILUNAM ! namelist file  logical unit LOGICAL :: GFOUND ! true if namelist is found ! LOGICAL :: LREPROD_OPER ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! NAMELIST / NAM_SURF_CSTS / XEMISSN , XANSMIN , XANSMAX , XAGLAMIN , XAGLAMAX , & XALBWAT , XALBCOEF_TA96 , XALBSCA_WAT , XEMISWAT , & XALBWATICE , XEMISWATICE , XHGLA , XWSNV , XCFFV , & XZ0SN , XZ0HSN , XTAU_SMELT , XALBSEAICE , & XZ0FLOOD , XALBWATSNOW , & LMEBREC , & XANSFRACMEL , XTEMPANS , XANSMINMEB , & XTAU_LW , XRAGNC_FACTOR ! NAMELIST / NAM_SURF_SNOW_CSTS / XZ0ICEZ0SNOW , XRHOTHRESHOLD_ICE , & XALBICE1 , XALBICE2 , XALBICE3 , & XVAGING_NOGLACIER , XVAGING_GLACIER , & XPERCENTAGEPORE ! NAMELIST / NAM_REPROD_OPER / LREPROD_OPER , XEVERG_RSMIN , XEVERG_VEG , & CDGAVG , CDGDIF , CIMPLICIT_WIND , CQSAT , & CCHARNOCK ! !------------------------------------------------------------------------------- !*       0. INIT !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'INI_SURF_CSTS' , 0 , ZHOOK_HANDLE ) ! XALBWAT = XUNDEF XALBSEAICE = XUNDEF XALBWATICE = XUNDEF XALBWATSNOW = XUNDEF XEMISWAT = XUNDEF XEMISWATICE = XUNDEF XEMISSN = XUNDEF ! !------------------------------------------------------------------------------- !*       1. Default values !------------------------------------------------------------------------------- ! ! Minimum and maximum values of the albedo of snow: ! XANSMIN = 0.50 ! (-) XANSMAX = 0.85 ! (-) ! ! Minimum and maximum values of the albedo of permanet snow/ice: ! XAGLAMIN = 0.8 ! (-) XAGLAMAX = 0.85 ! (-) ! ! Use recommended settings for snow albedo (FALSE = ISBA default) ! LMEBREC = . FALSE . ! ! Fraction of maximum value of the albedo of snow that is reached for melting ! snow ! XANSFRACMEL = 1.0 ! (-) ! ! Threeshold temperature above which the snow albedo starts to decrease ! XTEMPANS = 27 4.15 ! (K) ! ! Minimum value of the albedo of snow reached under canopy vegetation: ! XANSMINMEB = 0.30 ! (-) ! ! Height of aged snow in glacier case (allows Pn=1) ! XHGLA = 3 3.3 !(m) ! ! Coefficient for calculation of snow fraction over vegetation ! XWSNV = 5.0 !(-) ! ! Water direct albedo coefficient (option \"TA96\") ! XALBCOEF_TA96 = 0.037 ! ! Water diffuse albedo ! XALBSCA_WAT = 0.06 ! Coefficient for calculation of floodplain fraction over vegetation ! XCFFV = 4.0 ! ! Roughness length of pure snow surface (m) ! XZ0SN = 0.001 ! ! Roughness length for heat of pure snow surface (m) ! XZ0HSN = 0.0001 ! ! Snow Melt timescale with D95 (s): needed to prevent time step ! dependence of melt when snow fraction < unity. ! XTAU_SMELT = 30 0. ! ! Extinction coefficient for view factor for long-wave radiation ! XTAU_LW = 0.5 ! - ! ! MEB resistance increase factor for canopy air sapce. ! If=1, then NO effect. It is generally >=1 ! and is needed because the original parameterization ! does not account for extremely stable conditions, ! such as over a snowpack. ! XRAGNC_FACTOR = 20 0. ! - ! ! MEB maximum intercepted water fraction (on vegetation) ! XKDELTA_WR = 0.25 ! - ! ! NAM_SURF_SNOW_CSTS ! ! Roughness length ratio between ice and snow XZ0ICEZ0SNOW = 1 0. ! ! 3 bands spectral albedo for glacier ice (CROCUS) ! Default values from Lejeune et al 2009 (Zongo, Bolivia) XALBICE1 = 0.38 XALBICE2 = 0.23 XALBICE3 = 0.08 ! ! Gerbaux et al 2005 (Saint Sorlin) ! PALBICE1=0.23 ! PALBICE2=0.16 ! PALBICE3=0.05 ! ! Density threshold for ice detection kg.m-3 XRHOTHRESHOLD_ICE = 85 0. ! ! Parameters for ageing effect on albedo XVAGING_NOGLACIER = 6 0. XVAGING_GLACIER = 90 0. ! percentage of the total pore volume to compute the max liquid water holding capacity   !Pahaut 1976 XPERCENTAGEPORE = 0.05 ! ! Roughness length for flood (m) ! XZ0FLOOD = 0.0002 !------------------------------------------------------------------------------- ! ! * Reproductibility for SURFEX OPER ! LREPROD_OPER = . FALSE . ! default ! ! * Vegetation parameters for tropical forest ! !XEVERG_RSMIN : old = 250. (Manzi 1993) but observations range !               from 140 to 180. According to Delire et al. (1997) and !               new tests over 6 local sites, 175. is recommended !               Should be the default after check with AROME/ALADIN ! XEVERG_RSMIN = 17 5. !Rsmin ! !XEVERG_VEG : old = 0.99 (Manzi 1993) but according to Delire et al. (1997) and !             new tests over 6 local sites, 1.0 is recommended because 0.99 !             induces unrealistic bare soil evaporation for Tropical forest !             Should be the default after check with AROME/ALADIN ! XEVERG_VEG = 1.0 !Veg fraction ! ! * Soil depth average ! CDGAVG = 'INV' ! ! * Soil depth with ISBA-DF ! CDGDIF = 'ROOT' ! ! * wind implicitation option ! CIMPLICIT_WIND = 'NEW' ! ! * qsat computation ! CQSAT = 'NEW' ! ! * Charnock parameter ! CCHARNOCK = 'NEW' ! !------------------------------------------------------------------------------- !*       2. User values !------------------------------------------------------------------------------- ! CALL GET_LUOUT ( CPROGNAME , ILUOUT ) ! CALL OPEN_NAMELIST ( CPROGNAME , ILUNAM ) ! ! CALL POSNAM(ILUNAM,'NAM_SURF_CSTS',GFOUND,ILUOUT) !IF (GFOUND) READ(UNIT=ILUNAM,NML=NAM_SURF_CSTS) ! IF ( LMEBREC ) THEN ! Fraction of maximum value of the albedo of snow that is reached for melting ! snow ! XANSFRACMEL = 0.85 ! (-) ! ! Threeshold temperature above which the snow albedo starts to decrease ! XTEMPANS = 26 8.15 ! (K) ! ENDIF ! ! CALL POSNAM(ILUNAM,'NAM_SURF_SNOW_CSTS',GFOUND,ILUOUT) !IF (GFOUND) READ(UNIT=ILUNAM,NML=NAM_SURF_SNOW_CSTS) ! !------------------------------------------------------------------------------- !*       3. For Reproductibility !------------------------------------------------------------------------------- ! ! CALL POSNAM(ILUNAM,'NAM_REPROD_OPER',GFOUND,ILUOUT) !IF (GFOUND) READ(UNIT=ILUNAM,NML=NAM_REPROD_OPER) ! CALL TEST_NAM_VAR_SURF ( ILUOUT , 'CDGAVG' , CDGAVG , 'ARI' , 'INV' ) CALL TEST_NAM_VAR_SURF ( ILUOUT , 'CDGDIF' , CDGDIF , 'SOIL' , 'ROOT' ) CALL TEST_NAM_VAR_SURF ( ILUOUT , 'CIMPLICIT_WIND' , CIMPLICIT_WIND , 'NEW' , 'OLD' ) CALL TEST_NAM_VAR_SURF ( ILUOUT , 'CQSAT' , CIMPLICIT_WIND , 'NEW' , 'OLD' ) CALL TEST_NAM_VAR_SURF ( ILUOUT , 'CCHARNOCK' , CIMPLICIT_WIND , 'NEW' , 'OLD' ) ! CALL TEST_NAM_VAR_SURF ( ILUOUT , 'XEVERG_RSMIN' , XEVERG_RSMIN , 17 5.0 , 25 0.0 ) CALL TEST_NAM_VAR_SURF ( ILUOUT , 'XEVERG_VEG' , XEVERG_VEG , 1.0 , 0.99 ) ! IF ( LREPROD_OPER ) THEN XEVERG_RSMIN = 25 0. XEVERG_VEG = 0.99 CDGAVG = 'ARI' CQSAT = 'OLD' CCHARNOCK = 'OLD' ENDIF ! ! Water global albedo (option \"UNIF\") ! IF ( XALBWAT == XUNDEF ) THEN IF ( LREPROD_OPER ) THEN XALBWAT = 0.135 ELSE XALBWAT = 0.065 ENDIF ENDIF ! ! Sea ice albedo ! IF ( XALBSEAICE == XUNDEF ) THEN IF ( LREPROD_OPER ) THEN XALBSEAICE = 0.85 ELSE XALBSEAICE = 0.71 ENDIF ENDIF ! ! water ice and snow albedo ! IF ( XALBWATICE == XUNDEF ) THEN IF ( LREPROD_OPER ) THEN XALBWATICE = 0.85 ELSE XALBWATICE = 0.40 ENDIF ENDIF ! IF ( XALBWATSNOW == XUNDEF ) THEN IF ( LREPROD_OPER ) THEN XALBWATSNOW = 0.85 ELSE XALBWATSNOW = 0.60 ENDIF ENDIF ! ! Water emissivity ! IF ( XEMISWAT == XUNDEF ) THEN IF ( LREPROD_OPER ) THEN XEMISWAT = 0.98 ELSE XEMISWAT = 0.96 ENDIF ENDIF ! ! Sea ice emissivity ! IF ( XEMISWATICE == XUNDEF ) THEN IF ( LREPROD_OPER ) THEN XEMISWATICE = 1.0 ELSE XEMISWATICE = 0.97 ENDIF ENDIF ! ! ! Snow emissivity: ! IF ( XEMISSN == XUNDEF ) THEN IF ( LREPROD_OPER ) THEN XEMISSN = 1.0 ELSE XEMISSN = 0.99 ENDIF ENDIF ! !------------------------------------------------------------------------------- ! CALL CLOSE_NAMELIST ( CPROGNAME , ILUNAM ) ! IF ( LHOOK ) CALL DR_HOOK ( 'INI_SURF_CSTS' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE INI_SURF_CSTS","tags":"","loc":"sourcefile/ini_surf_csts.f90.html"},{"title":"spll_modi_urban_fluxes.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_URBAN_FLUXES Source Code spll_modi_urban_fluxes.f90 Source Code !auto_modi:spll_urban_fluxes.D MODULE MODI_URBAN_FLUXES INTERFACE SUBROUTINE URBAN_FLUXES ( TOP , T , B , DMT , HIMPLICIT_WIND , PT_CANYON , PPEW_A_COEF , PPEW_B_COEF , & PEXNS , PRHOA , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , PAC_WL , PCD , PDF_RF , & PDN_RF , PDF_RD , PDN_RD , PRNSN_RF , PHSN_RF , PLESN_RF , PGSN_RF , & PRNSN_RD , PHSN_RD , PLESN_RD , PGSN_RD , PMELT_RF , PDQS_RF , PMELT_RD , & PDQS_RD , PDQS_WL_A , PDQS_WL_B , PFLX_BLD_RF , PFLX_BLD_WL_A , & PFLX_BLD_WL_B , PFLX_BLD_FL , PFLX_BLD_MA , PE_SHADING , PLEW_RF , & PRN_GR , PH_GR , PLE_GR , PGFLUX_GR , & PLEW_RD , PLE_WL_A , PLE_WL_B , PMELT_BLT , PUSTAR_TWN ) USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t IMPLICIT NONE TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option REAL , DIMENSION (:), INTENT ( IN ) :: PT_CANYON ! canyon air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PH_TRAFFIC ! anthropogenic sensible REAL , DIMENSION (:), INTENT ( IN ) :: PLE_TRAFFIC ! anthropogenic latent REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WL ! surface conductance REAL , DIMENSION (:), INTENT ( IN ) :: PCD ! drag coefficient REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RF ! snow-free    roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RF ! snow-covered roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RD ! snow-free    road fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered road fraction REAL , DIMENSION (:), INTENT ( IN ) :: PRNSN_RF ! net radiation over snow REAL , DIMENSION (:), INTENT ( IN ) :: PHSN_RF ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PLESN_RF ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PGSN_RF ! flux under the snow REAL , DIMENSION (:), INTENT ( IN ) :: PRNSN_RD ! net radiation over snow REAL , DIMENSION (:), INTENT ( IN ) :: PHSN_RD ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PLESN_RD ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PGSN_RD ! flux under the snow REAL , DIMENSION (:), INTENT ( IN ) :: PMELT_RF ! snow melting on roof REAL , DIMENSION (:), INTENT ( IN ) :: PDQS_RF ! storage inside roofs REAL , DIMENSION (:), INTENT ( IN ) :: PMELT_RD ! snow melting on road REAL , DIMENSION (:), INTENT ( IN ) :: PDQS_RD ! storage inside roads REAL , DIMENSION (:), INTENT ( IN ) :: PDQS_WL_A ! storage inside walls REAL , DIMENSION (:), INTENT ( IN ) :: PDQS_WL_B ! storage inside walls REAL , DIMENSION (:), INTENT ( IN ) :: PFLX_BLD_RF ! heat flx from bld to roof REAL , DIMENSION (:), INTENT ( IN ) :: PFLX_BLD_WL_A ! heat flx from bld to wall A REAL , DIMENSION (:), INTENT ( IN ) :: PFLX_BLD_WL_B ! heat flx from bld to wall B REAL , DIMENSION (:), INTENT ( IN ) :: PFLX_BLD_FL ! heat flx from bld to floor REAL , DIMENSION (:), INTENT ( IN ) :: PFLX_BLD_MA ! heat flx from bld to mass REAL , DIMENSION (:), INTENT ( IN ) :: PE_SHADING ! energy not ref., nor absorbed, nor REAL , DIMENSION (:), INTENT ( IN ) :: PLEW_RF ! latent heat flux over snow-free roof REAL , DIMENSION (:), INTENT ( IN ) :: PLEW_RD ! latent heat flux of snow-free road REAL , DIMENSION (:), INTENT ( IN ) :: PRN_GR ! net radiation over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PH_GR ! sensible heat flux over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PLE_GR ! latent heat flux over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PGFLUX_GR ! flux through the greenroof REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_WL_A ! latent heat flux over wall REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_WL_B ! latent heat flux over wall REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT_BLT ! snow melting for town REAL , DIMENSION (:), INTENT ( OUT ) :: PUSTAR_TWN ! friction velocity over town END SUBROUTINE URBAN_FLUXES END INTERFACE END MODULE MODI_URBAN_FLUXES","tags":"","loc":"sourcefile/spll_modi_urban_fluxes.f90.html"},{"title":"spll_modi_avg_urban_fluxes.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_AVG_URBAN_FLUXES Source Code spll_modi_avg_urban_fluxes.f90 Source Code !auto_modi:spll_avg_urban_fluxes.D MODULE MODI_AVG_URBAN_FLUXES INTERFACE SUBROUTINE AVG_URBAN_FLUXES ( TOP , T , B , TPN , DMT , & PTS_TWN , PEMIS_TWN , PT_CAN , & PQ_CAN , PT_LOWCAN , PQ_LOWCAN , PTA , PQA , PRHOA , PPS ,& PH_TRAFFIC , PLE_TRAFFIC , PWL_O_GRND , PESN_RF , & PEMIS_GR , PLW_RAD , PAC_RF , PAC_RF_WAT , PAC_WL , & PAC_RD , PAC_RD_WAT , PAC_TOP , PAC_GD , PQSAT_GD , & PAC_AGG_GD , PHU_AGG_GD , PQSAT_RF , PQSAT_RD , & PDELT_RF , PDELT_RD , PRF_FRAC , PWL_FRAC , PRD_FRAC , & PGD_FRAC , PTOTS_O_HORS , PDF_RF , PDN_RF , PDF_RD , & PDN_RD , PLE_WL_A , PLE_WL_B , PLEW_RF , PLESN_RF , & PLEW_RD , PLESN_RD , PHSN_RD , & PTSRAD_GD , PRN_GD , PH_GD , PLE_GD , PGFLUX_GD , PEVAP_GD ,& PRUNOFF_GD , PEVAP_GR , PRUNOFF_GR , PDRAIN_GR , & PRN_GRND , PH_GRND , PLE_GRND , PGFLX_GRND , & PRN_TWN , PH_TWN , PLE_TWN , PGFLX_TWN , PEVAP_TWN , & PEMIT_LW_RD , PEMIT_LW_GD , PEMIT_LW_GRND , PEMIS_GD ) USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t IMPLICIT NONE TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_PANEL_t ), INTENT ( INOUT ) :: TPN TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT REAL , DIMENSION (:), INTENT ( OUT ) :: PTS_TWN ! town surface temperature REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIS_TWN ! town equivalent emissivity REAL , DIMENSION (:), INTENT ( INOUT ) :: PT_CAN ! canyon air temperature REAL , DIMENSION (:), INTENT ( INOUT ) :: PQ_CAN ! canyon air specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PT_LOWCAN ! low canyon air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PQ_LOWCAN ! low canyon air specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at roof level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! surface pressure REAL , DIMENSION (:), INTENT ( IN ) :: PH_TRAFFIC ! anthropogenic sensible REAL , DIMENSION (:), INTENT ( IN ) :: PLE_TRAFFIC ! anthropogenic latent REAL , DIMENSION (:), INTENT ( IN ) :: PWL_O_GRND ! wall Surf. / ground (road+green) Surf. REAL , DIMENSION (:), INTENT ( IN ) :: PESN_RF ! snow roof emissivity REAL , DIMENSION (:), INTENT ( IN ) :: PEMIS_GR ! green roof emissivity REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! incoming longwave rad. REAL , DIMENSION (:), INTENT ( IN ) :: PAC_RF ! surface conductance REAL , DIMENSION (:), INTENT ( IN ) :: PAC_RF_WAT ! surface conductance REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WL ! surface conductance REAL , DIMENSION (:), INTENT ( IN ) :: PAC_RD ! surface conductance REAL , DIMENSION (:), INTENT ( IN ) :: PAC_RD_WAT ! surface conductance REAL , DIMENSION (:), INTENT ( IN ) :: PAC_TOP ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( IN ) :: PAC_GD ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( IN ) :: PQSAT_GD ! q_sat(Ts) REAL , DIMENSION (:), INTENT ( IN ) :: PAC_AGG_GD ! aggregated aerodyn resistance for green areas REAL , DIMENSION (:), INTENT ( IN ) :: PHU_AGG_GD ! aggregated relative humidity for green areas REAL , DIMENSION (:), INTENT ( IN ) :: PQSAT_RF ! q_sat(Ts) REAL , DIMENSION (:), INTENT ( IN ) :: PQSAT_RD ! q_sat(Ts) REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_RF ! water fraction on snow-free REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_RD ! roof and roads REAL , DIMENSION (:), INTENT ( IN ) :: PRF_FRAC ! roof, wall, REAL , DIMENSION (:), INTENT ( IN ) :: PWL_FRAC ! road, and green area REAL , DIMENSION (:), INTENT ( IN ) :: PRD_FRAC ! fractions REAL , DIMENSION (:), INTENT ( IN ) :: PGD_FRAC ! of exchange surf. REAL , DIMENSION (:), INTENT ( IN ) :: PTOTS_O_HORS ! total canyon+roof surface REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RF ! snow-free    roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RF ! snow-covered roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RD ! snow-free    road fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered road fraction REAL , DIMENSION (:), INTENT ( IN ) :: PLE_WL_A ! latent heat flux over wall REAL , DIMENSION (:), INTENT ( IN ) :: PLE_WL_B ! latent heat flux over wall REAL , DIMENSION (:), INTENT ( IN ) :: PLEW_RF ! latent heat flux of snowfree roof REAL , DIMENSION (:), INTENT ( IN ) :: PLESN_RF ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PLEW_RD ! latent heat flux of snowfree road REAL , DIMENSION (:), INTENT ( IN ) :: PLESN_RD ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PHSN_RD ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PTSRAD_GD ! green area surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PRN_GD ! net radiation over green areas REAL , DIMENSION (:), INTENT ( IN ) :: PH_GD ! sensible heat flux over green areas REAL , DIMENSION (:), INTENT ( IN ) :: PLE_GD ! latent heat flux over green areas REAL , DIMENSION (:), INTENT ( IN ) :: PGFLUX_GD ! flux through the green areas REAL , DIMENSION (:), INTENT ( IN ) :: PEVAP_GD ! evaporation over gardens REAL , DIMENSION (:), INTENT ( IN ) :: PRUNOFF_GD ! surface runoff over green areas      (kg/m2/s) REAL , DIMENSION (:), INTENT ( IN ) :: PEVAP_GR ! evaporation over green roofs REAL , DIMENSION (:), INTENT ( IN ) :: PRUNOFF_GR ! surface runoff over green roofs      (kg/m2/s) REAL , DIMENSION (:), INTENT ( IN ) :: PDRAIN_GR ! outlet drainage at green roof base   (kg/m2/s) REAL , DIMENSION (:), INTENT ( OUT ) :: PRN_GRND ! net radiation over ground REAL , DIMENSION (:), INTENT ( OUT ) :: PH_GRND ! sensible heat flux over ground REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_GRND ! latent heat flux over ground REAL , DIMENSION (:), INTENT ( OUT ) :: PGFLX_GRND ! flux through the ground REAL , DIMENSION (:), INTENT ( OUT ) :: PRN_TWN ! net radiation over town REAL , DIMENSION (:), INTENT ( OUT ) :: PH_TWN ! sensible heat flux over town REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_TWN ! latent heat flux over town REAL , DIMENSION (:), INTENT ( OUT ) :: PGFLX_TWN ! flux through the ground for town REAL , DIMENSION (:), INTENT ( OUT ) :: PEVAP_TWN ! evaporation (kg/m2/s) REAL , DIMENSION (:), INTENT ( IN ) :: PEMIT_LW_RD ! LW emitted by the road (W/m2 road) REAL , DIMENSION (:), INTENT ( IN ) :: PEMIT_LW_GD ! LW emitted by the garden (W/m2 garden) REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_GRND ! LW emitted by the ground (road+garden) (W/m2 ground) REAL , DIMENSION (:), INTENT ( IN ) :: PEMIS_GD ! garden emissivity END SUBROUTINE AVG_URBAN_FLUXES END INTERFACE END MODULE MODI_AVG_URBAN_FLUXES","tags":"","loc":"sourcefile/spll_modi_avg_urban_fluxes.f90.html"},{"title":"modd_diag_utci_tebn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_DIAG_UTCI_TEB_n Source Code modd_diag_utci_tebn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ########################### MODULE MODD_DIAG_UTCI_TEB_n !     ############################ ! !!****  *MODD_DIAG_UTCI_TEB - declaration of confort from TEB scheme !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      P. Le Moigne   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       07/10/04 ! ! !*       0.   DECLARATIONS !             ------------ ! ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE DIAG_UTCI_TEB_t !------------------------------------------------------------------------------ ! LOGICAL :: LUTCI ! flag to compute UTCI quantities REAL , POINTER , DIMENSION (:) :: XUTCI_IN ! UTCI for person indoor REAL , POINTER , DIMENSION (:) :: XUTCI_OUTSUN ! UTCI for person outdoor at sun REAL , POINTER , DIMENSION (:) :: XUTCI_OUTSHADE ! UTCI for person outdoor at shade REAL , POINTER , DIMENSION (:) :: XTRAD_SUN ! Mean radiant temperature seen by person at sun (K) REAL , POINTER , DIMENSION (:) :: XTRAD_SHADE ! Mean radiant temperature seen by person in shade (K) REAL , POINTER , DIMENSION (:,:) :: XUTCIC_IN ! Cumulated UTCI stress for person indoor REAL , POINTER , DIMENSION (:,:) :: XUTCIC_OUTSUN ! Cumulated UTCI stress for person outdoor at sun REAL , POINTER , DIMENSION (:,:) :: XUTCIC_OUTSHADE ! Cumulated UTCI stress for person outdoor at shade ! END TYPE DIAG_UTCI_TEB_t ! CONTAINS ! SUBROUTINE DIAG_UTCI_TEB_INIT ( YDIAG_UTCI_TEB ) TYPE ( DIAG_UTCI_TEB_t ), INTENT ( INOUT ) :: YDIAG_UTCI_TEB REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_UTCI_TEB_N:DIAG_UTCI_TEB_INIT\" , 0 , ZHOOK_HANDLE ) YDIAG_UTCI_TEB % LUTCI = . FALSE . NULLIFY ( YDIAG_UTCI_TEB % XUTCI_IN ) NULLIFY ( YDIAG_UTCI_TEB % XUTCI_OUTSUN ) NULLIFY ( YDIAG_UTCI_TEB % XUTCI_OUTSHADE ) NULLIFY ( YDIAG_UTCI_TEB % XTRAD_SUN ) NULLIFY ( YDIAG_UTCI_TEB % XTRAD_SHADE ) NULLIFY ( YDIAG_UTCI_TEB % XUTCIC_IN ) NULLIFY ( YDIAG_UTCI_TEB % XUTCIC_OUTSUN ) NULLIFY ( YDIAG_UTCI_TEB % XUTCIC_OUTSHADE ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_UTCI_TEB_N:DIAG_UTCI_TEB_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_UTCI_TEB_INIT END MODULE MODD_DIAG_UTCI_TEB_n","tags":"","loc":"sourcefile/modd_diag_utci_tebn.f90.html"},{"title":"modd_isban.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_ISBA_n Source Code modd_isban.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !################## MODULE MODD_ISBA_n !################## ! !!****  *MODD_ISBA - declaration of packed surface parameters for ISBA scheme !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      A. Boone   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       20/09/02 !!      A.L. Gibelin    04/2009 : BIOMASS and RESP_BIOMASS arrays !!      A.L. Gibelin    04/2009 : TAU_WOOD for NCB option !!      A.L. Gibelin    05/2009 : Add carbon spinup !!      A.L. Gibelin    06/2009 : Soil carbon variables for CNT option !!      A.L. Gibelin    07/2009 : Suppress RDK and transform GPP as a diagnostic !!      A.L. Gibelin    07/2009 : Suppress PPST and PPSTF as outputs !!      P. Samuelsson   02/2012 : MEB !!      B. Decharme    10/2016  bug surface/groundwater coupling !! !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! USE MODD_TYPE_SNOW USE MODD_TYPE_DATE_SURF ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! TYPE ISBA_S_t ! ! General surface parameters: ! REAL , POINTER , DIMENSION (:) :: XZS ! relief                                  (m) REAL , POINTER , DIMENSION (:,:) :: XCOVER ! fraction of each ecosystem              (-) LOGICAL , POINTER , DIMENSION (:) :: LCOVER ! GCOVER(i)=T --> ith cover field is not 0. ! ! Topmodel statistics ! REAL , POINTER , DIMENSION (:) :: XTI_MIN , XTI_MAX , XTI_MEAN , XTI_STD , XTI_SKEW ! REAL , POINTER , DIMENSION (:,:) :: XSOC ! soil organic carbon content             (kg/m2) REAL , POINTER , DIMENSION (:) :: XPH ! soil pH REAL , POINTER , DIMENSION (:) :: XFERT ! soil fertilisation rate (kgN/ha/h) ! ! REAL , POINTER , DIMENSION (:) :: XABC ! abscissa needed for integration !                                                  ! of net assimilation and stomatal !                                                  ! conductance over canopy depth           (-) REAL , POINTER , DIMENSION (:) :: XPOI ! Gaussian weights for integration !                                                  ! of net assimilation and stomatal !                                                  ! conductance over canopy depth           (-) ! TYPE ( DATE_TIME ) :: TTIME ! REAL , POINTER , DIMENSION (:,:) :: XTAB_FSAT !Satured fraction array REAL , POINTER , DIMENSION (:,:) :: XTAB_WTOP !Active TOPMODEL-layer array REAL , POINTER , DIMENSION (:,:) :: XTAB_QTOP !Subsurface flow TOPMODEL array ! REAL , POINTER , DIMENSION (:) :: XF_PARAM REAL , POINTER , DIMENSION (:) :: XC_DEPTH_RATIO ! ! - Coupling with river routing model ! REAL , POINTER , DIMENSION (:) :: XCPL_DRAIN ! Surface runoff REAL , POINTER , DIMENSION (:) :: XCPL_RUNOFF ! Deep drainage or gourdwater recharge REAL , POINTER , DIMENSION (:) :: XCPL_ICEFLUX ! Calving flux REAL , POINTER , DIMENSION (:) :: XCPL_EFLOOD ! floodplains evaporation REAL , POINTER , DIMENSION (:) :: XCPL_PFLOOD ! floodplains precipitation interception REAL , POINTER , DIMENSION (:) :: XCPL_IFLOOD ! floodplains infiltration ! !  - Random perturbations ! REAL , POINTER , DIMENSION (:) :: XPERTVEG REAL , POINTER , DIMENSION (:) :: XPERTLAI REAL , POINTER , DIMENSION (:) :: XPERTCV REAL , POINTER , DIMENSION (:) :: XPERTALB REAL , POINTER , DIMENSION (:) :: XPERTZ0 ! REAL , POINTER , DIMENSION (:) :: XTSRAD_NAT ! patch averaged radiative temperature    (K) ! REAL , POINTER , DIMENSION (:) :: XEMIS_NAT ! patch averaged emissivity               (-) ! !  - Assimilation: ENKF ! REAL , POINTER , DIMENSION (:,:) :: XFRACSOC ! Fraction of organic carbon in each soil layer ! REAL , POINTER , DIMENSION (:,:) :: XVEGTYPE ! REAL , POINTER , DIMENSION (:,:) :: XPATCH ! fraction of each tile/patch   (-) ! ! Mask and number of grid elements containing patches/tiles: ! REAL , POINTER , DIMENSION (:,:,:) :: XVEGTYPE_PATCH ! fraction of each vegetation type for ! REAL , POINTER , DIMENSION (:,:) :: XINNOV REAL , POINTER , DIMENSION (:,:) :: XRESID ! REAL , POINTER , DIMENSION (:,:) :: XWORK_WR ! REAL , POINTER , DIMENSION (:,:,:) :: XWSN_WR REAL , POINTER , DIMENSION (:,:,:) :: XRHO_WR REAL , POINTER , DIMENSION (:,:,:) :: XHEA_WR REAL , POINTER , DIMENSION (:,:,:) :: XAGE_WR REAL , POINTER , DIMENSION (:,:,:) :: XSG1_WR REAL , POINTER , DIMENSION (:,:,:) :: XSG2_WR REAL , POINTER , DIMENSION (:,:,:) :: XHIS_WR REAL , POINTER , DIMENSION (:,:,:) :: XT_WR REAL , POINTER , DIMENSION (:,:) :: XALB_WR ! TYPE ( DATE_TIME ), POINTER , DIMENSION (:,:) :: TDATE_WR ! END TYPE ISBA_S_t ! ! TYPE ISBA_K_t ! REAL , POINTER , DIMENSION (:,:) :: XSAND ! sand fraction                           (-) REAL , POINTER , DIMENSION (:,:) :: XCLAY ! clay fraction                           (-) ! REAL , POINTER , DIMENSION (:) :: XPERM ! permafrost distribution                 (-) ! REAL , POINTER , DIMENSION (:) :: XRUNOFFB ! sub-grid dt92 surface runoff slope parameter (-) REAL , POINTER , DIMENSION (:) :: XWDRAIN ! continuous drainage parameter           (-) ! ! REAL , POINTER , DIMENSION (:) :: XTDEEP ! prescribed deep soil temperature !                                                  ! (optional) REAL , POINTER , DIMENSION (:) :: XGAMMAT ! 'Force-Restore' timescale when using a !                                                  ! prescribed lower boundary temperature   (1/days) ! REAL , POINTER , DIMENSION (:,:) :: XMPOTSAT ! matric potential at saturation          (m) REAL , POINTER , DIMENSION (:,:) :: XBCOEF ! soil water CH78 b-parameter             (-) REAL , POINTER , DIMENSION (:,:) :: XWWILT ! wilting point volumetric water content !                                                  ! profile                                 (m3/m3) REAL , POINTER , DIMENSION (:,:) :: XWFC ! field capacity volumetric water content !                                                  ! profile                                 (m3/m3) REAL , POINTER , DIMENSION (:,:) :: XWSAT ! porosity profile                        (m3/m3) ! REAL , POINTER , DIMENSION (:) :: XCGSAT ! soil thermal inertia coefficient at !                                                  ! saturation REAL , POINTER , DIMENSION (:) :: XC4B ! 'Force-Restore' sub-surface vertical !                                                  ! diffusion coefficient (slope parameter) (-) REAL , POINTER , DIMENSION (:) :: XACOEF ! 'Force-Restore' surface vertical !                                                  ! diffusion coefficient                   (-) REAL , POINTER , DIMENSION (:) :: XPCOEF ! 'Force-Restore' surface vertical !                                                  ! diffusion coefficient                   (-) REAL , POINTER , DIMENSION (:,:) :: XHCAPSOIL ! soil heat capacity                      (J/K/m3) REAL , POINTER , DIMENSION (:,:) :: XCONDDRY ! soil dry thermal conductivity           (W/m/K) REAL , POINTER , DIMENSION (:,:) :: XCONDSLD ! soil solids thermal conductivity        (W/m/K) ! ! - Water table depth coupling ! REAL , POINTER , DIMENSION (:) :: XFWTD ! grid-cell fraction of water table rise REAL , POINTER , DIMENSION (:) :: XWTD ! water table depth (negative below soil surface) (m) ! ! * Physiographic radiative fields ! REAL , POINTER , DIMENSION (:) :: XALBNIR_DRY ! dry soil near-infra-red albedo          (-) REAL , POINTER , DIMENSION (:) :: XALBVIS_DRY ! dry soil visible albedo                 (-) REAL , POINTER , DIMENSION (:) :: XALBUV_DRY ! dry soil UV albedo                      (-) REAL , POINTER , DIMENSION (:) :: XALBNIR_WET ! wet soil near-infra-red albedo          (-) REAL , POINTER , DIMENSION (:) :: XALBVIS_WET ! wet soil visible albedo                 (-) REAL , POINTER , DIMENSION (:) :: XALBUV_WET ! wet soil UV albedo                      (-) ! ! * SGH initializations ! REAL , POINTER , DIMENSION (:,:) :: XWD0 ! water content equivalent to TOPMODEL maximum deficit REAL , POINTER , DIMENSION (:,:) :: XKANISO ! Anisotropy coeficient for hydraulic conductivity ! REAL , POINTER , DIMENSION (:) :: XMUF ! fraction of the grid cell reached by the rainfall REAL , POINTER , DIMENSION (:) :: XFSAT ! Topmodel or dt92 saturated fracti ! REAL , POINTER , DIMENSION (:) :: XFFLOOD ! Grid-cell flood fraction REAL , POINTER , DIMENSION (:) :: XPIFLOOD ! flood potential infiltration (kg/m2/s) ! ! - Flood scheme ! REAL , POINTER , DIMENSION (:) :: XFF ! Total Flood fraction REAL , POINTER , DIMENSION (:) :: XFFG ! Flood fraction over ground REAL , POINTER , DIMENSION (:) :: XFFV ! Flood fraction over vegetation REAL , POINTER , DIMENSION (:) :: XFFROZEN ! Fraction of frozen floodplains REAL , POINTER , DIMENSION (:) :: XALBF ! Flood albedo REAL , POINTER , DIMENSION (:) :: XEMISF ! Flood emissivity ! ! - Snow and flood fractions and total albedo at time t:                             (-) ! REAL , POINTER , DIMENSION (:,:) :: XDIR_ALB_WITH_SNOW ! total direct albedo by bands REAL , POINTER , DIMENSION (:,:) :: XSCA_ALB_WITH_SNOW ! total diffuse albedo by bands ! REAL , POINTER , DIMENSION (:,:) :: XVEGTYPE ! END TYPE ISBA_K_t ! ! TYPE ISBA_P_t ! INTEGER :: NSIZE_P ! number of sub-patchs/tiles              (-) ! REAL , POINTER , DIMENSION (:) :: XPATCH ! fraction of each tile/patch   (-) ! ! Mask and number of grid elements containing patches/tiles: ! REAL , POINTER , DIMENSION (:,:) :: XVEGTYPE_PATCH ! fraction of each vegetation type for ! INTEGER , POINTER , DIMENSION (:) :: NR_P ! patch/tile mask ! REAL , POINTER , DIMENSION (:) :: XPATCH_OLD ! fraction of each tile/patchfor land use (-) ! ! REAL , POINTER , DIMENSION (:) :: XANMAX ! maximum photosynthesis rate             ( REAL , POINTER , DIMENSION (:) :: XFZERO ! ideal value of F, no photo- !                                                ! respiration or saturation deficit REAL , POINTER , DIMENSION (:) :: XEPSO ! maximum initial quantum use !                                                ! efficiency                              (mg J-1 PAR) REAL , POINTER , DIMENSION (:) :: XGAMM ! CO2 conpensation concentration          (ppm) REAL , POINTER , DIMENSION (:) :: XQDGAMM ! Log of Q10 function for CO2 conpensation !                                               ! concentration                           (-) REAL , POINTER , DIMENSION (:) :: XQDGMES ! Log of Q10 function for mesophyll conductance  (-) REAL , POINTER , DIMENSION (:) :: XT1GMES ! reference temperature for computing !                                                ! compensation concentration function for !                                                ! mesophyll conductance: minimum !                                                ! temperature                             (K) REAL , POINTER , DIMENSION (:) :: XT2GMES ! reference temperature for computing !                                                ! compensation concentration function for !                                                ! mesophyll conductance: maximum !                                                ! temperature                             (K) REAL , POINTER , DIMENSION (:) :: XAMAX ! leaf photosynthetic capacity            (mg m-2 s-1) REAL , POINTER , DIMENSION (:) :: XQDAMAX ! Log of Q10 function for leaf photosynthetic !                                                ! capacity                                (-) REAL , POINTER , DIMENSION (:) :: XT1AMAX ! reference temperature for computing !                                                ! compensation concentration function for !                                                ! leaf photosynthetic capacity: minimum !                                                ! temperature                             (K) REAL , POINTER , DIMENSION (:) :: XT2AMAX ! reference temperature for computing !                                                ! compensation concentration function for !                                                ! leaf photosynthetic capacity: maximum !                                                ! temperature                             (K) REAL , POINTER , DIMENSION (:) :: XAH ! coefficients for herbaceous water stress !                                                ! response (offensive or defensive)       (log(mm/s)) REAL , POINTER , DIMENSION (:) :: XBH ! coefficients for herbaceous water stress !                                                ! response (offensive or defensive) REAL , POINTER , DIMENSION (:) :: XTAU_WOOD ! residence time in woody biomass         (s) REAL , POINTER , DIMENSION (:,:) :: XINCREASE ! biomass increase                     (kg/m2/day) REAL , POINTER , DIMENSION (:,:) :: XTURNOVER ! turnover rates from biomass to litter (gC/m2/s) ! ! *Soil hydraulic characteristics ! REAL , POINTER , DIMENSION (:,:) :: XCONDSAT ! hydraulic conductivity at saturation    (m/s) ! REAL , POINTER , DIMENSION (:) :: XTAUICE ! soil freezing characteristic timescale  (s) ! REAL , POINTER , DIMENSION (:) :: XC1SAT ! 'Force-Restore' C1 coefficient at !                                                ! saturation                              (-) REAL , POINTER , DIMENSION (:) :: XC2REF ! 'Force-Restore' reference value of C2   (-) REAL , POINTER , DIMENSION (:,:) :: XC3 ! 'Force-Restore' C3 drainage coefficient (m) REAL , POINTER , DIMENSION (:) :: XC4REF ! 'Force-Restore' sub-surface vertical !                                                ! for lateral drainage ('DIF' option) ! REAL , POINTER , DIMENSION (:) :: XBSLAI_NITRO ! biomass/LAI ratio from nitrogen !                                                  ! decline theory                        (kg/m2) ! * Soil thermal characteristics ! REAL , POINTER , DIMENSION (:) :: XCPS REAL , POINTER , DIMENSION (:) :: XLVTT REAL , POINTER , DIMENSION (:) :: XLSTT ! ! * Initialize hydrology ! REAL , POINTER , DIMENSION (:) :: XRUNOFFD ! depth over which sub-grid runoff is !                                                ! computed: in Force-Restore this is the !                                                ! total soil column ('2-L'), or root zone !                                                ! ('3-L'). For the 'DIF' option, it can !                                                ! be any depth within soil column         (m) ! REAL , POINTER , DIMENSION (:,:) :: XDZG ! soil layers thicknesses (DIF option) REAL , POINTER , DIMENSION (:,:) :: XDZDIF ! distance between consecuative layer mid-points (DIF option) REAL , POINTER , DIMENSION (:,:) :: XSOILWGHT ! VEG-DIF: weights for vertical !                                                ! integration of soil water and properties ! REAL , POINTER , DIMENSION (:) :: XKSAT_ICE ! hydraulic conductivity at saturation !                                                    over frozen area (m s-1) ! REAL , POINTER , DIMENSION (:,:) :: XTOPQS ! Topmodel subsurface flow by layer (m/s) ! REAL , POINTER , DIMENSION (:,:) :: XDG ! soil layer depth                  (m) !                                                ! NOTE: in Force-Restore mode, the !                                                ! uppermost layer depth is superficial !                                                ! and is only explicitly used for soil !                                                ! water phase changes                     (m) ! REAL , POINTER , DIMENSION (:,:) :: XDG_OLD ! For land use REAL , POINTER , DIMENSION (:) :: XDG2 INTEGER , POINTER , DIMENSION (:) :: NWG_LAYER ! Number of soil moisture layers for DIF REAL , POINTER , DIMENSION (:) :: XDROOT ! effective root depth for DIF (m) REAL , POINTER , DIMENSION (:,:) :: XROOTFRAC ! root fraction profile ('DIF' option) ! REAL , POINTER , DIMENSION (:) :: XD_ICE ! depth of the soil column for the calculation !                                                 of the frozen soil fraction (m) ! REAL , POINTER , DIMENSION (:) :: XH_TREE ! height of trees                         (m) ! REAL , POINTER , DIMENSION (:) :: XZ0_O_Z0H ! ratio of surface roughness lengths !                                                ! (momentum to heat)                      (-) ! REAL , POINTER , DIMENSION (:) :: XRE25 ! Ecosystem respiration parameter         (kg/kg.m.s-1) ! REAL , POINTER , DIMENSION (:) :: XDMAX ! maximum air saturation deficit !                                                ! tolerate by vegetation !                                                (kg/kg) ! REAL , POINTER , DIMENSION (:,:) :: XRED_NOISE REAL , POINTER , DIMENSION (:,:) :: XINCR REAL , POINTER , DIMENSION (:,:,:) :: XHO ! END TYPE ISBA_P_t ! TYPE ISBA_PE_t ! ! Prognostic variables: ! ! - Soil and vegetation heat and water: ! REAL , POINTER , DIMENSION (:,:) :: XWG ! soil volumetric water content profile   (m3/m3) REAL , POINTER , DIMENSION (:,:) :: XWGI ! soil liquid water equivalent volumetric !                                                ! ice content profile                     (m3/m3) REAL , POINTER , DIMENSION (:) :: XWR ! liquid water retained on the !                                                ! foliage of the vegetation !                                                ! canopy                                  (kg/m2) REAL , POINTER , DIMENSION (:,:) :: XTG ! surface and sub-surface soil !                                                ! temperature profile                     (K) ! ! - Snow Cover: ! TYPE ( SURF_SNOW ) :: TSNOW ! snow state: !                                                ! scheme type/option                      (-) !                                                ! number of layers                        (-) !                                                ! snow (& liq. water) content             (kg/m2) !                                                ! heat content                            (J/m2) !                                                ! temperature                             (K) !                                                ! density                                 (kg m-3) ! REAL , POINTER , DIMENSION (:) :: XICE_STO ! Glacier ice storage reservoir ! ! - For multi-energy balance: ! REAL , POINTER , DIMENSION (:) :: XWRL ! liquid water retained on litter          (kg/m2) REAL , POINTER , DIMENSION (:) :: XWRLI ! ice retained on litter          (kg/m2) REAL , POINTER , DIMENSION (:) :: XWRVN ! snow retained on the foliage !                                                ! of the canopy vegetation                  (kg/m2) REAL , POINTER , DIMENSION (:) :: XTV ! canopy vegetation temperature             (K) REAL , POINTER , DIMENSION (:) :: XTL ! litter temperature             (K) REAL , POINTER , DIMENSION (:) :: XTC ! canopy air temperature                    (K) REAL , POINTER , DIMENSION (:) :: XQC ! canopy air specific humidity              (kg/kg) ! ! * Half prognostic fields ! REAL , POINTER , DIMENSION (:) :: XRESA ! aerodynamic resistance                  (s/m) ! ! - Vegetation: Ags Prognostic (YPHOTO = 'AST', 'NIT', 'NCB') ! REAL , POINTER , DIMENSION (:) :: XAN ! net CO2 assimilation                    (mg/m2/s) REAL , POINTER , DIMENSION (:) :: XANDAY ! daily net CO2 assimilation              (mg/m2) REAL , POINTER , DIMENSION (:) :: XANFM ! maximum leaf assimilation               (mg/m2/s) REAL , POINTER , DIMENSION (:) :: XLE ! evapotranspiration                      (W/m2) ! REAL , POINTER , DIMENSION (:) :: XFAPARC ! Fapar of vegetation (cumul) REAL , POINTER , DIMENSION (:) :: XFAPIRC ! Fapir of vegetation (cumul) REAL , POINTER , DIMENSION (:) :: XLAI_EFFC ! Effective LAI (cumul) REAL , POINTER , DIMENSION (:) :: XMUS ! cos zenithal angle (cumul) ! REAL , POINTER , DIMENSION (:,:) :: XRESP_BIOMASS ! daily cumulated respiration of !                                                   ! biomass                              (kg/m2/s) REAL , POINTER , DIMENSION (:,:) :: XBIOMASS ! biomass of previous day              (kg/m2) ! ! - Soil carbon (ISBA-CC, YRESPSL = 'CNT') ! REAL , POINTER , DIMENSION (:,:,:) :: XLITTER ! litter pools                         (gC/m2) REAL , POINTER , DIMENSION (:,:) :: XSOILCARB ! soil carbon pools                    (gC/m2) REAL , POINTER , DIMENSION (:,:) :: XLIGNIN_STRUC ! ratio Lignin/Carbon in structural !                                                       litter                               (gC/m2) ! REAL , POINTER , DIMENSION (:) :: XPSNG ! Snow fraction over ground REAL , POINTER , DIMENSION (:) :: XPSNV ! Snow fraction over vegetation REAL , POINTER , DIMENSION (:) :: XPSNV_A ! Snow fraction over vegetation REAL , POINTER , DIMENSION (:) :: XPSN ! REAL , POINTER , DIMENSION (:) :: XSNOWFREE_ALB ! snow free albedo                        (-) REAL , POINTER , DIMENSION (:) :: XSNOWFREE_ALB_VEG ! snow free albedo for vegetation         (-) REAL , POINTER , DIMENSION (:) :: XSNOWFREE_ALB_SOIL ! snow free albedo for soil ! REAL , POINTER , DIMENSION (:) :: XVEG ! vegetation cover fraction               (-) ! REAL , POINTER , DIMENSION (:) :: XLAI ! Leaf Area Index                         (m2/m2) ! REAL , POINTER , DIMENSION (:) :: XEMIS ! surface emissivity                      (-) REAL , POINTER , DIMENSION (:) :: XZ0 ! surface roughness length                (m) ! REAL , POINTER , DIMENSION (:) :: XRSMIN ! minimum stomatal resistance             (s/m) REAL , POINTER , DIMENSION (:) :: XGAMMA ! coefficient for the calculation !                                              ! of the surface stomatal !                                              ! resistance REAL , POINTER , DIMENSION (:) :: XWRMAX_CF ! coefficient for maximum water !                                              ! interception !                                              ! storage capacity on the vegetation      (-) REAL , POINTER , DIMENSION (:) :: XRGL ! maximum solar radiation !                                              ! usable in photosynthesis REAL , POINTER , DIMENSION (:) :: XCV ! vegetation thermal inertia coefficient  (K m2/J) REAL , POINTER , DIMENSION (:) :: XLAIMIN ! minimum LAI (Leaf Area Index)           (m2/m2) REAL , POINTER , DIMENSION (:) :: XSEFOLD ! e-folding time for senescence           (s) REAL , POINTER , DIMENSION (:) :: XGMES ! mesophyll conductance                   (m s-1) REAL , POINTER , DIMENSION (:) :: XGC ! cuticular conductance                   (m s-1) REAL , POINTER , DIMENSION (:) :: XF2I ! critical normilized soil water !                                              ! content for stress parameterisation REAL , POINTER , DIMENSION (:) :: XBSLAI ! ratio d(biomass)/d(lai)                 (kg/m2) ! REAL , POINTER , DIMENSION (:) :: XCE_NITRO ! leaf aera ratio sensitivity to !                                            ! nitrogen concentration                (m2/kg) REAL , POINTER , DIMENSION (:) :: XCF_NITRO ! lethal minimum value of leaf area !                                              ! ratio                                 (m2/kg) REAL , POINTER , DIMENSION (:) :: XCNA_NITRO ! nitrogen concentration of active !                                              ! biomass LOGICAL , POINTER , DIMENSION (:) :: LSTRESS ! vegetation response type to water !                                              ! stress (true:defensive false:offensive) (-) ! REAL , POINTER , DIMENSION (:) :: XALBNIR_VEG ! vegetation near-infra-red albedo        (-) REAL , POINTER , DIMENSION (:) :: XALBVIS_VEG ! vegetation visible albedo               (-) REAL , POINTER , DIMENSION (:) :: XALBUV_VEG ! vegetation UV albedo                    (-) ! REAL , POINTER , DIMENSION (:) :: XALBNIR ! near-infra-red albedo                   (-) REAL , POINTER , DIMENSION (:) :: XALBVIS ! visible albedo                          (-) REAL , POINTER , DIMENSION (:) :: XALBUV ! UV albedo ! REAL , POINTER , DIMENSION (:) :: XGNDLITTER ! ground litter fraction                  (-) REAL , POINTER , DIMENSION (:) :: XH_VEG ! height of vegetation                           (m) REAL , POINTER , DIMENSION (:) :: XZ0LITTER ! ground litter roughness length                 (m) ! REAL , POINTER , DIMENSION (:) :: XALBNIR_SOIL ! soil near-infra-red albedo              (-) REAL , POINTER , DIMENSION (:) :: XALBVIS_SOIL ! soil visible albedo                     (-) REAL , POINTER , DIMENSION (:) :: XALBUV_SOIL ! soil UV albedo ! TYPE ( DATE_TIME ), POINTER , DIMENSION (:) :: TSEED ! date of seeding TYPE ( DATE_TIME ), POINTER , DIMENSION (:) :: TREAP ! date of reaping REAL , POINTER , DIMENSION (:) :: XWATSUP ! water supply during irrigation process (mm) REAL , POINTER , DIMENSION (:) :: XIRRIG ! flag for irrigation (irrigation if >0.) ! ! END TYPE ISBA_PE_t ! TYPE ISBA_NK_t ! TYPE ( ISBA_K_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE ISBA_NK_t ! TYPE ISBA_NP_t ! TYPE ( ISBA_P_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE ISBA_NP_t ! TYPE ISBA_NPE_t ! TYPE ( ISBA_PE_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE ISBA_NPE_t ! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ! CONTAINS ! SUBROUTINE ISBA_S_INIT ( YISBA_S ) TYPE ( ISBA_S_t ), INTENT ( INOUT ) :: YISBA_S REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_S_INIT\" , 0 , ZHOOK_HANDLE ) ! NULLIFY ( YISBA_S % XZS ) NULLIFY ( YISBA_S % XCOVER ) NULLIFY ( YISBA_S % LCOVER ) ! NULLIFY ( YISBA_S % XTI_MIN ) NULLIFY ( YISBA_S % XTI_MAX ) NULLIFY ( YISBA_S % XTI_MEAN ) NULLIFY ( YISBA_S % XTI_STD ) NULLIFY ( YISBA_S % XTI_SKEW ) ! NULLIFY ( YISBA_S % XSOC ) NULLIFY ( YISBA_S % XPH ) NULLIFY ( YISBA_S % XFERT ) ! NULLIFY ( YISBA_S % XABC ) NULLIFY ( YISBA_S % XPOI ) ! NULLIFY ( YISBA_S % XFRACSOC ) NULLIFY ( YISBA_S % XTAB_FSAT ) NULLIFY ( YISBA_S % XTAB_WTOP ) NULLIFY ( YISBA_S % XTAB_QTOP ) NULLIFY ( YISBA_S % XF_PARAM ) NULLIFY ( YISBA_S % XC_DEPTH_RATIO ) NULLIFY ( YISBA_S % XCPL_DRAIN ) NULLIFY ( YISBA_S % XCPL_RUNOFF ) NULLIFY ( YISBA_S % XCPL_ICEFLUX ) NULLIFY ( YISBA_S % XCPL_EFLOOD ) NULLIFY ( YISBA_S % XCPL_PFLOOD ) NULLIFY ( YISBA_S % XCPL_IFLOOD ) NULLIFY ( YISBA_S % XPERTVEG ) NULLIFY ( YISBA_S % XPERTLAI ) NULLIFY ( YISBA_S % XPERTCV ) NULLIFY ( YISBA_S % XPERTALB ) NULLIFY ( YISBA_S % XPERTZ0 ) NULLIFY ( YISBA_S % XEMIS_NAT ) ! NULLIFY ( YISBA_S % XTSRAD_NAT ) ! NULLIFY ( YISBA_S % XINNOV ) NULLIFY ( YISBA_S % XRESID ) ! NULLIFY ( YISBA_S % XWORK_WR ) ! NULLIFY ( YISBA_S % XWSN_WR ) NULLIFY ( YISBA_S % XRHO_WR ) NULLIFY ( YISBA_S % XALB_WR ) NULLIFY ( YISBA_S % XHEA_WR ) NULLIFY ( YISBA_S % XAGE_WR ) NULLIFY ( YISBA_S % XSG1_WR ) NULLIFY ( YISBA_S % XSG2_WR ) NULLIFY ( YISBA_S % XHIS_WR ) ! NULLIFY ( YISBA_S % TDATE_WR ) ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_S_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE ISBA_S_INIT ! SUBROUTINE ISBA_K_INIT ( YISBA_K ) TYPE ( ISBA_K_t ), INTENT ( INOUT ) :: YISBA_K REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_K_INIT\" , 0 , ZHOOK_HANDLE ) ! NULLIFY ( YISBA_K % XSAND ) NULLIFY ( YISBA_K % XCLAY ) NULLIFY ( YISBA_K % XPERM ) NULLIFY ( YISBA_K % XRUNOFFB ) NULLIFY ( YISBA_K % XWDRAIN ) ! NULLIFY ( YISBA_K % XTDEEP ) NULLIFY ( YISBA_K % XGAMMAT ) NULLIFY ( YISBA_K % XMPOTSAT ) NULLIFY ( YISBA_K % XBCOEF ) NULLIFY ( YISBA_K % XWWILT ) NULLIFY ( YISBA_K % XWFC ) NULLIFY ( YISBA_K % XWSAT ) NULLIFY ( YISBA_K % XCGSAT ) NULLIFY ( YISBA_K % XC4B ) NULLIFY ( YISBA_K % XACOEF ) NULLIFY ( YISBA_K % XPCOEF ) NULLIFY ( YISBA_K % XHCAPSOIL ) NULLIFY ( YISBA_K % XCONDDRY ) NULLIFY ( YISBA_K % XCONDSLD ) NULLIFY ( YISBA_K % XFWTD ) NULLIFY ( YISBA_K % XWTD ) NULLIFY ( YISBA_K % XALBNIR_DRY ) NULLIFY ( YISBA_K % XALBVIS_DRY ) NULLIFY ( YISBA_K % XALBUV_DRY ) NULLIFY ( YISBA_K % XALBNIR_WET ) NULLIFY ( YISBA_K % XALBVIS_WET ) NULLIFY ( YISBA_K % XALBUV_WET ) NULLIFY ( YISBA_K % XWD0 ) NULLIFY ( YISBA_K % XKANISO ) NULLIFY ( YISBA_K % XMUF ) NULLIFY ( YISBA_K % XFSAT ) NULLIFY ( YISBA_K % XFFLOOD ) NULLIFY ( YISBA_K % XPIFLOOD ) NULLIFY ( YISBA_K % XFF ) NULLIFY ( YISBA_K % XFFG ) NULLIFY ( YISBA_K % XFFV ) NULLIFY ( YISBA_K % XFFROZEN ) NULLIFY ( YISBA_K % XALBF ) NULLIFY ( YISBA_K % XEMISF ) NULLIFY ( YISBA_K % XDIR_ALB_WITH_SNOW ) NULLIFY ( YISBA_K % XSCA_ALB_WITH_SNOW ) ! NULLIFY ( YISBA_K % XVEGTYPE ) ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_K_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE ISBA_K_INIT ! SUBROUTINE ISBA_P_INIT ( YISBA_P ) TYPE ( ISBA_P_t ), INTENT ( INOUT ) :: YISBA_P REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_P_INIT\" , 0 , ZHOOK_HANDLE ) ! YISBA_P % NSIZE_P = 0 NULLIFY ( YISBA_P % XPATCH ) NULLIFY ( YISBA_P % XVEGTYPE_PATCH ) NULLIFY ( YISBA_P % NR_P ) NULLIFY ( YISBA_P % XPATCH_OLD ) NULLIFY ( YISBA_P % XANMAX ) NULLIFY ( YISBA_P % XFZERO ) NULLIFY ( YISBA_P % XEPSO ) NULLIFY ( YISBA_P % XGAMM ) NULLIFY ( YISBA_P % XQDGAMM ) NULLIFY ( YISBA_P % XQDGMES ) NULLIFY ( YISBA_P % XT1GMES ) NULLIFY ( YISBA_P % XT2GMES ) NULLIFY ( YISBA_P % XAMAX ) NULLIFY ( YISBA_P % XQDAMAX ) NULLIFY ( YISBA_P % XT1AMAX ) NULLIFY ( YISBA_P % XT2AMAX ) NULLIFY ( YISBA_P % XAH ) NULLIFY ( YISBA_P % XBH ) NULLIFY ( YISBA_P % XTAU_WOOD ) NULLIFY ( YISBA_P % XINCREASE ) NULLIFY ( YISBA_P % XTURNOVER ) NULLIFY ( YISBA_P % XCONDSAT ) NULLIFY ( YISBA_P % XTAUICE ) NULLIFY ( YISBA_P % XC1SAT ) NULLIFY ( YISBA_P % XC2REF ) NULLIFY ( YISBA_P % XC3 ) NULLIFY ( YISBA_P % XC4REF ) NULLIFY ( YISBA_P % XCPS ) NULLIFY ( YISBA_P % XLVTT ) NULLIFY ( YISBA_P % XLSTT ) NULLIFY ( YISBA_P % XRUNOFFD ) NULLIFY ( YISBA_P % XDZG ) NULLIFY ( YISBA_P % XDZDIF ) NULLIFY ( YISBA_P % XSOILWGHT ) NULLIFY ( YISBA_P % XKSAT_ICE ) NULLIFY ( YISBA_P % XBSLAI_NITRO ) NULLIFY ( YISBA_P % XTOPQS ) ! NULLIFY ( YISBA_P % XDG ) NULLIFY ( YISBA_P % XDG_OLD ) NULLIFY ( YISBA_P % NWG_LAYER ) NULLIFY ( YISBA_P % XDROOT ) NULLIFY ( YISBA_P % XDG2 ) NULLIFY ( YISBA_P % XROOTFRAC ) NULLIFY ( YISBA_P % XD_ICE ) NULLIFY ( YISBA_P % XH_TREE ) NULLIFY ( YISBA_P % XZ0_O_Z0H ) NULLIFY ( YISBA_P % XRE25 ) NULLIFY ( YISBA_P % XDMAX ) ! NULLIFY ( YISBA_P % XRED_NOISE ) NULLIFY ( YISBA_P % XINCR ) NULLIFY ( YISBA_P % XHO ) ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_P_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE ISBA_P_INIT ! SUBROUTINE ISBA_PE_INIT ( YISBA_PE ) TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: YISBA_PE REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_PE_INIT\" , 0 , ZHOOK_HANDLE ) ! NULLIFY ( YISBA_PE % XLAI ) NULLIFY ( YISBA_PE % XVEG ) NULLIFY ( YISBA_PE % XEMIS ) NULLIFY ( YISBA_PE % XZ0 ) NULLIFY ( YISBA_PE % XRSMIN ) NULLIFY ( YISBA_PE % XGAMMA ) NULLIFY ( YISBA_PE % XWRMAX_CF ) NULLIFY ( YISBA_PE % XRGL ) NULLIFY ( YISBA_PE % XCV ) NULLIFY ( YISBA_PE % XLAIMIN ) NULLIFY ( YISBA_PE % XSEFOLD ) NULLIFY ( YISBA_PE % XGMES ) NULLIFY ( YISBA_PE % XGC ) NULLIFY ( YISBA_PE % XF2I ) NULLIFY ( YISBA_PE % XBSLAI ) NULLIFY ( YISBA_PE % XCE_NITRO ) NULLIFY ( YISBA_PE % XCF_NITRO ) NULLIFY ( YISBA_PE % XCNA_NITRO ) NULLIFY ( YISBA_PE % LSTRESS ) NULLIFY ( YISBA_PE % XALBNIR_VEG ) NULLIFY ( YISBA_PE % XALBVIS_VEG ) NULLIFY ( YISBA_PE % XALBUV_VEG ) NULLIFY ( YISBA_PE % XALBNIR ) NULLIFY ( YISBA_PE % XALBVIS ) NULLIFY ( YISBA_PE % XALBUV ) ! NULLIFY ( YISBA_PE % XGNDLITTER ) NULLIFY ( YISBA_PE % XH_VEG ) NULLIFY ( YISBA_PE % XZ0LITTER ) ! NULLIFY ( YISBA_PE % XALBNIR_SOIL ) NULLIFY ( YISBA_PE % XALBVIS_SOIL ) NULLIFY ( YISBA_PE % XALBUV_SOIL ) ! NULLIFY ( YISBA_PE % XWATSUP ) NULLIFY ( YISBA_PE % XIRRIG ) ! NULLIFY ( YISBA_PE % XWG ) NULLIFY ( YISBA_PE % XWGI ) NULLIFY ( YISBA_PE % XWR ) NULLIFY ( YISBA_PE % XTG ) NULLIFY ( YISBA_PE % XICE_STO ) NULLIFY ( YISBA_PE % XWRL ) NULLIFY ( YISBA_PE % XWRLI ) NULLIFY ( YISBA_PE % XWRVN ) NULLIFY ( YISBA_PE % XTV ) NULLIFY ( YISBA_PE % XTL ) NULLIFY ( YISBA_PE % XTC ) NULLIFY ( YISBA_PE % XQC ) NULLIFY ( YISBA_PE % XRESA ) NULLIFY ( YISBA_PE % XAN ) NULLIFY ( YISBA_PE % XANDAY ) NULLIFY ( YISBA_PE % XANFM ) NULLIFY ( YISBA_PE % XLE ) NULLIFY ( YISBA_PE % XFAPARC ) NULLIFY ( YISBA_PE % XFAPIRC ) NULLIFY ( YISBA_PE % XLAI_EFFC ) NULLIFY ( YISBA_PE % XMUS ) NULLIFY ( YISBA_PE % XRESP_BIOMASS ) NULLIFY ( YISBA_PE % XBIOMASS ) NULLIFY ( YISBA_PE % XLITTER ) NULLIFY ( YISBA_PE % XSOILCARB ) NULLIFY ( YISBA_PE % XLIGNIN_STRUC ) NULLIFY ( YISBA_PE % XPSNG ) NULLIFY ( YISBA_PE % XPSNV ) NULLIFY ( YISBA_PE % XPSNV_A ) NULLIFY ( YISBA_PE % XSNOWFREE_ALB ) NULLIFY ( YISBA_PE % XSNOWFREE_ALB_VEG ) NULLIFY ( YISBA_PE % XSNOWFREE_ALB_SOIL ) NULLIFY ( YISBA_PE % XPSN ) ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_PE_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE ISBA_PE_INIT ! SUBROUTINE ISBA_NK_INIT ( YISBA_NK , KPATCH ) TYPE ( ISBA_NK_t ), INTENT ( INOUT ) :: YISBA_NK INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_NK_INIT\" , 0 , ZHOOK_HANDLE ) ! IF ( ASSOCIATED ( YISBA_NK % AL )) THEN DO JP = 1 , KPATCH CALL ISBA_K_INIT ( YISBA_NK % AL ( JP )) ENDDO DEALLOCATE ( YISBA_NK % AL ) ELSE ALLOCATE ( YISBA_NK % AL ( KPATCH )) DO JP = 1 , KPATCH CALL ISBA_K_INIT ( YISBA_NK % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_NK_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE ISBA_NK_INIT ! SUBROUTINE ISBA_NP_INIT ( YISBA_NP , KPATCH ) TYPE ( ISBA_NP_t ), INTENT ( INOUT ) :: YISBA_NP INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_NP_INIT\" , 0 , ZHOOK_HANDLE ) ! IF ( ASSOCIATED ( YISBA_NP % AL )) THEN DO JP = 1 , KPATCH CALL ISBA_P_INIT ( YISBA_NP % AL ( JP )) ENDDO DEALLOCATE ( YISBA_NP % AL ) ELSE ALLOCATE ( YISBA_NP % AL ( KPATCH )) DO JP = 1 , KPATCH CALL ISBA_P_INIT ( YISBA_NP % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE ISBA_NP_INIT ! SUBROUTINE ISBA_NPE_INIT ( YISBA_NPE , KPATCH ) TYPE ( ISBA_NPE_t ), INTENT ( INOUT ) :: YISBA_NPE INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_NPE_INIT\" , 0 , ZHOOK_HANDLE ) ! IF ( ASSOCIATED ( YISBA_NPE % AL )) THEN DO JP = 1 , KPATCH CALL ISBA_PE_INIT ( YISBA_NPE % AL ( JP )) ENDDO DEALLOCATE ( YISBA_NPE % AL ) ELSE ALLOCATE ( YISBA_NPE % AL ( KPATCH )) DO JP = 1 , KPATCH CALL ISBA_PE_INIT ( YISBA_NPE % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_NPE_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE ISBA_NPE_INIT END MODULE MODD_ISBA_n","tags":"","loc":"sourcefile/modd_isban.f90.html"},{"title":"modd_svn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_SV_n Source Code modd_svn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !        ############### MODULE MODD_SV_n !        ############### ! !!****  *MODD_NSV* - declaration of scalar variables numbers !! !!    PURPOSE !!    ------- !!       Arrays to store the per-model NSV_* values number (suffix _A denote an array) !! !!    AUTHOR !!    ------ !!      P. Tulet   Meteo-France !! !!    MODIFICATIONS !!    ------------- !!      Original  01/2004 !! !------------------------------------------------------------------------------- ! !*       0.   DECLARATIONS !             ------------ ! ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE TYPE SV_t ! !############################################################################### ! ! variables updated for the current model ! CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CSV ! name of the scalar variables INTEGER :: NSV_CHSBEG , NSV_CHSEND !  index of first and last gas chemistry related scalar variable INTEGER :: NBEQ ! number of chemical gas species in the surface scheme INTEGER :: NSV_DSTBEG , NSV_DSTEND ! index of first and last dust related scalar variable INTEGER :: NDSTEQ ! number of dust related species in scalar variables list INTEGER :: NSV_SLTBEG , NSV_SLTEND ! index of first and last sea salt related scalar variable INTEGER :: NSLTEQ ! number of sea salt related species in scalar variables list INTEGER :: NSV_AERBEG , NSV_AEREND ! index of first and last aerosol related scalar variabl INTEGER :: NAEREQ ! number of aerosols variables ! ! END TYPE SV_t CONTAINS ! SUBROUTINE SV_INIT ( YSV ) TYPE ( SV_t ), INTENT ( INOUT ) :: YSV REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SV_N:SV_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YSV % CSV ) YSV % NBEQ = 0 YSV % NSV_CHSBEG = 0 YSV % NSV_CHSEND = 0 YSV % NSV_DSTBEG = 0 YSV % NSV_DSTEND = 0 YSV % NDSTEQ = 0 YSV % NSV_SLTBEG = 0 YSV % NSV_SLTEND = 0 YSV % NSLTEQ = 0 YSV % NSV_AERBEG = 0 YSV % NSV_AEREND = 0 YSV % NAEREQ = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SV_N:SV_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE SV_INIT END MODULE MODD_SV_n","tags":"","loc":"sourcefile/modd_svn.f90.html"},{"title":"modd_agrin.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_AGRI_n Source Code modd_agrin.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ################## MODULE MODD_AGRI_n !     ################## ! !!****  *MODD_AGRI_n - declaration of SEEDING date for summer crops !! !!    PURPOSE !!    ------- ! !! !!**  IMPLICIT ARGUMENTS !!    ------------------ !!      None !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      P. LE MOIGNE   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original       06/2006 ! !*       0.   DECLARATIONS !             ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !------------------------------------------------------------------------------- TYPE AGRI_t ! INTEGER , POINTER , DIMENSION (:) :: NIRRINUM ! Stage for Irrigation (4 stages) ! LOGICAL , POINTER , DIMENSION (:) :: LIRRIGATE ! True if irrigation performed ! LOGICAL , POINTER , DIMENSION (:) :: LIRRIDAY ! True if irrigation occurs during present day ! REAL , POINTER , DIMENSION (:) :: XTHRESHOLDSPT ! Spatialized threshold END TYPE AGRI_t !------------------------------------------------------------------------------- ! TYPE AGRI_NP_t ! TYPE ( AGRI_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE AGRI_NP_t ! CONTAINS ! ! SUBROUTINE AGRI_INIT ( AG ) TYPE ( AGRI_t ), INTENT ( INOUT ) :: AG REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_AGRI_N:AGRI_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( AG % NIRRINUM ) NULLIFY ( AG % LIRRIGATE ) NULLIFY ( AG % LIRRIDAY ) NULLIFY ( AG % XTHRESHOLDSPT ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_AGRI_N:AGRI_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE AGRI_INIT ! SUBROUTINE AGRI_NP_INIT ( YNAG , KPATCH ) TYPE ( AGRI_NP_t ), INTENT ( INOUT ) :: YNAG INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_AGRI_N:AGRI_NP_INIT\" , 0 , ZHOOK_HANDLE ) ! IF ( ASSOCIATED ( YNAG % AL )) THEN DO JP = 1 , KPATCH CALL AGRI_INIT ( YNAG % AL ( JP )) ENDDO DEALLOCATE ( YNAG % AL ) ELSE ALLOCATE ( YNAG % AL ( KPATCH )) DO JP = 1 , KPATCH CALL AGRI_INIT ( YNAG % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_AGRI_N:AGRI_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE AGRI_NP_INIT ! !------------------------------------------------------------------------------- ! END MODULE MODD_AGRI_n","tags":"","loc":"sourcefile/modd_agrin.f90.html"},{"title":"urban_fluxes.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines URBAN_FLUXES Source Code urban_fluxes.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE URBAN_FLUXES ( TOP , T , B , DMT , HIMPLICIT_WIND , PT_CANYON , PPEW_A_COEF , PPEW_B_COEF , & PEXNS , PRHOA , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , PAC_WL , PCD , PDF_RF , & PDN_RF , PDF_RD , PDN_RD , PRNSN_RF , PHSN_RF , PLESN_RF , PGSN_RF , & PRNSN_RD , PHSN_RD , PLESN_RD , PGSN_RD , PMELT_RF , PDQS_RF , PMELT_RD , & PDQS_RD , PDQS_WL_A , PDQS_WL_B , PFLX_BLD_RF , PFLX_BLD_WL_A , & PFLX_BLD_WL_B , PFLX_BLD_FL , PFLX_BLD_MA , PE_SHADING , PLEW_RF , & PRN_GR , PH_GR , PLE_GR , PGFLUX_GR , & PLEW_RD , PLE_WL_A , PLE_WL_B , PMELT_BLT , PUSTAR_TWN ) !   ########################################################################## ! !!****  *URBAN_FLUXES* computes fluxes on urbanized surfaces !! !!    PURPOSE !!    ------- ! ! !!**  METHOD !     ------ ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !!                     12/02 (A. Lemonsu) modifications of emissivity and Tstown !!                     07/07 (P. LeMoigne) expression of latent heat fluxes as !!                           functions of w'theta' instead of w'T' !!                     17/10 (G. Pigeon)  computation of anthropogenic heat due !!                            to domestic heating !!      Modified    09/2012 : B. Decharme New wind implicitation !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS , ONLY : XCPD ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT ! CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option !                                                     ! 'OLD' = direct !                                                     ! 'NEW' = Taylor serie, order 1 REAL , DIMENSION (:), INTENT ( IN ) :: PT_CANYON ! canyon air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PH_TRAFFIC ! anthropogenic sensible !                                                  ! heat fluxes due to traffic REAL , DIMENSION (:), INTENT ( IN ) :: PLE_TRAFFIC ! anthropogenic latent !                                                  ! heat fluxes due to traffic REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WL ! surface conductance !                                                 ! for heat transfer !                                                 ! between wall and canyon REAL , DIMENSION (:), INTENT ( IN ) :: PCD ! drag coefficient REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RF ! snow-free    roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RF ! snow-covered roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RD ! snow-free    road fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered road fraction ! REAL , DIMENSION (:), INTENT ( IN ) :: PRNSN_RF ! net radiation over snow REAL , DIMENSION (:), INTENT ( IN ) :: PHSN_RF ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PLESN_RF ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PGSN_RF ! flux under the snow REAL , DIMENSION (:), INTENT ( IN ) :: PRNSN_RD ! net radiation over snow REAL , DIMENSION (:), INTENT ( IN ) :: PHSN_RD ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PLESN_RD ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PGSN_RD ! flux under the snow ! REAL , DIMENSION (:), INTENT ( IN ) :: PMELT_RF ! snow melting on roof REAL , DIMENSION (:), INTENT ( IN ) :: PDQS_RF ! storage inside roofs REAL , DIMENSION (:), INTENT ( IN ) :: PMELT_RD ! snow melting on road REAL , DIMENSION (:), INTENT ( IN ) :: PDQS_RD ! storage inside roads REAL , DIMENSION (:), INTENT ( IN ) :: PDQS_WL_A ! storage inside walls REAL , DIMENSION (:), INTENT ( IN ) :: PDQS_WL_B ! storage inside walls REAL , DIMENSION (:), INTENT ( IN ) :: PFLX_BLD_RF ! heat flx from bld to roof REAL , DIMENSION (:), INTENT ( IN ) :: PFLX_BLD_WL_A ! heat flx from bld to wall A REAL , DIMENSION (:), INTENT ( IN ) :: PFLX_BLD_WL_B ! heat flx from bld to wall B REAL , DIMENSION (:), INTENT ( IN ) :: PFLX_BLD_FL ! heat flx from bld to floor REAL , DIMENSION (:), INTENT ( IN ) :: PFLX_BLD_MA ! heat flx from bld to mass REAL , DIMENSION (:), INTENT ( IN ) :: PE_SHADING ! energy not ref., nor absorbed, nor !trans. by glazing [W !m-2(win)] ! REAL , DIMENSION (:), INTENT ( IN ) :: PLEW_RF ! latent heat flux over snow-free roof REAL , DIMENSION (:), INTENT ( IN ) :: PLEW_RD ! latent heat flux of snow-free road REAL , DIMENSION (:), INTENT ( IN ) :: PRN_GR ! net radiation over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PH_GR ! sensible heat flux over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PLE_GR ! latent heat flux over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PGFLUX_GR ! flux through the greenroof ! REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_WL_A ! latent heat flux over wall REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_WL_B ! latent heat flux over wall ! REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT_BLT ! snow melting for town ! REAL , DIMENSION (:), INTENT ( OUT ) :: PUSTAR_TWN ! friction velocity over town ! !*      0.2    declarations of local variables ! REAL , DIMENSION ( SIZE ( PRHOA )) :: ZH_RF_SNFREE REAL , DIMENSION ( SIZE ( PRHOA )) :: ZRN_RF_SNFREE REAL , DIMENSION ( SIZE ( PRHOA )) :: ZUSTAR2 ! square of friction velocity (m2/s2) REAL , DIMENSION ( SIZE ( PRHOA )) :: ZVMOD ! Wind REAL , DIMENSIOn ( SIZE ( PRHOA )) :: ZINTER ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_FLUXES' , 0 , ZHOOK_HANDLE ) ! !*      1.     Fluxes at snow-free roofs !              ------------------------- ! !                                            net radiation ! ! ZRN_RF_SNFREE (:) = DMT % XABS_SW_ROOF (:) + DMT % XABS_LW_ROOF (:) ! !                                            sensible heat flux ! ZH_RF_SNFREE (:) = DMT % XH_ROOF (:) ! !------------------------------------------------------------------------------- ! !*      2.     Fluxes at snow-free roads !              ------------------------- ! !                                            net radiation ! DMT % XRN_ROAD (:) = DMT % XABS_SW_ROAD (:) + DMT % XABS_LW_ROAD (:) ! !------------------------------------------------------------------------------- ! !*      3.     Fluxes at walls !              --------------- ! !                                            net radiation ! DMT % XRN_WALL_A (:) = DMT % XABS_SW_WALL_A (:) + DMT % XABS_LW_WALL_A (:) DMT % XRN_WALL_B (:) = DMT % XABS_SW_WALL_B (:) + DMT % XABS_LW_WALL_B (:) ! IF ( TOP % CBEM == \"BEM\" ) THEN ZINTER (:) = DMT % XABS_SW_WIN (:) + DMT % XABS_LW_WIN (:) DMT % XRN_WALL_A (:) = DMT % XRN_WALL_A (:) * ( 1. - B % XGR (:)) + ZINTER (:) * B % XGR (:) DMT % XRN_WALL_B (:) = DMT % XRN_WALL_B (:) * ( 1. - B % XGR (:)) + ZINTER (:) * B % XGR (:) ENDIF ! !                                            heat flux into the ground ! DMT % XGFLUX_WALL_A (:) = DMT % XRN_WALL_A (:) - DMT % XH_WALL_A (:) DMT % XGFLUX_WALL_B (:) = DMT % XRN_WALL_B (:) - DMT % XH_WALL_B (:) ! !                                            sensible heat flux ! !before -> PH_WL in [W.m-2(wall)] ZINTER (:) = PAC_WL (:) * XCPD * PRHOA (:) / PEXNS (:) * ( B % XT_WIN1 (:) - PT_CANYON (:)) + PE_SHADING (:) ! DMT % XH_WALL_A (:) = ( 1. - B % XGR (:)) * DMT % XH_WALL_A (:) + B % XGR (:) * ZINTER (:) DMT % XH_WALL_B (:) = ( 1. - B % XGR (:)) * DMT % XH_WALL_B (:) + B % XGR (:) * ZINTER (:) ! IF ( TOP % CBEM == \"BEM\" ) THEN ZINTER (:) = B % XF_WASTE_CAN (:) * DMT % XH_WASTE (:) / T % XWALL_O_HOR (:) DMT % XH_WALL_A (:) = DMT % XH_WALL_A (:) + ZINTER (:) DMT % XH_WALL_B (:) = DMT % XH_WALL_B (:) + ZINTER (:) ENDIF ! IF ( TOP % CBEM == \"BEM\" ) THEN !after PH_WALL in [W.m-2(facade=wall + win)] ZINTER (:) = B % XF_WASTE_CAN (:) * DMT % XLE_WASTE (:) / T % XWALL_O_HOR (:) ELSE ZINTER (:) = 0. ENDIF PLE_WL_A (:) = ZINTER (:) PLE_WL_B (:) = ZINTER (:) ! !------------------------------------------------------------------------------- ! !*      4.     Snow-free and snow-covered surfaces averaging !              --------------------------------------------- ! !*      4.1    Roads !              ----- ! !                                            heat flux into the ground ! DMT % XGFLUX_ROAD (:) = PDF_RD (:) * ( DMT % XRN_ROAD (:) - DMT % XH_ROAD (:) - PLEW_RD (:) )& + PDN_RD (:) * PGSN_RD (:) ! !                                            net radiation ! DMT % XRN_ROAD (:) = DMT % XRN_ROAD (:) * PDF_RD (:) + PRNSN_RD (:) * PDN_RD (:) ! !                                            sensible heat flux !                                            total latent heat of evaporation from !                                            the road (snow free + snow) ! ! sensible heat flux ! DMT % XH_ROAD (:) = DMT % XH_ROAD (:) * PDF_RD (:) + PHSN_RD (:) * PDN_RD (:) ! total latent heat of evaporation from  the road (snow free + snow) ! DMT % XLE_ROAD (:) = PLEW_RD (:) * PDF_RD (:) + PLESN_RD (:) * PDN_RD (:) ! !*      4.2    Roofs !              ----- ! !                                            heat flux into the ground ! DMT % XGFLUX_STRLROOF (:) = PDF_RF (:) * ( ZRN_RF_SNFREE (:) - ZH_RF_SNFREE (:) - PLEW_RF (:)) + PDN_RF (:) * PGSN_RF (:) DMT % XGFLUX_ROOF (:) = ( 1. - T % XGREENROOF (:)) * DMT % XGFLUX_STRLROOF (:) + T % XGREENROOF (:) * PGFLUX_GR (:) ! ! !                                            net radiation ! DMT % XRN_STRLROOF (:) = ZRN_RF_SNFREE (:) * PDF_RF (:) + PRNSN_RF (:) * PDN_RF (:) DMT % XRN_ROOF (:) = ( 1. - T % XGREENROOF (:)) * DMT % XRN_STRLROOF (:) + T % XGREENROOF (:) * PRN_GR (:) ! !                                            sensible heat flux !                                            total latent heat of evaporation from !                                            the roof (snow free + snow) ! ! sensible heat flux ! DMT % XH_STRLROOF (:) = DMT % XH_ROOF (:) * PDF_RF (:) + PHSN_RF (:) * PDN_RF (:) DMT % XH_ROOF (:) = ( 1. - T % XGREENROOF (:)) * DMT % XH_STRLROOF (:) + T % XGREENROOF (:) * PH_GR (:) ! ! ! total latent heat of evaporation from the roof (snow free + snow) ! DMT % XLE_STRLROOF (:) = PLEW_RF (:) * PDF_RF (:) + PLESN_RF (:) * PDN_RF (:) DMT % XLE_ROOF (:) = ( 1. - T % XGREENROOF (:)) * DMT % XLE_STRLROOF (:) + T % XGREENROOF (:) * PLE_GR (:) ! IF ( TOP % CBEM == \"BEM\" ) THEN DMT % XH_ROOF (:) = DMT % XH_ROOF (:) + ( 1 - B % XF_WASTE_CAN (:)) * DMT % XH_WASTE (:) / T % XBLD (:) DMT % XLE_ROOF (:) = DMT % XLE_ROOF (:) + ( 1 - B % XF_WASTE_CAN (:)) * DMT % XLE_WASTE (:) / T % XBLD (:) ENDIF !------------------------------------------------------------------------------- ! !*      5.     Momentum fluxes !              --------------- ! PUSTAR_TWN (:) = XUNDEF ! IF (. NOT . TOP % LCANOPY ) THEN ! ZUSTAR2 (:) = 0.0 ZVMOD (:) = PVMOD (:) ! IF ( HIMPLICIT_WIND == 'OLD' ) THEN ! old implicitation ZUSTAR2 (:) = ( PCD (:) * PVMOD (:) * PPEW_B_COEF (:)) / ( 1.0 - PRHOA (:) * PCD (:) * PVMOD (:) * PPEW_A_COEF (:)) ELSE ! new implicitation ZUSTAR2 (:) = ( PCD (:) * PVMOD (:) * ( 2. * PPEW_B_COEF (:) - PVMOD (:))) / & ( 1.0 - 2.0 * PRHOA (:) * PCD (:) * PVMOD (:) * PPEW_A_COEF (:)) ! ZVMOD (:) = PRHOA (:) * PPEW_A_COEF (:) * ZUSTAR2 (:) + PPEW_B_COEF (:) ZVMOD (:) = MAX ( ZVMOD (:), 0. ) ! WHERE ( PPEW_A_COEF (:) /= 0. ) ZUSTAR2 (:) = MAX ( ( ZVMOD (:) - PPEW_B_COEF (:) ) / ( PRHOA (:) * PPEW_A_COEF (:)), 0. ) ENDWHERE ! ENDIF ! PUSTAR_TWN (:) = SQRT ( ZUSTAR2 (:)) ! ENDIF ! !------------------------------------------------------------------------------- ! !*      6.     Averaged fluxes !              --------------- ! !*      6.1    Built fraction !              -------------- ! DMT % XRN_BLT (:) = ( T % XBLD (:) * DMT % XRN_ROOF (:) & + T % XROAD (:) * DMT % XRN_ROAD (:) & + 0.5 * T % XWALL_O_HOR (:) * DMT % XRN_WALL_A (:) & + 0.5 * T % XWALL_O_HOR (:) * DMT % XRN_WALL_B (:)) & / ( T % XROAD (:) + T % XBLD (:)) ! DMT % XH_BLT (:) = ( T % XBLD (:) * DMT % XH_ROOF (:) & + T % XROAD (:) * DMT % XH_ROAD (:) & + 0.5 * T % XWALL_O_HOR (:) * DMT % XH_WALL_A (:) & + 0.5 * T % XWALL_O_HOR (:) * DMT % XH_WALL_B (:)) & / ( T % XROAD (:) + T % XBLD (:)) ! DMT % XLE_BLT (:) = ( T % XBLD (:) * DMT % XLE_ROOF (:) & + T % XROAD (:) * DMT % XLE_ROAD (:) & + 0.5 * T % XWALL_O_HOR (:) * PLE_WL_A (:) & + 0.5 * T % XWALL_O_HOR (:) * PLE_WL_B (:)) & / ( T % XROAD (:) + T % XBLD (:)) ! DMT % XGFLUX_BLT (:) = ( T % XBLD (:) * DMT % XGFLUX_ROOF (:) & + T % XROAD (:) * DMT % XGFLUX_ROAD (:) & + 0.5 * T % XWALL_O_HOR (:) * DMT % XGFLUX_WALL_A (:) & + 0.5 * T % XWALL_O_HOR (:) * DMT % XGFLUX_WALL_B (:)) & / ( T % XROAD (:) + T % XBLD (:)) ! PMELT_BLT (:) = ( T % XBLD (:) * PMELT_RF (:) * PDN_RF (:) & + T % XROAD (:) * PMELT_RD (:) * PDN_RD (:)) & / ( T % XROAD (:) + T % XBLD (:)) ! DMT % XDQS_TOWN (:) = ( T % XBLD (:) * PDQS_RF (:) & + T % XROAD (:) * PDQS_RD (:) & + 0.5 * T % XWALL_O_HOR (:) * PDQS_WL_A (:) & + 0.5 * T % XWALL_O_HOR (:) * PDQS_WL_B (:) ) & / ( T % XROAD (:) + T % XBLD (:)) ! IF ( TOP % CBEM == \"DEF\" ) THEN DMT % XQF_BLD (:) = ( ZH_RF_SNFREE (:) + PLEW_RF (:) + & PDQS_RF (:) - ZRN_RF_SNFREE (:) ) * PDF_RF (:) & + ( PDQS_RF (:) - PGSN_RF (:) ) * PDN_RF (:) & + 0.5 * T % XWALL_O_HOR (:) / T % XBLD (:) * ( DMT % XH_WALL_A (:) + PLE_WL_A (:) + PDQS_WL_A (:) - DMT % XRN_WALL_A (:) ) & + 0.5 * T % XWALL_O_HOR (:) / T % XBLD (:) * ( DMT % XH_WALL_B (:) + PLE_WL_B (:) + PDQS_WL_B (:) - DMT % XRN_WALL_B (:) ) DMT % XFLX_BLD (:) = XUNDEF ELSEIF ( TOP % CBEM == \"BEM\" ) THEN DMT % XQF_BLD (:) = DMT % XQIN (:) * B % XN_FLOOR (:) + DMT % XHVAC_COOL (:) + DMT % XHVAC_HEAT (:) DMT % XFLX_BLD (:) = PFLX_BLD_RF (:) + 0.5 * T % XWALL_O_HOR (:) / T % XBLD (:) * PFLX_BLD_WL_A (:) & + 0.5 * T % XWALL_O_HOR (:) / T % XBLD (:) * PFLX_BLD_WL_B (:) & + PFLX_BLD_FL (:) + PFLX_BLD_MA (:) ENDIF ! DMT % XQF_TOWN (:) = T % XBLD (:) * DMT % XQF_BLD (:) + PH_TRAFFIC (:) + T % XH_INDUSTRY (:) + PLE_TRAFFIC (:) + T % XLE_INDUSTRY (:) ! !Flux from the building to its structure -> we need to add the component to the !floor, the mass and the window ! ! IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_FLUXES' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE URBAN_FLUXES","tags":"","loc":"sourcefile/urban_fluxes.f90.html"},{"title":"test_nam_var_surf.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_TEST_NAM_VAR_SURF Subroutines TEST_NAM_VARC0_SURF TEST_NAM_VARL0_SURF TEST_NAM_VARN0_SURF TEST_NAM_VARX0_SURF Source Code test_nam_var_surf.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !############################ MODULE MODI_TEST_NAM_VAR_SURF !############################ ! INTERFACE TEST_NAM_VAR_SURF ! SUBROUTINE TEST_NAM_VARC0_SURF ( KLUOUT , HNAME , HVAR , & HVALUE1 , HVALUE2 , HVALUE3 , & HVALUE4 , HVALUE5 , HVALUE6 , & HVALUE7 , HVALUE8 , HVALUE9 , & HVALUE10 ) ! INTEGER , INTENT ( IN ) :: KLUOUT ! output listing logical unit CHARACTER ( LEN =* ) , INTENT ( IN ) :: HNAME ! name of the variable to test CHARACTER ( LEN =* ) , INTENT ( IN ) :: HVAR ! variable to test CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE1 ! first possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE2 ! second possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE3 ! third possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE4 ! fourth possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE5 ! fiveth possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE6 ! sixth possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE7 ! seventh possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE8 ! eightth possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE9 ! nineth possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE10 ! tenth possible value ! END SUBROUTINE TEST_NAM_VARC0_SURF ! SUBROUTINE TEST_NAM_VARL0_SURF ( KLUOUT , HNAME , OVAR , OVALUE ) ! INTEGER , INTENT ( IN ) :: KLUOUT ! output listing logical unit CHARACTER ( LEN =* ) , INTENT ( IN ) :: HNAME ! name of the variable to test LOGICAL , INTENT ( IN ) :: OVAR ! variable to test LOGICAL , INTENT ( IN ), OPTIONAL :: OVALUE ! possible value ! END SUBROUTINE TEST_NAM_VARL0_SURF ! SUBROUTINE TEST_NAM_VARN0_SURF ( KLUOUT , HNAME , KVAR , & KVALUE1 , KVALUE2 , KVALUE3 , & KVALUE4 , KVALUE5 , KVALUE6 , & KVALUE7 , KVALUE8 , KVALUE9 , & KVALUE10 ) ! INTEGER , INTENT ( IN ) :: KLUOUT ! output listing logical unit CHARACTER ( LEN =* ) , INTENT ( IN ) :: HNAME ! name of the variable to test INTEGER , INTENT ( IN ) :: KVAR ! variable to test INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE1 ! first possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE2 ! second possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE3 ! third possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE4 ! fourth possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE5 ! fiveth possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE6 ! sixth possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE7 ! seventh possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE8 ! eightth possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE9 ! nineth possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE10 ! 10th possible value ! END SUBROUTINE TEST_NAM_VARN0_SURF ! SUBROUTINE TEST_NAM_VARX0_SURF ( KLUOUT , HNAME , PVAR , & PVALUE1 , PVALUE2 , PVALUE3 , & PVALUE4 , PVALUE5 , PVALUE6 , & PVALUE7 , PVALUE8 , PVALUE9 , & PVALUE10 ) ! INTEGER , INTENT ( IN ) :: KLUOUT ! output listing logical unit CHARACTER ( LEN =* ) , INTENT ( IN ) :: HNAME ! name of the variable to test REAL , INTENT ( IN ) :: PVAR ! variable to test REAL , INTENT ( IN ), OPTIONAL :: PVALUE1 ! first possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE2 ! second possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE3 ! third possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE4 ! fourth possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE5 ! fiveth possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE6 ! sixth possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE7 ! seventh possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE8 ! eightth possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE9 ! nineth possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE10 ! 10th possible value ! END SUBROUTINE TEST_NAM_VARX0_SURF ! END INTERFACE ! END MODULE MODI_TEST_NAM_VAR_SURF ! ! !     ######################################################### SUBROUTINE TEST_NAM_VARC0_SURF ( KLUOUT , HNAME , HVAR , & HVALUE1 , HVALUE2 , HVALUE3 , & HVALUE4 , HVALUE5 , HVALUE6 , & HVALUE7 , HVALUE8 , HVALUE9 , & HVALUE10 ) !     ######################################################### ! !!****  *TEST_NAM_VARC0* - routine to test the value of a character var. !! !!    PURPOSE !!    ------- ! ! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !!      FM_READ !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. MASSON      *METEO-FRANCE* !! !!    MODIFICATIONS !!    ------------- !! !!      original                                                     17/04/98 !---------------------------------------------------------------------------- ! !*      0.    DECLARATIONS !             ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! USE MODI_ABOR1_SFX ! IMPLICIT NONE ! !*      0.1   Declarations of arguments ! INTEGER , INTENT ( IN ) :: KLUOUT ! output listing logical unit CHARACTER ( LEN =* ) , INTENT ( IN ) :: HNAME ! name of the variable to test CHARACTER ( LEN =* ) , INTENT ( IN ) :: HVAR ! variable to test CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE1 ! first possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE2 ! second possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE3 ! third possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE4 ! fourth possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE5 ! fiveth possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE6 ! sixth possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE7 ! seventh possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE8 ! eightth possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE9 ! nineth possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE10 ! 10th possible value REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*      0.2   Declarations of local variables ! ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARC0_SURF' , 0 , ZHOOK_HANDLE ) IF ( PRESENT ( HVALUE1 ) ) THEN IF ( HVAR == HVALUE1 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARC0_SURF' , 1 , ZHOOK_HANDLE ) IF ( HVAR == HVALUE1 ) RETURN END IF ! IF ( PRESENT ( HVALUE2 ) ) THEN IF ( HVAR == HVALUE2 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARC0_SURF' , 1 , ZHOOK_HANDLE ) IF ( HVAR == HVALUE2 ) RETURN END IF ! IF ( PRESENT ( HVALUE3 ) ) THEN IF ( HVAR == HVALUE3 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARC0_SURF' , 1 , ZHOOK_HANDLE ) IF ( HVAR == HVALUE3 ) RETURN END IF ! IF ( PRESENT ( HVALUE4 ) ) THEN IF ( HVAR == HVALUE4 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARC0_SURF' , 1 , ZHOOK_HANDLE ) IF ( HVAR == HVALUE4 ) RETURN END IF ! IF ( PRESENT ( HVALUE5 ) ) THEN IF ( HVAR == HVALUE5 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARC0_SURF' , 1 , ZHOOK_HANDLE ) IF ( HVAR == HVALUE5 ) RETURN END IF ! IF ( PRESENT ( HVALUE6 ) ) THEN IF ( HVAR == HVALUE6 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARC0_SURF' , 1 , ZHOOK_HANDLE ) IF ( HVAR == HVALUE6 ) RETURN END IF ! IF ( PRESENT ( HVALUE7 ) ) THEN IF ( HVAR == HVALUE7 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARC0_SURF' , 1 , ZHOOK_HANDLE ) IF ( HVAR == HVALUE7 ) RETURN END IF ! IF ( PRESENT ( HVALUE8 ) ) THEN IF ( HVAR == HVALUE8 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARC0_SURF' , 1 , ZHOOK_HANDLE ) IF ( HVAR == HVALUE8 ) RETURN END IF ! IF ( PRESENT ( HVALUE9 ) ) THEN IF ( HVAR == HVALUE9 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARC0_SURF' , 1 , ZHOOK_HANDLE ) IF ( HVAR == HVALUE9 ) RETURN END IF ! IF ( PRESENT ( HVALUE10 ) ) THEN IF ( HVAR == HVALUE10 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARC0_SURF' , 1 , ZHOOK_HANDLE ) IF ( HVAR == HVALUE10 ) RETURN END IF ! !------------------------------------------------------------------------------- ! WRITE ( KLUOUT , * ) ' ' WRITE ( KLUOUT , * ) 'FATAL ERROR:' WRITE ( KLUOUT , * ) '-----------' WRITE ( KLUOUT , * ) ' ' WRITE ( KLUOUT , * ) 'Value \"' , HVAR , '\" is not allowed for variable ' , HNAME WRITE ( KLUOUT , * ) ' ' WRITE ( KLUOUT , * ) 'Possible values are:' IF ( PRESENT ( HVALUE1 ) ) WRITE ( KLUOUT , * ) '\"' , HVALUE1 , '\"' IF ( PRESENT ( HVALUE2 ) ) WRITE ( KLUOUT , * ) '\"' , HVALUE2 , '\"' IF ( PRESENT ( HVALUE3 ) ) WRITE ( KLUOUT , * ) '\"' , HVALUE3 , '\"' IF ( PRESENT ( HVALUE4 ) ) WRITE ( KLUOUT , * ) '\"' , HVALUE4 , '\"' IF ( PRESENT ( HVALUE5 ) ) WRITE ( KLUOUT , * ) '\"' , HVALUE5 , '\"' IF ( PRESENT ( HVALUE6 ) ) WRITE ( KLUOUT , * ) '\"' , HVALUE6 , '\"' IF ( PRESENT ( HVALUE7 ) ) WRITE ( KLUOUT , * ) '\"' , HVALUE7 , '\"' IF ( PRESENT ( HVALUE8 ) ) WRITE ( KLUOUT , * ) '\"' , HVALUE8 , '\"' IF ( PRESENT ( HVALUE9 ) ) WRITE ( KLUOUT , * ) '\"' , HVALUE9 , '\"' IF ( PRESENT ( HVALUE10 )) WRITE ( KLUOUT , * ) '\"' , HVALUE10 , '\"' ! CALL ABOR1_SFX ( 'TEST_NAM_VAR_SURF: (1) CHARACTER VALUE NOT ALLOWED' ) IF ( LHOOK ) CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARC0_SURF' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- END SUBROUTINE TEST_NAM_VARC0_SURF !     ######################################################### SUBROUTINE TEST_NAM_VARL0_SURF ( KLUOUT , HNAME , OVAR , OVALUE ) !     ######################################################### ! !!****  *TEST_NAM_VARL0* - routine to test the value of a logical !! !!    PURPOSE !!    ------- ! ! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !!      FM_READ !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      P. Le Moigne      *METEO-FRANCE* !! !!    MODIFICATIONS !!    ------------- !! !!      original                                                     04/07 !---------------------------------------------------------------------------- ! !*      0.    DECLARATIONS !             ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! USE MODI_ABOR1_SFX ! IMPLICIT NONE ! !*      0.1   Declarations of arguments ! INTEGER , INTENT ( IN ) :: KLUOUT ! output listing logical unit CHARACTER ( LEN =* ) , INTENT ( IN ) :: HNAME ! name of the variable to test LOGICAL , INTENT ( IN ) :: OVAR ! variable to test LOGICAL , INTENT ( IN ), OPTIONAL :: OVALUE ! possible value REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*      0.2   Declarations of local variables ! ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARL0_SURF' , 0 , ZHOOK_HANDLE ) IF ( PRESENT ( OVALUE ) ) THEN CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARL0_SURF' , 1 , ZHOOK_HANDLE ) IF ( ( OVAR . AND . OVALUE ) . OR . ( . NOT . OVAR . AND . . NOT . OVALUE ) . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARL0_SURF' , 1 , ZHOOK_HANDLE ) IF ( ( OVAR . AND . OVALUE ) . OR . ( . NOT . OVAR . AND . . NOT . OVALUE ) ) RETURN END IF ! !------------------------------------------------------------------------------- ! WRITE ( KLUOUT , * ) ' ' WRITE ( KLUOUT , * ) 'FATAL ERROR:' WRITE ( KLUOUT , * ) '-----------' WRITE ( KLUOUT , * ) ' ' WRITE ( KLUOUT , * ) 'Value \"' , OVAR , '\" is not allowed for variable ' , HNAME WRITE ( KLUOUT , * ) ' ' WRITE ( KLUOUT , * ) 'Possible values are:' IF ( PRESENT ( OVALUE ) ) WRITE ( KLUOUT , * ) '\"' , OVALUE , '\"' ! CALL ABOR1_SFX ( 'TEST_NAM_VAR_SURF: (2) LOGICAL VALUE NOT ALLOWED' ) IF ( LHOOK ) CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARL0_SURF' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- END SUBROUTINE TEST_NAM_VARL0_SURF !     ######################################################### SUBROUTINE TEST_NAM_VARN0_SURF ( KLUOUT , HNAME , KVAR , & KVALUE1 , KVALUE2 , KVALUE3 , & KVALUE4 , KVALUE5 , KVALUE6 , & KVALUE7 , KVALUE8 , KVALUE9 , & KVALUE10 ) !     ######################################################### ! !!****  *TEST_NAM_VARN0* - routine to test the value of an integer var. !! !!    PURPOSE !!    ------- ! ! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !!      FM_READ !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      P. Le Moigne      *METEO-FRANCE* !! !!    MODIFICATIONS !!    ------------- !! !!      original  04/2007 !---------------------------------------------------------------------------- ! !*      0.    DECLARATIONS !             ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! USE MODI_ABOR1_SFX ! IMPLICIT NONE ! !*      0.1   Declarations of arguments ! INTEGER , INTENT ( IN ) :: KLUOUT ! output listing logical unit CHARACTER ( LEN =* ) , INTENT ( IN ) :: HNAME ! name of the variable to test INTEGER , INTENT ( IN ) :: KVAR ! variable to test INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE1 ! first possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE2 ! second possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE3 ! third possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE4 ! fourth possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE5 ! fiveth possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE6 ! sixth possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE7 ! seventh possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE8 ! eightth possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE9 ! nineth possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE10 ! 10th possible value REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*      0.2   Declarations of local variables ! ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 0 , ZHOOK_HANDLE ) IF ( PRESENT ( KVALUE1 ) ) THEN IF ( KVAR == KVALUE1 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( KVAR == KVALUE1 ) RETURN END IF ! IF ( PRESENT ( KVALUE2 ) ) THEN IF ( KVAR == KVALUE2 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( KVAR == KVALUE2 ) RETURN END IF ! IF ( PRESENT ( KVALUE3 ) ) THEN IF ( KVAR == KVALUE3 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( KVAR == KVALUE3 ) RETURN END IF ! IF ( PRESENT ( KVALUE4 ) ) THEN IF ( KVAR == KVALUE4 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( KVAR == KVALUE4 ) RETURN END IF ! IF ( PRESENT ( KVALUE5 ) ) THEN IF ( KVAR == KVALUE5 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( KVAR == KVALUE5 ) RETURN END IF ! IF ( PRESENT ( KVALUE6 ) ) THEN IF ( KVAR == KVALUE6 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( KVAR == KVALUE6 ) RETURN END IF ! IF ( PRESENT ( KVALUE7 ) ) THEN IF ( KVAR == KVALUE7 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( KVAR == KVALUE7 ) RETURN END IF ! IF ( PRESENT ( KVALUE8 ) ) THEN IF ( KVAR == KVALUE8 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( KVAR == KVALUE8 ) RETURN END IF ! IF ( PRESENT ( KVALUE9 ) ) THEN IF ( KVAR == KVALUE9 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( KVAR == KVALUE9 ) RETURN END IF ! IF ( PRESENT ( KVALUE10 ) ) THEN IF ( KVAR == KVALUE10 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( KVAR == KVALUE10 ) RETURN END IF ! !------------------------------------------------------------------------------- ! WRITE ( KLUOUT , * ) ' ' WRITE ( KLUOUT , * ) 'FATAL ERROR:' WRITE ( KLUOUT , * ) '-----------' WRITE ( KLUOUT , * ) ' ' WRITE ( KLUOUT , * ) 'Value \"' , KVAR , '\" is not allowed for variable ' , HNAME WRITE ( KLUOUT , * ) ' ' WRITE ( KLUOUT , * ) 'Possible values are:' IF ( PRESENT ( KVALUE1 ) ) WRITE ( KLUOUT , * ) '\"' , KVALUE1 , '\"' IF ( PRESENT ( KVALUE2 ) ) WRITE ( KLUOUT , * ) '\"' , KVALUE2 , '\"' IF ( PRESENT ( KVALUE3 ) ) WRITE ( KLUOUT , * ) '\"' , KVALUE3 , '\"' IF ( PRESENT ( KVALUE4 ) ) WRITE ( KLUOUT , * ) '\"' , KVALUE4 , '\"' IF ( PRESENT ( KVALUE5 ) ) WRITE ( KLUOUT , * ) '\"' , KVALUE5 , '\"' IF ( PRESENT ( KVALUE6 ) ) WRITE ( KLUOUT , * ) '\"' , KVALUE6 , '\"' IF ( PRESENT ( KVALUE7 ) ) WRITE ( KLUOUT , * ) '\"' , KVALUE7 , '\"' IF ( PRESENT ( KVALUE8 ) ) WRITE ( KLUOUT , * ) '\"' , KVALUE8 , '\"' IF ( PRESENT ( KVALUE9 ) ) WRITE ( KLUOUT , * ) '\"' , KVALUE9 , '\"' IF ( PRESENT ( KVALUE10 )) WRITE ( KLUOUT , * ) '\"' , KVALUE10 , '\"' ! CALL ABOR1_SFX ( 'TEST_NAM_VAR_SURF: (3) INTEGER VALUE NOT ALLOWED' ) IF ( LHOOK ) CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- END SUBROUTINE TEST_NAM_VARN0_SURF !     ######################################################### SUBROUTINE TEST_NAM_VARX0_SURF ( KLUOUT , HNAME , PVAR , & PVALUE1 , PVALUE2 , PVALUE3 , & PVALUE4 , PVALUE5 , PVALUE6 , & PVALUE7 , PVALUE8 , PVALUE9 , & PVALUE10 ) !     ######################################################### ! !!****  *TEST_NAM_VARN0* - routine to test the value of an integer var. !! !!    PURPOSE !!    ------- ! ! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !!      FM_READ !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      B. Decharme      *METEO-FRANCE* !! !!    MODIFICATIONS !!    ------------- !! !!      original  01/2014 !---------------------------------------------------------------------------- ! !*      0.    DECLARATIONS !             ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! USE MODI_ABOR1_SFX ! IMPLICIT NONE ! !*      0.1   Declarations of arguments ! INTEGER , INTENT ( IN ) :: KLUOUT ! output listing logical unit CHARACTER ( LEN =* ) , INTENT ( IN ) :: HNAME ! name of the variable to test REAL , INTENT ( IN ) :: PVAR ! variable to test REAL , INTENT ( IN ), OPTIONAL :: PVALUE1 ! first possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE2 ! second possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE3 ! third possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE4 ! fourth possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE5 ! fiveth possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE6 ! sixth possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE7 ! seventh possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE8 ! eightth possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE9 ! nineth possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE10 ! 10th possible value REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*      0.2   Declarations of local variables ! ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 0 , ZHOOK_HANDLE ) IF ( PRESENT ( PVALUE1 ) ) THEN IF ( PVAR == PVALUE1 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( PVAR == PVALUE1 ) RETURN END IF ! IF ( PRESENT ( PVALUE2 ) ) THEN IF ( PVAR == PVALUE2 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( PVAR == PVALUE2 ) RETURN END IF ! IF ( PRESENT ( PVALUE3 ) ) THEN IF ( PVAR == PVALUE3 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( PVAR == PVALUE3 ) RETURN END IF ! IF ( PRESENT ( PVALUE4 ) ) THEN IF ( PVAR == PVALUE4 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( PVAR == PVALUE4 ) RETURN END IF ! IF ( PRESENT ( PVALUE5 ) ) THEN IF ( PVAR == PVALUE5 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( PVAR == PVALUE5 ) RETURN END IF ! IF ( PRESENT ( PVALUE6 ) ) THEN IF ( PVAR == PVALUE6 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( PVAR == PVALUE6 ) RETURN END IF ! IF ( PRESENT ( PVALUE7 ) ) THEN IF ( PVAR == PVALUE7 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( PVAR == PVALUE7 ) RETURN END IF ! IF ( PRESENT ( PVALUE8 ) ) THEN IF ( PVAR == PVALUE8 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( PVAR == PVALUE8 ) RETURN END IF ! IF ( PRESENT ( PVALUE9 ) ) THEN IF ( PVAR == PVALUE9 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( PVAR == PVALUE9 ) RETURN END IF ! IF ( PRESENT ( PVALUE10 ) ) THEN IF ( PVAR == PVALUE10 . AND . LHOOK ) & CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) IF ( PVAR == PVALUE10 ) RETURN END IF ! !------------------------------------------------------------------------------- ! WRITE ( KLUOUT , * ) ' ' WRITE ( KLUOUT , * ) 'FATAL ERROR:' WRITE ( KLUOUT , * ) '-----------' WRITE ( KLUOUT , * ) ' ' WRITE ( KLUOUT , * ) 'Value \"' , PVAR , '\" is not allowed for variable ' , HNAME WRITE ( KLUOUT , * ) ' ' WRITE ( KLUOUT , * ) 'Possible values are:' IF ( PRESENT ( PVALUE1 ) ) WRITE ( KLUOUT , * ) '\"' , PVALUE1 , '\"' IF ( PRESENT ( PVALUE2 ) ) WRITE ( KLUOUT , * ) '\"' , PVALUE2 , '\"' IF ( PRESENT ( PVALUE3 ) ) WRITE ( KLUOUT , * ) '\"' , PVALUE3 , '\"' IF ( PRESENT ( PVALUE4 ) ) WRITE ( KLUOUT , * ) '\"' , PVALUE4 , '\"' IF ( PRESENT ( PVALUE5 ) ) WRITE ( KLUOUT , * ) '\"' , PVALUE5 , '\"' IF ( PRESENT ( PVALUE6 ) ) WRITE ( KLUOUT , * ) '\"' , PVALUE6 , '\"' IF ( PRESENT ( PVALUE7 ) ) WRITE ( KLUOUT , * ) '\"' , PVALUE7 , '\"' IF ( PRESENT ( PVALUE8 ) ) WRITE ( KLUOUT , * ) '\"' , PVALUE8 , '\"' IF ( PRESENT ( PVALUE9 ) ) WRITE ( KLUOUT , * ) '\"' , PVALUE9 , '\"' IF ( PRESENT ( PVALUE10 )) WRITE ( KLUOUT , * ) '\"' , PVALUE10 , '\"' ! CALL ABOR1_SFX ( 'TEST_NAM_VAR_SURF: (4) REAL VALUE NOT ALLOWED' ) IF ( LHOOK ) CALL DR_HOOK ( 'MODI_TEST_NAM_VAR_SURF:TEST_NAM_VARN0_SURF' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- END SUBROUTINE TEST_NAM_VARX0_SURF","tags":"","loc":"sourcefile/test_nam_var_surf.f90.html"},{"title":"bem_morpho.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines BEM_MORPHO Source Code bem_morpho.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !##################################################################### SUBROUTINE BEM_MORPHO ( PBLD , PWALL_O_HOR , PBLD_HEIGHT , PWALL_O_BLD , B ) !##################################################################### ! !!**** *BEM_MORPHO !! !!    PURPOSE !!    ------- !! compute morphometric parameter of the building for BEM !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      G. Pigeon   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    10/2011 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_BEM_n , ONLY : BEM_t ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! REAL , DIMENSION (:), INTENT ( IN ) :: PBLD ! Urban horizontal building density REAL , DIMENSION (:), INTENT ( IN ) :: PWALL_O_HOR ! Wall to horizontal surface ratio REAL , DIMENSION (:), INTENT ( IN ) :: PBLD_HEIGHT ! Average building height [m] REAL , DIMENSION (:), INTENT ( OUT ) :: PWALL_O_BLD ! wall surface per ground building surface [m2(wall)/m2(bld)] TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! !*      0.2    Declarations of local variables ! REAL , DIMENSION ( SIZE ( PBLD )) :: ZF_AUX2 ! Auxiliar view factor ! !RJ: missing declaration INTEGER :: JJ ! !------------------------------------------------------------------------------ ! !*    1.   Verify floor height !          ------------------- ! DO JJ = 1 , SIZE ( PBLD ) IF ( B % XFLOOR_HEIGHT ( JJ ) < 2.5 ) THEN !    WRITE(ILUOUT,*) 'WARNING: B%XFLOOR_HEIGHT low ',B%XFLOOR_HEIGHT(JJ),' grid mesh number ',JJ B % XFLOOR_HEIGHT ( JJ ) = 2.5 ENDIF IF ( B % XFLOOR_HEIGHT ( JJ ) > PBLD_HEIGHT ( JJ )) THEN !    WRITE(ILUOUT,*) 'WARNING: B%XFLOOR_HEIGHT higher than PBLD_HEIGHT ',B%XFLOOR_HEIGHT(JJ),' grid mesh number ',JJ, & !                    'set to PBLD_HEIGHT' B % XFLOOR_HEIGHT ( JJ ) = PBLD_HEIGHT ( JJ ) ENDIF ! !*    1.   Verify location of HVAC release for very extended buildings !          ----------------------------------------------------------- ! IF ( PBLD ( JJ ) > 0.9999 . AND . B % XF_WASTE_CAN ( JJ ) > 0. ) THEN !    WRITE(ILUOUT,*) 'WARNING: B%XF_WASTE_CAN cannot be higher than 0. while PBLD is 0.9999',B%XF_WASTE_CAN(JJ), & !                    ' grid mesh number ',JJ,' set to 0.' B % XF_WASTE_CAN ( JJ ) = 0. ENDIF END DO ! !*       1.    floor number, relative surf. and view factors caculation !              -------------------------------------------------------- ! B % XN_FLOOR (:) = FLOAT ( NINT ( PBLD_HEIGHT (:) / B % XFLOOR_HEIGHT (:) )) PWALL_O_BLD (:) = PWALL_O_HOR (:) * ( 1. - B % XGR (:)) / PBLD (:) ! [m2(wall)/m2(bld)] B % XGLAZ_O_BLD (:) = PWALL_O_HOR (:) * B % XGR (:) / PBLD (:) ! [m2(win)/m2(bld)] WHERE ( B % XN_FLOOR > 1.5 ) !* more than 1 floor level -> the floor and the roof don't see each other ! !           ROOF !  |---------------------| !  |                     | !  |                     | !  |        MASS         | !  |---------------------| !  |---------------------| !  |        MASS         | !  |                     | !  |                     | !  |        FLOOR        | !  |---------------------| ! B % XMASS_O_BLD (:) = 2 * ( B % XN_FLOOR (:) - 1. ) ! [m2(mass)/m2(bld)] B % XFLOOR_HW_RATIO (:) = PWALL_O_HOR (:) / B % XN_FLOOR (:) / PBLD (:) / 2. ! B % XF_FLOOR_MASS (:) = ( B % XFLOOR_HW_RATIO (:) ** 2 + 1. ) ** 0.5 - B % XFLOOR_HW_RATIO (:) B % XF_FLOOR_WALL (:) = ( 1. - B % XF_FLOOR_MASS (:)) * ( 1. - B % XGR (:)) B % XF_FLOOR_WIN (:) = ( 1. - B % XF_FLOOR_MASS (:)) * B % XGR (:) B % XF_FLOOR_ROOF (:) = 0. ! no rad interaction between floor and roof ! ZF_AUX2 (:) = ( 1. - B % XF_FLOOR_MASS (:)) / B % XFLOOR_HW_RATIO (:) ! B % XF_WALL_FLOOR (:) = ZF_AUX2 (:) / ( 2. * B % XN_FLOOR (:) ) B % XF_WALL_MASS (:) = B % XF_WALL_FLOOR (:) * ( 2. * B % XN_FLOOR (:) - 2. ) B % XF_WALL_WIN (:) = ( 1. - ZF_AUX2 (:)) * B % XGR (:) ! B % XF_WIN_FLOOR (:) = B % XF_WALL_FLOOR (:) B % XF_WIN_MASS (:) = B % XF_WALL_MASS (:) B % XF_WIN_WALL (:) = ( 1. - B % XF_WIN_FLOOR (:) * 2. - B % XF_WIN_MASS (:) ) * ( 1. - B % XGR (:)) B % XF_WIN_WIN (:) = ( 1. - B % XF_WIN_FLOOR (:) * 2. - B % XF_WIN_MASS (:) ) * B % XGR (:) ! B % XF_MASS_FLOOR (:) = B % XF_FLOOR_MASS (:) / B % XMASS_O_BLD (:) B % XF_MASS_WALL (:) = PWALL_O_BLD (:) * B % XF_WALL_MASS (:) / B % XMASS_O_BLD (:) B % XF_MASS_WIN (:) = B % XGLAZ_O_BLD (:) * B % XF_WIN_MASS (:) / B % XMASS_O_BLD (:) ELSE WHERE !* 1 floor level -> no mass view factors ; roof and floor see each other ! !           ROOF !  |---------------------| !  |                     | !  |                     | !  |        FLOOR        | !  |---------------------| ! B % XMASS_O_BLD (:) = 0. B % XFLOOR_HW_RATIO (:) = PWALL_O_HOR (:) / PBLD (:) / 2. ! B % XF_FLOOR_ROOF (:) = ( B % XFLOOR_HW_RATIO (:) ** 2 + 1. ) ** 0.5 - B % XFLOOR_HW_RATIO (:) B % XF_FLOOR_MASS (:) = 0. B % XF_FLOOR_WALL (:) = ( 1. - B % XF_FLOOR_ROOF (:)) * ( 1. - B % XGR (:)) B % XF_FLOOR_WIN (:) = ( 1. - B % XF_FLOOR_ROOF (:)) * B % XGR (:) ! ZF_AUX2 (:) = ( 1. - B % XF_FLOOR_ROOF (:)) / B % XFLOOR_HW_RATIO (:) ! B % XF_WALL_FLOOR (:) = ZF_AUX2 (:) / 2. B % XF_WALL_MASS (:) = 0. B % XF_WALL_WIN (:) = ( 1. - ZF_AUX2 (:)) * B % XGR (:) ! B % XF_WIN_FLOOR (:) = B % XF_WALL_FLOOR (:) B % XF_WIN_MASS (:) = 0. B % XF_WIN_WALL (:) = ( 1. - B % XF_WIN_FLOOR (:) * 2. - B % XF_WIN_MASS (:) ) * ( 1. - B % XGR (:)) B % XF_WIN_WIN (:) = ( 1. - B % XF_WIN_FLOOR (:) * 2. - B % XF_WIN_MASS (:) ) * B % XGR (:) ! B % XF_MASS_FLOOR (:) = 0. B % XF_MASS_WALL (:) = 0. B % XF_MASS_WIN (:) = 0. END WHERE ! END SUBROUTINE BEM_MORPHO !-------------------------------------------------------------------------------","tags":"","loc":"sourcefile/bem_morpho.f90.html"},{"title":"spll_modi_urban_solar_abs.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_URBAN_SOLAR_ABS Source Code spll_modi_urban_solar_abs.f90 Source Code !auto_modi:spll_urban_solar_abs.D MODULE MODI_URBAN_SOLAR_ABS INTERFACE SUBROUTINE URBAN_SOLAR_ABS ( TOP , T , B , DMT , PDIR_SW , PSCA_SW , PZENITH , PAZIM , & PFRAC_PANEL , PALB_PANEL , PALB_GD , PSVF_GD , PALB_GRF , & PDN_RF , PDF_RF , PDN_RD , PDF_RD , PREC_SW_RD , & PREC_SW_SN_RD , PREC_SW_WL_A , PREC_SW_WL_B , & PREC_SW_GD , PREC_SW_RF , PDIR_ALB_TWN , PSCA_ALB_TWN , & PSW_RAD_GD , PREC_SW_WIN , PREF_SW_GRND , PREF_SW_FAC , & PE_SHADING , OSHAD_DAY , OSHADE , OALB_ONLY ) USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t IMPLICIT NONE TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT REAL , DIMENSION (:), INTENT ( IN ) :: PDIR_SW ! incoming direct solar radiation REAL , DIMENSION (:), INTENT ( IN ) :: PSCA_SW ! scattered incoming solar rad. REAL , DIMENSION (:), INTENT ( IN ) :: PZENITH ! solar zenithal angle REAL , DIMENSION (:), INTENT ( IN ) :: PAZIM ! solar azimuthal angle REAL , DIMENSION (:), INTENT ( IN ) :: PFRAC_PANEL ! Fraction of solar panel on roofs (-) REAL , DIMENSION (:), INTENT ( IN ) :: PALB_PANEL ! Albedo     of solar panels (-) REAL , DIMENSION (:), INTENT ( IN ) :: PALB_GD ! GD areas albedo REAL , DIMENSION (:), INTENT ( IN ) :: PSVF_GD ! GD areas sky view factor REAL , DIMENSION (:), INTENT ( IN ) :: PALB_GRF ! green roof albedo REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RF ! snow-covered roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RF ! snow-free    roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered road fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RD ! snow-free    road fraction REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_RD ! solar radiation received REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_WL_A ! solar radiation received REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_WL_B ! solar radiation received REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_GD ! solar radiation received REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_RF ! solar radiation received REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_SN_RD ! solar radiation received REAL , DIMENSION (:), INTENT ( OUT ) :: PDIR_ALB_TWN ! town direct albedo REAL , DIMENSION (:), INTENT ( OUT ) :: PSCA_ALB_TWN ! town diffuse albedo REAL , DIMENSION (:), INTENT ( OUT ) :: PSW_RAD_GD ! solar radiation reaching GD areas REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_WIN ! solar radiation received by windows REAL , DIMENSION (:), INTENT ( OUT ) :: PREF_SW_GRND ! total solar radiation reflected by ground REAL , DIMENSION (:), INTENT ( OUT ) :: PREF_SW_FAC ! total solar radiation reflected by wall REAL , DIMENSION (:), INTENT ( OUT ) :: PE_SHADING ! Energy that is not reflected LOGICAL , DIMENSION (:), INTENT ( INOUT ) :: OSHAD_DAY ! has shading been necessary this day ? LOGICAL , DIMENSION (:), INTENT ( IN ) :: OSHADE ! are building conditions favorable for LOGICAL , INTENT ( IN ), OPTIONAL :: OALB_ONLY END SUBROUTINE URBAN_SOLAR_ABS END INTERFACE END MODULE MODI_URBAN_SOLAR_ABS","tags":"","loc":"sourcefile/spll_modi_urban_solar_abs.f90.html"},{"title":"spll_modi_open_namelist.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_OPEN_NAMELIST Source Code spll_modi_open_namelist.f90 Source Code !auto_modi:spll_open_namelist.D MODULE MODI_OPEN_NAMELIST INTERFACE SUBROUTINE OPEN_NAMELIST ( HPROGRAM , KLUNAM , HFILE ) IMPLICIT NONE CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HPROGRAM ! main program INTEGER , INTENT ( OUT ) :: KLUNAM ! logical unit of namelist CHARACTER ( LEN = 28 ), INTENT ( IN ), OPTIONAL :: HFILE ! ASCII file to open END SUBROUTINE OPEN_NAMELIST END INTERFACE END MODULE MODI_OPEN_NAMELIST","tags":"","loc":"sourcefile/spll_modi_open_namelist.f90.html"},{"title":"urban_drag.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines URBAN_DRAG Source Code urban_drag.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ######### SUBROUTINE URBAN_DRAG ( TOP , T , B , HIMPLICIT_WIND , PTSTEP , PT_CANYON , PQ_CANYON , & PU_CANYON , PT_LOWCAN , PQ_LOWCAN , PU_LOWCAN , PZ_LOWCAN , & PTS_ROOF , PTS_ROAD , PTS_WALL , PTS_GARDEN , & PDELT_SNOW_ROOF , PDELT_SNOW_ROAD , PEXNS , PEXNA , PTA , & PQA , PPS , PRHOA , PZREF , PUREF , PVMOD , PWS_ROOF_MAX , & PWS_ROAD_MAX , PPEW_A_COEF , PPEW_B_COEF , & PPEW_A_COEF_LOWCAN , PPEW_B_COEF_LOWCAN , PQSAT_ROOF , & PQSAT_ROAD , PDELT_ROOF , PDELT_ROAD , PCD , PCDN , PAC_ROOF , & PAC_ROOF_WAT , PAC_WALL , PAC_ROAD , PAC_ROAD_WAT , PAC_TOP , & PAC_GARDEN , PRI , PUW_ROAD , PUW_ROOF , PDUWDU_ROAD , & PDUWDU_ROOF , PUSTAR_TOWN , PAC_WIN ) !   ########################################################################## ! !!****  *URBAN_DRAG* !! !!    PURPOSE !!    ------- ! !     Computes the surface drag over artificial surfaces as towns, !     taking into account the canyon like geometry of urbanized areas. ! ! !!**  METHOD !!    ------ ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/01/98 !!          01/00 (V. Masson)  separation of skimming, wake and isolated flows !!          09/00 (V. Masson)  use of Z0 for roads !!          12/02 (A. Lemonsu) convective speed w* in canyon !             04 (A. Lemonsu) z0h=z0m for resistance canyon-atmosphere !          03/08 (S. Leroyer) debug PU_CAN (1. * H/3) !          12/08 (S. Leroyer) option (TOP%CZ0H) for z0h applied on roof, road and town !!         09/12 B. Decharme new wind implicitation !          11/11 (G. Pigeon) apply only urban_exch_coef when necessary if !                            canopy/no canopy !          09/12 (G. Pigeon) add new formulation for outdoor conv. coef for !                            wall/roof/window !! !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS , ONLY : XLVTT , XPI , XCPD , XG , XKARMAN ! !USE MODE_SBLS USE MODE_THERMOS USE MODI_URBAN_EXCH_COEF USE MODE_CONV_DOE ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option !                                                     ! 'OLD' = direct !                                                     ! 'NEW' = Taylor serie, order 1 ! REAL , INTENT ( IN ) :: PTSTEP ! time-step REAL , DIMENSION (:), INTENT ( IN ) :: PT_CANYON ! canyon air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PQ_CANYON ! canyon air specific humidity. REAL , DIMENSION (:), INTENT ( IN ) :: PU_CANYON ! hor. wind in canyon REAL , DIMENSION (:), INTENT ( IN ) :: PU_LOWCAN ! wind near the road REAL , DIMENSION (:), INTENT ( IN ) :: PT_LOWCAN ! temp. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PQ_LOWCAN ! hum. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PZ_LOWCAN ! height of atm. var. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PTS_ROOF ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_ROAD ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WALL ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GARDEN ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_SNOW_ROOF ! fraction of snow on roof REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_SNOW_ROAD ! fraction of snow on road REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PEXNA ! exner function ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first ! atmospheric level (temperature) REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the first ! atmospheric level (wind) REAL , DIMENSION (:), INTENT ( IN ) :: PWS_ROOF_MAX ! maximum deepness of roof REAL , DIMENSION (:), INTENT ( IN ) :: PWS_ROAD_MAX ! and water reservoirs (kg/m2) REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients (m2s/kg) REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling     (m/s) REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_A_COEF_LOWCAN ! implicit coefficients for wind coupling (m2s/kg) REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_B_COEF_LOWCAN ! between low canyon wind and road (m/s) ! REAL , DIMENSION (:), INTENT ( OUT ) :: PQSAT_ROOF ! qsat(Ts) REAL , DIMENSION (:), INTENT ( OUT ) :: PQSAT_ROAD ! qsat(Ts) REAL , DIMENSION (:), INTENT ( OUT ) :: PDELT_ROOF ! water fraction on REAL , DIMENSION (:), INTENT ( OUT ) :: PDELT_ROAD ! snow-free surfaces REAL , DIMENSION (:), INTENT ( OUT ) :: PCD ! drag coefficient REAL , DIMENSION (:), INTENT ( OUT ) :: PCDN ! neutral drag coefficient REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_ROOF ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_ROOF_WAT ! aerodynamical conductance (for water) REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_WALL ! aerodynamical conductance !                                                   ! between canyon air and !                                                   ! walls REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_ROAD ! aerodynamical conductance !                                                   ! between canyon air and !                                                   ! roads REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_ROAD_WAT ! aerodynamical conductance !                                                   ! between canyon air and !                                                   ! road (for water) REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_TOP ! aerodynamical conductance !                                                   ! between canyon top and atm. REAL , DIMENSION (:), INTENT ( IN ) :: PAC_GARDEN ! aerodynamical conductance !                                                   ! between canyon air and GARDEN areas REAL , DIMENSION (:), INTENT ( OUT ) :: PRI ! Town Richardson number ! REAL , DIMENSION (:), INTENT ( OUT ) :: PUW_ROAD ! Momentum flux for roads REAL , DIMENSION (:), INTENT ( OUT ) :: PUW_ROOF ! Momentum flux for roofs REAL , DIMENSION (:), INTENT ( OUT ) :: PDUWDU_ROAD ! REAL , DIMENSION (:), INTENT ( OUT ) :: PDUWDU_ROOF ! REAL , DIMENSION (:), INTENT ( OUT ) :: PUSTAR_TOWN ! Fraction velocity for town ! REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_WIN ! aerodynamical conductance for window ! !*      0.2    declarations of local variables ! ! REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_TOWN ! town averaged temp. REAL , DIMENSION ( SIZE ( PTA )) :: ZQ_TOWN ! town averaged hum. REAL , DIMENSION ( SIZE ( PTA )) :: ZAVDELT_ROOF ! averaged water frac. REAL , DIMENSION ( SIZE ( PTA )) :: ZQ_ROOF ! roof spec. hum. REAL , DIMENSION ( SIZE ( PTA )) :: ZZ0_ROOF ! roof roughness length REAL , DIMENSION ( SIZE ( PTA )) :: ZZ0_ROAD ! road roughness length REAL , DIMENSION ( SIZE ( PTA )) :: ZW_CAN ! ver. wind in canyon REAL , DIMENSION ( SIZE ( PTA )) :: ZRI ! Richardson number REAL , DIMENSION ( SIZE ( PTA )) :: ZLE_MAX ! maximum latent heat flux available REAL , DIMENSION ( SIZE ( PTA )) :: ZLE ! actual latent heat flux REAL , DIMENSION ( SIZE ( PTA )) :: ZRA_ROOF ! aerodynamical resistance REAL , DIMENSION ( SIZE ( PTA )) :: ZCH_ROOF ! drag coefficient for heat REAL , DIMENSION ( SIZE ( PTA )) :: ZRA_TOP ! aerodynamical resistance REAL , DIMENSION ( SIZE ( PTA )) :: ZCH_TOP ! drag coefficient for heat REAL , DIMENSION ( SIZE ( PTA )) :: ZRA_ROAD ! aerodynamical resistance REAL , DIMENSION ( SIZE ( PTA )) :: ZCH_ROAD ! drag coeifficient for heat REAL , DIMENSION ( SIZE ( PTA )) :: ZCD_ROAD ! road  surf. exchange coefficient REAL , DIMENSION ( SIZE ( PTA )) :: ZAC ! town aerodynamical conductance (not used) REAL , DIMENSION ( SIZE ( PTA )) :: ZRA ! town aerodynamical resistance  (not used) REAL , DIMENSION ( SIZE ( PTA )) :: ZCH ! town drag coefficient for heat (not used) REAL , DIMENSION ( SIZE ( PTA )) :: ZCD ! any surf. exchange coefficient (not used) REAL , DIMENSION ( SIZE ( PTA )) :: ZCDN ! any surf. neutral exch. coef.  (not used) ! REAL , DIMENSION ( SIZE ( PTA )) :: ZU_STAR , ZW_STAR !! REAL , DIMENSION ( SIZE ( PTA )) :: ZQ0 !! ! REAL , DIMENSION ( SIZE ( PTA )) :: ZUSTAR2 ! square of friction velocity (m2/s2 REAL , DIMENSION ( SIZE ( PTA )) :: ZVMOD ! module of the horizontal wind at t+1 ! ! for calculation of momentum fluxes REAL , DIMENSION ( SIZE ( PTA )) :: ZLMO ! Monin-Obukhov length REAL , DIMENSION ( SIZE ( PTA )) :: ZUSTAR_ROAD ! friction velocity for roads REAL , DIMENSION ( SIZE ( PTA )) :: ZUSTAR_ROOF ! friction velocity for roofs REAL , DIMENSION ( SIZE ( PTA )) :: ZUSTAR_TOWN ! ! REAL , DIMENSION ( SIZE ( PTA )) :: ZZ0_TOP ! roughness length for zac_top calculation REAL , DIMENSION ( SIZE ( PTA )) :: ZCHTCN_WIN ! natural convective heat transfer coef. for window [W/(m2.K)] REAL , DIMENSION ( SIZE ( PTA )) :: ZCHTCN_ROOF ! natural convective heat transfer coef. for roof [W/(m2.K)] REAL , DIMENSION ( SIZE ( PTA )) :: ZCHTCS_ROOF ! forced convective heat transfer coef. for smooth roof [W/(m2.K)] REAL , DIMENSION ( SIZE ( PTA )) :: ZCHTCN_WALL ! natural convective heat transfer coef. for wall [W/(m2.K)] REAL , DIMENSION ( SIZE ( PTA )) :: ZCHTCS_WALL ! forced natural convective heat transfer coef. for smooth wall [W/(m2.K)] ! INTEGER :: JLOOP , JJ !! ! REAL :: ZZ0_O_Z0H = 20 0. ! z0/z0h ratio used in Mascart (1995) formulation. !                         ! It is set to the maximum value acceptable by !                         ! formulation. Observed values are often larger in cities. REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! ! IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_DRAG' , 0 , ZHOOK_HANDLE ) ! ZZ0_ROOF (:) = 0.15 ! z0 for roofs ZZ0_ROAD (:) = MIN ( 0.05 , 0.1 * PZ_LOWCAN (:)) ! z0 for roads ! ZZ0_TOP (:) = T % XZ0_TOWN (:) ! PCD (:) = XUNDEF PCDN (:) = XUNDEF PAC_TOP (:) = XUNDEF PRI (:) = XUNDEF ! PUW_ROAD (:) = XUNDEF PUW_ROOF (:) = XUNDEF PDUWDU_ROAD (:) = XUNDEF PDUWDU_ROOF (:) = XUNDEF PUSTAR_TOWN (:) = XUNDEF ! !------------------------------------------------------------------------------- ! !*      1.     roof and road saturation specific humidity !              ------------------------------------------ ! PQSAT_ROOF (:) = QSAT ( PTS_ROOF (:), PPS (:)) ! PQSAT_ROAD (:) = QSAT ( PTS_ROAD (:), PPS (:)) ! !------------------------------------------------------------------------------- ! !*      2.     fraction of water on roofs !              -------------------------- ! PDELT_ROOF = 1. ! !*      2.1    general case !              ------------ ! WHERE ( PQSAT_ROOF (:) >= PQA (:) ) PDELT_ROOF (:) = ( T % XWS_ROOF (:) / PWS_ROOF_MAX ) ** ( 2. / 3. ) END WHERE ! !*      2.2    dew deposition on roofs (PDELT_ROOF=1) !              ----------------------- ! !------------------------------------------------------------------------------- ! !*      3.     fraction of water on roads !              -------------------------- ! PDELT_ROAD = 1. ! !*      3.1    general case !              ------------ ! WHERE ( PQSAT_ROAD (:) >= PQ_CANYON (:) ) PDELT_ROAD (:) = ( T % XWS_ROAD (:) / PWS_ROAD_MAX ) ** ( 2. / 3. ) END WHERE ! !*      3.2    dew deposition on roads (PDELT_ROAD=1) !              ----------------------- ! !------------------------------------------------------------------------------- ! !*      4.     Drag coefficient for momentum between roof level and atmosphere !              --------------------------------------------------------------- ! ! DO JJ = 1 , SIZE ( PTA ) ! !*      4.1    Averaged temperature at roof level !              ---------------------------------- ! ZTS_TOWN ( JJ ) = T % XBLD ( JJ ) * PTS_ROOF ( JJ ) + ( 1. - T % XBLD ( JJ )) * PT_CANYON ( JJ ) ! !*      4.2    Averaged water fraction on roofs !              ------------------------------- ! ZAVDELT_ROOF ( JJ ) = PDELT_ROOF ( JJ ) * PDELT_SNOW_ROOF ( JJ ) ! !*      4.3    Roof specific humidity !              ---------------------- ! ZQ_ROOF ( JJ ) = PQSAT_ROOF ( JJ ) * ZAVDELT_ROOF ( JJ ) ! !*      4.4    Averaged Saturation specific humidity !              ------------------------------------- ! ZQ_TOWN ( JJ ) = T % XBLD ( JJ ) * ZQ_ROOF ( JJ ) + ( 1. - T % XBLD ( JJ )) * PQ_CANYON ( JJ ) ! ENDDO ! !------------------------------------------------------------------------------- ! !*      5.     Momentum drag coefficient !              ------------------------- ! IF (. NOT . TOP % LCANOPY ) THEN CALL URBAN_EXCH_COEF ( TOP % CZ0H , ZZ0_O_Z0H , ZTS_TOWN , ZQ_TOWN , PEXNS , PEXNA , PTA , PQA , & PZREF + T % XBLD_HEIGHT / 3. , PUREF + T % XBLD_HEIGHT / 3. , PVMOD , T % XZ0_TOWN , & PRI , PCD , PCDN , ZAC , ZRA , ZCH ) ENDIF ! !------------------------------------------------------------------------------- ! !*      6.     Drag coefficient for heat fluxes between roofs and atmosphere !              ------------------------------------------------------------- ! IF ( TOP % CCH_BEM == \"DOE-2\" ) THEN ZCHTCN_ROOF = CHTC_UP_DOE ( PTS_ROOF , PTA ) ZCHTCS_ROOF = CHTC_SMOOTH_WIND_DOE ( ZCHTCN_ROOF , PVMOD ) PAC_ROOF = CHTC_ROUGH_DOE ( ZCHTCN_ROOF , ZCHTCS_ROOF , T % XROUGH_ROOF ) / PRHOA / XCPD ELSE CALL URBAN_EXCH_COEF ( TOP % CZ0H , ZZ0_O_Z0H , PTS_ROOF , ZQ_ROOF , PEXNS , PEXNA , PTA , PQA , & PZREF , PUREF , PVMOD , ZZ0_ROOF , ZRI , ZCD , ZCDN , PAC_ROOF , & ZRA_ROOF , ZCH_ROOF ) ENDIF ! ! DO JJ = 1 , SIZE ( PTA ) ZLE_MAX ( JJ ) = T % XWS_ROOF ( JJ ) / PTSTEP * XLVTT ZLE ( JJ ) = ( PQSAT_ROOF ( JJ ) - PQA ( JJ )) & * PAC_ROOF ( JJ ) * PDELT_ROOF ( JJ ) * XLVTT * PRHOA ( JJ ) ! PAC_ROOF_WAT ( JJ ) = PAC_ROOF ( JJ ) ! IF ( PDELT_ROOF ( JJ ) == 0. ) PAC_ROOF_WAT ( JJ ) = 0. ! IF ( ZLE ( JJ ) > 0. ) PAC_ROOF_WAT ( JJ ) = PAC_ROOF ( JJ ) * MIN ( 1. , ZLE_MAX ( JJ ) / ZLE ( JJ ) ) ! ENDDO !------------------------------------------------------------------------------- ! !*      7.     Drag coefficient for heat fluxes between canyon and atmosphere !              -------------------------------------------------------------- ! !* Because air/air exchanges are considered, roughness length for heat is set !  equal to roughness length for momentum. ! IF (. NOT . TOP % LCANOPY ) THEN CALL URBAN_EXCH_COEF ( 'MASC95' , 1. , PT_CANYON , PQ_CANYON , PEXNS , PEXNA , PTA , PQA , & PZREF + T % XBLD_HEIGHT - PZ_LOWCAN , PUREF + T % XBLD_HEIGHT - PZ_LOWCAN , & PVMOD , ZZ0_TOP , ZRI , ZCD , ZCDN , PAC_TOP , ZRA_TOP , ZCH_TOP ) ENDIF ! !------------------------------------------------------------------------------- ! !*      8.     Drag coefficient for heat fluxes between walls, road and canyon !              --------------------------------------------------------------- ! !*      8.1    aerodynamical conductance for walls !              ----------------------------------- ! IF ( TOP % CCH_BEM == \"DOE-2\" ) THEN DO JJ = 1 , SIZE ( PTA ) ZCHTCN_WALL ( JJ ) = CHTC_VERT_DOE ( PTS_WALL ( JJ ), PT_CANYON ( JJ )) ZCHTCS_WALL ( JJ ) = 0.5 * ( CHTC_SMOOTH_LEE_DOE ( ZCHTCN_WALL ( JJ ), PU_CANYON ( JJ )) + & CHTC_SMOOTH_WIND_DOE ( ZCHTCN_WALL ( JJ ), PU_CANYON ( JJ )) ) PAC_WALL ( JJ ) = CHTC_ROUGH_DOE ( ZCHTCN_WALL ( JJ ), ZCHTCS_WALL ( JJ ), T % XROUGH_WALL ( JJ )) / XCPD / PRHOA ( JJ ) END DO ELSE PAC_WALL (:) = ( 1 1.8 + 4.2 * PU_CANYON (:) ) / XCPD / PRHOA (:) END IF ! !*      8.2    aerodynamical conductance for roads !              ----------------------------------- ! ZW_STAR (:) = 0. ZQ0 (:) = 0. ! ! DO JLOOP = 1 , 3 ! ZW_CAN (:) = ZW_STAR (:) ! ! CALL URBAN_EXCH_COEF ( TOP % CZ0H , ZZ0_O_Z0H , PTS_ROAD , PQ_LOWCAN , PEXNS , PEXNA , & PT_LOWCAN , PQ_LOWCAN , PZ_LOWCAN , PZ_LOWCAN , & PU_LOWCAN + ZW_CAN , ZZ0_ROAD , ZRI , ZCD_ROAD , ZCDN , & PAC_ROAD , ZRA_ROAD , ZCH_ROAD ) ! DO JJ = 1 , SIZE ( PTA ) ZQ0 ( JJ ) = ( PTS_WALL ( JJ ) - PT_CANYON ( JJ )) * PAC_WALL ( JJ ) * T % XWALL_O_GRND ( JJ ) IF ( T % XROAD ( JJ ) . GT . 0. ) THEN ZQ0 ( JJ ) = ZQ0 ( JJ ) & + ( PTS_ROAD ( JJ ) - PT_LOWCAN ( JJ )) * PAC_ROAD ( JJ ) * T % XROAD ( JJ ) / ( T % XROAD ( JJ ) + T % XGARDEN ( JJ )) ENDIF IF ( T % XGARDEN ( JJ ) . GT . 0. ) THEN ZQ0 ( JJ ) = ZQ0 ( JJ ) & + ( PTS_GARDEN ( JJ ) - PT_LOWCAN ( JJ )) * PAC_GARDEN ( JJ ) * T % XGARDEN ( JJ ) / ( T % XROAD ( JJ ) + T % XGARDEN ( JJ )) ENDIF ! IF ( ZQ0 ( JJ ) >= 0. ) THEN ZW_STAR ( JJ ) = ( ( XG * PEXNA ( JJ ) / PTA ( JJ )) * ZQ0 ( JJ ) * T % XBLD_HEIGHT ( JJ )) ** ( 1 / 3. ) ELSE ZW_STAR ( JJ ) = 0. ENDIF ! ENDDO ! END DO ! ! !*      8.4    aerodynamical conductance for water limited by available water !              -------------------------------------------------------------- ! DO JJ = 1 , SIZE ( PTA ) ! ZLE_MAX ( JJ ) = T % XWS_ROAD ( JJ ) / PTSTEP * XLVTT ZLE ( JJ ) = ( PQSAT_ROAD ( JJ ) - PQ_LOWCAN ( JJ ) ) & * PAC_ROAD ( JJ ) * PDELT_ROAD ( JJ ) * XLVTT * PRHOA ( JJ ) ! PAC_ROAD_WAT ( JJ ) = PAC_ROAD ( JJ ) ! IF ( PDELT_ROAD ( JJ ) == 0. ) PAC_ROAD_WAT ( JJ ) = 0. ! IF ( ZLE ( JJ ) > 0. ) PAC_ROAD_WAT ( JJ ) = PAC_ROAD ( JJ ) * MIN ( 1. , ZLE_MAX ( JJ ) / ZLE ( JJ ) ) ! ! !*      8.5    aerodynamical conductance for window !              ------------------------------------ ! ZCHTCN_WIN ( JJ ) = CHTC_VERT_DOE ( B % XT_WIN1 ( JJ ), PT_CANYON ( JJ )) ! PAC_WIN ( JJ ) = 0.5 * ( CHTC_SMOOTH_LEE_DOE ( ZCHTCN_WIN ( JJ ), PU_CANYON ( JJ )) + & CHTC_SMOOTH_WIND_DOE ( ZCHTCN_WIN ( JJ ), PU_CANYON ( JJ )) ) & / PRHOA ( JJ ) / XCPD ! !------------------------------------------------------------------------------- ! !*      9.     Momentum fluxes !              --------------- ! !*      9.1    For roads !              --------- ! !* road friction ! IF ( TOP % LCANOPY ) THEN ! ZUSTAR2 ( JJ ) = XUNDEF ! IF ( HIMPLICIT_WIND == 'OLD' ) THEN !   old implicitation ZUSTAR2 ( JJ ) = ( ZCD_ROAD ( JJ ) * PU_LOWCAN ( JJ ) * PPEW_B_COEF_LOWCAN ( JJ )) / & ( 1.0 - PRHOA ( JJ ) * ZCD_ROAD ( JJ ) * PU_LOWCAN ( JJ ) * PPEW_A_COEF_LOWCAN ( JJ )) ELSE !   new implicitation ZUSTAR2 ( JJ ) = ( ZCD_ROAD ( JJ ) * PU_LOWCAN ( JJ ) * ( 2. * PPEW_B_COEF_LOWCAN ( JJ ) - PU_LOWCAN ( JJ ))) / & ( 1.0 - 2.0 * PRHOA ( JJ ) * ZCD_ROAD ( JJ ) * PU_LOWCAN ( JJ ) * PPEW_A_COEF_LOWCAN ( JJ )) ! ZVMOD ( JJ ) = PRHOA ( JJ ) * PPEW_A_COEF_LOWCAN ( JJ ) * ZUSTAR2 ( JJ ) + PPEW_B_COEF_LOWCAN ( JJ ) ZVMOD ( JJ ) = MAX ( ZVMOD ( JJ ), 0. ) ! IF ( PPEW_A_COEF_LOWCAN ( JJ ) /= 0. ) THEN ZUSTAR2 ( JJ ) = MAX ( ( ZVMOD ( JJ ) - PPEW_B_COEF_LOWCAN ( JJ ) ) / ( PRHOA ( JJ ) * PPEW_A_COEF_LOWCAN ( JJ )), 0. ) ENDIF ! ENDIF ! PUW_ROAD ( JJ ) = - ZUSTAR2 ( JJ ) ! PDUWDU_ROAD ( JJ ) = 0. ! implicitation already taken into account in PUW_ROAD ! !*      9.2    For roofs !              --------- ! !* roof friction !* neutral case, as guess ! ! ZUSTAR_ROOF ( JJ ) = PVMOD ( JJ ) * XKARMAN / LOG ( PZREF ( JJ ) / ZZ0_ROOF ( JJ )) ! PUW_ROOF ( JJ ) = - ZUSTAR_ROOF ( JJ ) ** 2 PDUWDU_ROOF ( JJ ) = 0. IF ( PVMOD ( JJ ) /= 0. ) PDUWDU_ROOF ( JJ ) = 2. * PUW_ROOF ( JJ ) / PVMOD ( JJ ) ! ELSE ! !*      9.3    For town !              -------- ! ZUSTAR2 ( JJ ) = XUNDEF ! IF ( HIMPLICIT_WIND == 'OLD' ) THEN !   old implicitation ZUSTAR2 ( JJ ) = ( PCD ( JJ ) * PVMOD ( JJ ) * PPEW_B_COEF ( JJ )) / & ( 1.0 - PRHOA ( JJ ) * PCD ( JJ ) * PVMOD ( JJ ) * PPEW_A_COEF ( JJ )) ELSE !   new implicitation ZUSTAR2 ( JJ ) = ( PCD ( JJ ) * PVMOD ( JJ ) * ( 2. * PPEW_B_COEF ( JJ ) - PVMOD ( JJ ))) / & ( 1.0 - 2.0 * PRHOA ( JJ ) * PCD ( JJ ) * PVMOD ( JJ ) * PPEW_A_COEF ( JJ )) ! ZVMOD ( JJ ) = PRHOA ( JJ ) * PPEW_A_COEF ( JJ ) * ZUSTAR2 ( JJ ) + PPEW_B_COEF ( JJ ) ZVMOD ( JJ ) = MAX ( ZVMOD ( JJ ), 0. ) ! IF ( PPEW_A_COEF ( JJ ) /= 0. ) THEN ZUSTAR2 ( JJ ) = MAX ( ( ZVMOD ( JJ ) - PPEW_B_COEF ( JJ ) ) / ( PRHOA ( JJ ) * PPEW_A_COEF ( JJ )), 0. ) ENDIF ! ENDIF ! PUSTAR_TOWN ( JJ ) = SQRT ( ZUSTAR2 ( JJ )) ! ENDIF ! ENDDO ! IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_DRAG' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END SUBROUTINE URBAN_DRAG","tags":"","loc":"sourcefile/urban_drag.f90.html"},{"title":"window_shading.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines WINDOW_SHADING Source Code window_shading.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !     ############################################################# SUBROUTINE WINDOW_SHADING ( PSHGC , PSHGC_SH , O_SHADE , PALB_WALL , & PABS_WIN , PABS_WINSH , PALB_WIN , PTRAN_WIN ) !     ############################################################# ! ! ! !!****  *WINDOW_SHADING* !! !!    PURPOSE !!    ------- ! !     Computes the radiative properties of the window in case of shading !     devices active ! ! !!**  METHOD !!     ------ !! !!    apply radiative properties coming from namelist input (SHGC_SH) !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !!   EnergyPlus Engineering Reference V7, 2012, p. 217. !! !!    AUTHOR !!    ------ !! !!      B. Bueno           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    11/10 !!      G. Pigeon   09/12 code reorganization to take into account propertie !!                  from window !------------------------------------------------------------------------------- ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PSHGC !Window solar heat gain coefficient REAL , DIMENSION (:), INTENT ( IN ) :: PSHGC_SH !Window + shading solar heat gain coefficient LOGICAL , DIMENSION (:), INTENT ( IN ) :: O_SHADE !use of shadings TRUE -> shadings ; !FALSE -> no shading REAL , DIMENSION (:), INTENT ( IN ) :: PALB_WALL !albedo of the wall REAL , DIMENSION (:), INTENT ( IN ) :: PABS_WIN !Window absorptivity REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_WINSH !Window absorptivity after shading REAL , DIMENSION (:), INTENT ( OUT ) :: PALB_WIN !Albedo of the ensemble window + shading REAL , DIMENSION (:), INTENT ( INOUT ) :: PTRAN_WIN !Window transmitivity ! !local variables REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'WINDOW_SHADING' , 0 , ZHOOK_HANDLE ) ! WHERE ( O_SHADE ) PTRAN_WIN (:) = PSHGC_SH (:) PABS_WINSH (:) = PTRAN_WIN (:) * PABS_WIN (:) PALB_WIN (:) = PALB_WALL (:) ELSE WHERE PTRAN_WIN (:) = PTRAN_WIN (:) PABS_WINSH (:) = PABS_WIN (:) PALB_WIN (:) = 1. - PABS_WIN (:) - PTRAN_WIN (:) END WHERE ! WHERE (( PABS_WINSH (:) + PTRAN_WIN (:) + PALB_WIN ) > 1. ) PALB_WIN (:) = 1. - PABS_WINSH (:) - PTRAN_WIN (:) END WHERE ! IF ( LHOOK ) CALL DR_HOOK ( 'WINDOW_SHADING' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE WINDOW_SHADING","tags":"","loc":"sourcefile/window_shading.f90.html"},{"title":"modd_surfexn.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODD_SURFEX_n Source Code modd_surfexn.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. MODULE MODD_SURFEX_n ! USE MODD_AGRI_n , ONLY : AGRI_NP_t USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t USE MODD_BLD_DESCRIPTION_n , ONLY : BLD_DESC_t USE MODD_CH_EMIS_FIELD_n , ONLY : CH_EMIS_FIELD_t USE MODD_CH_FLAKE_n , ONLY : CH_FLAKE_t USE MODD_CH_ISBA_n , ONLY : CH_ISBA_t , CH_ISBA_NP_t USE MODD_CH_SEAFLUX_n , ONLY : CH_SEAFLUX_t USE MODD_CH_SNAP_n , ONLY : CH_EMIS_SNAP_t USE MODD_CH_SURF_n , ONLY : CH_SURF_t USE MODD_CH_TEB_n , ONLY : CH_TEB_t USE MODD_CH_WATFLUX_n , ONLY : CH_WATFLUX_t USE MODD_DATA_BEM_n , ONLY : DATA_BEM_t USE MODD_DATA_COVER_n , ONLY : DATA_COVER_t USE MODD_DATA_ISBA_n , ONLY : DATA_ISBA_t USE MODD_DATA_SEAFLUX_n , ONLY : DATA_SEAFLUX_t USE MODD_DATA_TEB_n , ONLY : DATA_TEB_t USE MODD_DATA_TSZ0_n , ONLY : DATA_TSZ0_t USE MODD_DIAG_EVAP_ISBA_n , ONLY : DIAG_EVAP_ISBA_t , DIAG_EVAP_ISBA_NP_t USE MODD_DIAG_n , ONLY : DIAG_t , DIAG_NP_t , DIAG_OPTIONS_t USE MODD_DIAG_MISC_FLAKE_n , ONLY : DIAG_MISC_FLAKE_t USE MODD_DIAG_MISC_ISBA_n , ONLY : DIAG_MISC_ISBA_t , DIAG_MISC_ISBA_NP_t USE MODD_DIAG_MISC_TEB_OPTIONS_n , ONLY : DIAG_MISC_TEB_OPTIONS_t USE MODD_DIAG_OCEAN_n , ONLY : DIAG_OCEAN_t USE MODD_DIAG_MISC_SEAICE_n , ONLY : DIAG_MISC_SEAICE_t USE MODD_DIAG_UTCI_TEB_n , ONLY : DIAG_UTCI_TEB_t USE MODD_DST_n , ONLY : DST_NP_t USE MODD_DUMMY_SURF_FIELDS_n , ONLY : DUMMY_SURF_FIELDS_t USE MODD_EMIS_GR_FIELD_n , ONLY : EMIS_GR_FIELD_t USE MODD_SFX_GRID_n , ONLY : GRID_t , GRID_NP_t USE MODD_GRID_CONF_PROJ_n , ONLY : GRID_CONF_PROJ_t USE MODD_FLAKE_n , ONLY : FLAKE_t USE MODD_GR_BIOG_n , ONLY : GR_BIOG_t , GR_BIOG_NP_t USE MODD_IDEAL_n , ONLY : IDEAL_t USE MODD_CANOPY_n , ONLY : CANOPY_t USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t USE MODD_ISBA_n , ONLY : ISBA_S_t , ISBA_K_t , ISBA_NK_t , ISBA_P_t , ISBA_NP_t , & ISBA_PE_t , ISBA_NPE_t USE MODD_OCEAN_n , ONLY : OCEAN_t USE MODD_OCEAN_REL_n , ONLY : OCEAN_REL_t !USE MODD_SEAFLUX_n, ONLY : SEAFLUX_t USE MODD_SLT_n , ONLY : SLT_t USE MODD_SURF_ATM_GRID_n , ONLY : SURF_ATM_GRID_t USE MODD_SURF_ATM_n , ONLY : SURF_ATM_t USE MODD_SSO_n , ONLY : SSO_t , SSO_NP_t USE MODD_SV_n , ONLY : SV_t USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t USE MODD_WATFLUX_n , ONLY : WATFLUX_t ! USE MODD_BEM_n , ONLY : BEM_NP_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_NP_t USE MODD_TEB_n , ONLY : TEB_NP_t ! ! !--------------------------------------------------------------------------- ! TYPE FLAKE_MODEL_t ! TYPE ( DIAG_OPTIONS_t ) :: DFO TYPE ( DIAG_t ) :: DF TYPE ( DIAG_t ) :: DFC TYPE ( DIAG_MISC_FLAKE_t ) :: DMF ! TYPE ( GRID_t ) :: G TYPE ( CANOPY_t ) :: SB TYPE ( CH_FLAKE_t ) :: CHF TYPE ( FLAKE_t ) :: F ! END TYPE FLAKE_MODEL_t ! ! TYPE WATFLUX_MODEL_t ! TYPE ( DIAG_OPTIONS_t ) :: DWO TYPE ( DIAG_t ) :: DW TYPE ( DIAG_t ) :: DWC ! TYPE ( GRID_t ) :: G TYPE ( CANOPY_t ) :: SB TYPE ( CH_WATFLUX_t ) :: CHW TYPE ( WATFLUX_t ) :: W ! END TYPE WATFLUX_MODEL_t ! !------------------------------------------------------ ! TYPE SEAFLUX_DIAG_t ! TYPE ( DIAG_OPTIONS_t ) :: O TYPE ( DIAG_t ) :: D TYPE ( DIAG_t ) :: DC TYPE ( DIAG_t ) :: DI TYPE ( DIAG_t ) :: DIC TYPE ( DIAG_OCEAN_t ) :: GO TYPE ( DIAG_MISC_SEAICE_t ) :: DMI ! END TYPE SEAFLUX_DIAG_t ! ! !TYPE SEAFLUX_MODEL_t !! !TYPE(SEAFLUX_DIAG_t) :: SD !! !TYPE(DATA_SEAFLUX_t) :: DTS !TYPE(GRID_t) :: G !TYPE(CANOPY_t) :: SB !TYPE(CH_SEAFLUX_t) :: CHS !TYPE(SEAFLUX_t) :: S !! !TYPE(OCEAN_t) :: O !TYPE(OCEAN_REL_t) :: OR !! !END TYPE SEAFLUX_MODEL_t ! !-------------------------------------------------- ! TYPE ISBA_DIAG_t ! TYPE ( DIAG_OPTIONS_t ) :: O TYPE ( DIAG_t ) :: D TYPE ( DIAG_t ) :: DC TYPE ( DIAG_NP_t ) :: ND TYPE ( DIAG_NP_t ) :: NDC TYPE ( DIAG_EVAP_ISBA_t ) :: DE TYPE ( DIAG_EVAP_ISBA_t ) :: DEC TYPE ( DIAG_EVAP_ISBA_NP_t ) :: NDE TYPE ( DIAG_EVAP_ISBA_NP_t ) :: NDEC TYPE ( DIAG_MISC_ISBA_t ) :: DM TYPE ( DIAG_MISC_ISBA_NP_t ) :: NDM ! END TYPE ISBA_DIAG_t ! TYPE ISBA_MODEL_t ! TYPE ( ISBA_DIAG_t ) :: ID TYPE ( DATA_ISBA_t ) :: DTV TYPE ( CANOPY_t ) :: SB TYPE ( ISBA_OPTIONS_t ) :: O TYPE ( ISBA_S_t ) :: S TYPE ( CH_ISBA_t ) :: CHI TYPE ( CH_ISBA_NP_t ) :: NCHI TYPE ( GR_BIOG_t ) :: GB TYPE ( GR_BIOG_NP_t ) :: NGB TYPE ( SSO_t ) :: ISS TYPE ( SSO_NP_t ) :: NISS TYPE ( GRID_t ) :: G TYPE ( GRID_NP_t ) :: NG TYPE ( ISBA_K_t ) :: K TYPE ( ISBA_NK_t ) :: NK TYPE ( ISBA_NP_t ) :: NP TYPE ( ISBA_NPE_t ) :: NPE TYPE ( AGRI_NP_t ) :: NAG ! END TYPE ISBA_MODEL_t ! !--------------------------------------- ! TYPE TEB_VEG_DIAG_t ! TYPE ( DIAG_NP_t ) :: ND TYPE ( DIAG_EVAP_ISBA_NP_t ) :: NDE TYPE ( DIAG_EVAP_ISBA_NP_t ) :: NDEC TYPE ( DIAG_MISC_ISBA_NP_t ) :: NDM ! END TYPE TEB_VEG_DIAG_t ! TYPE TEB_GARDEN_MODEL_t ! TYPE ( TEB_VEG_DIAG_t ) :: VD TYPE ( DATA_ISBA_t ) :: DTV TYPE ( ISBA_OPTIONS_t ) :: O TYPE ( ISBA_S_t ) :: S TYPE ( GR_BIOG_t ) :: GB TYPE ( ISBA_K_t ) :: K TYPE ( ISBA_P_t ) :: P TYPE ( ISBA_NPE_t ) :: NPE ! END TYPE TEB_GARDEN_MODEL_t ! TYPE TEB_GREENROOF_MODEL_t ! TYPE ( TEB_VEG_DIAG_t ) :: VD TYPE ( DATA_ISBA_t ) :: DTV TYPE ( ISBA_OPTIONS_t ) :: O TYPE ( ISBA_S_t ) :: S TYPE ( GR_BIOG_t ) :: GB TYPE ( ISBA_K_t ) :: K TYPE ( ISBA_P_t ) :: P TYPE ( ISBA_NPE_t ) :: NPE ! END TYPE TEB_GREENROOF_MODEL_t ! TYPE TEB_DIAG_t ! TYPE ( DIAG_OPTIONS_t ) :: O TYPE ( DIAG_t ) :: D TYPE ( DIAG_MISC_TEB_OPTIONS_t ) :: MTO TYPE ( DIAG_MISC_TEB_NP_t ) :: NDMT TYPE ( DIAG_MISC_TEB_NP_t ) :: NDMTC TYPE ( DIAG_UTCI_TEB_t ) :: DUT ! END TYPE TEB_DIAG_t ! TYPE TEB_MODEL_t ! TYPE ( DATA_TEB_t ) :: DTT TYPE ( TEB_OPTIONS_t ) :: TOP TYPE ( CANOPY_t ) :: SB TYPE ( GRID_t ) :: G TYPE ( CH_TEB_t ) :: CHT TYPE ( TEB_PANEL_t ) :: TPN TYPE ( TEB_IRRIG_t ) :: TIR TYPE ( TEB_NP_t ) :: NT ! TYPE ( TEB_DIAG_t ) :: TD ! TYPE ( DATA_BEM_t ) :: DTB TYPE ( BEM_OPTIONS_t ) :: BOP TYPE ( BLD_DESC_t ) :: BDD TYPE ( BEM_NP_t ) :: NB ! END TYPE TEB_MODEL_t ! !---------------------------------------------------------- ! TYPE SURFEX_t ! TYPE ( DATA_COVER_t ) :: DTCO TYPE ( DATA_TSZ0_t ) :: DTZ TYPE ( DUMMY_SURF_FIELDS_t ) :: DUU ! TYPE ( GRID_CONF_PROJ_t ) :: GCP TYPE ( SURF_ATM_GRID_t ) :: UG TYPE ( SURF_ATM_t ) :: U TYPE ( DIAG_OPTIONS_t ) :: DUO TYPE ( DIAG_t ) :: DU TYPE ( DIAG_t ) :: DUC TYPE ( DIAG_NP_t ) :: DUP TYPE ( DIAG_NP_t ) :: DUPC TYPE ( SSO_t ) :: USS TYPE ( CANOPY_t ) :: SB ! TYPE ( DIAG_OPTIONS_t ) :: DLO TYPE ( DIAG_t ) :: DL TYPE ( DIAG_t ) :: DLC TYPE ( IDEAL_t ) :: L ! TYPE ( SV_t ) :: SV TYPE ( CH_SURF_t ) :: CHU TYPE ( CH_EMIS_FIELD_t ) :: CHE TYPE ( CH_EMIS_SNAP_t ) :: CHN TYPE ( EMIS_GR_FIELD_t ) :: EGF TYPE ( DST_NP_t ) :: NDST TYPE ( SLT_t ) :: SLT ! TYPE ( FLAKE_MODEL_t ) :: FM TYPE ( WATFLUX_MODEL_t ) :: WM !TYPE(SEAFLUX_MODEL_t) :: SM TYPE ( ISBA_MODEL_t ) :: IM TYPE ( TEB_MODEL_t ) :: TM TYPE ( TEB_GARDEN_MODEL_t ) :: GDM TYPE ( TEB_GREENROOF_MODEL_t ) :: GRM ! END TYPE SURFEX_t ! END MODULE MODD_SURFEX_n","tags":"","loc":"sourcefile/modd_surfexn.f90.html"},{"title":"road_layer_e_budget.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines ROAD_LAYER_E_BUDGET Source Code road_layer_e_budget.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL version 2.1 !SFX_LIC version 1. See LICENSE, Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. version 1. !   ########################################################################## SUBROUTINE ROAD_LAYER_E_BUDGET ( T , B , PTSTEP , PDN_ROAD , PRHOA , PAC_ROAD , PAC_ROAD_WAT , & PLW_RAD , PPS , PQSAT_ROAD , PDELT_ROAD , PEXNS , & PABS_SW_ROAD , PGSNOW_ROAD , PQ_LOWCAN , PT_LOWCAN , & PTS_WALL_A , PTS_WALL_B , PTSNOW_ROAD , PTS_GARDEN , & PLW_WA_TO_R , PLW_WB_TO_R , PLW_S_TO_R , PLW_WIN_TO_R , & PEMIT_LW_ROAD , PDQS_ROAD , PABS_LW_ROAD , PHFREE_ROAD , & PLEFREE_ROAD , PIMB_ROAD , PRR ) !   ########################################################################## ! !!****  *ROAD_LAYER_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of roads surface temperatures ! ! !!**  METHOD !     ------ ! !    6 : equations for evolution of Ts_road !        ********************************** ! ! !     dTr_1(t) / dt = 1/(dr_1*Cr_1) * (  Rn_r - H_r - LE_r !                                      - 2*Kr_1*(Tr_1-Tr_2)/(dr_1 +dr_2)       ) ! !     dTr_k(t) / dt = 1/(dr_k*Cr_k) * (- 2*Kr_k-1*(Tr_k-Tr_k-1)/(dr_k-1 +dr_k) !                                      - 2*Kr_k  *(Tr_k-Tr_k+1)/(dr_k+1 +dr_k) ) ! !       with ! !   K*_k  = (d*_k+ d*_k+1)/(d*_k/k*_k+ d*_k+1/k*_k+1) ! !   Rn_r = abs_Rg_r !  - sigma * emis_r                                                   * Ts_r**4 (t+dt) !  +         emis_r                       *    SVF_r                  * LWR !  + sigma * emis_r * emis_w              * (1-SVF_r)                 * Ts_w**4 (t+dt) !  +         emis_r            (1-emis_w) * (1-SVF_r)   *      SVF_w  * LWR !  + sigma * emis_r * emis_w * (1-emis_w) * (1-SVF_r)   * (1-2*SVF_w) * Ts_w**4 (t+dt) !  + sigma * emis_r * emis_r * (1-emis_w) * (1-SVF_r)   *      SVF_w  * Ts_r**4 (t+dt) ! !  H_r  = rho Cp CH V ( Ts_r (t+dt) - Ta_canyon ) ! !  LE_r = rho Lv CH V ( qs_r (t+dt) - qa_canyon ) ! ! ! The system is implicited (or semi-implicited). ! ! ZIMPL=1    ---> implicit system ! ZIMPL=0.5  ---> semi-implicit system ! ZIMPL=0    ---> explicit system ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !!                  21/11/01 (V. Masson and A. Lemonsu) bug of latent flux !!                           for very strong evaporation (all reservoir emptied !!                           in one time-step) !!                     02/11 (V. Masson) split of the routine for roads and walls separately !!      G. Pigeon      09/2012: add heating/cooling of rain from air temperature !!                             to surface road temp. for the road energy budget !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t ! USE MODD_CSTS , ONLY : XCPD , XLVTT , XSTEFAN , XCL ! USE MODE_THERMOS ! USE MODI_LAYER_E_BUDGET USE MODI_LAYER_E_BUDGET_GET_COEF ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PDN_ROAD ! road snow fraction REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! rho REAL , DIMENSION (:), INTENT ( IN ) :: PAC_ROAD ! aerodynamical conductance !                                                 ! between road and canyon REAL , DIMENSION (:), INTENT ( IN ) :: PAC_ROAD_WAT ! aerodynamical conductance !                                                 ! between road and canyon !                                                 ! (for water) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PQSAT_ROAD ! q_sat(Ts) REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_ROAD ! fraction of water REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface Exner function REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_ROAD ! absorbed solar radiation REAL , DIMENSION (:), INTENT ( IN ) :: PGSNOW_ROAD ! road snow conduction !                                                 ! heat fluxes at mantel !                                                 ! base REAL , DIMENSION (:), INTENT ( IN ) :: PQ_LOWCAN ! and specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PT_LOWCAN ! low canyon air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WALL_A ! wall surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WALL_B ! wall surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTSNOW_ROAD ! road snow temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GARDEN ! green area surface temperature ! REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_R ! LW interactions wall  -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_R ! LW interactions wall  -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_R ! LW interactions sky   -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_R ! LW interactions window -> road ! REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_ROAD ! LW flux emitted by the road (W/m2 of road) REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_ROAD !heat storage inside the road REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_ROAD ! absorbed infrared rad. REAL , DIMENSION (:), INTENT ( OUT ) :: PHFREE_ROAD ! sensible heat flux on the ! snow free part of the road [W m-2] REAL , DIMENSION (:), INTENT ( OUT ) :: PLEFREE_ROAD ! latent heat flux on the ! snow free part of the road [W m-2] REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_ROAD ! road residual energy imbalance ! for verification [W m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PRR ! rain rate [kg m-2 s-1] ! !*      0.2    declarations of local variables ! REAL :: ZIMPL = 1.0 ! implicit coefficient REAL :: ZEXPL = 0.0 ! explicit coefficient ! REAL , DIMENSION ( SIZE ( T % XT_ROAD , 1 ), SIZE ( T % XT_ROAD , 2 )) :: ZA ,& ! lower diag. ZB ,& ! main  diag. ZC ,& ! upper diag. ZY ! r.h.s. ! REAL , DIMENSION ( SIZE ( PPS )) :: ZDN_ROAD ! snow-covered surface fraction on road REAL , DIMENSION ( SIZE ( PPS )) :: ZDF_ROAD ! snow-free surface fraction on road ! REAL , DIMENSION ( SIZE ( PPS )) :: ZDQSAT_ROAD ! dq_sat/dTs REAL , DIMENSION ( SIZE ( PPS )) :: ZRHO_ACF_R ! rho * conductance !                                         !     * snow-free f. REAL , DIMENSION ( SIZE ( PPS )) :: ZRHO_ACF_R_WAT ! rho * conductance for water !                                         !     * snow-free f. ! thermal capacity times layer depth REAL , DIMENSION ( SIZE ( PPS )) :: ZTS_ROAD ! road surface temperature REAL , DIMENSION ( SIZE ( PPS )) :: ZHEAT_RR ! heat used too cool/heat the rain from the roof REAL , DIMENSION ( SIZE ( PPS )) :: ZT_SKY ! road surface temperature ! INTEGER :: IROAD_LAYER ! number of road layers INTEGER :: JJ ! loop counter REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'ROAD_LAYER_E_BUDGET' , 0 , ZHOOK_HANDLE ) ! CALL LAYER_E_BUDGET_GET_COEF ( T % XT_ROAD , PTSTEP , ZIMPL , T % XHC_ROAD , T % XTC_ROAD , T % XD_ROAD , & ZA , ZB , ZC , ZY ) ! !*      1.     Layer thermal properties !              ------------------------ ! IROAD_LAYER = SIZE ( T % XT_ROAD , 2 ) ! DO JJ = 1 , SIZE ( PDN_ROAD ) ! ZDN_ROAD ( JJ ) = PDN_ROAD ( JJ ) ZDF_ROAD ( JJ ) = 1. - ZDN_ROAD ( JJ ) ! !*      2.3    Surface temperatures !              -------------------- ! ZTS_ROAD ( JJ ) = T % XT_ROAD ( JJ , 1 ) ! !*      2.2    flux properties !              --------------- ! ZRHO_ACF_R ( JJ ) = PRHOA ( JJ ) * PAC_ROAD ( JJ ) * ZDF_ROAD ( JJ ) ZRHO_ACF_R_WAT ( JJ ) = PRHOA ( JJ ) * PAC_ROAD_WAT ( JJ ) * ZDF_ROAD ( JJ ) ! !*     2.4   Sky temperature !            --------------- ! ZT_SKY ( JJ ) = ( PLW_RAD ( JJ ) / XSTEFAN ) ** 0.25 ! ENDDO ! !*      2.4    qsat, dqsat/dTs, and humidity for roads !              --------------------------------------- ! ZDQSAT_ROAD (:) = DQSAT ( ZTS_ROAD (:), PPS (:), PQSAT_ROAD (:)) ! !------------------------------------------------------------------------------- ! !*      3.     First road layers coefficients (in contact with outdoor env.) !              ------------------------------------------------------------- ! DO JJ = 1 , SIZE ( T % XT_ROAD , 1 ) ! ZB ( JJ , 1 ) = ZB ( JJ , 1 ) + ZIMPL * XCPD / PEXNS ( JJ ) * ZRHO_ACF_R ( JJ ) & + ZIMPL * XLVTT * ZRHO_ACF_R_WAT ( JJ ) * PDELT_ROAD ( JJ ) * ZDQSAT_ROAD ( JJ ) ! ZY ( JJ , 1 ) = ZY ( JJ , 1 ) & + XCPD / PEXNS ( JJ ) * ZRHO_ACF_R ( JJ ) * ( PT_LOWCAN ( JJ ) - ZEXPL * ZTS_ROAD ( JJ ) ) & + ZDF_ROAD ( JJ ) * PABS_SW_ROAD ( JJ ) + ZDN_ROAD ( JJ ) * PGSNOW_ROAD ( JJ ) & + XLVTT * ZRHO_ACF_R_WAT ( JJ ) * PDELT_ROAD ( JJ ) & * ( PQ_LOWCAN ( JJ ) - PQSAT_ROAD ( JJ ) + ZIMPL * ZDQSAT_ROAD ( JJ ) * ZTS_ROAD ( JJ ) ) ! ZB ( JJ , 1 ) = ZB ( JJ , 1 ) & + ZIMPL * ZDF_ROAD ( JJ ) * ( PLW_S_TO_R ( JJ ) + PLW_WA_TO_R ( JJ ) + & PLW_WB_TO_R ( JJ ) + PLW_WIN_TO_R ( JJ ) + & PRR ( JJ ) * XCL ) ! heat/cool rain ! ZY ( JJ , 1 ) = ZY ( JJ , 1 ) & + ZDF_ROAD ( JJ ) * ( & PLW_S_TO_R ( JJ ) * ( ZT_SKY ( JJ ) - ZEXPL * ZTS_ROAD ( JJ )) & + PLW_WIN_TO_R ( JJ ) * ( B % XT_WIN1 ( JJ ) - ZEXPL * ZTS_ROAD ( JJ )) & + PLW_WA_TO_R ( JJ ) * ( PTS_WALL_A ( JJ ) - ZEXPL * ZTS_ROAD ( JJ )) & + PLW_WB_TO_R ( JJ ) * ( PTS_WALL_B ( JJ ) - ZEXPL * ZTS_ROAD ( JJ )) & + PRR ( JJ ) * XCL * ( PT_LOWCAN ( JJ ) - ZEXPL * ZTS_ROAD ( JJ ) )) !heat/cool rain ! ENDDO ! ! CALL LAYER_E_BUDGET ( T % XT_ROAD , PTSTEP , ZIMPL , T % XHC_ROAD , T % XTC_ROAD , T % XD_ROAD , & ZA , ZB , ZC , ZY , PDQS_ROAD ) ! !------------------------------------------------------------------------------- ! !*     12.    Road and wall absorbed infra-red radiation on snow-free surfaces !             ---------------------------------------------------------------- ! !* absorbed LW DO JJ = 1 , SIZE ( T % XT_ROAD , 1 ) ! ! surface temperature used in energy balance ZTS_ROAD ( JJ ) = ZEXPL * ZTS_ROAD ( JJ ) + ZIMPL * T % XT_ROAD ( JJ , 1 ) PABS_LW_ROAD ( JJ ) = PLW_S_TO_R ( JJ ) * ( ZT_SKY ( JJ ) - ZTS_ROAD ( JJ )) + & PLW_WA_TO_R ( JJ ) * ( PTS_WALL_A ( JJ ) - ZTS_ROAD ( JJ )) + & PLW_WB_TO_R ( JJ ) * ( PTS_WALL_B ( JJ ) - ZTS_ROAD ( JJ )) + & PLW_WIN_TO_R ( JJ ) * ( B % XT_WIN1 ( JJ ) - ZTS_ROAD ( JJ )) ! !*     9.    Road emitted LW radiation on snow-free surfaces !            ----------------------------------------------- PEMIT_LW_ROAD ( JJ ) = XSTEFAN * T % XT_ROAD ( JJ , 1 ) ** 4 + & ( 1 - T % XEMIS_ROAD ( JJ )) / T % XEMIS_ROAD ( JJ ) * PABS_LW_ROAD ( JJ ) ! !*      10.     road and wall sensible heat flux !              -------------------------------- ! PHFREE_ROAD ( JJ ) = ZRHO_ACF_R ( JJ ) * XCPD / PEXNS ( JJ ) * & ( ZIMPL * T % XT_ROAD ( JJ , 1 ) + ZEXPL * ZTS_ROAD ( JJ ) - PT_LOWCAN ( JJ ) ) ! !*      11     road latent heat flux !              --------------------- ! PLEFREE_ROAD ( JJ ) = ZRHO_ACF_R_WAT ( JJ ) * XLVTT * PDELT_ROAD ( JJ ) * & ( PQSAT_ROAD ( JJ ) - PQ_LOWCAN ( JJ ) + & ZIMPL * ZDQSAT_ROAD ( JJ ) * ( T % XT_ROAD ( JJ , 1 ) - ZTS_ROAD ( JJ )) ) ZHEAT_RR ( JJ ) = PRR ( JJ ) * XCL * ( ZTS_ROAD ( JJ ) - PT_LOWCAN ( JJ )) ! !*      12     heat storage inside roads !              ------------------------- ! !*      13     road energy residual imbalance for verification !              ----------------------------------------------- ! PIMB_ROAD ( JJ ) = PABS_SW_ROAD ( JJ ) + PABS_LW_ROAD ( JJ ) - PDQS_ROAD ( JJ ) & - ZDF_ROAD ( JJ ) * ( PHFREE_ROAD ( JJ ) + PLEFREE_ROAD ( JJ )) & - ZDN_ROAD ( JJ ) * PGSNOW_ROAD ( JJ ) ! ENDDO ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'ROAD_LAYER_E_BUDGET' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE ROAD_LAYER_E_BUDGET","tags":"","loc":"sourcefile/road_layer_e_budget.f90.html"},{"title":"alloc_teb_struct.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines ALLOC_TEB_STRUCT Source Code alloc_teb_struct.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL licence !SFX_LIC version 2.1. See Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. !   ########################################################################## SUBROUTINE ALLOC_TEB_STRUCT ( KROOF_LAYER , KROAD_LAYER , KWALL_LAYER , KFLOOR_LAYER ,& DTCO , G , TOP , T , BOP , B , TPN , TIR , DMT , GDM , GRM ) !   ########################################################################## ! !!****  *ALLOC_TEB_STRUCT* !! !!    PURPOSE !!    ------- ! !       To allocate all the structures used in Teb_garden and subsequent routines. ! !!**  METHOD !     ------ ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!    Original    03/2018 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_DATA_COVER_n , ONLY : DATA_COVER_t , DATA_COVER_INIT USE MODD_SFX_GRID_n , ONLY : GRID_t , GRID_INIT USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t , TEB_OPTIONS_INIT USE MODD_TEB_n , ONLY : TEB_t , TEB_INIT USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t , BEM_OPTIONS_INIT USE MODD_BEM_n , ONLY : BEM_t , BEM_INIT USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t , TEB_PANEL_INIT USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t , TEB_IRRIG_INIT USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t , DIAG_MISC_TEB_INIT USE MODD_SURFEX_n , ONLY : TEB_GARDEN_MODEL_t USE MODD_SURFEX_n , ONLY : TEB_GREENROOF_MODEL_t ! ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! ! ! ! INTEGER , INTENT ( IN ) :: KROOF_LAYER ! number of roof layers INTEGER , INTENT ( IN ) :: KROAD_LAYER ! number of road layers INTEGER , INTENT ( IN ) :: KWALL_LAYER ! number of wall layers INTEGER , INTENT ( IN ) :: KFLOOR_LAYER ! number of floor layers TYPE ( DATA_COVER_t ), INTENT ( INOUT ) :: DTCO TYPE ( GRID_t ), INTENT ( INOUT ) :: G TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_OPTIONS_t ), INTENT ( INOUT ) :: BOP TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_PANEL_t ), INTENT ( INOUT ) :: TPN TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT TYPE ( TEB_GARDEN_MODEL_t ), INTENT ( INOUT ) :: GDM TYPE ( TEB_GREENROOF_MODEL_t ), INTENT ( INOUT ) :: GRM ! ! !*      0.2    Declarations of local variables ! ! !------------------------------------------------------------------------------- ! CALL GRID_INIT ( G ) CALL TEB_INIT ( T ) CALL TEB_PANEL_INIT ( TPN ) CALL TEB_OPTIONS_INIT ( TOP ) CALL TEB_IRRIG_INIT ( TIR ) CALL DIAG_MISC_TEB_INIT ( DMT ) CALL BEM_INIT ( B ) CALL BEM_OPTIONS_INIT ( BOP ) CALL DATA_COVER_INIT ( DTCO ) ! !------------------------------------------------------------------------------- ! ! BEM structure ! ! ! Floor parameters ! ALLOCATE ( B % XHC_FLOOR ( 1 , KFLOOR_LAYER )) ! floor layers heat capacity        (J/K/m3) ALLOCATE ( B % XTC_FLOOR ( 1 , KFLOOR_LAYER )) ! floor layers thermal conductivity (W/K/m) ALLOCATE ( B % XD_FLOOR ( 1 , KFLOOR_LAYER )) ! depth of floor layers             (m) ! ! HVAC parameters ! ALLOCATE ( B % XTCOOL_TARGET ( 1 )) ! cooling setpoint of indoor air ALLOCATE ( B % XTHEAT_TARGET ( 1 )) ! heating setpoint of indoor air ALLOCATE ( B % XF_WASTE_CAN ( 1 )) ! fraction of waste heat released into the canyon ALLOCATE ( B % XEFF_HEAT ( 1 )) ! efficiency of the heating system ! ! Indoor parameters ! ALLOCATE ( B % XTI_BLD ( 1 )) ! building interior temperature    (K) ALLOCATE ( B % XT_FLOOR ( 1 , KFLOOR_LAYER )) ! floor layer temperatures         (K) ALLOCATE ( B % XT_MASS ( 1 , KFLOOR_LAYER )) ! Air cooled building internal th. mass temperature (K) ! ALLOCATE ( B % XQIN ( 1 )) ! internal heat gains [W m-2(floor)] ALLOCATE ( B % XQIN_FRAD ( 1 )) ! radiant fraction of internal heat gains ALLOCATE ( B % XSHGC ( 1 )) ! solar heat gain coef. of windows ALLOCATE ( B % XSHGC_SH ( 1 )) ! solar heat gain coef. of windows + shading ALLOCATE ( B % XU_WIN ( 1 )) ! window U-factor [K m W-2] ALLOCATE ( B % XTRAN_WIN ( 1 )) ! window transmittance (-) ALLOCATE ( B % XGR ( 1 )) ! glazing ratio ALLOCATE ( B % XFLOOR_HEIGHT ( 1 )) ! building floor height [m] ALLOCATE ( B % XINF ( 1 )) ! infiltration/ventilation flow rate [AC/H] ! ! New parameters ! ALLOCATE ( B % XF_WATER_COND ( 1 )) ! fraction of evaporation for condensers (cooling system) ALLOCATE ( B % XAUX_MAX ( 1 )) ! Auxiliar variable for autosize calcs ALLOCATE ( B % XQIN_FLAT ( 1 )) ! Latent franction of internal heat gains ALLOCATE ( B % XHR_TARGET ( 1 )) ! Relative humidity setpoint ALLOCATE ( B % XT_WIN2 ( 1 )) ! Indoor window temperature [K] ALLOCATE ( B % XQI_BLD ( 1 )) ! Indoor air specific humidity [kg kg-1] ALLOCATE ( B % XV_VENT ( 1 )) ! Ventilation flow rate [AC/H] ALLOCATE ( B % XCAP_SYS_HEAT ( 1 )) ! Capacity of the heating system ! [W m-2(bld)] ALLOCATE ( B % XCAP_SYS_RAT ( 1 )) ! Rated capacity of the cooling system ! [W m-2(bld)] ALLOCATE ( B % XT_ADP ( 1 )) ! Apparatus dewpoint temperature of the ! cooling coil [K] ALLOCATE ( B % XM_SYS_RAT ( 1 )) ! Rated HVAC mass flow rate ! [kg s-1 m-2(bld)] ALLOCATE ( B % XCOP_RAT ( 1 )) ! Rated COP of the cooling system ALLOCATE ( B % XT_WIN1 ( 1 )) ! outdoor window temperature [K] ALLOCATE ( B % XALB_WIN ( 1 )) ! window albedo ALLOCATE ( B % XABS_WIN ( 1 )) ! window absortance ALLOCATE ( B % XT_SIZE_MAX ( 1 )) ! Maximum outdoor air temperature for ! HVAC sizing [K] ALLOCATE ( B % XT_SIZE_MIN ( 1 )) ! Minimum outdoor air temperature for ! HVAC sizing [K] ALLOCATE ( B % XUGG_WIN ( 1 )) ! Window glass-to-glass U-factor [K m W-2] ALLOCATE ( B % LSHADE ( 1 )) ! flag to activate shading devices -> LOGICAL in the code ALLOCATE ( B % XSHADE ( 1 )) ! flag to activate shading devices -> REAL for i/o 0. or 1. ALLOCATE ( B % CNATVENT ( 1 )) ! flag to activate natural ventilation 'NONE', 'MANU', 'AUTO' ALLOCATE ( B % XNATVENT ( 1 )) ! flag to describe surventilation system for i/o ! 0 for NONE, 1 for MANU and 2 for AUTO ALLOCATE ( B % LSHAD_DAY ( 1 )) !Has shading been necessary this day ? ALLOCATE ( B % LNATVENT_NIGHT ( 1 )) !Has nocturnal surventilation been necessary and possible this night ? ! !indoor relative surfaces and view factors ALLOCATE ( B % XN_FLOOR ( 1 )) ! Number of floors ALLOCATE ( B % XGLAZ_O_BLD ( 1 )) ! Window area [m2_win/m2_bld] ALLOCATE ( B % XMASS_O_BLD ( 1 )) ! Mass area [m2_mass/m2_bld] ALLOCATE ( B % XFLOOR_HW_RATIO ( 1 )) ! H/W ratio of 1 floor level ALLOCATE ( B % XF_FLOOR_MASS ( 1 )) ! View factor floor-mass ALLOCATE ( B % XF_FLOOR_WALL ( 1 )) ! View factor floor-wall ALLOCATE ( B % XF_FLOOR_WIN ( 1 )) ! View factor floor-window ALLOCATE ( B % XF_FLOOR_ROOF ( 1 )) ! View factor floor-roof ALLOCATE ( B % XF_WALL_FLOOR ( 1 )) ! View factor wall-floor ALLOCATE ( B % XF_WALL_MASS ( 1 )) ! View factor wall-mass ALLOCATE ( B % XF_WALL_WIN ( 1 )) ! View factor wall-win ALLOCATE ( B % XF_WIN_FLOOR ( 1 )) ! View factor win-floor ALLOCATE ( B % XF_WIN_MASS ( 1 )) ! View factor win-mass ALLOCATE ( B % XF_WIN_WALL ( 1 )) ! View factor win-wall ALLOCATE ( B % XF_WIN_WIN ( 1 )) ! indoor View factor win-win ALLOCATE ( B % XF_MASS_FLOOR ( 1 )) ! View factor mass-floor ALLOCATE ( B % XF_MASS_WALL ( 1 )) ! View factor mass-wall ALLOCATE ( B % XF_MASS_WIN ( 1 )) ! View factor mass-window ! !------------------------------------------------------------------------------- ! ! TEB structure ! ! Geometric Parameters: ! ALLOCATE ( T % XROAD_DIR ( 1 )) ! Road direction (deg from North, clockwise) ALLOCATE ( T % XGARDEN ( 1 )) ! fraction of veg in the streets   (-) ALLOCATE ( T % XGREENROOF ( 1 )) ! fraction of greenroofs on roofs  (-) ALLOCATE ( T % XBLD ( 1 )) ! fraction of buildings            (-) ALLOCATE ( T % XROAD ( 1 )) ! fraction of roads                (-) ALLOCATE ( T % XCAN_HW_RATIO ( 1 )) ! canyon    h/W                    (-) ALLOCATE ( T % XBLD_HEIGHT ( 1 )) ! buildings height 'h'             (m) ALLOCATE ( T % XWALL_O_HOR ( 1 )) ! wall surf. / hor. surf.          (-) ALLOCATE ( T % XROAD_O_GRND ( 1 )) ! road surf. / (road + garden surf.) (-) ALLOCATE ( T % XGARDEN_O_GRND ( 1 )) ! gard. surf. / (road + garden surf.)(-) ALLOCATE ( T % XWALL_O_GRND ( 1 )) ! wall surf. / (road + garden surf.) (-) ALLOCATE ( T % XWALL_O_BLD ( 1 )) ! wall surf. / bld surf. (-) ALLOCATE ( T % XZ0_TOWN ( 1 )) ! roughness length for momentum    (m) ALLOCATE ( T % XSVF_ROAD ( 1 )) ! road sky view factor             (-) ALLOCATE ( T % XSVF_GARDEN ( 1 )) ! green area sky view factor       (-) ALLOCATE ( T % XSVF_WALL ( 1 )) ! wall sky view factor             (-) ! ! Roof parameters ! ALLOCATE ( T % XALB_ROOF ( 1 )) ! roof albedo                      (-) ALLOCATE ( T % XEMIS_ROOF ( 1 )) ! roof emissivity                  (-) ALLOCATE ( T % XHC_ROOF ( 1 , KROOF_LAYER )) ! roof layers heat capacity        (J/K/m3) ALLOCATE ( T % XTC_ROOF ( 1 , KROOF_LAYER )) ! roof layers thermal conductivity (W/K/m) ALLOCATE ( T % XD_ROOF ( 1 , KROOF_LAYER )) ! depth of roof layers             (m) ALLOCATE ( T % XROUGH_ROOF ( 1 )) ! roof roughness coef ! ! ! Road parameters ! ALLOCATE ( T % XALB_ROAD ( 1 )) ! road albedo                      (-) ALLOCATE ( T % XEMIS_ROAD ( 1 )) ! road emissivity                  (-) ALLOCATE ( T % XHC_ROAD ( 1 , KROAD_LAYER )) ! road layers heat capacity        (J/K/m3) ALLOCATE ( T % XTC_ROAD ( 1 , KROAD_LAYER )) ! road layers thermal conductivity (W/K/m) ALLOCATE ( T % XD_ROAD ( 1 , KROAD_LAYER )) ! depth of road layers             (m) ! ! Wall parameters ! ALLOCATE ( T % XALB_WALL ( 1 )) ! wall albedo                      (-) ALLOCATE ( T % XEMIS_WALL ( 1 )) ! wall emissivity                  (-) ALLOCATE ( T % XHC_WALL ( 1 , KWALL_LAYER )) ! wall layers heat capacity        (J/K/m3) ALLOCATE ( T % XTC_WALL ( 1 , KWALL_LAYER )) ! wall layers thermal conductivity (W/K/m) ALLOCATE ( T % XD_WALL ( 1 , KWALL_LAYER )) ! depth of wall layers             (m) ALLOCATE ( T % XROUGH_WALL ( 1 )) ! wall roughness coef ! ! Building's use type ! ALLOCATE ( T % XRESIDENTIAL ( 1 )) ! fraction of Residential use      (-) ! ! anthropogenic fluxes ! ALLOCATE ( T % XH_TRAFFIC ( 1 )) ! anthropogenic sensible !                                                  ! heat fluxes due to traffic       (W/m2) ALLOCATE ( T % XLE_TRAFFIC ( 1 )) ! anthropogenic latent !                                                  ! heat fluxes due to traffic       (W/m2) ALLOCATE ( T % XH_INDUSTRY ( 1 )) ! anthropogenic sensible !                                                  ! heat fluxes due to factories     (W/m2) ALLOCATE ( T % XLE_INDUSTRY ( 1 )) ! anthropogenic latent !                                                  ! heat fluxes due to factories     (W/m2) ! ! temperatures for boundary conditions ! ALLOCATE ( T % XTI_ROAD ( 1 )) ! road interior temperature        (K) ! ! Prognostic variables: ! ALLOCATE ( T % XWS_ROOF ( 1 )) ! roof water reservoir             (kg/m2) ALLOCATE ( T % XWS_ROAD ( 1 )) ! road water reservoir             (kg/m2) ALLOCATE ( T % XT_ROOF ( 1 , KROOF_LAYER )) ! roof layer temperatures          (K) ALLOCATE ( T % XT_ROAD ( 1 , KROAD_LAYER )) ! road layer temperatures          (K) ALLOCATE ( T % XT_WALL_A ( 1 , KWALL_LAYER )) ! wall layer temperatures          (K) ALLOCATE ( T % XT_WALL_B ( 1 , KWALL_LAYER )) ! wall layer temperatures          (K) ! ALLOCATE ( T % XAC_ROOF ( 1 )) ! roof aerodynamic conductance     () ALLOCATE ( T % XAC_ROAD ( 1 )) ! road aerodynamic conductance     () ALLOCATE ( T % XAC_WALL ( 1 )) ! wall aerodynamic conductance     () ALLOCATE ( T % XAC_TOP ( 1 )) ! top  aerodynamic conductance     () ALLOCATE ( T % XAC_ROOF_WAT ( 1 )) ! water aerodynamic conductance    () ALLOCATE ( T % XAC_ROAD_WAT ( 1 )) ! water aerodynamic conductance    () ! ALLOCATE ( T % XQSAT_ROOF ( 1 )) ! humidity of saturation for roofs (kg/kg) ALLOCATE ( T % XQSAT_ROAD ( 1 )) ! humidity of saturation for roads (kg/kg) ! ALLOCATE ( T % XDELT_ROOF ( 1 )) ! humidity of saturation for roofs (-) ALLOCATE ( T % XDELT_ROAD ( 1 )) ! humidity of saturation for roads (-) ! ! Semi-prognostic variables: ! ALLOCATE ( T % XT_CANYON ( 1 )) ! canyon air temperature           (K) ALLOCATE ( T % XQ_CANYON ( 1 )) ! canyon air specific humidity     (kg/kg) ! ! ! Prognostic snow: ! ALLOCATE ( T % TSNOW_ROOF % WSNOW ( 1 , 1 )) ! snow (& liq. water) content      (kg/m2) ALLOCATE ( T % TSNOW_ROOF % T ( 1 , 1 )) ! temperature                      (K) ALLOCATE ( T % TSNOW_ROOF % RHO ( 1 , 1 )) ! density                          (kg m-3) ALLOCATE ( T % TSNOW_ROOF % ALB ( 1 )) ! albedo                           (-) ALLOCATE ( T % TSNOW_ROOF % EMIS ( 1 )) ! emissivity                       (-) ALLOCATE ( T % TSNOW_ROOF % TS ( 1 )) ! Surface temperature              (K) ALLOCATE ( T % TSNOW_ROAD % WSNOW ( 1 , 1 )) ! snow (& liq. water) content      (kg/m2) ALLOCATE ( T % TSNOW_ROAD % T ( 1 , 1 )) ! temperature                      (K) ALLOCATE ( T % TSNOW_ROAD % RHO ( 1 , 1 )) ! density                          (kg m-3) ALLOCATE ( T % TSNOW_ROAD % ALB ( 1 )) ! albedo                           (-) ALLOCATE ( T % TSNOW_ROAD % EMIS ( 1 )) ! emissivity                       (-) ALLOCATE ( T % TSNOW_ROAD % TS ( 1 )) ! Surface temperature              (K) !------------------------------------------------------------------------------- ! ! solar panels ! ALLOCATE ( TPN % XEMIS_PANEL ( 1 )) ! emissivity of solar panels               (-) ALLOCATE ( TPN % XALB_PANEL ( 1 )) ! albedo of soolar panels                  (-) ALLOCATE ( TPN % XEFF_PANEL ( 1 )) ! Efficiency coefficient of solar panels   (-) ALLOCATE ( TPN % XFRAC_PANEL ( 1 )) ! Fraction of SOLAR panels on roofs        (-) ALLOCATE ( TPN % XTHER_PRODC_DAY ( 1 )) ! Present day integrated thermal production of energy    (J/m2 panel) !------------------------------------------------------------------------------- ! ! Irrigation ! ALLOCATE ( TIR % XRD_START_MONTH ( 1 )) ! roads : start month for irrigation (included) ALLOCATE ( TIR % XRD_END_MONTH ( 1 )) ! roads : end   month for irrigation (included) ALLOCATE ( TIR % XRD_START_HOUR ( 1 )) ! roads : start solar hour for irrigation (included, hour) ALLOCATE ( TIR % XRD_END_HOUR ( 1 )) ! roads : end   solar hour for irrigation (excluded, hour) ALLOCATE ( TIR % XRD_24H_IRRIG ( 1 )) ! roads : total irrigation over 24 hours (kg/m2) ! !------------------------------------------------------------------------------- ! ! TEB diagnostics structure ! ALLOCATE ( DMT % XZ0_TOWN ( 1 )) ! town roughness length ALLOCATE ( DMT % XQF_BLD ( 1 )) ! domestic heating ALLOCATE ( DMT % XFLX_BLD ( 1 )) ! heat flux from bld ALLOCATE ( DMT % XQF_TOWN ( 1 )) ! total anthropogenic heat ALLOCATE ( DMT % XDQS_TOWN ( 1 )) ! storage inside building ! ALLOCATE ( DMT % XH_WALL_A ( 1 )) ! wall sensible heat flux          (W/m2) ALLOCATE ( DMT % XH_WALL_B ( 1 )) ! wall sensible heat flux          (W/m2) ALLOCATE ( DMT % XH_ROOF ( 1 )) ! roof sensible heat flux          (W/m2) ALLOCATE ( DMT % XH_ROAD ( 1 )) ! road sensible heat flux          (W/m2) ALLOCATE ( DMT % XH_STRLROOF ( 1 )) ! structural roof sens. heat flux  (W/m2) ALLOCATE ( DMT % XH_BLT ( 1 )) ! built surf sensible heat flux    (W/m2) ALLOCATE ( DMT % XRN_WALL_A ( 1 )) ! net radiation at wall            (W/m2) ALLOCATE ( DMT % XRN_WALL_B ( 1 )) ! net radiation at wall            (W/m2) ALLOCATE ( DMT % XRN_ROOF ( 1 )) ! net radiation at roof            (W/m2) ALLOCATE ( DMT % XRN_ROAD ( 1 )) ! net radiation at road            (W/m2) ALLOCATE ( DMT % XRN_STRLROOF ( 1 )) !net radiation at structural roofs(W/m2) ALLOCATE ( DMT % XRN_BLT ( 1 )) ! net radiation at built surf      (W/m2) ALLOCATE ( DMT % XGFLUX_WALL_A ( 1 )) !net wall conduction flux        (W/m2) ALLOCATE ( DMT % XGFLUX_WALL_B ( 1 )) !net wall conduction flux        (W/m2) ALLOCATE ( DMT % XGFLUX_ROOF ( 1 )) ! net roof conduction flux         (W/m2) ALLOCATE ( DMT % XGFLUX_ROAD ( 1 )) ! net road conduction flux         (W/m2) ALLOCATE ( DMT % XGFLUX_STRLROOF ( 1 )) !net structural roof cond flux (W/m2) ALLOCATE ( DMT % XGFLUX_BLT ( 1 )) ! net built surf conduction flux   (W/m2) ALLOCATE ( DMT % XLE_ROOF ( 1 )) ! roof latent heat flux            (W/m2) ALLOCATE ( DMT % XLE_ROAD ( 1 )) ! road latent heat flux            (W/m2) ALLOCATE ( DMT % XLE_STRLROOF ( 1 )) !structural roof latent heat flux (W/m2) ALLOCATE ( DMT % XLE_BLT ( 1 )) ! built surf latent heat flux      (W/m2) ! ALLOCATE ( DMT % XRUNOFF_TOWN ( 1 )) ! aggregated water runoff for town      (kg/m2/s) ALLOCATE ( DMT % XIRRIG_GARDEN ( 1 )) ! summer ground irrigation rate         (kg/m2/s) ALLOCATE ( DMT % XRUNOFF_ROAD ( 1 )) ! water runoff for roads                (kg/m2/s) ALLOCATE ( DMT % XIRRIG_ROAD ( 1 )) ! road man-made watering rate           (kg/m2/s) ALLOCATE ( DMT % XRUNOFF_ROOF ( 1 )) ! aggregated water runoff for roofs     (kg/m2/s) ALLOCATE ( DMT % XRUNOFF_STRLROOF ( 1 )) ! water runoff for structural roofs     (kg/m2/s) ALLOCATE ( DMT % XIRRIG_GREENROOF ( 1 )) ! summer ground irrigation rate         (kg/m2/s) ! ALLOCATE ( DMT % XABS_SW_ROOF ( 1 )) ! absorbed shortwave radiation over roofs ALLOCATE ( DMT % XABS_SW_SNOW_ROOF ( 1 )) ! absorbed longwave radiation over roofs ALLOCATE ( DMT % XABS_LW_ROOF ( 1 )) ! absorbed shortwave radiation over roofs ALLOCATE ( DMT % XABS_LW_SNOW_ROOF ( 1 )) ! absorbed longwave radiation over roofs ALLOCATE ( DMT % XABS_SW_ROAD ( 1 )) ! absorbed shortwave radiation over roads ALLOCATE ( DMT % XABS_SW_SNOW_ROAD ( 1 )) ! absorbed longwave radiation over roads ALLOCATE ( DMT % XABS_LW_ROAD ( 1 )) ! absorbed shortwave radiation over roads ALLOCATE ( DMT % XABS_LW_SNOW_ROAD ( 1 )) ! absorbed longwave radiation over roads ALLOCATE ( DMT % XABS_SW_WALL_A ( 1 )) ! absorbed shortwave radiation over walls ALLOCATE ( DMT % XABS_SW_WALL_B ( 1 )) ! absorbed shortwave radiation over walls ALLOCATE ( DMT % XABS_LW_WALL_A ( 1 )) ! absorbed shortwave radiation over walls ALLOCATE ( DMT % XABS_LW_WALL_B ( 1 )) ! absorbed shortwave radiation over walls ALLOCATE ( DMT % XABS_SW_GARDEN ( 1 )) ! absorbed shortwave radiation over green areas ALLOCATE ( DMT % XABS_LW_GARDEN ( 1 )) ! absorbed shortwave radiation over green areas ALLOCATE ( DMT % XABS_SW_GREENROOF ( 1 )) ! absorbed shortwave radiation over green roofs ALLOCATE ( DMT % XABS_LW_GREENROOF ( 1 )) ! absorbed shortwave radiation over green roofs ALLOCATE ( DMT % XG_GREENROOF_ROOF ( 1 )) ! Heat flux between green roof and structural roof ALLOCATE ( DMT % XABS_SW_PANEL ( 1 )) ! absorbed shortwave radiation over solar panels ALLOCATE ( DMT % XABS_LW_PANEL ( 1 )) ! absorbed longwave  radiation over solar panels ! ALLOCATE ( DMT % XRN_PANEL ( 1 )) ! net radiation           over solar panels (W/m2) ALLOCATE ( DMT % XH_PANEL ( 1 )) ! sensible heat flux      over solar panels (W/m2) ALLOCATE ( DMT % XTHER_PROD_PANEL ( 1 )) ! thermal      production of   solar panels (W/m2 thermal panel) ALLOCATE ( DMT % XPHOT_PROD_PANEL ( 1 )) ! photovoltaic production of   solar panels (W/m2 photovoltaic panel) ALLOCATE ( DMT % XPROD_PANEL ( 1 )) !              production of   solar panels (W/m2 panel) ALLOCATE ( DMT % XTHER_PROD_BLD ( 1 )) ! thermal      production of   solar panels (W/m2 bld) ALLOCATE ( DMT % XPHOT_PROD_BLD ( 1 )) ! photovoltaic production of   solar panels (W/m2 bld) ALLOCATE ( DMT % XH_BLD_COOL ( 1 )) ! Sensible cooling energy demand ! of the building [W m-2(bld)] ALLOCATE ( DMT % XT_BLD_COOL ( 1 )) ! Total cooling energy demand ! of the building [W m-2(bld)] ALLOCATE ( DMT % XH_BLD_HEAT ( 1 )) ! Heating energy demand ! of the building [W m-2(bld)] ALLOCATE ( DMT % XLE_BLD_COOL ( 1 )) ! Latent cooling energy demand ! of the building [W m-2(bld)] ALLOCATE ( DMT % XLE_BLD_HEAT ( 1 )) ! Latent heating energy demand ! of the building [W m-2(bld)] ALLOCATE ( DMT % XH_WASTE ( 1 )) ! Sensible waste heat from HVAC system ! [W m-2(tot)] ALLOCATE ( DMT % XLE_WASTE ( 1 )) ! Latent waste heat from HVAC system ! [W m-2(tot)] ALLOCATE ( DMT % XHVAC_COOL ( 1 )) ! Energy consumption of the cooling system ! [W m-2(bld)] ALLOCATE ( DMT % XHVAC_HEAT ( 1 )) ! Energy consumption of the heating system ! [W m-2(bld)] ALLOCATE ( DMT % XCAP_SYS ( 1 )) ! Actual capacity of the cooling system ! [W m-2(bld)] ALLOCATE ( DMT % XM_SYS ( 1 )) ! Actual HVAC mass flow rate ! [kg s-1 m-2(bld)] ALLOCATE ( DMT % XCOP ( 1 )) ! COP of the cooling system ALLOCATE ( DMT % XQ_SYS ( 1 )) ! Supply air specific humidity [kg kg-1] ALLOCATE ( DMT % XT_SYS ( 1 )) ! Supply air temperature [K] ALLOCATE ( DMT % XTR_SW_WIN ( 1 )) ! Solar radiation transmitted throught ! windows [W m-2(bld)] ALLOCATE ( DMT % XFAN_POWER ( 1 )) ! HVAC fan power ALLOCATE ( DMT % XABS_SW_WIN ( 1 )) ! window absorbed shortwave radiation [W m-2] ALLOCATE ( DMT % XABS_LW_WIN ( 1 )) ! absorbed infrared rad. [W m-2] ALLOCATE ( DMT % XEMIT_LW_FAC ( 1 )) ! LW flux emitted by the facade (W/m2 facade) ALLOCATE ( DMT % XEMIT_LW_GRND ( 1 )) ! LW flux emitted by the ground (W/m2 ground = road + garden) ALLOCATE ( DMT % XT_RAD_IND ( 1 )) !Indoor mean radiant temperature [K] ALLOCATE ( DMT % XREF_SW_GRND ( 1 )) ! total solar rad reflected by ground ALLOCATE ( DMT % XREF_SW_FAC ( 1 )) ! total solar rad reflected by facade ALLOCATE ( DMT % XHU_BLD ( 1 )) !Indoor relative humidity ! ALLOCATE ( DMT % XTCOOL_TARGET ( 1 )) ! current cooling setpoint of indoor air ALLOCATE ( DMT % XTHEAT_TARGET ( 1 )) ! current heating setpoint of indoor air ALLOCATE ( DMT % XQIN ( 1 )) ! current internal heat gains [W m-2(floor)] ! New fields ALLOCATE ( GDM % VD % ND % AL ( 1 )) ALLOCATE ( GDM % VD % NDE % AL ( 1 )) ALLOCATE ( GDM % VD % NDM % AL ( 1 )) ALLOCATE ( GDM % NPE % AL ( 1 )) ALLOCATE ( GRM % VD % ND % AL ( 1 )) ALLOCATE ( GRM % VD % NDE % AL ( 1 )) ALLOCATE ( GRM % VD % NDM % AL ( 1 )) ALLOCATE ( GRM % NPE % AL ( 1 )) !------------------------------------------------------------------------------- ! ! END SUBROUTINE ALLOC_TEB_STRUCT","tags":"","loc":"sourcefile/alloc_teb_struct.f90.html"},{"title":"modi_teb_garden_struct.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_TEB_GARDEN_STRUCT Source Code modi_teb_garden_struct.f90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL licence !SFX_LIC version 2.1. See Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. !     ######### MODULE MODI_TEB_GARDEN_STRUCT ! INTERFACE ! SUBROUTINE TEB_GARDEN_STRUCT ( OGARDEN , OGREENROOF , OSOLAR_PANEL , & HZ0H , HIMPLICIT_WIND , HROAD_DIR , HWALL_OPT , TPTIME , & PTSUN , PT_CAN , PQ_CAN , PU_CAN , & PT_LOWCAN , PQ_LOWCAN , PU_LOWCAN , PZ_LOWCAN , PTI_BLD , & PT_ROOF , PT_ROAD , PT_WALL_A , PT_WALL_B , & PWS_ROOF , PWS_ROAD , & HSNOW_ROOF , & PWSNOW_ROOF , PTSNOW_ROOF , PRSNOW_ROOF , PASNOW_ROOF , & PTSSNOW_ROOF , PESNOW_ROOF , & HSNOW_ROAD , & PWSNOW_ROAD , PTSNOW_ROAD , PRSNOW_ROAD , PASNOW_ROAD , & PTSSNOW_ROAD , PESNOW_ROAD , & PPEW_A_COEF , PPEW_B_COEF , & PPEW_A_COEF_LOWCAN , PPEW_B_COEF_LOWCAN , & PPS , PPA , PEXNS , PEXNA , & PTA , PQA , PRHOA , PCO2 , & PLW_RAD , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & PZENITH , PAZIM , & PRR , PSR , & PZREF , PUREF , PVMOD , & PH_TRAFFIC , PLE_TRAFFIC , PH_INDUSTRY , PLE_INDUSTRY , & PTSTEP , PZ0_TOWN , PBLD , PGARDEN , PROAD_DIR , PROAD , & PFRAC_GR , & PBLD_HEIGHT , PWALL_O_HOR , PCAN_HW_RATIO , & PROAD_O_GRND , PGARDEN_O_GRND , PWALL_O_GRND , & PALB_ROOF , PEMIS_ROOF , & PHC_ROOF , PTC_ROOF , PD_ROOF , & PALB_ROAD , PEMIS_ROAD , PSVF_ROAD , & PHC_ROAD , PTC_ROAD , PD_ROAD , & PALB_WALL , PEMIS_WALL , PSVF_WALL , & PSVF_GARDEN , & PHC_WALL , PTC_WALL , PD_WALL , & PRN_ROOF , PH_ROOF , PLE_ROOF , PLEW_ROOF , PGFLUX_ROOF , & PRUNOFF_ROOF , & PRN_ROAD , PH_ROAD , PLE_ROAD , PLEW_ROAD , PGFLUX_ROAD , & PRUNOFF_ROAD , & PRN_WALL_A , PH_WALL_A , PLE_WALL_A , PGFLUX_WALL_A , & PRN_WALL_B , PH_WALL_B , PLE_WALL_B , PGFLUX_WALL_B , & PRN_STRLROOF , PH_STRLROOF , PLE_STRLROOF , PGFLUX_STRLROOF , & PRUNOFF_STRLROOF , & PRN_BLT , PH_BLT , PLE_BLT , PGFLUX_BLT , & PRNSNOW_ROOF , PHSNOW_ROOF , PLESNOW_ROOF , PGSNOW_ROOF , & PMELT_ROOF , & PRNSNOW_ROAD , PHSNOW_ROAD , PLESNOW_ROAD , PGSNOW_ROAD , & PMELT_ROAD , & PRN_GRND , PH_GRND , PLE_GRND , PGFLUX_GRND , & PRN_TOWN , PH_TOWN , PLE_TOWN , PGFLUX_TOWN , PEVAP_TOWN , & PRUNOFF_TOWN , PSFCO2 , & PUW_GRND , PUW_ROOF , PDUWDU_GRND , PDUWDU_ROOF , & PUSTAR_TOWN , PCD , PCDN , PCH_TOWN , PRI_TOWN , & PTS_TOWN , PEMIS_TOWN , PDIR_ALB_TOWN , PSCA_ALB_TOWN , & PRESA_TOWN , PDQS_TOWN , PQF_TOWN , PQF_BLD , & PFLX_BLD , PAC_ROAD , PAC_GARDEN , PAC_GREENROOF , & PAC_ROAD_WAT , PAC_GARDEN_WAT , PAC_GREENROOF_WAT , & PABS_SW_ROOF , PABS_LW_ROOF , & PABS_SW_SNOW_ROOF , PABS_LW_SNOW_ROOF , & PABS_SW_ROAD , PABS_LW_ROAD , & PABS_SW_SNOW_ROAD , PABS_LW_SNOW_ROAD , & PABS_SW_WALL_A , PABS_LW_WALL_A , & PABS_SW_WALL_B , PABS_LW_WALL_B , & PABS_SW_PANEL , PABS_LW_PANEL , & PABS_SW_GARDEN , PABS_LW_GARDEN , & PABS_SW_GREENROOF , PABS_LW_GREENROOF , & PG_GREENROOF_ROOF , & HCOOL_COIL , PF_WATER_COND , HHEAT_COIL , & HNATVENT , PNATVENT , KDAY , PAUX_MAX , PT_FLOOR , & PT_MASS , PH_BLD_COOL , PT_BLD_COOL , PH_BLD_HEAT , & PLE_BLD_COOL , PLE_BLD_HEAT , PH_WASTE , PLE_WASTE , & PF_WASTE_CAN , PHVAC_COOL , PHVAC_HEAT , PQIN , PQIN_FRAD , & PQIN_FLAT , PGR , PEFF_HEAT , PINF , & PTCOOL_TARGET , PTHEAT_TARGET , PHR_TARGET , PT_WIN2 , & PQI_BLD , PV_VENT , PCAP_SYS_HEAT , PCAP_SYS_RAT , PT_ADP , & PM_SYS_RAT , PCOP_RAT , PCAP_SYS , PM_SYS , PCOP , PQ_SYS , & PT_SYS , PTR_SW_WIN , PFAN_POWER , PHC_FLOOR , PTC_FLOOR , & PD_FLOOR , PT_WIN1 , PABS_SW_WIN , PABS_LW_WIN , PSHGC , & PSHGC_SH , PUGG_WIN , PALB_WIN , PABS_WIN , PEMIT_LW_FAC , & PEMIT_LW_GRND , PT_RAD_IND , PREF_SW_GRND , PREF_SW_FAC , & PHU_BLD , PTIME , OSHADE , PSHADE , OSHAD_DAY , ONATVENT_NIGHT , HBEM , & PN_FLOOR , PWALL_O_BLD , PGLAZ_O_BLD , PMASS_O_BLD , & PFLOOR_HW_RATIO , PF_FLOOR_MASS , PF_FLOOR_WALL , & PF_FLOOR_WIN , PF_FLOOR_ROOF , PF_WALL_FLOOR , PF_WALL_MASS ,& PF_WALL_WIN , PF_WIN_FLOOR , PF_WIN_MASS , PF_WIN_WALL , & PF_MASS_FLOOR , PF_MASS_WALL , PF_MASS_WIN , OCANOPY , & PTRAN_WIN , HCH_BEM , PROUGH_ROOF , PROUGH_WALL , PF_WIN_WIN ,& OPAR_RD_IRRIG , PRD_START_MONTH , PRD_END_MONTH , & PRD_START_HOUR , PRD_END_HOUR , PRD_24H_IRRIG , PIRRIG_ROAD ,& PEMIS_PANEL , PALB_PANEL , PEFF_PANEL , PFRAC_PANEL , & PRESIDENTIAL , & PTHER_PROD_PANEL , PPHOT_PROD_PANEL , PPROD_PANEL , & PTHER_PROD_BLD , PPHOT_PROD_BLD , PPROD_BLD , & PTHER_PRODC_DAY , PH_PANEL , PRN_PANEL , & PDT_RES , PDT_OFF , & PCUR_TCOOL_TARGET , PCUR_THEAT_TARGET , PCUR_QIN ) !   ########################################################################## ! !!****  *TEB_GARDEN_STRUCT* !! !!    PURPOSE !!    ------- ! ! To put all individual variables in the corresponding fortran structure ! for the call to TEB_GARDEN routine. ! !!**  METHOD !     ------ ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!    Original    03/2018 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TYPE_DATE_SURF ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! ! ! ! LOGICAL , INTENT ( IN ) :: OGARDEN ! Flag to use a garden    model inside the canyon LOGICAL , INTENT ( IN ) :: OGREENROOF ! Flag to use a greenroof model on roofs LOGICAL , INTENT ( IN ) :: OSOLAR_PANEL ! Flag to use a Solar Panel model on roofs CHARACTER ( LEN = 6 ) , INTENT ( IN ) :: HZ0H ! TEB option for z0h roof & road !                                                         ! 'MASC95' : Mascart et al 1995 !                                                         ! 'BRUT82' : Brustaert     1982 !                                                         ! 'KAND07' : Kanda         2007 CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option !                                                         ! 'OLD' = direct !                                                         ! 'NEW' = Taylor serie, order 1 CHARACTER ( LEN = 4 ) , INTENT ( IN ) :: HROAD_DIR ! TEB option for road direction ! 'UNIF' : uniform roads ! 'ORIE' : specified !   road orientation CHARACTER ( LEN = 4 ) , INTENT ( IN ) :: HWALL_OPT ! TEB option for walls representation ! 'UNIF' : uniform walls ! 'TWO ' : 2 opposite  walls TYPE ( DATE_TIME ) , INTENT ( IN ) :: TPTIME ! current date and time from teb REAL , DIMENSION (:), INTENT ( IN ) :: PTSUN ! solar time   (s from midnight) ! REAL , DIMENSION (:) , INTENT ( INOUT ) :: PT_CAN ! canyon air temperature REAL , DIMENSION (:) , INTENT ( INOUT ) :: PQ_CAN ! canyon air specific humidity REAL , DIMENSION (:) , INTENT ( IN ) :: PU_CAN ! canyon hor. wind REAL , DIMENSION (:) , INTENT ( IN ) :: PU_LOWCAN ! wind near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PT_LOWCAN ! temp. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PQ_LOWCAN ! hum. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PZ_LOWCAN ! height of atm. var. near the road REAL , DIMENSION (:) , INTENT ( INOUT ) :: PTI_BLD ! inside building temperature REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_ROOF ! roof layers temperatures REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_ROAD ! road layers temperatures REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_WALL_A ! wall layers temperatures REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_WALL_B ! wall layers temperatures REAL , DIMENSION (:) , INTENT ( INOUT ) :: PWS_ROOF ! roof water reservoir REAL , DIMENSION (:) , INTENT ( INOUT ) :: PWS_ROAD ! road water reservoir CHARACTER ( LEN =* ) , INTENT ( IN ) :: HSNOW_ROOF ! snow roof scheme 'NONE', 'D95 ', '1-L ' CHARACTER ( LEN =* ) , INTENT ( IN ) :: HSNOW_ROAD ! snow road scheme 'NONE', 'D95 ', '1-L ' REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PWSNOW_ROOF ! snow layers reservoir REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PTSNOW_ROOF ! snow layers temperature REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PRSNOW_ROOF ! snow layers density REAL , DIMENSION (:) , INTENT ( INOUT ) :: PASNOW_ROOF ! snow albedo REAL , DIMENSION (:) , INTENT ( INOUT ) :: PESNOW_ROOF ! snow emissivity REAL , DIMENSION (:) , INTENT ( INOUT ) :: PTSSNOW_ROOF ! snow surface temperature REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PWSNOW_ROAD ! snow layers reservoir REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PTSNOW_ROAD ! snow layers temperature REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PRSNOW_ROAD ! snow layers density REAL , DIMENSION (:) , INTENT ( INOUT ) :: PASNOW_ROAD ! snow albedo REAL , DIMENSION (:) , INTENT ( INOUT ) :: PESNOW_ROAD ! snow emissivity REAL , DIMENSION (:) , INTENT ( INOUT ) :: PTSSNOW_ROAD ! snow surface temperature REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF_LOWCAN ! implicit coefficients for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF_LOWCAN ! between low canyon wind and road REAL , DIMENSION (:) , INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:) , INTENT ( IN ) :: PPA ! pressure at the first atmospheric level REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:) , INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PQA ! specific humidity at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNA ! exner function at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PRHOA ! air density at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PCO2 ! CO2 concentration in the air    (kg/m3) REAL , DIMENSION (:) , INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:,:), INTENT ( IN ) :: PDIR_SW ! incoming direct solar rad on an horizontal surface REAL , DIMENSION (:,:), INTENT ( IN ) :: PSCA_SW ! scattered incoming solar rad. REAL , DIMENSION (:) , INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) INTEGER , INTENT ( IN ) :: KSW ! number of short-wave spectral bands REAL , DIMENSION (:) , INTENT ( IN ) :: PZENITH ! solar zenithal angle REAL , DIMENSION (:) , INTENT ( IN ) :: PAZIM ! solar azimuthal angle ! (radian form N, clockwise) REAL , DIMENSION (:) , INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:) , INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:) , INTENT ( IN ) :: PH_TRAFFIC ! anthropogenic sensible heat fluxes due to traffic REAL , DIMENSION (:) , INTENT ( IN ) :: PLE_TRAFFIC ! anthropogenic latent heat fluxes due to traffic REAL , DIMENSION (:) , INTENT ( IN ) :: PH_INDUSTRY ! anthropogenic sensible heat fluxes due to factories REAL , DIMENSION (:) , INTENT ( IN ) :: PLE_INDUSTRY ! anthropogenic latent heat fluxes due to factories REAL , DIMENSION (:) , INTENT ( IN ) :: PZREF ! reference height of the first atm level (temperature) REAL , DIMENSION (:) , INTENT ( IN ) :: PUREF ! reference height of the first atm level (wind) REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:) , INTENT ( IN ) :: PZ0_TOWN ! town roughness length for momentum REAL , DIMENSION (:) , INTENT ( IN ) :: PBLD ! fraction of buildings REAL , DIMENSION (:) , INTENT ( IN ) :: PGARDEN ! fraction of green areas REAL , DIMENSION (:) , INTENT ( IN ) :: PROAD_DIR ! road direction (deg from North, clockwise) REAL , DIMENSION (:) , INTENT ( IN ) :: PROAD ! fraction of roads REAL , DIMENSION (:) , INTENT ( IN ) :: PFRAC_GR ! fraction of green roofs REAL , DIMENSION (:) , INTENT ( IN ) :: PBLD_HEIGHT ! buildings h REAL , DIMENSION (:) , INTENT ( IN ) :: PWALL_O_HOR ! wall surf. / hor. surf. REAL , DIMENSION (:) , INTENT ( IN ) :: PCAN_HW_RATIO ! canyon    h/W REAL , DIMENSION (:) , INTENT ( IN ) :: PROAD_O_GRND ! road surf.   / (road+garden surf.) REAL , DIMENSION (:) , INTENT ( IN ) :: PGARDEN_O_GRND ! garden surf. / (road+garden surf.) REAL , DIMENSION (:) , INTENT ( IN ) :: PWALL_O_GRND ! wall surf.   / (road+garden surf.) REAL , DIMENSION (:) , INTENT ( IN ) :: PALB_ROOF ! roof albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PEMIS_ROOF ! roof emissivity REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC_ROOF ! heat capacity for roof layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC_ROOF ! thermal conductivity for roof layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PD_ROOF ! depth of roof layers REAL , DIMENSION (:) , INTENT ( IN ) :: PALB_ROAD ! road albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PEMIS_ROAD ! road emissivity REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC_ROAD ! heat capacity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC_ROAD ! thermal conductivity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PD_ROAD ! depth of road layers REAL , DIMENSION (:) , INTENT ( IN ) :: PSVF_ROAD ! road sky view factor REAL , DIMENSION (:) , INTENT ( IN ) :: PALB_WALL ! wall albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PEMIS_WALL ! wall emissivity REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC_WALL ! heat capacity for wall layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC_WALL ! thermal conductivity for wall layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PD_WALL ! depth of wall layers REAL , DIMENSION (:) , INTENT ( IN ) :: PSVF_WALL ! wall sky view factor REAL , DIMENSION (:) , INTENT ( IN ) :: PSVF_GARDEN ! green area sky view factor ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_ROOF ! net radiation over roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_ROOF ! sensible heat flux over roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_ROOF ! latent heat flux over roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PLEW_ROOF ! latent heat flux over roof (snow) REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_ROOF ! flux through the roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF_ROOF ! runoff over the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_ROAD ! net radiation over road REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_ROAD ! sensible heat flux over road REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_ROAD ! latent heat flux over road REAL , DIMENSION (:) , INTENT ( OUT ) :: PLEW_ROAD ! latent heat flux over road (snow) REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_ROAD ! flux through the road REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF_ROAD ! runoff over the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_WALL_A ! net radiation over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_WALL_A ! sensible heat flux over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_WALL_A ! latent heat flux over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_WALL_A ! flux through the wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_WALL_B ! net radiation over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_WALL_B ! sensible heat flux over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_WALL_B ! latent heat flux over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_WALL_B ! flux through the wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_STRLROOF ! net radiation over structural roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_STRLROOF ! sensible heat flux over structural roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_STRLROOF ! latent heat flux over structural roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_STRLROOF ! flux through the structural roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF_STRLROOF ! runoff aver structural roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_BLT ! net radiation over built surf REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_BLT ! sensible heat flux over built surf REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_BLT ! latent heat flux over built surf REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_BLT ! flux through the built surf ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PRNSNOW_ROOF ! net radiation over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PHSNOW_ROOF ! sensible heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PLESNOW_ROOF ! latent heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PGSNOW_ROOF ! flux under the snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PMELT_ROOF ! snow melt REAL , DIMENSION (:) , INTENT ( OUT ) :: PRNSNOW_ROAD ! net radiation over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PHSNOW_ROAD ! sensible heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PLESNOW_ROAD ! latent heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PGSNOW_ROAD ! flux under the snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PMELT_ROAD ! snow melt ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_GRND ! net radiation over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_GRND ! sensible heat flux over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_GRND ! latent heat flux over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_GRND ! flux through the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_TOWN ! net radiation over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_TOWN ! sensible heat flux over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_TOWN ! latent heat flux over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_TOWN ! flux through the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PEVAP_TOWN ! evaporation flux (kg/m2/s) REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF_TOWN ! runoff over the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PSFCO2 ! flux of CO2       (m/s*kg_CO2/kg_air) REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW_GRND ! momentum flux for ground built surf REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW_ROOF ! momentum flux for roofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PDUWDU_GRND ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PDUWDU_ROOF ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PUSTAR_TOWN ! friciton velocity over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PCD ! town averaged drag coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PCDN ! town averaged neutral drag coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PCH_TOWN ! town averaged heat transfer coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PRI_TOWN ! town averaged Richardson number REAL , DIMENSION (:) , INTENT ( OUT ) :: PTS_TOWN ! town surface temperature REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIS_TOWN ! town equivalent emissivity REAL , DIMENSION (:) , INTENT ( OUT ) :: PDIR_ALB_TOWN ! town equivalent direct albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PSCA_ALB_TOWN ! town equivalent diffuse albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PRESA_TOWN ! town aerodynamical resistance REAL , DIMENSION (:) , INTENT ( OUT ) :: PDQS_TOWN ! heat storage inside town REAL , DIMENSION (:) , INTENT ( OUT ) :: PQF_TOWN ! total anthropogenic heat REAL , DIMENSION (:) , INTENT ( OUT ) :: PQF_BLD ! anthropogenic heat flux of domestic heating REAL , DIMENSION (:) , INTENT ( OUT ) :: PFLX_BLD ! heat flx from inside bld through its structure REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_ROAD ! road conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GARDEN ! green area conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GREENROOF ! green roof conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_ROAD_WAT ! road conductance for latent heat REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GARDEN_WAT ! green area conductance for latent heat REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GREENROOF_WAT ! green roof conductance for latent heat ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_ROOF ! absorbed solar rad by roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_SNOW_ROOF ! absorbed solar rad by snow on roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_ROOF ! absorbed IR rad by roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_SNOW_ROOF ! absorbed IR rad by snow on roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_ROAD ! absorbed solar rad by road REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_SNOW_ROAD ! absorbed solar rad by snow on road REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_ROAD ! absorbed IR rad by road REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_SNOW_ROAD ! absorbed IR rad by snow on road REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_WALL_A ! absorbed solar rad by wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_WALL_A ! absorbed IR rad by wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_WALL_B ! absorbed solar rad by wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_WALL_B ! absorbed IR rad by wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_PANEL ! absorbed solar rad by solar panels REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_PANEL ! absorbed IR rad by solar panels REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_GARDEN ! absorbed solar rad by green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_GARDEN ! absorbed IR rad by green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_GREENROOF ! absorbed solar rad by green roofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_GREENROOF ! absorbed IR rad by green roofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PG_GREENROOF_ROOF ! heat flux between base of greenroof !                                                         !    and structural roof ! ! new arguments created after BEM ! CHARACTER ( LEN = 12 ) , INTENT ( IN ) :: HCOOL_COIL CHARACTER ( LEN = 6 ) , INTENT ( IN ) :: HHEAT_COIL REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WATER_COND ! fraction of evaporation for the condensers CHARACTER ( LEN = 4 ), DIMENSION (:), INTENT ( IN ) :: HNATVENT REAL , DIMENSION (:) , INTENT ( IN ) :: PNATVENT ! flag to describe surventilation system for i/o ! 0 for NONE, 1 for MANU and 2 for AUTO INTEGER , INTENT ( IN ) :: KDAY ! Simulation day REAL , DIMENSION (:) , INTENT ( INOUT ) :: PAUX_MAX ! Auxiliar variable for autosize calcs REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_FLOOR ! Floor layers temperatures [K] REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_MASS ! Internal mass layers temperatures [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_BLD_COOL ! Sensible cooling energy demand ! of the building [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PT_BLD_COOL ! Total cooling energy demand ! of the building [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_BLD_HEAT ! Heating energy demand ! of the building [W m-2(bld)] REAL , DIMENSION (: ), INTENT ( OUT ) :: PLE_BLD_COOL ! Latent cooling energy demand ! of the building [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_BLD_HEAT ! Latent heating energy demand ! of the building [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_WASTE ! Sensible waste heat from HVAC system ! [W m-2(tot)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_WASTE ! Latent waste heat from HVAC system ! [W m-2(tot)] REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WASTE_CAN ! fraction of waste heat released into the canyon REAL , DIMENSION (:) , INTENT ( OUT ) :: PHVAC_COOL ! Energy consumption of the cooling system ! [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PHVAC_HEAT ! Energy consumption of the heating system ! [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( IN ) :: PQIN ! Internal heat gains [W m-2(floor)] REAL , DIMENSION (:) , INTENT ( IN ) :: PQIN_FRAD ! Radiant fraction of internal heat gains REAL , DIMENSION (:) , INTENT ( IN ) :: PQIN_FLAT ! Latent franction of internal heat gains REAL , DIMENSION (:) , INTENT ( IN ) :: PGR ! Glazing ratio REAL , DIMENSION (:) , INTENT ( IN ) :: PEFF_HEAT ! Efficiency of the heating system REAL , DIMENSION (:) , INTENT ( IN ) :: PINF ! Infiltration flow rate [AC/H] REAL , DIMENSION (:) , INTENT ( IN ) :: PTCOOL_TARGET ! Cooling setpoint of HVAC system [K] REAL , DIMENSION (:) , INTENT ( IN ) :: PTHEAT_TARGET ! Heating setpoint of HVAC system [K] REAL , DIMENSION (:) , INTENT ( IN ) :: PHR_TARGET ! Relative humidity setpoint REAL , DIMENSION (:) , INTENT ( INOUT ) :: PT_WIN2 ! Indoor window temperature [K] REAL , DIMENSION (:) , INTENT ( INOUT ) :: PQI_BLD ! Indoor air specific humidity [kg kg-1] REAL , DIMENSION (:) , INTENT ( IN ) :: PV_VENT ! Ventilation flow rate [AC/H] REAL , DIMENSION (:) , INTENT ( IN ) :: PCAP_SYS_HEAT ! Capacity of the heating system ! [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( INOUT ) :: PCAP_SYS_RAT ! Rated capacity of the cooling system ! [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( IN ) :: PT_ADP ! Apparatus dewpoint temperature of the ! cooling coil [K] REAL , DIMENSION (:) , INTENT ( INOUT ) :: PM_SYS_RAT ! Rated HVAC mass flow rate ! [kg s-1 m-2(bld)] REAL , DIMENSION (:) , INTENT ( IN ) :: PCOP_RAT ! Rated COP of the cooling system REAL , DIMENSION (:) , INTENT ( OUT ) :: PCAP_SYS ! Actual capacity of the cooling system ! [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PM_SYS ! Actual HVAC mass flow rate ! [kg s-1 m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PCOP ! COP of the cooling system REAL , DIMENSION (:) , INTENT ( OUT ) :: PQ_SYS ! Supply air specific humidity [kg kg-1] REAL , DIMENSION (:) , INTENT ( OUT ) :: PT_SYS ! Supply air temperature [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PTR_SW_WIN ! Solar radiation transmitted throught ! windows [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PFAN_POWER ! HVAC fan power REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC_FLOOR ! heat capacity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC_FLOOR ! thermal conductivity for ! road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PD_FLOOR ! depth of road layers REAL , DIMENSION (:) , INTENT ( INOUT ) :: PT_WIN1 ! outdoor window temperature [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_WIN ! window absorbed shortwave radiation [W m-2] REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_WIN ! absorbed infrared rad. [W m-2] REAL , DIMENSION (:) , INTENT ( IN ) :: PSHGC ! window solar transmittance REAL , DIMENSION (:) , INTENT ( IN ) :: PSHGC_SH ! window + shading solar heat gain coef. REAL , DIMENSION (:) , INTENT ( IN ) :: PUGG_WIN ! window glass-to-glass U-factro [W m-2 K-1] REAL , DIMENSION (:) , INTENT ( OUT ) :: PALB_WIN ! window albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PABS_WIN ! window absortance REAL , DIMENSION (:) , INTENT ( IN ) :: PTRAN_WIN ! window transmittance ! ! new argument for the UTCI calculation REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIT_LW_GRND ! LW flux emitted by the ground (W/m2 ground) REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIT_LW_FAC ! LW flux emitted by the facade (W/m2 ground) REAL , DIMENSION (:) , INTENT ( OUT ) :: PT_RAD_IND ! Indoor mean radiant temperature [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PREF_SW_GRND ! total solar rad reflected from ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PREF_SW_FAC ! total solar rad reflected from facade REAL , DIMENSION (:) , INTENT ( OUT ) :: PHU_BLD ! Indoor relative humidity 0 < (-) < 1 ! ! new arguments for shading, schedule or natural ventilation REAL , INTENT ( IN ) :: PTIME ! current time since midnight (UTC, s) LOGICAL , DIMENSION (:), INTENT ( IN ) :: OSHADE REAL , DIMENSION (:) , INTENT ( IN ) :: PSHADE ! flag to activate shading devices -> REAL for i/o 0. or 1 LOGICAL , DIMENSION (:), INTENT ( INOUT ) :: OSHAD_DAY ! has shading been necessary this day ? LOGICAL , DIMENSION (:), INTENT ( INOUT ) :: ONATVENT_NIGHT ! has natural ventilation been necessary/possible this night ? CHARACTER ( LEN = 3 ) , INTENT ( IN ) :: HBEM ! Building Energy model 'DEF' or 'BEM' ! REAL , DIMENSION (:) , INTENT ( IN ) :: PN_FLOOR ! Number of floors REAL , DIMENSION (:) , INTENT ( IN ) :: PWALL_O_BLD ! Wall area [m2_wall/m2_bld] REAL , DIMENSION (:) , INTENT ( IN ) :: PGLAZ_O_BLD ! Window area [m2_win/m2_bld] REAL , DIMENSION (:) , INTENT ( IN ) :: PMASS_O_BLD ! Mass area [m2_mass/m2_bld] REAL , DIMENSION (:) , INTENT ( IN ) :: PFLOOR_HW_RATIO ! H/W ratio of 1 floor level REAL , DIMENSION (:) , INTENT ( IN ) :: PF_FLOOR_MASS ! View factor floor-mass REAL , DIMENSION (:) , INTENT ( IN ) :: PF_FLOOR_WALL ! View factor floor-wall REAL , DIMENSION (:) , INTENT ( IN ) :: PF_FLOOR_WIN ! View factor floor-window REAL , DIMENSION (:) , INTENT ( IN ) :: PF_FLOOR_ROOF ! View factor floor-roof REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WALL_FLOOR ! View factor wall-floor REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WALL_MASS ! View factor wall-mass REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WALL_WIN ! View factor wall-win REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WIN_FLOOR ! View factor win-floor REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WIN_MASS ! View factor win-mass REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WIN_WALL ! View factor win-wall REAL , DIMENSION (:) , INTENT ( IN ) :: PF_MASS_FLOOR ! View factor mass-floor REAL , DIMENSION (:) , INTENT ( IN ) :: PF_MASS_WALL ! View factor mass-wall REAL , DIMENSION (:) , INTENT ( IN ) :: PF_MASS_WIN ! View factor mass-window LOGICAL , INTENT ( IN ) :: OCANOPY ! is canopy active ? CHARACTER ( LEN = 5 ) , INTENT ( IN ) :: HCH_BEM ! TEB option for building outside conv. coef REAL , DIMENSION (:) , INTENT ( IN ) :: PROUGH_ROOF ! roof roughness coef. REAL , DIMENSION (:) , INTENT ( IN ) :: PROUGH_WALL ! wall roughness coef. REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WIN_WIN ! indoor win to win view factor ! !* arguments for road watering ! LOGICAL , INTENT ( IN ) :: OPAR_RD_IRRIG ! True if there is potentially irrigation REAL , DIMENSION (:), INTENT ( IN ) :: PRD_START_MONTH ! First month of irrigation REAL , DIMENSION (:), INTENT ( IN ) :: PRD_END_MONTH ! Last month of irrigation REAL , DIMENSION (:), INTENT ( IN ) :: PRD_START_HOUR ! First hour of irrigation (included) REAL , DIMENSION (:), INTENT ( IN ) :: PRD_END_HOUR ! Last hour of irrigation  (excluded) REAL , DIMENSION (:), INTENT ( IN ) :: PRD_24H_IRRIG ! diurnal averaged irrigation flux (kg/m2/s) REAL , DIMENSION (:), INTENT ( OUT ) :: PIRRIG_ROAD ! man-made watering of roads (kg/m2/s) ! !* arguments for solar panels ! REAL , DIMENSION (:), INTENT ( IN ) :: PEMIS_PANEL ! Emissivity of solar panels (-) REAL , DIMENSION (:), INTENT ( IN ) :: PALB_PANEL ! Albedo     of solar panels (-) REAL , DIMENSION (:), INTENT ( IN ) :: PEFF_PANEL ! Efficiency of solar panel (-) REAL , DIMENSION (:), INTENT ( IN ) :: PFRAC_PANEL ! Fraction of solar panel on roofs (-) REAL , DIMENSION (:), INTENT ( OUT ) :: PTHER_PROD_PANEL ! Thermal      Energy production of solar panel on roofs (W/m2 panel) REAL , DIMENSION (:), INTENT ( OUT ) :: PPHOT_PROD_PANEL ! Photovoltaic Energy production of solar panel on roofs (W/m2 panel) REAL , DIMENSION (:), INTENT ( OUT ) :: PPROD_PANEL ! Averaged     Energy production of solar panel on roofs (W/m2 panel) REAL , DIMENSION (:), INTENT ( OUT ) :: PTHER_PROD_BLD ! Thermal      Energy production of solar panel on roofs (W/m2 bld  ) REAL , DIMENSION (:), INTENT ( OUT ) :: PPHOT_PROD_BLD ! Photovoltaic Energy production of solar panel on roofs (W/m2 bld  ) REAL , DIMENSION (:), INTENT ( OUT ) :: PPROD_BLD ! Averaged     Energy production of solar panel on roofs (W/m2 bld  ) REAL , DIMENSION (:), INTENT ( INOUT ) :: PTHER_PRODC_DAY ! Present day integrated thermal production of energy    (J/m2 panel) REAL , DIMENSION (:), INTENT ( OUT ) :: PH_PANEL ! Sensible heat flux from solar panels      (W/m2 panel) REAL , DIMENSION (:), INTENT ( OUT ) :: PRN_PANEL ! Net radiation        of solar panel       (W/m2 panel) ! !* arguments for building's use description ! REAL , DIMENSION (:), INTENT ( IN ) :: PRESIDENTIAL ! Fraction of residential use (-) REAL , INTENT ( IN ) :: PDT_RES ! target temperature change when unoccupied (K) (residential buildings) REAL , INTENT ( IN ) :: PDT_OFF ! target temperature change when unoccupied (K) (office buildings) REAL , DIMENSION (:), INTENT ( OUT ) :: PCUR_TCOOL_TARGET ! Cooling target temperature at current time (K) REAL , DIMENSION (:), INTENT ( OUT ) :: PCUR_THEAT_TARGET ! Heating target temperature at current time (K) REAL , DIMENSION (:), INTENT ( OUT ) :: PCUR_QIN ! Internal heat gains        at current time (W/m2 floor) ! !------------------------------------------------------------------------------- ! ! END SUBROUTINE TEB_GARDEN_STRUCT ! END INTERFACE ! END MODULE MODI_TEB_GARDEN_STRUCT","tags":"","loc":"sourcefile/modi_teb_garden_struct.f90.html"},{"title":"modi_dealloc_teb_struct.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_DEALLOC_TEB_STRUCT Source Code modi_dealloc_teb_struct.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL licence !SFX_LIC version 2.1. See Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. MODULE MODI_DEALLOC_TEB_STRUCT ! INTERFACE ! !   ########################################################################## SUBROUTINE DEALLOC_TEB_STRUCT ( TOP , T , BOP , B , TPN , TIR , DMT , GDM , GRM ) !   ########################################################################## ! ! !*      0.1    Declarations of arguments ! ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t USE MODD_SURFEX_n , ONLY : TEB_GARDEN_MODEL_t USE MODD_SURFEX_n , ONLY : TEB_GREENROOF_MODEL_t ! IMPLICIT NONE ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_OPTIONS_t ), INTENT ( INOUT ) :: BOP TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_PANEL_t ), INTENT ( INOUT ) :: TPN TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT TYPE ( TEB_GARDEN_MODEL_t ), INTENT ( INOUT ) :: GDM TYPE ( TEB_GREENROOF_MODEL_t ), INTENT ( INOUT ) :: GRM ! END SUBROUTINE DEALLOC_TEB_STRUCT ! END INTERFACE ! END MODULE MODI_DEALLOC_TEB_STRUCT","tags":"","loc":"sourcefile/modi_dealloc_teb_struct.f90.html"},{"title":"bem_morpho_struct.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines BEM_MORPHO_STRUCT Source Code bem_morpho_struct.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL licence !SFX_LIC version 2.1. See Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. !##################################################################### SUBROUTINE BEM_MORPHO_STRUCT ( PBLD , PWALL_O_HOR , PBLD_HEIGHT , PFLOOR_HEIGHT , & PGR , PN_FLOOR , PWALL_O_BLD , PGLAZ_O_BLD , PMASS_O_BLD , & PFLOOR_HW_RATIO , & PF_FLOOR_MASS , PF_FLOOR_WALL , PF_FLOOR_WIN , & PF_FLOOR_ROOF , PF_WALL_FLOOR , PF_WALL_MASS , & PF_WALL_WIN , PF_WIN_FLOOR , PF_WIN_MASS , PF_WIN_WALL , & PF_MASS_FLOOR , PF_MASS_WALL , PF_MASS_WIN , PF_WASTE_CAN , & PF_WIN_WIN ) !##################################################################### ! !!**** *BEM_MORPHO !! !!    PURPOSE !!    ------- !! compute morphometric parameter of the building for BEM !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      G. Pigeon   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    10/2011 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODI_BEM_MORPHO ! USE MODD_BEM_n , ONLY : BEM_t USE MODD_TEB_n , ONLY : TEB_t ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! REAL , DIMENSION (:), INTENT ( IN ) :: PBLD ! Urban horizontal building density REAL , DIMENSION (:), INTENT ( IN ) :: PWALL_O_HOR ! Wall to horizontal surface ratio REAL , DIMENSION (:), INTENT ( IN ) :: PBLD_HEIGHT ! Average building height [m] REAL , DIMENSION (:), INTENT ( INOUT ) :: PFLOOR_HEIGHT ! Building floor height [m] REAL , DIMENSION (:), INTENT ( IN ) :: PGR ! Glazing ratio REAL , DIMENSION (:), INTENT ( OUT ) :: PN_FLOOR ! number of floor levels REAL , DIMENSION (:), INTENT ( OUT ) :: PWALL_O_BLD ! wall surface per ground building surface [m2(wall)/m2(bld)] REAL , DIMENSION (:), INTENT ( OUT ) :: PGLAZ_O_BLD ! glazing surface per ground building surface [m2(glazing)/m2(bld)] REAL , DIMENSION (:), INTENT ( OUT ) :: PMASS_O_BLD ! thermal mass surface per ground building surface [m2(mass)/m2(bld)] REAL , DIMENSION (:), INTENT ( OUT ) :: PFLOOR_HW_RATIO !Height to width ratio of the floor levels REAL , DIMENSION (:), INTENT ( OUT ) :: PF_FLOOR_MASS !view factor from floor to mass (how much floor seen by mass) REAL , DIMENSION (:), INTENT ( OUT ) :: PF_FLOOR_WALL REAL , DIMENSION (:), INTENT ( OUT ) :: PF_FLOOR_WIN REAL , DIMENSION (:), INTENT ( OUT ) :: PF_FLOOR_ROOF REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WALL_FLOOR REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WALL_MASS REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WALL_WIN REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WIN_FLOOR REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WIN_MASS REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WIN_WALL REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WIN_WIN REAL , DIMENSION (:), INTENT ( OUT ) :: PF_MASS_FLOOR REAL , DIMENSION (:), INTENT ( OUT ) :: PF_MASS_WALL REAL , DIMENSION (:), INTENT ( OUT ) :: PF_MASS_WIN REAL , DIMENSION (:), INTENT ( INOUT ) :: PF_WASTE_CAN !fraction of waste heat released into the canyon ! !*      0.2    Declarations of local variables ! TYPE ( BEM_t ) :: B TYPE ( TEB_t ) :: T ! !------------------------------------------------------------------------------ ALLOCATE ( B % XFLOOR_HEIGHT ( 1 )) ALLOCATE ( B % XGR ( 1 )) ALLOCATE ( B % XF_WASTE_CAN ( 1 )) ALLOCATE ( B % XN_FLOOR ( 1 )) ALLOCATE ( T % XWALL_O_BLD ( 1 )) ALLOCATE ( B % XGLAZ_O_BLD ( 1 )) ALLOCATE ( B % XMASS_O_BLD ( 1 )) ALLOCATE ( B % XFLOOR_HW_RATIO ( 1 )) ALLOCATE ( B % XF_FLOOR_MASS ( 1 )) ALLOCATE ( B % XF_FLOOR_WALL ( 1 )) ALLOCATE ( B % XF_FLOOR_WIN ( 1 )) ALLOCATE ( B % XF_FLOOR_ROOF ( 1 )) ALLOCATE ( B % XF_WALL_FLOOR ( 1 )) ALLOCATE ( B % XF_WALL_MASS ( 1 )) ALLOCATE ( B % XF_WALL_WIN ( 1 )) ALLOCATE ( B % XF_WIN_FLOOR ( 1 )) ALLOCATE ( B % XF_WIN_MASS ( 1 )) ALLOCATE ( B % XF_WIN_WALL ( 1 )) ALLOCATE ( B % XF_WIN_WIN ( 1 )) ALLOCATE ( B % XF_MASS_FLOOR ( 1 )) ALLOCATE ( B % XF_MASS_WALL ( 1 )) ALLOCATE ( B % XF_MASS_WIN ( 1 )) !------------------------------------------------------------------------------ ! ! put input variables in structures ! B % XFLOOR_HEIGHT = PFLOOR_HEIGHT ! Building Floor height B % XGR = PGR ! Glazing ratio B % XF_WASTE_CAN = PF_WASTE_CAN !fraction of waste heat released into the canyon ! !------------------------------------------------------------------------------ ! CALL BEM_MORPHO ( PBLD , PWALL_O_HOR , PBLD_HEIGHT , PWALL_O_BLD , B ) ! !------------------------------------------------------------------------------ ! ! put computed variables in structures ! PN_FLOOR = B % XN_FLOOR ! number of floor levels PGLAZ_O_BLD = B % XGLAZ_O_BLD ! glazing surface per ground building surface [m2(glazing)/m2(bld)] PMASS_O_BLD = B % XMASS_O_BLD ! thermal mass surface per ground building surface [m2(mass)/m2(bld)] PFLOOR_HW_RATIO = B % XFLOOR_HW_RATIO !Height to width ratio of the floor levels PF_FLOOR_MASS = B % XF_FLOOR_MASS !view factor from floor to mass (how much floor seen by mass) PF_FLOOR_WALL = B % XF_FLOOR_WALL PF_FLOOR_WIN = B % XF_FLOOR_WIN PF_FLOOR_ROOF = B % XF_FLOOR_ROOF PF_WALL_FLOOR = B % XF_WALL_FLOOR PF_WALL_MASS = B % XF_WALL_MASS PF_WALL_WIN = B % XF_WALL_WIN PF_WIN_FLOOR = B % XF_WIN_FLOOR PF_WIN_MASS = B % XF_WIN_MASS PF_WIN_WALL = B % XF_WIN_WALL PF_WIN_WIN = B % XF_WIN_WIN PF_MASS_FLOOR = B % XF_MASS_FLOOR PF_MASS_WALL = B % XF_MASS_WALL PF_MASS_WIN = B % XF_MASS_WIN PF_WASTE_CAN = B % XF_WASTE_CAN !fraction of waste heat released into the canyon ! !------------------------------------------------------------------------------ DEALLOCATE ( B % XFLOOR_HEIGHT ) DEALLOCATE ( B % XGR ) DEALLOCATE ( B % XF_WASTE_CAN ) DEALLOCATE ( B % XN_FLOOR ) DEALLOCATE ( T % XWALL_O_BLD ) DEALLOCATE ( B % XGLAZ_O_BLD ) DEALLOCATE ( B % XMASS_O_BLD ) DEALLOCATE ( B % XFLOOR_HW_RATIO ) DEALLOCATE ( B % XF_FLOOR_MASS ) DEALLOCATE ( B % XF_FLOOR_WALL ) DEALLOCATE ( B % XF_FLOOR_WIN ) DEALLOCATE ( B % XF_FLOOR_ROOF ) DEALLOCATE ( B % XF_WALL_FLOOR ) DEALLOCATE ( B % XF_WALL_MASS ) DEALLOCATE ( B % XF_WALL_WIN ) DEALLOCATE ( B % XF_WIN_FLOOR ) DEALLOCATE ( B % XF_WIN_MASS ) DEALLOCATE ( B % XF_WIN_WALL ) DEALLOCATE ( B % XF_WIN_WIN ) DEALLOCATE ( B % XF_MASS_FLOOR ) DEALLOCATE ( B % XF_MASS_WALL ) DEALLOCATE ( B % XF_MASS_WIN ) !------------------------------------------------------------------------------ ! END SUBROUTINE BEM_MORPHO_STRUCT !-------------------------------------------------------------------------------","tags":"","loc":"sourcefile/bem_morpho_struct.f90.html"},{"title":"dealloc_teb_struct.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines DEALLOC_TEB_STRUCT Source Code dealloc_teb_struct.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL licence !SFX_LIC version 2.1. See Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. !   ########################################################################## SUBROUTINE DEALLOC_TEB_STRUCT ( TOP , T , BOP , B , TPN , TIR , DMT , GDM , GRM ) !   ########################################################################## ! !!****  *DEALLOC_TEB_STRUCT* !! !!    PURPOSE !!    ------- ! !       To allocate all the structures used in Teb_garden and subsequent routines. ! !!**  METHOD !     ------ ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!    Original    03/2018 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t , TEB_OPTIONS_INIT USE MODD_TEB_n , ONLY : TEB_t , TEB_INIT USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t , BEM_OPTIONS_INIT USE MODD_BEM_n , ONLY : BEM_t , BEM_INIT USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t , TEB_PANEL_INIT USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t , TEB_IRRIG_INIT USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t , DIAG_MISC_TEB_INIT USE MODD_SURFEX_n , ONLY : TEB_GARDEN_MODEL_t USE MODD_SURFEX_n , ONLY : TEB_GREENROOF_MODEL_t ! ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! ! ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_OPTIONS_t ), INTENT ( INOUT ) :: BOP TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_PANEL_t ), INTENT ( INOUT ) :: TPN TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT TYPE ( TEB_GARDEN_MODEL_t ), INTENT ( INOUT ) :: GDM TYPE ( TEB_GREENROOF_MODEL_t ), INTENT ( INOUT ) :: GRM ! ! !*      0.2    Declarations of local variables ! ! !------------------------------------------------------------------------------- ! ! BEM structure ! ! ! Floor parameters ! DEALLOCATE ( B % XHC_FLOOR ) ! floor layers heat capacity        (J/K/m3) DEALLOCATE ( B % XTC_FLOOR ) ! floor layers thermal conductivity (W/K/m) DEALLOCATE ( B % XD_FLOOR ) ! depth of floor layers             (m) ! ! HVAC parameters ! DEALLOCATE ( B % XTCOOL_TARGET ) ! cooling setpoint of indoor air DEALLOCATE ( B % XTHEAT_TARGET ) ! heating setpoint of indoor air DEALLOCATE ( B % XF_WASTE_CAN ) ! fraction of waste heat released into the canyon DEALLOCATE ( B % XEFF_HEAT ) ! efficiency of the heating system ! ! Indoor parameters ! DEALLOCATE ( B % XTI_BLD ) ! building interior temperature    (K) DEALLOCATE ( B % XT_FLOOR ) ! floor layer temperatures         (K) DEALLOCATE ( B % XT_MASS ) ! Air cooled building internal th. mass temperature (K) ! DEALLOCATE ( B % XQIN ) ! internal heat gains [W m-2(floor)] DEALLOCATE ( B % XQIN_FRAD ) ! radiant fraction of internal heat gains DEALLOCATE ( B % XSHGC ) ! solar heat gain coef. of windows DEALLOCATE ( B % XSHGC_SH ) ! solar heat gain coef. of windows + shading DEALLOCATE ( B % XU_WIN ) ! window U-factor [K m W-2] DEALLOCATE ( B % XTRAN_WIN ) ! window transmittance (-) DEALLOCATE ( B % XGR ) ! glazing ratio DEALLOCATE ( B % XFLOOR_HEIGHT ) ! building floor height [m] DEALLOCATE ( B % XINF ) ! infiltration/ventilation flow rate [AC/H] ! ! New parameters ! DEALLOCATE ( B % XF_WATER_COND ) ! fraction of evaporation for condensers (cooling system) DEALLOCATE ( B % XAUX_MAX ) ! Auxiliar variable for autosize calcs DEALLOCATE ( B % XQIN_FLAT ) ! Latent franction of internal heat gains DEALLOCATE ( B % XHR_TARGET ) ! Relative humidity setpoint DEALLOCATE ( B % XT_WIN2 ) ! Indoor window temperature [K] DEALLOCATE ( B % XQI_BLD ) ! Indoor air specific humidity [kg kg-1] DEALLOCATE ( B % XV_VENT ) ! Ventilation flow rate [AC/H] DEALLOCATE ( B % XCAP_SYS_HEAT ) ! Capacity of the heating system ! [W m-2(bld)] DEALLOCATE ( B % XCAP_SYS_RAT ) ! Rated capacity of the cooling system ! [W m-2(bld)] DEALLOCATE ( B % XT_ADP ) ! Apparatus dewpoint temperature of the ! cooling coil [K] DEALLOCATE ( B % XM_SYS_RAT ) ! Rated HVAC mass flow rate ! [kg s-1 m-2(bld)] DEALLOCATE ( B % XCOP_RAT ) ! Rated COP of the cooling system DEALLOCATE ( B % XT_WIN1 ) ! outdoor window temperature [K] DEALLOCATE ( B % XALB_WIN ) ! window albedo DEALLOCATE ( B % XABS_WIN ) ! window absortance DEALLOCATE ( B % XT_SIZE_MAX ) ! Maximum outdoor air temperature for ! HVAC sizing [K] DEALLOCATE ( B % XT_SIZE_MIN ) ! Minimum outdoor air temperature for ! HVAC sizing [K] DEALLOCATE ( B % XUGG_WIN ) ! Window glass-to-glass U-factor [K m W-2] DEALLOCATE ( B % LSHADE ) ! flag to activate shading devices -> LOGICAL in the code DEALLOCATE ( B % XSHADE ) ! flag to activate shading devices -> REAL for i/o 0. or 1. DEALLOCATE ( B % CNATVENT ) ! flag to activate natural ventilation 'NONE', 'MANU', 'AUTO' DEALLOCATE ( B % XNATVENT ) ! flag to describe surventilation system for i/o ! 0 for NONE, 1 for MANU and 2 for AUTO DEALLOCATE ( B % LSHAD_DAY ) !Has shading been necessary this day ? DEALLOCATE ( B % LNATVENT_NIGHT ) !Has nocturnal surventilation been necessary and possible this night ? ! !indoor relative surfaces and view factors DEALLOCATE ( B % XN_FLOOR ) ! Number of floors DEALLOCATE ( B % XGLAZ_O_BLD ) ! Window area [m2_win/m2_bld] DEALLOCATE ( B % XMASS_O_BLD ) ! Mass area [m2_mass/m2_bld] DEALLOCATE ( B % XFLOOR_HW_RATIO ) ! H/W ratio of 1 floor level DEALLOCATE ( B % XF_FLOOR_MASS ) ! View factor floor-mass DEALLOCATE ( B % XF_FLOOR_WALL ) ! View factor floor-wall DEALLOCATE ( B % XF_FLOOR_WIN ) ! View factor floor-window DEALLOCATE ( B % XF_FLOOR_ROOF ) ! View factor floor-roof DEALLOCATE ( B % XF_WALL_FLOOR ) ! View factor wall-floor DEALLOCATE ( B % XF_WALL_MASS ) ! View factor wall-mass DEALLOCATE ( B % XF_WALL_WIN ) ! View factor wall-win DEALLOCATE ( B % XF_WIN_FLOOR ) ! View factor win-floor DEALLOCATE ( B % XF_WIN_MASS ) ! View factor win-mass DEALLOCATE ( B % XF_WIN_WALL ) ! View factor win-wall DEALLOCATE ( B % XF_WIN_WIN ) ! indoor View factor win-win DEALLOCATE ( B % XF_MASS_FLOOR ) ! View factor mass-floor DEALLOCATE ( B % XF_MASS_WALL ) ! View factor mass-wall DEALLOCATE ( B % XF_MASS_WIN ) ! View factor mass-window ! !------------------------------------------------------------------------------- ! ! TEB structure ! ! Geometric Parameters: ! DEALLOCATE ( T % XROAD_DIR ) ! Road direction (deg from North, clockwise) DEALLOCATE ( T % XGARDEN ) ! fraction of veg in the streets   (-) DEALLOCATE ( T % XGREENROOF ) ! fraction of greenroofs on roofs  (-) DEALLOCATE ( T % XBLD ) ! fraction of buildings            (-) DEALLOCATE ( T % XROAD ) ! fraction of roads                (-) DEALLOCATE ( T % XCAN_HW_RATIO ) ! canyon    h/W                    (-) DEALLOCATE ( T % XBLD_HEIGHT ) ! buildings height 'h'             (m) DEALLOCATE ( T % XWALL_O_HOR ) ! wall surf. / hor. surf.          (-) DEALLOCATE ( T % XROAD_O_GRND ) ! road surf. / (road + garden surf.) (-) DEALLOCATE ( T % XGARDEN_O_GRND ) ! gard. surf. / (road + garden surf.)(-) DEALLOCATE ( T % XWALL_O_GRND ) ! wall surf. / (road + garden surf.) (-) DEALLOCATE ( T % XWALL_O_BLD ) ! wall surf. / bld surf. (-) DEALLOCATE ( T % XZ0_TOWN ) ! roughness length for momentum    (m) DEALLOCATE ( T % XSVF_ROAD ) ! road sky view factor             (-) DEALLOCATE ( T % XSVF_GARDEN ) ! green area sky view factor       (-) DEALLOCATE ( T % XSVF_WALL ) ! wall sky view factor             (-) ! ! Roof parameters ! DEALLOCATE ( T % XALB_ROOF ) ! roof albedo                      (-) DEALLOCATE ( T % XEMIS_ROOF ) ! roof emissivity                  (-) DEALLOCATE ( T % XHC_ROOF ) ! roof layers heat capacity        (J/K/m3) DEALLOCATE ( T % XTC_ROOF ) ! roof layers thermal conductivity (W/K/m) DEALLOCATE ( T % XD_ROOF ) ! depth of roof layers             (m) DEALLOCATE ( T % XROUGH_ROOF ) ! roof roughness coef ! ! ! Road parameters ! DEALLOCATE ( T % XALB_ROAD ) ! road albedo                      (-) DEALLOCATE ( T % XEMIS_ROAD ) ! road emissivity                  (-) DEALLOCATE ( T % XHC_ROAD ) ! road layers heat capacity        (J/K/m3) DEALLOCATE ( T % XTC_ROAD ) ! road layers thermal conductivity (W/K/m) DEALLOCATE ( T % XD_ROAD ) ! depth of road layers             (m) ! ! Wall parameters ! DEALLOCATE ( T % XALB_WALL ) ! wall albedo                      (-) DEALLOCATE ( T % XEMIS_WALL ) ! wall emissivity                  (-) DEALLOCATE ( T % XHC_WALL ) ! wall layers heat capacity        (J/K/m3) DEALLOCATE ( T % XTC_WALL ) ! wall layers thermal conductivity (W/K/m) DEALLOCATE ( T % XD_WALL ) ! depth of wall layers             (m) DEALLOCATE ( T % XROUGH_WALL ) ! wall roughness coef ! ! Building's use type ! DEALLOCATE ( T % XRESIDENTIAL ) ! fraction of Residential use      (-) ! ! anthropogenic fluxes ! DEALLOCATE ( T % XH_TRAFFIC ) ! anthropogenic sensible !                                                  ! heat fluxes due to traffic       (W/m2) DEALLOCATE ( T % XLE_TRAFFIC ) ! anthropogenic latent !                                                  ! heat fluxes due to traffic       (W/m2) DEALLOCATE ( T % XH_INDUSTRY ) ! anthropogenic sensible !                                                  ! heat fluxes due to factories     (W/m2) DEALLOCATE ( T % XLE_INDUSTRY ) ! anthropogenic latent !                                                  ! heat fluxes due to factories     (W/m2) ! ! temperatures for boundary conditions ! DEALLOCATE ( T % XTI_ROAD ) ! road interior temperature        (K) ! ! Prognostic variables: ! DEALLOCATE ( T % XWS_ROOF ) ! roof water reservoir             (kg/m2) DEALLOCATE ( T % XWS_ROAD ) ! road water reservoir             (kg/m2) DEALLOCATE ( T % XT_ROOF ) ! roof layer temperatures          (K) DEALLOCATE ( T % XT_ROAD ) ! road layer temperatures          (K) DEALLOCATE ( T % XT_WALL_A ) ! wall layer temperatures          (K) DEALLOCATE ( T % XT_WALL_B ) ! wall layer temperatures          (K) ! DEALLOCATE ( T % XAC_ROOF ) ! roof aerodynamic conductance     () DEALLOCATE ( T % XAC_ROAD ) ! road aerodynamic conductance     () DEALLOCATE ( T % XAC_WALL ) ! wall aerodynamic conductance     () DEALLOCATE ( T % XAC_TOP ) ! top  aerodynamic conductance     () DEALLOCATE ( T % XAC_ROOF_WAT ) ! water aerodynamic conductance    () DEALLOCATE ( T % XAC_ROAD_WAT ) ! water aerodynamic conductance    () ! DEALLOCATE ( T % XQSAT_ROOF ) ! humidity of saturation for roofs (kg/kg) DEALLOCATE ( T % XQSAT_ROAD ) ! humidity of saturation for roads (kg/kg) ! DEALLOCATE ( T % XDELT_ROOF ) ! humidity of saturation for roofs (-) DEALLOCATE ( T % XDELT_ROAD ) ! humidity of saturation for roads (-) ! ! Semi-prognostic variables: ! DEALLOCATE ( T % XT_CANYON ) ! canyon air temperature           (K) DEALLOCATE ( T % XQ_CANYON ) ! canyon air specific humidity     (kg/kg) ! ! ! Prognostic snow: ! DEALLOCATE ( T % TSNOW_ROOF % WSNOW ) ! snow (& liq. water) content      (kg/m2) DEALLOCATE ( T % TSNOW_ROOF % T ) ! temperature                      (K) DEALLOCATE ( T % TSNOW_ROOF % RHO ) ! density                          (kg m-3) DEALLOCATE ( T % TSNOW_ROOF % ALB ) ! albedo                           (-) DEALLOCATE ( T % TSNOW_ROOF % EMIS ) ! emissivity                       (-) DEALLOCATE ( T % TSNOW_ROOF % TS ) ! Surface temperature              (K) DEALLOCATE ( T % TSNOW_ROAD % WSNOW ) ! snow (& liq. water) content      (kg/m2) DEALLOCATE ( T % TSNOW_ROAD % T ) ! temperature                      (K) DEALLOCATE ( T % TSNOW_ROAD % RHO ) ! density                          (kg m-3) DEALLOCATE ( T % TSNOW_ROAD % ALB ) ! albedo                           (-) DEALLOCATE ( T % TSNOW_ROAD % EMIS ) ! emissivity                       (-) DEALLOCATE ( T % TSNOW_ROAD % TS ) ! Surface temperature              (K) !------------------------------------------------------------------------------- ! ! solar panels ! DEALLOCATE ( TPN % XEMIS_PANEL ) ! emissivity of solar panels               (-) DEALLOCATE ( TPN % XALB_PANEL ) ! albedo of soolar panels                  (-) DEALLOCATE ( TPN % XEFF_PANEL ) ! Efficiency coefficient of solar panels   (-) DEALLOCATE ( TPN % XFRAC_PANEL ) ! Fraction of SOLAR panels on roofs        (-) DEALLOCATE ( TPN % XTHER_PRODC_DAY ) ! Present day integrated thermal production of energy    (J/m2 panel) !------------------------------------------------------------------------------- ! ! Irrigation ! DEALLOCATE ( TIR % XRD_START_MONTH ) ! roads : start month for irrigation (included) DEALLOCATE ( TIR % XRD_END_MONTH ) ! roads : end   month for irrigation (included) DEALLOCATE ( TIR % XRD_START_HOUR ) ! roads : start solar hour for irrigation (included, hour) DEALLOCATE ( TIR % XRD_END_HOUR ) ! roads : end   solar hour for irrigation (excluded, hour) DEALLOCATE ( TIR % XRD_24H_IRRIG ) ! roads : total irrigation over 24 hours (kg/m2) ! !------------------------------------------------------------------------------- ! ! TEB diagnostics structure ! DEALLOCATE ( DMT % XZ0_TOWN ) ! town roughness length DEALLOCATE ( DMT % XQF_BLD ) ! domestic heating DEALLOCATE ( DMT % XFLX_BLD ) ! heat flux from bld DEALLOCATE ( DMT % XQF_TOWN ) ! total anthropogenic heat DEALLOCATE ( DMT % XDQS_TOWN ) ! storage inside building ! DEALLOCATE ( DMT % XH_WALL_A ) ! wall sensible heat flux          (W/m2) DEALLOCATE ( DMT % XH_WALL_B ) ! wall sensible heat flux          (W/m2) DEALLOCATE ( DMT % XH_ROOF ) ! roof sensible heat flux          (W/m2) DEALLOCATE ( DMT % XH_ROAD ) ! road sensible heat flux          (W/m2) DEALLOCATE ( DMT % XH_STRLROOF ) ! structural roof sens. heat flux  (W/m2) DEALLOCATE ( DMT % XH_BLT ) ! built surf sensible heat flux    (W/m2) DEALLOCATE ( DMT % XRN_WALL_A ) ! net radiation at wall            (W/m2) DEALLOCATE ( DMT % XRN_WALL_B ) ! net radiation at wall            (W/m2) DEALLOCATE ( DMT % XRN_ROOF ) ! net radiation at roof            (W/m2) DEALLOCATE ( DMT % XRN_ROAD ) ! net radiation at road            (W/m2) DEALLOCATE ( DMT % XRN_STRLROOF ) !net radiation at structural roofs(W/m2) DEALLOCATE ( DMT % XRN_BLT ) ! net radiation at built surf      (W/m2) DEALLOCATE ( DMT % XGFLUX_WALL_A ) !net wall conduction flux        (W/m2) DEALLOCATE ( DMT % XGFLUX_WALL_B ) !net wall conduction flux        (W/m2) DEALLOCATE ( DMT % XGFLUX_ROOF ) ! net roof conduction flux         (W/m2) DEALLOCATE ( DMT % XGFLUX_ROAD ) ! net road conduction flux         (W/m2) DEALLOCATE ( DMT % XGFLUX_STRLROOF ) !net structural roof cond flux (W/m2) DEALLOCATE ( DMT % XGFLUX_BLT ) ! net built surf conduction flux   (W/m2) DEALLOCATE ( DMT % XLE_ROOF ) ! roof latent heat flux            (W/m2) DEALLOCATE ( DMT % XLE_ROAD ) ! road latent heat flux            (W/m2) DEALLOCATE ( DMT % XLE_STRLROOF ) !structural roof latent heat flux (W/m2) DEALLOCATE ( DMT % XLE_BLT ) ! built surf latent heat flux      (W/m2) ! DEALLOCATE ( DMT % XRUNOFF_TOWN ) ! aggregated water runoff for town      (kg/m2/s) DEALLOCATE ( DMT % XIRRIG_GARDEN ) ! summer ground irrigation rate         (kg/m2/s) DEALLOCATE ( DMT % XRUNOFF_ROAD ) ! water runoff for roads                (kg/m2/s) DEALLOCATE ( DMT % XIRRIG_ROAD ) ! road man-made watering rate           (kg/m2/s) DEALLOCATE ( DMT % XRUNOFF_ROOF ) ! aggregated water runoff for roofs     (kg/m2/s) DEALLOCATE ( DMT % XRUNOFF_STRLROOF ) ! water runoff for structural roofs     (kg/m2/s) DEALLOCATE ( DMT % XIRRIG_GREENROOF ) ! summer ground irrigation rate         (kg/m2/s) ! DEALLOCATE ( DMT % XABS_SW_ROOF ) ! absorbed shortwave radiation over roofs DEALLOCATE ( DMT % XABS_SW_SNOW_ROOF ) ! absorbed longwave radiation over roofs DEALLOCATE ( DMT % XABS_LW_ROOF ) ! absorbed shortwave radiation over roofs DEALLOCATE ( DMT % XABS_LW_SNOW_ROOF ) ! absorbed longwave radiation over roofs DEALLOCATE ( DMT % XABS_SW_ROAD ) ! absorbed shortwave radiation over roads DEALLOCATE ( DMT % XABS_SW_SNOW_ROAD ) ! absorbed longwave radiation over roads DEALLOCATE ( DMT % XABS_LW_ROAD ) ! absorbed shortwave radiation over roads DEALLOCATE ( DMT % XABS_LW_SNOW_ROAD ) ! absorbed longwave radiation over roads DEALLOCATE ( DMT % XABS_SW_WALL_A ) ! absorbed shortwave radiation over walls DEALLOCATE ( DMT % XABS_SW_WALL_B ) ! absorbed shortwave radiation over walls DEALLOCATE ( DMT % XABS_LW_WALL_A ) ! absorbed shortwave radiation over walls DEALLOCATE ( DMT % XABS_LW_WALL_B ) ! absorbed shortwave radiation over walls DEALLOCATE ( DMT % XABS_SW_GARDEN ) ! absorbed shortwave radiation over green areas DEALLOCATE ( DMT % XABS_LW_GARDEN ) ! absorbed shortwave radiation over green areas DEALLOCATE ( DMT % XABS_SW_GREENROOF ) ! absorbed shortwave radiation over green roofs DEALLOCATE ( DMT % XABS_LW_GREENROOF ) ! absorbed shortwave radiation over green roofs DEALLOCATE ( DMT % XG_GREENROOF_ROOF ) ! Heat flux between green roof and structural roof DEALLOCATE ( DMT % XABS_SW_PANEL ) ! absorbed shortwave radiation over solar panels DEALLOCATE ( DMT % XABS_LW_PANEL ) ! absorbed longwave  radiation over solar panels ! DEALLOCATE ( DMT % XRN_PANEL ) ! net radiation           over solar panels (W/m2) DEALLOCATE ( DMT % XH_PANEL ) ! sensible heat flux      over solar panels (W/m2) DEALLOCATE ( DMT % XTHER_PROD_PANEL ) ! thermal      production of   solar panels (W/m2 thermal panel) DEALLOCATE ( DMT % XPHOT_PROD_PANEL ) ! photovoltaic production of   solar panels (W/m2 photovoltaic panel) DEALLOCATE ( DMT % XPROD_PANEL ) !              production of   solar panels (W/m2 panel) DEALLOCATE ( DMT % XTHER_PROD_BLD ) ! thermal      production of   solar panels (W/m2 bld) DEALLOCATE ( DMT % XPHOT_PROD_BLD ) ! photovoltaic production of   solar panels (W/m2 bld) DEALLOCATE ( DMT % XH_BLD_COOL ) ! Sensible cooling energy demand ! of the building [W m-2(bld)] DEALLOCATE ( DMT % XT_BLD_COOL ) ! Total cooling energy demand ! of the building [W m-2(bld)] DEALLOCATE ( DMT % XH_BLD_HEAT ) ! Heating energy demand ! of the building [W m-2(bld)] DEALLOCATE ( DMT % XLE_BLD_COOL ) ! Latent cooling energy demand ! of the building [W m-2(bld)] DEALLOCATE ( DMT % XLE_BLD_HEAT ) ! Latent heating energy demand ! of the building [W m-2(bld)] DEALLOCATE ( DMT % XH_WASTE ) ! Sensible waste heat from HVAC system ! [W m-2(tot)] DEALLOCATE ( DMT % XLE_WASTE ) ! Latent waste heat from HVAC system ! [W m-2(tot)] DEALLOCATE ( DMT % XHVAC_COOL ) ! Energy consumption of the cooling system ! [W m-2(bld)] DEALLOCATE ( DMT % XHVAC_HEAT ) ! Energy consumption of the heating system ! [W m-2(bld)] DEALLOCATE ( DMT % XCAP_SYS ) ! Actual capacity of the cooling system ! [W m-2(bld)] DEALLOCATE ( DMT % XM_SYS ) ! Actual HVAC mass flow rate ! [kg s-1 m-2(bld)] DEALLOCATE ( DMT % XCOP ) ! COP of the cooling system DEALLOCATE ( DMT % XQ_SYS ) ! Supply air specific humidity [kg kg-1] DEALLOCATE ( DMT % XT_SYS ) ! Supply air temperature [K] DEALLOCATE ( DMT % XTR_SW_WIN ) ! Solar radiation transmitted throught ! windows [W m-2(bld)] DEALLOCATE ( DMT % XFAN_POWER ) ! HVAC fan power DEALLOCATE ( DMT % XABS_SW_WIN ) ! window absorbed shortwave radiation [W m-2] DEALLOCATE ( DMT % XABS_LW_WIN ) ! absorbed infrared rad. [W m-2] DEALLOCATE ( DMT % XEMIT_LW_FAC ) ! LW flux emitted by the facade (W/m2 facade) DEALLOCATE ( DMT % XEMIT_LW_GRND ) ! LW flux emitted by the ground (W/m2 ground = road + garden) DEALLOCATE ( DMT % XT_RAD_IND ) !Indoor mean radiant temperature [K] DEALLOCATE ( DMT % XREF_SW_GRND ) ! total solar rad reflected by ground DEALLOCATE ( DMT % XREF_SW_FAC ) ! total solar rad reflected by facade DEALLOCATE ( DMT % XHU_BLD ) !Indoor relative humidity ! DEALLOCATE ( DMT % XTCOOL_TARGET ) ! current cooling setpoint of indoor air DEALLOCATE ( DMT % XTHEAT_TARGET ) ! current heating setpoint of indoor air DEALLOCATE ( DMT % XQIN ) ! current internal heat gains [W m-2(floor)] ! New fields DEALLOCATE ( GDM % VD % ND % AL ) DEALLOCATE ( GDM % VD % NDE % AL ) DEALLOCATE ( GDM % VD % NDM % AL ) DEALLOCATE ( GDM % NPE % AL ) DEALLOCATE ( GRM % VD % ND % AL ) DEALLOCATE ( GRM % VD % NDE % AL ) DEALLOCATE ( GRM % VD % NDM % AL ) DEALLOCATE ( GRM % NPE % AL ) !------------------------------------------------------------------------------- ! ! END SUBROUTINE DEALLOC_TEB_STRUCT","tags":"","loc":"sourcefile/dealloc_teb_struct.f90.html"},{"title":"window_data_struct.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines WINDOW_DATA_STRUCT Source Code window_data_struct.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL licence !SFX_LIC version 2.1. See Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. !     ############################################################# SUBROUTINE WINDOW_DATA_STRUCT ( KI , PSHGC , PU_WIN , PALB_WIN , PABS_WIN , PUGG_WIN , PTRAN_WIN ) !     ############################################################# ! ! !!****  *WINDOW_DATA* !! !!    PURPOSE !!    ------- ! !     Computes the radiative properties of the window ! ! !!**  METHOD !!     ------ !! uses U_WIN (window conductivity) and SHGC (window solar heat gain coef) !! to compute the normal incident transmittance/reflectance !! a factor to normal incident tran/ref is applied to take into account all !! possible incidence between 18deg and 72deg !! !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! Simple Window Model from EnergyPlus Engineering Reference V7, 2012, p. 217. !! !!    AUTHOR !!    ------ !! !!      B. Bueno           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    11/10 !!      G. Pigeon & J. Le Bras  09/12 apply new factor to normal incident tran/ref !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! ! ! USE MODI_WINDOW_DATA ! USE MODD_BEM_n , ONLY : BEM_t ! IMPLICIT NONE ! INTEGER , INTENT ( IN ) :: KI ! number of points REAL , DIMENSION ( KI ), INTENT ( IN ) :: PSHGC ! solar heat gain coef. of windows REAL , DIMENSION ( KI ), INTENT ( IN ) :: PU_WIN ! window U-factor [K m W-2] REAL , DIMENSION ( KI ), INTENT ( OUT ) :: PALB_WIN ! window albedo REAL , DIMENSION ( KI ), INTENT ( OUT ) :: PABS_WIN ! window absortance REAL , DIMENSION ( KI ), INTENT ( OUT ) :: PUGG_WIN ! window glass-to-glass U-factor [W m-2 K-1] REAL , DIMENSION ( KI ), INTENT ( OUT ) :: PTRAN_WIN ! window transmittance (-) ! ! !*      0.2    Declarations of local variables ! TYPE ( BEM_t ) :: B ! ! !------------------------------------------------------------------------------ ALLOCATE ( B % XSHGC ( 1 )) ALLOCATE ( B % XU_WIN ( 1 )) ALLOCATE ( B % XALB_WIN ( 1 )) ALLOCATE ( B % XABS_WIN ( 1 )) ALLOCATE ( B % XUGG_WIN ( 1 )) ALLOCATE ( B % XTRAN_WIN ( 1 )) !------------------------------------------------------------------------------ ! ! put input variables in structures B % XSHGC = PSHGC ! solar heat gain coef. of windows B % XU_WIN = PU_WIN ! window U-factor [K m W-2] !------------------------------------------------------------------------------ ! CALL WINDOW_DATA ( KI , B ) ! !------------------------------------------------------------------------------ ! ! put computed variables in output variables PALB_WIN = B % XALB_WIN ! window albedo PABS_WIN = B % XABS_WIN ! window absortance PUGG_WIN = B % XUGG_WIN ! window glass-to-glass U-factor [W m-2 K-1] PTRAN_WIN = B % XTRAN_WIN ! window transmittance (-)! !------------------------------------------------------------------------------ DEALLOCATE ( B % XSHGC ) DEALLOCATE ( B % XU_WIN ) DEALLOCATE ( B % XALB_WIN ) DEALLOCATE ( B % XABS_WIN ) DEALLOCATE ( B % XUGG_WIN ) DEALLOCATE ( B % XTRAN_WIN ) !------------------------------------------------------------------------------ ! END SUBROUTINE WINDOW_DATA_STRUCT","tags":"","loc":"sourcefile/window_data_struct.f90.html"},{"title":"modi_window_data_struct.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_WINDOW_DATA_STRUCT Source Code modi_window_data_struct.f90 Source Code MODULE MODI_WINDOW_DATA_STRUCT INTERFACE SUBROUTINE WINDOW_DATA_STRUCT ( KI , PSHGC , PU_WIN , PALB_WIN , PABS_WIN , PUGG_WIN , PTRAN_WIN ) IMPLICIT NONE INTEGER , INTENT ( IN ) :: KI ! number of points REAL , DIMENSION ( KI ), INTENT ( IN ) :: PSHGC ! solar heat gain coef. of windows REAL , DIMENSION ( KI ), INTENT ( IN ) :: PU_WIN ! window U-factor [K m W-2] REAL , DIMENSION ( KI ), INTENT ( OUT ) :: PALB_WIN ! window albedo REAL , DIMENSION ( KI ), INTENT ( OUT ) :: PABS_WIN ! window absortance REAL , DIMENSION ( KI ), INTENT ( OUT ) :: PUGG_WIN ! window glass-to-glass U-factor [W m-2 K-1] REAL , DIMENSION ( KI ), INTENT ( OUT ) :: PTRAN_WIN ! window transmittance (-) END SUBROUTINE WINDOW_DATA_STRUCT END INTERFACE END MODULE MODI_WINDOW_DATA_STRUCT","tags":"","loc":"sourcefile/modi_window_data_struct.f90.html"},{"title":"modi_bem_morpho_struct.f90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_BEM_MORPHO_STRUCT Source Code modi_bem_morpho_struct.f90 Source Code MODULE MODI_BEM_MORPHO_STRUCT INTERFACE SUBROUTINE BEM_MORPHO_STRUCT ( PBLD , PWALL_O_HOR , PBLD_HEIGHT , PFLOOR_HEIGHT , & PGR , PN_FLOOR , PWALL_O_BLD , PGLAZ_O_BLD , PMASS_O_BLD , & PFLOOR_HW_RATIO , & PF_FLOOR_MASS , PF_FLOOR_WALL , PF_FLOOR_WIN , & PF_FLOOR_ROOF , PF_WALL_FLOOR , PF_WALL_MASS , & PF_WALL_WIN , PF_WIN_FLOOR , PF_WIN_MASS , PF_WIN_WALL , & PF_MASS_FLOOR , PF_MASS_WALL , PF_MASS_WIN , PF_WASTE_CAN , & PF_WIN_WIN ) IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PBLD ! Urban horizontal building density REAL , DIMENSION (:), INTENT ( IN ) :: PWALL_O_HOR ! Wall to horizontal surface ratio REAL , DIMENSION (:), INTENT ( IN ) :: PBLD_HEIGHT ! Average building height [m] REAL , DIMENSION (:), INTENT ( INOUT ) :: PFLOOR_HEIGHT ! Building floor height [m] REAL , DIMENSION (:), INTENT ( IN ) :: PGR ! Glazing ratio REAL , DIMENSION (:), INTENT ( OUT ) :: PN_FLOOR ! number of floor levels REAL , DIMENSION (:), INTENT ( OUT ) :: PWALL_O_BLD ! wall surface per ground building surface [m2(wall)/m2(bld)] REAL , DIMENSION (:), INTENT ( OUT ) :: PGLAZ_O_BLD ! glazing surface per ground building surface [m2(glazing)/m2(bld)] REAL , DIMENSION (:), INTENT ( OUT ) :: PMASS_O_BLD ! thermal mass surface per ground building surface [m2(mass)/m2(bld)] REAL , DIMENSION (:), INTENT ( OUT ) :: PFLOOR_HW_RATIO !Height to width ratio of the floor levels REAL , DIMENSION (:), INTENT ( OUT ) :: PF_FLOOR_MASS !view factor from floor to mass (how much floor seen by mass) REAL , DIMENSION (:), INTENT ( OUT ) :: PF_FLOOR_WALL REAL , DIMENSION (:), INTENT ( OUT ) :: PF_FLOOR_WIN REAL , DIMENSION (:), INTENT ( OUT ) :: PF_FLOOR_ROOF REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WALL_FLOOR REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WALL_MASS REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WALL_WIN REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WIN_FLOOR REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WIN_MASS REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WIN_WALL REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WIN_WIN REAL , DIMENSION (:), INTENT ( OUT ) :: PF_MASS_FLOOR REAL , DIMENSION (:), INTENT ( OUT ) :: PF_MASS_WALL REAL , DIMENSION (:), INTENT ( OUT ) :: PF_MASS_WIN REAL , DIMENSION (:), INTENT ( INOUT ) :: PF_WASTE_CAN !fraction of waste heat released into the canyon END SUBROUTINE BEM_MORPHO_STRUCT END INTERFACE END MODULE MODI_BEM_MORPHO_STRUCT","tags":"","loc":"sourcefile/modi_bem_morpho_struct.f90.html"},{"title":"teb_garden_struct.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines TEB_GARDEN_STRUCT Source Code teb_garden_struct.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL licence !SFX_LIC version 2.1. See Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. !     ######### SUBROUTINE TEB_GARDEN_STRUCT ( OGARDEN , OGREENROOF , OSOLAR_PANEL , & HZ0H , HIMPLICIT_WIND , HROAD_DIR , HWALL_OPT , TPTIME , & PTSUN , PT_CAN , PQ_CAN , PU_CAN , & PT_LOWCAN , PQ_LOWCAN , PU_LOWCAN , PZ_LOWCAN , PTI_BLD , & PT_ROOF , PT_ROAD , PT_WALL_A , PT_WALL_B , & PWS_ROOF , PWS_ROAD , & HSNOW_ROOF , & PWSNOW_ROOF , PTSNOW_ROOF , PRSNOW_ROOF , PASNOW_ROOF , & PTSSNOW_ROOF , PESNOW_ROOF , & HSNOW_ROAD , & PWSNOW_ROAD , PTSNOW_ROAD , PRSNOW_ROAD , PASNOW_ROAD , & PTSSNOW_ROAD , PESNOW_ROAD , & PPEW_A_COEF , PPEW_B_COEF , & PPEW_A_COEF_LOWCAN , PPEW_B_COEF_LOWCAN , & PPS , PPA , PEXNS , PEXNA , & PTA , PQA , PRHOA , PCO2 , & PLW_RAD , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & PZENITH , PAZIM , & PRR , PSR , & PZREF , PUREF , PVMOD , & PH_TRAFFIC , PLE_TRAFFIC , PH_INDUSTRY , PLE_INDUSTRY , & PTSTEP , PZ0_TOWN , PBLD , PGARDEN , PROAD_DIR , PROAD , & PFRAC_GR , & PBLD_HEIGHT , PWALL_O_HOR , PCAN_HW_RATIO , & PROAD_O_GRND , PGARDEN_O_GRND , PWALL_O_GRND , & PALB_ROOF , PEMIS_ROOF , & PHC_ROOF , PTC_ROOF , PD_ROOF , & PALB_ROAD , PEMIS_ROAD , PSVF_ROAD , & PHC_ROAD , PTC_ROAD , PD_ROAD , & PALB_WALL , PEMIS_WALL , PSVF_WALL , & PSVF_GARDEN , & PHC_WALL , PTC_WALL , PD_WALL , & PRN_ROOF , PH_ROOF , PLE_ROOF , PLEW_ROOF , PGFLUX_ROOF , & PRUNOFF_ROOF , & PRN_ROAD , PH_ROAD , PLE_ROAD , PLEW_ROAD , PGFLUX_ROAD , & PRUNOFF_ROAD , & PRN_WALL_A , PH_WALL_A , PLE_WALL_A , PGFLUX_WALL_A , & PRN_WALL_B , PH_WALL_B , PLE_WALL_B , PGFLUX_WALL_B , & PRN_STRLROOF , PH_STRLROOF , PLE_STRLROOF , PGFLUX_STRLROOF , & PRUNOFF_STRLROOF , & PRN_BLT , PH_BLT , PLE_BLT , PGFLUX_BLT , & PRNSNOW_ROOF , PHSNOW_ROOF , PLESNOW_ROOF , PGSNOW_ROOF , & PMELT_ROOF , & PRNSNOW_ROAD , PHSNOW_ROAD , PLESNOW_ROAD , PGSNOW_ROAD , & PMELT_ROAD , & PRN_GRND , PH_GRND , PLE_GRND , PGFLUX_GRND , & PRN_TOWN , PH_TOWN , PLE_TOWN , PGFLUX_TOWN , PEVAP_TOWN , & PRUNOFF_TOWN , PSFCO2 , & PUW_GRND , PUW_ROOF , PDUWDU_GRND , PDUWDU_ROOF , & PUSTAR_TOWN , PCD , PCDN , PCH_TOWN , PRI_TOWN , & PTS_TOWN , PEMIS_TOWN , PDIR_ALB_TOWN , PSCA_ALB_TOWN , & PRESA_TOWN , PDQS_TOWN , PQF_TOWN , PQF_BLD , & PFLX_BLD , PAC_ROAD , PAC_GARDEN , PAC_GREENROOF , & PAC_ROAD_WAT , PAC_GARDEN_WAT , PAC_GREENROOF_WAT , & PABS_SW_ROOF , PABS_LW_ROOF , & PABS_SW_SNOW_ROOF , PABS_LW_SNOW_ROOF , & PABS_SW_ROAD , PABS_LW_ROAD , & PABS_SW_SNOW_ROAD , PABS_LW_SNOW_ROAD , & PABS_SW_WALL_A , PABS_LW_WALL_A , & PABS_SW_WALL_B , PABS_LW_WALL_B , & PABS_SW_PANEL , PABS_LW_PANEL , & PABS_SW_GARDEN , PABS_LW_GARDEN , & PABS_SW_GREENROOF , PABS_LW_GREENROOF , & PG_GREENROOF_ROOF , & HCOOL_COIL , PF_WATER_COND , HHEAT_COIL , & HNATVENT , PNATVENT , KDAY , PAUX_MAX , PT_FLOOR , & PT_MASS , PH_BLD_COOL , PT_BLD_COOL , PH_BLD_HEAT , & PLE_BLD_COOL , PLE_BLD_HEAT , PH_WASTE , PLE_WASTE , & PF_WASTE_CAN , PHVAC_COOL , PHVAC_HEAT , PQIN , PQIN_FRAD , & PQIN_FLAT , PGR , PEFF_HEAT , PINF , & PTCOOL_TARGET , PTHEAT_TARGET , PHR_TARGET , PT_WIN2 , & PQI_BLD , PV_VENT , PCAP_SYS_HEAT , PCAP_SYS_RAT , PT_ADP , & PM_SYS_RAT , PCOP_RAT , PCAP_SYS , PM_SYS , PCOP , PQ_SYS , & PT_SYS , PTR_SW_WIN , PFAN_POWER , PHC_FLOOR , PTC_FLOOR , & PD_FLOOR , PT_WIN1 , PABS_SW_WIN , PABS_LW_WIN , PSHGC , & PSHGC_SH , PUGG_WIN , PALB_WIN , PABS_WIN , PEMIT_LW_FAC , & PEMIT_LW_GRND , PT_RAD_IND , PREF_SW_GRND , PREF_SW_FAC , & PHU_BLD , PTIME , OSHADE , PSHADE , OSHAD_DAY , ONATVENT_NIGHT , HBEM , & PN_FLOOR , PWALL_O_BLD , PGLAZ_O_BLD , PMASS_O_BLD , & PFLOOR_HW_RATIO , PF_FLOOR_MASS , PF_FLOOR_WALL , & PF_FLOOR_WIN , PF_FLOOR_ROOF , PF_WALL_FLOOR , PF_WALL_MASS ,& PF_WALL_WIN , PF_WIN_FLOOR , PF_WIN_MASS , PF_WIN_WALL , & PF_MASS_FLOOR , PF_MASS_WALL , PF_MASS_WIN , OCANOPY , & PTRAN_WIN , HCH_BEM , PROUGH_ROOF , PROUGH_WALL , PF_WIN_WIN ,& OPAR_RD_IRRIG , PRD_START_MONTH , PRD_END_MONTH , & PRD_START_HOUR , PRD_END_HOUR , PRD_24H_IRRIG , PIRRIG_ROAD ,& PEMIS_PANEL , PALB_PANEL , PEFF_PANEL , PFRAC_PANEL , & PRESIDENTIAL , & PTHER_PROD_PANEL , PPHOT_PROD_PANEL , PPROD_PANEL , & PTHER_PROD_BLD , PPHOT_PROD_BLD , PPROD_BLD , & PTHER_PRODC_DAY , PH_PANEL , PRN_PANEL , & PDT_RES , PDT_OFF , & PCUR_TCOOL_TARGET , PCUR_THEAT_TARGET , PCUR_QIN ) !   ########################################################################## ! !!****  *TEB_GARDEN_STRUCT* !! !!    PURPOSE !!    ------- ! ! To put all individual variables in the corresponding fortran structure ! for the call to TEB_GARDEN routine. ! !!**  METHOD !     ------ ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!    Original    03/2018 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TYPE_DATE_SURF USE MODD_SURF_PAR , ONLY : XUNDEF ! USE MODD_DATA_COVER_n , ONLY : DATA_COVER_t USE MODD_SFX_GRID_n , ONLY : GRID_t USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t USE MODD_SURFEX_n , ONLY : TEB_GARDEN_MODEL_t USE MODD_SURFEX_n , ONLY : TEB_GREENROOF_MODEL_t ! USE MODI_ALLOC_TEB_STRUCT USE MODI_DEALLOC_TEB_STRUCT USE MODI_TEB_GARDEN ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! ! ! ! LOGICAL , INTENT ( IN ) :: OGARDEN ! Flag to use a garden    model inside the canyon LOGICAL , INTENT ( IN ) :: OGREENROOF ! Flag to use a greenroof model on roofs LOGICAL , INTENT ( IN ) :: OSOLAR_PANEL ! Flag to use a Solar Panel model on roofs CHARACTER ( LEN = 6 ) , INTENT ( IN ) :: HZ0H ! TEB option for z0h roof & road !                                                         ! 'MASC95' : Mascart et al 1995 !                                                         ! 'BRUT82' : Brustaert     1982 !                                                         ! 'KAND07' : Kanda         2007 CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option !                                                         ! 'OLD' = direct !                                                         ! 'NEW' = Taylor serie, order 1 CHARACTER ( LEN = 4 ) , INTENT ( IN ) :: HROAD_DIR ! TEB option for road direction ! 'UNIF' : uniform roads ! 'ORIE' : specified !   road orientation CHARACTER ( LEN = 4 ) , INTENT ( IN ) :: HWALL_OPT ! TEB option for walls representation ! 'UNIF' : uniform walls ! 'TWO ' : 2 opposite  walls TYPE ( DATE_TIME ) , INTENT ( IN ) :: TPTIME ! current date and time from teb REAL , DIMENSION (:), INTENT ( IN ) :: PTSUN ! solar time   (s from midnight) ! REAL , DIMENSION (:) , INTENT ( INOUT ) :: PT_CAN ! canyon air temperature REAL , DIMENSION (:) , INTENT ( INOUT ) :: PQ_CAN ! canyon air specific humidity REAL , DIMENSION (:) , INTENT ( IN ) :: PU_CAN ! canyon hor. wind REAL , DIMENSION (:) , INTENT ( IN ) :: PU_LOWCAN ! wind near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PT_LOWCAN ! temp. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PQ_LOWCAN ! hum. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PZ_LOWCAN ! height of atm. var. near the road REAL , DIMENSION (:) , INTENT ( INOUT ) :: PTI_BLD ! inside building temperature REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_ROOF ! roof layers temperatures REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_ROAD ! road layers temperatures REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_WALL_A ! wall layers temperatures REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_WALL_B ! wall layers temperatures REAL , DIMENSION (:) , INTENT ( INOUT ) :: PWS_ROOF ! roof water reservoir REAL , DIMENSION (:) , INTENT ( INOUT ) :: PWS_ROAD ! road water reservoir CHARACTER ( LEN =* ) , INTENT ( IN ) :: HSNOW_ROOF ! snow roof scheme 'NONE', 'D95 ', '1-L ' CHARACTER ( LEN =* ) , INTENT ( IN ) :: HSNOW_ROAD ! snow road scheme 'NONE', 'D95 ', '1-L ' REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PWSNOW_ROOF ! snow layers reservoir REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PTSNOW_ROOF ! snow layers temperature REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PRSNOW_ROOF ! snow layers density REAL , DIMENSION (:) , INTENT ( INOUT ) :: PASNOW_ROOF ! snow albedo REAL , DIMENSION (:) , INTENT ( INOUT ) :: PESNOW_ROOF ! snow emissivity REAL , DIMENSION (:) , INTENT ( INOUT ) :: PTSSNOW_ROOF ! snow surface temperature REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PWSNOW_ROAD ! snow layers reservoir REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PTSNOW_ROAD ! snow layers temperature REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PRSNOW_ROAD ! snow layers density REAL , DIMENSION (:) , INTENT ( INOUT ) :: PASNOW_ROAD ! snow albedo REAL , DIMENSION (:) , INTENT ( INOUT ) :: PESNOW_ROAD ! snow emissivity REAL , DIMENSION (:) , INTENT ( INOUT ) :: PTSSNOW_ROAD ! snow surface temperature REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF_LOWCAN ! implicit coefficients for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF_LOWCAN ! between low canyon wind and road REAL , DIMENSION (:) , INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:) , INTENT ( IN ) :: PPA ! pressure at the first atmospheric level REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:) , INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PQA ! specific humidity at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNA ! exner function at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PRHOA ! air density at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PCO2 ! CO2 concentration in the air    (kg/m3) REAL , DIMENSION (:) , INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:,:), INTENT ( IN ) :: PDIR_SW ! incoming direct solar rad on an horizontal surface REAL , DIMENSION (:,:), INTENT ( IN ) :: PSCA_SW ! scattered incoming solar rad. REAL , DIMENSION (:) , INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) INTEGER , INTENT ( IN ) :: KSW ! number of short-wave spectral bands REAL , DIMENSION (:) , INTENT ( IN ) :: PZENITH ! solar zenithal angle REAL , DIMENSION (:) , INTENT ( IN ) :: PAZIM ! solar azimuthal angle ! (radian form N, clockwise) REAL , DIMENSION (:) , INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:) , INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:) , INTENT ( IN ) :: PH_TRAFFIC ! anthropogenic sensible heat fluxes due to traffic REAL , DIMENSION (:) , INTENT ( IN ) :: PLE_TRAFFIC ! anthropogenic latent heat fluxes due to traffic REAL , DIMENSION (:) , INTENT ( IN ) :: PH_INDUSTRY ! anthropogenic sensible heat fluxes due to factories REAL , DIMENSION (:) , INTENT ( IN ) :: PLE_INDUSTRY ! anthropogenic latent heat fluxes due to factories REAL , DIMENSION (:) , INTENT ( IN ) :: PZREF ! reference height of the first atm level (temperature) REAL , DIMENSION (:) , INTENT ( IN ) :: PUREF ! reference height of the first atm level (wind) REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:) , INTENT ( IN ) :: PZ0_TOWN ! town roughness length for momentum REAL , DIMENSION (:) , INTENT ( IN ) :: PBLD ! fraction of buildings REAL , DIMENSION (:) , INTENT ( IN ) :: PGARDEN ! fraction of green areas REAL , DIMENSION (:) , INTENT ( IN ) :: PROAD_DIR ! road direction (deg from North, clockwise) REAL , DIMENSION (:) , INTENT ( IN ) :: PROAD ! fraction of roads REAL , DIMENSION (:) , INTENT ( IN ) :: PFRAC_GR ! fraction of green roofs REAL , DIMENSION (:) , INTENT ( IN ) :: PBLD_HEIGHT ! buildings h REAL , DIMENSION (:) , INTENT ( IN ) :: PWALL_O_HOR ! wall surf. / hor. surf. REAL , DIMENSION (:) , INTENT ( IN ) :: PCAN_HW_RATIO ! canyon    h/W REAL , DIMENSION (:) , INTENT ( IN ) :: PROAD_O_GRND ! road surf.   / (road+garden surf.) REAL , DIMENSION (:) , INTENT ( IN ) :: PGARDEN_O_GRND ! garden surf. / (road+garden surf.) REAL , DIMENSION (:) , INTENT ( IN ) :: PWALL_O_GRND ! wall surf.   / (road+garden surf.) REAL , DIMENSION (:) , INTENT ( IN ) :: PALB_ROOF ! roof albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PEMIS_ROOF ! roof emissivity REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC_ROOF ! heat capacity for roof layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC_ROOF ! thermal conductivity for roof layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PD_ROOF ! depth of roof layers REAL , DIMENSION (:) , INTENT ( IN ) :: PALB_ROAD ! road albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PEMIS_ROAD ! road emissivity REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC_ROAD ! heat capacity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC_ROAD ! thermal conductivity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PD_ROAD ! depth of road layers REAL , DIMENSION (:) , INTENT ( IN ) :: PSVF_ROAD ! road sky view factor REAL , DIMENSION (:) , INTENT ( IN ) :: PALB_WALL ! wall albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PEMIS_WALL ! wall emissivity REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC_WALL ! heat capacity for wall layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC_WALL ! thermal conductivity for wall layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PD_WALL ! depth of wall layers REAL , DIMENSION (:) , INTENT ( IN ) :: PSVF_WALL ! wall sky view factor REAL , DIMENSION (:) , INTENT ( IN ) :: PSVF_GARDEN ! green area sky view factor ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_ROOF ! net radiation over roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_ROOF ! sensible heat flux over roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_ROOF ! latent heat flux over roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PLEW_ROOF ! latent heat flux over roof (snow) REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_ROOF ! flux through the roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF_ROOF ! runoff over the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_ROAD ! net radiation over road REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_ROAD ! sensible heat flux over road REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_ROAD ! latent heat flux over road REAL , DIMENSION (:) , INTENT ( OUT ) :: PLEW_ROAD ! latent heat flux over road (snow) REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_ROAD ! flux through the road REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF_ROAD ! runoff over the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_WALL_A ! net radiation over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_WALL_A ! sensible heat flux over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_WALL_A ! latent heat flux over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_WALL_A ! flux through the wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_WALL_B ! net radiation over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_WALL_B ! sensible heat flux over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_WALL_B ! latent heat flux over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_WALL_B ! flux through the wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_STRLROOF ! net radiation over structural roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_STRLROOF ! sensible heat flux over structural roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_STRLROOF ! latent heat flux over structural roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_STRLROOF ! flux through the structural roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF_STRLROOF ! runoff aver structural roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_BLT ! net radiation over built surf REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_BLT ! sensible heat flux over built surf REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_BLT ! latent heat flux over built surf REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_BLT ! flux through the built surf ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PRNSNOW_ROOF ! net radiation over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PHSNOW_ROOF ! sensible heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PLESNOW_ROOF ! latent heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PGSNOW_ROOF ! flux under the snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PMELT_ROOF ! snow melt REAL , DIMENSION (:) , INTENT ( OUT ) :: PRNSNOW_ROAD ! net radiation over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PHSNOW_ROAD ! sensible heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PLESNOW_ROAD ! latent heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PGSNOW_ROAD ! flux under the snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PMELT_ROAD ! snow melt ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_GRND ! net radiation over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_GRND ! sensible heat flux over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_GRND ! latent heat flux over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_GRND ! flux through the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_TOWN ! net radiation over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_TOWN ! sensible heat flux over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_TOWN ! latent heat flux over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_TOWN ! flux through the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PEVAP_TOWN ! evaporation flux (kg/m2/s) REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF_TOWN ! runoff over the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PSFCO2 ! flux of CO2       (m/s*kg_CO2/kg_air) REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW_GRND ! momentum flux for ground built surf REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW_ROOF ! momentum flux for roofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PDUWDU_GRND ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PDUWDU_ROOF ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PUSTAR_TOWN ! friciton velocity over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PCD ! town averaged drag coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PCDN ! town averaged neutral drag coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PCH_TOWN ! town averaged heat transfer coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PRI_TOWN ! town averaged Richardson number REAL , DIMENSION (:) , INTENT ( OUT ) :: PTS_TOWN ! town surface temperature REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIS_TOWN ! town equivalent emissivity REAL , DIMENSION (:) , INTENT ( OUT ) :: PDIR_ALB_TOWN ! town equivalent direct albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PSCA_ALB_TOWN ! town equivalent diffuse albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PRESA_TOWN ! town aerodynamical resistance REAL , DIMENSION (:) , INTENT ( OUT ) :: PDQS_TOWN ! heat storage inside town REAL , DIMENSION (:) , INTENT ( OUT ) :: PQF_TOWN ! total anthropogenic heat REAL , DIMENSION (:) , INTENT ( OUT ) :: PQF_BLD ! anthropogenic heat flux of domestic heating REAL , DIMENSION (:) , INTENT ( OUT ) :: PFLX_BLD ! heat flx from inside bld through its structure REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_ROAD ! road conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GARDEN ! green area conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GREENROOF ! green roof conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_ROAD_WAT ! road conductance for latent heat REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GARDEN_WAT ! green area conductance for latent heat REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GREENROOF_WAT ! green roof conductance for latent heat ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_ROOF ! absorbed solar rad by roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_SNOW_ROOF ! absorbed solar rad by snow on roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_ROOF ! absorbed IR rad by roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_SNOW_ROOF ! absorbed IR rad by snow on roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_ROAD ! absorbed solar rad by road REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_SNOW_ROAD ! absorbed solar rad by snow on road REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_ROAD ! absorbed IR rad by road REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_SNOW_ROAD ! absorbed IR rad by snow on road REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_WALL_A ! absorbed solar rad by wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_WALL_A ! absorbed IR rad by wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_WALL_B ! absorbed solar rad by wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_WALL_B ! absorbed IR rad by wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_PANEL ! absorbed solar rad by solar panels REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_PANEL ! absorbed IR rad by solar panels REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_GARDEN ! absorbed solar rad by green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_GARDEN ! absorbed IR rad by green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_GREENROOF ! absorbed solar rad by green roofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_GREENROOF ! absorbed IR rad by green roofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PG_GREENROOF_ROOF ! heat flux between base of greenroof !                                                         !    and structural roof ! ! new arguments created after BEM ! CHARACTER ( LEN = 12 ) , INTENT ( IN ) :: HCOOL_COIL CHARACTER ( LEN = 6 ) , INTENT ( IN ) :: HHEAT_COIL REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WATER_COND ! fraction of evaporation for the condensers CHARACTER ( LEN = 4 ), DIMENSION (:), INTENT ( IN ) :: HNATVENT REAL , DIMENSION (:) , INTENT ( IN ) :: PNATVENT ! flag to describe surventilation system for i/o ! 0 for NONE, 1 for MANU and 2 for AUTO INTEGER , INTENT ( IN ) :: KDAY ! Simulation day REAL , DIMENSION (:) , INTENT ( INOUT ) :: PAUX_MAX ! Auxiliar variable for autosize calcs REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_FLOOR ! Floor layers temperatures [K] REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_MASS ! Internal mass layers temperatures [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_BLD_COOL ! Sensible cooling energy demand ! of the building [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PT_BLD_COOL ! Total cooling energy demand ! of the building [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_BLD_HEAT ! Heating energy demand ! of the building [W m-2(bld)] REAL , DIMENSION (: ), INTENT ( OUT ) :: PLE_BLD_COOL ! Latent cooling energy demand ! of the building [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_BLD_HEAT ! Latent heating energy demand ! of the building [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_WASTE ! Sensible waste heat from HVAC system ! [W m-2(tot)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_WASTE ! Latent waste heat from HVAC system ! [W m-2(tot)] REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WASTE_CAN ! fraction of waste heat released into the canyon REAL , DIMENSION (:) , INTENT ( OUT ) :: PHVAC_COOL ! Energy consumption of the cooling system ! [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PHVAC_HEAT ! Energy consumption of the heating system ! [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( IN ) :: PQIN ! Internal heat gains [W m-2(floor)] REAL , DIMENSION (:) , INTENT ( IN ) :: PQIN_FRAD ! Radiant fraction of internal heat gains REAL , DIMENSION (:) , INTENT ( IN ) :: PQIN_FLAT ! Latent franction of internal heat gains REAL , DIMENSION (:) , INTENT ( IN ) :: PGR ! Glazing ratio REAL , DIMENSION (:) , INTENT ( IN ) :: PEFF_HEAT ! Efficiency of the heating system REAL , DIMENSION (:) , INTENT ( IN ) :: PINF ! Infiltration flow rate [AC/H] REAL , DIMENSION (:) , INTENT ( IN ) :: PTCOOL_TARGET ! Cooling setpoint of HVAC system [K] REAL , DIMENSION (:) , INTENT ( IN ) :: PTHEAT_TARGET ! Heating setpoint of HVAC system [K] REAL , DIMENSION (:) , INTENT ( IN ) :: PHR_TARGET ! Relative humidity setpoint REAL , DIMENSION (:) , INTENT ( INOUT ) :: PT_WIN2 ! Indoor window temperature [K] REAL , DIMENSION (:) , INTENT ( INOUT ) :: PQI_BLD ! Indoor air specific humidity [kg kg-1] REAL , DIMENSION (:) , INTENT ( IN ) :: PV_VENT ! Ventilation flow rate [AC/H] REAL , DIMENSION (:) , INTENT ( IN ) :: PCAP_SYS_HEAT ! Capacity of the heating system ! [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( INOUT ) :: PCAP_SYS_RAT ! Rated capacity of the cooling system ! [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( IN ) :: PT_ADP ! Apparatus dewpoint temperature of the ! cooling coil [K] REAL , DIMENSION (:) , INTENT ( INOUT ) :: PM_SYS_RAT ! Rated HVAC mass flow rate ! [kg s-1 m-2(bld)] REAL , DIMENSION (:) , INTENT ( IN ) :: PCOP_RAT ! Rated COP of the cooling system REAL , DIMENSION (:) , INTENT ( OUT ) :: PCAP_SYS ! Actual capacity of the cooling system ! [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PM_SYS ! Actual HVAC mass flow rate ! [kg s-1 m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PCOP ! COP of the cooling system REAL , DIMENSION (:) , INTENT ( OUT ) :: PQ_SYS ! Supply air specific humidity [kg kg-1] REAL , DIMENSION (:) , INTENT ( OUT ) :: PT_SYS ! Supply air temperature [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PTR_SW_WIN ! Solar radiation transmitted throught ! windows [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PFAN_POWER ! HVAC fan power REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC_FLOOR ! heat capacity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC_FLOOR ! thermal conductivity for ! road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PD_FLOOR ! depth of road layers REAL , DIMENSION (:) , INTENT ( INOUT ) :: PT_WIN1 ! outdoor window temperature [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_WIN ! window absorbed shortwave radiation [W m-2] REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_WIN ! absorbed infrared rad. [W m-2] REAL , DIMENSION (:) , INTENT ( IN ) :: PSHGC ! window solar transmittance REAL , DIMENSION (:) , INTENT ( IN ) :: PSHGC_SH ! window + shading solar heat gain coef. REAL , DIMENSION (:) , INTENT ( IN ) :: PUGG_WIN ! window glass-to-glass U-factro [W m-2 K-1] REAL , DIMENSION (:) , INTENT ( OUT ) :: PALB_WIN ! window albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PABS_WIN ! window absortance REAL , DIMENSION (:) , INTENT ( IN ) :: PTRAN_WIN ! window transmittance ! ! new argument for the UTCI calculation REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIT_LW_GRND ! LW flux emitted by the ground (W/m2 ground) REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIT_LW_FAC ! LW flux emitted by the facade (W/m2 ground) REAL , DIMENSION (:) , INTENT ( OUT ) :: PT_RAD_IND ! Indoor mean radiant temperature [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PREF_SW_GRND ! total solar rad reflected from ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PREF_SW_FAC ! total solar rad reflected from facade REAL , DIMENSION (:) , INTENT ( OUT ) :: PHU_BLD ! Indoor relative humidity 0 < (-) < 1 ! ! new arguments for shading, schedule or natural ventilation REAL , INTENT ( IN ) :: PTIME ! current time since midnight (UTC, s) LOGICAL , DIMENSION (:), INTENT ( IN ) :: OSHADE REAL , DIMENSION (:) , INTENT ( IN ) :: PSHADE ! flag to activate shading devices -> REAL for i/o 0. or 1 LOGICAL , DIMENSION (:), INTENT ( INOUT ) :: OSHAD_DAY ! has shading been necessary this day ? LOGICAL , DIMENSION (:), INTENT ( INOUT ) :: ONATVENT_NIGHT ! has natural ventilation been necessary/possible this night ? CHARACTER ( LEN = 3 ) , INTENT ( IN ) :: HBEM ! Building Energy model 'DEF' or 'BEM' ! REAL , DIMENSION (:) , INTENT ( IN ) :: PN_FLOOR ! Number of floors REAL , DIMENSION (:) , INTENT ( IN ) :: PWALL_O_BLD ! Wall area [m2_wall/m2_bld] REAL , DIMENSION (:) , INTENT ( IN ) :: PGLAZ_O_BLD ! Window area [m2_win/m2_bld] REAL , DIMENSION (:) , INTENT ( IN ) :: PMASS_O_BLD ! Mass area [m2_mass/m2_bld] REAL , DIMENSION (:) , INTENT ( IN ) :: PFLOOR_HW_RATIO ! H/W ratio of 1 floor level REAL , DIMENSION (:) , INTENT ( IN ) :: PF_FLOOR_MASS ! View factor floor-mass REAL , DIMENSION (:) , INTENT ( IN ) :: PF_FLOOR_WALL ! View factor floor-wall REAL , DIMENSION (:) , INTENT ( IN ) :: PF_FLOOR_WIN ! View factor floor-window REAL , DIMENSION (:) , INTENT ( IN ) :: PF_FLOOR_ROOF ! View factor floor-roof REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WALL_FLOOR ! View factor wall-floor REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WALL_MASS ! View factor wall-mass REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WALL_WIN ! View factor wall-win REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WIN_FLOOR ! View factor win-floor REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WIN_MASS ! View factor win-mass REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WIN_WALL ! View factor win-wall REAL , DIMENSION (:) , INTENT ( IN ) :: PF_MASS_FLOOR ! View factor mass-floor REAL , DIMENSION (:) , INTENT ( IN ) :: PF_MASS_WALL ! View factor mass-wall REAL , DIMENSION (:) , INTENT ( IN ) :: PF_MASS_WIN ! View factor mass-window LOGICAL , INTENT ( IN ) :: OCANOPY ! is canopy active ? CHARACTER ( LEN = 5 ) , INTENT ( IN ) :: HCH_BEM ! TEB option for building outside conv. coef REAL , DIMENSION (:) , INTENT ( IN ) :: PROUGH_ROOF ! roof roughness coef. REAL , DIMENSION (:) , INTENT ( IN ) :: PROUGH_WALL ! wall roughness coef. REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WIN_WIN ! indoor win to win view factor ! !* arguments for road watering ! LOGICAL , INTENT ( IN ) :: OPAR_RD_IRRIG ! True if there is potentially irrigation REAL , DIMENSION (:), INTENT ( IN ) :: PRD_START_MONTH ! First month of irrigation REAL , DIMENSION (:), INTENT ( IN ) :: PRD_END_MONTH ! Last month of irrigation REAL , DIMENSION (:), INTENT ( IN ) :: PRD_START_HOUR ! First hour of irrigation (included) REAL , DIMENSION (:), INTENT ( IN ) :: PRD_END_HOUR ! Last hour of irrigation  (excluded) REAL , DIMENSION (:), INTENT ( IN ) :: PRD_24H_IRRIG ! diurnal averaged irrigation flux (kg/m2/s) REAL , DIMENSION (:), INTENT ( OUT ) :: PIRRIG_ROAD ! man-made watering of roads (kg/m2/s) ! !* arguments for solar panels ! REAL , DIMENSION (:), INTENT ( IN ) :: PEMIS_PANEL ! Emissivity of solar panels (-) REAL , DIMENSION (:), INTENT ( IN ) :: PALB_PANEL ! Albedo     of solar panels (-) REAL , DIMENSION (:), INTENT ( IN ) :: PEFF_PANEL ! Efficiency of solar panel (-) REAL , DIMENSION (:), INTENT ( IN ) :: PFRAC_PANEL ! Fraction of solar panel on roofs (-) REAL , DIMENSION (:), INTENT ( OUT ) :: PTHER_PROD_PANEL ! Thermal      Energy production of solar panel on roofs (W/m2 panel) REAL , DIMENSION (:), INTENT ( OUT ) :: PPHOT_PROD_PANEL ! Photovoltaic Energy production of solar panel on roofs (W/m2 panel) REAL , DIMENSION (:), INTENT ( OUT ) :: PPROD_PANEL ! Averaged     Energy production of solar panel on roofs (W/m2 panel) REAL , DIMENSION (:), INTENT ( OUT ) :: PTHER_PROD_BLD ! Thermal      Energy production of solar panel on roofs (W/m2 bld  ) REAL , DIMENSION (:), INTENT ( OUT ) :: PPHOT_PROD_BLD ! Photovoltaic Energy production of solar panel on roofs (W/m2 bld  ) REAL , DIMENSION (:), INTENT ( OUT ) :: PPROD_BLD ! Averaged     Energy production of solar panel on roofs (W/m2 bld  ) REAL , DIMENSION (:), INTENT ( INOUT ) :: PTHER_PRODC_DAY ! Present day integrated thermal production of energy    (J/m2 panel) REAL , DIMENSION (:), INTENT ( OUT ) :: PH_PANEL ! Sensible heat flux from solar panels      (W/m2 panel) REAL , DIMENSION (:), INTENT ( OUT ) :: PRN_PANEL ! Net radiation        of solar panel       (W/m2 panel) ! !* arguments for building's use description ! REAL , DIMENSION (:), INTENT ( IN ) :: PRESIDENTIAL ! Fraction of residential use (-) REAL , INTENT ( IN ) :: PDT_RES ! target temperature change when unoccupied (K) (residential buildings) REAL , INTENT ( IN ) :: PDT_OFF ! target temperature change when unoccupied (K) (office buildings) REAL , DIMENSION (:), INTENT ( OUT ) :: PCUR_TCOOL_TARGET ! Cooling target temperature at current time (K) REAL , DIMENSION (:), INTENT ( OUT ) :: PCUR_THEAT_TARGET ! Heating target temperature at current time (K) REAL , DIMENSION (:), INTENT ( OUT ) :: PCUR_QIN ! Internal heat gains        at current time (W/m2 floor) LOGICAL :: debug = . FALSE . ! ! !*      0.2    Declarations of local variables ! TYPE ( DATA_COVER_t ) :: DTCO TYPE ( GRID_t ) :: G TYPE ( TEB_OPTIONS_t ) :: TOP TYPE ( TEB_t ) :: T TYPE ( BEM_OPTIONS_t ) :: BOP TYPE ( BEM_t ) :: B TYPE ( TEB_PANEL_t ) :: TPN TYPE ( TEB_IRRIG_t ) :: TIR TYPE ( DIAG_MISC_TEB_t ) :: DMT TYPE ( TEB_GARDEN_MODEL_t ) :: GDM TYPE ( TEB_GREENROOF_MODEL_t ) :: GRM ! INTEGER :: KTEB_P ! TEB current patch number logical :: exist ! TODO: testing remove ! !------------------------------------------------------------------------------- ! !* All OUT (not IN or INOUT) dummy arguments are set to value XUNDEF at the beginning of the routine. ! PRN_ROOF = XUNDEF ! net radiation over roof PH_ROOF = XUNDEF ! sensible heat flux over roof PLE_ROOF = XUNDEF ! latent heat flux over roof PLEW_ROOF = XUNDEF ! latent heat flux over roof (snow) PGFLUX_ROOF = XUNDEF ! flux through the roof PRUNOFF_ROOF = XUNDEF ! runoff over the ground PRN_ROAD = XUNDEF ! net radiation over road PH_ROAD = XUNDEF ! sensible heat flux over road PLE_ROAD = XUNDEF ! latent heat flux over road PLEW_ROAD = XUNDEF ! latent heat flux over road (snow) PGFLUX_ROAD = XUNDEF ! flux through the road PRUNOFF_ROAD = XUNDEF ! runoff over the ground PRN_WALL_A = XUNDEF ! net radiation over wall PH_WALL_A = XUNDEF ! sensible heat flux over wall PLE_WALL_A = XUNDEF ! latent heat flux over wall PGFLUX_WALL_A = XUNDEF ! flux through the wall PRN_WALL_B = XUNDEF ! net radiation over wall PH_WALL_B = XUNDEF ! sensible heat flux over wall PLE_WALL_B = XUNDEF ! latent heat flux over wall PGFLUX_WALL_B = XUNDEF ! flux through the wall PRN_STRLROOF = XUNDEF ! net radiation over structural roof PH_STRLROOF = XUNDEF ! sensible heat flux over structural roof PLE_STRLROOF = XUNDEF ! latent heat flux over structural roof PGFLUX_STRLROOF = XUNDEF ! flux through the structural roof PRUNOFF_STRLROOF = XUNDEF ! runoff aver structural roof PRN_BLT = XUNDEF ! net radiation over built surf PH_BLT = XUNDEF ! sensible heat flux over built surf PLE_BLT = XUNDEF ! latent heat flux over built surf PGFLUX_BLT = XUNDEF ! flux through the built surf ! PRNSNOW_ROOF = XUNDEF ! net radiation over snow PHSNOW_ROOF = XUNDEF ! sensible heat flux over snow PLESNOW_ROOF = XUNDEF ! latent heat flux over snow PGSNOW_ROOF = XUNDEF ! flux under the snow PMELT_ROOF = XUNDEF ! snow melt PRNSNOW_ROAD = XUNDEF ! net radiation over snow PHSNOW_ROAD = XUNDEF ! sensible heat flux over snow PLESNOW_ROAD = XUNDEF ! latent heat flux over snow PGSNOW_ROAD = XUNDEF ! flux under the snow PMELT_ROAD = XUNDEF ! snow melt ! PRN_GRND = XUNDEF ! net radiation over ground PH_GRND = XUNDEF ! sensible heat flux over ground PLE_GRND = XUNDEF ! latent heat flux over ground PGFLUX_GRND = XUNDEF ! flux through the ground PRN_TOWN = XUNDEF ! net radiation over town PH_TOWN = XUNDEF ! sensible heat flux over town PLE_TOWN = XUNDEF ! latent heat flux over town PGFLUX_TOWN = XUNDEF ! flux through the ground PEVAP_TOWN = XUNDEF ! evaporation flux (kg/m2/s) PRUNOFF_TOWN = XUNDEF ! runoff over the ground PSFCO2 = XUNDEF ! flux of CO2       (m/s*kg_CO2/kg_air) PUW_GRND = XUNDEF ! momentum flux for ground built surf PUW_ROOF = XUNDEF ! momentum flux for roofs PDUWDU_GRND = XUNDEF ! PDUWDU_ROOF = XUNDEF ! PUSTAR_TOWN = XUNDEF ! friciton velocity over town PCD = XUNDEF ! town averaged drag coefficient PCDN = XUNDEF ! town averaged neutral drag coefficient PCH_TOWN = XUNDEF ! town averaged heat transfer coefficient PRI_TOWN = XUNDEF ! town averaged Richardson number PTS_TOWN = XUNDEF ! town surface temperature PEMIS_TOWN = XUNDEF ! town equivalent emissivity PDIR_ALB_TOWN = XUNDEF ! town equivalent direct albedo PSCA_ALB_TOWN = XUNDEF ! town equivalent diffuse albedo PRESA_TOWN = XUNDEF ! town aerodynamical resistance PDQS_TOWN = XUNDEF ! heat storage inside town PQF_TOWN = XUNDEF ! total anthropogenic heat PQF_BLD = XUNDEF ! anthropogenic heat flux of domestic heating PFLX_BLD = XUNDEF ! heat flx from inside bld through its structure PAC_ROAD = XUNDEF ! road conductance PAC_GARDEN = XUNDEF ! green area conductance PAC_GREENROOF = XUNDEF ! green roof conductance PAC_ROAD_WAT = XUNDEF ! road conductance for latent heat PAC_GARDEN_WAT = XUNDEF ! green area conductance for latent heat PAC_GREENROOF_WAT = XUNDEF ! green roof conductance for latent heat ! PABS_SW_ROOF = XUNDEF ! absorbed solar rad by roof PABS_SW_SNOW_ROOF = XUNDEF ! absorbed solar rad by snow on roof PABS_LW_ROOF = XUNDEF ! absorbed IR rad by roof PABS_LW_SNOW_ROOF = XUNDEF ! absorbed IR rad by snow on roof PABS_SW_ROAD = XUNDEF ! absorbed solar rad by road PABS_SW_SNOW_ROAD = XUNDEF ! absorbed solar rad by snow on road PABS_LW_ROAD = XUNDEF ! absorbed IR rad by road PABS_LW_SNOW_ROAD = XUNDEF ! absorbed IR rad by snow on road PABS_SW_WALL_A = XUNDEF ! absorbed solar rad by wall PABS_LW_WALL_A = XUNDEF ! absorbed IR rad by wall PABS_SW_WALL_B = XUNDEF ! absorbed solar rad by wall PABS_LW_WALL_B = XUNDEF ! absorbed IR rad by wall PABS_SW_PANEL = XUNDEF ! absorbed solar rad by solar panels PABS_LW_PANEL = XUNDEF ! absorbed IR rad by solar panels PABS_SW_GARDEN = XUNDEF ! absorbed solar rad by green areas PABS_LW_GARDEN = XUNDEF ! absorbed IR rad by green areas PABS_SW_GREENROOF = XUNDEF ! absorbed solar rad by green roofs PABS_LW_GREENROOF = XUNDEF ! absorbed IR rad by green roofs PG_GREENROOF_ROOF = XUNDEF ! heat flux between base of greenroof !                                                         !    and structural roof PH_BLD_COOL = XUNDEF ! Sensible cooling energy demand ! of the building [W m-2(bld)] PT_BLD_COOL = XUNDEF ! Total cooling energy demand ! of the building [W m-2(bld)] PH_BLD_HEAT = XUNDEF ! Heating energy demand ! of the building [W m-2(bld)] PLE_BLD_COOL = XUNDEF ! Latent cooling energy demand ! of the building [W m-2(bld)] PLE_BLD_HEAT = XUNDEF ! Latent heating energy demand ! of the building [W m-2(bld)] PH_WASTE = XUNDEF ! Sensible waste heat from HVAC system ! [W m-2(tot)] PLE_WASTE = XUNDEF ! Latent waste heat from HVAC system ! [W m-2(tot)] PHVAC_COOL = XUNDEF ! Energy consumption of the cooling system ! [W m-2(bld)] PHVAC_HEAT = XUNDEF ! Energy consumption of the heating system ! [W m-2(bld)] PCAP_SYS = XUNDEF ! Actual capacity of the cooling system ! [W m-2(bld)] PM_SYS = XUNDEF ! Actual HVAC mass flow rate ! [kg s-1 m-2(bld)] PCOP = XUNDEF ! COP of the cooling system PQ_SYS = XUNDEF ! Supply air specific humidity [kg kg-1] PT_SYS = XUNDEF ! Supply air temperature [K] PTR_SW_WIN = XUNDEF ! Solar radiation transmitted throught ! windows [W m-2(bld)] PFAN_POWER = XUNDEF ! HVAC fan power PABS_SW_WIN = XUNDEF ! window absorbed shortwave radiation [W m-2] PABS_LW_WIN = XUNDEF ! absorbed infrared rad. [W m-2] PALB_WIN = XUNDEF ! window albedo ! ! new argument for the UTCI calculation PEMIT_LW_GRND = XUNDEF ! LW flux emitted by the ground (W/m2 ground) PEMIT_LW_FAC = XUNDEF ! LW flux emitted by the facade (W/m2 ground) PT_RAD_IND = XUNDEF ! Indoor mean radiant temperature [K] PREF_SW_GRND = XUNDEF ! total solar rad reflected from ground PREF_SW_FAC = XUNDEF ! total solar rad reflected from facade PHU_BLD = XUNDEF ! Indoor relative humidity 0 < (-) < 1 PIRRIG_ROAD = XUNDEF ! man-made watering of roads (kg/m2/s) ! !* arguments for solar panels ! PTHER_PROD_PANEL = XUNDEF ! Thermal      Energy production of solar panel on roofs (W/m2 panel) PPHOT_PROD_PANEL = XUNDEF ! Photovoltaic Energy production of solar panel on roofs (W/m2 panel) PPROD_PANEL = XUNDEF ! Averaged     Energy production of solar panel on roofs (W/m2 panel) PTHER_PROD_BLD = XUNDEF ! Thermal      Energy production of solar panel on roofs (W/m2 bld  ) PPHOT_PROD_BLD = XUNDEF ! Photovoltaic Energy production of solar panel on roofs (W/m2 bld  ) PPROD_BLD = XUNDEF ! Averaged     Energy production of solar panel on roofs (W/m2 bld  ) PH_PANEL = XUNDEF ! Sensible heat flux from solar panels      (W/m2 panel) PRN_PANEL = XUNDEF ! Net radiation        of solar panel       (W/m2 panel) ! !* arguments for building's use description ! PCUR_TCOOL_TARGET = XUNDEF ! Cooling target temperature at current time (K) PCUR_THEAT_TARGET = XUNDEF ! Heating target temperature at current time (K) PCUR_QIN = XUNDEF ! Internal heat gains        at current time (W/m2 floor) ! !------------------------------------------------------------------------------- ! !* Allocate all the local structure variables ! CALL ALLOC_TEB_STRUCT ( SIZE ( PT_ROOF , 2 ), SIZE ( PT_ROAD , 2 ), SIZE ( PT_WALL_A , 2 ), SIZE ( PT_FLOOR , 2 ), & DTCO , G , TOP , T , BOP , B , TPN , TIR , DMT , GDM , GRM ) ! ! This is of course not optimized here, because at each time step, the structures are allocated, set and deallocated at the end. !  This is done so only to show that the structures can be independant from the rest of the code above (here the driver.F90 program). ! The structures could be saved from one time-step to another by putting them in a dedicated module for example. ! !------------------------------------------------------------------------------- ! ! BEM OPTIONS structure ! BOP % NFLOOR_LAYER = SIZE ( PT_FLOOR , 2 ) BOP % CCOOL_COIL = HCOOL_COIL BOP % CHEAT_COIL = HHEAT_COIL ! Not supported as hvac_autosize.F90 is not included BOP % LAUTOSIZE = . FALSE . !------------------------------------------------------------------------------- ! ! BEM structure ! ! ! Floor parameters ! B % XHC_FLOOR ( 1 ,:) = PHC_FLOOR ( 1 ,:) ! floor layers heat capacity        (J/K/m3) B % XTC_FLOOR ( 1 ,:) = PTC_FLOOR ( 1 ,:) ! floor layers thermal conductivity (W/K/m) B % XD_FLOOR ( 1 ,:) = PD_FLOOR ( 1 ,:) ! depth of floor layers             (m) ! ! HVAC parameters ! B % XTCOOL_TARGET = PTCOOL_TARGET ! cooling setpoint of indoor air B % XTHEAT_TARGET = PTHEAT_TARGET ! heating setpoint of indoor air B % XF_WASTE_CAN = PF_WASTE_CAN ! fraction of waste heat released into the canyon B % XEFF_HEAT = PEFF_HEAT ! efficiency of the heating system ! ! Indoor parameters ! B % XTI_BLD = PTI_BLD ! building interior temperature    (K) B % XT_FLOOR ( 1 ,:) = PT_FLOOR ( 1 ,:) ! floor layer temperatures         (K) B % XT_MASS ( 1 ,:) = PT_MASS ( 1 ,:) ! Air cooled building internal th. mass temperature (K) ! B % XQIN = PQIN ! internal heat gains [W m-2(floor)] B % XQIN_FRAD = PQIN_FRAD ! radiant fraction of internal heat gains B % XSHGC = PSHGC ! solar heat gain coef. of windows B % XSHGC_SH = PSHGC_SH ! solar heat gain coef. of windows + shading B % XTRAN_WIN = PTRAN_WIN ! window transmittance (-) B % XGR = PGR ! glazing ratio B % XINF = PINF ! infiltration/ventilation flow rate [AC/H] ! ! New parameters ! B % XF_WATER_COND = PF_WATER_COND ! fraction of evaporation for condensers (cooling system) B % XAUX_MAX = PAUX_MAX ! Auxiliar variable for autosize calcs B % XQIN_FLAT = PQIN_FLAT ! Latent franction of internal heat gains B % XHR_TARGET = PHR_TARGET ! Relative humidity setpoint B % XT_WIN2 = PT_WIN2 ! Indoor window temperature [K] B % XQI_BLD = PQI_BLD ! Indoor air specific humidity [kg kg-1] B % XV_VENT = PV_VENT ! Ventilation flow rate [AC/H] B % XCAP_SYS_HEAT = PCAP_SYS_HEAT ! Capacity of the heating system ! [W m-2(bld)] B % XCAP_SYS_RAT = PCAP_SYS_RAT ! Rated capacity of the cooling system ! [W m-2(bld)] B % XT_ADP = PT_ADP ! Apparatus dewpoint temperature of the ! cooling coil [K] B % XM_SYS_RAT = PM_SYS_RAT ! Rated HVAC mass flow rate ! [kg s-1 m-2(bld)] B % XCOP_RAT = PCOP_RAT ! Rated COP of the cooling system B % XT_WIN1 = PT_WIN1 ! outdoor window temperature [K] B % XABS_WIN = PABS_WIN ! window absortance B % XUGG_WIN = PUGG_WIN ! Window glass-to-glass U-factor [K m W-2] B % LSHADE = OSHADE ! flag to activate shading devices -> LOGICAL in the code B % XSHADE = PSHADE ! flag to activate shading devices -> REAL for i/o 0. or 1. B % CNATVENT = HNATVENT ! flag to activate natural ventilation 'NONE', 'MANU', 'AUTO' B % XNATVENT = PNATVENT ! flag to describe surventilation system for i/o ! 0 for NONE, 1 for MANU and 2 for AUTO B % LSHAD_DAY = OSHAD_DAY !Has shading been necessary this day ? B % LNATVENT_NIGHT = ONATVENT_NIGHT !Has nocturnal surventilation been necessary and possible this night ? ! !indoor relative surfaces and view factors B % XN_FLOOR = PN_FLOOR ! Number of floors B % XGLAZ_O_BLD = PGLAZ_O_BLD ! Window area [m2_win/m2_bld] B % XMASS_O_BLD = PMASS_O_BLD ! Mass area [m2_mass/m2_bld] B % XFLOOR_HW_RATIO = PFLOOR_HW_RATIO ! H/W ratio of 1 floor level B % XF_FLOOR_MASS = PF_FLOOR_MASS ! View factor floor-mass B % XF_FLOOR_WALL = PF_FLOOR_WALL ! View factor floor-wall B % XF_FLOOR_WIN = PF_FLOOR_WIN ! View factor floor-window B % XF_FLOOR_ROOF = PF_FLOOR_ROOF ! View factor floor-roof B % XF_WALL_FLOOR = PF_WALL_FLOOR ! View factor wall-floor B % XF_WALL_MASS = PF_WALL_MASS ! View factor wall-mass B % XF_WALL_WIN = PF_WALL_WIN ! View factor wall-win B % XF_WIN_FLOOR = PF_WIN_FLOOR ! View factor win-floor B % XF_WIN_MASS = PF_WIN_MASS ! View factor win-mass B % XF_WIN_WALL = PF_WIN_WALL ! View factor win-wall B % XF_WIN_WIN = PF_WIN_WIN ! indoor View factor win-win B % XF_MASS_FLOOR = PF_MASS_FLOOR ! View factor mass-floor B % XF_MASS_WALL = PF_MASS_WALL ! View factor mass-wall B % XF_MASS_WIN = PF_MASS_WIN ! View factor mass-window !------------------------------------------------------------------------------- ! ! TEB OPTIONS structure ! TOP % LGARDEN = OGARDEN ! T: Urban green areas (call ISBA from TEB) ! F: No urban green areas TOP % CROAD_DIR = HROAD_DIR ! TEB option for road directions ! 'UNIF' : no specific direction ! 'ORIE' : many road ORIEntations ! ( one per TEB patch) TOP % CWALL_OPT = HWALL_OPT ! TEB option for walls ! 'UNIF' : uniform walls ! 'TWO ' : two separated walls TOP % CZ0H = HZ0H ! TEB option for z0h roof & road ! 'MASC95' : Mascart et al 1995 ! 'BRUT82' : Brustaert     1982 ! 'KAND07' : Kanda         2007 TOP % CCH_BEM = HCH_BEM ! BEM option for roof/wall outside convective coefficient ! 'DOE-2' : DOE-2 model from ! EnergyPlus Engineering reference, p65 TOP % CBEM = HBEM ! TEB option for the building energy model ! 'DEF':  DEFault version force-restore model from Masson et al. 2002 ! 'BEM':  Building Energy Model Bueno et al. 2011 TOP % LGREENROOF = OGREENROOF ! T: green roofs (call ISBA from TEB) TOP % LSOLAR_PANEL = OSOLAR_PANEL ! T: solar panels on roofs ! ! type of initialization of vegetation: from cover types (ecoclimap) or parameters prescribed ! ! ! Number of layers ! TOP % NROOF_LAYER = SIZE ( PT_ROOF , 2 ) ! number of layers in roofs TOP % NROAD_LAYER = SIZE ( PT_ROAD , 2 ) ! number of layers in roads TOP % NWALL_LAYER = SIZE ( PT_WALL_A , 2 ) ! number of layers in walls ! ! Date: ! TOP % TTIME = TPTIME ! current date and time ! ! Time-step: ! TOP % XTSTEP = PTSTEP ! time step for TEB ! !------------------------------------------------------------------------------- ! ! TEB structure ! ! Geometric Parameters: ! T % XROAD_DIR = PROAD_DIR ! Road direction (deg from North, clockwise) T % XGARDEN = PGARDEN ! fraction of veg in the streets   (-) T % XGREENROOF = PFRAC_GR ! fraction of greenroofs on roofs  (-) T % XBLD = PBLD ! fraction of buildings            (-) T % XROAD = PROAD ! fraction of roads                (-) T % XCAN_HW_RATIO = PCAN_HW_RATIO ! canyon    h/W                    (-) T % XBLD_HEIGHT = PBLD_HEIGHT ! buildings height 'h'             (m) T % XWALL_O_HOR = PWALL_O_HOR ! wall surf. / hor. surf.          (-) T % XROAD_O_GRND = PROAD_O_GRND ! road surf. / (road + garden surf.) (-) T % XGARDEN_O_GRND = PGARDEN_O_GRND ! gard. surf. / (road + garden surf.)(-) T % XWALL_O_GRND = PWALL_O_GRND ! wall surf. / (road + garden surf.) (-) T % XWALL_O_BLD = PWALL_O_BLD ! wall surf. / bld surf. (-) T % XZ0_TOWN = PZ0_TOWN ! roughness length for momentum    (m) T % XSVF_ROAD = PSVF_ROAD ! road sky view factor             (-) T % XSVF_GARDEN = PSVF_GARDEN ! green area sky view factor       (-) T % XSVF_WALL = PSVF_WALL ! wall sky view factor             (-) ! ! Roof parameters ! T % XALB_ROOF = PALB_ROOF ! roof albedo                      (-) T % XEMIS_ROOF = PEMIS_ROOF ! roof emissivity                  (-) T % XHC_ROOF = PHC_ROOF ! roof layers heat capacity        (J/K/m3) T % XTC_ROOF = PTC_ROOF ! roof layers thermal conductivity (W/K/m) T % XD_ROOF = PD_ROOF ! depth of roof layers             (m) T % XROUGH_ROOF = PROUGH_ROOF ! roof roughness coef ! ! ! Road parameters ! T % XALB_ROAD = PALB_ROAD ! road albedo                      (-) T % XEMIS_ROAD = PEMIS_ROAD ! road emissivity                  (-) T % XHC_ROAD = PHC_ROAD ! road layers heat capacity        (J/K/m3) T % XTC_ROAD = PTC_ROAD ! road layers thermal conductivity (W/K/m) T % XD_ROAD = PD_ROAD ! depth of road layers             (m) ! ! Wall parameters ! T % XALB_WALL = PALB_WALL ! wall albedo                      (-) T % XEMIS_WALL = PEMIS_WALL ! wall emissivity                  (-) T % XHC_WALL = PHC_WALL ! wall layers heat capacity        (J/K/m3) T % XTC_WALL = PTC_WALL ! wall layers thermal conductivity (W/K/m) T % XD_WALL = PD_WALL ! depth of wall layers             (m) T % XROUGH_WALL = PROUGH_WALL ! wall roughness coef ! ! Building's use type ! T % XRESIDENTIAL = PRESIDENTIAL ! fraction of Residential use      (-) T % XDT_RES = PDT_RES ! target temperature change when unoccupied (K) (residential buildings) T % XDT_OFF = PDT_OFF ! target temperature change when unoccupied (K) (offices buildings) ! ! anthropogenic fluxes ! T % XH_TRAFFIC = PH_TRAFFIC ! anthropogenic sensible !                             ! heat fluxes due to traffic       (W/m2) T % XLE_TRAFFIC = PLE_TRAFFIC ! anthropogenic latent !                             ! heat fluxes due to traffic       (W/m2) T % XH_INDUSTRY = PH_INDUSTRY ! anthropogenic sensible !                             ! heat fluxes due to factories     (W/m2) T % XLE_INDUSTRY = PLE_INDUSTRY ! anthropogenic latent !                             ! heat fluxes due to factories     (W/m2) ! ! Prognostic variables: ! T % XWS_ROOF = PWS_ROOF ! roof water reservoir             (kg/m2) T % XWS_ROAD = PWS_ROAD ! road water reservoir             (kg/m2) T % XT_ROOF = PT_ROOF ! roof layer temperatures          (K) T % XT_ROAD = PT_ROAD ! road layer temperatures          (K) T % XT_WALL_A = PT_WALL_A ! wall layer temperatures          (K) T % XT_WALL_B = PT_WALL_B ! wall layer temperatures          (K) ! ! ! ! Semi-prognostic variables: ! T % XT_CANYON = PT_CAN ! canyon air temperature           (K) T % XQ_CANYON = PQ_CAN ! canyon air specific humidity     (kg/kg) ! ! ! Prognostic snow on roofs: ! T % TSNOW_ROOF % SCHEME = HSNOW_ROOF ! snow scheme T % TSNOW_ROOF % WSNOW = PWSNOW_ROOF ! snow (& liq. water) content      (kg/m2) T % TSNOW_ROOF % T = PTSNOW_ROOF ! temperature                      (K) T % TSNOW_ROOF % RHO = PRSNOW_ROOF ! density                          (kg m-3) T % TSNOW_ROOF % ALB = PASNOW_ROOF ! albedo                           (-) T % TSNOW_ROOF % EMIS = PESNOW_ROOF ! emissivity                       (-) T % TSNOW_ROOF % TS = PTSSNOW_ROOF ! Surface temperature              (K) ! ! Prognostic snow on roads: ! T % TSNOW_ROAD % SCHEME = HSNOW_ROAD ! snow scheme T % TSNOW_ROAD % WSNOW = PWSNOW_ROAD ! snow (& liq. water) content      (kg/m2) T % TSNOW_ROAD % T = PTSNOW_ROAD ! temperature                      (K) T % TSNOW_ROAD % RHO = PRSNOW_ROAD ! density                          (kg m-3) T % TSNOW_ROAD % ALB = PASNOW_ROAD ! albedo                           (-) T % TSNOW_ROAD % EMIS = PESNOW_ROAD ! emissivity                       (-) T % TSNOW_ROAD % TS = PTSSNOW_ROAD ! Surface temperature              (K) !------------------------------------------------------------------------------- ! ! solar panels ! TPN % XEMIS_PANEL = PEMIS_PANEL ! emissivity of solar panels               (-) TPN % XALB_PANEL = PALB_PANEL ! albedo of soolar panels                  (-) TPN % XEFF_PANEL = PEFF_PANEL ! Efficiency coefficient of solar panels   (-) TPN % XFRAC_PANEL = PFRAC_PANEL ! Fraction of SOLAR panels on roofs        (-) TPN % XTHER_PRODC_DAY = PTHER_PRODC_DAY ! Present day integrated thermal production of energy    (J/m2 panel) !------------------------------------------------------------------------------- ! ! Irrigation ! TIR % LPAR_RD_IRRIG = OPAR_RD_IRRIG ! flag to use prescribed irrigation for roads TIR % XRD_START_MONTH = PRD_START_MONTH ! roads : start month for irrigation (included) TIR % XRD_END_MONTH = PRD_END_MONTH ! roads : end   month for irrigation (included) TIR % XRD_START_HOUR = PRD_START_HOUR ! roads : start solar hour for irrigation (included, hour) TIR % XRD_END_HOUR = PRD_END_HOUR ! roads : end   solar hour for irrigation (excluded, hour) TIR % XRD_24H_IRRIG = PRD_24H_IRRIG ! roads : total irrigation over 24 hours (kg/m2) ! !------------------------------------------------------------------------------- ! ! TEB diagnostics structure ! DMT % XZ0_TOWN = PZ0_TOWN ! town roughness length !------------------------------------------------------------------------------- ! if ( debug ) then ! TODO remove when not needed anymore inquire ( file = \"trace_before.csv\" , exist = exist ) if ( exist ) then open ( 12 , file = \"trace_before.csv\" , status = \"old\" , position = \"append\" , action = \"write\" ) else open ( 12 , file = \"trace_before.csv\" , status = \"new\" , action = \"write\" ) end if write ( 12 , * ) PTSUN , PT_CAN , PQ_CAN , PU_CAN , PT_LOWCAN , PQ_LOWCAN , & PU_LOWCAN , PZ_LOWCAN , PPEW_A_COEF , PPEW_B_COEF , PPEW_A_COEF_LOWCAN , & PPEW_B_COEF_LOWCAN , PPS , PPA , PEXNS , PEXNA , PTA , PQA , PRHOA , PCO2 , & PLW_RAD , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , PZENITH , PAZIM , PRR , PSR , & PZREF , PUREF , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , PTSTEP , PLEW_ROOF , PLEW_ROAD , & PLE_WALL_A , PLE_WALL_B , PRNSNOW_ROOF , PHSNOW_ROOF , PLESNOW_ROOF , PGSNOW_ROOF , PMELT_ROOF ,& PRNSNOW_ROAD , PHSNOW_ROAD , PLESNOW_ROAD , PGSNOW_ROAD , PMELT_ROAD , PRN_GRND , PH_GRND , & PLE_GRND , PGFLUX_GRND , PRN_TOWN , PH_TOWN , PLE_TOWN , PGFLUX_TOWN , PEVAP_TOWN , & PSFCO2 , PUW_GRND , PUW_ROOF , PDUWDU_GRND , PDUWDU_ROOF , & PUSTAR_TOWN , PCD , PCDN , PCH_TOWN , PRI_TOWN , PTS_TOWN , PEMIS_TOWN , & PDIR_ALB_TOWN , PSCA_ALB_TOWN , PRESA_TOWN , PAC_ROAD , PAC_GARDEN , PAC_GREENROOF , & PAC_ROAD_WAT , PAC_GARDEN_WAT , PAC_GREENROOF_WAT , KDAY , PEMIT_LW_FAC , PEMIT_LW_GRND , & PT_RAD_IND , PREF_SW_GRND , PREF_SW_FAC , PHU_BLD , PTIME , PPROD_BLD close ( 12 ) end if KTEB_P = 1 CALL TEB_GARDEN ( DTCO , G , TOP , T , BOP , B , TPN , TIR , DMT , GDM , GRM , KTEB_P , & HIMPLICIT_WIND , PTSUN , PT_CAN , PQ_CAN , PU_CAN , PT_LOWCAN , PQ_LOWCAN , & PU_LOWCAN , PZ_LOWCAN , PPEW_A_COEF , PPEW_B_COEF , PPEW_A_COEF_LOWCAN , & PPEW_B_COEF_LOWCAN , PPS , PPA , PEXNS , PEXNA , PTA , PQA , PRHOA , PCO2 , & PLW_RAD , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , PZENITH , PAZIM , PRR , PSR , & PZREF , PUREF , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , PTSTEP , PLEW_ROOF , PLEW_ROAD , & PLE_WALL_A , PLE_WALL_B , PRNSNOW_ROOF , PHSNOW_ROOF , PLESNOW_ROOF , PGSNOW_ROOF , PMELT_ROOF ,& PRNSNOW_ROAD , PHSNOW_ROAD , PLESNOW_ROAD , PGSNOW_ROAD , PMELT_ROAD , PRN_GRND , PH_GRND , & PLE_GRND , PGFLUX_GRND , PRN_TOWN , PH_TOWN , PLE_TOWN , PGFLUX_TOWN , PEVAP_TOWN , & PSFCO2 , PUW_GRND , PUW_ROOF , PDUWDU_GRND , PDUWDU_ROOF , & PUSTAR_TOWN , PCD , PCDN , PCH_TOWN , PRI_TOWN , PTS_TOWN , PEMIS_TOWN , & PDIR_ALB_TOWN , PSCA_ALB_TOWN , PRESA_TOWN , PAC_ROAD , PAC_GARDEN , PAC_GREENROOF , & PAC_ROAD_WAT , PAC_GARDEN_WAT , PAC_GREENROOF_WAT , KDAY , PEMIT_LW_FAC , PEMIT_LW_GRND , & PT_RAD_IND , PREF_SW_GRND , PREF_SW_FAC , PHU_BLD , PTIME , PPROD_BLD ) if ( debug ) then ! TODO remove when not needed anymore inquire ( file = \"trace_after.csv\" , exist = exist ) if ( exist ) then open ( 12 , file = \"trace_after.csv\" , status = \"old\" , position = \"append\" , action = \"write\" ) else open ( 12 , file = \"trace_after.csv\" , status = \"new\" , action = \"write\" ) end if write ( 12 , * ) PTSUN , PT_CAN , PQ_CAN , PU_CAN , PT_LOWCAN , PQ_LOWCAN , & PU_LOWCAN , PZ_LOWCAN , PPEW_A_COEF , PPEW_B_COEF , PPEW_A_COEF_LOWCAN , & PPEW_B_COEF_LOWCAN , PPS , PPA , PEXNS , PEXNA , PTA , PQA , PRHOA , PCO2 , & PLW_RAD , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , PZENITH , PAZIM , PRR , PSR , & PZREF , PUREF , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , PTSTEP , PLEW_ROOF , PLEW_ROAD , & PLE_WALL_A , PLE_WALL_B , PRNSNOW_ROOF , PHSNOW_ROOF , PLESNOW_ROOF , PGSNOW_ROOF , PMELT_ROOF ,& PRNSNOW_ROAD , PHSNOW_ROAD , PLESNOW_ROAD , PGSNOW_ROAD , PMELT_ROAD , PRN_GRND , PH_GRND , & PLE_GRND , PGFLUX_GRND , PRN_TOWN , PH_TOWN , PLE_TOWN , PGFLUX_TOWN , PEVAP_TOWN , & PSFCO2 , PUW_GRND , PUW_ROOF , PDUWDU_GRND , PDUWDU_ROOF , & PUSTAR_TOWN , PCD , PCDN , PCH_TOWN , PRI_TOWN , PTS_TOWN , PEMIS_TOWN , & PDIR_ALB_TOWN , PSCA_ALB_TOWN , PRESA_TOWN , PAC_ROAD , PAC_GARDEN , PAC_GREENROOF , & PAC_ROAD_WAT , PAC_GARDEN_WAT , PAC_GREENROOF_WAT , KDAY , PEMIT_LW_FAC , PEMIT_LW_GRND , & PT_RAD_IND , PREF_SW_GRND , PREF_SW_FAC , PHU_BLD , PTIME , PPROD_BLD close ( 12 ) end if ! !------------------------------------------------------------------------------- ! ! update of BEM prognostic variables ! PTI_BLD = B % XTI_BLD PQI_BLD = B % XQI_BLD PT_FLOOR = B % XT_FLOOR PT_MASS = B % XT_MASS PT_WIN1 = B % XT_WIN1 PT_WIN2 = B % XT_WIN2 ! PAUX_MAX = B % XAUX_MAX PCAP_SYS_RAT = B % XCAP_SYS_RAT PM_SYS_RAT = B % XM_SYS_RAT ! PALB_WIN = B % XALB_WIN ! window albedo ! OSHAD_DAY = B % LSHAD_DAY ONATVENT_NIGHT = B % LNATVENT_NIGHT ! ! update of TEB prognostic variables ! PT_ROOF = T % XT_ROOF PT_ROAD = T % XT_ROAD PT_WALL_A = T % XT_WALL_A PT_WALL_B = T % XT_WALL_B PWS_ROOF = T % XWS_ROOF PWS_ROAD = T % XWS_ROAD ! PWSNOW_ROOF = T % TSNOW_ROOF % WSNOW PTSNOW_ROOF = T % TSNOW_ROOF % T PRSNOW_ROOF = T % TSNOW_ROOF % RHO PASNOW_ROOF = T % TSNOW_ROOF % ALB PESNOW_ROOF = T % TSNOW_ROOF % EMIS PTSSNOW_ROOF = T % TSNOW_ROOF % TS ! PWSNOW_ROAD = T % TSNOW_ROAD % WSNOW PTSNOW_ROAD = T % TSNOW_ROAD % T PRSNOW_ROAD = T % TSNOW_ROAD % RHO PASNOW_ROAD = T % TSNOW_ROAD % ALB PESNOW_ROAD = T % TSNOW_ROAD % EMIS PTSSNOW_ROAD = T % TSNOW_ROAD % TS ! ! Warning: Can temperature and humidity, XT_CANYON and XQ_CANYON are present in the structure, but !          are not updated in teb_garden and routines called by it. This is the PT_CAN and PQ_CAN !          arguments of teb_garden routines that are physically updated. !          So we update the variables in the structure, but this has no consequences, because !          these variables are not used in teb_garden. ! T % XT_CANYON = PT_CAN T % XQ_CANYON = PQ_CAN ! !------------------------------------------------------------------------------- ! ! output diagnostics in TEB structure ! !------------------------------------------------------------------------------- ! ! solar panels ! PTHER_PRODC_DAY = TPN % XTHER_PRODC_DAY ! Present day integrated thermal production of energy    (J/m2 panel) ! !------------------------------------------------------------------------------- ! ! TEB diagnostics structure ! PQF_BLD = DMT % XQF_BLD ! domestic heating PFLX_BLD = DMT % XFLX_BLD ! heat flux from bld PQF_TOWN = DMT % XQF_TOWN ! total anthropogenic heat PDQS_TOWN = DMT % XDQS_TOWN ! storage inside building ! PH_WALL_A = DMT % XH_WALL_A ! wall sensible heat flux          (W/m2) PH_WALL_B = DMT % XH_WALL_B ! wall sensible heat flux          (W/m2) PH_ROOF = DMT % XH_ROOF ! roof sensible heat flux          (W/m2) PH_ROAD = DMT % XH_ROAD ! road sensible heat flux          (W/m2) PH_STRLROOF = DMT % XH_STRLROOF ! structural roof sens. heat flux  (W/m2) PH_BLT = DMT % XH_BLT ! built surf sensible heat flux    (W/m2) PRN_WALL_A = DMT % XRN_WALL_A ! net radiation at wall            (W/m2) PRN_WALL_B = DMT % XRN_WALL_B ! net radiation at wall            (W/m2) PRN_ROOF = DMT % XRN_ROOF ! net radiation at roof            (W/m2) PRN_ROAD = DMT % XRN_ROAD ! net radiation at road            (W/m2) PRN_STRLROOF = DMT % XRN_STRLROOF !net radiation at structural roofs(W/m2) PRN_BLT = DMT % XRN_BLT ! net radiation at built surf      (W/m2) PGFLUX_WALL_A = DMT % XGFLUX_WALL_A !net wall conduction flux        (W/m2) PGFLUX_WALL_B = DMT % XGFLUX_WALL_B !net wall conduction flux        (W/m2) PGFLUX_ROOF = DMT % XGFLUX_ROOF ! net roof conduction flux         (W/m2) PGFLUX_ROAD = DMT % XGFLUX_ROAD ! net road conduction flux         (W/m2) PGFLUX_STRLROOF = DMT % XGFLUX_STRLROOF !net structural roof cond flux (W/m2) PGFLUX_BLT = DMT % XGFLUX_BLT ! net built surf conduction flux   (W/m2) PLE_ROOF = DMT % XLE_ROOF ! roof latent heat flux            (W/m2) PLE_ROAD = DMT % XLE_ROAD ! road latent heat flux            (W/m2) PLE_STRLROOF = DMT % XLE_STRLROOF !structural roof latent heat flux (W/m2) PLE_BLT = DMT % XLE_BLT ! built surf latent heat flux      (W/m2) ! PRUNOFF_TOWN = DMT % XRUNOFF_TOWN ! aggregated water runoff for town      (kg/m2/s) PRUNOFF_ROAD = DMT % XRUNOFF_ROAD ! water runoff for roads                (kg/m2/s) PIRRIG_ROAD = DMT % XIRRIG_ROAD ! road man-made watering rate           (kg/m2/s) PRUNOFF_ROOF = DMT % XRUNOFF_ROOF ! aggregated water runoff for roofs     (kg/m2/s) PRUNOFF_STRLROOF = DMT % XRUNOFF_STRLROOF ! water runoff for structural roofs     (kg/m2/s) ! PABS_SW_ROOF = DMT % XABS_SW_ROOF ! absorbed shortwave radiation over roofs PABS_SW_SNOW_ROOF = DMT % XABS_SW_SNOW_ROOF ! absorbed longwave radiation over roofs PABS_LW_ROOF = DMT % XABS_LW_ROOF ! absorbed shortwave radiation over roofs PABS_LW_SNOW_ROOF = DMT % XABS_LW_SNOW_ROOF ! absorbed longwave radiation over roofs PABS_SW_ROAD = DMT % XABS_SW_ROAD ! absorbed shortwave radiation over roads PABS_SW_SNOW_ROAD = DMT % XABS_SW_SNOW_ROAD ! absorbed longwave radiation over roads PABS_LW_ROAD = DMT % XABS_LW_ROAD ! absorbed shortwave radiation over roads PABS_LW_SNOW_ROAD = DMT % XABS_LW_SNOW_ROAD ! absorbed longwave radiation over roads PABS_SW_WALL_A = DMT % XABS_SW_WALL_A ! absorbed shortwave radiation over walls PABS_SW_WALL_B = DMT % XABS_SW_WALL_B ! absorbed shortwave radiation over walls PABS_LW_WALL_A = DMT % XABS_LW_WALL_A ! absorbed shortwave radiation over walls PABS_LW_WALL_B = DMT % XABS_LW_WALL_B ! absorbed shortwave radiation over walls PABS_SW_GARDEN = DMT % XABS_SW_GARDEN ! absorbed shortwave radiation over green areas PABS_LW_GARDEN = DMT % XABS_LW_GARDEN ! absorbed shortwave radiation over green areas PABS_SW_GREENROOF = DMT % XABS_SW_GREENROOF ! absorbed shortwave radiation over green roofs PABS_LW_GREENROOF = DMT % XABS_LW_GREENROOF ! absorbed shortwave radiation over green roofs PG_GREENROOF_ROOF = DMT % XG_GREENROOF_ROOF ! Heat flux between green roof and structural roof PABS_SW_PANEL = DMT % XABS_SW_PANEL ! absorbed shortwave radiation over solar panels PABS_LW_PANEL = DMT % XABS_LW_PANEL ! absorbed longwave  radiation over solar panels ! PRN_PANEL = DMT % XRN_PANEL ! net radiation           over solar panels (W/m2) PH_PANEL = DMT % XH_PANEL ! sensible heat flux      over solar panels (W/m2) PTHER_PROD_PANEL = DMT % XTHER_PROD_PANEL ! thermal      production of   solar panels (W/m2 thermal panel) PPHOT_PROD_PANEL = DMT % XPHOT_PROD_PANEL ! photovoltaic production of   solar panels (W/m2 photovoltaic panel) PPROD_PANEL = DMT % XPROD_PANEL !              production of   solar panels (W/m2 panel) PTHER_PROD_BLD = DMT % XTHER_PROD_BLD ! thermal      production of   solar panels (W/m2 bld) PPHOT_PROD_BLD = DMT % XPHOT_PROD_BLD ! photovoltaic production of   solar panels (W/m2 bld) PH_BLD_COOL = DMT % XH_BLD_COOL ! Sensible cooling energy demand ! of the building [W m-2(bld)] PT_BLD_COOL = DMT % XT_BLD_COOL ! Total cooling energy demand ! of the building [W m-2(bld)] PH_BLD_HEAT = DMT % XH_BLD_HEAT ! Heating energy demand ! of the building [W m-2(bld)] PLE_BLD_COOL = DMT % XLE_BLD_COOL ! Latent cooling energy demand ! of the building [W m-2(bld)] PLE_BLD_HEAT = DMT % XLE_BLD_HEAT ! Latent heating energy demand ! of the building [W m-2(bld)] PH_WASTE = DMT % XH_WASTE ! Sensible waste heat from HVAC system ! [W m-2(tot)] PLE_WASTE = DMT % XLE_WASTE ! Latent waste heat from HVAC system ! [W m-2(tot)] PHVAC_COOL = DMT % XHVAC_COOL ! Energy consumption of the cooling system ! [W m-2(bld)] PHVAC_HEAT = DMT % XHVAC_HEAT ! Energy consumption of the heating system ! [W m-2(bld)] PCAP_SYS = DMT % XCAP_SYS ! Actual capacity of the cooling system ! [W m-2(bld)] PM_SYS = DMT % XM_SYS ! Actual HVAC mass flow rate ! [kg s-1 m-2(bld)] PCOP = DMT % XCOP ! COP of the cooling system PQ_SYS = DMT % XQ_SYS ! Supply air specific humidity [kg kg-1] PT_SYS = DMT % XT_SYS ! Supply air temperature [K] PTR_SW_WIN = DMT % XTR_SW_WIN ! Solar radiation transmitted throught ! windows [W m-2(bld)] PFAN_POWER = DMT % XFAN_POWER ! HVAC fan power PABS_SW_WIN = DMT % XABS_SW_WIN ! window absorbed shortwave radiation [W m-2] PABS_LW_WIN = DMT % XABS_LW_WIN ! absorbed infrared rad. [W m-2] PCUR_TCOOL_TARGET = DMT % XTCOOL_TARGET ! Cooling target temperature at current time (K) PCUR_THEAT_TARGET = DMT % XTHEAT_TARGET ! Heating target temperature at current time (K) PCUR_QIN = DMT % XQIN ! Internal heat gains        at current time (W/m2 floor) ! !------------------------------------------------------------------------------- ! CALL DEALLOC_TEB_STRUCT ( TOP , T , BOP , B , TPN , TIR , DMT , GDM , GRM ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE TEB_GARDEN_STRUCT","tags":"","loc":"sourcefile/teb_garden_struct.f90.html"},{"title":"modi_alloc_teb_struct.F90 – Town Energy Balance (TEB) model API docs","text":"Contents Modules MODI_ALLOC_TEB_STRUCT Source Code modi_alloc_teb_struct.F90 Source Code !SFX_LIC Copyright 1994-2014 CNRS, Meteo-France and Universite Paul Sabatier !SFX_LIC This is part of the SURFEX software governed by the CeCILL licence !SFX_LIC version 2.1. See Licence_CeCILL_V2.1-en.txt and Licence_CeCILL_V2.1-fr.txt !SFX_LIC for details. MODULE MODI_ALLOC_TEB_STRUCT ! INTERFACE ! !   ########################################################################## SUBROUTINE ALLOC_TEB_STRUCT ( KROOF_LAYER , KROAD_LAYER , KWALL_LAYER , KFLOOR_LAYER ,& DTCO , G , TOP , T , BOP , B , TPN , TIR , DMT , GDM , GRM ) !   ########################################################################## ! !!****  *ALLOC_TEB_STRUCT* !! !!    PURPOSE !!    ------- ! !       To allocate all the structures used in Teb_garden and subsequent routines. ! !!**  METHOD !     ------ ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!    Original    03/2018 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_DATA_COVER_n , ONLY : DATA_COVER_t , DATA_COVER_INIT USE MODD_SFX_GRID_n , ONLY : GRID_t , GRID_INIT USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t , TEB_OPTIONS_INIT USE MODD_TEB_n , ONLY : TEB_t , TEB_INIT USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t , BEM_OPTIONS_INIT USE MODD_BEM_n , ONLY : BEM_t , BEM_INIT USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t , TEB_PANEL_INIT USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t , TEB_IRRIG_INIT USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t , DIAG_MISC_TEB_INIT USE MODD_SURFEX_n , ONLY : TEB_GARDEN_MODEL_t USE MODD_SURFEX_n , ONLY : TEB_GREENROOF_MODEL_t ! ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! ! ! ! INTEGER , INTENT ( IN ) :: KROOF_LAYER ! number of roof layers INTEGER , INTENT ( IN ) :: KROAD_LAYER ! number of road layers INTEGER , INTENT ( IN ) :: KWALL_LAYER ! number of wall layers INTEGER , INTENT ( IN ) :: KFLOOR_LAYER ! number of floor layers TYPE ( DATA_COVER_t ), INTENT ( INOUT ) :: DTCO TYPE ( GRID_t ), INTENT ( INOUT ) :: G TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_OPTIONS_t ), INTENT ( INOUT ) :: BOP TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_PANEL_t ), INTENT ( INOUT ) :: TPN TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT TYPE ( TEB_GARDEN_MODEL_t ), INTENT ( INOUT ) :: GDM TYPE ( TEB_GREENROOF_MODEL_t ), INTENT ( INOUT ) :: GRM ! END SUBROUTINE ALLOC_TEB_STRUCT ! END INTERFACE ! END MODULE MODI_ALLOC_TEB_STRUCT","tags":"","loc":"sourcefile/modi_alloc_teb_struct.f90.html"},{"title":"CH_TEB_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: CH_TEB_t Contents Variables CCHEM_SURF_FILE CCH_DRY_DEP XDEP XSOILRC_SO2 XSOILRC_O3 LCH_BIO_FLUX LCH_NO_FLUX SVT CCH_NAMES CAER_NAMES CDSTNAMES CSLTNAMES Source Code CH_TEB_t Components Type Visibility Attributes Name Initial character(len=28), public :: CCHEM_SURF_FILE character(len=6), public :: CCH_DRY_DEP real, public, DIMENSION(:,:), POINTER :: XDEP real, public, DIMENSION(:,:), POINTER :: XSOILRC_SO2 real, public, DIMENSION(:,:), POINTER :: XSOILRC_O3 logical, public :: LCH_BIO_FLUX logical, public :: LCH_NO_FLUX type(SV_t), public :: SVT character(len=6), public, DIMENSION(:), POINTER :: CCH_NAMES character(len=6), public, DIMENSION(:), POINTER :: CAER_NAMES character(len=6), public, DIMENSION(:), POINTER :: CDSTNAMES character(len=6), public, DIMENSION(:), POINTER :: CSLTNAMES Source Code TYPE CH_TEB_t ! CHARACTER ( LEN = 28 ) :: CCHEM_SURF_FILE ! name of general (chemical) purpose ASCII input file CHARACTER ( LEN = 6 ) :: CCH_DRY_DEP !  deposition scheme REAL , DIMENSION (:,:), POINTER :: XDEP ! final dry deposition ! velocity  for nature REAL , DIMENSION (:,:), POINTER :: XSOILRC_SO2 ! for SO2 REAL , DIMENSION (:,:), POINTER :: XSOILRC_O3 ! for O3 LOGICAL :: LCH_BIO_FLUX ! flag for the calculation of ! biogenic fluxes LOGICAL :: LCH_NO_FLUX ! flag for the calculation of ! biogenic NO fluxes TYPE ( SV_t ) :: SVT CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CCH_NAMES ! NAME OF CHEMICAL SPECIES ! (FOR DIAG ONLY) CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CAER_NAMES ! NAME OF CHEMICAL SPECIES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CDSTNAMES ! NAME OF CHEMICAL SPECIES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CSLTNAMES ! NAME OF CHEMICAL SPECIES ! END TYPE CH_TEB_t","tags":"","loc":"type/ch_teb_t.html"},{"title":"DUMMY_SURF_FIELDS_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DUMMY_SURF_FIELDS_t Contents Variables NDUMMY_NBR CDUMMY_AREA CDUMMY_NAME XDUMMY_FIELDS Source Code DUMMY_SURF_FIELDS_t Components Type Visibility Attributes Name Initial integer, public :: NDUMMY_NBR character(len=3), public, DIMENSION(:), POINTER :: CDUMMY_AREA character(len=20), public, DIMENSION(:), POINTER :: CDUMMY_NAME real, public, DIMENSION(:,:), POINTER :: XDUMMY_FIELDS Source Code TYPE DUMMY_SURF_FIELDS_t ! INTEGER :: NDUMMY_NBR !                          ! number of dummy pgd fields chosen by user CHARACTER ( LEN = 3 ) , DIMENSION (:), POINTER :: CDUMMY_AREA !                          ! areas where dummy pgd fields are defined !                          ! 'ALL' : everywhere !                          ! 'SEA' : where sea exists !                          ! 'LAN' : where land exists !                          ! 'WAT' : where inland water exists !                          ! 'NAT' : where natural or agricultural areas exist !                          ! 'TWN' : where town areas exist !                          ! 'STR' : where streets are present !                          ! 'BLD' : where buildings are present !                          ! CHARACTER ( LEN = 20 ), DIMENSION (:), POINTER :: CDUMMY_NAME !                          ! name of the dummy pgd fields (for information) REAL , DIMENSION (:,:), POINTER :: XDUMMY_FIELDS !                          ! dummy pgd fields themselves ! !------------------------------------------------------------------------------- ! END TYPE DUMMY_SURF_FIELDS_t","tags":"","loc":"type/dummy_surf_fields_t.html"},{"title":"DIAG_MISC_TEB_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DIAG_MISC_TEB_t Contents Variables XZ0_TOWN XQF_BLD XFLX_BLD XQF_TOWN XDQS_TOWN XH_WALL_A XH_WALL_B XH_ROOF XH_ROAD XH_STRLROOF XH_BLT XRN_WALL_A XRN_WALL_B XRN_ROOF XRN_ROAD XRN_STRLROOF XRN_BLT XGFLUX_WALL_A XGFLUX_WALL_B XGFLUX_ROOF XGFLUX_ROAD XGFLUX_STRLROOF XGFLUX_BLT XLE_ROOF XLE_ROAD XLE_STRLROOF XLE_BLT XRUNOFF_TOWN XIRRIG_GARDEN XRUNOFF_ROAD XIRRIG_ROAD XRUNOFF_ROOF XRUNOFF_STRLROOF XIRRIG_GREENROOF XABS_SW_ROOF XABS_SW_SNOW_ROOF XABS_LW_ROOF XABS_LW_SNOW_ROOF XABS_SW_ROAD XABS_SW_SNOW_ROAD XABS_LW_ROAD XABS_LW_SNOW_ROAD XABS_SW_WALL_A XABS_SW_WALL_B XABS_LW_WALL_A XABS_LW_WALL_B XABS_SW_GARDEN XABS_LW_GARDEN XABS_SW_GREENROOF XABS_LW_GREENROOF XG_GREENROOF_ROOF XABS_SW_PANEL XABS_LW_PANEL XRN_PANEL XH_PANEL XTHER_PROD_PANEL XPHOT_PROD_PANEL XPROD_PANEL XTHER_PROD_BLD XPHOT_PROD_BLD XH_BLD_COOL XT_BLD_COOL XH_BLD_HEAT XLE_BLD_COOL XLE_BLD_HEAT XH_WASTE XLE_WASTE XHVAC_COOL XHVAC_HEAT XCAP_SYS XM_SYS XCOP XQ_SYS XT_SYS XTR_SW_WIN XFAN_POWER XABS_SW_WIN XABS_LW_WIN XEMIT_LW_FAC XEMIT_LW_GRND XT_RAD_IND XREF_SW_GRND XREF_SW_FAC XHU_BLD XTCOOL_TARGET XTHEAT_TARGET XQIN Source Code DIAG_MISC_TEB_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:) :: XZ0_TOWN real, public, POINTER, DIMENSION(:) :: XQF_BLD real, public, POINTER, DIMENSION(:) :: XFLX_BLD real, public, POINTER, DIMENSION(:) :: XQF_TOWN real, public, POINTER, DIMENSION(:) :: XDQS_TOWN real, public, POINTER, DIMENSION(:) :: XH_WALL_A real, public, POINTER, DIMENSION(:) :: XH_WALL_B real, public, POINTER, DIMENSION(:) :: XH_ROOF real, public, POINTER, DIMENSION(:) :: XH_ROAD real, public, POINTER, DIMENSION(:) :: XH_STRLROOF real, public, POINTER, DIMENSION(:) :: XH_BLT real, public, POINTER, DIMENSION(:) :: XRN_WALL_A real, public, POINTER, DIMENSION(:) :: XRN_WALL_B real, public, POINTER, DIMENSION(:) :: XRN_ROOF real, public, POINTER, DIMENSION(:) :: XRN_ROAD real, public, POINTER, DIMENSION(:) :: XRN_STRLROOF real, public, POINTER, DIMENSION(:) :: XRN_BLT real, public, POINTER, DIMENSION(:) :: XGFLUX_WALL_A real, public, POINTER, DIMENSION(:) :: XGFLUX_WALL_B real, public, POINTER, DIMENSION(:) :: XGFLUX_ROOF real, public, POINTER, DIMENSION(:) :: XGFLUX_ROAD real, public, POINTER, DIMENSION(:) :: XGFLUX_STRLROOF real, public, POINTER, DIMENSION(:) :: XGFLUX_BLT real, public, POINTER, DIMENSION(:) :: XLE_ROOF real, public, POINTER, DIMENSION(:) :: XLE_ROAD real, public, POINTER, DIMENSION(:) :: XLE_STRLROOF real, public, POINTER, DIMENSION(:) :: XLE_BLT real, public, POINTER, DIMENSION(:) :: XRUNOFF_TOWN real, public, POINTER, DIMENSION(:) :: XIRRIG_GARDEN real, public, POINTER, DIMENSION(:) :: XRUNOFF_ROAD real, public, POINTER, DIMENSION(:) :: XIRRIG_ROAD real, public, POINTER, DIMENSION(:) :: XRUNOFF_ROOF real, public, POINTER, DIMENSION(:) :: XRUNOFF_STRLROOF real, public, POINTER, DIMENSION(:) :: XIRRIG_GREENROOF real, public, POINTER, DIMENSION(:) :: XABS_SW_ROOF real, public, POINTER, DIMENSION(:) :: XABS_SW_SNOW_ROOF real, public, POINTER, DIMENSION(:) :: XABS_LW_ROOF real, public, POINTER, DIMENSION(:) :: XABS_LW_SNOW_ROOF real, public, POINTER, DIMENSION(:) :: XABS_SW_ROAD real, public, POINTER, DIMENSION(:) :: XABS_SW_SNOW_ROAD real, public, POINTER, DIMENSION(:) :: XABS_LW_ROAD real, public, POINTER, DIMENSION(:) :: XABS_LW_SNOW_ROAD real, public, POINTER, DIMENSION(:) :: XABS_SW_WALL_A real, public, POINTER, DIMENSION(:) :: XABS_SW_WALL_B real, public, POINTER, DIMENSION(:) :: XABS_LW_WALL_A real, public, POINTER, DIMENSION(:) :: XABS_LW_WALL_B real, public, POINTER, DIMENSION(:) :: XABS_SW_GARDEN real, public, POINTER, DIMENSION(:) :: XABS_LW_GARDEN real, public, POINTER, DIMENSION(:) :: XABS_SW_GREENROOF real, public, POINTER, DIMENSION(:) :: XABS_LW_GREENROOF real, public, POINTER, DIMENSION(:) :: XG_GREENROOF_ROOF real, public, POINTER, DIMENSION(:) :: XABS_SW_PANEL real, public, POINTER, DIMENSION(:) :: XABS_LW_PANEL real, public, POINTER, DIMENSION(:) :: XRN_PANEL real, public, POINTER, DIMENSION(:) :: XH_PANEL real, public, POINTER, DIMENSION(:) :: XTHER_PROD_PANEL real, public, POINTER, DIMENSION(:) :: XPHOT_PROD_PANEL real, public, POINTER, DIMENSION(:) :: XPROD_PANEL real, public, POINTER, DIMENSION(:) :: XTHER_PROD_BLD real, public, POINTER, DIMENSION(:) :: XPHOT_PROD_BLD real, public, POINTER, DIMENSION(:) :: XH_BLD_COOL real, public, POINTER, DIMENSION(:) :: XT_BLD_COOL real, public, POINTER, DIMENSION(:) :: XH_BLD_HEAT real, public, POINTER, DIMENSION(:) :: XLE_BLD_COOL real, public, POINTER, DIMENSION(:) :: XLE_BLD_HEAT real, public, POINTER, DIMENSION(:) :: XH_WASTE real, public, POINTER, DIMENSION(:) :: XLE_WASTE real, public, POINTER, DIMENSION(:) :: XHVAC_COOL real, public, POINTER, DIMENSION(:) :: XHVAC_HEAT real, public, POINTER, DIMENSION(:) :: XCAP_SYS real, public, POINTER, DIMENSION(:) :: XM_SYS real, public, POINTER, DIMENSION(:) :: XCOP real, public, POINTER, DIMENSION(:) :: XQ_SYS real, public, POINTER, DIMENSION(:) :: XT_SYS real, public, POINTER, DIMENSION(:) :: XTR_SW_WIN real, public, POINTER, DIMENSION(:) :: XFAN_POWER real, public, POINTER, DIMENSION(:) :: XABS_SW_WIN real, public, POINTER, DIMENSION(:) :: XABS_LW_WIN real, public, POINTER, DIMENSION(:) :: XEMIT_LW_FAC real, public, POINTER, DIMENSION(:) :: XEMIT_LW_GRND real, public, POINTER, DIMENSION(:) :: XT_RAD_IND real, public, POINTER, DIMENSION(:) :: XREF_SW_GRND real, public, POINTER, DIMENSION(:) :: XREF_SW_FAC real, public, POINTER, DIMENSION(:) :: XHU_BLD real, public, POINTER, DIMENSION(:) :: XTCOOL_TARGET real, public, POINTER, DIMENSION(:) :: XTHEAT_TARGET real, public, POINTER, DIMENSION(:) :: XQIN Source Code TYPE DIAG_MISC_TEB_t ! !* miscellaneous variables ! REAL , POINTER , DIMENSION (:) :: XZ0_TOWN ! town roughness length REAL , POINTER , DIMENSION (:) :: XQF_BLD ! domestic heating REAL , POINTER , DIMENSION (:) :: XFLX_BLD ! heat flux from bld REAL , POINTER , DIMENSION (:) :: XQF_TOWN ! total anthropogenic heat REAL , POINTER , DIMENSION (:) :: XDQS_TOWN ! storage inside building ! REAL , POINTER , DIMENSION (:) :: XH_WALL_A ! wall sensible heat flux          (W/m2) REAL , POINTER , DIMENSION (:) :: XH_WALL_B ! wall sensible heat flux          (W/m2) REAL , POINTER , DIMENSION (:) :: XH_ROOF ! roof sensible heat flux          (W/m2) REAL , POINTER , DIMENSION (:) :: XH_ROAD ! road sensible heat flux          (W/m2) REAL , POINTER , DIMENSION (:) :: XH_STRLROOF ! structural roof sens. heat flux  (W/m2) REAL , POINTER , DIMENSION (:) :: XH_BLT ! built surf sensible heat flux    (W/m2) REAL , POINTER , DIMENSION (:) :: XRN_WALL_A ! net radiation at wall            (W/m2) REAL , POINTER , DIMENSION (:) :: XRN_WALL_B ! net radiation at wall            (W/m2) REAL , POINTER , DIMENSION (:) :: XRN_ROOF ! net radiation at roof            (W/m2) REAL , POINTER , DIMENSION (:) :: XRN_ROAD ! net radiation at road            (W/m2) REAL , POINTER , DIMENSION (:) :: XRN_STRLROOF !net radiation at structural roofs(W/m2) REAL , POINTER , DIMENSION (:) :: XRN_BLT ! net radiation at built surf      (W/m2) REAL , POINTER , DIMENSION (:) :: XGFLUX_WALL_A !net wall conduction flux        (W/m2) REAL , POINTER , DIMENSION (:) :: XGFLUX_WALL_B !net wall conduction flux        (W/m2) REAL , POINTER , DIMENSION (:) :: XGFLUX_ROOF ! net roof conduction flux         (W/m2) REAL , POINTER , DIMENSION (:) :: XGFLUX_ROAD ! net road conduction flux         (W/m2) REAL , POINTER , DIMENSION (:) :: XGFLUX_STRLROOF !net structural roof cond flux (W/m2) REAL , POINTER , DIMENSION (:) :: XGFLUX_BLT ! net built surf conduction flux   (W/m2) REAL , POINTER , DIMENSION (:) :: XLE_ROOF ! roof latent heat flux            (W/m2) REAL , POINTER , DIMENSION (:) :: XLE_ROAD ! road latent heat flux            (W/m2) REAL , POINTER , DIMENSION (:) :: XLE_STRLROOF !structural roof latent heat flux (W/m2) REAL , POINTER , DIMENSION (:) :: XLE_BLT ! built surf latent heat flux      (W/m2) ! REAL , POINTER , DIMENSION (:) :: XRUNOFF_TOWN ! aggregated water runoff for town      (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XIRRIG_GARDEN ! summer ground irrigation rate         (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XRUNOFF_ROAD ! water runoff for roads                (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XIRRIG_ROAD ! road man-made watering rate           (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XRUNOFF_ROOF ! aggregated water runoff for roofs     (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XRUNOFF_STRLROOF ! water runoff for structural roofs     (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XIRRIG_GREENROOF ! summer ground irrigation rate         (kg/m2/s) ! REAL , POINTER , DIMENSION (:) :: XABS_SW_ROOF ! absorbed shortwave radiation over roofs REAL , POINTER , DIMENSION (:) :: XABS_SW_SNOW_ROOF ! absorbed longwave radiation over roofs REAL , POINTER , DIMENSION (:) :: XABS_LW_ROOF ! absorbed shortwave radiation over roofs REAL , POINTER , DIMENSION (:) :: XABS_LW_SNOW_ROOF ! absorbed longwave radiation over roofs REAL , POINTER , DIMENSION (:) :: XABS_SW_ROAD ! absorbed shortwave radiation over roads REAL , POINTER , DIMENSION (:) :: XABS_SW_SNOW_ROAD ! absorbed longwave radiation over roads REAL , POINTER , DIMENSION (:) :: XABS_LW_ROAD ! absorbed shortwave radiation over roads REAL , POINTER , DIMENSION (:) :: XABS_LW_SNOW_ROAD ! absorbed longwave radiation over roads REAL , POINTER , DIMENSION (:) :: XABS_SW_WALL_A ! absorbed shortwave radiation over walls REAL , POINTER , DIMENSION (:) :: XABS_SW_WALL_B ! absorbed shortwave radiation over walls REAL , POINTER , DIMENSION (:) :: XABS_LW_WALL_A ! absorbed shortwave radiation over walls REAL , POINTER , DIMENSION (:) :: XABS_LW_WALL_B ! absorbed shortwave radiation over walls REAL , POINTER , DIMENSION (:) :: XABS_SW_GARDEN ! absorbed shortwave radiation over green areas REAL , POINTER , DIMENSION (:) :: XABS_LW_GARDEN ! absorbed shortwave radiation over green areas REAL , POINTER , DIMENSION (:) :: XABS_SW_GREENROOF ! absorbed shortwave radiation over green roofs REAL , POINTER , DIMENSION (:) :: XABS_LW_GREENROOF ! absorbed shortwave radiation over green roofs REAL , POINTER , DIMENSION (:) :: XG_GREENROOF_ROOF ! Heat flux between green roof and structural roof REAL , POINTER , DIMENSION (:) :: XABS_SW_PANEL ! absorbed shortwave radiation over solar panels REAL , POINTER , DIMENSION (:) :: XABS_LW_PANEL ! absorbed longwave  radiation over solar panels ! REAL , POINTER , DIMENSION (:) :: XRN_PANEL ! net radiation           over solar panels (W/m2) REAL , POINTER , DIMENSION (:) :: XH_PANEL ! sensible heat flux      over solar panels (W/m2) REAL , POINTER , DIMENSION (:) :: XTHER_PROD_PANEL ! thermal      production of   solar panels (W/m2 thermal panel) REAL , POINTER , DIMENSION (:) :: XPHOT_PROD_PANEL ! photovoltaic production of   solar panels (W/m2 photovoltaic panel) REAL , POINTER , DIMENSION (:) :: XPROD_PANEL !              production of   solar panels (W/m2 panel) REAL , POINTER , DIMENSION (:) :: XTHER_PROD_BLD ! thermal      production of   solar panels (W/m2 bld) REAL , POINTER , DIMENSION (:) :: XPHOT_PROD_BLD ! photovoltaic production of   solar panels (W/m2 bld) REAL , POINTER , DIMENSION (:) :: XH_BLD_COOL ! Sensible cooling energy demand ! of the building [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XT_BLD_COOL ! Total cooling energy demand ! of the building [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XH_BLD_HEAT ! Heating energy demand ! of the building [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XLE_BLD_COOL ! Latent cooling energy demand ! of the building [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XLE_BLD_HEAT ! Latent heating energy demand ! of the building [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XH_WASTE ! Sensible waste heat from HVAC system ! [W m-2(tot)] REAL , POINTER , DIMENSION (:) :: XLE_WASTE ! Latent waste heat from HVAC system ! [W m-2(tot)] REAL , POINTER , DIMENSION (:) :: XHVAC_COOL ! Energy consumption of the cooling system ! [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XHVAC_HEAT ! Energy consumption of the heating system ! [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XCAP_SYS ! Actual capacity of the cooling system ! [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XM_SYS ! Actual HVAC mass flow rate ! [kg s-1 m-2(bld)] REAL , POINTER , DIMENSION (:) :: XCOP ! COP of the cooling system REAL , POINTER , DIMENSION (:) :: XQ_SYS ! Supply air specific humidity [kg kg-1] REAL , POINTER , DIMENSION (:) :: XT_SYS ! Supply air temperature [K] REAL , POINTER , DIMENSION (:) :: XTR_SW_WIN ! Solar radiation transmitted throught ! windows [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XFAN_POWER ! HVAC fan power REAL , POINTER , DIMENSION (:) :: XABS_SW_WIN ! window absorbed shortwave radiation [W m-2] REAL , POINTER , DIMENSION (:) :: XABS_LW_WIN ! absorbed infrared rad. [W m-2] REAL , POINTER , DIMENSION (:) :: XEMIT_LW_FAC ! LW flux emitted by the facade (W/m2 facade) REAL , POINTER , DIMENSION (:) :: XEMIT_LW_GRND ! LW flux emitted by the ground (W/m2 ground = road + garden) REAL , POINTER , DIMENSION (:) :: XT_RAD_IND !Indoor mean radiant temperature [K] REAL , POINTER , DIMENSION (:) :: XREF_SW_GRND ! total solar rad reflected by ground REAL , POINTER , DIMENSION (:) :: XREF_SW_FAC ! total solar rad reflected by facade REAL , POINTER , DIMENSION (:) :: XHU_BLD !Indoor relative humidity ! REAL , POINTER , DIMENSION (:) :: XTCOOL_TARGET ! current cooling setpoint of indoor air REAL , POINTER , DIMENSION (:) :: XTHEAT_TARGET ! current heating setpoint of indoor air REAL , POINTER , DIMENSION (:) :: XQIN ! current internal heat gains [W m-2(floor)] !------------------------------------------------------------------------------ ! END TYPE DIAG_MISC_TEB_t","tags":"","loc":"type/diag_misc_teb_t.html"},{"title":"DIAG_MISC_TEB_NP_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DIAG_MISC_TEB_NP_t Contents Variables AL Source Code DIAG_MISC_TEB_NP_t Components Type Visibility Attributes Name Initial type( DIAG_MISC_TEB_t ), public, POINTER :: AL (:) => NULL() Source Code TYPE DIAG_MISC_TEB_NP_t ! TYPE ( DIAG_MISC_TEB_t ), POINTER :: AL (:) => NULL () ! END TYPE DIAG_MISC_TEB_NP_t","tags":"","loc":"type/diag_misc_teb_np_t.html"},{"title":"DIAG_OPTIONS_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DIAG_OPTIONS_t Contents Variables XDIAG_TSTEP N2M LT2MMW L2M_MIN_ZS LSURF_BUDGET LRAD_BUDGET LCOEF LSURF_VARS LFRAC LDIAG_GRID LSURF_BUDGETC LRESET_BUDGETC LREAD_BUDGETC LPROVAR_TO_DIAG LSNOWDIMNC LRESETCUMUL LSELECT TIME_BUDGETC CSELECT LPGD LPATCH_BUDGET Source Code DIAG_OPTIONS_t Components Type Visibility Attributes Name Initial real, public :: XDIAG_TSTEP integer, public :: N2M logical, public :: LT2MMW logical, public :: L2M_MIN_ZS logical, public :: LSURF_BUDGET logical, public :: LRAD_BUDGET logical, public :: LCOEF logical, public :: LSURF_VARS logical, public :: LFRAC logical, public :: LDIAG_GRID logical, public :: LSURF_BUDGETC logical, public :: LRESET_BUDGETC logical, public :: LREAD_BUDGETC logical, public :: LPROVAR_TO_DIAG logical, public :: LSNOWDIMNC logical, public :: LRESETCUMUL logical, public :: LSELECT type(DATE_TIME), public :: TIME_BUDGETC character(len=12), public, POINTER, DIMENSION(:) :: CSELECT logical, public :: LPGD logical, public :: LPATCH_BUDGET Source Code TYPE DIAG_OPTIONS_t ! REAL :: XDIAG_TSTEP ! time step for diagnostics writing ! INTEGER :: N2M ! flag for 2 meters (and 10 meters) quantities LOGICAL :: LT2MMW ! flag to perform modified weighting of 2m temperature LOGICAL :: L2M_MIN_ZS ! flag for 2 meters quantities evaluated on !                         ! the minimum orographyy of the grid LOGICAL :: LSURF_BUDGET ! flag for surface energy budget LOGICAL :: LRAD_BUDGET ! flag for radiative energy budget ! LOGICAL :: LCOEF ! flag for transfer coefficients LOGICAL :: LSURF_VARS ! flag for surface variables LOGICAL :: LFRAC ! flag for writing fractions of each four tiles LOGICAL :: LDIAG_GRID ! flag for mean grid diag ! LOGICAL :: LSURF_BUDGETC ! flag for surface cumulated energy budget LOGICAL :: LRESET_BUDGETC ! flag for surface cumulated energy budget LOGICAL :: LREAD_BUDGETC ! flag for surface cumulated energy budget LOGICAL :: LPROVAR_TO_DIAG ! switch to write (or not) prognostic variable ! and allows puting field in diagnostics LOGICAL :: LSNOWDIMNC ! if true create a snow layer dimension in nc files LOGICAL :: LRESETCUMUL ! reset cumulated variables at 0 at each output timestep LOGICAL :: LSELECT ! switch to control which fields are written ! (only those whose naem appears in in text array) ! TYPE ( DATE_TIME ) :: TIME_BUDGETC ! CHARACTER ( LEN = 12 ), POINTER , DIMENSION (:) :: CSELECT ! Name of ouput fields if LSELECT=true ! LOGICAL :: LPGD ! flag for writing of PGD files LOGICAL :: LPATCH_BUDGET ! flag for patch output ! END TYPE DIAG_OPTIONS_t","tags":"","loc":"type/diag_options_t.html"},{"title":"DIAG_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DIAG_t Contents Variables XRI XCD XCDN XCH XCE XHU XHUG XHV XRN XH XLE XLEI XGFLUX XEVAP XSUBL XTS XTSRAD XALBT XSWE XT2M XT2M_MIN XT2M_MAX XQ2M XHU2M XHU2M_MIN XHU2M_MAX XQS XZON10M XMER10M XWIND10M XWIND10M_MAX XSFCO2 XSWBD XSWBU XLWD XLWU XSWD XSWU XFMU XFMV XZ0 XZ0H XZ0EFF XT2M_MIN_ZS XQ2M_MIN_ZS XHU2M_MIN_ZS XPS XRHOA XSSO_FMU XSSO_FMV XUREF XZREF XTRAD XEMIS Source Code DIAG_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:) :: XRI real, public, POINTER, DIMENSION(:) :: XCD real, public, POINTER, DIMENSION(:) :: XCDN real, public, POINTER, DIMENSION(:) :: XCH real, public, POINTER, DIMENSION(:) :: XCE real, public, POINTER, DIMENSION(:) :: XHU real, public, POINTER, DIMENSION(:) :: XHUG real, public, POINTER, DIMENSION(:) :: XHV real, public, POINTER, DIMENSION(:) :: XRN real, public, POINTER, DIMENSION(:) :: XH real, public, POINTER, DIMENSION(:) :: XLE real, public, POINTER, DIMENSION(:) :: XLEI real, public, POINTER, DIMENSION(:) :: XGFLUX real, public, POINTER, DIMENSION(:) :: XEVAP real, public, POINTER, DIMENSION(:) :: XSUBL real, public, POINTER, DIMENSION(:) :: XTS real, public, POINTER, DIMENSION(:) :: XTSRAD real, public, POINTER, DIMENSION(:) :: XALBT real, public, POINTER, DIMENSION(:) :: XSWE real, public, POINTER, DIMENSION(:) :: XT2M real, public, POINTER, DIMENSION(:) :: XT2M_MIN real, public, POINTER, DIMENSION(:) :: XT2M_MAX real, public, POINTER, DIMENSION(:) :: XQ2M real, public, POINTER, DIMENSION(:) :: XHU2M real, public, POINTER, DIMENSION(:) :: XHU2M_MIN real, public, POINTER, DIMENSION(:) :: XHU2M_MAX real, public, POINTER, DIMENSION(:) :: XQS real, public, POINTER, DIMENSION(:) :: XZON10M real, public, POINTER, DIMENSION(:) :: XMER10M real, public, POINTER, DIMENSION(:) :: XWIND10M real, public, POINTER, DIMENSION(:) :: XWIND10M_MAX real, public, POINTER, DIMENSION(:) :: XSFCO2 real, public, POINTER, DIMENSION(:,:) :: XSWBD real, public, POINTER, DIMENSION(:,:) :: XSWBU real, public, POINTER, DIMENSION(:) :: XLWD real, public, POINTER, DIMENSION(:) :: XLWU real, public, POINTER, DIMENSION(:) :: XSWD real, public, POINTER, DIMENSION(:) :: XSWU real, public, POINTER, DIMENSION(:) :: XFMU real, public, POINTER, DIMENSION(:) :: XFMV real, public, POINTER, DIMENSION(:) :: XZ0 real, public, POINTER, DIMENSION(:) :: XZ0H real, public, POINTER, DIMENSION(:) :: XZ0EFF real, public, POINTER, DIMENSION(:) :: XT2M_MIN_ZS real, public, POINTER, DIMENSION(:) :: XQ2M_MIN_ZS real, public, POINTER, DIMENSION(:) :: XHU2M_MIN_ZS real, public, POINTER, DIMENSION(:) :: XPS real, public, POINTER, DIMENSION(:) :: XRHOA real, public, POINTER, DIMENSION(:) :: XSSO_FMU real, public, POINTER, DIMENSION(:) :: XSSO_FMV real, public, POINTER, DIMENSION(:) :: XUREF real, public, POINTER, DIMENSION(:) :: XZREF real, public, POINTER, DIMENSION(:) :: XTRAD real, public, POINTER, DIMENSION(:) :: XEMIS Source Code TYPE DIAG_t !------------------------------------------------------------------------------ ! !* variables for each patch ! !* averaged variables ! REAL , POINTER , DIMENSION (:) :: XRI ! Bulk-Richardson number           (-) REAL , POINTER , DIMENSION (:) :: XCD ! drag coefficient for wind        (W/s2) REAL , POINTER , DIMENSION (:) :: XCDN ! neutral drag coefficient                      (-) REAL , POINTER , DIMENSION (:) :: XCH ! drag coefficient for heat        (W/s) REAL , POINTER , DIMENSION (:) :: XCE ! drag coefficient for vapor       (W/s/K) ! REAL , POINTER , DIMENSION (:) :: XHU ! area averaged surface humidity coefficient    (-) REAL , POINTER , DIMENSION (:) :: XHUG ! baresoil surface humidity coefficient         (-) REAL , POINTER , DIMENSION (:) :: XHV ! Halstead coefficient                          (-) ! REAL , POINTER , DIMENSION (:) :: XRN ! net radiation at surface         (W/m2) REAL , POINTER , DIMENSION (:) :: XH ! sensible heat flux               (W/m2) REAL , POINTER , DIMENSION (:) :: XLE ! total latent heat flux           (W/m2) REAL , POINTER , DIMENSION (:) :: XLEI ! sublimation latent heat flux     (W/m2) REAL , POINTER , DIMENSION (:) :: XGFLUX ! net soil-vegetation flux         (W/m2) ! REAL , POINTER , DIMENSION (:) :: XEVAP ! total evaporation                (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XSUBL ! sublimation                      (kg/m2/s) ! REAL , POINTER , DIMENSION (:) :: XTS ! surface temperature              (K) REAL , POINTER , DIMENSION (:) :: XTSRAD ! surface temperature              (K) REAL , POINTER , DIMENSION (:) :: XALBT ! Total Albedo REAL , POINTER , DIMENSION (:) :: XSWE ! snow water equivalent (kg/m2) ! REAL , POINTER , DIMENSION (:) :: XT2M ! temperature at 2 meters          (K) REAL , POINTER , DIMENSION (:) :: XT2M_MIN ! Minimum temperature at 2 meters          (K) REAL , POINTER , DIMENSION (:) :: XT2M_MAX ! Maximum temperature at 2 meters          (K) REAL , POINTER , DIMENSION (:) :: XQ2M ! humidity    at 2 meters          (kg/kg) REAL , POINTER , DIMENSION (:) :: XHU2M ! relative humidity at 2 meters    (-) REAL , POINTER , DIMENSION (:) :: XHU2M_MIN ! Minimum relative humidity at 2 meters    (-) REAL , POINTER , DIMENSION (:) :: XHU2M_MAX ! Maximum relative humidity at 2 meters    (-) REAL , POINTER , DIMENSION (:) :: XQS ! humidity at surface              (kg/kg) REAL , POINTER , DIMENSION (:) :: XZON10M ! zonal wind at 10 meters          (m/s) REAL , POINTER , DIMENSION (:) :: XMER10M ! meridian wind at 10 meters       (m/s) REAL , POINTER , DIMENSION (:) :: XWIND10M ! wind at 10 meters                (m/s) REAL , POINTER , DIMENSION (:) :: XWIND10M_MAX ! Maximum wind at 10 meters    (m/s) ! REAL , POINTER , DIMENSION (:) :: XSFCO2 ! CO2 flux                         (m/s*kg_CO2/kg_air) ! REAL , POINTER , DIMENSION (:,:) :: XSWBD ! downward short wave radiation by spectral band   (W/m2) REAL , POINTER , DIMENSION (:,:) :: XSWBU ! upward short wave radiation by spectral band (W/m2) ! REAL , POINTER , DIMENSION (:) :: XLWD ! downward long wave radiation     (W/m2) REAL , POINTER , DIMENSION (:) :: XLWU ! upward long wave radiation       (W/m2) REAL , POINTER , DIMENSION (:) :: XSWD ! downward short wave radiation    (W/m2) REAL , POINTER , DIMENSION (:) :: XSWU ! upward short wave radiation      (W/m2) ! REAL , POINTER , DIMENSION (:) :: XFMU ! horizontal momentum flux zonal   (m2/s2) REAL , POINTER , DIMENSION (:) :: XFMV ! horizontal momentum flux meridian (m2/s2) ! REAL , POINTER , DIMENSION (:) :: XZ0 ! roughness length for momentum ! for vegetation and snow    (m) REAL , POINTER , DIMENSION (:) :: XZ0H ! roughness length for heat ! for vegetation and snow    (m) REAL , POINTER , DIMENSION (:) :: XZ0EFF ! effective roughness length for heat ! for vegetation and snow    (m) ! REAL , POINTER , DIMENSION (:) :: XT2M_MIN_ZS ! air temperature at 2 meters   (K) REAL , POINTER , DIMENSION (:) :: XQ2M_MIN_ZS ! air humidity at 2 meters      (kg/kg) REAL , POINTER , DIMENSION (:) :: XHU2M_MIN_ZS ! air relative humidity at 2 m  (-) REAL , POINTER , DIMENSION (:) :: XPS ! air pressure at the surface      (Pa) REAL , POINTER , DIMENSION (:) :: XRHOA ! air density  at the surface      (kg/m3) REAL , POINTER , DIMENSION (:) :: XSSO_FMU ! zonal friction    (with SSO)     (Pa) REAL , POINTER , DIMENSION (:) :: XSSO_FMV ! meridian friction (with SSO)     (Pa) ! REAL , POINTER , DIMENSION (:) :: XUREF ! reference height for momentum    (m) REAL , POINTER , DIMENSION (:) :: XZREF ! reference height for heat        (m) REAL , POINTER , DIMENSION (:) :: XTRAD ! radiative temperature at t       (K) REAL , POINTER , DIMENSION (:) :: XEMIS ! surface emissivity at t          (-) !------------------------------------------------------------------------------ ! END TYPE DIAG_t","tags":"","loc":"type/diag_t.html"},{"title":"DIAG_NP_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DIAG_NP_t Contents Variables AL Source Code DIAG_NP_t Components Type Visibility Attributes Name Initial type( DIAG_t ), public, POINTER :: AL (:) => NULL() Source Code TYPE DIAG_NP_t ! TYPE ( DIAG_t ), POINTER :: AL (:) => NULL () ! END TYPE DIAG_NP_t","tags":"","loc":"type/diag_np_t.html"},{"title":"TEB_IRRIG_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: TEB_IRRIG_t Contents Variables LTEB_IRRIG LPAR_GD_IRRIG LPAR_GR_IRRIG LPAR_RD_IRRIG XGD_START_MONTH XGD_END_MONTH XGD_START_HOUR XGD_END_HOUR XGD_24H_IRRIG XGR_START_MONTH XGR_END_MONTH XGR_START_HOUR XGR_END_HOUR XGR_24H_IRRIG XRD_START_MONTH XRD_END_MONTH XRD_START_HOUR XRD_END_HOUR XRD_24H_IRRIG Source Code TEB_IRRIG_t Components Type Visibility Attributes Name Initial logical, public :: LTEB_IRRIG logical, public :: LPAR_GD_IRRIG logical, public :: LPAR_GR_IRRIG logical, public :: LPAR_RD_IRRIG real, public, POINTER, DIMENSION(:) :: XGD_START_MONTH real, public, POINTER, DIMENSION(:) :: XGD_END_MONTH real, public, POINTER, DIMENSION(:) :: XGD_START_HOUR real, public, POINTER, DIMENSION(:) :: XGD_END_HOUR real, public, POINTER, DIMENSION(:) :: XGD_24H_IRRIG real, public, POINTER, DIMENSION(:) :: XGR_START_MONTH real, public, POINTER, DIMENSION(:) :: XGR_END_MONTH real, public, POINTER, DIMENSION(:) :: XGR_START_HOUR real, public, POINTER, DIMENSION(:) :: XGR_END_HOUR real, public, POINTER, DIMENSION(:) :: XGR_24H_IRRIG real, public, POINTER, DIMENSION(:) :: XRD_START_MONTH real, public, POINTER, DIMENSION(:) :: XRD_END_MONTH real, public, POINTER, DIMENSION(:) :: XRD_START_HOUR real, public, POINTER, DIMENSION(:) :: XRD_END_HOUR real, public, POINTER, DIMENSION(:) :: XRD_24H_IRRIG Source Code TYPE TEB_IRRIG_t ! LOGICAL :: LTEB_IRRIG ! flag to use irrigation for gardens or greenroofs LOGICAL :: LPAR_GD_IRRIG ! flag to use prescribed irrigation for gardens LOGICAL :: LPAR_GR_IRRIG ! flag to use prescribed irrigation for greenroofs LOGICAL :: LPAR_RD_IRRIG ! flag to use prescribed irrigation for roads REAL , POINTER , DIMENSION (:) :: XGD_START_MONTH ! gardens : start month for irrigation (included) REAL , POINTER , DIMENSION (:) :: XGD_END_MONTH ! gardens : end   month for irrigation (included) REAL , POINTER , DIMENSION (:) :: XGD_START_HOUR ! gardens : start solar hour for irrigation (included, hour) REAL , POINTER , DIMENSION (:) :: XGD_END_HOUR ! gardens : end   solar hour for irrigation (excluded, hour) REAL , POINTER , DIMENSION (:) :: XGD_24H_IRRIG ! gardens : total irrigation over 24 hours (kg/m2) REAL , POINTER , DIMENSION (:) :: XGR_START_MONTH ! greenroofs : start month for irrigation (included) REAL , POINTER , DIMENSION (:) :: XGR_END_MONTH ! greenroofs : end   month for irrigation (included) REAL , POINTER , DIMENSION (:) :: XGR_START_HOUR ! greenroofs : start solar hour for irrigation (included, hour) REAL , POINTER , DIMENSION (:) :: XGR_END_HOUR ! greenroofs : end   solar hour for irrigation (excluded, hour) REAL , POINTER , DIMENSION (:) :: XGR_24H_IRRIG ! greenroofs : total irrigation over 24 hours (kg/m2) REAL , POINTER , DIMENSION (:) :: XRD_START_MONTH ! roads : start month for irrigation (included) REAL , POINTER , DIMENSION (:) :: XRD_END_MONTH ! roads : end   month for irrigation (included) REAL , POINTER , DIMENSION (:) :: XRD_START_HOUR ! roads : start solar hour for irrigation (included, hour) REAL , POINTER , DIMENSION (:) :: XRD_END_HOUR ! roads : end   solar hour for irrigation (excluded, hour) REAL , POINTER , DIMENSION (:) :: XRD_24H_IRRIG ! roads : total irrigation over 24 hours (kg/m2) ! END TYPE TEB_IRRIG_t","tags":"","loc":"type/teb_irrig_t.html"},{"title":"FLAKE_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: FLAKE_t Contents Variables XZS XZ0 XUSTAR XEMIS XCOVER LCOVER LSBL TTIME XTSTEP XOUT_TSTEP LSEDIMENTS LSKINTEMP CSNOW_FLK CFLK_FLUX CFLK_ALB XWATER_DEPTH XWATER_FETCH XT_BS XDEPTH_BS XCORIO XDIR_ALB XSCA_ALB XICE_ALB XSNOW_ALB XEXTCOEF_WATER XEXTCOEF_ICE XEXTCOEF_SNOW XT_SNOW XT_ICE XT_MNW XT_WML XT_BOT XT_B1 XCT XH_SNOW XH_ICE XH_ML XH_B1 XTS XCPL_FLAKE_EVAP XCPL_FLAKE_RAIN XCPL_FLAKE_SNOW Source Code FLAKE_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:) :: XZS real, public, POINTER, DIMENSION(:) :: XZ0 real, public, POINTER, DIMENSION(:) :: XUSTAR real, public, POINTER, DIMENSION(:) :: XEMIS real, public, POINTER, DIMENSION(:,:) :: XCOVER logical, public, POINTER, DIMENSION(:) :: LCOVER logical, public :: LSBL type(DATE_TIME), public :: TTIME real, public :: XTSTEP real, public :: XOUT_TSTEP logical, public :: LSEDIMENTS logical, public :: LSKINTEMP character(len=3), public :: CSNOW_FLK character(len=5), public :: CFLK_FLUX character(len=4), public :: CFLK_ALB real, public, POINTER, DIMENSION(:) :: XWATER_DEPTH real, public, POINTER, DIMENSION(:) :: XWATER_FETCH real, public, POINTER, DIMENSION(:) :: XT_BS real, public, POINTER, DIMENSION(:) :: XDEPTH_BS real, public, POINTER, DIMENSION(:) :: XCORIO real, public, POINTER, DIMENSION(:) :: XDIR_ALB real, public, POINTER, DIMENSION(:) :: XSCA_ALB real, public, POINTER, DIMENSION(:) :: XICE_ALB real, public, POINTER, DIMENSION(:) :: XSNOW_ALB real, public, POINTER, DIMENSION(:) :: XEXTCOEF_WATER real, public, POINTER, DIMENSION(:) :: XEXTCOEF_ICE real, public, POINTER, DIMENSION(:) :: XEXTCOEF_SNOW real, public, POINTER, DIMENSION(:) :: XT_SNOW real, public, POINTER, DIMENSION(:) :: XT_ICE real, public, POINTER, DIMENSION(:) :: XT_MNW real, public, POINTER, DIMENSION(:) :: XT_WML real, public, POINTER, DIMENSION(:) :: XT_BOT real, public, POINTER, DIMENSION(:) :: XT_B1 real, public, POINTER, DIMENSION(:) :: XCT real, public, POINTER, DIMENSION(:) :: XH_SNOW real, public, POINTER, DIMENSION(:) :: XH_ICE real, public, POINTER, DIMENSION(:) :: XH_ML real, public, POINTER, DIMENSION(:) :: XH_B1 real, public, POINTER, DIMENSION(:) :: XTS real, public, POINTER, DIMENSION(:) :: XCPL_FLAKE_EVAP real, public, POINTER, DIMENSION(:) :: XCPL_FLAKE_RAIN real, public, POINTER, DIMENSION(:) :: XCPL_FLAKE_SNOW Source Code TYPE FLAKE_t ! !------------------------------------------------------------------------------------- ! General surface: !------------------------------------------------------------------------------------- ! REAL , POINTER , DIMENSION (:) :: XZS ! orography                     (m) REAL , POINTER , DIMENSION (:) :: XZ0 ! roughness length              (m) REAL , POINTER , DIMENSION (:) :: XUSTAR ! air friction velocity         (m/s) REAL , POINTER , DIMENSION (:) :: XEMIS ! water surface emissivity (NOT USED BY FLAKE) ! REAL , POINTER , DIMENSION (:,:) :: XCOVER ! fraction of each ecosystem    (-) !                                          ! F: no atmospheric layers below forcing level ! LOGICAL , POINTER , DIMENSION (:) :: LCOVER ! GCOVER(i)=T --> ith cover field is not 0. LOGICAL :: LSBL ! T: SBL scheme within the Surface Boundary Layer ! !------------------------------------------------------------------------------------- ! Date and time: !------------------------------------------------------------------------------------- ! TYPE ( DATE_TIME ) :: TTIME ! current date and time ! REAL :: XTSTEP ! time step ! REAL :: XOUT_TSTEP ! output writing time step ! !------------------------------------------------------------------------------------- ! FLake switches !------------------------------------------------------------------------------------- ! LOGICAL :: LSEDIMENTS ! flag to use or not the bottom sediments LOGICAL :: LSKINTEMP ! flag to use or not the skin temperature computation CHARACTER ( LEN = 3 ) :: CSNOW_FLK ! FLake snow scheme CHARACTER ( LEN = 5 ) :: CFLK_FLUX ! Type of flux computation CHARACTER ( LEN = 4 ) :: CFLK_ALB ! Type of albedo ! !------------------------------------------------------------------------------------- ! FLake parameters and variables !------------------------------------------------------------------------------------- ! REAL , POINTER , DIMENSION (:) :: XWATER_DEPTH ! Lake depth (m) REAL , POINTER , DIMENSION (:) :: XWATER_FETCH ! Lake fetch (m) REAL , POINTER , DIMENSION (:) :: XT_BS ! Temperature at the outer edge of the thermally !       active layer of the bottom sediments [K] REAL , POINTER , DIMENSION (:) :: XDEPTH_BS ! Depth of the thermally active layer of the !       bottom sediments [m] REAL , POINTER , DIMENSION (:) :: XCORIO ! The Coriolis parameter [s&#94;{-1}] REAL , POINTER , DIMENSION (:) :: XDIR_ALB ! Water surface direct albedo REAL , POINTER , DIMENSION (:) :: XSCA_ALB ! Water surface diffuse albedo REAL , POINTER , DIMENSION (:) :: XICE_ALB ! Ice surface albedo (for ESM coupling) REAL , POINTER , DIMENSION (:) :: XSNOW_ALB ! Snow surface albedo REAL , POINTER , DIMENSION (:) :: XEXTCOEF_WATER ! Extinction coefficient for the water [m&#94;{-1}] REAL , POINTER , DIMENSION (:) :: XEXTCOEF_ICE ! Extinction coefficient for the ice [m&#94;{-1}] REAL , POINTER , DIMENSION (:) :: XEXTCOEF_SNOW ! Extinction coefficient for the snow [m&#94;{-1}] REAL , POINTER , DIMENSION (:) :: XT_SNOW ! Temperature at the air-snow interface [K] REAL , POINTER , DIMENSION (:) :: XT_ICE ! Temperature at the snow-ice or air-ice !        interface [K] REAL , POINTER , DIMENSION (:) :: XT_MNW ! Mean temperature of the water column [K] REAL , POINTER , DIMENSION (:) :: XT_WML ! Mixed-layer temperature [K] REAL , POINTER , DIMENSION (:) :: XT_BOT ! Temperature at the water-bottom sediment !        interface [K] REAL , POINTER , DIMENSION (:) :: XT_B1 ! Temperature at the bottom of the upper !        layer of the sediments [K] REAL , POINTER , DIMENSION (:) :: XCT ! Shape factor (thermocline) REAL , POINTER , DIMENSION (:) :: XH_SNOW ! Snow thickness [m] REAL , POINTER , DIMENSION (:) :: XH_ICE ! Ice thickness [m] REAL , POINTER , DIMENSION (:) :: XH_ML ! Thickness of the mixed-layer [m] REAL , POINTER , DIMENSION (:) :: XH_B1 ! Thickness of the upper layer of bottom sediments [m] ! REAL , POINTER , DIMENSION (:) :: XTS ! surface temperature  (K) ! (water or ice or snow) ! !------------------------------------------------------------------------------------- ! Coupling field for Earth system model !------------------------------------------------------------------------------------- ! REAL , POINTER , DIMENSION (:) :: XCPL_FLAKE_EVAP ! Evaporation for ESM coupling REAL , POINTER , DIMENSION (:) :: XCPL_FLAKE_RAIN ! Rainfall for ESM coupling REAL , POINTER , DIMENSION (:) :: XCPL_FLAKE_SNOW ! Snowfall for ESM coupling ! END TYPE FLAKE_t","tags":"","loc":"type/flake_t.html"},{"title":"EMIS_GR_FIELD_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: EMIS_GR_FIELD_t Contents Variables NEMIS_GR_NBR CEMIS_GR_AREA CEMIS_GR_NAME NEMIS_GR_TIME XEMIS_GR_FIELDS NEMISPEC_NBR TSEMISS TSPRONOSLIST Source Code EMIS_GR_FIELD_t Components Type Visibility Attributes Name Initial integer, public :: NEMIS_GR_NBR character(len=3), public, DIMENSION(:), POINTER :: CEMIS_GR_AREA character(len=40), public, DIMENSION(:), POINTER :: CEMIS_GR_NAME integer, public, DIMENSION(:), POINTER :: NEMIS_GR_TIME real, public, DIMENSION(:,:,:), POINTER :: XEMIS_GR_FIELDS integer, public :: NEMISPEC_NBR type(EMISSVAR_T), public, DIMENSION(:), POINTER :: TSEMISS type(PRONOSVAR_T), public, POINTER :: TSPRONOSLIST Source Code TYPE EMIS_GR_FIELD_t ! ! INTEGER :: NEMIS_GR_NBR !                          ! number of chemical pgd fields chosen by user CHARACTER ( LEN = 3 ) , DIMENSION (:), POINTER :: CEMIS_GR_AREA !                          ! areas where chemical pgd fields are defined !                          ! 'ALL' : everywhere !                          ! 'SEA' : where sea exists !                          ! 'LAN' : where land exists !                          ! 'WAT' : where inland water exists !                          ! 'NAT' : where natural or agricultural areas exist !                          ! 'TWN' : where town areas exist !                          ! 'STR' : where streets are present !                          ! 'BLD' : where buildings are present !                          ! CHARACTER ( LEN = 40 ), DIMENSION (:), POINTER :: CEMIS_GR_NAME !                          ! name of the chemical pgd fields (emitted species) ! INTEGER , DIMENSION (:), POINTER :: NEMIS_GR_TIME ! emission time ! REAL , DIMENSION (:,:,:), POINTER :: XEMIS_GR_FIELDS ! emission pgd fields values ! INTEGER :: NEMISPEC_NBR ! Number of chemical species ! TYPE ( EMISSVAR_T ), DIMENSION (:), POINTER :: TSEMISS ! Offline emission struct array ! TYPE ( PRONOSVAR_T ), POINTER :: TSPRONOSLIST ! Head pointer on pronostic !                                                              variables list !------------------------------------------------------------------------------- ! END TYPE EMIS_GR_FIELD_t","tags":"","loc":"type/emis_gr_field_t.html"},{"title":"SSO_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: SSO_t Contents Variables CROUGH XZ0EFFJPDIR XSSO_SLOPE XSSO_ANIS XSSO_DIR XSSO_STDEV XAVG_ZS XSIL_ZS XMAX_ZS XMIN_ZS XFRACZ0 XCOEFBE XAOSIP XAOSIM XAOSJP XAOSJM XHO2IP XHO2IM XHO2JP XHO2JM XZ0REL XZ0EFFIP XZ0EFFIM XZ0EFFJP XZ0EFFJM Source Code SSO_t Components Type Visibility Attributes Name Initial character(len=4), public :: CROUGH real, public, DIMENSION(:), POINTER :: XZ0EFFJPDIR real, public, DIMENSION(:), POINTER :: XSSO_SLOPE real, public, DIMENSION(:), POINTER :: XSSO_ANIS real, public, DIMENSION(:), POINTER :: XSSO_DIR real, public, DIMENSION(:), POINTER :: XSSO_STDEV real, public, DIMENSION(:), POINTER :: XAVG_ZS real, public, DIMENSION(:), POINTER :: XSIL_ZS real, public, DIMENSION(:), POINTER :: XMAX_ZS real, public, DIMENSION(:), POINTER :: XMIN_ZS real, public :: XFRACZ0 real, public :: XCOEFBE real, public, DIMENSION(:), POINTER :: XAOSIP real, public, DIMENSION(:), POINTER :: XAOSIM real, public, DIMENSION(:), POINTER :: XAOSJP real, public, DIMENSION(:), POINTER :: XAOSJM real, public, DIMENSION(:), POINTER :: XHO2IP real, public, DIMENSION(:), POINTER :: XHO2IM real, public, DIMENSION(:), POINTER :: XHO2JP real, public, DIMENSION(:), POINTER :: XHO2JM real, public, DIMENSION(:), POINTER :: XZ0REL real, public, DIMENSION(:), POINTER :: XZ0EFFIP real, public, DIMENSION(:), POINTER :: XZ0EFFIM real, public, DIMENSION(:), POINTER :: XZ0EFFJP real, public, DIMENSION(:), POINTER :: XZ0EFFJM Source Code TYPE SSO_t ! !----------------------------------------------------------------------------------------------------- ! ! Type of roughness ! CHARACTER ( LEN = 4 ) :: CROUGH ! type of orographic roughness !                              ! 'NONE' ! 'Z01D' ! 'Z04D' ! 'BE04' ! REAL , DIMENSION (:), POINTER :: XZ0EFFJPDIR ! heading of J direction (deg from N clockwise) ! REAL , DIMENSION (:), POINTER :: XSSO_SLOPE ! slope of S.S.O. REAL , DIMENSION (:), POINTER :: XSSO_ANIS ! anisotropy of S.S.O. REAL , DIMENSION (:), POINTER :: XSSO_DIR ! direction of S.S.O. (deg from N clockwise) REAL , DIMENSION (:), POINTER :: XSSO_STDEV ! S.S.O. standard deviation           (m) ! REAL , DIMENSION (:), POINTER :: XAVG_ZS ! averaged orography                      (m) REAL , DIMENSION (:), POINTER :: XSIL_ZS ! silhouette orography                    (m) REAL , DIMENSION (:), POINTER :: XMAX_ZS ! maximum subgrid orography               (m) REAL , DIMENSION (:), POINTER :: XMIN_ZS ! minimum subgrid orography               (m) ! Zo threshold REAL :: XFRACZ0 ! Z0=Min(Z0, Href/XFRACZ0) REAL :: XCOEFBE ! Beljaars coefficient ! !----------------------------------------------------------------------------------------------------- ! ! Subgrid orography parameters ! REAL , DIMENSION (:), POINTER :: XAOSIP , XAOSIM , XAOSJP , XAOSJM ! directional A/S quantities in 4 coordinate directions ! (IP: i index up;  IM: i index down;  JP: j index up;  JM: j index down) ! They are used in soil routines to compute effective roughness length ! REAL , DIMENSION (:), POINTER :: XHO2IP , XHO2IM , XHO2JP , XHO2JM ! directional h/2 quantities in 4 coordinate directions ! (IP: i index up;  IM: i index down;  JP: j index up;  JM: j index down) ! They are used in soil routines to compute effective roughness length ! REAL , DIMENSION (:), POINTER :: XZ0REL ! relief roughness length     (m) ! ! utilisé par l'atmosphère ! REAL , DIMENSION (:), POINTER :: XZ0EFFIP , XZ0EFFIM , XZ0EFFJP , XZ0EFFJM ! directional total roughness lenghts in 4 coordinate directions ! (IP: i index up;  IM: i index down;  JP: j index up;  JM: j index down) ! END TYPE SSO_t","tags":"","loc":"type/sso_t.html"},{"title":"SSO_NP_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: SSO_NP_t Contents Variables AL Source Code SSO_NP_t Components Type Visibility Attributes Name Initial type( SSO_t ), public, DIMENSION(:), POINTER :: AL => NULL() Source Code TYPE SSO_NP_t ! TYPE ( SSO_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE SSO_NP_t","tags":"","loc":"type/sso_np_t.html"},{"title":"SURF_SNOW – Town Energy Balance (TEB) model API docs ","text":"type, public :: SURF_SNOW Contents Variables SCHEME NLAYER DEPTH WSNOW HEAT T TEMP RHO ALB ALBVIS ALBNIR ALBFIR EMIS TS GRAN1 GRAN2 HIST AGE Source Code SURF_SNOW Components Type Visibility Attributes Name Initial character(len=3), public :: SCHEME integer, public :: NLAYER real, public, DIMENSION(:,:), POINTER :: DEPTH real, public, DIMENSION(:,:), POINTER :: WSNOW real, public, DIMENSION(:,:), POINTER :: HEAT real, public, DIMENSION(:,:), POINTER :: T real, public, DIMENSION(:,:), POINTER :: TEMP real, public, DIMENSION(:,:), POINTER :: RHO real, public, DIMENSION(:), POINTER :: ALB real, public, DIMENSION(:), POINTER :: ALBVIS real, public, DIMENSION(:), POINTER :: ALBNIR real, public, DIMENSION(:), POINTER :: ALBFIR real, public, DIMENSION(:), POINTER :: EMIS real, public, DIMENSION(:), POINTER :: TS real, public, DIMENSION(:,:), POINTER :: GRAN1 real, public, DIMENSION(:,:), POINTER :: GRAN2 real, public, DIMENSION(:,:), POINTER :: HIST real, public, DIMENSION(:,:), POINTER :: AGE Source Code TYPE SURF_SNOW ! CHARACTER ( LEN = 3 ) :: SCHEME ! snow scheme used INTEGER :: NLAYER ! number of layers ! REAL , DIMENSION (:,:), POINTER :: DEPTH REAL , DIMENSION (:,:), POINTER :: WSNOW ! snow (& liq. water) content (kg/m2) REAL , DIMENSION (:,:), POINTER :: HEAT ! heat content                (J/m2) REAL , DIMENSION (:,:), POINTER :: T ! temperature '1-L' REAL , DIMENSION (:,:), POINTER :: TEMP ! temperature '3-L' (K) REAL , DIMENSION (:,:), POINTER :: RHO ! density REAL , DIMENSION (:), POINTER :: ALB ! snow surface albedo REAL , DIMENSION (:), POINTER :: ALBVIS ! snow surface visible albedo REAL , DIMENSION (:), POINTER :: ALBNIR ! snow surface near-infrared albedo REAL , DIMENSION (:), POINTER :: ALBFIR ! snow surface far-infrared albedo REAL , DIMENSION (:), POINTER :: EMIS ! snow surface emissivity REAL , DIMENSION (:), POINTER :: TS ! snow surface temperature REAL , DIMENSION (:,:), POINTER :: GRAN1 ! snow grain parameter 1 REAL , DIMENSION (:,:), POINTER :: GRAN2 ! snow grain parameter 2 REAL , DIMENSION (:,:), POINTER :: HIST ! snow historical variable !                                               (non dendritic case) REAL , DIMENSION (:,:), POINTER :: AGE ! snow grain age END TYPE SURF_SNOW","tags":"","loc":"type/surf_snow.html"},{"title":"NSURF_SNOW – Town Energy Balance (TEB) model API docs ","text":"type, public :: NSURF_SNOW Contents Variables AL Source Code NSURF_SNOW Components Type Visibility Attributes Name Initial type( SURF_SNOW ), public, DIMENSION(:), POINTER :: AL Source Code TYPE NSURF_SNOW ! TYPE ( SURF_SNOW ), DIMENSION (:), POINTER :: AL ! END TYPE NSURF_SNOW","tags":"","loc":"type/nsurf_snow.html"},{"title":"EMISSVAR_T – Town Energy Balance (TEB) model API docs ","text":"type, public :: EMISSVAR_T Contents Variables CNAME NTX NPX NETIMES NDX XEMISDATA LREAD NWS XFWORK Source Code EMISSVAR_T Components Type Visibility Attributes Name Initial character(len=32), public :: CNAME integer, public :: NTX integer, public :: NPX integer, public, DIMENSION(:), POINTER :: NETIMES integer, public :: NDX real, public, DIMENSION(:,:), POINTER :: XEMISDATA logical, public :: LREAD integer, public :: NWS real, public, DIMENSION(:), POINTER :: XFWORK Source Code TYPE EMISSVAR_T CHARACTER ( len = 32 ) :: CNAME ! Name of the EMISSION ! INTEGER :: NTX ! Current index on array !                                          NETIMES (needed in interpolation) ! INTEGER :: NPX ! Index to use when t > tmax (periodic) ! INTEGER , DIMENSION (:), POINTER :: NETIMES ! Emission times (ordered) ! INTEGER :: NDX ! Current index on array XEMISDATA ! REAL , DIMENSION (:,:), POINTER :: XEMISDATA ! Emission data array !                                              with size (X*Y,NWS) ! LOGICAL :: LREAD ! TRUE if emission data reading is needed ! INTEGER :: NWS ! Read window size for I/O ! REAL , DIMENSION (:), POINTER :: XFWORK ! Time interpolated emission data !                                           with size (X) END TYPE EMISSVAR_T","tags":"","loc":"type/emissvar_t.html"},{"title":"PRONOSVAR_T – Town Energy Balance (TEB) model API docs ","text":"type, public :: PRONOSVAR_T Contents Variables NAMINDEX NBCOEFF XCOEFF NEFINDEX NEXT Source Code PRONOSVAR_T Components Type Visibility Attributes Name Initial integer, public :: NAMINDEX integer, public :: NBCOEFF real, public, DIMENSION(JPNBCOEFFMAX) :: XCOEFF integer, public, DIMENSION(JPNBCOEFFMAX) :: NEFINDEX type( PRONOSVAR_T ), public, POINTER :: NEXT Source Code TYPE PRONOSVAR_T INTEGER :: NAMINDEX ! pronostic name is CNAMES(NAMINDEX) ! INTEGER :: NBCOEFF ! number of coeff in agreg. equation ! REAL , DIMENSION ( JPNBCOEFFMAX ) :: XCOEFF ! agregation coeff array ! INTEGER , DIMENSION ( JPNBCOEFFMAX ) :: NEFINDEX ! array of index on the EMISSVAR_T array ! TYPE ( PRONOSVAR_T ), POINTER :: NEXT ! To build a PRONOSVAR_T link list END TYPE PRONOSVAR_T","tags":"","loc":"type/pronosvar_t.html"},{"title":"IDEAL_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: IDEAL_t Contents Variables XTSTEP XOUT_TSTEP Source Code IDEAL_t Components Type Visibility Attributes Name Initial real, public :: XTSTEP real, public :: XOUT_TSTEP Source Code TYPE IDEAL_t ! ! Time-step: ! REAL :: XTSTEP ! time step ! REAL :: XOUT_TSTEP ! output writing time step ! ! ! END TYPE IDEAL_t","tags":"","loc":"type/ideal_t.html"},{"title":"DIAG_MISC_FLAKE_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DIAG_MISC_FLAKE_t Contents Variables LWATER_PROFILE XZWAT_PROFILE XZW_PROFILE XTW_PROFILE Source Code DIAG_MISC_FLAKE_t Components Type Visibility Attributes Name Initial logical, public :: LWATER_PROFILE real, public, POINTER, DIMENSION(:) :: XZWAT_PROFILE real, public, POINTER, DIMENSION(:) :: XZW_PROFILE real, public, POINTER, DIMENSION(:,:) :: XTW_PROFILE Source Code TYPE DIAG_MISC_FLAKE_t !------------------------------------------------------------------------------ ! LOGICAL :: LWATER_PROFILE ! flag for miscellaneous terms of FLake scheme ! !* miscellaneous variables ! REAL , POINTER , DIMENSION (:) :: XZWAT_PROFILE ! depth of output levels (m) in namelist REAL , POINTER , DIMENSION (:) :: XZW_PROFILE ! depth of output levels (m) REAL , POINTER , DIMENSION (:,:) :: XTW_PROFILE ! Water temperature in output levels (K) ! ! !------------------------------------------------------------------------------ ! END TYPE DIAG_MISC_FLAKE_t","tags":"","loc":"type/diag_misc_flake_t.html"},{"title":"CH_ISBA_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: CH_ISBA_t Contents Variables CCHEM_SURF_FILE CCH_DRY_DEP XDEP XSOILRC_SO2 XSOILRC_O3 LCH_BIO_FLUX LCH_NO_FLUX SVI CCH_NAMES CAER_NAMES CDSTNAMES CSLTNAMES Source Code CH_ISBA_t Components Type Visibility Attributes Name Initial character(len=28), public :: CCHEM_SURF_FILE character(len=6), public :: CCH_DRY_DEP real, public, DIMENSION(:,:), POINTER :: XDEP real, public, DIMENSION(:), POINTER :: XSOILRC_SO2 real, public, DIMENSION(:), POINTER :: XSOILRC_O3 logical, public :: LCH_BIO_FLUX logical, public :: LCH_NO_FLUX type(SV_t), public :: SVI character(len=6), public, DIMENSION(:), POINTER :: CCH_NAMES character(len=6), public, DIMENSION(:), POINTER :: CAER_NAMES character(len=6), public, DIMENSION(:), POINTER :: CDSTNAMES character(len=6), public, DIMENSION(:), POINTER :: CSLTNAMES Source Code TYPE CH_ISBA_t ! CHARACTER ( LEN = 28 ) :: CCHEM_SURF_FILE ! name of general (chemical) purpose ASCII input file CHARACTER ( LEN = 6 ) :: CCH_DRY_DEP !  deposition scheme REAL , DIMENSION (:,:), POINTER :: XDEP ! final dry deposition ! velocity  for nature REAL , DIMENSION (:), POINTER :: XSOILRC_SO2 ! for SO2 REAL , DIMENSION (:), POINTER :: XSOILRC_O3 ! for O3 LOGICAL :: LCH_BIO_FLUX ! flag for the calculation of ! biogenic fluxes LOGICAL :: LCH_NO_FLUX ! flag for the calculation of ! biogenic NO fluxes TYPE ( SV_t ) :: SVI CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CCH_NAMES ! NAME OF CHEMICAL SPECIES ! (FOR DIAG ONLY) CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CAER_NAMES ! NAME OF CHEMICAL SPECIES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CDSTNAMES ! NAME OF CHEMICAL SPECIES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CSLTNAMES ! NAME OF CHEMICAL SPECIES ! END TYPE CH_ISBA_t","tags":"","loc":"type/ch_isba_t.html"},{"title":"CH_ISBA_NP_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: CH_ISBA_NP_t Contents Variables AL Source Code CH_ISBA_NP_t Components Type Visibility Attributes Name Initial type( CH_ISBA_t ), public, DIMENSION(:), POINTER :: AL => NULL() Source Code TYPE CH_ISBA_NP_t ! TYPE ( CH_ISBA_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE CH_ISBA_NP_t","tags":"","loc":"type/ch_isba_np_t.html"},{"title":"TEB_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: TEB_t Contents Variables XROAD_DIR XGARDEN XGREENROOF XBLD XROAD XCAN_HW_RATIO XBLD_HEIGHT XWALL_O_HOR XROAD_O_GRND XGARDEN_O_GRND XWALL_O_GRND XWALL_O_BLD XZ0_TOWN XSVF_ROAD XSVF_GARDEN XSVF_WALL XALB_ROOF XEMIS_ROOF XHC_ROOF XTC_ROOF XD_ROOF XROUGH_ROOF XALB_ROAD XEMIS_ROAD XHC_ROAD XTC_ROAD XD_ROAD XALB_WALL XEMIS_WALL XHC_WALL XTC_WALL XD_WALL XROUGH_WALL XRESIDENTIAL XDT_RES XDT_OFF XH_TRAFFIC XLE_TRAFFIC XH_INDUSTRY XLE_INDUSTRY XTI_ROAD XWS_ROOF XWS_ROAD XT_ROOF XT_ROAD XT_WALL_A XT_WALL_B XAC_ROOF XAC_ROAD XAC_WALL XAC_TOP XAC_ROOF_WAT XAC_ROAD_WAT XQSAT_ROOF XQSAT_ROAD XDELT_ROOF XDELT_ROAD XT_CANYON XQ_CANYON TSNOW_ROOF TSNOW_ROAD TSNOW_GARDEN Source Code TEB_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:) :: XROAD_DIR real, public, POINTER, DIMENSION(:) :: XGARDEN real, public, POINTER, DIMENSION(:) :: XGREENROOF real, public, POINTER, DIMENSION(:) :: XBLD real, public, POINTER, DIMENSION(:) :: XROAD real, public, POINTER, DIMENSION(:) :: XCAN_HW_RATIO real, public, POINTER, DIMENSION(:) :: XBLD_HEIGHT real, public, POINTER, DIMENSION(:) :: XWALL_O_HOR real, public, POINTER, DIMENSION(:) :: XROAD_O_GRND real, public, POINTER, DIMENSION(:) :: XGARDEN_O_GRND real, public, POINTER, DIMENSION(:) :: XWALL_O_GRND real, public, POINTER, DIMENSION(:) :: XWALL_O_BLD real, public, POINTER, DIMENSION(:) :: XZ0_TOWN real, public, POINTER, DIMENSION(:) :: XSVF_ROAD real, public, POINTER, DIMENSION(:) :: XSVF_GARDEN real, public, POINTER, DIMENSION(:) :: XSVF_WALL real, public, POINTER, DIMENSION(:) :: XALB_ROOF real, public, POINTER, DIMENSION(:) :: XEMIS_ROOF real, public, POINTER, DIMENSION(:,:) :: XHC_ROOF real, public, POINTER, DIMENSION(:,:) :: XTC_ROOF real, public, POINTER, DIMENSION(:,:) :: XD_ROOF real, public, POINTER, DIMENSION(:) :: XROUGH_ROOF real, public, POINTER, DIMENSION(:) :: XALB_ROAD real, public, POINTER, DIMENSION(:) :: XEMIS_ROAD real, public, POINTER, DIMENSION(:,:) :: XHC_ROAD real, public, POINTER, DIMENSION(:,:) :: XTC_ROAD real, public, POINTER, DIMENSION(:,:) :: XD_ROAD real, public, POINTER, DIMENSION(:) :: XALB_WALL real, public, POINTER, DIMENSION(:) :: XEMIS_WALL real, public, POINTER, DIMENSION(:,:) :: XHC_WALL real, public, POINTER, DIMENSION(:,:) :: XTC_WALL real, public, POINTER, DIMENSION(:,:) :: XD_WALL real, public, POINTER, DIMENSION(:) :: XROUGH_WALL real, public, POINTER, DIMENSION(:) :: XRESIDENTIAL real, public :: XDT_RES real, public :: XDT_OFF real, public, POINTER, DIMENSION(:) :: XH_TRAFFIC real, public, POINTER, DIMENSION(:) :: XLE_TRAFFIC real, public, POINTER, DIMENSION(:) :: XH_INDUSTRY real, public, POINTER, DIMENSION(:) :: XLE_INDUSTRY real, public, POINTER, DIMENSION(:) :: XTI_ROAD real, public, POINTER, DIMENSION(:) :: XWS_ROOF real, public, POINTER, DIMENSION(:) :: XWS_ROAD real, public, POINTER, DIMENSION(:,:) :: XT_ROOF real, public, POINTER, DIMENSION(:,:) :: XT_ROAD real, public, POINTER, DIMENSION(:,:) :: XT_WALL_A real, public, POINTER, DIMENSION(:,:) :: XT_WALL_B real, public, POINTER, DIMENSION(:) :: XAC_ROOF real, public, POINTER, DIMENSION(:) :: XAC_ROAD real, public, POINTER, DIMENSION(:) :: XAC_WALL real, public, POINTER, DIMENSION(:) :: XAC_TOP real, public, POINTER, DIMENSION(:) :: XAC_ROOF_WAT real, public, POINTER, DIMENSION(:) :: XAC_ROAD_WAT real, public, POINTER, DIMENSION(:) :: XQSAT_ROOF real, public, POINTER, DIMENSION(:) :: XQSAT_ROAD real, public, POINTER, DIMENSION(:) :: XDELT_ROOF real, public, POINTER, DIMENSION(:) :: XDELT_ROAD real, public, POINTER, DIMENSION(:) :: XT_CANYON real, public, POINTER, DIMENSION(:) :: XQ_CANYON type(SURF_SNOW), public :: TSNOW_ROOF type(SURF_SNOW), public :: TSNOW_ROAD type(SURF_SNOW), public :: TSNOW_GARDEN Source Code TYPE TEB_t ! TEB scheme option ! ! Geometric Parameters: ! REAL , POINTER , DIMENSION (:) :: XROAD_DIR ! Road direction (deg from North, clockwise) REAL , POINTER , DIMENSION (:) :: XGARDEN ! fraction of veg in the streets   (-) REAL , POINTER , DIMENSION (:) :: XGREENROOF ! fraction of greenroofs on roofs  (-) REAL , POINTER , DIMENSION (:) :: XBLD ! fraction of buildings            (-) REAL , POINTER , DIMENSION (:) :: XROAD ! fraction of roads                (-) REAL , POINTER , DIMENSION (:) :: XCAN_HW_RATIO ! canyon    h/W                    (-) REAL , POINTER , DIMENSION (:) :: XBLD_HEIGHT ! buildings height 'h'             (m) REAL , POINTER , DIMENSION (:) :: XWALL_O_HOR ! wall surf. / hor. surf.          (-) REAL , POINTER , DIMENSION (:) :: XROAD_O_GRND ! road surf. / (road + garden surf.) (-) REAL , POINTER , DIMENSION (:) :: XGARDEN_O_GRND ! gard. surf. / (road + garden surf.)(-) REAL , POINTER , DIMENSION (:) :: XWALL_O_GRND ! wall surf. / (road + garden surf.) (-) REAL , POINTER , DIMENSION (:) :: XWALL_O_BLD ! wall surf. / bld surf. (-) REAL , POINTER , DIMENSION (:) :: XZ0_TOWN ! roughness length for momentum    (m) REAL , POINTER , DIMENSION (:) :: XSVF_ROAD ! road sky view factor             (-) REAL , POINTER , DIMENSION (:) :: XSVF_GARDEN ! green area sky view factor       (-) REAL , POINTER , DIMENSION (:) :: XSVF_WALL ! wall sky view factor             (-) ! ! Roof parameters ! REAL , POINTER , DIMENSION (:) :: XALB_ROOF ! roof albedo                      (-) REAL , POINTER , DIMENSION (:) :: XEMIS_ROOF ! roof emissivity                  (-) REAL , POINTER , DIMENSION (:,:) :: XHC_ROOF ! roof layers heat capacity        (J/K/m3) REAL , POINTER , DIMENSION (:,:) :: XTC_ROOF ! roof layers thermal conductivity (W/K/m) REAL , POINTER , DIMENSION (:,:) :: XD_ROOF ! depth of roof layers             (m) REAL , POINTER , DIMENSION (:) :: XROUGH_ROOF ! roof roughness coef ! ! ! Road parameters ! REAL , POINTER , DIMENSION (:) :: XALB_ROAD ! road albedo                      (-) REAL , POINTER , DIMENSION (:) :: XEMIS_ROAD ! road emissivity                  (-) REAL , POINTER , DIMENSION (:,:) :: XHC_ROAD ! road layers heat capacity        (J/K/m3) REAL , POINTER , DIMENSION (:,:) :: XTC_ROAD ! road layers thermal conductivity (W/K/m) REAL , POINTER , DIMENSION (:,:) :: XD_ROAD ! depth of road layers             (m) ! ! Wall parameters ! REAL , POINTER , DIMENSION (:) :: XALB_WALL ! wall albedo                      (-) REAL , POINTER , DIMENSION (:) :: XEMIS_WALL ! wall emissivity                  (-) REAL , POINTER , DIMENSION (:,:) :: XHC_WALL ! wall layers heat capacity        (J/K/m3) REAL , POINTER , DIMENSION (:,:) :: XTC_WALL ! wall layers thermal conductivity (W/K/m) REAL , POINTER , DIMENSION (:,:) :: XD_WALL ! depth of wall layers             (m) REAL , POINTER , DIMENSION (:) :: XROUGH_WALL ! wall roughness coef ! ! Building's use type ! REAL , POINTER , DIMENSION (:) :: XRESIDENTIAL ! fraction of Residential use      (-) REAL :: XDT_RES ! target temperature change when unoccupied (K) (residential buildings) REAL :: XDT_OFF ! target temperature change when unoccupied (K) (offices buildings) ! ! anthropogenic fluxes ! REAL , POINTER , DIMENSION (:) :: XH_TRAFFIC ! anthropogenic sensible !                                                  ! heat fluxes due to traffic       (W/m2) REAL , POINTER , DIMENSION (:) :: XLE_TRAFFIC ! anthropogenic latent !                                                  ! heat fluxes due to traffic       (W/m2) REAL , POINTER , DIMENSION (:) :: XH_INDUSTRY ! anthropogenic sensible !                                                  ! heat fluxes due to factories     (W/m2) REAL , POINTER , DIMENSION (:) :: XLE_INDUSTRY ! anthropogenic latent !                                                  ! heat fluxes due to factories     (W/m2) ! ! temperatures for boundary conditions ! REAL , POINTER , DIMENSION (:) :: XTI_ROAD ! road interior temperature        (K) ! ! Prognostic variables: ! REAL , POINTER , DIMENSION (:) :: XWS_ROOF ! roof water reservoir             (kg/m2) REAL , POINTER , DIMENSION (:) :: XWS_ROAD ! road water reservoir             (kg/m2) REAL , POINTER , DIMENSION (:,:) :: XT_ROOF ! roof layer temperatures          (K) REAL , POINTER , DIMENSION (:,:) :: XT_ROAD ! road layer temperatures          (K) REAL , POINTER , DIMENSION (:,:) :: XT_WALL_A ! wall layer temperatures          (K) REAL , POINTER , DIMENSION (:,:) :: XT_WALL_B ! wall layer temperatures          (K) ! REAL , POINTER , DIMENSION (:) :: XAC_ROOF ! roof aerodynamic conductance     () REAL , POINTER , DIMENSION (:) :: XAC_ROAD ! road aerodynamic conductance     () REAL , POINTER , DIMENSION (:) :: XAC_WALL ! wall aerodynamic conductance     () REAL , POINTER , DIMENSION (:) :: XAC_TOP ! top  aerodynamic conductance     () REAL , POINTER , DIMENSION (:) :: XAC_ROOF_WAT ! water aerodynamic conductance    () REAL , POINTER , DIMENSION (:) :: XAC_ROAD_WAT ! water aerodynamic conductance    () ! REAL , POINTER , DIMENSION (:) :: XQSAT_ROOF ! humidity of saturation for roofs (kg/kg) REAL , POINTER , DIMENSION (:) :: XQSAT_ROAD ! humidity of saturation for roads (kg/kg) ! REAL , POINTER , DIMENSION (:) :: XDELT_ROOF ! humidity of saturation for roofs (-) REAL , POINTER , DIMENSION (:) :: XDELT_ROAD ! humidity of saturation for roads (-) ! ! Semi-prognostic variables: ! REAL , POINTER , DIMENSION (:) :: XT_CANYON ! canyon air temperature           (K) REAL , POINTER , DIMENSION (:) :: XQ_CANYON ! canyon air specific humidity     (kg/kg) ! ! ! Prognostic snow: ! TYPE ( SURF_SNOW ) :: TSNOW_ROOF ! snow state on roofs: !                                                  ! scheme type/option               (-) !                                                  ! number of layers                 (-) !                                                  ! snow (& liq. water) content      (kg/m2) !                                                  ! heat content                     (J/m2) !                                                  ! temperature                      (K) !                                                  ! density                          (kg m-3) TYPE ( SURF_SNOW ) :: TSNOW_ROAD ! snow state on roads: !                                                  ! scheme type/option               (-) !                                                  ! number of layers                 (-) !                                                  ! snow (& liq. water) content      (kg/m2) !                                                  ! heat content                     (J/m2) !                                                  ! temperature                      (K) !                                                  ! density                          (kg m-3) !                                                  ! density                          (kg m-3) TYPE ( SURF_SNOW ) :: TSNOW_GARDEN ! snow state on green areas: !                                                  ! scheme type/option               (-) !                                                  ! number of layers                 (-) !                                                  ! snow (& liq. water) content      (kg/m2) !                                                  ! heat content                     (J/m2) !                                                  ! temperature                      (K) !                                                  ! density                          (kg m-3) ! END TYPE TEB_t","tags":"","loc":"type/teb_t.html"},{"title":"TEB_NP_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: TEB_NP_t Contents Variables AL Source Code TEB_NP_t Components Type Visibility Attributes Name Initial type( TEB_t ), public, POINTER :: AL (:) => NULL() Source Code TYPE TEB_NP_t ! TYPE ( TEB_t ), POINTER :: AL (:) => NULL () ! END TYPE TEB_NP_t","tags":"","loc":"type/teb_np_t.html"},{"title":"DATA_SEAFLUX_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DATA_SEAFLUX_t Contents Variables TDATA_SST XDATA_SST NTIME LSST_DATA Source Code DATA_SEAFLUX_t Components Type Visibility Attributes Name Initial type(DATE_TIME), public, POINTER, DIMENSION(:) :: TDATA_SST real, public, POINTER, DIMENSION(:,:) :: XDATA_SST integer, public :: NTIME logical, public :: LSST_DATA Source Code TYPE DATA_SEAFLUX_t !------------------------------------------------------------------------------- ! TYPE ( DATE_TIME ), POINTER , DIMENSION (:) :: TDATA_SST ! date of sst field ! !------------------------------------------------------------------------------- ! REAL , POINTER , DIMENSION (:,:) :: XDATA_SST ! sea surface temperature for !                                                   ! each grid mesh                   (-) ! !------------------------------------------------------------------------------- ! INTEGER :: NTIME ! number of time data !                                                   ! for SST ! !------------------------------------------------------------------------------- ! LOGICAL :: LSST_DATA ! flag to use SST data ! !------------------------------------------------------------------------------- END TYPE DATA_SEAFLUX_t","tags":"","loc":"type/data_seaflux_t.html"},{"title":"DIAG_EVAP_ISBA_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DIAG_EVAP_ISBA_t Contents Variables LSURF_EVAP_BUDGET LWATER_BUDGET XLEG XLEGI XLEV XLES XLESL XLER XLETR XUSTAR XSNDRIFT XRESTORE XDRAIN XQSB XRUNOFF XHORT XRRVEG XMELT XMELTADV XIFLOOD XPFLOOD XLE_FLOOD XLEI_FLOOD XICEFLUX XDRIP XIRRIG_FLUX XGPP XRESP_AUTO XRESP_ECO XLELITTER XLELITTERI XDRIPLIT XRRLIT XLEV_CV XLES_CV XLETR_CV XLER_CV XLE_CV XH_CV XMELT_CV XFRZ_CV XLETR_GV XLER_GV XLE_GV XH_GV XLE_GN XEVAP_GN XH_GN XSR_GN XSWDOWN_GN XLWDOWN_GN XEVAP_G XLE_CA XH_CA XSWUP XLWUP XSWNET_V XSWNET_G XSWNET_N XSWNET_NS XLWNET_V XLWNET_G XLWNET_N XDWG XDWGI XDWR XDSWE XWATBUD XRAINFALL XSNOWFALL XRN_SN_FR XH_SN_FR XLEI_SN_FR XLE_SN_FR XGFLUX_SN_FR XLEG_SN_FR XLEGI_SN_FR XLEV_SN_FR XLETR_SN_FR XUSTAR_SN_FR XLER_SN_FR Source Code DIAG_EVAP_ISBA_t Components Type Visibility Attributes Name Initial logical, public :: LSURF_EVAP_BUDGET logical, public :: LWATER_BUDGET real, public, POINTER, DIMENSION(:) :: XLEG real, public, POINTER, DIMENSION(:) :: XLEGI real, public, POINTER, DIMENSION(:) :: XLEV real, public, POINTER, DIMENSION(:) :: XLES real, public, POINTER, DIMENSION(:) :: XLESL real, public, POINTER, DIMENSION(:) :: XLER real, public, POINTER, DIMENSION(:) :: XLETR real, public, POINTER, DIMENSION(:) :: XUSTAR real, public, POINTER, DIMENSION(:) :: XSNDRIFT real, public, POINTER, DIMENSION(:) :: XRESTORE real, public, POINTER, DIMENSION(:) :: XDRAIN real, public, POINTER, DIMENSION(:) :: XQSB real, public, POINTER, DIMENSION(:) :: XRUNOFF real, public, POINTER, DIMENSION(:) :: XHORT real, public, POINTER, DIMENSION(:) :: XRRVEG real, public, POINTER, DIMENSION(:) :: XMELT real, public, POINTER, DIMENSION(:) :: XMELTADV real, public, POINTER, DIMENSION(:) :: XIFLOOD real, public, POINTER, DIMENSION(:) :: XPFLOOD real, public, POINTER, DIMENSION(:) :: XLE_FLOOD real, public, POINTER, DIMENSION(:) :: XLEI_FLOOD real, public, POINTER, DIMENSION(:) :: XICEFLUX real, public, POINTER, DIMENSION(:) :: XDRIP real, public, POINTER, DIMENSION(:) :: XIRRIG_FLUX real, public, POINTER, DIMENSION(:) :: XGPP real, public, POINTER, DIMENSION(:) :: XRESP_AUTO real, public, POINTER, DIMENSION(:) :: XRESP_ECO real, public, POINTER, DIMENSION(:) :: XLELITTER real, public, POINTER, DIMENSION(:) :: XLELITTERI real, public, POINTER, DIMENSION(:) :: XDRIPLIT real, public, POINTER, DIMENSION(:) :: XRRLIT real, public, POINTER, DIMENSION(:) :: XLEV_CV real, public, POINTER, DIMENSION(:) :: XLES_CV real, public, POINTER, DIMENSION(:) :: XLETR_CV real, public, POINTER, DIMENSION(:) :: XLER_CV real, public, POINTER, DIMENSION(:) :: XLE_CV real, public, POINTER, DIMENSION(:) :: XH_CV real, public, POINTER, DIMENSION(:) :: XMELT_CV real, public, POINTER, DIMENSION(:) :: XFRZ_CV real, public, POINTER, DIMENSION(:) :: XLETR_GV real, public, POINTER, DIMENSION(:) :: XLER_GV real, public, POINTER, DIMENSION(:) :: XLE_GV real, public, POINTER, DIMENSION(:) :: XH_GV real, public, POINTER, DIMENSION(:) :: XLE_GN real, public, POINTER, DIMENSION(:) :: XEVAP_GN real, public, POINTER, DIMENSION(:) :: XH_GN real, public, POINTER, DIMENSION(:) :: XSR_GN real, public, POINTER, DIMENSION(:) :: XSWDOWN_GN real, public, POINTER, DIMENSION(:) :: XLWDOWN_GN real, public, POINTER, DIMENSION(:) :: XEVAP_G real, public, POINTER, DIMENSION(:) :: XLE_CA real, public, POINTER, DIMENSION(:) :: XH_CA real, public, POINTER, DIMENSION(:) :: XSWUP real, public, POINTER, DIMENSION(:) :: XLWUP real, public, POINTER, DIMENSION(:) :: XSWNET_V real, public, POINTER, DIMENSION(:) :: XSWNET_G real, public, POINTER, DIMENSION(:) :: XSWNET_N real, public, POINTER, DIMENSION(:) :: XSWNET_NS real, public, POINTER, DIMENSION(:) :: XLWNET_V real, public, POINTER, DIMENSION(:) :: XLWNET_G real, public, POINTER, DIMENSION(:) :: XLWNET_N real, public, POINTER, DIMENSION(:) :: XDWG real, public, POINTER, DIMENSION(:) :: XDWGI real, public, POINTER, DIMENSION(:) :: XDWR real, public, POINTER, DIMENSION(:) :: XDSWE real, public, POINTER, DIMENSION(:) :: XWATBUD real, public, POINTER, DIMENSION(:) :: XRAINFALL real, public, POINTER, DIMENSION(:) :: XSNOWFALL real, public, POINTER, DIMENSION(:) :: XRN_SN_FR real, public, POINTER, DIMENSION(:) :: XH_SN_FR real, public, POINTER, DIMENSION(:) :: XLEI_SN_FR real, public, POINTER, DIMENSION(:) :: XLE_SN_FR real, public, POINTER, DIMENSION(:) :: XGFLUX_SN_FR real, public, POINTER, DIMENSION(:) :: XLEG_SN_FR real, public, POINTER, DIMENSION(:) :: XLEGI_SN_FR real, public, POINTER, DIMENSION(:) :: XLEV_SN_FR real, public, POINTER, DIMENSION(:) :: XLETR_SN_FR real, public, POINTER, DIMENSION(:) :: XUSTAR_SN_FR real, public, POINTER, DIMENSION(:) :: XLER_SN_FR Source Code TYPE DIAG_EVAP_ISBA_t !------------------------------------------------------------------------------ ! LOGICAL :: LSURF_EVAP_BUDGET ! flag for all terms of evaporation LOGICAL :: LWATER_BUDGET ! flag for isba water budget including input ! fluxes (rain and snow) and reservoir tendencies ! !* variables for each patch ! REAL , POINTER , DIMENSION (:) :: XLEG ! latent heat of evaporation over the ground   (W/m2) REAL , POINTER , DIMENSION (:) :: XLEGI ! surface soil ice sublimation                 (W/m2) REAL , POINTER , DIMENSION (:) :: XLEV ! latent heat of evaporation over vegetation   (W/m2) REAL , POINTER , DIMENSION (:) :: XLES ! latent heat of sublimation over the snow     (W/m2) REAL , POINTER , DIMENSION (:) :: XLESL ! latent heat of evaporation over the snow     (W/m2) REAL , POINTER , DIMENSION (:) :: XLER ! evaporation from canopy water interception   (W/m2) REAL , POINTER , DIMENSION (:) :: XLETR ! evapotranspiration of the vegetation         (W/m2) REAL , POINTER , DIMENSION (:) :: XUSTAR ! friction velocity from snow-free !                                               ! surface (ISBA-ES:3-L)                         (m/s REAL , POINTER , DIMENSION (:) :: XSNDRIFT ! blowing snow sublimation (ES or Crocus)      (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XRESTORE ! surface energy budget restore term            (W/m2) REAL , POINTER , DIMENSION (:) :: XDRAIN ! soil drainage flux                           (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XQSB ! lateral subsurface flux (dif option)         (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XRUNOFF ! sub-grid and supersaturation runoff          (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XHORT ! sub-grid Horton runoff from the SGH scheme   (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XRRVEG !  precipitation intercepted by the vegetation (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XMELT ! snow melt                                    (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XMELTADV ! advective energy from snow melt water !                                               ! (ISBA-ES:3-L)                                 (W/m2) REAL , POINTER , DIMENSION (:) :: XIFLOOD ! Floodplains infiltration                     (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XPFLOOD ! Precipitation intercepted by the floodplains (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XLE_FLOOD ! Floodplains evapotration                     (W/m2) REAL , POINTER , DIMENSION (:) :: XLEI_FLOOD ! Floodplains evapotration                     (W/m2) REAL , POINTER , DIMENSION (:) :: XICEFLUX ! ice calving flux                             (kg/m2) REAL , POINTER , DIMENSION (:) :: XDRIP ! dripping from the vegetation reservoir       (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XIRRIG_FLUX ! irrigation rate (as soil input)              (kg/m2/s) ! REAL , POINTER , DIMENSION (:) :: XGPP ! Gross Primary Production                     (kgCO2/m2/s) REAL , POINTER , DIMENSION (:) :: XRESP_AUTO ! Autotrophic respiration                      (kgCO2/m2/s) REAL , POINTER , DIMENSION (:) :: XRESP_ECO ! Ecosystem respiration                        (kgCO2/m2/s) ! ! REAL , POINTER , DIMENSION (:) :: XLELITTER ! MEB: interception evaporation from understory vegetation [W/m2] REAL , POINTER , DIMENSION (:) :: XLELITTERI ! MEB: interception evaporation from understory vegetation [W/m2] REAL , POINTER , DIMENSION (:) :: XDRIPLIT ! REAL , POINTER , DIMENSION (:) :: XRRLIT ! ! REAL , POINTER , DIMENSION (:) :: XLEV_CV ! MEB: total evapotranspiration from vegetation canopy overstory [W/m2] REAL , POINTER , DIMENSION (:) :: XLES_CV ! XLESC MEB: total snow sublimation from vegetation canopy overstory [W/m2] REAL , POINTER , DIMENSION (:) :: XLETR_CV ! MEB: transpiration from overstory canopy vegetation [W/m2] REAL , POINTER , DIMENSION (:) :: XLER_CV ! MEB: interception evaporation from overstory canopy vegetation [W/m2] REAL , POINTER , DIMENSION (:) :: XLE_CV ! XLE_V_C MEB: latent heat flux from vegetation canopy overstory [W/m2] REAL , POINTER , DIMENSION (:) :: XH_CV ! H_V_C MEB: sensible heat flux from vegetation canopy overstory [W/m2] REAL , POINTER , DIMENSION (:) :: XMELT_CV ! MEB: snow melt rate from the overstory snow reservoir [kg/m2/s] REAL , POINTER , DIMENSION (:) :: XFRZ_CV ! MEB: snow refreeze rate from the overstory snow reservoir [kg/m2/s] ! REAL , POINTER , DIMENSION (:) :: XLETR_GV ! MEB: transpiration from understory vegetation [W/m2] REAL , POINTER , DIMENSION (:) :: XLER_GV ! MEB: interception evaporation from understory vegetation [W/m2] REAL , POINTER , DIMENSION (:) :: XLE_GV ! LEG_C MEB: latent heat flux from understory [W/m2] REAL , POINTER , DIMENSION (:) :: XH_GV ! H_G_C MEB: sensible heat flux from understory [W/m2] ! REAL , POINTER , DIMENSION (:) :: XLE_GN ! LE_N_C MEB: latent heat flux from the snow on the ground [W/m2] !      NOTE total latent heat flux from the snowpack !      possibly includes a contribution from snow covering the canopy REAL , POINTER , DIMENSION (:) :: XEVAP_GN ! EVAP_N_C MEB: Total evap from snow on the ground to canopy air space  [kg/m2/s] REAL , POINTER , DIMENSION (:) :: XH_GN ! H_N_C MEB: sensible heat flux from the snow on the ground [W/m2] !      NOTE total sensible heat flux from the snowpack !      possibly includes a contribution from snow covering the canopy REAL , POINTER , DIMENSION (:) :: XSR_GN ! MEB: snow unloading rate from the overstory reservoir [kg/m2/s] REAL , POINTER , DIMENSION (:) :: XSWDOWN_GN ! MEB: total shortwave radiation transmitted through the canopy !      reaching the snowpack/ground understory [W/m2] REAL , POINTER , DIMENSION (:) :: XLWDOWN_GN ! MEB: total shortwave radiation transmitted through and emitted by the canopy !      reaching the snowpack/ground understory (explicit part) [W/m2] ! REAL , POINTER , DIMENSION (:) :: XEVAP_G ! EVAP_G_C MEB: Total evap from ground to canopy air space [kg/m2/s] REAL , POINTER , DIMENSION (:) :: XLE_CA ! LE_C_A MEB: latent heat flux from canopy air space to the atmosphere [W/m2] !      NOTE total latent heat flux to the atmosphere also possibly !      includes a contribution from snow covering the canopy REAL , POINTER , DIMENSION (:) :: XH_CA ! H_C_A MEB: sensible heat flux from canopy air space to the atmosphere [W/m2] !      NOTE total sensible heat flux to the atmosphere also possibly !      includes a contribution from snow covering the canopy ! REAL , POINTER , DIMENSION (:) :: XSWUP ! MEB: net *total* (surface) upwelling shortwave radiation to atmosphere [W/m2] REAL , POINTER , DIMENSION (:) :: XLWUP ! MEB: net *total* (surface) upwelling longwave radiation to atmosphere [W/m2] REAL , POINTER , DIMENSION (:) :: XSWNET_V ! MEB: net vegetation canopy shortwave radiation [W/m2] REAL , POINTER , DIMENSION (:) :: XSWNET_G ! MEB: net ground shortwave radiation [W/m2] REAL , POINTER , DIMENSION (:) :: XSWNET_N ! MEB: net snow shortwave radiation [W/m2] REAL , POINTER , DIMENSION (:) :: XSWNET_NS ! MEB: net snow shortwave radiation for *surface* layer !     (i.e. net snow shortwave radiation less absorbed radiation) [W/m2] REAL , POINTER , DIMENSION (:) :: XLWNET_V ! MEB: net vegetation canopy longwave radiation [W/m2] REAL , POINTER , DIMENSION (:) :: XLWNET_G ! MEB: net ground longwave radiation [W/m2] REAL , POINTER , DIMENSION (:) :: XLWNET_N ! MEB: net snow longwave radiation [W/m2] ! ! REAL , POINTER , DIMENSION (:) :: XDWG ! liquid soil moisture time tendencies         (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XDWGI ! solid soil moisture time tendencies          (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XDWR ! canopy water time tendencies                 (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XDSWE ! snow water equivalent time tendencies        (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XWATBUD ! ISBA water budget                            (kg/m2/s) ! REAL , POINTER , DIMENSION (:) :: XRAINFALL ! input rainfall rate for LWATER_BUDGET        (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XSNOWFALL ! input snowfall rate for LWATER_BUDGET        (kg/m2/s) ! ! Snowfree diagnostics ! REAL , POINTER , DIMENSION (:) :: XRN_SN_FR REAL , POINTER , DIMENSION (:) :: XH_SN_FR REAL , POINTER , DIMENSION (:) :: XLEI_SN_FR REAL , POINTER , DIMENSION (:) :: XLE_SN_FR REAL , POINTER , DIMENSION (:) :: XGFLUX_SN_FR ! REAL , POINTER , DIMENSION (:) :: XLEG_SN_FR REAL , POINTER , DIMENSION (:) :: XLEGI_SN_FR REAL , POINTER , DIMENSION (:) :: XLEV_SN_FR REAL , POINTER , DIMENSION (:) :: XLETR_SN_FR REAL , POINTER , DIMENSION (:) :: XUSTAR_SN_FR REAL , POINTER , DIMENSION (:) :: XLER_SN_FR ! !------------------------------------------------------------------------------ ! END TYPE DIAG_EVAP_ISBA_t","tags":"","loc":"type/diag_evap_isba_t.html"},{"title":"DIAG_EVAP_ISBA_NP_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DIAG_EVAP_ISBA_NP_t Contents Variables AL Source Code DIAG_EVAP_ISBA_NP_t Components Type Visibility Attributes Name Initial type( DIAG_EVAP_ISBA_t ), public, POINTER :: AL (:) => NULL() Source Code TYPE DIAG_EVAP_ISBA_NP_t ! TYPE ( DIAG_EVAP_ISBA_t ), POINTER :: AL (:) => NULL () ! END TYPE DIAG_EVAP_ISBA_NP_t","tags":"","loc":"type/diag_evap_isba_np_t.html"},{"title":"SLT_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: SLT_t Contents Variables XEMISRADIUS_SLT XEMISSIG_SLT Source Code SLT_t Components Type Visibility Attributes Name Initial real, public, DIMENSION(:), POINTER :: XEMISRADIUS_SLT real, public, DIMENSION(:), POINTER :: XEMISSIG_SLT Source Code TYPE SLT_t REAL , DIMENSION (:), POINTER :: XEMISRADIUS_SLT ! Number median radius for each source mode REAL , DIMENSION (:), POINTER :: XEMISSIG_SLT ! sigma for each source mode END TYPE SLT_t","tags":"","loc":"type/slt_t.html"},{"title":"BEM_OPTIONS_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: BEM_OPTIONS_t Contents Variables NFLOOR_LAYER CCOOL_COIL CHEAT_COIL LAUTOSIZE Source Code BEM_OPTIONS_t Components Type Visibility Attributes Name Initial integer, public :: NFLOOR_LAYER character(len=6), public :: CCOOL_COIL character(len=6), public :: CHEAT_COIL logical, public :: LAUTOSIZE Source Code TYPE BEM_OPTIONS_t ! BLD scheme option ! ! Number of layers ! INTEGER :: NFLOOR_LAYER ! number of layers in walls CHARACTER ( LEN = 6 ) :: CCOOL_COIL ! type of cooling coil CHARACTER ( LEN = 6 ) :: CHEAT_COIL ! type of heating coil LOGICAL :: LAUTOSIZE ! Flag to activate autosize calculations ! END TYPE BEM_OPTIONS_t","tags":"","loc":"type/bem_options_t.html"},{"title":"OCEAN_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: OCEAN_t Contents Variables LMERCATOR LCURRENT LPROGSST NTIME_COUPLING NOCTCOUNT XOCEAN_TSTEP XSEAT XSEAS XSEAU XSEAV XSEAE XSEABATH XSEAHMO XLE XLK XKMEL XKMELM XSEATEND XDTFSOL XDTFNSOL Source Code OCEAN_t Components Type Visibility Attributes Name Initial logical, public :: LMERCATOR logical, public :: LCURRENT logical, public :: LPROGSST integer, public :: NTIME_COUPLING integer, public :: NOCTCOUNT real, public :: XOCEAN_TSTEP real, public, POINTER, DIMENSION(:,:) :: XSEAT real, public, POINTER, DIMENSION(:,:) :: XSEAS real, public, POINTER, DIMENSION(:,:) :: XSEAU real, public, POINTER, DIMENSION(:,:) :: XSEAV real, public, POINTER, DIMENSION(:,:) :: XSEAE real, public, POINTER, DIMENSION(:,:) :: XSEABATH real, public, POINTER, DIMENSION(:) :: XSEAHMO real, public, POINTER, DIMENSION(:,:) :: XLE real, public, POINTER, DIMENSION(:,:) :: XLK real, public, POINTER, DIMENSION(:,:) :: XKMEL real, public, POINTER, DIMENSION(:,:) :: XKMELM real, public, POINTER, DIMENSION(:) :: XSEATEND real, public, POINTER, DIMENSION(:,:) :: XDTFSOL real, public, POINTER, DIMENSION(:) :: XDTFNSOL Source Code TYPE OCEAN_t ! ! !   Switche for interactive coupling with oceanic model LOGICAL :: LMERCATOR !set to .true. to initialize oceanic var. from Mercator LOGICAL :: LCURRENT !set to .true. to make initialize ocean state with current LOGICAL :: LPROGSST !set to .true. to make SST evolve with tendance INTEGER :: NTIME_COUPLING ! coupling time frequency INTEGER :: NOCTCOUNT !oceanic model counter REAL :: XOCEAN_TSTEP ! time step of the oceanic 1D model ! ! General surface: ! REAL , POINTER , DIMENSION (:,:) :: XSEAT ! oceanic temperature profiles REAL , POINTER , DIMENSION (:,:) :: XSEAS ! oceanic salinity profiles REAL , POINTER , DIMENSION (:,:) :: XSEAU ! oceanic zonal current profiles REAL , POINTER , DIMENSION (:,:) :: XSEAV ! oceanic meridian current profiles REAL , POINTER , DIMENSION (:,:) :: XSEAE ! oceanic kinetic turbulent energy profiles (&#94;(1/2)) REAL , POINTER , DIMENSION (:,:) :: XSEABATH !bathymetry indice !=1 for free sea water !=0 for sea-bed REAL , POINTER , DIMENSION (:) :: XSEAHMO ! oceanic mixing lengths ! REAL , POINTER , DIMENSION (:,:) :: XLE , XLK ! oceanic mixing lengths REAL , POINTER , DIMENSION (:,:) :: XKMEL , XKMELM ! oceanic mixing coefficients ! REAL , POINTER , DIMENSION (:) :: XSEATEND ! SST tendance ! REAL , POINTER , DIMENSION (:,:) :: XDTFSOL ! Temp tendancy due to solar flux REAL , POINTER , DIMENSION (:) :: XDTFNSOL ! -------------------- non solar flux ! END TYPE OCEAN_t","tags":"","loc":"type/ocean_t.html"},{"title":"OCEAN_REL_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: OCEAN_REL_t Contents Variables XTAU_REL XQCORR LREL_CUR LREL_TS LFLUX_NULL LFLX_CORR LDIAPYCNAL XSEAU_REL XSEAV_REL XSEAT_REL XSEAS_REL Source Code OCEAN_REL_t Components Type Visibility Attributes Name Initial real, public :: XTAU_REL real, public :: XQCORR logical, public :: LREL_CUR logical, public :: LREL_TS logical, public :: LFLUX_NULL logical, public :: LFLX_CORR logical, public :: LDIAPYCNAL real, public, POINTER, DIMENSION(:,:) :: XSEAU_REL real, public, POINTER, DIMENSION(:,:) :: XSEAV_REL real, public, POINTER, DIMENSION(:,:) :: XSEAT_REL real, public, POINTER, DIMENSION(:,:) :: XSEAS_REL Source Code TYPE OCEAN_REL_t ! REAL :: XTAU_REL ! Time of relaxation  (s) ! REAL :: XQCORR ! correction coefficient  for surface fluxes  (BArnier et al. 1998) typcial val: 100. ! LOGICAL :: LREL_CUR ! flag for  relxation on current LOGICAL :: LREL_TS ! flag for relaxation on ocean temperature LOGICAL :: LFLUX_NULL ! Flag for testing zero  incoming flux at the surface ! LOGICAL :: LFLX_CORR ! Flag for  flux  correction LOGICAL :: LDIAPYCNAL ! Flag for diapycnal mixing activation ! REAL , POINTER , DIMENSION (:,:) :: XSEAU_REL ! ref. U current  profile (C) REAL , POINTER , DIMENSION (:,:) :: XSEAV_REL ! ref. V current  profile (C) REAL , POINTER , DIMENSION (:,:) :: XSEAT_REL ! ref. temperature  profile (C) REAL , POINTER , DIMENSION (:,:) :: XSEAS_REL ! ---- salinity   ---------- (%) ! END TYPE OCEAN_REL_t","tags":"","loc":"type/ocean_rel_t.html"},{"title":"DATA_TEB_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DATA_TEB_t Contents Variables LDATA_BLDTYPE LDATA_BLD_AGE LDATA_USETYPE LDATA_GARDEN LDATA_GREENROOF LDATA_ROAD_DIR LDATA_BLD LDATA_BLD_HEIGHT LDATA_WALL_O_HOR LDATA_Z0_TOWN LDATA_ALB_ROOF LDATA_EMIS_ROOF LDATA_HC_ROOF LDATA_TC_ROOF LDATA_D_ROOF LDATA_ALB_ROAD LDATA_EMIS_ROAD LDATA_HC_ROAD LDATA_TC_ROAD LDATA_D_ROAD LDATA_ALB_WALL LDATA_EMIS_WALL LDATA_HC_WALL LDATA_TC_WALL LDATA_D_WALL LDATA_H_TRAFFIC LDATA_LE_TRAFFIC LDATA_LE_INDUSTRY LDATA_H_INDUSTRY LDATA_ROUGH_ROOF LDATA_ROUGH_WALL LDATA_RESIDENTIAL LDATA_EMIS_PANEL LDATA_ALB_PANEL LDATA_EFF_PANEL LDATA_FRAC_PANEL NPAR_ROOF_LAYER NPAR_ROAD_LAYER NPAR_WALL_LAYER NPAR_BLDTYPE NPAR_BLD_AGE NPAR_BLDCODE NPAR_USETYPE XPAR_GARDEN XPAR_GREENROOF XPAR_ROAD_DIR XPAR_BLD XPAR_BLD_HEIGHT XPAR_WALL_O_HOR XPAR_Z0_TOWN XPAR_ALB_ROOF XPAR_EMIS_ROOF XPAR_HC_ROOF XPAR_TC_ROOF XPAR_D_ROOF XPAR_ROUGH_ROOF XPAR_ALB_ROAD XPAR_EMIS_ROAD XPAR_HC_ROAD XPAR_TC_ROAD XPAR_D_ROAD XPAR_ALB_WALL XPAR_EMIS_WALL XPAR_HC_WALL XPAR_TC_WALL XPAR_D_WALL XPAR_ROUGH_WALL XPAR_H_TRAFFIC XPAR_LE_TRAFFIC XPAR_H_INDUSTRY XPAR_LE_INDUSTRY XPAR_EMIS_PANEL XPAR_ALB_PANEL XPAR_EFF_PANEL XPAR_FRAC_PANEL XPAR_RESIDENTIAL Source Code DATA_TEB_t Components Type Visibility Attributes Name Initial logical, public :: LDATA_BLDTYPE logical, public :: LDATA_BLD_AGE logical, public :: LDATA_USETYPE logical, public :: LDATA_GARDEN logical, public :: LDATA_GREENROOF logical, public :: LDATA_ROAD_DIR logical, public :: LDATA_BLD logical, public :: LDATA_BLD_HEIGHT logical, public :: LDATA_WALL_O_HOR logical, public :: LDATA_Z0_TOWN logical, public :: LDATA_ALB_ROOF logical, public :: LDATA_EMIS_ROOF logical, public :: LDATA_HC_ROOF logical, public :: LDATA_TC_ROOF logical, public :: LDATA_D_ROOF logical, public :: LDATA_ALB_ROAD logical, public :: LDATA_EMIS_ROAD logical, public :: LDATA_HC_ROAD logical, public :: LDATA_TC_ROAD logical, public :: LDATA_D_ROAD logical, public :: LDATA_ALB_WALL logical, public :: LDATA_EMIS_WALL logical, public :: LDATA_HC_WALL logical, public :: LDATA_TC_WALL logical, public :: LDATA_D_WALL logical, public :: LDATA_H_TRAFFIC logical, public :: LDATA_LE_TRAFFIC logical, public :: LDATA_LE_INDUSTRY logical, public :: LDATA_H_INDUSTRY logical, public :: LDATA_ROUGH_ROOF logical, public :: LDATA_ROUGH_WALL logical, public :: LDATA_RESIDENTIAL logical, public :: LDATA_EMIS_PANEL logical, public :: LDATA_ALB_PANEL logical, public :: LDATA_EFF_PANEL logical, public :: LDATA_FRAC_PANEL integer, public :: NPAR_ROOF_LAYER integer, public :: NPAR_ROAD_LAYER integer, public :: NPAR_WALL_LAYER integer, public, POINTER, DIMENSION(:) :: NPAR_BLDTYPE integer, public, POINTER, DIMENSION(:) :: NPAR_BLD_AGE integer, public, POINTER, DIMENSION(:) :: NPAR_BLDCODE integer, public, POINTER, DIMENSION(:) :: NPAR_USETYPE real, public, POINTER, DIMENSION(:) :: XPAR_GARDEN real, public, POINTER, DIMENSION(:) :: XPAR_GREENROOF real, public, POINTER, DIMENSION(:) :: XPAR_ROAD_DIR real, public, POINTER, DIMENSION(:) :: XPAR_BLD real, public, POINTER, DIMENSION(:) :: XPAR_BLD_HEIGHT real, public, POINTER, DIMENSION(:) :: XPAR_WALL_O_HOR real, public, POINTER, DIMENSION(:) :: XPAR_Z0_TOWN real, public, POINTER, DIMENSION(:) :: XPAR_ALB_ROOF real, public, POINTER, DIMENSION(:) :: XPAR_EMIS_ROOF real, public, POINTER, DIMENSION(:,:) :: XPAR_HC_ROOF real, public, POINTER, DIMENSION(:,:) :: XPAR_TC_ROOF real, public, POINTER, DIMENSION(:,:) :: XPAR_D_ROOF real, public, POINTER, DIMENSION(:) :: XPAR_ROUGH_ROOF real, public, POINTER, DIMENSION(:) :: XPAR_ALB_ROAD real, public, POINTER, DIMENSION(:) :: XPAR_EMIS_ROAD real, public, POINTER, DIMENSION(:,:) :: XPAR_HC_ROAD real, public, POINTER, DIMENSION(:,:) :: XPAR_TC_ROAD real, public, POINTER, DIMENSION(:,:) :: XPAR_D_ROAD real, public, POINTER, DIMENSION(:) :: XPAR_ALB_WALL real, public, POINTER, DIMENSION(:) :: XPAR_EMIS_WALL real, public, POINTER, DIMENSION(:,:) :: XPAR_HC_WALL real, public, POINTER, DIMENSION(:,:) :: XPAR_TC_WALL real, public, POINTER, DIMENSION(:,:) :: XPAR_D_WALL real, public, POINTER, DIMENSION(:) :: XPAR_ROUGH_WALL real, public, POINTER, DIMENSION(:) :: XPAR_H_TRAFFIC real, public, POINTER, DIMENSION(:) :: XPAR_LE_TRAFFIC real, public, POINTER, DIMENSION(:) :: XPAR_H_INDUSTRY real, public, POINTER, DIMENSION(:) :: XPAR_LE_INDUSTRY real, public, POINTER, DIMENSION(:) :: XPAR_EMIS_PANEL real, public, POINTER, DIMENSION(:) :: XPAR_ALB_PANEL real, public, POINTER, DIMENSION(:) :: XPAR_EFF_PANEL real, public, POINTER, DIMENSION(:) :: XPAR_FRAC_PANEL real, public, POINTER, DIMENSION(:) :: XPAR_RESIDENTIAL Source Code TYPE DATA_TEB_t ! LOGICAL :: LDATA_BLDTYPE LOGICAL :: LDATA_BLD_AGE LOGICAL :: LDATA_USETYPE LOGICAL :: LDATA_GARDEN LOGICAL :: LDATA_GREENROOF LOGICAL :: LDATA_ROAD_DIR LOGICAL :: LDATA_BLD LOGICAL :: LDATA_BLD_HEIGHT LOGICAL :: LDATA_WALL_O_HOR LOGICAL :: LDATA_Z0_TOWN LOGICAL :: LDATA_ALB_ROOF LOGICAL :: LDATA_EMIS_ROOF LOGICAL :: LDATA_HC_ROOF LOGICAL :: LDATA_TC_ROOF LOGICAL :: LDATA_D_ROOF LOGICAL :: LDATA_ALB_ROAD LOGICAL :: LDATA_EMIS_ROAD LOGICAL :: LDATA_HC_ROAD LOGICAL :: LDATA_TC_ROAD LOGICAL :: LDATA_D_ROAD LOGICAL :: LDATA_ALB_WALL LOGICAL :: LDATA_EMIS_WALL LOGICAL :: LDATA_HC_WALL LOGICAL :: LDATA_TC_WALL LOGICAL :: LDATA_D_WALL LOGICAL :: LDATA_H_TRAFFIC LOGICAL :: LDATA_LE_TRAFFIC LOGICAL :: LDATA_LE_INDUSTRY LOGICAL :: LDATA_H_INDUSTRY LOGICAL :: LDATA_ROUGH_ROOF LOGICAL :: LDATA_ROUGH_WALL LOGICAL :: LDATA_RESIDENTIAL LOGICAL :: LDATA_EMIS_PANEL LOGICAL :: LDATA_ALB_PANEL LOGICAL :: LDATA_EFF_PANEL LOGICAL :: LDATA_FRAC_PANEL ! ! Number of layers in the specification of thermal characteristics ! INTEGER :: NPAR_ROOF_LAYER ! number of layers in roofs INTEGER :: NPAR_ROAD_LAYER ! number of layers in roads INTEGER :: NPAR_WALL_LAYER ! number of layers in walls ! ! ! Geometric Parameters: ! INTEGER , POINTER , DIMENSION (:) :: NPAR_BLDTYPE ! type of buidlings INTEGER , POINTER , DIMENSION (:) :: NPAR_BLD_AGE ! date of construction of buildings INTEGER , POINTER , DIMENSION (:) :: NPAR_BLDCODE ! code for buildings (type+age) INTEGER , POINTER , DIMENSION (:) :: NPAR_USETYPE ! type of use in the buildings REAL , POINTER , DIMENSION (:) :: XPAR_GARDEN ! fraction of veg in the streets   (-) REAL , POINTER , DIMENSION (:) :: XPAR_GREENROOF ! fraction of greenroofs on roofs  (-) REAL , POINTER , DIMENSION (:) :: XPAR_ROAD_DIR ! road direction (deg from North, clockwise) REAL , POINTER , DIMENSION (:) :: XPAR_BLD ! fraction of buildings            (-) REAL , POINTER , DIMENSION (:) :: XPAR_BLD_HEIGHT ! buildings height 'h'             (m) REAL , POINTER , DIMENSION (:) :: XPAR_WALL_O_HOR ! wall surf. / hor. surf.          (-) REAL , POINTER , DIMENSION (:) :: XPAR_Z0_TOWN ! roughness length for momentum    (m) ! ! Roof parameters ! REAL , POINTER , DIMENSION (:) :: XPAR_ALB_ROOF ! roof albedo                      (-) REAL , POINTER , DIMENSION (:) :: XPAR_EMIS_ROOF ! roof emissivity                  (-) REAL , POINTER , DIMENSION (:,:) :: XPAR_HC_ROOF ! roof layers heat capacity        (J/K/m3) REAL , POINTER , DIMENSION (:,:) :: XPAR_TC_ROOF ! roof layers thermal conductivity (W/K/m) REAL , POINTER , DIMENSION (:,:) :: XPAR_D_ROOF ! depth of roof layers             (m) REAL , POINTER , DIMENSION (:) :: XPAR_ROUGH_ROOF ! outside roof roughness coef ! ! ! Road parameters ! REAL , POINTER , DIMENSION (:) :: XPAR_ALB_ROAD ! road albedo                      (-) REAL , POINTER , DIMENSION (:) :: XPAR_EMIS_ROAD ! road emissivity                  (-) REAL , POINTER , DIMENSION (:,:) :: XPAR_HC_ROAD ! road layers heat capacity        (J/K/m3) REAL , POINTER , DIMENSION (:,:) :: XPAR_TC_ROAD ! road layers thermal conductivity (W/K/m) REAL , POINTER , DIMENSION (:,:) :: XPAR_D_ROAD ! depth of road layers             (m) ! ! Wall parameters ! REAL , POINTER , DIMENSION (:) :: XPAR_ALB_WALL ! wall albedo                      (-) REAL , POINTER , DIMENSION (:) :: XPAR_EMIS_WALL ! wall emissivity                  (-) REAL , POINTER , DIMENSION (:,:) :: XPAR_HC_WALL ! wall layers heat capacity        (J/K/m3) REAL , POINTER , DIMENSION (:,:) :: XPAR_TC_WALL ! wall layers thermal conductivity (W/K/m) REAL , POINTER , DIMENSION (:,:) :: XPAR_D_WALL ! depth of wall layers             (m) REAL , POINTER , DIMENSION (:) :: XPAR_ROUGH_WALL ! outside wall roughness coef ! ! anthropogenic fluxes ! REAL , POINTER , DIMENSION (:) :: XPAR_H_TRAFFIC ! anthropogenic sensible !                                                  ! heat fluxes due to traffic       (W/m2) REAL , POINTER , DIMENSION (:) :: XPAR_LE_TRAFFIC ! anthropogenic latent !                                                  ! heat fluxes due to traffic       (W/m2) REAL , POINTER , DIMENSION (:) :: XPAR_H_INDUSTRY ! anthropogenic sensible !                                                  ! heat fluxes due to factories     (W/m2) REAL , POINTER , DIMENSION (:) :: XPAR_LE_INDUSTRY ! anthropogenic latent !                                                  ! heat fluxes due to factories     (W/m2) ! solar panels ! REAL , POINTER , DIMENSION (:) :: XPAR_EMIS_PANEL ! emissivity of solar panel      (-) REAL , POINTER , DIMENSION (:) :: XPAR_ALB_PANEL ! albedo     of solar panel      (-) REAL , POINTER , DIMENSION (:) :: XPAR_EFF_PANEL ! efficiency of solar panel      (-) REAL , POINTER , DIMENSION (:) :: XPAR_FRAC_PANEL ! fraction   of solar panel      (-) ! ! fraction of residential use ! REAL , POINTER , DIMENSION (:) :: XPAR_RESIDENTIAL ! fraction of residential use    (-) ! END TYPE DATA_TEB_t","tags":"","loc":"type/data_teb_t.html"},{"title":"TEB_PANEL_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: TEB_PANEL_t Contents Variables XEMIS_PANEL XALB_PANEL XEFF_PANEL XFRAC_PANEL XTHER_PRODC_DAY Source Code TEB_PANEL_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:) :: XEMIS_PANEL real, public, POINTER, DIMENSION(:) :: XALB_PANEL real, public, POINTER, DIMENSION(:) :: XEFF_PANEL real, public, POINTER, DIMENSION(:) :: XFRAC_PANEL real, public, POINTER, DIMENSION(:) :: XTHER_PRODC_DAY Source Code TYPE TEB_PANEL_t ! REAL , POINTER , DIMENSION (:) :: XEMIS_PANEL ! emissivity of solar panels               (-) REAL , POINTER , DIMENSION (:) :: XALB_PANEL ! albedo of soolar panels                  (-) REAL , POINTER , DIMENSION (:) :: XEFF_PANEL ! Efficiency coefficient of solar panels   (-) REAL , POINTER , DIMENSION (:) :: XFRAC_PANEL ! Fraction of SOLAR panels on roofs        (-) REAL , POINTER , DIMENSION (:) :: XTHER_PRODC_DAY ! Present day integrated thermal production of energy    (J/m2 panel) ! END TYPE TEB_PANEL_t","tags":"","loc":"type/teb_panel_t.html"},{"title":"CH_EMIS_SNAP_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: CH_EMIS_SNAP_t Contents Variables NEMIS_NBR CCONVERSION CSNAP_TIME_REF CEMIS_NAME CEMIS_COMMENT XEMIS_FIELDS_SNAP XEMIS_FIELDS XDELTA_LEGAL_TIME NEMIS_SNAP NSNAP_M NSNAP_D NSNAP_H XSNAP_MONTHLY XSNAP_DAILY XSNAP_HOURLY XCONVERSION TSPRONOSLIST Source Code CH_EMIS_SNAP_t Components Type Visibility Attributes Name Initial integer, public :: NEMIS_NBR character(len=3), public :: CCONVERSION character(len=5), public :: CSNAP_TIME_REF character(len=12), public, DIMENSION(:), POINTER :: CEMIS_NAME character(len=40), public, DIMENSION(:), POINTER :: CEMIS_COMMENT real, public, DIMENSION(:,:,:), POINTER :: XEMIS_FIELDS_SNAP real, public, DIMENSION(:,:), POINTER :: XEMIS_FIELDS real, public, DIMENSION(:), POINTER :: XDELTA_LEGAL_TIME integer, public :: NEMIS_SNAP integer, public :: NSNAP_M integer, public :: NSNAP_D integer, public :: NSNAP_H real, public, DIMENSION(:,:,:), POINTER :: XSNAP_MONTHLY real, public, DIMENSION(:,:,:), POINTER :: XSNAP_DAILY real, public, DIMENSION(:,:,:), POINTER :: XSNAP_HOURLY real, public, DIMENSION(:), POINTER :: XCONVERSION type(PRONOSVAR_T), public, POINTER :: TSPRONOSLIST Source Code TYPE CH_EMIS_SNAP_t ! INTEGER :: NEMIS_NBR !                          ! number of chemical pgd fields chosen by user CHARACTER ( LEN = 3 ) :: CCONVERSION !                          ! Unit conversion code CHARACTER ( LEN = 5 ) :: CSNAP_TIME_REF !                          ! Reference time for Snap temporal profiles !                          !  'UTC  ' : UTC   time !                          !  'SOLAR' : SOLAR time !                          !  'LEGAL' : LEGAL time !                          ! CHARACTER ( LEN = 12 ), DIMENSION (:), POINTER :: CEMIS_NAME !                          ! name of the chemical fields (emitted species) CHARACTER ( LEN = 40 ), DIMENSION (:), POINTER :: CEMIS_COMMENT !                          ! comment on the chemical fields (emitted species) ! REAL , DIMENSION (:,:,:), POINTER :: XEMIS_FIELDS_SNAP ! Emission factor for !                                                         ! each chemical specie and !                                                         ! each snap REAL , DIMENSION (:,:), POINTER :: XEMIS_FIELDS ! Emission for each specie !                                                         ! (at a given time taking into !                                                         ! account all snaps) REAL , DIMENSION (:), POINTER :: XDELTA_LEGAL_TIME ! Difference (in hours)) between !                                                         ! Legal time and UTC time INTEGER :: NEMIS_SNAP ! number of snaps INTEGER :: NSNAP_M ! number of months INTEGER :: NSNAP_D ! number of days INTEGER :: NSNAP_H ! number of hours REAL , DIMENSION (:,:,:), POINTER :: XSNAP_MONTHLY REAL , DIMENSION (:,:,:), POINTER :: XSNAP_DAILY REAL , DIMENSION (:,:,:), POINTER :: XSNAP_HOURLY REAL , DIMENSION (:), POINTER :: XCONVERSION ! conversion factor ! TYPE ( PRONOSVAR_T ), POINTER :: TSPRONOSLIST ! Head pointer on pronostic !                                                              variables list !------------------------------------------------------------------------------- ! END TYPE CH_EMIS_SNAP_t","tags":"","loc":"type/ch_emis_snap_t.html"},{"title":"DATA_TSZ0_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DATA_TSZ0_t Contents Variables NTIME XDATA_DTS XDATA_DHUGRD Source Code DATA_TSZ0_t Components Type Visibility Attributes Name Initial integer, public :: NTIME real, public, POINTER, DIMENSION(:) :: XDATA_DTS real, public, POINTER, DIMENSION(:) :: XDATA_DHUGRD Source Code TYPE DATA_TSZ0_t !------------------------------------------------------------------------------- INTEGER :: NTIME REAL , POINTER , DIMENSION (:) :: XDATA_DTS REAL , POINTER , DIMENSION (:) :: XDATA_DHUGRD !------------------------------------------------------------------------------- END TYPE DATA_TSZ0_t","tags":"","loc":"type/data_tsz0_t.html"},{"title":"DATA_COVER_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DATA_COVER_t Contents Variables XDATA_WEIGHT XDATA_TOWN XDATA_NATURE XDATA_SEA XDATA_WATER XDATA_VEGTYPE XDATA_GARDEN XDATA_BLD XDATA_WALL_O_HOR LGARDEN NYEAR Source Code DATA_COVER_t Components Type Visibility Attributes Name Initial real, public, DIMENSION(:,:,:), POINTER :: XDATA_WEIGHT real, public, DIMENSION(:), POINTER :: XDATA_TOWN real, public, DIMENSION(:), POINTER :: XDATA_NATURE real, public, DIMENSION(:), POINTER :: XDATA_SEA real, public, DIMENSION(:), POINTER :: XDATA_WATER real, public, DIMENSION(:,:), POINTER :: XDATA_VEGTYPE real, public, DIMENSION(:), POINTER :: XDATA_GARDEN real, public, DIMENSION(:), POINTER :: XDATA_BLD real, public, DIMENSION(:), POINTER :: XDATA_WALL_O_HOR logical, public :: LGARDEN integer, public :: NYEAR Source Code TYPE DATA_COVER_t ! !----------------------------------------------------------------------------------------------------- ! REAL , DIMENSION (:,:,:), POINTER :: XDATA_WEIGHT ! REAL , DIMENSION (:), POINTER :: XDATA_TOWN ! artificial surfaces fraction REAL , DIMENSION (:), POINTER :: XDATA_NATURE ! natural and cul. fraction REAL , DIMENSION (:), POINTER :: XDATA_SEA ! sea fraction REAL , DIMENSION (:), POINTER :: XDATA_WATER ! inland water fraction REAL , DIMENSION (:,:), POINTER :: XDATA_VEGTYPE ! vegetation types fractions REAL , DIMENSION (:), POINTER :: XDATA_GARDEN ! garden fraction REAL , DIMENSION (:), POINTER :: XDATA_BLD ! building fraction in ! artificial areas REAL , DIMENSION (:), POINTER :: XDATA_WALL_O_HOR ! ratio of vert. surf. !                                                  ! over hor. surf. ! LOGICAL :: LGARDEN ! T: define urban green areas !                                                 ! F: no urban green areas ! INTEGER :: NYEAR ! current year for ecoclimap2 ! !----------------------------------------------------------------------------------------------------- ! END TYPE DATA_COVER_t","tags":"","loc":"type/data_cover_t.html"},{"title":"DIAG_MISC_SEAICE_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DIAG_MISC_SEAICE_t Contents Variables LDIAG_MISC_SEAICE XSIT XSND XMLT Source Code DIAG_MISC_SEAICE_t Components Type Visibility Attributes Name Initial logical, public :: LDIAG_MISC_SEAICE real, public, POINTER, DIMENSION(:) :: XSIT real, public, POINTER, DIMENSION(:) :: XSND real, public, POINTER, DIMENSION(:) :: XMLT Source Code TYPE DIAG_MISC_SEAICE_t !------------------------------------------------------------------------------ ! LOGICAL :: LDIAG_MISC_SEAICE ! flag for SeaIce variables ! !* averaged variables ! REAL , POINTER , DIMENSION (:) :: XSIT ! Sea ice thickness REAL , POINTER , DIMENSION (:) :: XSND ! Sea ice snow depth REAL , POINTER , DIMENSION (:) :: XMLT ! Sea mixed layer temp. seen by Gelato !------------------------------------------------------------------------------ ! END TYPE DIAG_MISC_SEAICE_t","tags":"","loc":"type/diag_misc_seaice_t.html"},{"title":"TEB_OPTIONS_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: TEB_OPTIONS_t Contents Variables LCANOPY LGARDEN CROAD_DIR CWALL_OPT CBLD_ATYPE CZ0H CCH_BEM CBEM CTREE LGREENROOF LHYDRO LSOLAR_PANEL LECOCLIMAP XZS XCOVER LCOVER NTEB_PATCH XTEB_PATCH NROOF_LAYER NROAD_LAYER NWALL_LAYER TTIME XTSTEP XOUT_TSTEP Source Code TEB_OPTIONS_t Components Type Visibility Attributes Name Initial logical, public :: LCANOPY logical, public :: LGARDEN character(len=4), public :: CROAD_DIR character(len=4), public :: CWALL_OPT character(len=3), public :: CBLD_ATYPE character(len=6), public :: CZ0H character(len=5), public :: CCH_BEM character(len=3), public :: CBEM character(len=3), public :: CTREE logical, public :: LGREENROOF logical, public :: LHYDRO logical, public :: LSOLAR_PANEL logical, public :: LECOCLIMAP real, public, POINTER, DIMENSION(:) :: XZS real, public, POINTER, DIMENSION(:,:) :: XCOVER logical, public, POINTER, DIMENSION(:) :: LCOVER integer, public :: NTEB_PATCH real, public, POINTER, DIMENSION(:,:) :: XTEB_PATCH integer, public :: NROOF_LAYER integer, public :: NROAD_LAYER integer, public :: NWALL_LAYER type(DATE_TIME), public :: TTIME real, public :: XTSTEP real, public :: XOUT_TSTEP Source Code TYPE TEB_OPTIONS_t ! TEB scheme option ! LOGICAL :: LCANOPY ! T: SBL scheme within the canopy ! F: no atmospheric layers below forcing level LOGICAL :: LGARDEN ! T: Urban green areas (call ISBA from TEB) ! F: No urban green areas CHARACTER ( LEN = 4 ) :: CROAD_DIR ! TEB option for road directions ! 'UNIF' : no specific direction ! 'ORIE' : many road ORIEntations ! ( one per TEB patch) CHARACTER ( LEN = 4 ) :: CWALL_OPT ! TEB option for walls ! 'UNIF' : uniform walls ! 'TWO ' : two separated walls CHARACTER ( LEN = 3 ) :: CBLD_ATYPE ! Type of averaging for walls ! 'ARI'  : Characteristics are !          linearly averaged ! 'MAJ ' : Majoritary building in !          grid mesh is chosen CHARACTER ( LEN = 6 ) :: CZ0H ! TEB option for z0h roof & road ! 'MASC95' : Mascart et al 1995 ! 'BRUT82' : Brustaert     1982 ! 'KAND07' : Kanda         2007 CHARACTER ( LEN = 5 ) :: CCH_BEM ! BEM option for roof/wall outside convective coefficient ! 'DOE-2' : DOE-2 model from ! EnergyPlus Engineering reference, p65 CHARACTER ( LEN = 3 ) :: CBEM ! TEB option for the building energy model ! 'DEF':  DEFault version force-restore model from Masson et al. 2002 ! 'BEM':  Building Energy Model Bueno et al. 2011 CHARACTER ( LEN = 3 ) :: CTREE ! TEB option for the high vegetation ! 'DEF':  DEFault version without radiative, dynamic effects or turbulent fluxes ! 'RAD':  only RADiative effects ! 'DYN':  radiative and DYNamic effects ! 'FLX':  radiative, dynamic effects, and turbulent fluxes LOGICAL :: LGREENROOF ! T: green roofs (call ISBA from TEB) LOGICAL :: LHYDRO ! T: urban subsoil and hydrology processes LOGICAL :: LSOLAR_PANEL ! T: solar panels on roofs ! ! type of initialization of vegetation: from cover types (ecoclimap) or parameters prescribed ! LOGICAL :: LECOCLIMAP ! T: parameters computed from ecoclimap !                                                ! F: they are read in the file ! ! General surface: ! REAL , POINTER , DIMENSION (:) :: XZS ! orography                        (m) REAL , POINTER , DIMENSION (:,:) :: XCOVER ! fraction of each ecosystem       (-) LOGICAL , POINTER , DIMENSION (:) :: LCOVER ! GCOVER(i)=T --> ith cover field is not 0. INTEGER :: NTEB_PATCH ! number of TEB patches REAL , POINTER , DIMENSION (:,:) :: XTEB_PATCH ! fraction of each TEB patch ! ! Number of layers ! INTEGER :: NROOF_LAYER ! number of layers in roofs INTEGER :: NROAD_LAYER ! number of layers in roads INTEGER :: NWALL_LAYER ! number of layers in walls ! ! Date: ! TYPE ( DATE_TIME ) :: TTIME ! current date and time ! ! Time-step: ! REAL :: XTSTEP ! time step for TEB ! REAL :: XOUT_TSTEP ! TEB output writing time step ! END TYPE TEB_OPTIONS_t","tags":"","loc":"type/teb_options_t.html"},{"title":"SURF_ATM_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: SURF_ATM_t Contents Variables CTOWN CNATURE CWATER CSEA XTOWN XNATURE XWATER XSEA LECOCLIMAP LECOSG LWATER_TO_NATURE LTOWN_TO_ROCK LGARDEN NSIZE_SEA NDIM_SEA NR_SEA NSIZE_WATER NDIM_WATER NR_WATER NSIZE_TOWN NDIM_TOWN NR_TOWN NSIZE_NATURE NDIM_NATURE NR_NATURE NSIZE_FULL NDIM_FULL NIMAX_SURF_ll NJMAX_SURF_ll NIMAX_SURF_LOC NJMAX_SURF_LOC XCOVER LCOVER XZS TTIME XOUT_TSTEP XRAIN XSNOW XZ0 XZ0H XQSURF Source Code SURF_ATM_t Components Type Visibility Attributes Name Initial character(len=6), public :: CTOWN character(len=6), public :: CNATURE character(len=6), public :: CWATER character(len=6), public :: CSEA real, public, POINTER, DIMENSION(:) :: XTOWN real, public, POINTER, DIMENSION(:) :: XNATURE real, public, POINTER, DIMENSION(:) :: XWATER real, public, POINTER, DIMENSION(:) :: XSEA logical, public :: LECOCLIMAP logical, public :: LECOSG logical, public :: LWATER_TO_NATURE logical, public :: LTOWN_TO_ROCK logical, public :: LGARDEN integer, public :: NSIZE_SEA integer, public :: NDIM_SEA integer, public, POINTER, DIMENSION(:) :: NR_SEA integer, public :: NSIZE_WATER integer, public :: NDIM_WATER integer, public, POINTER, DIMENSION(:) :: NR_WATER integer, public :: NSIZE_TOWN integer, public :: NDIM_TOWN integer, public, POINTER, DIMENSION(:) :: NR_TOWN integer, public :: NSIZE_NATURE integer, public :: NDIM_NATURE integer, public, POINTER, DIMENSION(:) :: NR_NATURE integer, public :: NSIZE_FULL integer, public :: NDIM_FULL integer, public :: NIMAX_SURF_ll integer, public :: NJMAX_SURF_ll integer, public :: NIMAX_SURF_LOC integer, public :: NJMAX_SURF_LOC real, public, POINTER, DIMENSION(:,:) :: XCOVER logical, public, POINTER, DIMENSION(:) :: LCOVER real, public, POINTER, DIMENSION(:) :: XZS type(DATE_TIME), public :: TTIME real, public :: XOUT_TSTEP real, public, POINTER, DIMENSION(:) :: XRAIN real, public, POINTER, DIMENSION(:) :: XSNOW real, public, POINTER, DIMENSION(:) :: XZ0 real, public, POINTER, DIMENSION(:) :: XZ0H real, public, POINTER, DIMENSION(:) :: XQSURF Source Code TYPE SURF_ATM_t ! !----------------------------------------------------------------------------------------------------- ! ! Type of each surface scheme ! CHARACTER ( LEN = 6 ) :: CTOWN ! name of the urban surface scheme CHARACTER ( LEN = 6 ) :: CNATURE ! name of the soil&vegetation surface scheme CHARACTER ( LEN = 6 ) :: CWATER ! name of the scheme for inland water CHARACTER ( LEN = 6 ) :: CSEA ! name for the ocean scheme ! !----------------------------------------------------------------------------------------------------- ! ! Surface/Tile Fractions: ! REAL , POINTER , DIMENSION (:) :: XTOWN ! urban surface fraction of the grid box   (-) REAL , POINTER , DIMENSION (:) :: XNATURE ! natural surface fraction of the grid box (-) REAL , POINTER , DIMENSION (:) :: XWATER ! inland water fraction of the grid box    (-) REAL , POINTER , DIMENSION (:) :: XSEA ! sea/ocean fraction of the grid box       (-) ! !------------------------------------------------------------------------------- ! ! type of initialization of vegetation: from cover types (ecoclimap) or parameters prescribed ! LOGICAL :: LECOCLIMAP ! T: parameters computed from ecoclimap !                                              ! F: they are read in the file ! LOGICAL :: LECOSG ! T: parameters computed from ecosg !------------------------------------------------------------------------------- ! ! change water (not lake) to nature and/or town to rock : arrange cover properly ! LOGICAL :: LWATER_TO_NATURE ! T: Change Wetland treated as inland water into nature LOGICAL :: LTOWN_TO_ROCK ! T: Change Town into Rock ! !------------------------------------------------------------------------------- ! ! include urban green areas for urbanized covers ! LOGICAL :: LGARDEN ! T: define urban green areas !                                              ! F: no urban green areas ! !----------------------------------------------------------------------------------------------------- ! ! Masks and number of grid elements for each tile surface ! ! Sea/Ocean: ! INTEGER :: NSIZE_SEA ! number of grid points by proc containing a !                                                     ! sea surface                              (-) INTEGER :: NDIM_SEA ! total number of grid points containing a !                                                     ! sea surface                             (-) INTEGER , POINTER , DIMENSION (:) :: NR_SEA ! sea/ocean surface mask                  (-) ! ! Inland Water: ! INTEGER :: NSIZE_WATER ! number of grid points containing an !                                                     ! inland water surface                    (-) INTEGER :: NDIM_WATER ! total number of grid points by proc containing an !                                                     ! inland surface INTEGER , POINTER , DIMENSION (:) :: NR_WATER ! ! Town: ! INTEGER :: NSIZE_TOWN ! number of grid points by proc containing an !                                                     ! urban surface                           (-) INTEGER :: NDIM_TOWN ! total number of grid points containing an !                                                     ! urban surface INTEGER , POINTER , DIMENSION (:) :: NR_TOWN ! urban surface mask                      (-) ! ! Natural surface: ! INTEGER :: NSIZE_NATURE ! number of grid points by proc containing a !                                                     ! natural surface                         (-) INTEGER :: NDIM_NATURE ! total number of grid points containing a !                                                     ! natural surface                         (-) INTEGER , POINTER , DIMENSION (:) :: NR_NATURE ! natural surface mask                    (-) ! ! All surfaces: ! INTEGER :: NSIZE_FULL ! total number of grid points by proc     (-) INTEGER :: NDIM_FULL ! total number of grid points             (-) ! ! global sizes of the physical domain ! INTEGER :: NIMAX_SURF_ll INTEGER :: NJMAX_SURF_ll ! ! local sizes of the physical domain ! INTEGER :: NIMAX_SURF_LOC INTEGER :: NJMAX_SURF_LOC ! !----------------------------------------------------------------------------------------------------- ! ! Surface fields (only 1 horizontal dimension) ! REAL , POINTER , DIMENSION (:,:) :: XCOVER ! fraction of each ecosystem for each grid box (-) LOGICAL , POINTER , DIMENSION (:) :: LCOVER ! GCOVER(i)=T --> ith cover field is not 0. REAL , POINTER , DIMENSION (:) :: XZS ! orography                                    (m) ! !------------------------------------------------------------------------------- ! TYPE ( DATE_TIME ) :: TTIME ! current date and time ! REAL :: XOUT_TSTEP ! output writing time step ! !----------------------------------------------------------------------------------------------------- ! ! physical fields need into the restart file for ARPEGE/ALADIN run ! REAL , POINTER , DIMENSION (:) :: XRAIN ! Rainfall rate at surface               (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XSNOW ! snowfall rate at surface               (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XZ0 ! surface roughness length for momentum  (m) REAL , POINTER , DIMENSION (:) :: XZ0H ! surface roughness length for heat      (m) REAL , POINTER , DIMENSION (:) :: XQSURF ! specific humidity at surface           (kg/kg) ! !----------------------------------------------------------------------------------------------------- ! ! END TYPE SURF_ATM_t","tags":"","loc":"type/surf_atm_t.html"},{"title":"BLD_DESC_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: BLD_DESC_t Contents Variables NDESC_BLD NDESC_AGE NDESC_CODE NDESC_USE NDESC_ROOF_LAYER NDESC_ROAD_LAYER NDESC_WALL_LAYER NDESC_FLOOR_LAYER NDESC_BLD_LIST NDESC_AGE_DATE NDESC_CODE_LIST NDESC_AGE_LIST NDESC_USE_LIST XDESC_ALB_ROOF XDESC_ALB_ROAD XDESC_ALB_WALL XDESC_EMIS_ROOF XDESC_EMIS_ROAD XDESC_EMIS_WALL XDESC_TCOOL_TARGET XDESC_THEAT_TARGET XDESC_F_WASTE_CAN XDESC_EFF_HEAT XDESC_HC_FLOOR XDESC_TC_FLOOR XDESC_D_FLOOR XDESC_HC_ROOF XDESC_TC_ROOF XDESC_D_ROOF XDESC_HC_ROAD XDESC_TC_ROAD XDESC_D_ROAD XDESC_HC_WALL XDESC_TC_WALL XDESC_D_WALL XDESC_QIN XDESC_QIN_FRAD XDESC_SHGC XDESC_U_WIN XDESC_GR XDESC_SHGC_SH XDESC_FLOOR_HEIGHT XDESC_INF XDESC_F_WATER_COND XDESC_SHADE XDESC_NATVENT XDESC_QIN_FLAT XDESC_HR_TARGET XDESC_V_VENT XDESC_COP_RAT XDESC_GREENROOF XDESC_EMIS_PANEL XDESC_ALB_PANEL XDESC_EFF_PANEL XDESC_FRAC_PANEL XDESC_RESIDENTIAL Source Code BLD_DESC_t Components Type Visibility Attributes Name Initial integer, public :: NDESC_BLD integer, public :: NDESC_AGE integer, public :: NDESC_CODE integer, public :: NDESC_USE integer, public :: NDESC_ROOF_LAYER integer, public :: NDESC_ROAD_LAYER integer, public :: NDESC_WALL_LAYER integer, public :: NDESC_FLOOR_LAYER integer, public, POINTER, DIMENSION(:) :: NDESC_BLD_LIST integer, public, POINTER, DIMENSION(:) :: NDESC_AGE_DATE integer, public, POINTER, DIMENSION(:) :: NDESC_CODE_LIST integer, public, POINTER, DIMENSION(:) :: NDESC_AGE_LIST integer, public, POINTER, DIMENSION(:) :: NDESC_USE_LIST real, public, POINTER, DIMENSION(:) :: XDESC_ALB_ROOF real, public, POINTER, DIMENSION(:) :: XDESC_ALB_ROAD real, public, POINTER, DIMENSION(:) :: XDESC_ALB_WALL real, public, POINTER, DIMENSION(:) :: XDESC_EMIS_ROOF real, public, POINTER, DIMENSION(:) :: XDESC_EMIS_ROAD real, public, POINTER, DIMENSION(:) :: XDESC_EMIS_WALL real, public, POINTER, DIMENSION(:) :: XDESC_TCOOL_TARGET real, public, POINTER, DIMENSION(:) :: XDESC_THEAT_TARGET real, public, POINTER, DIMENSION(:) :: XDESC_F_WASTE_CAN real, public, POINTER, DIMENSION(:) :: XDESC_EFF_HEAT real, public, POINTER, DIMENSION(:,:) :: XDESC_HC_FLOOR real, public, POINTER, DIMENSION(:,:) :: XDESC_TC_FLOOR real, public, POINTER, DIMENSION(:,:) :: XDESC_D_FLOOR real, public, POINTER, DIMENSION(:,:) :: XDESC_HC_ROOF real, public, POINTER, DIMENSION(:,:) :: XDESC_TC_ROOF real, public, POINTER, DIMENSION(:,:) :: XDESC_D_ROOF real, public, POINTER, DIMENSION(:,:) :: XDESC_HC_ROAD real, public, POINTER, DIMENSION(:,:) :: XDESC_TC_ROAD real, public, POINTER, DIMENSION(:,:) :: XDESC_D_ROAD real, public, POINTER, DIMENSION(:,:) :: XDESC_HC_WALL real, public, POINTER, DIMENSION(:,:) :: XDESC_TC_WALL real, public, POINTER, DIMENSION(:,:) :: XDESC_D_WALL real, public, POINTER, DIMENSION(:) :: XDESC_QIN real, public, POINTER, DIMENSION(:) :: XDESC_QIN_FRAD real, public, POINTER, DIMENSION(:) :: XDESC_SHGC real, public, POINTER, DIMENSION(:) :: XDESC_U_WIN real, public, POINTER, DIMENSION(:) :: XDESC_GR real, public, POINTER, DIMENSION(:) :: XDESC_SHGC_SH real, public, POINTER, DIMENSION(:) :: XDESC_FLOOR_HEIGHT real, public, POINTER, DIMENSION(:) :: XDESC_INF real, public, POINTER, DIMENSION(:) :: XDESC_F_WATER_COND real, public, POINTER, DIMENSION(:) :: XDESC_SHADE real, public, POINTER, DIMENSION(:) :: XDESC_NATVENT real, public, POINTER, DIMENSION(:) :: XDESC_QIN_FLAT real, public, POINTER, DIMENSION(:) :: XDESC_HR_TARGET real, public, POINTER, DIMENSION(:) :: XDESC_V_VENT real, public, POINTER, DIMENSION(:) :: XDESC_COP_RAT real, public, POINTER, DIMENSION(:) :: XDESC_GREENROOF real, public, POINTER, DIMENSION(:) :: XDESC_EMIS_PANEL real, public, POINTER, DIMENSION(:) :: XDESC_ALB_PANEL real, public, POINTER, DIMENSION(:) :: XDESC_EFF_PANEL real, public, POINTER, DIMENSION(:) :: XDESC_FRAC_PANEL real, public, POINTER, DIMENSION(:) :: XDESC_RESIDENTIAL Source Code TYPE BLD_DESC_t ! ! Number of layers ! INTEGER :: NDESC_BLD ! number of types of buildings INTEGER :: NDESC_AGE ! number of building's construction dates ranges INTEGER :: NDESC_CODE ! number of codes for buildings (merges type & age) INTEGER :: NDESC_USE ! number of types of building's uses INTEGER :: NDESC_ROOF_LAYER ! number of layers in roofs INTEGER :: NDESC_ROAD_LAYER ! number of layers in roads INTEGER :: NDESC_WALL_LAYER ! number of layers in walls INTEGER :: NDESC_FLOOR_LAYER ! number of layers in floor INTEGER , POINTER , DIMENSION (:) :: NDESC_BLD_LIST ! list of the types for buildings INTEGER , POINTER , DIMENSION (:) :: NDESC_AGE_DATE ! list of the contruction dates for buildings INTEGER , POINTER , DIMENSION (:) :: NDESC_CODE_LIST ! list of the codes for buildings INTEGER , POINTER , DIMENSION (:) :: NDESC_AGE_LIST ! list of the contruction dates' codes INTEGER , POINTER , DIMENSION (:) :: NDESC_USE_LIST ! list of the codes for building's uses ! REAL , POINTER , DIMENSION (:) :: XDESC_ALB_ROOF ! Roof albedo REAL , POINTER , DIMENSION (:) :: XDESC_ALB_ROAD ! Road albedo REAL , POINTER , DIMENSION (:) :: XDESC_ALB_WALL ! Wall albedo REAL , POINTER , DIMENSION (:) :: XDESC_EMIS_ROOF ! Roof emissivity REAL , POINTER , DIMENSION (:) :: XDESC_EMIS_ROAD ! Road emissivity REAL , POINTER , DIMENSION (:) :: XDESC_EMIS_WALL ! Wall emissivity REAL , POINTER , DIMENSION (:) :: XDESC_TCOOL_TARGET ! cooling setpoint of indoor air REAL , POINTER , DIMENSION (:) :: XDESC_THEAT_TARGET ! heating setpoint of indoor air REAL , POINTER , DIMENSION (:) :: XDESC_F_WASTE_CAN ! fraction of waste heat into the canyon REAL , POINTER , DIMENSION (:) :: XDESC_EFF_HEAT ! efficiency of the heating system REAL , POINTER , DIMENSION (:,:) :: XDESC_HC_FLOOR ! heat capacity of floor layers [J m-3 K-1] REAL , POINTER , DIMENSION (:,:) :: XDESC_TC_FLOOR ! thermal conductivity of floor layers [W m-1 K-1] REAL , POINTER , DIMENSION (:,:) :: XDESC_D_FLOOR ! thickness of floor layers [m] REAL , POINTER , DIMENSION (:,:) :: XDESC_HC_ROOF ! heat capacity of roof layers [J m-3 K-1] REAL , POINTER , DIMENSION (:,:) :: XDESC_TC_ROOF ! thermal conductivity of roof layers [W m-1 K-1] REAL , POINTER , DIMENSION (:,:) :: XDESC_D_ROOF ! thickness of roof layers [m] REAL , POINTER , DIMENSION (:,:) :: XDESC_HC_ROAD ! heat capacity of road layers [J m-3 K-1] REAL , POINTER , DIMENSION (:,:) :: XDESC_TC_ROAD ! thermal conductivity of road layers [W m-1 K-1] REAL , POINTER , DIMENSION (:,:) :: XDESC_D_ROAD ! thickness of road layers [m] REAL , POINTER , DIMENSION (:,:) :: XDESC_HC_WALL ! heat capacity of wall layers [J m-3 K-1] REAL , POINTER , DIMENSION (:,:) :: XDESC_TC_WALL ! thermal conductivity of wall layers [W m-1 K-1] REAL , POINTER , DIMENSION (:,:) :: XDESC_D_WALL ! thickness of wall layers [m] REAL , POINTER , DIMENSION (:) :: XDESC_QIN ! internal heat gains [W m-2(floor)] REAL , POINTER , DIMENSION (:) :: XDESC_QIN_FRAD ! radiant fraction of internal heat gains REAL , POINTER , DIMENSION (:) :: XDESC_SHGC ! solar transmitance of windows REAL , POINTER , DIMENSION (:) :: XDESC_U_WIN ! glazing thermal resistance [K m W-2] REAL , POINTER , DIMENSION (:) :: XDESC_GR ! glazing ratio REAL , POINTER , DIMENSION (:) :: XDESC_SHGC_SH ! solar transmitance of windows + shading REAL , POINTER , DIMENSION (:) :: XDESC_FLOOR_HEIGHT ! building floor height [m] REAL , POINTER , DIMENSION (:) :: XDESC_INF ! infiltration/ventilation flow rate [AC/H] ! REAL , POINTER , DIMENSION (:) :: XDESC_F_WATER_COND ! fraction of evaporation for condensers REAL , POINTER , DIMENSION (:) :: XDESC_SHADE ! Flag to activate shading devices 0->inactivated , 1->activated REAL , POINTER , DIMENSION (:) :: XDESC_NATVENT ! Flag to describe bld surventilation solution 0-> NONE ; 1 -> MANU ; 2-> AUTO REAL , POINTER , DIMENSION (:) :: XDESC_QIN_FLAT ! Latent franction of internal heat gains REAL , POINTER , DIMENSION (:) :: XDESC_HR_TARGET ! Relative humidity setpoint REAL , POINTER , DIMENSION (:) :: XDESC_V_VENT ! Ventilation flow rate [AC/H] REAL , POINTER , DIMENSION (:) :: XDESC_COP_RAT ! Rated COP of the cooling system REAL , POINTER , DIMENSION (:) :: XDESC_GREENROOF ! Greenroof fraction REAL , POINTER , DIMENSION (:) :: XDESC_EMIS_PANEL ! Emissivity of Solar panels REAL , POINTER , DIMENSION (:) :: XDESC_ALB_PANEL ! Albedo     of Solar panels REAL , POINTER , DIMENSION (:) :: XDESC_EFF_PANEL ! Efficiency of Solar panels REAL , POINTER , DIMENSION (:) :: XDESC_FRAC_PANEL ! Fraction   of Solar panels on roofs REAL , POINTER , DIMENSION (:) :: XDESC_RESIDENTIAL ! Fraction of residential use ! END TYPE BLD_DESC_t","tags":"","loc":"type/bld_desc_t.html"},{"title":"CANOPY_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: CANOPY_t Contents Variables NLVL XZ XU XT XQ XTKE XLMO XLM XLEPS XP XDZ XZF XDZF Source Code CANOPY_t Components Type Visibility Attributes Name Initial integer, public :: NLVL real, public, POINTER, DIMENSION(:,:) :: XZ real, public, POINTER, DIMENSION(:,:) :: XU real, public, POINTER, DIMENSION(:,:) :: XT real, public, POINTER, DIMENSION(:,:) :: XQ real, public, POINTER, DIMENSION(:,:) :: XTKE real, public, POINTER, DIMENSION(:,:) :: XLMO real, public, POINTER, DIMENSION(:,:) :: XLM real, public, POINTER, DIMENSION(:,:) :: XLEPS real, public, POINTER, DIMENSION(:,:) :: XP real, public, POINTER, DIMENSION(:,:) :: XDZ real, public, POINTER, DIMENSION(:,:) :: XZF real, public, POINTER, DIMENSION(:,:) :: XDZF Source Code TYPE CANOPY_t ! INTEGER :: NLVL ! number      of levels in canopy REAL , POINTER , DIMENSION (:,:) :: XZ ! height of middle of each level grid   (m) REAL , POINTER , DIMENSION (:,:) :: XU ! wind        at each level in canopy   (m/s) REAL , POINTER , DIMENSION (:,:) :: XT ! temperature at each level in canopy   (m/s) REAL , POINTER , DIMENSION (:,:) :: XQ ! humidity    at each level in canopy   (kg/m3) REAL , POINTER , DIMENSION (:,:) :: XTKE ! Tke         at each level in canopy   (m2/s2) REAL , POINTER , DIMENSION (:,:) :: XLMO ! Monin-Obhukov length                  (m) REAL , POINTER , DIMENSION (:,:) :: XLM ! Mixing lentgh                         (m) REAL , POINTER , DIMENSION (:,:) :: XLEPS ! Dissipative length                    (m) REAL , POINTER , DIMENSION (:,:) :: XP ! pressure    at each level in canopy   (kg/m3) ! REAL , POINTER , DIMENSION (:,:) :: XDZ ! depth       of each level in canopy   (m) REAL , POINTER , DIMENSION (:,:) :: XZF ! height of bottom of each level grid   (m) REAL , POINTER , DIMENSION (:,:) :: XDZF ! depth between  each level in canopy   (m) ! END TYPE CANOPY_t","tags":"","loc":"type/canopy_t.html"},{"title":"CH_WATFLUX_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: CH_WATFLUX_t Contents Variables CCH_DRY_DEP XDEP SVW CCH_NAMES CDSTNAMES CSLTNAMES CAER_NAMES Source Code CH_WATFLUX_t Components Type Visibility Attributes Name Initial character(len=6), public :: CCH_DRY_DEP real, public, DIMENSION(:,:), POINTER :: XDEP type(SV_t), public :: SVW character(len=6), public, DIMENSION(:), POINTER :: CCH_NAMES character(len=6), public, DIMENSION(:), POINTER :: CDSTNAMES character(len=6), public, DIMENSION(:), POINTER :: CSLTNAMES character(len=6), public, DIMENSION(:), POINTER :: CAER_NAMES Source Code TYPE CH_WATFLUX_t ! CHARACTER ( LEN = 6 ) :: CCH_DRY_DEP ! deposition scheme REAL , DIMENSION (:,:), POINTER :: XDEP ! final dry deposition ! velocity  for lakes TYPE ( SV_t ) :: SVW CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CCH_NAMES ! NAME OF CHEMICAL SPECIES ! (FOR DIAG ONLY) CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CDSTNAMES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CSLTNAMES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CAER_NAMES ! END TYPE CH_WATFLUX_t","tags":"","loc":"type/ch_watflux_t.html"},{"title":"DIAG_OCEAN_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DIAG_OCEAN_t Contents Variables LDIAG_OCEAN XTOCMOY XSOCMOY XUOCMOY XVOCMOY XDOCMOY Source Code DIAG_OCEAN_t Components Type Visibility Attributes Name Initial logical, public :: LDIAG_OCEAN real, public, POINTER, DIMENSION(:) :: XTOCMOY real, public, POINTER, DIMENSION(:) :: XSOCMOY real, public, POINTER, DIMENSION(:) :: XUOCMOY real, public, POINTER, DIMENSION(:) :: XVOCMOY real, public, POINTER, DIMENSION(:) :: XDOCMOY Source Code TYPE DIAG_OCEAN_t !------------------------------------------------------------------------------ ! LOGICAL :: LDIAG_OCEAN ! flag for ocean variables ! !* averaged variables ! REAL , POINTER , DIMENSION (:) :: XTOCMOY ! mean temperature in CMO (�C) REAL , POINTER , DIMENSION (:) :: XSOCMOY ! mean salinity in CMO (psu) REAL , POINTER , DIMENSION (:) :: XUOCMOY ! mean zonal current in CMO (m/s) REAL , POINTER , DIMENSION (:) :: XVOCMOY ! mean meridian current in CMO (m/s) REAL , POINTER , DIMENSION (:) :: XDOCMOY ! mean density in CMO (kg/m3) !------------------------------------------------------------------------------ ! END TYPE DIAG_OCEAN_t","tags":"","loc":"type/diag_ocean_t.html"},{"title":"DATE – Town Energy Balance (TEB) model API docs ","text":"type, public :: DATE Contents Variables YEAR MONTH DAY Source Code DATE Components Type Visibility Attributes Name Initial integer, public :: YEAR = 0 integer, public :: MONTH = 0 integer, public :: DAY = 0 Source Code TYPE DATE INTEGER :: YEAR = 0 INTEGER :: MONTH = 0 INTEGER :: DAY = 0 END TYPE DATE","tags":"","loc":"type/date.html"},{"title":"DATE_TIME – Town Energy Balance (TEB) model API docs ","text":"type, public :: DATE_TIME Contents Variables TDATE TIME Source Code DATE_TIME Components Type Visibility Attributes Name Initial type( DATE ), public :: TDATE real, public :: TIME = 0. Source Code TYPE DATE_TIME TYPE ( DATE ) :: TDATE REAL :: TIME = 0. END TYPE DATE_TIME","tags":"","loc":"type/date_time.html"},{"title":"DIAG_MISC_TEB_OPTIONS_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DIAG_MISC_TEB_OPTIONS_t Contents Variables LSURF_MISC_BUDGET LSURF_EVAP_BUDGET LSURF_DIAG_ALBEDO Source Code DIAG_MISC_TEB_OPTIONS_t Components Type Visibility Attributes Name Initial logical, public :: LSURF_MISC_BUDGET logical, public :: LSURF_EVAP_BUDGET logical, public :: LSURF_DIAG_ALBEDO Source Code TYPE DIAG_MISC_TEB_OPTIONS_t !------------------------------------------------------------------------------ ! LOGICAL :: LSURF_MISC_BUDGET ! flag for miscellaneous terms of teb scheme LOGICAL :: LSURF_EVAP_BUDGET ! flag for all terms of evaporation LOGICAL :: LSURF_DIAG_ALBEDO ! flag to write out diagnostic albedo ! END TYPE DIAG_MISC_TEB_OPTIONS_t","tags":"","loc":"type/diag_misc_teb_options_t.html"},{"title":"GRID_CONF_PROJ_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: GRID_CONF_PROJ_t Contents Variables NX NY XLAT0 XLON0 XLATORI XLONORI XRPK XBETA XLATC XLONC Source Code GRID_CONF_PROJ_t Components Type Visibility Attributes Name Initial integer, public :: NX integer, public :: NY real, public :: XLAT0 real, public :: XLON0 real, public :: XLATORI real, public :: XLONORI real, public :: XRPK real, public :: XBETA real, public :: XLATC real, public :: XLONC Source Code TYPE GRID_CONF_PROJ_t ! INTEGER :: NX ! number of points in X direction INTEGER :: NY ! number of points in Y direction ! REAL :: XLAT0 ! reference latitude REAL :: XLON0 ! reference longitude REAL :: XLATORI ! origin latitude REAL :: XLONORI ! origin longitude REAL :: XRPK ! projection parameter for the conformal projection REAL :: XBETA ! rotation   parameter for the conformal projection REAL :: XLATC ! centre latitude REAL :: XLONC ! centre longitude ! END TYPE GRID_CONF_PROJ_t","tags":"","loc":"type/grid_conf_proj_t.html"},{"title":"DIAG_MISC_ISBA_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DIAG_MISC_ISBA_t Contents Variables LSURF_MISC_BUDGET LSURF_DIAG_ALBEDO LSURF_MISC_DIF LPROSNOW LVOLUMETRIC_SNOWLIQ XHV XLAI XSWI XTSWI XSOIL_SWI XSOIL_TSWI XSOIL_TWG XSOIL_TWGI XSOIL_WG XSOIL_WGI XFRD2_TSWI XFRD2_TWG XFRD2_TWGI XFRD3_TSWI XFRD3_TWG XFRD3_TWGI XALT XFLT XRNSNOW XHSNOW XHPSNOW XGFLUXSNOW XUSTARSNOW XGRNDFLUX XSRSFC XRRSFC XCDSNOW XCHSNOW XSNOWDZ XSNOWDEND XSNOWSPHER XSNOWSIZE XSNOWSSA XSNOWTYPEMEPRA XSNOWRAM XSNOWSHEAR XSNOWHMASS XSNOWLIQ XSNOWTEMP XTWSNOW XTDSNOW XTTSNOW XSNDPT_1DY XSNDPT_3DY XSNDPT_5DY XSNDPT_7DY XSNSWE_1DY XSNSWE_3DY XSNSWE_5DY XSNSWE_7DY XSNRAM_SONDE XSN_WETTHCKN XSN_REFRZNTHCKN XPSNG XPSNV XPSN XFSAT XFFG XFFV XFF XSEUIL XFAPAR XFAPIR XDFAPARC XDFAPIRC XFAPAR_BS XFAPIR_BS XDLAI_EFFC XCG XC1 XC2 XWGEQ XCT XRS Source Code DIAG_MISC_ISBA_t Components Type Visibility Attributes Name Initial logical, public :: LSURF_MISC_BUDGET logical, public :: LSURF_DIAG_ALBEDO logical, public :: LSURF_MISC_DIF logical, public :: LPROSNOW logical, public :: LVOLUMETRIC_SNOWLIQ real, public, POINTER, DIMENSION(:) :: XHV real, public, POINTER, DIMENSION(:) :: XLAI real, public, POINTER, DIMENSION(:,:) :: XSWI real, public, POINTER, DIMENSION(:,:) :: XTSWI real, public, POINTER, DIMENSION(:) :: XSOIL_SWI real, public, POINTER, DIMENSION(:) :: XSOIL_TSWI real, public, POINTER, DIMENSION(:) :: XSOIL_TWG real, public, POINTER, DIMENSION(:) :: XSOIL_TWGI real, public, POINTER, DIMENSION(:) :: XSOIL_WG real, public, POINTER, DIMENSION(:) :: XSOIL_WGI real, public, POINTER, DIMENSION(:) :: XFRD2_TSWI real, public, POINTER, DIMENSION(:) :: XFRD2_TWG real, public, POINTER, DIMENSION(:) :: XFRD2_TWGI real, public, POINTER, DIMENSION(:) :: XFRD3_TSWI real, public, POINTER, DIMENSION(:) :: XFRD3_TWG real, public, POINTER, DIMENSION(:) :: XFRD3_TWGI real, public, POINTER, DIMENSION(:) :: XALT real, public, POINTER, DIMENSION(:) :: XFLT real, public, POINTER, DIMENSION(:) :: XRNSNOW real, public, POINTER, DIMENSION(:) :: XHSNOW real, public, POINTER, DIMENSION(:) :: XHPSNOW real, public, POINTER, DIMENSION(:) :: XGFLUXSNOW real, public, POINTER, DIMENSION(:) :: XUSTARSNOW real, public, POINTER, DIMENSION(:) :: XGRNDFLUX real, public, POINTER, DIMENSION(:) :: XSRSFC real, public, POINTER, DIMENSION(:) :: XRRSFC real, public, POINTER, DIMENSION(:) :: XCDSNOW real, public, POINTER, DIMENSION(:) :: XCHSNOW real, public, POINTER, DIMENSION(:,:) :: XSNOWDZ real, public, POINTER, DIMENSION(:,:) :: XSNOWDEND real, public, POINTER, DIMENSION(:,:) :: XSNOWSPHER real, public, POINTER, DIMENSION(:,:) :: XSNOWSIZE real, public, POINTER, DIMENSION(:,:) :: XSNOWSSA real, public, POINTER, DIMENSION(:,:) :: XSNOWTYPEMEPRA real, public, POINTER, DIMENSION(:,:) :: XSNOWRAM real, public, POINTER, DIMENSION(:,:) :: XSNOWSHEAR real, public, POINTER, DIMENSION(:) :: XSNOWHMASS real, public, POINTER, DIMENSION(:,:) :: XSNOWLIQ real, public, POINTER, DIMENSION(:,:) :: XSNOWTEMP real, public, POINTER, DIMENSION(:) :: XTWSNOW real, public, POINTER, DIMENSION(:) :: XTDSNOW real, public, POINTER, DIMENSION(:) :: XTTSNOW real, public, POINTER, DIMENSION(:) :: XSNDPT_1DY real, public, POINTER, DIMENSION(:) :: XSNDPT_3DY real, public, POINTER, DIMENSION(:) :: XSNDPT_5DY real, public, POINTER, DIMENSION(:) :: XSNDPT_7DY real, public, POINTER, DIMENSION(:) :: XSNSWE_1DY real, public, POINTER, DIMENSION(:) :: XSNSWE_3DY real, public, POINTER, DIMENSION(:) :: XSNSWE_5DY real, public, POINTER, DIMENSION(:) :: XSNSWE_7DY real, public, POINTER, DIMENSION(:) :: XSNRAM_SONDE real, public, POINTER, DIMENSION(:) :: XSN_WETTHCKN real, public, POINTER, DIMENSION(:) :: XSN_REFRZNTHCKN real, public, POINTER, DIMENSION(:) :: XPSNG real, public, POINTER, DIMENSION(:) :: XPSNV real, public, POINTER, DIMENSION(:) :: XPSN real, public, POINTER, DIMENSION(:) :: XFSAT real, public, POINTER, DIMENSION(:) :: XFFG real, public, POINTER, DIMENSION(:) :: XFFV real, public, POINTER, DIMENSION(:) :: XFF real, public, POINTER, DIMENSION(:) :: XSEUIL real, public, POINTER, DIMENSION(:) :: XFAPAR real, public, POINTER, DIMENSION(:) :: XFAPIR real, public, POINTER, DIMENSION(:) :: XDFAPARC real, public, POINTER, DIMENSION(:) :: XDFAPIRC real, public, POINTER, DIMENSION(:) :: XFAPAR_BS real, public, POINTER, DIMENSION(:) :: XFAPIR_BS real, public, POINTER, DIMENSION(:) :: XDLAI_EFFC real, public, POINTER, DIMENSION(:) :: XCG real, public, POINTER, DIMENSION(:) :: XC1 real, public, POINTER, DIMENSION(:) :: XC2 real, public, POINTER, DIMENSION(:) :: XWGEQ real, public, POINTER, DIMENSION(:) :: XCT real, public, POINTER, DIMENSION(:) :: XRS Source Code TYPE DIAG_MISC_ISBA_t !------------------------------------------------------------------------------ ! LOGICAL :: LSURF_MISC_BUDGET ! flag for miscellaneous terms of isba scheme LOGICAL :: LSURF_DIAG_ALBEDO ! flag to write out diagnostic albedo LOGICAL :: LSURF_MISC_DIF ! flag for miscellaneous terms of isba-dif scheme LOGICAL :: LPROSNOW ! flag for Crocus-MEPRA outputs LOGICAL :: LVOLUMETRIC_SNOWLIQ ! volumetric snow liquid water content (kg m-3) ! !* variables for each patch ! REAL , POINTER , DIMENSION (:) :: XHV ! Halstead coefficient REAL , POINTER , DIMENSION (:) :: XLAI ! leaf average index ! REAL , POINTER , DIMENSION (:,:) :: XSWI ! Soil wetness index REAL , POINTER , DIMENSION (:,:) :: XTSWI ! Total soil wetness index REAL , POINTER , DIMENSION (:) :: XSOIL_SWI ! Soil wetness index REAL , POINTER , DIMENSION (:) :: XSOIL_TSWI ! Total Soil wetness index REAL , POINTER , DIMENSION (:) :: XSOIL_TWG ! Soil water content (liquid+ice) (kg.m-2) REAL , POINTER , DIMENSION (:) :: XSOIL_TWGI ! Soil ice content (kg.m-2) REAL , POINTER , DIMENSION (:) :: XSOIL_WG ! Soil water content (liquid+ice) (m3.m-3) REAL , POINTER , DIMENSION (:) :: XSOIL_WGI ! Soil ice content (m3.m-3) ! REAL , POINTER , DIMENSION (:) :: XFRD2_TSWI ! ISBA-FR-DG2 comparable soil wetness index (DIF option) REAL , POINTER , DIMENSION (:) :: XFRD2_TWG ! ISBA-FR-DG2 comparable soil water content (liquid+ice) (DIF option) REAL , POINTER , DIMENSION (:) :: XFRD2_TWGI ! ISBA-FR-DG2 comparable soil ice content (DIF option) REAL , POINTER , DIMENSION (:) :: XFRD3_TSWI ! ISBA-FR-Deep comparable soil wetness index (DIF option) REAL , POINTER , DIMENSION (:) :: XFRD3_TWG ! ISBA-FR-Deep comparable soil water content (liquid+ice) (DIF option) REAL , POINTER , DIMENSION (:) :: XFRD3_TWGI ! ISBA-FR-Deep comparable soil ice content (DIF option) ! REAL , POINTER , DIMENSION (:) :: XALT ! Active layer thickness in permafrost area REAL , POINTER , DIMENSION (:) :: XFLT ! Frozen layer thickness in non-permmafrost area ! REAL , POINTER , DIMENSION (:) :: XRNSNOW ! net radiative flux from snow (ISBA-ES:3-L)    (W/m2) REAL , POINTER , DIMENSION (:) :: XHSNOW ! sensible heat flux from snow (ISBA-ES:3-L)    (W/m2) REAL , POINTER , DIMENSION (:) :: XHPSNOW ! heat release from rainfall (ISBA-ES:3-L)      (W/m2) REAL , POINTER , DIMENSION (:) :: XGFLUXSNOW ! net surface energy flux into snowpack !                                               ! (ISBA-ES:3-L)                                 (W/m2) REAL , POINTER , DIMENSION (:) :: XUSTARSNOW ! friction velocity  over snow !                                               ! (ISBA-ES:3-L)                                 (m/s) REAL , POINTER , DIMENSION (:) :: XGRNDFLUX ! soil/snow interface heat flux (ISBA-ES:3-L)   (W/m2) REAL , POINTER , DIMENSION (:) :: XSRSFC ! snowfall over snowpack (ISBA-ES:3-L)          (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XRRSFC ! rainfall over snowpack (ISBA-ES:3-L)          (kg/m2/s) REAL , POINTER , DIMENSION (:) :: XCDSNOW ! snow drag coefficient (ISBA-ES:3-L)           (-) REAL , POINTER , DIMENSION (:) :: XCHSNOW ! heat turbulent transfer coefficient !                                               ! (ISBA-ES:3-L)                                 (-) REAL , POINTER , DIMENSION (:,:) :: XSNOWDZ ! snow layer thicknesses                        (m) REAL , POINTER , DIMENSION (:,:) :: XSNOWDEND ! dendricity (Crocus) REAL , POINTER , DIMENSION (:,:) :: XSNOWSPHER ! sphericity (Crocus) REAL , POINTER , DIMENSION (:,:) :: XSNOWSIZE ! grain size (Crocus) REAL , POINTER , DIMENSION (:,:) :: XSNOWSSA ! snow specific surface area (Crocus) REAL , POINTER , DIMENSION (:,:) :: XSNOWTYPEMEPRA ! snow grain type (Crocus-MEPRA) REAL , POINTER , DIMENSION (:,:) :: XSNOWRAM ! snow ram resistance (Crocus-MEPRA) REAL , POINTER , DIMENSION (:,:) :: XSNOWSHEAR ! snow shear resistance (Crocus-MEPRA) ! REAL , POINTER , DIMENSION (:) :: XSNOWHMASS ! heat content change due to mass !                                           ! changes in snowpack: for budget REAL , POINTER , DIMENSION (:,:) :: XSNOWLIQ ! snow liquid water profile (ISBA-ES:3-L) REAL , POINTER , DIMENSION (:,:) :: XSNOWTEMP ! snow temperature profile  (ISBA-ES:3-L) ! REAL , POINTER , DIMENSION (:) :: XTWSNOW ! Total snow reservoir REAL , POINTER , DIMENSION (:) :: XTDSNOW ! Total snow height REAL , POINTER , DIMENSION (:) :: XTTSNOW ! Total snow temperature ! REAL , POINTER , DIMENSION (:) :: XSNDPT_1DY , XSNDPT_3DY , XSNDPT_5DY , XSNDPT_7DY ! fresh snow depth in 1, 3, 5, 7 days REAL , POINTER , DIMENSION (:) :: XSNSWE_1DY , XSNSWE_3DY , XSNSWE_5DY , XSNSWE_7DY ! fresh snow water equivalent in 1, 3, 5, 7 days REAL , POINTER , DIMENSION (:) :: XSNRAM_SONDE ! penetration depth of the ram resistance sensor (2 DaN) REAL , POINTER , DIMENSION (:) :: XSN_WETTHCKN ! Thickness of wet snow at the top of the snowpack REAL , POINTER , DIMENSION (:) :: XSN_REFRZNTHCKN ! Thickness of refrozen snow at the top of the snowpack REAL , POINTER , DIMENSION (:) :: XPSNG ! Snow fraction over ground, diag at time t REAL , POINTER , DIMENSION (:) :: XPSNV ! Snow fraction over vegetation, diag at time t REAL , POINTER , DIMENSION (:) :: XPSN ! Total Snow fraction, diag at time t ! REAL , POINTER , DIMENSION (:) :: XFSAT ! Topmodel/dt92 saturated fraction ! REAL , POINTER , DIMENSION (:) :: XFFG ! Flood fraction over ground, diag at time t REAL , POINTER , DIMENSION (:) :: XFFV ! Flood fraction over vegetation, diag at time t REAL , POINTER , DIMENSION (:) :: XFF ! Total Flood fraction, diag at time t ! REAL , POINTER , DIMENSION (:) :: XSEUIL ! Irrigation threshold ! REAL , POINTER , DIMENSION (:) :: XFAPAR ! Fapar of vegetation REAL , POINTER , DIMENSION (:) :: XFAPIR ! Fapir of vegetation REAL , POINTER , DIMENSION (:) :: XDFAPARC ! Fapar of vegetation (cumul) REAL , POINTER , DIMENSION (:) :: XDFAPIRC ! Fapir of vegetation (cumul) REAL , POINTER , DIMENSION (:) :: XFAPAR_BS ! Fapar of bare soil REAL , POINTER , DIMENSION (:) :: XFAPIR_BS ! Fapir of bare soil REAL , POINTER , DIMENSION (:) :: XDLAI_EFFC ! Effective LAI (cumul) ! REAL , POINTER , DIMENSION (:) :: XCG ! heat capacity of the ground REAL , POINTER , DIMENSION (:) :: XC1 ! coefficients for the moisure REAL , POINTER , DIMENSION (:) :: XC2 ! equation. REAL , POINTER , DIMENSION (:) :: XWGEQ ! equilibrium volumetric water !                                               ! content REAL , POINTER , DIMENSION (:) :: XCT ! area-averaged heat capacity REAL , POINTER , DIMENSION (:) :: XRS ! stomatal resistance                            (s/m) ! !------------------------------------------------------------------------------ ! END TYPE DIAG_MISC_ISBA_t","tags":"","loc":"type/diag_misc_isba_t.html"},{"title":"DIAG_MISC_ISBA_NP_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DIAG_MISC_ISBA_NP_t Contents Variables AL Source Code DIAG_MISC_ISBA_NP_t Components Type Visibility Attributes Name Initial type( DIAG_MISC_ISBA_t ), public, POINTER :: AL (:) => NULL() Source Code TYPE DIAG_MISC_ISBA_NP_t ! TYPE ( DIAG_MISC_ISBA_t ), POINTER :: AL (:) => NULL () ! END TYPE DIAG_MISC_ISBA_NP_t","tags":"","loc":"type/diag_misc_isba_np_t.html"},{"title":"ISBA_OPTIONS_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: ISBA_OPTIONS_t Contents Variables LECOCLIMAP LPAR NPATCH NGROUND_LAYER CISBA CPEDOTF CPHOTO XSOILGRID LTR_ML XRM_PATCH LSOCP LCTI LPERM LNOF CTYPE_HVEG CTYPE_LVEG CTYPE_NVEG CTYP_COV NNBIOMASS NNLITTER NNLITTLEVS NNSOILCARB LMEB_PATCH LFORC_MEASURE LMEB_LITTER LMEB_GNDRES LCANOPY CRESPSL CC1DRY CSCOND CSOILFRZ CDIFSFCOND CSNOWRES CALBEDO CCPSURF XOUT_TSTEP XTSTEP XCGMAX XCDRAG LGLACIER LCANOPY_DRAG LVEGUPD LPERTSURF NLAYER_HORT NLAYER_DUN CRUNOFF CKSAT LSOC CRAIN CHORT LNITRO_DILU LSPINUPCARBS LSPINUPCARBW XSPINMAXS XSPINMAXW XCO2_START XCO2_END NNBYEARSPINS NNBYEARSPINW NNBYEARSOLD NSPINS NSPINW LAGRI_TO_GRASS LSNOWDRIFT LSNOWDRIFT_SUBLIM LSNOW_ABS_ZENITH CSNOWMETAMO CSNOWRAD LFLOOD LWTD LCPL_RRM LTEMP_ARP NTEMPLAYER_ARP XSODELX Source Code ISBA_OPTIONS_t Components Type Visibility Attributes Name Initial logical, public :: LECOCLIMAP logical, public :: LPAR integer, public :: NPATCH integer, public :: NGROUND_LAYER character(len=3), public :: CISBA character(len=4), public :: CPEDOTF character(len=3), public :: CPHOTO real, public, POINTER, DIMENSION(:) :: XSOILGRID logical, public :: LTR_ML real, public :: XRM_PATCH logical, public :: LSOCP logical, public :: LCTI logical, public :: LPERM logical, public :: LNOF character(len=4), public :: CTYPE_HVEG character(len=4), public :: CTYPE_LVEG character(len=4), public :: CTYPE_NVEG character(len=5), public :: CTYP_COV integer, public :: NNBIOMASS integer, public :: NNLITTER integer, public :: NNLITTLEVS integer, public :: NNSOILCARB logical, public, POINTER, DIMENSION(:) :: LMEB_PATCH logical, public :: LFORC_MEASURE logical, public :: LMEB_LITTER logical, public :: LMEB_GNDRES logical, public :: LCANOPY character(len=3), public :: CRESPSL character(len=4), public :: CC1DRY character(len=4), public :: CSCOND character(len=3), public :: CSOILFRZ character(len=4), public :: CDIFSFCOND character(len=3), public :: CSNOWRES character(len=4), public :: CALBEDO character(len=3), public :: CCPSURF real, public :: XOUT_TSTEP real, public :: XTSTEP real, public :: XCGMAX real, public :: XCDRAG logical, public :: LGLACIER logical, public :: LCANOPY_DRAG logical, public :: LVEGUPD logical, public :: LPERTSURF integer, public :: NLAYER_HORT integer, public :: NLAYER_DUN character(len=4), public :: CRUNOFF character(len=3), public :: CKSAT logical, public :: LSOC character(len=3), public :: CRAIN character(len=3), public :: CHORT logical, public :: LNITRO_DILU logical, public :: LSPINUPCARBS logical, public :: LSPINUPCARBW real, public :: XSPINMAXS real, public :: XSPINMAXW real, public :: XCO2_START real, public :: XCO2_END integer, public :: NNBYEARSPINS integer, public :: NNBYEARSPINW integer, public :: NNBYEARSOLD integer, public :: NSPINS integer, public :: NSPINW logical, public :: LAGRI_TO_GRASS logical, public :: LSNOWDRIFT logical, public :: LSNOWDRIFT_SUBLIM logical, public :: LSNOW_ABS_ZENITH character(len=3), public :: CSNOWMETAMO character(len=3), public :: CSNOWRAD logical, public :: LFLOOD logical, public :: LWTD logical, public :: LCPL_RRM logical, public :: LTEMP_ARP integer, public :: NTEMPLAYER_ARP real, public, POINTER, DIMENSION(:) :: XSODELX Source Code TYPE ISBA_OPTIONS_t ! ! *  General PGD options ! LOGICAL :: LECOCLIMAP ! T: parameters computed from ecoclimap !                             ! F: they are read in the file ! LOGICAL :: LPAR ! T: parameters computed from ecoclimap !                             ! F: they are read in the file ! INTEGER :: NPATCH ! maximum number of sub-tiles (patches) !                             ! used at any grid point within a !                             ! natural surface fraction INTEGER :: NGROUND_LAYER ! number of ground layers ! CHARACTER ( LEN = 3 ) :: CISBA ! type of ISBA version: !                             ! '2-L' (default) !                             ! '3-L' !                             ! 'DIF' CHARACTER ( LEN = 4 ) :: CPEDOTF ! NOTE: Only used when HISBA = DIF !                             ! 'CH78' = Clapp and Hornberger 1978 for BC (Default) !                             ! 'CO84' = Cosby et al. 1988 for BC CHARACTER ( LEN = 3 ) :: CPHOTO ! type of photosynthesis !                             ! 'NON' !                             ! 'AST' !                             ! 'NIT' !                             ! 'NCB' ! REAL , POINTER , DIMENSION (:) :: XSOILGRID ! Soil layer grid as reference for DIF ! LOGICAL :: LTR_ML ! new radiative transfert ! REAL :: XRM_PATCH ! threshold to remove little fractions of patches ! LOGICAL :: LSOCP ! Soil organic carbon profile data LOGICAL :: LCTI ! Topographic index data LOGICAL :: LPERM ! Permafrost distribution data LOGICAL :: LNOF ! ! Type of vegetation (simplification of vegetation charaterization) ! CHARACTER ( LEN = 4 ) :: CTYPE_HVEG ! type of high vegetation CHARACTER ( LEN = 4 ) :: CTYPE_LVEG ! type of low vegetation CHARACTER ( LEN = 4 ) :: CTYPE_NVEG ! type of bare soil (no vegetation) CHARACTER ( LEN = 5 ) :: CTYP_COV ! type of green roof ! ! * AGS and Carbon PGD options ! INTEGER :: NNBIOMASS ! number of biomass pools INTEGER :: NNLITTER ! number of litter pools INTEGER :: NNLITTLEVS ! number of litter levels INTEGER :: NNSOILCARB ! number of soil carbon pools ! ! * PGD MEB OPTIONS ! LOGICAL , POINTER , DIMENSION (:) :: LMEB_PATCH ! Vector with T/F values ! True = treat patch with multi-energy balance ! False = treat patch with classical ISBA LOGICAL :: LFORC_MEASURE ! True = Forcing data from observations !                                               ! False = Forcing data from atmospheric model (default) LOGICAL :: LMEB_LITTER ! Activate Litter LOGICAL :: LMEB_GNDRES ! Activate Ground Resistance ! ! * General PREP options ! LOGICAL :: LCANOPY ! T: SBL scheme within the canopy !                  ! F: no atmospheric layers below forcing level ! ! * Carbon PREP options CHARACTER ( LEN = 3 ) :: CRESPSL ! Soil respiration !                             ! 'DEF' = Default: Norman (1992) !                             ! 'PRM' = New Parameterization !                             ! 'CNT' = CENTURY model (Gibelin 2007) ! ! ! * General MODEL options ! CHARACTER ( LEN = 4 ) :: CC1DRY ! C1 formulation for dry soils !                             ! 'DEF ' = DEFault: Giard-Bazile formulation !                             ! 'GB93' = Giordani 1993, Braud 1993 !                             ! discontinuous at WILT CHARACTER ( LEN = 4 ) :: CSCOND ! Thermal conductivity !                             ! 'DEF ' = DEFault: NP89 implicit method !                             ! 'PL98' = Peters-Lidard et al. 1998 used !                             ! for explicit computation of CG CHARACTER ( LEN = 3 ) :: CSOILFRZ ! soil freezing-physics option !                             ! 'DEF' = Default (Boone et al. 2000; !                             !        Giard and Bazile 2000) !                             ! 'LWT' = Phase changes as above, !                             !         but relation between unfrozen !                             !         water and temperature considered CHARACTER ( LEN = 4 ) :: CDIFSFCOND ! Mulch effects !                               ! 'MLCH' = include the insulating effect of !                               ! leaf litter/mulch on the surf. thermal cond. !                               ! 'DEF ' = no mulch effect !                               NOTE: Only used when YISBA = DIF CHARACTER ( LEN = 3 ) :: CSNOWRES ! Turbulent exchanges over snow !                               ! 'DEF' = Default: Louis (ISBA) !                               ! 'RIL' = Maximum Richardson number limit !                               !         for stable conditions ISBA-SNOW3L !                               !         turbulent exchange option CHARACTER ( LEN = 4 ) :: CALBEDO ! albedo type !                               ! 'DRY ' !                               ! 'EVOL' !                               ! 'WET ' !                               ! 'USER' !                            NOTE that when using the YISBA='DIF' multi-layer soil option, !                            the 'LWT' method is used. It is only an option !                            when using the force-restore soil method ('2-L' or '3-L') CHARACTER ( LEN = 3 ) :: CCPSURF ! specific heat at surface !                               ! 'DRY' = default value (dry Cp) !                               ! 'HUM' = Cp as a fct of specific humidity ! REAL :: XOUT_TSTEP ! ISBA output writing time step REAL :: XTSTEP ! ISBA time step REAL :: XCGMAX ! maximum soil heat capacity REAL :: XCDRAG ! drag coefficient in canopy ! LOGICAL :: LGLACIER ! True = Over permanent snow and ice, !                                 initialise WGI=WSAT, !                                 Hsnow>=10m and allow 0.8<SNOALB<0.85 ! False = No specific treatment LOGICAL :: LCANOPY_DRAG ! T: drag activated in SBL scheme within the canopy !                               ! F: no drag activated in SBL atmospheric layers LOGICAL :: LVEGUPD ! True = update vegetation parameters every decade LOGICAL :: LPERTSURF ! True  = apply random perturbations for ensemble prediction ! False = no random perturbation (default) ! ! ! * SGH model options ! ! - Adjustable physical parameters ! INTEGER :: NLAYER_HORT INTEGER :: NLAYER_DUN ! ! - Sub-grid hydrology and vertical hydrology ! CHARACTER ( LEN = 4 ) :: CRUNOFF ! surface runoff formulation !                            ! 'WSAT' !                            ! 'DT92' !                            ! 'SGH ' Topmodel ! CHARACTER ( LEN = 3 ) :: CKSAT ! ksat !                            ! 'DEF' = default value !                            ! 'SGH' = profil exponentiel ! LOGICAL :: LSOC ! soil organic carbon effect !                            ! False = default value !                            ! True  = soil SOC profil ! CHARACTER ( LEN = 3 ) :: CRAIN ! Rainfall spatial distribution ! 'DEF' = No rainfall spatial distribution ! 'SGH' = Rainfall exponential spatial distribution ! ! CHARACTER ( LEN = 3 ) :: CHORT ! Horton runoff ! 'DEF' = no Horton runoff ! 'SGH' = Horton runoff ! ! * AGS and carbon options ! LOGICAL :: LNITRO_DILU ! nitrogen dilution fct of CO2 (Calvet et al. 2008) ! False = keep vegetation parameters constant in time ! LOGICAL :: LSPINUPCARBS ! T: do the soil carb spinup, F: no LOGICAL :: LSPINUPCARBW ! T: do the wood carb spinup, F: no REAL :: XSPINMAXS ! max number of times CARBON_SOIL subroutine is ! called for each timestep in simulation during ! acceleration procedure number REAL :: XSPINMAXW ! max number of times the wood is accelerated REAL :: XCO2_START ! Pre-industrial CO2 concentration REAL :: XCO2_END ! Begin-transient CO2 concentration INTEGER :: NNBYEARSPINS ! nbr years needed to reaches soil equilibrium INTEGER :: NNBYEARSPINW ! nbr years needed to reaches wood equilibrium INTEGER :: NNBYEARSOLD ! nbr years executed at curent time step INTEGER :: NSPINS ! number of times the soil is accelerated INTEGER :: NSPINW ! number of times the wood is accelerated ! LOGICAL :: LAGRI_TO_GRASS ! During soil carbon spinup with ISBA-CC, ! grass parameters are attributed to all agricultural PFT ! ! * Snow model options ! LOGICAL :: LSNOWDRIFT , LSNOWDRIFT_SUBLIM ! Logicals for snowdrift and sublimation LOGICAL :: LSNOW_ABS_ZENITH ! if True modify solar absorption as a function of solar zenithal angle ! (physically wrong but better results in polar regions when CSNOWRAD=B92) ! Scheme of snow metamorphism (Crocus) CHARACTER ( 3 ) :: CSNOWMETAMO ! B92 (historical version, Brun et al 92), C13, T07, F06 (see Carmagnola et al 2014) ! ! radiative transfer scheme in snow (Crocus) CHARACTER ( 3 ) :: CSNOWRAD ! B92 (historical version, Brun et al 92), TAR, TA1, TA2 (see Libois et al 2013) ! ! * Other options ! LOGICAL :: LFLOOD ! Activation of the flooding scheme LOGICAL :: LWTD ! Activation of Water table depth coupling LOGICAL :: LCPL_RRM ! Activation of the coupling ! LOGICAL :: LTEMP_ARP ! True  = time-varying force-restore soil temperature (as in ARPEGE) ! False = No time-varying force-restore soil temperature (Default INTEGER :: NTEMPLAYER_ARP ! Number of force-restore soil temperature layer, including Ts (Default = 4) ! Only used if LTEMP_ARP=True REAL , POINTER , DIMENSION (:) :: XSODELX ! Pulsation for each layer (Only used if LTEMP_ARP=True) ! END TYPE ISBA_OPTIONS_t","tags":"","loc":"type/isba_options_t.html"},{"title":"BEM_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: BEM_t Contents Variables XHC_FLOOR XTC_FLOOR XD_FLOOR XTCOOL_TARGET XTHEAT_TARGET XF_WASTE_CAN XEFF_HEAT XTI_BLD XT_FLOOR XT_MASS XQIN XQIN_FRAD XSHGC XSHGC_SH XU_WIN XTRAN_WIN XGR XFLOOR_HEIGHT XINF XF_WATER_COND XAUX_MAX XQIN_FLAT XHR_TARGET XT_WIN2 XQI_BLD XV_VENT XCAP_SYS_HEAT XCAP_SYS_RAT XT_ADP XM_SYS_RAT XCOP_RAT XT_WIN1 XALB_WIN XABS_WIN XT_SIZE_MAX XT_SIZE_MIN XUGG_WIN LSHADE XSHADE CNATVENT XNATVENT LSHAD_DAY LNATVENT_NIGHT XN_FLOOR XGLAZ_O_BLD XMASS_O_BLD XFLOOR_HW_RATIO XF_FLOOR_MASS XF_FLOOR_WALL XF_FLOOR_WIN XF_FLOOR_ROOF XF_WALL_FLOOR XF_WALL_MASS XF_WALL_WIN XF_WIN_FLOOR XF_WIN_MASS XF_WIN_WALL XF_WIN_WIN XF_MASS_FLOOR XF_MASS_WALL XF_MASS_WIN Source Code BEM_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:,:) :: XHC_FLOOR real, public, POINTER, DIMENSION(:,:) :: XTC_FLOOR real, public, POINTER, DIMENSION(:,:) :: XD_FLOOR real, public, POINTER, DIMENSION(:) :: XTCOOL_TARGET real, public, POINTER, DIMENSION(:) :: XTHEAT_TARGET real, public, POINTER, DIMENSION(:) :: XF_WASTE_CAN real, public, POINTER, DIMENSION(:) :: XEFF_HEAT real, public, POINTER, DIMENSION(:) :: XTI_BLD real, public, POINTER, DIMENSION(:,:) :: XT_FLOOR real, public, POINTER, DIMENSION(:,:) :: XT_MASS real, public, POINTER, DIMENSION(:) :: XQIN real, public, POINTER, DIMENSION(:) :: XQIN_FRAD real, public, POINTER, DIMENSION(:) :: XSHGC real, public, POINTER, DIMENSION(:) :: XSHGC_SH real, public, POINTER, DIMENSION(:) :: XU_WIN real, public, POINTER, DIMENSION(:) :: XTRAN_WIN real, public, POINTER, DIMENSION(:) :: XGR real, public, POINTER, DIMENSION(:) :: XFLOOR_HEIGHT real, public, POINTER, DIMENSION(:) :: XINF real, public, POINTER, DIMENSION(:) :: XF_WATER_COND real, public, POINTER, DIMENSION(:) :: XAUX_MAX real, public, POINTER, DIMENSION(:) :: XQIN_FLAT real, public, POINTER, DIMENSION(:) :: XHR_TARGET real, public, POINTER, DIMENSION(:) :: XT_WIN2 real, public, POINTER, DIMENSION(:) :: XQI_BLD real, public, POINTER, DIMENSION(:) :: XV_VENT real, public, POINTER, DIMENSION(:) :: XCAP_SYS_HEAT real, public, POINTER, DIMENSION(:) :: XCAP_SYS_RAT real, public, POINTER, DIMENSION(:) :: XT_ADP real, public, POINTER, DIMENSION(:) :: XM_SYS_RAT real, public, POINTER, DIMENSION(:) :: XCOP_RAT real, public, POINTER, DIMENSION(:) :: XT_WIN1 real, public, POINTER, DIMENSION(:) :: XALB_WIN real, public, POINTER, DIMENSION(:) :: XABS_WIN real, public, POINTER, DIMENSION(:) :: XT_SIZE_MAX real, public, POINTER, DIMENSION(:) :: XT_SIZE_MIN real, public, POINTER, DIMENSION(:) :: XUGG_WIN logical, public, POINTER, DIMENSION(:) :: LSHADE real, public, POINTER, DIMENSION(:) :: XSHADE character(len=4), public, POINTER, DIMENSION(:) :: CNATVENT real, public, POINTER, DIMENSION(:) :: XNATVENT logical, public, POINTER, DIMENSION(:) :: LSHAD_DAY logical, public, POINTER, DIMENSION(:) :: LNATVENT_NIGHT real, public, POINTER, DIMENSION(:) :: XN_FLOOR real, public, POINTER, DIMENSION(:) :: XGLAZ_O_BLD real, public, POINTER, DIMENSION(:) :: XMASS_O_BLD real, public, POINTER, DIMENSION(:) :: XFLOOR_HW_RATIO real, public, POINTER, DIMENSION(:) :: XF_FLOOR_MASS real, public, POINTER, DIMENSION(:) :: XF_FLOOR_WALL real, public, POINTER, DIMENSION(:) :: XF_FLOOR_WIN real, public, POINTER, DIMENSION(:) :: XF_FLOOR_ROOF real, public, POINTER, DIMENSION(:) :: XF_WALL_FLOOR real, public, POINTER, DIMENSION(:) :: XF_WALL_MASS real, public, POINTER, DIMENSION(:) :: XF_WALL_WIN real, public, POINTER, DIMENSION(:) :: XF_WIN_FLOOR real, public, POINTER, DIMENSION(:) :: XF_WIN_MASS real, public, POINTER, DIMENSION(:) :: XF_WIN_WALL real, public, POINTER, DIMENSION(:) :: XF_WIN_WIN real, public, POINTER, DIMENSION(:) :: XF_MASS_FLOOR real, public, POINTER, DIMENSION(:) :: XF_MASS_WALL real, public, POINTER, DIMENSION(:) :: XF_MASS_WIN Source Code TYPE BEM_t ! ! Floor parameters ! REAL , POINTER , DIMENSION (:,:) :: XHC_FLOOR ! floor layers heat capacity        (J/K/m3) REAL , POINTER , DIMENSION (:,:) :: XTC_FLOOR ! floor layers thermal conductivity (W/K/m) REAL , POINTER , DIMENSION (:,:) :: XD_FLOOR ! depth of floor layers             (m) ! ! HVAC parameters ! REAL , POINTER , DIMENSION (:) :: XTCOOL_TARGET ! cooling setpoint of indoor air REAL , POINTER , DIMENSION (:) :: XTHEAT_TARGET ! heating setpoint of indoor air REAL , POINTER , DIMENSION (:) :: XF_WASTE_CAN ! fraction of waste heat released into the canyon REAL , POINTER , DIMENSION (:) :: XEFF_HEAT ! efficiency of the heating system ! ! Indoor parameters ! REAL , POINTER , DIMENSION (:) :: XTI_BLD ! building interior temperature    (K) REAL , POINTER , DIMENSION (:,:) :: XT_FLOOR ! floor layer temperatures         (K) REAL , POINTER , DIMENSION (:,:) :: XT_MASS ! Air cooled building internal th. mass temperature (K) ! REAL , POINTER , DIMENSION (:) :: XQIN ! internal heat gains [W m-2(floor)] REAL , POINTER , DIMENSION (:) :: XQIN_FRAD ! radiant fraction of internal heat gains REAL , POINTER , DIMENSION (:) :: XSHGC ! solar heat gain coef. of windows REAL , POINTER , DIMENSION (:) :: XSHGC_SH ! solar heat gain coef. of windows + shading REAL , POINTER , DIMENSION (:) :: XU_WIN ! window U-factor [K m W-2] REAL , POINTER , DIMENSION (:) :: XTRAN_WIN ! window transmittance (-) REAL , POINTER , DIMENSION (:) :: XGR ! glazing ratio REAL , POINTER , DIMENSION (:) :: XFLOOR_HEIGHT ! building floor height [m] REAL , POINTER , DIMENSION (:) :: XINF ! infiltration/ventilation flow rate [AC/H] ! ! New parameters ! REAL , POINTER , DIMENSION (:) :: XF_WATER_COND ! fraction of evaporation for condensers (cooling system) REAL , POINTER , DIMENSION (:) :: XAUX_MAX ! Auxiliar variable for autosize calcs REAL , POINTER , DIMENSION (:) :: XQIN_FLAT ! Latent franction of internal heat gains REAL , POINTER , DIMENSION (:) :: XHR_TARGET ! Relative humidity setpoint REAL , POINTER , DIMENSION (:) :: XT_WIN2 ! Indoor window temperature [K] REAL , POINTER , DIMENSION (:) :: XQI_BLD ! Indoor air specific humidity [kg kg-1] REAL , POINTER , DIMENSION (:) :: XV_VENT ! Ventilation flow rate [AC/H] REAL , POINTER , DIMENSION (:) :: XCAP_SYS_HEAT ! Capacity of the heating system ! [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XCAP_SYS_RAT ! Rated capacity of the cooling system ! [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XT_ADP ! Apparatus dewpoint temperature of the ! cooling coil [K] REAL , POINTER , DIMENSION (:) :: XM_SYS_RAT ! Rated HVAC mass flow rate ! [kg s-1 m-2(bld)] REAL , POINTER , DIMENSION (:) :: XCOP_RAT ! Rated COP of the cooling system REAL , POINTER , DIMENSION (:) :: XT_WIN1 ! outdoor window temperature [K] REAL , POINTER , DIMENSION (:) :: XALB_WIN ! window albedo REAL , POINTER , DIMENSION (:) :: XABS_WIN ! window absortance REAL , POINTER , DIMENSION (:) :: XT_SIZE_MAX ! Maximum outdoor air temperature for ! HVAC sizing [K] REAL , POINTER , DIMENSION (:) :: XT_SIZE_MIN ! Minimum outdoor air temperature for ! HVAC sizing [K] REAL , POINTER , DIMENSION (:) :: XUGG_WIN ! Window glass-to-glass U-factor [K m W-2] LOGICAL , POINTER , DIMENSION (:) :: LSHADE ! flag to activate shading devices -> LOGICAL in the code REAL , POINTER , DIMENSION (:) :: XSHADE ! flag to activate shading devices -> REAL for i/o 0. or 1. CHARACTER ( LEN = 4 ), POINTER , DIMENSION (:) :: CNATVENT ! flag to activate natural ventilation 'NONE', 'MANU', 'AUTO' REAL , POINTER , DIMENSION (:) :: XNATVENT ! flag to describe surventilation system for i/o ! 0 for NONE, 1 for MANU and 2 for AUTO LOGICAL , POINTER , DIMENSION (:) :: LSHAD_DAY !Has shading been necessary this day ? LOGICAL , POINTER , DIMENSION (:) :: LNATVENT_NIGHT !Has nocturnal surventilation been necessary and possible this night ? ! !indoor relative surfaces and view factors REAL , POINTER , DIMENSION (:) :: XN_FLOOR ! Number of floors REAL , POINTER , DIMENSION (:) :: XGLAZ_O_BLD ! Window area [m2_win/m2_bld] REAL , POINTER , DIMENSION (:) :: XMASS_O_BLD ! Mass area [m2_mass/m2_bld] REAL , POINTER , DIMENSION (:) :: XFLOOR_HW_RATIO ! H/W ratio of 1 floor level REAL , POINTER , DIMENSION (:) :: XF_FLOOR_MASS ! View factor floor-mass REAL , POINTER , DIMENSION (:) :: XF_FLOOR_WALL ! View factor floor-wall REAL , POINTER , DIMENSION (:) :: XF_FLOOR_WIN ! View factor floor-window REAL , POINTER , DIMENSION (:) :: XF_FLOOR_ROOF ! View factor floor-roof REAL , POINTER , DIMENSION (:) :: XF_WALL_FLOOR ! View factor wall-floor REAL , POINTER , DIMENSION (:) :: XF_WALL_MASS ! View factor wall-mass REAL , POINTER , DIMENSION (:) :: XF_WALL_WIN ! View factor wall-win REAL , POINTER , DIMENSION (:) :: XF_WIN_FLOOR ! View factor win-floor REAL , POINTER , DIMENSION (:) :: XF_WIN_MASS ! View factor win-mass REAL , POINTER , DIMENSION (:) :: XF_WIN_WALL ! View factor win-wall REAL , POINTER , DIMENSION (:) :: XF_WIN_WIN ! indoor View factor win-win REAL , POINTER , DIMENSION (:) :: XF_MASS_FLOOR ! View factor mass-floor REAL , POINTER , DIMENSION (:) :: XF_MASS_WALL ! View factor mass-wall REAL , POINTER , DIMENSION (:) :: XF_MASS_WIN ! View factor mass-window ! END TYPE BEM_t","tags":"","loc":"type/bem_t.html"},{"title":"BEM_NP_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: BEM_NP_t Contents Variables AL Source Code BEM_NP_t Components Type Visibility Attributes Name Initial type( BEM_t ), public, POINTER :: AL (:) => NULL() Source Code TYPE BEM_NP_t ! TYPE ( BEM_t ), POINTER :: AL (:) => NULL () ! END TYPE BEM_NP_t","tags":"","loc":"type/bem_np_t.html"},{"title":"DATA_BEM_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DATA_BEM_t Contents Variables LDATA_TCOOL_TARGET LDATA_THEAT_TARGET LDATA_F_WASTE_CAN LDATA_EFF_HEAT LDATA_HC_FLOOR LDATA_TC_FLOOR LDATA_D_FLOOR LDATA_QIN LDATA_QIN_FRAD LDATA_SHGC LDATA_U_WIN LDATA_GR LDATA_SHGC_SH LDATA_FLOOR_HEIGHT LDATA_INF LDATA_F_WATER_COND LDATA_SHADE LDATA_NATVENT LDATA_QIN_FLAT LDATA_HR_TARGET LDATA_V_VENT LDATA_CAP_SYS_HEAT LDATA_CAP_SYS_RAT LDATA_T_ADP LDATA_M_SYS_RAT LDATA_COP_RAT LDATA_T_SIZE_MAX LDATA_T_SIZE_MIN NPAR_FLOOR_LAYER XPAR_TCOOL_TARGET XPAR_THEAT_TARGET XPAR_F_WASTE_CAN XPAR_EFF_HEAT XPAR_HC_FLOOR XPAR_TC_FLOOR XPAR_D_FLOOR XPAR_QIN XPAR_QIN_FRAD XPAR_SHGC XPAR_U_WIN XPAR_GR XPAR_SHGC_SH XPAR_FLOOR_HEIGHT XPAR_INF XPAR_F_WATER_COND XPAR_SHADE XPAR_NATVENT XPAR_QIN_FLAT XPAR_HR_TARGET XPAR_V_VENT XPAR_CAP_SYS_HEAT XPAR_CAP_SYS_RAT XPAR_T_ADP XPAR_M_SYS_RAT XPAR_COP_RAT XPAR_T_SIZE_MAX XPAR_T_SIZE_MIN Source Code DATA_BEM_t Components Type Visibility Attributes Name Initial logical, public :: LDATA_TCOOL_TARGET logical, public :: LDATA_THEAT_TARGET logical, public :: LDATA_F_WASTE_CAN logical, public :: LDATA_EFF_HEAT logical, public :: LDATA_HC_FLOOR logical, public :: LDATA_TC_FLOOR logical, public :: LDATA_D_FLOOR logical, public :: LDATA_QIN logical, public :: LDATA_QIN_FRAD logical, public :: LDATA_SHGC logical, public :: LDATA_U_WIN logical, public :: LDATA_GR logical, public :: LDATA_SHGC_SH logical, public :: LDATA_FLOOR_HEIGHT logical, public :: LDATA_INF logical, public :: LDATA_F_WATER_COND logical, public :: LDATA_SHADE logical, public :: LDATA_NATVENT logical, public :: LDATA_QIN_FLAT logical, public :: LDATA_HR_TARGET logical, public :: LDATA_V_VENT logical, public :: LDATA_CAP_SYS_HEAT logical, public :: LDATA_CAP_SYS_RAT logical, public :: LDATA_T_ADP logical, public :: LDATA_M_SYS_RAT logical, public :: LDATA_COP_RAT logical, public :: LDATA_T_SIZE_MAX logical, public :: LDATA_T_SIZE_MIN integer, public :: NPAR_FLOOR_LAYER real, public, POINTER, DIMENSION(:) :: XPAR_TCOOL_TARGET real, public, POINTER, DIMENSION(:) :: XPAR_THEAT_TARGET real, public, POINTER, DIMENSION(:) :: XPAR_F_WASTE_CAN real, public, POINTER, DIMENSION(:) :: XPAR_EFF_HEAT real, public, POINTER, DIMENSION(:,:) :: XPAR_HC_FLOOR real, public, POINTER, DIMENSION(:,:) :: XPAR_TC_FLOOR real, public, POINTER, DIMENSION(:,:) :: XPAR_D_FLOOR real, public, POINTER, DIMENSION(:) :: XPAR_QIN real, public, POINTER, DIMENSION(:) :: XPAR_QIN_FRAD real, public, POINTER, DIMENSION(:) :: XPAR_SHGC real, public, POINTER, DIMENSION(:) :: XPAR_U_WIN real, public, POINTER, DIMENSION(:) :: XPAR_GR real, public, POINTER, DIMENSION(:) :: XPAR_SHGC_SH real, public, POINTER, DIMENSION(:) :: XPAR_FLOOR_HEIGHT real, public, POINTER, DIMENSION(:) :: XPAR_INF real, public, POINTER, DIMENSION(:) :: XPAR_F_WATER_COND real, public, POINTER, DIMENSION(:) :: XPAR_SHADE real, public, POINTER, DIMENSION(:) :: XPAR_NATVENT real, public, POINTER, DIMENSION(:) :: XPAR_QIN_FLAT real, public, POINTER, DIMENSION(:) :: XPAR_HR_TARGET real, public, POINTER, DIMENSION(:) :: XPAR_V_VENT real, public, POINTER, DIMENSION(:) :: XPAR_CAP_SYS_HEAT real, public, POINTER, DIMENSION(:) :: XPAR_CAP_SYS_RAT real, public, POINTER, DIMENSION(:) :: XPAR_T_ADP real, public, POINTER, DIMENSION(:) :: XPAR_M_SYS_RAT real, public, POINTER, DIMENSION(:) :: XPAR_COP_RAT real, public, POINTER, DIMENSION(:) :: XPAR_T_SIZE_MAX real, public, POINTER, DIMENSION(:) :: XPAR_T_SIZE_MIN Source Code TYPE DATA_BEM_t ! LOGICAL :: LDATA_TCOOL_TARGET LOGICAL :: LDATA_THEAT_TARGET LOGICAL :: LDATA_F_WASTE_CAN LOGICAL :: LDATA_EFF_HEAT LOGICAL :: LDATA_HC_FLOOR LOGICAL :: LDATA_TC_FLOOR LOGICAL :: LDATA_D_FLOOR LOGICAL :: LDATA_QIN LOGICAL :: LDATA_QIN_FRAD LOGICAL :: LDATA_SHGC LOGICAL :: LDATA_U_WIN LOGICAL :: LDATA_GR LOGICAL :: LDATA_SHGC_SH LOGICAL :: LDATA_FLOOR_HEIGHT LOGICAL :: LDATA_INF LOGICAL :: LDATA_F_WATER_COND LOGICAL :: LDATA_SHADE LOGICAL :: LDATA_NATVENT LOGICAL :: LDATA_QIN_FLAT LOGICAL :: LDATA_HR_TARGET LOGICAL :: LDATA_V_VENT LOGICAL :: LDATA_CAP_SYS_HEAT LOGICAL :: LDATA_CAP_SYS_RAT LOGICAL :: LDATA_T_ADP LOGICAL :: LDATA_M_SYS_RAT LOGICAL :: LDATA_COP_RAT LOGICAL :: LDATA_T_SIZE_MAX LOGICAL :: LDATA_T_SIZE_MIN ! ! Number of layers in the specification of thermal characteristics ! INTEGER :: NPAR_FLOOR_LAYER ! number of layers in roofs ! ! ! Parameters: ! REAL , POINTER , DIMENSION (:) :: XPAR_TCOOL_TARGET ! cooling setpoint of indoor air REAL , POINTER , DIMENSION (:) :: XPAR_THEAT_TARGET ! heating setpoint of indoor air REAL , POINTER , DIMENSION (:) :: XPAR_F_WASTE_CAN ! fraction of waste heat into the canyon REAL , POINTER , DIMENSION (:) :: XPAR_EFF_HEAT ! efficiency of the heating system REAL , POINTER , DIMENSION (:,:) :: XPAR_HC_FLOOR ! heat capacity of floor layers [J m-3 K-1] REAL , POINTER , DIMENSION (:,:) :: XPAR_TC_FLOOR ! thermal conductivity of floor layers [W m-1 K-1] REAL , POINTER , DIMENSION (:,:) :: XPAR_D_FLOOR ! thickness of floor layers [m] REAL , POINTER , DIMENSION (:) :: XPAR_QIN ! internal heat gains [W m-2(floor)] REAL , POINTER , DIMENSION (:) :: XPAR_QIN_FRAD ! radiant fraction of internal heat gains REAL , POINTER , DIMENSION (:) :: XPAR_SHGC ! solar transmitance of windows REAL , POINTER , DIMENSION (:) :: XPAR_U_WIN ! glazing thermal resistance [K m W-2] REAL , POINTER , DIMENSION (:) :: XPAR_GR ! glazing ratio REAL , POINTER , DIMENSION (:) :: XPAR_SHGC_SH ! solar transmitance of windows + shading REAL , POINTER , DIMENSION (:) :: XPAR_FLOOR_HEIGHT ! building floor height [m] REAL , POINTER , DIMENSION (:) :: XPAR_INF ! infiltration/ventilation flow rate [AC/H] ! REAL , POINTER , DIMENSION (:) :: XPAR_F_WATER_COND ! fraction of evaporation for condensers REAL , POINTER , DIMENSION (:) :: XPAR_SHADE ! Flag to activate shading devices 0->inactivated , 1->activated REAL , POINTER , DIMENSION (:) :: XPAR_NATVENT ! Flag to describe bld surventilation solution 0-> NONE ; 1 -> MANU ; 2-> AUTO REAL , POINTER , DIMENSION (:) :: XPAR_QIN_FLAT ! Latent franction of internal heat gains REAL , POINTER , DIMENSION (:) :: XPAR_HR_TARGET ! Relative humidity setpoint REAL , POINTER , DIMENSION (:) :: XPAR_V_VENT ! Ventilation flow rate [AC/H] REAL , POINTER , DIMENSION (:) :: XPAR_CAP_SYS_HEAT ! Capacity of the heating system ! [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XPAR_CAP_SYS_RAT ! Rated capacity of the cooling system ! [W m-2(bld)] REAL , POINTER , DIMENSION (:) :: XPAR_T_ADP ! Apparatus dewpoint temperature of the ! cooling coil [K] REAL , POINTER , DIMENSION (:) :: XPAR_M_SYS_RAT ! Rated HVAC mass flow rate ! [kg s-1 m-2(bld)] REAL , POINTER , DIMENSION (:) :: XPAR_COP_RAT ! Rated COP of the cooling system REAL , POINTER , DIMENSION (:) :: XPAR_T_SIZE_MAX ! REAL , POINTER , DIMENSION (:) :: XPAR_T_SIZE_MIN ! ! END TYPE DATA_BEM_t","tags":"","loc":"type/data_bem_t.html"},{"title":"CH_EMIS_FIELD_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: CH_EMIS_FIELD_t Contents Variables XTIME_SIMUL NTIME_MAX NEMIS_NBR CEMIS_AREA CEMIS_COMMENT CEMIS_NAME NEMIS_TIME XEMIS_FIELDS NEMISPEC_NBR TSEMISS TSPRONOSLIST Source Code CH_EMIS_FIELD_t Components Type Visibility Attributes Name Initial real, public :: XTIME_SIMUL = 0. integer, public :: NTIME_MAX integer, public :: NEMIS_NBR character(len=3), public, DIMENSION(:), POINTER :: CEMIS_AREA character(len=40), public, DIMENSION(:), POINTER :: CEMIS_COMMENT character(len=40), public, DIMENSION(:), POINTER :: CEMIS_NAME integer, public, DIMENSION(:), POINTER :: NEMIS_TIME real, public, DIMENSION(:,:), POINTER :: XEMIS_FIELDS integer, public :: NEMISPEC_NBR type(EMISSVAR_T), public, DIMENSION(:), POINTER :: TSEMISS type(PRONOSVAR_T), public, POINTER :: TSPRONOSLIST Source Code TYPE CH_EMIS_FIELD_t ! REAL :: XTIME_SIMUL = 0. INTEGER :: NTIME_MAX INTEGER :: NEMIS_NBR !                          ! number of chemical pgd fields chosen by user CHARACTER ( LEN = 3 ) , DIMENSION (:), POINTER :: CEMIS_AREA !                          ! areas where chemical pgd fields are defined !                          ! 'ALL' : everywhere !                          ! 'SEA' : where sea exists !                          ! 'LAN' : where land exists !                          ! 'WAT' : where inland water exists !                          ! 'NAT' : where natural or agricultural areas exist !                          ! 'TWN' : where town areas exist !                          ! 'STR' : where streets are present !                          ! 'BLD' : where buildings are present !                          ! CHARACTER ( LEN = 40 ), DIMENSION (:), POINTER :: CEMIS_COMMENT ! comment CHARACTER ( LEN = 40 ), DIMENSION (:), POINTER :: CEMIS_NAME !                          ! name of the chemical pgd fields (emitted species) ! INTEGER , DIMENSION (:), POINTER :: NEMIS_TIME ! emission time ! REAL , DIMENSION (:,:), POINTER :: XEMIS_FIELDS ! emission pgd fields values ! INTEGER :: NEMISPEC_NBR ! Number of chemical species ! TYPE ( EMISSVAR_T ), DIMENSION (:), POINTER :: TSEMISS ! Offline emission struct array ! TYPE ( PRONOSVAR_T ), POINTER :: TSPRONOSLIST ! Head pointer on pronostic !                                                              variables list !------------------------------------------------------------------------------- ! END TYPE CH_EMIS_FIELD_t","tags":"","loc":"type/ch_emis_field_t.html"},{"title":"GRID_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: GRID_t Contents Variables NDIM CGRID NGRID_PAR XGRID_PAR XLAT XLON XMESH_SIZE Source Code GRID_t Components Type Visibility Attributes Name Initial integer, public :: NDIM character(len=10), public :: CGRID integer, public :: NGRID_PAR real, public, POINTER, DIMENSION(:) :: XGRID_PAR real, public, POINTER, DIMENSION(:) :: XLAT real, public, POINTER, DIMENSION(:) :: XLON real, public, POINTER, DIMENSION(:) :: XMESH_SIZE Source Code TYPE GRID_t !------------------------------------------------------------------------------- ! ! Grid definition ! INTEGER :: NDIM ! number of points CHARACTER ( LEN = 10 ) :: CGRID ! grid type !                                              ! \"NONE        \" : no grid computations !                                              ! \"CONF PROJ   \" : conformal projection !                                              ! \"SURF ATM    \" : nature points of surf. atm. grid ! INTEGER :: NGRID_PAR ! size of XGRID_PAR REAL , POINTER , DIMENSION (:) :: XGRID_PAR ! lits of parameters used to define the grid !                                              ! (depends on value of CGRID) ! !------------------------------------------------------------------------------- ! ! General surface parameters: ! REAL , POINTER , DIMENSION (:) :: XLAT ! latitude (degrees +North)               (-) REAL , POINTER , DIMENSION (:) :: XLON ! longitude (degrees +East)               (-) REAL , POINTER , DIMENSION (:) :: XMESH_SIZE ! mesh size                               (m2) !------------------------------------------------------------------------------- ! END TYPE GRID_t","tags":"","loc":"type/grid_t.html"},{"title":"GRID_NP_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: GRID_NP_t Contents Variables AL Source Code GRID_NP_t Components Type Visibility Attributes Name Initial type( GRID_t ), public, DIMENSION(:), POINTER :: AL => NULL() Source Code TYPE GRID_NP_t ! TYPE ( GRID_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE GRID_NP_t","tags":"","loc":"type/grid_np_t.html"},{"title":"CH_SEAFLUX_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: CH_SEAFLUX_t Contents Variables CCH_DRY_DEP XDEP SVS CCH_NAMES CDSTNAMES CSLTNAMES CAER_NAMES Source Code CH_SEAFLUX_t Components Type Visibility Attributes Name Initial character(len=6), public :: CCH_DRY_DEP real, public, DIMENSION(:,:), POINTER :: XDEP type(SV_t), public :: SVS character(len=6), public, DIMENSION(:), POINTER :: CCH_NAMES character(len=6), public, DIMENSION(:), POINTER :: CDSTNAMES character(len=6), public, DIMENSION(:), POINTER :: CSLTNAMES character(len=6), public, DIMENSION(:), POINTER :: CAER_NAMES Source Code TYPE CH_SEAFLUX_t ! CHARACTER ( LEN = 6 ) :: CCH_DRY_DEP !  deposition scheme REAL , DIMENSION (:,:), POINTER :: XDEP ! final dry deposition ! velocity  for sea TYPE ( SV_t ) :: SVS CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CCH_NAMES ! NAME OF CHEMICAL SPECIES ! (FOR DIAG ONLY) CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CDSTNAMES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CSLTNAMES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CAER_NAMES ! END TYPE CH_SEAFLUX_t","tags":"","loc":"type/ch_seaflux_t.html"},{"title":"DATA_ISBA_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DATA_ISBA_t Contents Variables XPAR_VEGTYPE NVEGTYPE NTIME LDATA_MIXPAR LDATA_VEGTYPE LDATA_LAI LDATA_VEG LDATA_Z0 LDATA_EMIS LDATA_ALBNIR_VEG LDATA_ALBVIS_VEG LDATA_ALBUV_VEG LDATA_IRRIG LDATA_WATSUP LDATA_ALBNIR_SOIL LDATA_ALBVIS_SOIL LDATA_ALBUV_SOIL LDATA_GNDLITTER LDATA_Z0LITTER LDATA_H_VEG LDATA_DG LDATA_ROOTFRAC LDATA_H_TREE LDATA_DICE LDATA_GROUND_DEPTH LDATA_ROOT_DEPTH LDATA_ROOT_EXTINCTION LDATA_ROOT_LIN LDATA_RSMIN LDATA_GAMMA LDATA_WRMAX_CF LDATA_CV LDATA_Z0_O_Z0H LDATA_RGL LDATA_BSLAI LDATA_LAIMIN LDATA_SEFOLD LDATA_GMES LDATA_RE25 LDATA_STRESS LDATA_F2I LDATA_GC LDATA_DMAX LDATA_CE_NITRO LDATA_CF_NITRO LDATA_CNA_NITRO LDATA_SEED_M LDATA_SEED_D LDATA_REAP_M LDATA_REAP_D LDATA_CONDSAT LDATA_MPOTSAT LDATA_BCOEF LDATA_WWILT LDATA_WFC LDATA_WSAT LIMP_VEG LIMP_Z0 LIMP_EMIS XPAR_Z0_O_Z0H XPAR_EMIS XPAR_Z0 XPAR_ALBNIR_VEG XPAR_ALBVIS_VEG XPAR_ALBUV_VEG XPAR_VEG XPAR_WRMAX_CF XPAR_RSMIN XPAR_GAMMA XPAR_CV XPAR_RGL XPAR_ROOTFRAC XPAR_ROOT_DEPTH XPAR_ROOT_EXTINCTION XPAR_ROOT_LIN XPAR_GNDLITTER XPAR_Z0LITTER XPAR_H_VEG XPAR_BSLAI XPAR_LAIMIN XPAR_SEFOLD XPAR_H_TREE XPAR_GMES XPAR_RE25 LPAR_STRESS XPAR_F2I XPAR_GC XPAR_DMAX XPAR_CE_NITRO XPAR_CF_NITRO XPAR_CNA_NITRO XPAR_DG XPAR_GROUND_DEPTH XPAR_DICE XPAR_ALBNIR_SOIL XPAR_ALBVIS_SOIL XPAR_ALBUV_SOIL XPAR_CONDSAT XPAR_MPOTSAT XPAR_BCOEF XPAR_WWILT XPAR_WFC XPAR_WSAT XPAR_LAI XPAR_IRRIG XPAR_WATSUP XPAR_SEED_M XPAR_SEED_D XPAR_REAP_M XPAR_REAP_D XPAR_FRAC_HVEG XPAR_FRAC_LVEG XPAR_FRAC_NVEG XPAR_LAI_HVEG XPAR_LAI_LVEG XPAR_H_HVEG Source Code DATA_ISBA_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:,:) :: XPAR_VEGTYPE integer, public :: NVEGTYPE integer, public :: NTIME logical, public :: LDATA_MIXPAR logical, public :: LDATA_VEGTYPE logical, public, POINTER, DIMENSION(:) :: LDATA_LAI logical, public, POINTER, DIMENSION(:) :: LDATA_VEG logical, public, POINTER, DIMENSION(:) :: LDATA_Z0 logical, public, POINTER, DIMENSION(:) :: LDATA_EMIS logical, public, POINTER, DIMENSION(:) :: LDATA_ALBNIR_VEG logical, public, POINTER, DIMENSION(:) :: LDATA_ALBVIS_VEG logical, public, POINTER, DIMENSION(:) :: LDATA_ALBUV_VEG logical, public, POINTER, DIMENSION(:) :: LDATA_IRRIG logical, public, POINTER, DIMENSION(:) :: LDATA_WATSUP logical, public, POINTER, DIMENSION(:) :: LDATA_ALBNIR_SOIL logical, public, POINTER, DIMENSION(:) :: LDATA_ALBVIS_SOIL logical, public, POINTER, DIMENSION(:) :: LDATA_ALBUV_SOIL logical, public, POINTER, DIMENSION(:) :: LDATA_GNDLITTER logical, public, POINTER, DIMENSION(:) :: LDATA_Z0LITTER logical, public, POINTER, DIMENSION(:) :: LDATA_H_VEG logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_DG logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_ROOTFRAC logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_H_TREE logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_DICE logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_GROUND_DEPTH logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_ROOT_DEPTH logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_ROOT_EXTINCTION logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_ROOT_LIN logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_RSMIN logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_GAMMA logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_WRMAX_CF logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_CV logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_Z0_O_Z0H logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_RGL logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_BSLAI logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_LAIMIN logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_SEFOLD logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_GMES logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_RE25 logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_STRESS logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_F2I logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_GC logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_DMAX logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_CE_NITRO logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_CF_NITRO logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_CNA_NITRO logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_SEED_M logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_SEED_D logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_REAP_M logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_REAP_D logical, public :: LDATA_CONDSAT logical, public :: LDATA_MPOTSAT logical, public :: LDATA_BCOEF logical, public :: LDATA_WWILT logical, public :: LDATA_WFC logical, public :: LDATA_WSAT logical, public :: LIMP_VEG logical, public :: LIMP_Z0 logical, public :: LIMP_EMIS real, public, POINTER, DIMENSION(:,:) :: XPAR_Z0_O_Z0H real, public, POINTER, DIMENSION(:,:,:) :: XPAR_EMIS real, public, POINTER, DIMENSION(:,:,:) :: XPAR_Z0 real, public, POINTER, DIMENSION(:,:,:) :: XPAR_ALBNIR_VEG real, public, POINTER, DIMENSION(:,:,:) :: XPAR_ALBVIS_VEG real, public, POINTER, DIMENSION(:,:,:) :: XPAR_ALBUV_VEG real, public, POINTER, DIMENSION(:,:,:) :: XPAR_VEG real, public, POINTER, DIMENSION(:,:) :: XPAR_WRMAX_CF real, public, POINTER, DIMENSION(:,:) :: XPAR_RSMIN real, public, POINTER, DIMENSION(:,:) :: XPAR_GAMMA real, public, POINTER, DIMENSION(:,:) :: XPAR_CV real, public, POINTER, DIMENSION(:,:) :: XPAR_RGL real, public, POINTER, DIMENSION(:,:,:) :: XPAR_ROOTFRAC real, public, POINTER, DIMENSION(:,:) :: XPAR_ROOT_DEPTH real, public, POINTER, DIMENSION(:,:) :: XPAR_ROOT_EXTINCTION real, public, POINTER, DIMENSION(:,:) :: XPAR_ROOT_LIN real, public, POINTER, DIMENSION(:,:,:) :: XPAR_GNDLITTER real, public, POINTER, DIMENSION(:,:,:) :: XPAR_Z0LITTER real, public, POINTER, DIMENSION(:,:,:) :: XPAR_H_VEG real, public, POINTER, DIMENSION(:,:) :: XPAR_BSLAI real, public, POINTER, DIMENSION(:,:) :: XPAR_LAIMIN real, public, POINTER, DIMENSION(:,:) :: XPAR_SEFOLD real, public, POINTER, DIMENSION(:,:) :: XPAR_H_TREE real, public, POINTER, DIMENSION(:,:) :: XPAR_GMES real, public, POINTER, DIMENSION(:,:) :: XPAR_RE25 logical, public, POINTER, DIMENSION(:,:) :: LPAR_STRESS real, public, POINTER, DIMENSION(:,:) :: XPAR_F2I real, public, POINTER, DIMENSION(:,:) :: XPAR_GC real, public, POINTER, DIMENSION(:,:) :: XPAR_DMAX real, public, POINTER, DIMENSION(:,:) :: XPAR_CE_NITRO real, public, POINTER, DIMENSION(:,:) :: XPAR_CF_NITRO real, public, POINTER, DIMENSION(:,:) :: XPAR_CNA_NITRO real, public, POINTER, DIMENSION(:,:,:) :: XPAR_DG real, public, POINTER, DIMENSION(:,:) :: XPAR_GROUND_DEPTH real, public, POINTER, DIMENSION(:,:) :: XPAR_DICE real, public, POINTER, DIMENSION(:,:,:) :: XPAR_ALBNIR_SOIL real, public, POINTER, DIMENSION(:,:,:) :: XPAR_ALBVIS_SOIL real, public, POINTER, DIMENSION(:,:,:) :: XPAR_ALBUV_SOIL real, public, POINTER, DIMENSION(:,:) :: XPAR_CONDSAT real, public, POINTER, DIMENSION(:,:) :: XPAR_MPOTSAT real, public, POINTER, DIMENSION(:,:) :: XPAR_BCOEF real, public, POINTER, DIMENSION(:,:) :: XPAR_WWILT real, public, POINTER, DIMENSION(:,:) :: XPAR_WFC real, public, POINTER, DIMENSION(:,:) :: XPAR_WSAT real, public, POINTER, DIMENSION(:,:,:) :: XPAR_LAI real, public, POINTER, DIMENSION(:,:,:) :: XPAR_IRRIG real, public, POINTER, DIMENSION(:,:,:) :: XPAR_WATSUP real, public, POINTER, DIMENSION(:,:) :: XPAR_SEED_M real, public, POINTER, DIMENSION(:,:) :: XPAR_SEED_D real, public, POINTER, DIMENSION(:,:) :: XPAR_REAP_M real, public, POINTER, DIMENSION(:,:) :: XPAR_REAP_D real, public, POINTER, DIMENSION(:) :: XPAR_FRAC_HVEG real, public, POINTER, DIMENSION(:) :: XPAR_FRAC_LVEG real, public, POINTER, DIMENSION(:) :: XPAR_FRAC_NVEG real, public, POINTER, DIMENSION(:,:) :: XPAR_LAI_HVEG real, public, POINTER, DIMENSION(:,:) :: XPAR_LAI_LVEG real, public, POINTER, DIMENSION(:) :: XPAR_H_HVEG Source Code TYPE DATA_ISBA_t !------------------------------------------------------------------------------- ! ! Mask and number of grid elements containing patches/tiles: ! REAL , POINTER , DIMENSION (:,:) :: XPAR_VEGTYPE ! fraction of each vegetation type for !                                                  ! each grid mesh                          (-) ! !------------------------------------------------------------------------------- ! INTEGER :: NVEGTYPE ! INTEGER :: NTIME ! number of time data !                                                      ! for VEG, LAI, EMIS, Z0 LOGICAL :: LDATA_MIXPAR ! LOGICAL :: LDATA_VEGTYPE ! LOGICAL , POINTER , DIMENSION (:) :: LDATA_LAI LOGICAL , POINTER , DIMENSION (:) :: LDATA_VEG LOGICAL , POINTER , DIMENSION (:) :: LDATA_Z0 LOGICAL , POINTER , DIMENSION (:) :: LDATA_EMIS LOGICAL , POINTER , DIMENSION (:) :: LDATA_ALBNIR_VEG LOGICAL , POINTER , DIMENSION (:) :: LDATA_ALBVIS_VEG LOGICAL , POINTER , DIMENSION (:) :: LDATA_ALBUV_VEG LOGICAL , POINTER , DIMENSION (:) :: LDATA_IRRIG LOGICAL , POINTER , DIMENSION (:) :: LDATA_WATSUP LOGICAL , POINTER , DIMENSION (:) :: LDATA_ALBNIR_SOIL LOGICAL , POINTER , DIMENSION (:) :: LDATA_ALBVIS_SOIL LOGICAL , POINTER , DIMENSION (:) :: LDATA_ALBUV_SOIL ! - For multi-energy balance (MEB) ! LOGICAL , POINTER , DIMENSION (:) :: LDATA_GNDLITTER LOGICAL , POINTER , DIMENSION (:) :: LDATA_Z0LITTER LOGICAL , POINTER , DIMENSION (:) :: LDATA_H_VEG ! LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_DG LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_ROOTFRAC LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_H_TREE LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_DICE LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_GROUND_DEPTH LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_ROOT_DEPTH LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_ROOT_EXTINCTION LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_ROOT_LIN LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_RSMIN LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_GAMMA LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_WRMAX_CF LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_CV LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_Z0_O_Z0H LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_RGL LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_BSLAI LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_LAIMIN LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_SEFOLD LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_GMES LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_RE25 LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_STRESS LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_F2I LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_GC LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_DMAX LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_CE_NITRO LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_CF_NITRO LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_CNA_NITRO LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_SEED_M LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_SEED_D LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_REAP_M LOGICAL , DIMENSION ( MAX ( NVEGTYPE_OLD , NVEGTYPE_ECOSG )) :: LDATA_REAP_D ! LOGICAL :: LDATA_CONDSAT LOGICAL :: LDATA_MPOTSAT LOGICAL :: LDATA_BCOEF LOGICAL :: LDATA_WWILT LOGICAL :: LDATA_WFC LOGICAL :: LDATA_WSAT ! LOGICAL :: LIMP_VEG LOGICAL :: LIMP_Z0 LOGICAL :: LIMP_EMIS ! ! Input Parameters, per patch: ! ! - vegetation + bare soil: ! REAL , POINTER , DIMENSION (:,:) :: XPAR_Z0_O_Z0H ! ratio of surface roughness lengths !                                                      ! (momentum to heat)                      (-) REAL , POINTER , DIMENSION (:,:,:) :: XPAR_EMIS ! surface emissivity                      (-) REAL , POINTER , DIMENSION (:,:,:) :: XPAR_Z0 ! surface roughness length                (m) ! ! - vegetation: ! REAL , POINTER , DIMENSION (:,:,:) :: XPAR_ALBNIR_VEG ! vegetation near-infra-red albedo        (-) REAL , POINTER , DIMENSION (:,:,:) :: XPAR_ALBVIS_VEG ! vegetation visible albedo               (-) REAL , POINTER , DIMENSION (:,:,:) :: XPAR_ALBUV_VEG ! vegetation UV albedo                    (-) ! ! - vegetation: default option (Jarvis) and general parameters: ! REAL , POINTER , DIMENSION (:,:,:) :: XPAR_VEG ! vegetation cover fraction               (-) REAL , POINTER , DIMENSION (:,:) :: XPAR_WRMAX_CF ! coefficient for maximum water !                                                      ! interception !                                                      ! storage capacity on the vegetation      (-) REAL , POINTER , DIMENSION (:,:) :: XPAR_RSMIN ! minimum stomatal resistance             (s/m) REAL , POINTER , DIMENSION (:,:) :: XPAR_GAMMA ! coefficient for the calculation !                                                      ! of the surface stomatal !                                                      ! resistance REAL , POINTER , DIMENSION (:,:) :: XPAR_CV ! vegetation thermal inertia coefficient  (K m2/J) REAL , POINTER , DIMENSION (:,:) :: XPAR_RGL ! maximum solar radiation !                                                      ! usable in photosynthesis                (W/m2) REAL , POINTER , DIMENSION (:,:,:) :: XPAR_ROOTFRAC ! root fraction profile ('DIF' option) ! REAL , POINTER , DIMENSION (:,:) :: XPAR_ROOT_DEPTH ! root depth ('DIF' option) REAL , POINTER , DIMENSION (:,:) :: XPAR_ROOT_EXTINCTION ! root extinction parameter ('DIF' option) REAL , POINTER , DIMENSION (:,:) :: XPAR_ROOT_LIN ! root linear parameter ('DIF' option) ! ! - For multi-energy balance (MEB) ! REAL , POINTER , DIMENSION (:,:,:) :: XPAR_GNDLITTER ! ground litter fraction REAL , POINTER , DIMENSION (:,:,:) :: XPAR_Z0LITTER ! ground litter roughness length REAL , POINTER , DIMENSION (:,:,:) :: XPAR_H_VEG ! height of canopy vegetation ! !------------------------------------------------------------------------------- ! ! - vegetation: Ags parameters ('AGS', 'LAI', 'AST', 'LST', 'NIT', 'NCB' options) ! REAL , POINTER , DIMENSION (:,:) :: XPAR_BSLAI ! ratio d(biomass)/d(lai)                 (kg/m2) REAL , POINTER , DIMENSION (:,:) :: XPAR_LAIMIN ! minimum LAI (Leaf Area Index)           (m2/m2) REAL , POINTER , DIMENSION (:,:) :: XPAR_SEFOLD ! e-folding time for senescence           (s) REAL , POINTER , DIMENSION (:,:) :: XPAR_H_TREE ! height of trees                         (m) REAL , POINTER , DIMENSION (:,:) :: XPAR_GMES ! mesophyll conductance                   (m s-1) REAL , POINTER , DIMENSION (:,:) :: XPAR_RE25 ! Ecosystem respiration parameter         (kg m2 s-1) ! !------------------------------------------------------------------------------- ! ! - vegetation: Ags Stress parameters ('AST', 'LST', 'NIT', 'NCB' options) ! LOGICAL , POINTER , DIMENSION (:,:) :: LPAR_STRESS ! vegetation response type to water !                                                     ! stress (true:defensive false:offensive) (-) REAL , POINTER , DIMENSION (:,:) :: XPAR_F2I ! critical normilized soil water !                                                     ! content for stress parameterisation REAL , POINTER , DIMENSION (:,:) :: XPAR_GC ! cuticular conductance                   (m s-1) REAL , POINTER , DIMENSION (:,:) :: XPAR_DMAX ! maximum air saturation deficit !                                                     ! tolerate by vegetation                  (kg/kg) ! !------------------------------------------------------------------------------- ! ! - vegetation: Ags Nitrogen-model parameters ('NIT', 'NCB' option) ! REAL , POINTER , DIMENSION (:,:) :: XPAR_CE_NITRO ! leaf aera ratio sensitivity to !                                                       ! nitrogen concentration                (m2/kg) REAL , POINTER , DIMENSION (:,:) :: XPAR_CF_NITRO ! lethal minimum value of leaf area !                                                       ! ratio                                 (m2/kg) REAL , POINTER , DIMENSION (:,:) :: XPAR_CNA_NITRO ! nitrogen concentration of active !                                                       ! biomass                               (kg/kg) ! !------------------------------------------------------------------------------- ! ! - soil: primary parameters ! REAL , POINTER , DIMENSION (:,:,:) :: XPAR_DG ! soil layer depth                        (m) !                                                      ! NOTE: in Force-Restore mode, the !                                                      ! uppermost layer thickness is superficial !                                                      ! and is only explicitly used for soil !                                                      ! water phase changes                     (m) ! REAL , POINTER , DIMENSION (:,:) :: XPAR_GROUND_DEPTH ! ground depth (DIF option) ! REAL , POINTER , DIMENSION (:,:) :: XPAR_DICE ! depth of the soil column for the calculation !                                                        of the frozen soil fraction (m) (Force restore) ! ! - bare soil albedo ! REAL , POINTER , DIMENSION (:,:,:) :: XPAR_ALBNIR_SOIL ! soil near-infra-red albedo        (-) REAL , POINTER , DIMENSION (:,:,:) :: XPAR_ALBVIS_SOIL ! soil visible albedo               (-) REAL , POINTER , DIMENSION (:,:,:) :: XPAR_ALBUV_SOIL ! soil UV albedo                    (-) ! REAL , POINTER , DIMENSION (:,:) :: XPAR_CONDSAT REAL , POINTER , DIMENSION (:,:) :: XPAR_MPOTSAT REAL , POINTER , DIMENSION (:,:) :: XPAR_BCOEF REAL , POINTER , DIMENSION (:,:) :: XPAR_WWILT REAL , POINTER , DIMENSION (:,:) :: XPAR_WFC REAL , POINTER , DIMENSION (:,:) :: XPAR_WSAT ! !------------------------------------------------------------------------------- ! ! - Vegetation: Ags Prognostic (YPHOTO = ('NIT' or 'NCB') or prescribed (YPHOTO='NON' or 'AST') ! REAL , POINTER , DIMENSION (:,:,:) :: XPAR_LAI ! Leaf Area Index                         (m2/m2) ! REAL , POINTER , DIMENSION (:,:,:) :: XPAR_IRRIG REAL , POINTER , DIMENSION (:,:,:) :: XPAR_WATSUP REAL , POINTER , DIMENSION (:,:) :: XPAR_SEED_M REAL , POINTER , DIMENSION (:,:) :: XPAR_SEED_D REAL , POINTER , DIMENSION (:,:) :: XPAR_REAP_M REAL , POINTER , DIMENSION (:,:) :: XPAR_REAP_D ! !------------------------------------------------------------------------------- ! REAL , POINTER , DIMENSION (:) :: XPAR_FRAC_HVEG ! fraction of high vegetation REAL , POINTER , DIMENSION (:) :: XPAR_FRAC_LVEG ! fraction of low  vegetation REAL , POINTER , DIMENSION (:) :: XPAR_FRAC_NVEG ! fraction of bare soil REAL , POINTER , DIMENSION (:,:) :: XPAR_LAI_HVEG ! LAI      of high vegetation REAL , POINTER , DIMENSION (:,:) :: XPAR_LAI_LVEG ! LAI      of low  vegetation REAL , POINTER , DIMENSION (:) :: XPAR_H_HVEG ! height of trees ! END TYPE DATA_ISBA_t","tags":"","loc":"type/data_isba_t.html"},{"title":"CH_SURF_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: CH_SURF_t Contents Variables CCH_EMIS CCH_NAMES CAER_NAMES CCHEM_SURF_FILE XCONVERSION LCH_SURF_EMIS LCH_EMIS Source Code CH_SURF_t Components Type Visibility Attributes Name Initial character(len=4), public :: CCH_EMIS character(len=6), public, DIMENSION(:), POINTER :: CCH_NAMES character(len=6), public, DIMENSION(:), POINTER :: CAER_NAMES character(len=28), public :: CCHEM_SURF_FILE real, public, DIMENSION(:), POINTER :: XCONVERSION logical, public :: LCH_SURF_EMIS logical, public :: LCH_EMIS Source Code TYPE CH_SURF_t ! CHARACTER ( LEN = 4 ) :: CCH_EMIS ! Option for chemical emissions ! 'NONE' : no emission ! 'AGGR' : one aggregated value !    for each specie and hour ! 'SNAP' : from SNAP data using !    potential emission & temporal profiles CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CCH_NAMES ! NAME OF CHEMICAL CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CAER_NAMES ! NAME OF AEROSOL SPECIES ! SPECIES (FOR DIAG ONLY) CHARACTER ( LEN = 28 ) :: CCHEM_SURF_FILE ! name of general ! (chemical) purpose ! ASCII input file REAL , DIMENSION (:), POINTER :: XCONVERSION ! emission unit ! conversion factor LOGICAL :: LCH_SURF_EMIS ! T : chemical emissions ! are used LOGICAL :: LCH_EMIS ! T : chemical emissions ! are present in the file ! END TYPE CH_SURF_t","tags":"","loc":"type/ch_surf_t.html"},{"title":"DST_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DST_t Contents Variables NVT_DST NSIZE_PATCH_DST NR_PATCH_DST Z0_EROD_DST CSV_DST XSFDST XSFDSTM XEMISRADIUS_DST XEMISSIG_DST XMSS_FRC_SRC Source Code DST_t Components Type Visibility Attributes Name Initial integer, public, DIMENSION(:), POINTER :: NVT_DST integer, public, DIMENSION(:), POINTER :: NSIZE_PATCH_DST integer, public, DIMENSION(:,:), POINTER :: NR_PATCH_DST real, public, DIMENSION(:), POINTER :: Z0_EROD_DST character(len=6), public, DIMENSION(:), POINTER :: CSV_DST real, public, DIMENSION(:,:), POINTER :: XSFDST real, public, DIMENSION(:,:), POINTER :: XSFDSTM real, public, DIMENSION(:), POINTER :: XEMISRADIUS_DST real, public, DIMENSION(:), POINTER :: XEMISSIG_DST real, public, DIMENSION(:), POINTER :: XMSS_FRC_SRC Source Code TYPE DST_t ! INTEGER , DIMENSION (:), POINTER :: NVT_DST !MASK: dust vegetation number to vegetation number INTEGER , DIMENSION (:), POINTER :: NSIZE_PATCH_DST !Number of points for a patch and a vegetation class INTEGER , DIMENSION (:,:), POINTER :: NR_PATCH_DST !Mask from patch-points to dust-points REAL , DIMENSION (:), POINTER :: Z0_EROD_DST !Roughness length momentum over erodible dust emitter sfc CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CSV_DST !Name of scalar variables REAL , DIMENSION (:,:), POINTER :: XSFDST !Dust variables to be send to output REAL , DIMENSION (:,:), POINTER :: XSFDSTM !Dust variables to be send to output REAL , DIMENSION (:), POINTER :: XEMISRADIUS_DST !Number median radius for each source mode REAL , DIMENSION (:), POINTER :: XEMISSIG_DST !sigma for each source mode REAL , DIMENSION (:), POINTER :: XMSS_FRC_SRC !Mass fraction of each source mode ! END TYPE DST_t","tags":"","loc":"type/dst_t.html"},{"title":"DST_NP_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DST_NP_t Contents Variables AL Source Code DST_NP_t Components Type Visibility Attributes Name Initial type( DST_t ), public, DIMENSION(:), POINTER :: AL => NULL() Source Code TYPE DST_NP_t ! TYPE ( DST_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE DST_NP_t","tags":"","loc":"type/dst_np_t.html"},{"title":"SURF_ATM_GRID_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: SURF_ATM_GRID_t Contents Variables G XGRID_FULL_PAR NGRID_FULL_PAR NNEAR XJPDIR Source Code SURF_ATM_GRID_t Components Type Visibility Attributes Name Initial type(GRID_t), public :: G real, public, POINTER, DIMENSION(:) :: XGRID_FULL_PAR integer, public :: NGRID_FULL_PAR integer, public, POINTER, DIMENSION(:,:) :: NNEAR real, public, POINTER, DIMENSION(:) :: XJPDIR Source Code TYPE SURF_ATM_GRID_t !------------------------------------------------------------------------------- ! ! Grid definition ! TYPE ( GRID_t ) :: G !                                              ! (depends on value of CGRID) REAL , POINTER , DIMENSION (:) :: XGRID_FULL_PAR ! lits of parameters used to define the grid !                                                     ! (depends on value of CGRID) INTEGER :: NGRID_FULL_PAR ! size of XGRID_FULL_PAR ! INTEGER , POINTER , DIMENSION (:,:) :: NNEAR !------------------------------------------------------------------------------- ! ! General surface parameters: ! REAL , POINTER , DIMENSION (:) :: XJPDIR ! heading of J direction (deg from N clockwise) !------------------------------------------------------------------------------- ! END TYPE SURF_ATM_GRID_t","tags":"","loc":"type/surf_atm_grid_t.html"},{"title":"GR_BIOG_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: GR_BIOG_t Contents Variables XISOPOT XMONOPOT XIACAN XFISO XFMONO XNOFLUX Source Code GR_BIOG_t Components Type Visibility Attributes Name Initial real, public, DIMENSION(:), POINTER :: XISOPOT real, public, DIMENSION(:), POINTER :: XMONOPOT real, public, DIMENSION(:,:), POINTER :: XIACAN real, public, DIMENSION(:), POINTER :: XFISO real, public, DIMENSION(:), POINTER :: XFMONO real, public, DIMENSION(:), POINTER :: XNOFLUX Source Code TYPE GR_BIOG_t ! ! ! !* Emission potential for isoprene and monoterpenes REAL , DIMENSION (:), POINTER :: XISOPOT REAL , DIMENSION (:), POINTER :: XMONOPOT ! !* Radiation at different level(cf Gauss) in the canopy REAL , DIMENSION (:,:), POINTER :: XIACAN ! PAR at 3 gauss level for each patch ! !* XFISO  = isoprene emission flux (ppp.m.s-1) !  XFMONO = monoterpenes emission flux (ppp m s-1) REAL , DIMENSION (:), POINTER :: XFISO , XFMONO !SOILNOX REAL , DIMENSION (:), POINTER :: XNOFLUX ! ! END TYPE GR_BIOG_t","tags":"","loc":"type/gr_biog_t.html"},{"title":"GR_BIOG_NP_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: GR_BIOG_NP_t Contents Variables AL Source Code GR_BIOG_NP_t Components Type Visibility Attributes Name Initial type( GR_BIOG_t ), public, DIMENSION(:), POINTER :: AL => NULL() Source Code TYPE GR_BIOG_NP_t ! TYPE ( GR_BIOG_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE GR_BIOG_NP_t","tags":"","loc":"type/gr_biog_np_t.html"},{"title":"WATFLUX_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: WATFLUX_t Contents Variables XZS XCOVER LCOVER LSBL CWAT_ALB LINTERPOL_TS CINTERPOL_TS XTS XTICE XZ0 XEMIS XDIR_ALB XSCA_ALB XICE_ALB XTS_MTH XCPL_WATER_WIND XCPL_WATER_FWSU XCPL_WATER_FWSV XCPL_WATER_SNET XCPL_WATER_HEAT XCPL_WATER_EVAP XCPL_WATER_RAIN XCPL_WATER_SNOW XCPL_WATER_FWSM XCPL_WATERICE_SNET XCPL_WATERICE_HEAT XCPL_WATERICE_EVAP TTIME TZTIME XTSTEP XOUT_TSTEP Source Code WATFLUX_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:) :: XZS real, public, POINTER, DIMENSION(:,:) :: XCOVER logical, public, POINTER, DIMENSION(:) :: LCOVER logical, public :: LSBL character(len=4), public :: CWAT_ALB logical, public :: LINTERPOL_TS character(len=6), public :: CINTERPOL_TS real, public, POINTER, DIMENSION(:) :: XTS real, public, POINTER, DIMENSION(:) :: XTICE real, public, POINTER, DIMENSION(:) :: XZ0 real, public, POINTER, DIMENSION(:) :: XEMIS real, public, POINTER, DIMENSION(:) :: XDIR_ALB real, public, POINTER, DIMENSION(:) :: XSCA_ALB real, public, POINTER, DIMENSION(:) :: XICE_ALB real, public, POINTER, DIMENSION(:,:) :: XTS_MTH real, public, POINTER, DIMENSION(:) :: XCPL_WATER_WIND real, public, POINTER, DIMENSION(:) :: XCPL_WATER_FWSU real, public, POINTER, DIMENSION(:) :: XCPL_WATER_FWSV real, public, POINTER, DIMENSION(:) :: XCPL_WATER_SNET real, public, POINTER, DIMENSION(:) :: XCPL_WATER_HEAT real, public, POINTER, DIMENSION(:) :: XCPL_WATER_EVAP real, public, POINTER, DIMENSION(:) :: XCPL_WATER_RAIN real, public, POINTER, DIMENSION(:) :: XCPL_WATER_SNOW real, public, POINTER, DIMENSION(:) :: XCPL_WATER_FWSM real, public, POINTER, DIMENSION(:) :: XCPL_WATERICE_SNET real, public, POINTER, DIMENSION(:) :: XCPL_WATERICE_HEAT real, public, POINTER, DIMENSION(:) :: XCPL_WATERICE_EVAP type(DATE_TIME), public :: TTIME type(DATE_TIME), public :: TZTIME real, public :: XTSTEP real, public :: XOUT_TSTEP Source Code TYPE WATFLUX_t ! ! General surface: ! REAL , POINTER , DIMENSION (:) :: XZS ! orography                     (m) REAL , POINTER , DIMENSION (:,:) :: XCOVER ! fraction of each ecosystem    (-) LOGICAL , POINTER , DIMENSION (:) :: LCOVER ! GCOVER(i)=T --> ith cover field is not 0. LOGICAL :: LSBL ! T: SBL scheme within the Surface Boundary Layer !                                          ! F: no atmospheric layers below forcing level CHARACTER ( LEN = 4 ) :: CWAT_ALB ! type of albedo ! LOGICAL :: LINTERPOL_TS ! Interpotalation of monthly TS CHARACTER ( LEN = 6 ) :: CINTERPOL_TS ! Interpotalation of monthly TS ! ! Inland water: ! REAL , POINTER , DIMENSION (:) :: XTS ! water surface temperature               (K) REAL , POINTER , DIMENSION (:) :: XTICE ! water ice temperature REAL , POINTER , DIMENSION (:) :: XZ0 ! water surface roughness length          (-) REAL , POINTER , DIMENSION (:) :: XEMIS ! water surface emissivity                (-) REAL , POINTER , DIMENSION (:) :: XDIR_ALB ! water surface direct albedo             (-) REAL , POINTER , DIMENSION (:) :: XSCA_ALB ! water surface diffuse albedo            (-) REAL , POINTER , DIMENSION (:) :: XICE_ALB ! water ice albedo (for ESM coupling)     (-) ! REAL , POINTER , DIMENSION (:,:) :: XTS_MTH ! Monthly water surface temperature               (K) ! REAL , POINTER , DIMENSION (:) :: XCPL_WATER_WIND ! 10m wind speed for ESM coupling REAL , POINTER , DIMENSION (:) :: XCPL_WATER_FWSU ! zonal wind stress for ESM coupling REAL , POINTER , DIMENSION (:) :: XCPL_WATER_FWSV ! meridian wind stress for ESM coupling REAL , POINTER , DIMENSION (:) :: XCPL_WATER_SNET ! Solar net heat flux REAL , POINTER , DIMENSION (:) :: XCPL_WATER_HEAT ! Non solar net heat flux REAL , POINTER , DIMENSION (:) :: XCPL_WATER_EVAP ! Evaporation for ESM coupling REAL , POINTER , DIMENSION (:) :: XCPL_WATER_RAIN ! Rainfall for ESM coupling REAL , POINTER , DIMENSION (:) :: XCPL_WATER_SNOW ! Snowfall for ESM coupling REAL , POINTER , DIMENSION (:) :: XCPL_WATER_FWSM ! wind stress module for ESM coupling ! REAL , POINTER , DIMENSION (:) :: XCPL_WATERICE_SNET ! solar net heat flux REAL , POINTER , DIMENSION (:) :: XCPL_WATERICE_HEAT ! Non solar net heat flux REAL , POINTER , DIMENSION (:) :: XCPL_WATERICE_EVAP ! Sublimation for ESM coupling ! ! Date: ! TYPE ( DATE_TIME ) :: TTIME ! current date and time TYPE ( DATE_TIME ) :: TZTIME ! ! Time-step: ! REAL :: XTSTEP ! time step ! REAL :: XOUT_TSTEP ! output writing time step ! ! END TYPE WATFLUX_t","tags":"","loc":"type/watflux_t.html"},{"title":"CH_FLAKE_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: CH_FLAKE_t Contents Variables CCH_DRY_DEP XDEP SVF CCH_NAMES CDSTNAMES CSLTNAMES CAER_NAMES Source Code CH_FLAKE_t Components Type Visibility Attributes Name Initial character(len=6), public :: CCH_DRY_DEP real, public, DIMENSION(:,:), POINTER :: XDEP type(SV_t), public :: SVF character(len=6), public, DIMENSION(:), POINTER :: CCH_NAMES character(len=6), public, DIMENSION(:), POINTER :: CDSTNAMES character(len=6), public, DIMENSION(:), POINTER :: CSLTNAMES character(len=6), public, DIMENSION(:), POINTER :: CAER_NAMES Source Code TYPE CH_FLAKE_t ! CHARACTER ( LEN = 6 ) :: CCH_DRY_DEP ! deposition scheme REAL , DIMENSION (:,:), POINTER :: XDEP ! final dry deposition ! velocity  for lakes TYPE ( SV_t ) :: SVF ! (FOR DIAG ONLY) CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CCH_NAMES ! NAME OF CHEMICAL SPECIES ! (FOR DIAG ONLY) CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CDSTNAMES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CSLTNAMES CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CAER_NAMES ! END TYPE CH_FLAKE_t","tags":"","loc":"type/ch_flake_t.html"},{"title":"DIAG_UTCI_TEB_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: DIAG_UTCI_TEB_t Contents Variables LUTCI XUTCI_IN XUTCI_OUTSUN XUTCI_OUTSHADE XTRAD_SUN XTRAD_SHADE XUTCIC_IN XUTCIC_OUTSUN XUTCIC_OUTSHADE Source Code DIAG_UTCI_TEB_t Components Type Visibility Attributes Name Initial logical, public :: LUTCI real, public, POINTER, DIMENSION(:) :: XUTCI_IN real, public, POINTER, DIMENSION(:) :: XUTCI_OUTSUN real, public, POINTER, DIMENSION(:) :: XUTCI_OUTSHADE real, public, POINTER, DIMENSION(:) :: XTRAD_SUN real, public, POINTER, DIMENSION(:) :: XTRAD_SHADE real, public, POINTER, DIMENSION(:,:) :: XUTCIC_IN real, public, POINTER, DIMENSION(:,:) :: XUTCIC_OUTSUN real, public, POINTER, DIMENSION(:,:) :: XUTCIC_OUTSHADE Source Code TYPE DIAG_UTCI_TEB_t !------------------------------------------------------------------------------ ! LOGICAL :: LUTCI ! flag to compute UTCI quantities REAL , POINTER , DIMENSION (:) :: XUTCI_IN ! UTCI for person indoor REAL , POINTER , DIMENSION (:) :: XUTCI_OUTSUN ! UTCI for person outdoor at sun REAL , POINTER , DIMENSION (:) :: XUTCI_OUTSHADE ! UTCI for person outdoor at shade REAL , POINTER , DIMENSION (:) :: XTRAD_SUN ! Mean radiant temperature seen by person at sun (K) REAL , POINTER , DIMENSION (:) :: XTRAD_SHADE ! Mean radiant temperature seen by person in shade (K) REAL , POINTER , DIMENSION (:,:) :: XUTCIC_IN ! Cumulated UTCI stress for person indoor REAL , POINTER , DIMENSION (:,:) :: XUTCIC_OUTSUN ! Cumulated UTCI stress for person outdoor at sun REAL , POINTER , DIMENSION (:,:) :: XUTCIC_OUTSHADE ! Cumulated UTCI stress for person outdoor at shade ! END TYPE DIAG_UTCI_TEB_t","tags":"","loc":"type/diag_utci_teb_t.html"},{"title":"ISBA_S_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: ISBA_S_t Contents Variables XZS XCOVER LCOVER XTI_MIN XTI_MAX XTI_MEAN XTI_STD XTI_SKEW XSOC XPH XFERT XABC XPOI TTIME XTAB_FSAT XTAB_WTOP XTAB_QTOP XF_PARAM XC_DEPTH_RATIO XCPL_DRAIN XCPL_RUNOFF XCPL_ICEFLUX XCPL_EFLOOD XCPL_PFLOOD XCPL_IFLOOD XPERTVEG XPERTLAI XPERTCV XPERTALB XPERTZ0 XTSRAD_NAT XEMIS_NAT XFRACSOC XVEGTYPE XPATCH XVEGTYPE_PATCH XINNOV XRESID XWORK_WR XWSN_WR XRHO_WR XHEA_WR XAGE_WR XSG1_WR XSG2_WR XHIS_WR XT_WR XALB_WR TDATE_WR Source Code ISBA_S_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:) :: XZS real, public, POINTER, DIMENSION(:,:) :: XCOVER logical, public, POINTER, DIMENSION(:) :: LCOVER real, public, POINTER, DIMENSION(:) :: XTI_MIN real, public, POINTER, DIMENSION(:) :: XTI_MAX real, public, POINTER, DIMENSION(:) :: XTI_MEAN real, public, POINTER, DIMENSION(:) :: XTI_STD real, public, POINTER, DIMENSION(:) :: XTI_SKEW real, public, POINTER, DIMENSION(:,:) :: XSOC real, public, POINTER, DIMENSION(:) :: XPH real, public, POINTER, DIMENSION(:) :: XFERT real, public, POINTER, DIMENSION(:) :: XABC real, public, POINTER, DIMENSION(:) :: XPOI type(DATE_TIME), public :: TTIME real, public, POINTER, DIMENSION(:,:) :: XTAB_FSAT real, public, POINTER, DIMENSION(:,:) :: XTAB_WTOP real, public, POINTER, DIMENSION(:,:) :: XTAB_QTOP real, public, POINTER, DIMENSION(:) :: XF_PARAM real, public, POINTER, DIMENSION(:) :: XC_DEPTH_RATIO real, public, POINTER, DIMENSION(:) :: XCPL_DRAIN real, public, POINTER, DIMENSION(:) :: XCPL_RUNOFF real, public, POINTER, DIMENSION(:) :: XCPL_ICEFLUX real, public, POINTER, DIMENSION(:) :: XCPL_EFLOOD real, public, POINTER, DIMENSION(:) :: XCPL_PFLOOD real, public, POINTER, DIMENSION(:) :: XCPL_IFLOOD real, public, POINTER, DIMENSION(:) :: XPERTVEG real, public, POINTER, DIMENSION(:) :: XPERTLAI real, public, POINTER, DIMENSION(:) :: XPERTCV real, public, POINTER, DIMENSION(:) :: XPERTALB real, public, POINTER, DIMENSION(:) :: XPERTZ0 real, public, POINTER, DIMENSION(:) :: XTSRAD_NAT real, public, POINTER, DIMENSION(:) :: XEMIS_NAT real, public, POINTER, DIMENSION(:,:) :: XFRACSOC real, public, POINTER, DIMENSION(:,:) :: XVEGTYPE real, public, POINTER, DIMENSION(:,:) :: XPATCH real, public, POINTER, DIMENSION(:,:,:) :: XVEGTYPE_PATCH real, public, POINTER, DIMENSION(:,:) :: XINNOV real, public, POINTER, DIMENSION(:,:) :: XRESID real, public, POINTER, DIMENSION(:,:) :: XWORK_WR real, public, POINTER, DIMENSION(:,:,:) :: XWSN_WR real, public, POINTER, DIMENSION(:,:,:) :: XRHO_WR real, public, POINTER, DIMENSION(:,:,:) :: XHEA_WR real, public, POINTER, DIMENSION(:,:,:) :: XAGE_WR real, public, POINTER, DIMENSION(:,:,:) :: XSG1_WR real, public, POINTER, DIMENSION(:,:,:) :: XSG2_WR real, public, POINTER, DIMENSION(:,:,:) :: XHIS_WR real, public, POINTER, DIMENSION(:,:,:) :: XT_WR real, public, POINTER, DIMENSION(:,:) :: XALB_WR type(DATE_TIME), public, POINTER, DIMENSION(:,:) :: TDATE_WR Source Code TYPE ISBA_S_t ! ! General surface parameters: ! REAL , POINTER , DIMENSION (:) :: XZS ! relief                                  (m) REAL , POINTER , DIMENSION (:,:) :: XCOVER ! fraction of each ecosystem              (-) LOGICAL , POINTER , DIMENSION (:) :: LCOVER ! GCOVER(i)=T --> ith cover field is not 0. ! ! Topmodel statistics ! REAL , POINTER , DIMENSION (:) :: XTI_MIN , XTI_MAX , XTI_MEAN , XTI_STD , XTI_SKEW ! REAL , POINTER , DIMENSION (:,:) :: XSOC ! soil organic carbon content             (kg/m2) REAL , POINTER , DIMENSION (:) :: XPH ! soil pH REAL , POINTER , DIMENSION (:) :: XFERT ! soil fertilisation rate (kgN/ha/h) ! ! REAL , POINTER , DIMENSION (:) :: XABC ! abscissa needed for integration !                                                  ! of net assimilation and stomatal !                                                  ! conductance over canopy depth           (-) REAL , POINTER , DIMENSION (:) :: XPOI ! Gaussian weights for integration !                                                  ! of net assimilation and stomatal !                                                  ! conductance over canopy depth           (-) ! TYPE ( DATE_TIME ) :: TTIME ! REAL , POINTER , DIMENSION (:,:) :: XTAB_FSAT !Satured fraction array REAL , POINTER , DIMENSION (:,:) :: XTAB_WTOP !Active TOPMODEL-layer array REAL , POINTER , DIMENSION (:,:) :: XTAB_QTOP !Subsurface flow TOPMODEL array ! REAL , POINTER , DIMENSION (:) :: XF_PARAM REAL , POINTER , DIMENSION (:) :: XC_DEPTH_RATIO ! ! - Coupling with river routing model ! REAL , POINTER , DIMENSION (:) :: XCPL_DRAIN ! Surface runoff REAL , POINTER , DIMENSION (:) :: XCPL_RUNOFF ! Deep drainage or gourdwater recharge REAL , POINTER , DIMENSION (:) :: XCPL_ICEFLUX ! Calving flux REAL , POINTER , DIMENSION (:) :: XCPL_EFLOOD ! floodplains evaporation REAL , POINTER , DIMENSION (:) :: XCPL_PFLOOD ! floodplains precipitation interception REAL , POINTER , DIMENSION (:) :: XCPL_IFLOOD ! floodplains infiltration ! !  - Random perturbations ! REAL , POINTER , DIMENSION (:) :: XPERTVEG REAL , POINTER , DIMENSION (:) :: XPERTLAI REAL , POINTER , DIMENSION (:) :: XPERTCV REAL , POINTER , DIMENSION (:) :: XPERTALB REAL , POINTER , DIMENSION (:) :: XPERTZ0 ! REAL , POINTER , DIMENSION (:) :: XTSRAD_NAT ! patch averaged radiative temperature    (K) ! REAL , POINTER , DIMENSION (:) :: XEMIS_NAT ! patch averaged emissivity               (-) ! !  - Assimilation: ENKF ! REAL , POINTER , DIMENSION (:,:) :: XFRACSOC ! Fraction of organic carbon in each soil layer ! REAL , POINTER , DIMENSION (:,:) :: XVEGTYPE ! REAL , POINTER , DIMENSION (:,:) :: XPATCH ! fraction of each tile/patch   (-) ! ! Mask and number of grid elements containing patches/tiles: ! REAL , POINTER , DIMENSION (:,:,:) :: XVEGTYPE_PATCH ! fraction of each vegetation type for ! REAL , POINTER , DIMENSION (:,:) :: XINNOV REAL , POINTER , DIMENSION (:,:) :: XRESID ! REAL , POINTER , DIMENSION (:,:) :: XWORK_WR ! REAL , POINTER , DIMENSION (:,:,:) :: XWSN_WR REAL , POINTER , DIMENSION (:,:,:) :: XRHO_WR REAL , POINTER , DIMENSION (:,:,:) :: XHEA_WR REAL , POINTER , DIMENSION (:,:,:) :: XAGE_WR REAL , POINTER , DIMENSION (:,:,:) :: XSG1_WR REAL , POINTER , DIMENSION (:,:,:) :: XSG2_WR REAL , POINTER , DIMENSION (:,:,:) :: XHIS_WR REAL , POINTER , DIMENSION (:,:,:) :: XT_WR REAL , POINTER , DIMENSION (:,:) :: XALB_WR ! TYPE ( DATE_TIME ), POINTER , DIMENSION (:,:) :: TDATE_WR ! END TYPE ISBA_S_t","tags":"","loc":"type/isba_s_t.html"},{"title":"ISBA_K_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: ISBA_K_t Contents Variables XSAND XCLAY XPERM XRUNOFFB XWDRAIN XTDEEP XGAMMAT XMPOTSAT XBCOEF XWWILT XWFC XWSAT XCGSAT XC4B XACOEF XPCOEF XHCAPSOIL XCONDDRY XCONDSLD XFWTD XWTD XALBNIR_DRY XALBVIS_DRY XALBUV_DRY XALBNIR_WET XALBVIS_WET XALBUV_WET XWD0 XKANISO XMUF XFSAT XFFLOOD XPIFLOOD XFF XFFG XFFV XFFROZEN XALBF XEMISF XDIR_ALB_WITH_SNOW XSCA_ALB_WITH_SNOW XVEGTYPE Source Code ISBA_K_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:,:) :: XSAND real, public, POINTER, DIMENSION(:,:) :: XCLAY real, public, POINTER, DIMENSION(:) :: XPERM real, public, POINTER, DIMENSION(:) :: XRUNOFFB real, public, POINTER, DIMENSION(:) :: XWDRAIN real, public, POINTER, DIMENSION(:) :: XTDEEP real, public, POINTER, DIMENSION(:) :: XGAMMAT real, public, POINTER, DIMENSION(:,:) :: XMPOTSAT real, public, POINTER, DIMENSION(:,:) :: XBCOEF real, public, POINTER, DIMENSION(:,:) :: XWWILT real, public, POINTER, DIMENSION(:,:) :: XWFC real, public, POINTER, DIMENSION(:,:) :: XWSAT real, public, POINTER, DIMENSION(:) :: XCGSAT real, public, POINTER, DIMENSION(:) :: XC4B real, public, POINTER, DIMENSION(:) :: XACOEF real, public, POINTER, DIMENSION(:) :: XPCOEF real, public, POINTER, DIMENSION(:,:) :: XHCAPSOIL real, public, POINTER, DIMENSION(:,:) :: XCONDDRY real, public, POINTER, DIMENSION(:,:) :: XCONDSLD real, public, POINTER, DIMENSION(:) :: XFWTD real, public, POINTER, DIMENSION(:) :: XWTD real, public, POINTER, DIMENSION(:) :: XALBNIR_DRY real, public, POINTER, DIMENSION(:) :: XALBVIS_DRY real, public, POINTER, DIMENSION(:) :: XALBUV_DRY real, public, POINTER, DIMENSION(:) :: XALBNIR_WET real, public, POINTER, DIMENSION(:) :: XALBVIS_WET real, public, POINTER, DIMENSION(:) :: XALBUV_WET real, public, POINTER, DIMENSION(:,:) :: XWD0 real, public, POINTER, DIMENSION(:,:) :: XKANISO real, public, POINTER, DIMENSION(:) :: XMUF real, public, POINTER, DIMENSION(:) :: XFSAT real, public, POINTER, DIMENSION(:) :: XFFLOOD real, public, POINTER, DIMENSION(:) :: XPIFLOOD real, public, POINTER, DIMENSION(:) :: XFF real, public, POINTER, DIMENSION(:) :: XFFG real, public, POINTER, DIMENSION(:) :: XFFV real, public, POINTER, DIMENSION(:) :: XFFROZEN real, public, POINTER, DIMENSION(:) :: XALBF real, public, POINTER, DIMENSION(:) :: XEMISF real, public, POINTER, DIMENSION(:,:) :: XDIR_ALB_WITH_SNOW real, public, POINTER, DIMENSION(:,:) :: XSCA_ALB_WITH_SNOW real, public, POINTER, DIMENSION(:,:) :: XVEGTYPE Source Code TYPE ISBA_K_t ! REAL , POINTER , DIMENSION (:,:) :: XSAND ! sand fraction                           (-) REAL , POINTER , DIMENSION (:,:) :: XCLAY ! clay fraction                           (-) ! REAL , POINTER , DIMENSION (:) :: XPERM ! permafrost distribution                 (-) ! REAL , POINTER , DIMENSION (:) :: XRUNOFFB ! sub-grid dt92 surface runoff slope parameter (-) REAL , POINTER , DIMENSION (:) :: XWDRAIN ! continuous drainage parameter           (-) ! ! REAL , POINTER , DIMENSION (:) :: XTDEEP ! prescribed deep soil temperature !                                                  ! (optional) REAL , POINTER , DIMENSION (:) :: XGAMMAT ! 'Force-Restore' timescale when using a !                                                  ! prescribed lower boundary temperature   (1/days) ! REAL , POINTER , DIMENSION (:,:) :: XMPOTSAT ! matric potential at saturation          (m) REAL , POINTER , DIMENSION (:,:) :: XBCOEF ! soil water CH78 b-parameter             (-) REAL , POINTER , DIMENSION (:,:) :: XWWILT ! wilting point volumetric water content !                                                  ! profile                                 (m3/m3) REAL , POINTER , DIMENSION (:,:) :: XWFC ! field capacity volumetric water content !                                                  ! profile                                 (m3/m3) REAL , POINTER , DIMENSION (:,:) :: XWSAT ! porosity profile                        (m3/m3) ! REAL , POINTER , DIMENSION (:) :: XCGSAT ! soil thermal inertia coefficient at !                                                  ! saturation REAL , POINTER , DIMENSION (:) :: XC4B ! 'Force-Restore' sub-surface vertical !                                                  ! diffusion coefficient (slope parameter) (-) REAL , POINTER , DIMENSION (:) :: XACOEF ! 'Force-Restore' surface vertical !                                                  ! diffusion coefficient                   (-) REAL , POINTER , DIMENSION (:) :: XPCOEF ! 'Force-Restore' surface vertical !                                                  ! diffusion coefficient                   (-) REAL , POINTER , DIMENSION (:,:) :: XHCAPSOIL ! soil heat capacity                      (J/K/m3) REAL , POINTER , DIMENSION (:,:) :: XCONDDRY ! soil dry thermal conductivity           (W/m/K) REAL , POINTER , DIMENSION (:,:) :: XCONDSLD ! soil solids thermal conductivity        (W/m/K) ! ! - Water table depth coupling ! REAL , POINTER , DIMENSION (:) :: XFWTD ! grid-cell fraction of water table rise REAL , POINTER , DIMENSION (:) :: XWTD ! water table depth (negative below soil surface) (m) ! ! * Physiographic radiative fields ! REAL , POINTER , DIMENSION (:) :: XALBNIR_DRY ! dry soil near-infra-red albedo          (-) REAL , POINTER , DIMENSION (:) :: XALBVIS_DRY ! dry soil visible albedo                 (-) REAL , POINTER , DIMENSION (:) :: XALBUV_DRY ! dry soil UV albedo                      (-) REAL , POINTER , DIMENSION (:) :: XALBNIR_WET ! wet soil near-infra-red albedo          (-) REAL , POINTER , DIMENSION (:) :: XALBVIS_WET ! wet soil visible albedo                 (-) REAL , POINTER , DIMENSION (:) :: XALBUV_WET ! wet soil UV albedo                      (-) ! ! * SGH initializations ! REAL , POINTER , DIMENSION (:,:) :: XWD0 ! water content equivalent to TOPMODEL maximum deficit REAL , POINTER , DIMENSION (:,:) :: XKANISO ! Anisotropy coeficient for hydraulic conductivity ! REAL , POINTER , DIMENSION (:) :: XMUF ! fraction of the grid cell reached by the rainfall REAL , POINTER , DIMENSION (:) :: XFSAT ! Topmodel or dt92 saturated fracti ! REAL , POINTER , DIMENSION (:) :: XFFLOOD ! Grid-cell flood fraction REAL , POINTER , DIMENSION (:) :: XPIFLOOD ! flood potential infiltration (kg/m2/s) ! ! - Flood scheme ! REAL , POINTER , DIMENSION (:) :: XFF ! Total Flood fraction REAL , POINTER , DIMENSION (:) :: XFFG ! Flood fraction over ground REAL , POINTER , DIMENSION (:) :: XFFV ! Flood fraction over vegetation REAL , POINTER , DIMENSION (:) :: XFFROZEN ! Fraction of frozen floodplains REAL , POINTER , DIMENSION (:) :: XALBF ! Flood albedo REAL , POINTER , DIMENSION (:) :: XEMISF ! Flood emissivity ! ! - Snow and flood fractions and total albedo at time t:                             (-) ! REAL , POINTER , DIMENSION (:,:) :: XDIR_ALB_WITH_SNOW ! total direct albedo by bands REAL , POINTER , DIMENSION (:,:) :: XSCA_ALB_WITH_SNOW ! total diffuse albedo by bands ! REAL , POINTER , DIMENSION (:,:) :: XVEGTYPE ! END TYPE ISBA_K_t","tags":"","loc":"type/isba_k_t.html"},{"title":"ISBA_P_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: ISBA_P_t Contents Variables NSIZE_P XPATCH XVEGTYPE_PATCH NR_P XPATCH_OLD XANMAX XFZERO XEPSO XGAMM XQDGAMM XQDGMES XT1GMES XT2GMES XAMAX XQDAMAX XT1AMAX XT2AMAX XAH XBH XTAU_WOOD XINCREASE XTURNOVER XCONDSAT XTAUICE XC1SAT XC2REF XC3 XC4REF XBSLAI_NITRO XCPS XLVTT XLSTT XRUNOFFD XDZG XDZDIF XSOILWGHT XKSAT_ICE XTOPQS XDG XDG_OLD XDG2 NWG_LAYER XDROOT XROOTFRAC XD_ICE XH_TREE XZ0_O_Z0H XRE25 XDMAX XRED_NOISE XINCR XHO Source Code ISBA_P_t Components Type Visibility Attributes Name Initial integer, public :: NSIZE_P real, public, POINTER, DIMENSION(:) :: XPATCH real, public, POINTER, DIMENSION(:,:) :: XVEGTYPE_PATCH integer, public, POINTER, DIMENSION(:) :: NR_P real, public, POINTER, DIMENSION(:) :: XPATCH_OLD real, public, POINTER, DIMENSION(:) :: XANMAX real, public, POINTER, DIMENSION(:) :: XFZERO real, public, POINTER, DIMENSION(:) :: XEPSO real, public, POINTER, DIMENSION(:) :: XGAMM real, public, POINTER, DIMENSION(:) :: XQDGAMM real, public, POINTER, DIMENSION(:) :: XQDGMES real, public, POINTER, DIMENSION(:) :: XT1GMES real, public, POINTER, DIMENSION(:) :: XT2GMES real, public, POINTER, DIMENSION(:) :: XAMAX real, public, POINTER, DIMENSION(:) :: XQDAMAX real, public, POINTER, DIMENSION(:) :: XT1AMAX real, public, POINTER, DIMENSION(:) :: XT2AMAX real, public, POINTER, DIMENSION(:) :: XAH real, public, POINTER, DIMENSION(:) :: XBH real, public, POINTER, DIMENSION(:) :: XTAU_WOOD real, public, POINTER, DIMENSION(:,:) :: XINCREASE real, public, POINTER, DIMENSION(:,:) :: XTURNOVER real, public, POINTER, DIMENSION(:,:) :: XCONDSAT real, public, POINTER, DIMENSION(:) :: XTAUICE real, public, POINTER, DIMENSION(:) :: XC1SAT real, public, POINTER, DIMENSION(:) :: XC2REF real, public, POINTER, DIMENSION(:,:) :: XC3 real, public, POINTER, DIMENSION(:) :: XC4REF real, public, POINTER, DIMENSION(:) :: XBSLAI_NITRO real, public, POINTER, DIMENSION(:) :: XCPS real, public, POINTER, DIMENSION(:) :: XLVTT real, public, POINTER, DIMENSION(:) :: XLSTT real, public, POINTER, DIMENSION(:) :: XRUNOFFD real, public, POINTER, DIMENSION(:,:) :: XDZG real, public, POINTER, DIMENSION(:,:) :: XDZDIF real, public, POINTER, DIMENSION(:,:) :: XSOILWGHT real, public, POINTER, DIMENSION(:) :: XKSAT_ICE real, public, POINTER, DIMENSION(:,:) :: XTOPQS real, public, POINTER, DIMENSION(:,:) :: XDG real, public, POINTER, DIMENSION(:,:) :: XDG_OLD real, public, POINTER, DIMENSION(:) :: XDG2 integer, public, POINTER, DIMENSION(:) :: NWG_LAYER real, public, POINTER, DIMENSION(:) :: XDROOT real, public, POINTER, DIMENSION(:,:) :: XROOTFRAC real, public, POINTER, DIMENSION(:) :: XD_ICE real, public, POINTER, DIMENSION(:) :: XH_TREE real, public, POINTER, DIMENSION(:) :: XZ0_O_Z0H real, public, POINTER, DIMENSION(:) :: XRE25 real, public, POINTER, DIMENSION(:) :: XDMAX real, public, POINTER, DIMENSION(:,:) :: XRED_NOISE real, public, POINTER, DIMENSION(:,:) :: XINCR real, public, POINTER, DIMENSION(:,:,:) :: XHO Source Code TYPE ISBA_P_t ! INTEGER :: NSIZE_P ! number of sub-patchs/tiles              (-) ! REAL , POINTER , DIMENSION (:) :: XPATCH ! fraction of each tile/patch   (-) ! ! Mask and number of grid elements containing patches/tiles: ! REAL , POINTER , DIMENSION (:,:) :: XVEGTYPE_PATCH ! fraction of each vegetation type for ! INTEGER , POINTER , DIMENSION (:) :: NR_P ! patch/tile mask ! REAL , POINTER , DIMENSION (:) :: XPATCH_OLD ! fraction of each tile/patchfor land use (-) ! ! REAL , POINTER , DIMENSION (:) :: XANMAX ! maximum photosynthesis rate             ( REAL , POINTER , DIMENSION (:) :: XFZERO ! ideal value of F, no photo- !                                                ! respiration or saturation deficit REAL , POINTER , DIMENSION (:) :: XEPSO ! maximum initial quantum use !                                                ! efficiency                              (mg J-1 PAR) REAL , POINTER , DIMENSION (:) :: XGAMM ! CO2 conpensation concentration          (ppm) REAL , POINTER , DIMENSION (:) :: XQDGAMM ! Log of Q10 function for CO2 conpensation !                                               ! concentration                           (-) REAL , POINTER , DIMENSION (:) :: XQDGMES ! Log of Q10 function for mesophyll conductance  (-) REAL , POINTER , DIMENSION (:) :: XT1GMES ! reference temperature for computing !                                                ! compensation concentration function for !                                                ! mesophyll conductance: minimum !                                                ! temperature                             (K) REAL , POINTER , DIMENSION (:) :: XT2GMES ! reference temperature for computing !                                                ! compensation concentration function for !                                                ! mesophyll conductance: maximum !                                                ! temperature                             (K) REAL , POINTER , DIMENSION (:) :: XAMAX ! leaf photosynthetic capacity            (mg m-2 s-1) REAL , POINTER , DIMENSION (:) :: XQDAMAX ! Log of Q10 function for leaf photosynthetic !                                                ! capacity                                (-) REAL , POINTER , DIMENSION (:) :: XT1AMAX ! reference temperature for computing !                                                ! compensation concentration function for !                                                ! leaf photosynthetic capacity: minimum !                                                ! temperature                             (K) REAL , POINTER , DIMENSION (:) :: XT2AMAX ! reference temperature for computing !                                                ! compensation concentration function for !                                                ! leaf photosynthetic capacity: maximum !                                                ! temperature                             (K) REAL , POINTER , DIMENSION (:) :: XAH ! coefficients for herbaceous water stress !                                                ! response (offensive or defensive)       (log(mm/s)) REAL , POINTER , DIMENSION (:) :: XBH ! coefficients for herbaceous water stress !                                                ! response (offensive or defensive) REAL , POINTER , DIMENSION (:) :: XTAU_WOOD ! residence time in woody biomass         (s) REAL , POINTER , DIMENSION (:,:) :: XINCREASE ! biomass increase                     (kg/m2/day) REAL , POINTER , DIMENSION (:,:) :: XTURNOVER ! turnover rates from biomass to litter (gC/m2/s) ! ! *Soil hydraulic characteristics ! REAL , POINTER , DIMENSION (:,:) :: XCONDSAT ! hydraulic conductivity at saturation    (m/s) ! REAL , POINTER , DIMENSION (:) :: XTAUICE ! soil freezing characteristic timescale  (s) ! REAL , POINTER , DIMENSION (:) :: XC1SAT ! 'Force-Restore' C1 coefficient at !                                                ! saturation                              (-) REAL , POINTER , DIMENSION (:) :: XC2REF ! 'Force-Restore' reference value of C2   (-) REAL , POINTER , DIMENSION (:,:) :: XC3 ! 'Force-Restore' C3 drainage coefficient (m) REAL , POINTER , DIMENSION (:) :: XC4REF ! 'Force-Restore' sub-surface vertical !                                                ! for lateral drainage ('DIF' option) ! REAL , POINTER , DIMENSION (:) :: XBSLAI_NITRO ! biomass/LAI ratio from nitrogen !                                                  ! decline theory                        (kg/m2) ! * Soil thermal characteristics ! REAL , POINTER , DIMENSION (:) :: XCPS REAL , POINTER , DIMENSION (:) :: XLVTT REAL , POINTER , DIMENSION (:) :: XLSTT ! ! * Initialize hydrology ! REAL , POINTER , DIMENSION (:) :: XRUNOFFD ! depth over which sub-grid runoff is !                                                ! computed: in Force-Restore this is the !                                                ! total soil column ('2-L'), or root zone !                                                ! ('3-L'). For the 'DIF' option, it can !                                                ! be any depth within soil column         (m) ! REAL , POINTER , DIMENSION (:,:) :: XDZG ! soil layers thicknesses (DIF option) REAL , POINTER , DIMENSION (:,:) :: XDZDIF ! distance between consecuative layer mid-points (DIF option) REAL , POINTER , DIMENSION (:,:) :: XSOILWGHT ! VEG-DIF: weights for vertical !                                                ! integration of soil water and properties ! REAL , POINTER , DIMENSION (:) :: XKSAT_ICE ! hydraulic conductivity at saturation !                                                    over frozen area (m s-1) ! REAL , POINTER , DIMENSION (:,:) :: XTOPQS ! Topmodel subsurface flow by layer (m/s) ! REAL , POINTER , DIMENSION (:,:) :: XDG ! soil layer depth                  (m) !                                                ! NOTE: in Force-Restore mode, the !                                                ! uppermost layer depth is superficial !                                                ! and is only explicitly used for soil !                                                ! water phase changes                     (m) ! REAL , POINTER , DIMENSION (:,:) :: XDG_OLD ! For land use REAL , POINTER , DIMENSION (:) :: XDG2 INTEGER , POINTER , DIMENSION (:) :: NWG_LAYER ! Number of soil moisture layers for DIF REAL , POINTER , DIMENSION (:) :: XDROOT ! effective root depth for DIF (m) REAL , POINTER , DIMENSION (:,:) :: XROOTFRAC ! root fraction profile ('DIF' option) ! REAL , POINTER , DIMENSION (:) :: XD_ICE ! depth of the soil column for the calculation !                                                 of the frozen soil fraction (m) ! REAL , POINTER , DIMENSION (:) :: XH_TREE ! height of trees                         (m) ! REAL , POINTER , DIMENSION (:) :: XZ0_O_Z0H ! ratio of surface roughness lengths !                                                ! (momentum to heat)                      (-) ! REAL , POINTER , DIMENSION (:) :: XRE25 ! Ecosystem respiration parameter         (kg/kg.m.s-1) ! REAL , POINTER , DIMENSION (:) :: XDMAX ! maximum air saturation deficit !                                                ! tolerate by vegetation !                                                (kg/kg) ! REAL , POINTER , DIMENSION (:,:) :: XRED_NOISE REAL , POINTER , DIMENSION (:,:) :: XINCR REAL , POINTER , DIMENSION (:,:,:) :: XHO ! END TYPE ISBA_P_t","tags":"","loc":"type/isba_p_t.html"},{"title":"ISBA_PE_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: ISBA_PE_t Contents Variables XWG XWGI XWR XTG TSNOW XICE_STO XWRL XWRLI XWRVN XTV XTL XTC XQC XRESA XAN XANDAY XANFM XLE XFAPARC XFAPIRC XLAI_EFFC XMUS XRESP_BIOMASS XBIOMASS XLITTER XSOILCARB XLIGNIN_STRUC XPSNG XPSNV XPSNV_A XPSN XSNOWFREE_ALB XSNOWFREE_ALB_VEG XSNOWFREE_ALB_SOIL XVEG XLAI XEMIS XZ0 XRSMIN XGAMMA XWRMAX_CF XRGL XCV XLAIMIN XSEFOLD XGMES XGC XF2I XBSLAI XCE_NITRO XCF_NITRO XCNA_NITRO LSTRESS XALBNIR_VEG XALBVIS_VEG XALBUV_VEG XALBNIR XALBVIS XALBUV XGNDLITTER XH_VEG XZ0LITTER XALBNIR_SOIL XALBVIS_SOIL XALBUV_SOIL TSEED TREAP XWATSUP XIRRIG Source Code ISBA_PE_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:,:) :: XWG real, public, POINTER, DIMENSION(:,:) :: XWGI real, public, POINTER, DIMENSION(:) :: XWR real, public, POINTER, DIMENSION(:,:) :: XTG type(SURF_SNOW), public :: TSNOW real, public, POINTER, DIMENSION(:) :: XICE_STO real, public, POINTER, DIMENSION(:) :: XWRL real, public, POINTER, DIMENSION(:) :: XWRLI real, public, POINTER, DIMENSION(:) :: XWRVN real, public, POINTER, DIMENSION(:) :: XTV real, public, POINTER, DIMENSION(:) :: XTL real, public, POINTER, DIMENSION(:) :: XTC real, public, POINTER, DIMENSION(:) :: XQC real, public, POINTER, DIMENSION(:) :: XRESA real, public, POINTER, DIMENSION(:) :: XAN real, public, POINTER, DIMENSION(:) :: XANDAY real, public, POINTER, DIMENSION(:) :: XANFM real, public, POINTER, DIMENSION(:) :: XLE real, public, POINTER, DIMENSION(:) :: XFAPARC real, public, POINTER, DIMENSION(:) :: XFAPIRC real, public, POINTER, DIMENSION(:) :: XLAI_EFFC real, public, POINTER, DIMENSION(:) :: XMUS real, public, POINTER, DIMENSION(:,:) :: XRESP_BIOMASS real, public, POINTER, DIMENSION(:,:) :: XBIOMASS real, public, POINTER, DIMENSION(:,:,:) :: XLITTER real, public, POINTER, DIMENSION(:,:) :: XSOILCARB real, public, POINTER, DIMENSION(:,:) :: XLIGNIN_STRUC real, public, POINTER, DIMENSION(:) :: XPSNG real, public, POINTER, DIMENSION(:) :: XPSNV real, public, POINTER, DIMENSION(:) :: XPSNV_A real, public, POINTER, DIMENSION(:) :: XPSN real, public, POINTER, DIMENSION(:) :: XSNOWFREE_ALB real, public, POINTER, DIMENSION(:) :: XSNOWFREE_ALB_VEG real, public, POINTER, DIMENSION(:) :: XSNOWFREE_ALB_SOIL real, public, POINTER, DIMENSION(:) :: XVEG real, public, POINTER, DIMENSION(:) :: XLAI real, public, POINTER, DIMENSION(:) :: XEMIS real, public, POINTER, DIMENSION(:) :: XZ0 real, public, POINTER, DIMENSION(:) :: XRSMIN real, public, POINTER, DIMENSION(:) :: XGAMMA real, public, POINTER, DIMENSION(:) :: XWRMAX_CF real, public, POINTER, DIMENSION(:) :: XRGL real, public, POINTER, DIMENSION(:) :: XCV real, public, POINTER, DIMENSION(:) :: XLAIMIN real, public, POINTER, DIMENSION(:) :: XSEFOLD real, public, POINTER, DIMENSION(:) :: XGMES real, public, POINTER, DIMENSION(:) :: XGC real, public, POINTER, DIMENSION(:) :: XF2I real, public, POINTER, DIMENSION(:) :: XBSLAI real, public, POINTER, DIMENSION(:) :: XCE_NITRO real, public, POINTER, DIMENSION(:) :: XCF_NITRO real, public, POINTER, DIMENSION(:) :: XCNA_NITRO logical, public, POINTER, DIMENSION(:) :: LSTRESS real, public, POINTER, DIMENSION(:) :: XALBNIR_VEG real, public, POINTER, DIMENSION(:) :: XALBVIS_VEG real, public, POINTER, DIMENSION(:) :: XALBUV_VEG real, public, POINTER, DIMENSION(:) :: XALBNIR real, public, POINTER, DIMENSION(:) :: XALBVIS real, public, POINTER, DIMENSION(:) :: XALBUV real, public, POINTER, DIMENSION(:) :: XGNDLITTER real, public, POINTER, DIMENSION(:) :: XH_VEG real, public, POINTER, DIMENSION(:) :: XZ0LITTER real, public, POINTER, DIMENSION(:) :: XALBNIR_SOIL real, public, POINTER, DIMENSION(:) :: XALBVIS_SOIL real, public, POINTER, DIMENSION(:) :: XALBUV_SOIL type(DATE_TIME), public, POINTER, DIMENSION(:) :: TSEED type(DATE_TIME), public, POINTER, DIMENSION(:) :: TREAP real, public, POINTER, DIMENSION(:) :: XWATSUP real, public, POINTER, DIMENSION(:) :: XIRRIG Source Code TYPE ISBA_PE_t ! ! Prognostic variables: ! ! - Soil and vegetation heat and water: ! REAL , POINTER , DIMENSION (:,:) :: XWG ! soil volumetric water content profile   (m3/m3) REAL , POINTER , DIMENSION (:,:) :: XWGI ! soil liquid water equivalent volumetric !                                                ! ice content profile                     (m3/m3) REAL , POINTER , DIMENSION (:) :: XWR ! liquid water retained on the !                                                ! foliage of the vegetation !                                                ! canopy                                  (kg/m2) REAL , POINTER , DIMENSION (:,:) :: XTG ! surface and sub-surface soil !                                                ! temperature profile                     (K) ! ! - Snow Cover: ! TYPE ( SURF_SNOW ) :: TSNOW ! snow state: !                                                ! scheme type/option                      (-) !                                                ! number of layers                        (-) !                                                ! snow (& liq. water) content             (kg/m2) !                                                ! heat content                            (J/m2) !                                                ! temperature                             (K) !                                                ! density                                 (kg m-3) ! REAL , POINTER , DIMENSION (:) :: XICE_STO ! Glacier ice storage reservoir ! ! - For multi-energy balance: ! REAL , POINTER , DIMENSION (:) :: XWRL ! liquid water retained on litter          (kg/m2) REAL , POINTER , DIMENSION (:) :: XWRLI ! ice retained on litter          (kg/m2) REAL , POINTER , DIMENSION (:) :: XWRVN ! snow retained on the foliage !                                                ! of the canopy vegetation                  (kg/m2) REAL , POINTER , DIMENSION (:) :: XTV ! canopy vegetation temperature             (K) REAL , POINTER , DIMENSION (:) :: XTL ! litter temperature             (K) REAL , POINTER , DIMENSION (:) :: XTC ! canopy air temperature                    (K) REAL , POINTER , DIMENSION (:) :: XQC ! canopy air specific humidity              (kg/kg) ! ! * Half prognostic fields ! REAL , POINTER , DIMENSION (:) :: XRESA ! aerodynamic resistance                  (s/m) ! ! - Vegetation: Ags Prognostic (YPHOTO = 'AST', 'NIT', 'NCB') ! REAL , POINTER , DIMENSION (:) :: XAN ! net CO2 assimilation                    (mg/m2/s) REAL , POINTER , DIMENSION (:) :: XANDAY ! daily net CO2 assimilation              (mg/m2) REAL , POINTER , DIMENSION (:) :: XANFM ! maximum leaf assimilation               (mg/m2/s) REAL , POINTER , DIMENSION (:) :: XLE ! evapotranspiration                      (W/m2) ! REAL , POINTER , DIMENSION (:) :: XFAPARC ! Fapar of vegetation (cumul) REAL , POINTER , DIMENSION (:) :: XFAPIRC ! Fapir of vegetation (cumul) REAL , POINTER , DIMENSION (:) :: XLAI_EFFC ! Effective LAI (cumul) REAL , POINTER , DIMENSION (:) :: XMUS ! cos zenithal angle (cumul) ! REAL , POINTER , DIMENSION (:,:) :: XRESP_BIOMASS ! daily cumulated respiration of !                                                   ! biomass                              (kg/m2/s) REAL , POINTER , DIMENSION (:,:) :: XBIOMASS ! biomass of previous day              (kg/m2) ! ! - Soil carbon (ISBA-CC, YRESPSL = 'CNT') ! REAL , POINTER , DIMENSION (:,:,:) :: XLITTER ! litter pools                         (gC/m2) REAL , POINTER , DIMENSION (:,:) :: XSOILCARB ! soil carbon pools                    (gC/m2) REAL , POINTER , DIMENSION (:,:) :: XLIGNIN_STRUC ! ratio Lignin/Carbon in structural !                                                       litter                               (gC/m2) ! REAL , POINTER , DIMENSION (:) :: XPSNG ! Snow fraction over ground REAL , POINTER , DIMENSION (:) :: XPSNV ! Snow fraction over vegetation REAL , POINTER , DIMENSION (:) :: XPSNV_A ! Snow fraction over vegetation REAL , POINTER , DIMENSION (:) :: XPSN ! REAL , POINTER , DIMENSION (:) :: XSNOWFREE_ALB ! snow free albedo                        (-) REAL , POINTER , DIMENSION (:) :: XSNOWFREE_ALB_VEG ! snow free albedo for vegetation         (-) REAL , POINTER , DIMENSION (:) :: XSNOWFREE_ALB_SOIL ! snow free albedo for soil ! REAL , POINTER , DIMENSION (:) :: XVEG ! vegetation cover fraction               (-) ! REAL , POINTER , DIMENSION (:) :: XLAI ! Leaf Area Index                         (m2/m2) ! REAL , POINTER , DIMENSION (:) :: XEMIS ! surface emissivity                      (-) REAL , POINTER , DIMENSION (:) :: XZ0 ! surface roughness length                (m) ! REAL , POINTER , DIMENSION (:) :: XRSMIN ! minimum stomatal resistance             (s/m) REAL , POINTER , DIMENSION (:) :: XGAMMA ! coefficient for the calculation !                                              ! of the surface stomatal !                                              ! resistance REAL , POINTER , DIMENSION (:) :: XWRMAX_CF ! coefficient for maximum water !                                              ! interception !                                              ! storage capacity on the vegetation      (-) REAL , POINTER , DIMENSION (:) :: XRGL ! maximum solar radiation !                                              ! usable in photosynthesis REAL , POINTER , DIMENSION (:) :: XCV ! vegetation thermal inertia coefficient  (K m2/J) REAL , POINTER , DIMENSION (:) :: XLAIMIN ! minimum LAI (Leaf Area Index)           (m2/m2) REAL , POINTER , DIMENSION (:) :: XSEFOLD ! e-folding time for senescence           (s) REAL , POINTER , DIMENSION (:) :: XGMES ! mesophyll conductance                   (m s-1) REAL , POINTER , DIMENSION (:) :: XGC ! cuticular conductance                   (m s-1) REAL , POINTER , DIMENSION (:) :: XF2I ! critical normilized soil water !                                              ! content for stress parameterisation REAL , POINTER , DIMENSION (:) :: XBSLAI ! ratio d(biomass)/d(lai)                 (kg/m2) ! REAL , POINTER , DIMENSION (:) :: XCE_NITRO ! leaf aera ratio sensitivity to !                                            ! nitrogen concentration                (m2/kg) REAL , POINTER , DIMENSION (:) :: XCF_NITRO ! lethal minimum value of leaf area !                                              ! ratio                                 (m2/kg) REAL , POINTER , DIMENSION (:) :: XCNA_NITRO ! nitrogen concentration of active !                                              ! biomass LOGICAL , POINTER , DIMENSION (:) :: LSTRESS ! vegetation response type to water !                                              ! stress (true:defensive false:offensive) (-) ! REAL , POINTER , DIMENSION (:) :: XALBNIR_VEG ! vegetation near-infra-red albedo        (-) REAL , POINTER , DIMENSION (:) :: XALBVIS_VEG ! vegetation visible albedo               (-) REAL , POINTER , DIMENSION (:) :: XALBUV_VEG ! vegetation UV albedo                    (-) ! REAL , POINTER , DIMENSION (:) :: XALBNIR ! near-infra-red albedo                   (-) REAL , POINTER , DIMENSION (:) :: XALBVIS ! visible albedo                          (-) REAL , POINTER , DIMENSION (:) :: XALBUV ! UV albedo ! REAL , POINTER , DIMENSION (:) :: XGNDLITTER ! ground litter fraction                  (-) REAL , POINTER , DIMENSION (:) :: XH_VEG ! height of vegetation                           (m) REAL , POINTER , DIMENSION (:) :: XZ0LITTER ! ground litter roughness length                 (m) ! REAL , POINTER , DIMENSION (:) :: XALBNIR_SOIL ! soil near-infra-red albedo              (-) REAL , POINTER , DIMENSION (:) :: XALBVIS_SOIL ! soil visible albedo                     (-) REAL , POINTER , DIMENSION (:) :: XALBUV_SOIL ! soil UV albedo ! TYPE ( DATE_TIME ), POINTER , DIMENSION (:) :: TSEED ! date of seeding TYPE ( DATE_TIME ), POINTER , DIMENSION (:) :: TREAP ! date of reaping REAL , POINTER , DIMENSION (:) :: XWATSUP ! water supply during irrigation process (mm) REAL , POINTER , DIMENSION (:) :: XIRRIG ! flag for irrigation (irrigation if >0.) ! ! END TYPE ISBA_PE_t","tags":"","loc":"type/isba_pe_t.html"},{"title":"ISBA_NK_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: ISBA_NK_t Contents Variables AL Source Code ISBA_NK_t Components Type Visibility Attributes Name Initial type( ISBA_K_t ), public, DIMENSION(:), POINTER :: AL => NULL() Source Code TYPE ISBA_NK_t ! TYPE ( ISBA_K_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE ISBA_NK_t","tags":"","loc":"type/isba_nk_t.html"},{"title":"ISBA_NP_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: ISBA_NP_t Contents Variables AL Source Code ISBA_NP_t Components Type Visibility Attributes Name Initial type( ISBA_P_t ), public, DIMENSION(:), POINTER :: AL => NULL() Source Code TYPE ISBA_NP_t ! TYPE ( ISBA_P_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE ISBA_NP_t","tags":"","loc":"type/isba_np_t.html"},{"title":"ISBA_NPE_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: ISBA_NPE_t Contents Variables AL Source Code ISBA_NPE_t Components Type Visibility Attributes Name Initial type( ISBA_PE_t ), public, DIMENSION(:), POINTER :: AL => NULL() Source Code TYPE ISBA_NPE_t ! TYPE ( ISBA_PE_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE ISBA_NPE_t","tags":"","loc":"type/isba_npe_t.html"},{"title":"SV_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: SV_t Contents Variables CSV NSV_CHSBEG NSV_CHSEND NBEQ NSV_DSTBEG NSV_DSTEND NDSTEQ NSV_SLTBEG NSV_SLTEND NSLTEQ NSV_AERBEG NSV_AEREND NAEREQ Source Code SV_t Components Type Visibility Attributes Name Initial character(len=6), public, DIMENSION(:), POINTER :: CSV integer, public :: NSV_CHSBEG integer, public :: NSV_CHSEND integer, public :: NBEQ integer, public :: NSV_DSTBEG integer, public :: NSV_DSTEND integer, public :: NDSTEQ integer, public :: NSV_SLTBEG integer, public :: NSV_SLTEND integer, public :: NSLTEQ integer, public :: NSV_AERBEG integer, public :: NSV_AEREND integer, public :: NAEREQ Source Code TYPE SV_t ! !############################################################################### ! ! variables updated for the current model ! CHARACTER ( LEN = 6 ), DIMENSION (:), POINTER :: CSV ! name of the scalar variables INTEGER :: NSV_CHSBEG , NSV_CHSEND !  index of first and last gas chemistry related scalar variable INTEGER :: NBEQ ! number of chemical gas species in the surface scheme INTEGER :: NSV_DSTBEG , NSV_DSTEND ! index of first and last dust related scalar variable INTEGER :: NDSTEQ ! number of dust related species in scalar variables list INTEGER :: NSV_SLTBEG , NSV_SLTEND ! index of first and last sea salt related scalar variable INTEGER :: NSLTEQ ! number of sea salt related species in scalar variables list INTEGER :: NSV_AERBEG , NSV_AEREND ! index of first and last aerosol related scalar variabl INTEGER :: NAEREQ ! number of aerosols variables ! ! END TYPE SV_t","tags":"","loc":"type/sv_t.html"},{"title":"AGRI_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: AGRI_t Contents Variables NIRRINUM LIRRIGATE LIRRIDAY XTHRESHOLDSPT Source Code AGRI_t Components Type Visibility Attributes Name Initial integer, public, POINTER, DIMENSION (:) :: NIRRINUM logical, public, POINTER, DIMENSION(:) :: LIRRIGATE logical, public, POINTER, DIMENSION(:) :: LIRRIDAY real, public, POINTER, DIMENSION(:) :: XTHRESHOLDSPT Source Code TYPE AGRI_t ! INTEGER , POINTER , DIMENSION (:) :: NIRRINUM ! Stage for Irrigation (4 stages) ! LOGICAL , POINTER , DIMENSION (:) :: LIRRIGATE ! True if irrigation performed ! LOGICAL , POINTER , DIMENSION (:) :: LIRRIDAY ! True if irrigation occurs during present day ! REAL , POINTER , DIMENSION (:) :: XTHRESHOLDSPT ! Spatialized threshold END TYPE AGRI_t","tags":"","loc":"type/agri_t.html"},{"title":"AGRI_NP_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: AGRI_NP_t Contents Variables AL Source Code AGRI_NP_t Components Type Visibility Attributes Name Initial type( AGRI_t ), public, DIMENSION(:), POINTER :: AL => NULL() Source Code TYPE AGRI_NP_t ! TYPE ( AGRI_t ), DIMENSION (:), POINTER :: AL => NULL () ! END TYPE AGRI_NP_t","tags":"","loc":"type/agri_np_t.html"},{"title":"FLAKE_MODEL_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: FLAKE_MODEL_t Contents Variables DFO DF DFC DMF G SB CHF F Source Code FLAKE_MODEL_t Components Type Visibility Attributes Name Initial type(DIAG_OPTIONS_t), public :: DFO type(DIAG_t), public :: DF type(DIAG_t), public :: DFC type(DIAG_MISC_FLAKE_t), public :: DMF type(GRID_t), public :: G type(CANOPY_t), public :: SB type(CH_FLAKE_t), public :: CHF type(FLAKE_t), public :: F Source Code TYPE FLAKE_MODEL_t ! TYPE ( DIAG_OPTIONS_t ) :: DFO TYPE ( DIAG_t ) :: DF TYPE ( DIAG_t ) :: DFC TYPE ( DIAG_MISC_FLAKE_t ) :: DMF ! TYPE ( GRID_t ) :: G TYPE ( CANOPY_t ) :: SB TYPE ( CH_FLAKE_t ) :: CHF TYPE ( FLAKE_t ) :: F ! END TYPE FLAKE_MODEL_t","tags":"","loc":"type/flake_model_t.html"},{"title":"WATFLUX_MODEL_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: WATFLUX_MODEL_t Contents Variables DWO DW DWC G SB CHW W Source Code WATFLUX_MODEL_t Components Type Visibility Attributes Name Initial type(DIAG_OPTIONS_t), public :: DWO type(DIAG_t), public :: DW type(DIAG_t), public :: DWC type(GRID_t), public :: G type(CANOPY_t), public :: SB type(CH_WATFLUX_t), public :: CHW type(WATFLUX_t), public :: W Source Code TYPE WATFLUX_MODEL_t ! TYPE ( DIAG_OPTIONS_t ) :: DWO TYPE ( DIAG_t ) :: DW TYPE ( DIAG_t ) :: DWC ! TYPE ( GRID_t ) :: G TYPE ( CANOPY_t ) :: SB TYPE ( CH_WATFLUX_t ) :: CHW TYPE ( WATFLUX_t ) :: W ! END TYPE WATFLUX_MODEL_t","tags":"","loc":"type/watflux_model_t.html"},{"title":"SEAFLUX_DIAG_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: SEAFLUX_DIAG_t Contents Variables O D DC DI DIC GO DMI Source Code SEAFLUX_DIAG_t Components Type Visibility Attributes Name Initial type(DIAG_OPTIONS_t), public :: O type(DIAG_t), public :: D type(DIAG_t), public :: DC type(DIAG_t), public :: DI type(DIAG_t), public :: DIC type(DIAG_OCEAN_t), public :: GO type(DIAG_MISC_SEAICE_t), public :: DMI Source Code TYPE SEAFLUX_DIAG_t ! TYPE ( DIAG_OPTIONS_t ) :: O TYPE ( DIAG_t ) :: D TYPE ( DIAG_t ) :: DC TYPE ( DIAG_t ) :: DI TYPE ( DIAG_t ) :: DIC TYPE ( DIAG_OCEAN_t ) :: GO TYPE ( DIAG_MISC_SEAICE_t ) :: DMI ! END TYPE SEAFLUX_DIAG_t","tags":"","loc":"type/seaflux_diag_t.html"},{"title":"ISBA_DIAG_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: ISBA_DIAG_t Contents Variables O D DC ND NDC DE DEC NDE NDEC DM NDM Source Code ISBA_DIAG_t Components Type Visibility Attributes Name Initial type(DIAG_OPTIONS_t), public :: O type(DIAG_t), public :: D type(DIAG_t), public :: DC type(DIAG_NP_t), public :: ND type(DIAG_NP_t), public :: NDC type(DIAG_EVAP_ISBA_t), public :: DE type(DIAG_EVAP_ISBA_t), public :: DEC type(DIAG_EVAP_ISBA_NP_t), public :: NDE type(DIAG_EVAP_ISBA_NP_t), public :: NDEC type(DIAG_MISC_ISBA_t), public :: DM type(DIAG_MISC_ISBA_NP_t), public :: NDM Source Code TYPE ISBA_DIAG_t ! TYPE ( DIAG_OPTIONS_t ) :: O TYPE ( DIAG_t ) :: D TYPE ( DIAG_t ) :: DC TYPE ( DIAG_NP_t ) :: ND TYPE ( DIAG_NP_t ) :: NDC TYPE ( DIAG_EVAP_ISBA_t ) :: DE TYPE ( DIAG_EVAP_ISBA_t ) :: DEC TYPE ( DIAG_EVAP_ISBA_NP_t ) :: NDE TYPE ( DIAG_EVAP_ISBA_NP_t ) :: NDEC TYPE ( DIAG_MISC_ISBA_t ) :: DM TYPE ( DIAG_MISC_ISBA_NP_t ) :: NDM ! END TYPE ISBA_DIAG_t","tags":"","loc":"type/isba_diag_t.html"},{"title":"ISBA_MODEL_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: ISBA_MODEL_t Contents Variables ID DTV SB O S CHI NCHI GB NGB ISS NISS G NG K NK NP NPE NAG Source Code ISBA_MODEL_t Components Type Visibility Attributes Name Initial type( ISBA_DIAG_t ), public :: ID type(DATA_ISBA_t), public :: DTV type(CANOPY_t), public :: SB type(ISBA_OPTIONS_t), public :: O type(ISBA_S_t), public :: S type(CH_ISBA_t), public :: CHI type(CH_ISBA_NP_t), public :: NCHI type(GR_BIOG_t), public :: GB type(GR_BIOG_NP_t), public :: NGB type(SSO_t), public :: ISS type(SSO_NP_t), public :: NISS type(GRID_t), public :: G type(GRID_NP_t), public :: NG type(ISBA_K_t), public :: K type(ISBA_NK_t), public :: NK type(ISBA_NP_t), public :: NP type(ISBA_NPE_t), public :: NPE type(AGRI_NP_t), public :: NAG Source Code TYPE ISBA_MODEL_t ! TYPE ( ISBA_DIAG_t ) :: ID TYPE ( DATA_ISBA_t ) :: DTV TYPE ( CANOPY_t ) :: SB TYPE ( ISBA_OPTIONS_t ) :: O TYPE ( ISBA_S_t ) :: S TYPE ( CH_ISBA_t ) :: CHI TYPE ( CH_ISBA_NP_t ) :: NCHI TYPE ( GR_BIOG_t ) :: GB TYPE ( GR_BIOG_NP_t ) :: NGB TYPE ( SSO_t ) :: ISS TYPE ( SSO_NP_t ) :: NISS TYPE ( GRID_t ) :: G TYPE ( GRID_NP_t ) :: NG TYPE ( ISBA_K_t ) :: K TYPE ( ISBA_NK_t ) :: NK TYPE ( ISBA_NP_t ) :: NP TYPE ( ISBA_NPE_t ) :: NPE TYPE ( AGRI_NP_t ) :: NAG ! END TYPE ISBA_MODEL_t","tags":"","loc":"type/isba_model_t.html"},{"title":"TEB_VEG_DIAG_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: TEB_VEG_DIAG_t Contents Variables ND NDE NDEC NDM Source Code TEB_VEG_DIAG_t Components Type Visibility Attributes Name Initial type(DIAG_NP_t), public :: ND type(DIAG_EVAP_ISBA_NP_t), public :: NDE type(DIAG_EVAP_ISBA_NP_t), public :: NDEC type(DIAG_MISC_ISBA_NP_t), public :: NDM Source Code TYPE TEB_VEG_DIAG_t ! TYPE ( DIAG_NP_t ) :: ND TYPE ( DIAG_EVAP_ISBA_NP_t ) :: NDE TYPE ( DIAG_EVAP_ISBA_NP_t ) :: NDEC TYPE ( DIAG_MISC_ISBA_NP_t ) :: NDM ! END TYPE TEB_VEG_DIAG_t","tags":"","loc":"type/teb_veg_diag_t.html"},{"title":"TEB_GARDEN_MODEL_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: TEB_GARDEN_MODEL_t Contents Variables VD DTV O S GB K P NPE Source Code TEB_GARDEN_MODEL_t Components Type Visibility Attributes Name Initial type( TEB_VEG_DIAG_t ), public :: VD type(DATA_ISBA_t), public :: DTV type(ISBA_OPTIONS_t), public :: O type(ISBA_S_t), public :: S type(GR_BIOG_t), public :: GB type(ISBA_K_t), public :: K type(ISBA_P_t), public :: P type(ISBA_NPE_t), public :: NPE Source Code TYPE TEB_GARDEN_MODEL_t ! TYPE ( TEB_VEG_DIAG_t ) :: VD TYPE ( DATA_ISBA_t ) :: DTV TYPE ( ISBA_OPTIONS_t ) :: O TYPE ( ISBA_S_t ) :: S TYPE ( GR_BIOG_t ) :: GB TYPE ( ISBA_K_t ) :: K TYPE ( ISBA_P_t ) :: P TYPE ( ISBA_NPE_t ) :: NPE ! END TYPE TEB_GARDEN_MODEL_t","tags":"","loc":"type/teb_garden_model_t.html"},{"title":"TEB_GREENROOF_MODEL_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: TEB_GREENROOF_MODEL_t Contents Variables VD DTV O S GB K P NPE Source Code TEB_GREENROOF_MODEL_t Components Type Visibility Attributes Name Initial type( TEB_VEG_DIAG_t ), public :: VD type(DATA_ISBA_t), public :: DTV type(ISBA_OPTIONS_t), public :: O type(ISBA_S_t), public :: S type(GR_BIOG_t), public :: GB type(ISBA_K_t), public :: K type(ISBA_P_t), public :: P type(ISBA_NPE_t), public :: NPE Source Code TYPE TEB_GREENROOF_MODEL_t ! TYPE ( TEB_VEG_DIAG_t ) :: VD TYPE ( DATA_ISBA_t ) :: DTV TYPE ( ISBA_OPTIONS_t ) :: O TYPE ( ISBA_S_t ) :: S TYPE ( GR_BIOG_t ) :: GB TYPE ( ISBA_K_t ) :: K TYPE ( ISBA_P_t ) :: P TYPE ( ISBA_NPE_t ) :: NPE ! END TYPE TEB_GREENROOF_MODEL_t","tags":"","loc":"type/teb_greenroof_model_t.html"},{"title":"TEB_DIAG_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: TEB_DIAG_t Contents Variables O D MTO NDMT NDMTC DUT Source Code TEB_DIAG_t Components Type Visibility Attributes Name Initial type(DIAG_OPTIONS_t), public :: O type(DIAG_t), public :: D type(DIAG_MISC_TEB_OPTIONS_t), public :: MTO type(DIAG_MISC_TEB_NP_t), public :: NDMT type(DIAG_MISC_TEB_NP_t), public :: NDMTC type(DIAG_UTCI_TEB_t), public :: DUT Source Code TYPE TEB_DIAG_t ! TYPE ( DIAG_OPTIONS_t ) :: O TYPE ( DIAG_t ) :: D TYPE ( DIAG_MISC_TEB_OPTIONS_t ) :: MTO TYPE ( DIAG_MISC_TEB_NP_t ) :: NDMT TYPE ( DIAG_MISC_TEB_NP_t ) :: NDMTC TYPE ( DIAG_UTCI_TEB_t ) :: DUT ! END TYPE TEB_DIAG_t","tags":"","loc":"type/teb_diag_t.html"},{"title":"TEB_MODEL_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: TEB_MODEL_t Contents Variables DTT TOP SB G CHT TPN TIR NT TD DTB BOP BDD NB Source Code TEB_MODEL_t Components Type Visibility Attributes Name Initial type(DATA_TEB_t), public :: DTT type(TEB_OPTIONS_t), public :: TOP type(CANOPY_t), public :: SB type(GRID_t), public :: G type(CH_TEB_t), public :: CHT type(TEB_PANEL_t), public :: TPN type(TEB_IRRIG_t), public :: TIR type(TEB_NP_t), public :: NT type( TEB_DIAG_t ), public :: TD type(DATA_BEM_t), public :: DTB type(BEM_OPTIONS_t), public :: BOP type(BLD_DESC_t), public :: BDD type(BEM_NP_t), public :: NB Source Code TYPE TEB_MODEL_t ! TYPE ( DATA_TEB_t ) :: DTT TYPE ( TEB_OPTIONS_t ) :: TOP TYPE ( CANOPY_t ) :: SB TYPE ( GRID_t ) :: G TYPE ( CH_TEB_t ) :: CHT TYPE ( TEB_PANEL_t ) :: TPN TYPE ( TEB_IRRIG_t ) :: TIR TYPE ( TEB_NP_t ) :: NT ! TYPE ( TEB_DIAG_t ) :: TD ! TYPE ( DATA_BEM_t ) :: DTB TYPE ( BEM_OPTIONS_t ) :: BOP TYPE ( BLD_DESC_t ) :: BDD TYPE ( BEM_NP_t ) :: NB ! END TYPE TEB_MODEL_t","tags":"","loc":"type/teb_model_t.html"},{"title":"SURFEX_t – Town Energy Balance (TEB) model API docs ","text":"type, public :: SURFEX_t Contents Variables DTCO DTZ DUU GCP UG U DUO DU DUC DUP DUPC USS SB DLO DL DLC L SV CHU CHE CHN EGF NDST SLT FM WM IM TM GDM GRM Source Code SURFEX_t Components Type Visibility Attributes Name Initial type(DATA_COVER_t), public :: DTCO type(DATA_TSZ0_t), public :: DTZ type(DUMMY_SURF_FIELDS_t), public :: DUU type(GRID_CONF_PROJ_t), public :: GCP type(SURF_ATM_GRID_t), public :: UG type(SURF_ATM_t), public :: U type(DIAG_OPTIONS_t), public :: DUO type(DIAG_t), public :: DU type(DIAG_t), public :: DUC type(DIAG_NP_t), public :: DUP type(DIAG_NP_t), public :: DUPC type(SSO_t), public :: USS type(CANOPY_t), public :: SB type(DIAG_OPTIONS_t), public :: DLO type(DIAG_t), public :: DL type(DIAG_t), public :: DLC type(IDEAL_t), public :: L type(SV_t), public :: SV type(CH_SURF_t), public :: CHU type(CH_EMIS_FIELD_t), public :: CHE type(CH_EMIS_SNAP_t), public :: CHN type(EMIS_GR_FIELD_t), public :: EGF type(DST_NP_t), public :: NDST type(SLT_t), public :: SLT type( FLAKE_MODEL_t ), public :: FM type( WATFLUX_MODEL_t ), public :: WM type( ISBA_MODEL_t ), public :: IM type( TEB_MODEL_t ), public :: TM type( TEB_GARDEN_MODEL_t ), public :: GDM type( TEB_GREENROOF_MODEL_t ), public :: GRM Source Code TYPE SURFEX_t ! TYPE ( DATA_COVER_t ) :: DTCO TYPE ( DATA_TSZ0_t ) :: DTZ TYPE ( DUMMY_SURF_FIELDS_t ) :: DUU ! TYPE ( GRID_CONF_PROJ_t ) :: GCP TYPE ( SURF_ATM_GRID_t ) :: UG TYPE ( SURF_ATM_t ) :: U TYPE ( DIAG_OPTIONS_t ) :: DUO TYPE ( DIAG_t ) :: DU TYPE ( DIAG_t ) :: DUC TYPE ( DIAG_NP_t ) :: DUP TYPE ( DIAG_NP_t ) :: DUPC TYPE ( SSO_t ) :: USS TYPE ( CANOPY_t ) :: SB ! TYPE ( DIAG_OPTIONS_t ) :: DLO TYPE ( DIAG_t ) :: DL TYPE ( DIAG_t ) :: DLC TYPE ( IDEAL_t ) :: L ! TYPE ( SV_t ) :: SV TYPE ( CH_SURF_t ) :: CHU TYPE ( CH_EMIS_FIELD_t ) :: CHE TYPE ( CH_EMIS_SNAP_t ) :: CHN TYPE ( EMIS_GR_FIELD_t ) :: EGF TYPE ( DST_NP_t ) :: NDST TYPE ( SLT_t ) :: SLT ! TYPE ( FLAKE_MODEL_t ) :: FM TYPE ( WATFLUX_MODEL_t ) :: WM !TYPE(SEAFLUX_MODEL_t) :: SM TYPE ( ISBA_MODEL_t ) :: IM TYPE ( TEB_MODEL_t ) :: TM TYPE ( TEB_GARDEN_MODEL_t ) :: GDM TYPE ( TEB_GREENROOF_MODEL_t ) :: GRM ! END TYPE SURFEX_t","tags":"","loc":"type/surfex_t.html"},{"title":"GARDEN – Town Energy Balance (TEB) model API docs","text":"subroutine GARDEN(DTCO, G, T, TOP, TIR, DTV, GB, DK, DEK, DMK, GDO, S, K, P, PEK, HIMPLICIT_WIND, TPTIME, PTSUN, PPEW_A_COEF, PPEW_B_COEF, PPET_A_COEF, PPEQ_A_COEF, PPET_B_COEF, PPEQ_B_COEF, PTSTEP, PZREF, PALB_GD, PTA, PQA, PEXNS, PRHOA, PCO2, PPS, PRR, PSR, PZENITH, PSW, PLW, PVMOD, PALBNIR_TVEG, PALBVIS_TVEG, PALBNIR_TSOIL, PALBVIS_TSOIL, PRN, PH, PLE, PGFLUX, PSFCO2, PEVAP, PUW, PRUNOFF, PAC, PQSAT, PTSRAD, PAC_AGG, PHU_AGG, PIRRIG) Uses MODD_DATA_COVER_n MODD_GR_BIOG_n MODE_THERMOS MODI_VEGETATION_EVOL MODD_AGRI_n MODD_SFX_GRID_n MODD_TEB_n MODD_TEB_OPTION_n MODD_TEB_IRRIG_n MODD_DIAG_MISC_ISBA_n MODD_SURF_PAR MODI_ISBA MODI_CARBON_EVOL MODD_TYPE_DATE_SURF YOMHOOK MODD_SSO_n MODD_DATA_ISBA_n MODI_FLAG_TEB_VEG_n MODI_TEB_IRRIG MODD_ISBA_n MODI_VEGETATION_UPDATE MODD_CSTS MODD_DIAG_n PROXI_SVAT_CONSTS PARKIND1 MODD_ISBA_OPTIONS_n MODD_DIAG_EVAP_ISBA_n Arguments Type Intent Optional Attributes Name type(DATA_COVER_t), intent(inout) :: DTCO type(GRID_t), intent(inout) :: G type(TEB_t), intent(inout) :: T type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_IRRIG_t), intent(inout) :: TIR type(DATA_ISBA_t), intent(inout) :: DTV type(GR_BIOG_t), intent(inout) :: GB type(DIAG_t), intent(inout) :: DK type(DIAG_EVAP_ISBA_t), intent(inout) :: DEK type(DIAG_MISC_ISBA_t), intent(inout) :: DMK type(ISBA_OPTIONS_t), intent(inout) :: GDO type(ISBA_S_t), intent(inout) :: S type(ISBA_K_t), intent(inout) :: K type(ISBA_P_t), intent(inout) :: P type(ISBA_PE_t), intent(inout) :: PEK character(len=*), intent(in) :: HIMPLICIT_WIND type(DATE_TIME), intent(in) :: TPTIME real, intent(in), DIMENSION(:) :: PTSUN real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPET_A_COEF real, intent(in), DIMENSION(:) :: PPEQ_A_COEF real, intent(in), DIMENSION(:) :: PPET_B_COEF real, intent(in), DIMENSION(:) :: PPEQ_B_COEF real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PALB_GD real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PCO2 real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZENITH real, intent(in), DIMENSION(:) :: PSW real, intent(in), DIMENSION(:) :: PLW real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PALBNIR_TVEG real, intent(in), DIMENSION(:) :: PALBVIS_TVEG real, intent(in), DIMENSION(:) :: PALBNIR_TSOIL real, intent(in), DIMENSION(:) :: PALBVIS_TSOIL real, intent(out), DIMENSION(:) :: PRN real, intent(out), DIMENSION(:) :: PH real, intent(out), DIMENSION(:) :: PLE real, intent(out), DIMENSION(:) :: PGFLUX real, intent(out), DIMENSION(:) :: PSFCO2 real, intent(out), DIMENSION(:) :: PEVAP real, intent(out), DIMENSION(:) :: PUW real, intent(out), DIMENSION(:) :: PRUNOFF real, intent(out), DIMENSION(:) :: PAC real, intent(out), DIMENSION(:) :: PQSAT real, intent(out), DIMENSION(:) :: PTSRAD real, intent(out), DIMENSION(:) :: PAC_AGG real, intent(out), DIMENSION(:) :: PHU_AGG real, intent(out), DIMENSION(:) :: PIRRIG Contents Source Code GARDEN Source Code SUBROUTINE GARDEN ( DTCO , G , T , TOP , TIR , DTV , GB , DK , DEK , DMK , GDO , S , K , P , PEK , & HIMPLICIT_WIND , TPTIME , PTSUN , PPEW_A_COEF , PPEW_B_COEF , & PPET_A_COEF , PPEQ_A_COEF , PPET_B_COEF , PPEQ_B_COEF , & PTSTEP , PZREF , PALB_GD , PTA , PQA , PEXNS , PRHOA , PCO2 , PPS , PRR , & PSR , PZENITH , PSW , PLW , PVMOD , PALBNIR_TVEG , & PALBVIS_TVEG , PALBNIR_TSOIL , PALBVIS_TSOIL , & PRN , PH , PLE , PGFLUX , PSFCO2 , PEVAP , PUW , PRUNOFF , & PAC , PQSAT , PTSRAD , PAC_AGG , PHU_AGG , PIRRIG ) !   ########################################################################## ! !!****  *GARDEN* !! !!    PURPOSE !!    ------- ! !!call the vegetation scheme (ISBA) inside TEB ! !!**  METHOD !     ------ ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      A. Lemonsu          * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!    Original    05/2009 !     B. decharme 04/2013 : variables for surf/atm coupling !                           dummy for water table / surface coupling !!    P. Samuelsson  10/2014  Introduced dummy variables in call to ISBA for MEB !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_DATA_COVER_n , ONLY : DATA_COVER_t USE MODD_DATA_ISBA_n , ONLY : DATA_ISBA_t USE MODD_SFX_GRID_n , ONLY : GRID_t USE MODD_SSO_n , ONLY : SSO_t , SSO_INIT USE MODD_TEB_n , ONLY : TEB_t USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t ! USE MODD_DATA_ISBA_n , ONLY : DATA_ISBA_t USE MODD_GR_BIOG_n , ONLY : GR_BIOG_t ! USE MODD_DIAG_n , ONLY : DIAG_t USE MODD_DIAG_EVAP_ISBA_n , ONLY : DIAG_EVAP_ISBA_t USE MODD_DIAG_MISC_ISBA_n , ONLY : DIAG_MISC_ISBA_t ! USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t ! USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t USE MODD_ISBA_n , ONLY : ISBA_S_t , ISBA_K_t , ISBA_P_t , ISBA_PE_t ! USE MODD_AGRI_n , ONLY : AGRI_t , AGRI_INIT ! USE MODD_TYPE_DATE_SURF , ONLY : DATE_TIME USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS , ONLY : XCPD , XLVTT , XKARMAN ! ! USE MODI_ISBA USE MODI_VEGETATION_UPDATE USE MODE_THERMOS ! USE MODI_FLAG_TEB_VEG_n USE MODI_CARBON_EVOL USE MODI_VEGETATION_EVOL USE MODI_TEB_IRRIG USE PROXI_SVAT_CONSTS , ONLY : GARDEN_BR ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! ! ! TYPE ( DATA_COVER_t ), INTENT ( INOUT ) :: DTCO TYPE ( GRID_t ), INTENT ( INOUT ) :: G TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP ! TYPE ( DATA_ISBA_t ), INTENT ( INOUT ) :: DTV TYPE ( GR_BIOG_t ), INTENT ( INOUT ) :: GB ! TYPE ( DIAG_t ), INTENT ( INOUT ) :: DK TYPE ( DIAG_EVAP_ISBA_t ), INTENT ( INOUT ) :: DEK TYPE ( DIAG_MISC_ISBA_t ), INTENT ( INOUT ) :: DMK ! TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: GDO TYPE ( ISBA_S_t ), INTENT ( INOUT ) :: S TYPE ( ISBA_K_t ), INTENT ( INOUT ) :: K TYPE ( ISBA_P_t ), INTENT ( INOUT ) :: P TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK ! TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR ! CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option !                                                     ! 'OLD' = direct !                                                     ! 'NEW' = Taylor serie, order 1 TYPE ( DATE_TIME ) , INTENT ( IN ) :: TPTIME ! current date and time from teb REAL , DIMENSION (:) , INTENT ( IN ) :: PTSUN ! solar time      (s from midnight) REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEQ_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEQ_B_COEF ! for humidity REAL , DIMENSION (:) , INTENT ( IN ) :: PPET_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPET_B_COEF ! for temperature REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:) , INTENT ( IN ) :: PZREF ! height of atm. var. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PALB_GD ! green areas albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PTA ! temp. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PQA ! hum. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:) , INTENT ( IN ) :: PRHOA ! air density at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PCO2 ! CO2 concentration in the air    (kg/m3) REAL , DIMENSION (:) , INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:) , INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:) , INTENT ( IN ) :: PZENITH ! solar zenithal angle REAL , DIMENSION (:) , INTENT ( IN ) :: PSW ! incoming total solar rad on an horizontal surface REAL , DIMENSION (:) , INTENT ( IN ) :: PLW ! atmospheric infrared radiation REAL , DIMENSION (:) , INTENT ( IN ) :: PVMOD ! wind near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PALBNIR_TVEG ! nearIR  veg tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBVIS_TVEG ! visible veg tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBNIR_TSOIL ! nearIR  soil tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBVIS_TSOIL ! visible soil tot albedo ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN ! net radiation over green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PH ! sensible heat flux over green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE ! latent heat flux over green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX ! flux through the green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PSFCO2 ! flux of CO2 positive toward the atmosphere (m/s*kg_CO2/kg_air) REAL , DIMENSION (:) , INTENT ( OUT ) :: PEVAP ! total evaporation over gardens (kg/m2/s) REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW ! friction flux (m2/s2) REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF ! runoff over garden (kg/m2/s) REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC ! aerodynamical conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PQSAT ! saturation humidity REAL , DIMENSION (:) , INTENT ( OUT ) :: PTSRAD ! garden radiative surface temp. (snow free) REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_AGG ! aggreg. aeodynamic resistance for green areas for latent heat flux REAL , DIMENSION (:) , INTENT ( OUT ) :: PHU_AGG ! aggreg. relative humidity for green areas for latent heat flux REAL , DIMENSION (:) , INTENT ( OUT ) :: PIRRIG ! garden summer irrigation rate ! ! !*      0.2    Declarations of local variables ! ! !------------------------------------------------------------------------------- ! !*      1.     Proxi model based on a fixed Bowen ratio !              ---------------------------------------- ! PRN (:) = ( 1. - PALB_GD ) * PSW (:) ! PH (:) = GARDEN_BR * PRN (:) PLE (:) = ( 1 - GARDEN_BR ) * PRN (:) ! !* Conduction heat flux is neglected PGFLUX (:) = 0. ! !* CO2 flux is neglected PSFCO2 (:) = 0. ! !* evaporation PEVAP (:) = PLE (:) / XLVTT ! !* Friction flux: assumes neutral formulation with roughness length of 0.1m PUW (:) = - ( XKARMAN / LOG ( PZREF (:) / 0.1 )) ** 2 * PVMOD (:) ** 2 ! !* Aerodynamical conductance: neglected because used further only for !  implicitation of canyon air temperature when the heat flux depends on the !  surface temperature ! PAC (:) = 0. ! !* surface saturation humidity PQSAT (:) = QSAT ( PTA (:), PPS (:)) ! !* Surface temperature : set equal to air temperature PTSRAD (:) = PTA (:) ! !* aerocynamical conductance for latent heat and surface humidity PAC_AGG (:) = 0. ! neglected (latent flux does not depend on surface humidity) PHU_AGG (:) = 0.8 ! surface humidity set to 80% ! !* garden hydrological diagnostics PRUNOFF (:) = 0. ! garden surface runoff PIRRIG (:) = 0. ! garden irrigation during time step !------------------------------------------------------------------------------- ! ! END SUBROUTINE GARDEN","tags":"","loc":"proc/garden.html"},{"title":"TEB_VEG_PROPERTIES – Town Energy Balance (TEB) model API docs","text":"subroutine TEB_VEG_PROPERTIES(PMASK, IO, PEK, PDIR_SW, PSCA_SW, PSW_BANDS, KSW, PTS, PEMIS, PALB, PTA, PALBNIR_TVEG, PALBVIS_TVEG, PALBNIR_TSOIL, PALBVIS_TSOIL) Uses MODI_ISBA_PROPERTIES YOMHOOK MODI_FLAG_TEB_VEG_n PROXI_SVAT_CONSTS PARKIND1 MODD_SURF_PAR MODD_ISBA_OPTIONS_n MODD_ISBA_n Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PMASK type(ISBA_OPTIONS_t), intent(inout) :: IO type(ISBA_PE_t), intent(inout) :: PEK real, intent(in), DIMENSION(:,:) :: PDIR_SW real, intent(in), DIMENSION(:,:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PSW_BANDS integer, intent(in) :: KSW real, intent(out), DIMENSION(:) :: PTS real, intent(out), DIMENSION(:) :: PEMIS real, intent(out), DIMENSION(:) :: PALB real, intent(in), optional DIMENSION(:) :: PTA real, intent(out), optional DIMENSION(:) :: PALBNIR_TVEG real, intent(out), optional DIMENSION(:) :: PALBVIS_TVEG real, intent(out), optional DIMENSION(:) :: PALBNIR_TSOIL real, intent(out), optional DIMENSION(:) :: PALBVIS_TSOIL Contents Source Code TEB_VEG_PROPERTIES Source Code SUBROUTINE TEB_VEG_PROPERTIES ( PMASK , IO , PEK , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & PTS , PEMIS , PALB , PTA , PALBNIR_TVEG , PALBVIS_TVEG ,& PALBNIR_TSOIL , PALBVIS_TSOIL ) !     ########################################################################## ! !!****  *GARDEN_PROPERTIES* !! !!    PURPOSE !!    ------- ! !     Calculates grid-averaged albedo and emissivity (according to snow scheme) ! !!    EXTERNAL !!    -------- !! !!    none !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    AUTHOR !!    ------ !! !!      S. Belair           * Meteo-France * !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t USE MODD_ISBA_n , ONLY : ISBA_PE_t ! USE MODD_SURF_PAR , ONLY : XUNDEF ! USE MODI_ISBA_PROPERTIES USE MODI_FLAG_TEB_VEG_n USE PROXI_SVAT_CONSTS , ONLY : VEG_ALB , VEG_EMIS ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PMASK ! TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: IO TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PDIR_SW ! direct incoming solar radiation REAL , DIMENSION (:,:), INTENT ( IN ) :: PSCA_SW ! diffus incoming solar radiation REAL , DIMENSION (:) , INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) INTEGER , INTENT ( IN ) :: KSW ! number of short-wave spectral bands ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PTS ! radiative surface temperature REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIS ! green areas emissivity REAL , DIMENSION (:) , INTENT ( OUT ) :: PALB ! green areas albedo ! REAL , DIMENSION (:) , INTENT ( IN ), OPTIONAL :: PTA ! Air temperature (K) ! REAL , DIMENSION (:) , INTENT ( OUT ), OPTIONAL :: PALBNIR_TVEG ! nearIR  veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ), OPTIONAL :: PALBVIS_TVEG ! visible veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ), OPTIONAL :: PALBNIR_TSOIL ! nearIR  soil tot albedo REAL , DIMENSION (:) , INTENT ( OUT ), OPTIONAL :: PALBVIS_TSOIL ! visible soil tot albedo !------------------------------------------------------------------------------- ! !*      0.2    Local variables !              --------------- ! !------------------------------------------------------------------------------- ! !* albedo PALB = VEG_ALB !* emissivity PEMIS = VEG_EMIS !* surface temperature set to air temperature PTS = PTA ! !------------------------------------------------------------------------------- ! END SUBROUTINE TEB_VEG_PROPERTIES","tags":"","loc":"proc/teb_veg_properties.html"},{"title":"GREENROOF – Town Energy Balance (TEB) model API docs","text":"subroutine GREENROOF(DTCO, G, T, TOP, TIR, DTV, GB, DK, DEK, DMK, GRO, S, K, P, PEK, HIMPLICIT_WIND, TPTIME, PTSUN, PPEW_A_COEF, PPEW_B_COEF, PPET_A_COEF, PPEQ_A_COEF, PPET_B_COEF, PPEQ_B_COEF, PTSTEP, PZREF, PUREF, PALB_GD, PTA, PQA, PEXNS, PEXNA, PRHOA, PCO2, PPS, PRR, PSR, PZENITH, PSW, PLW, PVMOD, PALBNIR_TVEG, PALBVIS_TVEG, PALBNIR_TSOIL, PALBVIS_TSOIL, PRN, PH, PLE, PGFLUX, PSFCO2, PEVAP, PUW, PRUNOFF, PDRAIN, PAC, PQSAT, PTSRAD, PAC_AGG, PHU_AGG, PDEEP_FLUX, PIRRIG) Uses MODD_DATA_COVER_n MODD_GR_BIOG_n MODE_THERMOS MODI_VEGETATION_EVOL MODD_AGRI_n MODD_SFX_GRID_n MODD_TEB_n MODD_TEB_OPTION_n MODD_TEB_IRRIG_n MODD_DIAG_MISC_ISBA_n MODD_SURF_PAR MODI_ISBA MODI_CARBON_EVOL MODD_TYPE_DATE_SURF MODI_ROOF_IMPL_COEF YOMHOOK MODD_SSO_n MODD_DATA_ISBA_n MODI_FLAG_TEB_VEG_n MODI_TEB_IRRIG MODD_ISBA_n MODI_VEGETATION_UPDATE MODD_CSTS MODD_DIAG_n PROXI_SVAT_CONSTS PARKIND1 MODD_ISBA_OPTIONS_n MODD_DIAG_EVAP_ISBA_n Arguments Type Intent Optional Attributes Name type(DATA_COVER_t), intent(inout) :: DTCO type(GRID_t), intent(inout) :: G type(TEB_t), intent(inout) :: T type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_IRRIG_t), intent(inout) :: TIR type(DATA_ISBA_t), intent(inout) :: DTV type(GR_BIOG_t), intent(inout) :: GB type(DIAG_t), intent(inout) :: DK type(DIAG_EVAP_ISBA_t), intent(inout) :: DEK type(DIAG_MISC_ISBA_t), intent(inout) :: DMK type(ISBA_OPTIONS_t), intent(inout) :: GRO type(ISBA_S_t), intent(inout) :: S type(ISBA_K_t), intent(inout) :: K type(ISBA_P_t), intent(inout) :: P type(ISBA_PE_t), intent(inout) :: PEK character(len=*), intent(in) :: HIMPLICIT_WIND type(DATE_TIME), intent(in) :: TPTIME real, intent(in), DIMENSION(:) :: PTSUN real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPET_A_COEF real, intent(in), DIMENSION(:) :: PPEQ_A_COEF real, intent(in), DIMENSION(:) :: PPET_B_COEF real, intent(in), DIMENSION(:) :: PPEQ_B_COEF real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PALB_GD real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PCO2 real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZENITH real, intent(in), DIMENSION(:) :: PSW real, intent(in), DIMENSION(:) :: PLW real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PALBNIR_TVEG real, intent(in), DIMENSION(:) :: PALBVIS_TVEG real, intent(in), DIMENSION(:) :: PALBNIR_TSOIL real, intent(in), DIMENSION(:) :: PALBVIS_TSOIL real, intent(out), DIMENSION(:) :: PRN real, intent(out), DIMENSION(:) :: PH real, intent(out), DIMENSION(:) :: PLE real, intent(out), DIMENSION(:) :: PGFLUX real, intent(out), DIMENSION(:) :: PSFCO2 real, intent(out), DIMENSION(:) :: PEVAP real, intent(out), DIMENSION(:) :: PUW real, intent(out), DIMENSION(:) :: PRUNOFF real, intent(out), DIMENSION(:) :: PDRAIN real, intent(out), DIMENSION(:) :: PAC real, intent(out), DIMENSION(:) :: PQSAT real, intent(out), DIMENSION(:) :: PTSRAD real, intent(out), DIMENSION(:) :: PAC_AGG real, intent(out), DIMENSION(:) :: PHU_AGG real, intent(out), DIMENSION(:) :: PDEEP_FLUX real, intent(out), DIMENSION(:) :: PIRRIG Contents Source Code GREENROOF Source Code SUBROUTINE GREENROOF ( DTCO , G , T , TOP , TIR , DTV , GB , DK , DEK , DMK , GRO , S , K , P , PEK , & HIMPLICIT_WIND , TPTIME , PTSUN , PPEW_A_COEF , PPEW_B_COEF , & PPET_A_COEF , PPEQ_A_COEF , PPET_B_COEF , PPEQ_B_COEF , & PTSTEP , PZREF , PUREF , PALB_GD , PTA , PQA , PEXNS , PEXNA , PRHOA , & PCO2 , PPS , PRR , PSR , PZENITH , PSW , PLW , PVMOD , & PALBNIR_TVEG , PALBVIS_TVEG , PALBNIR_TSOIL , PALBVIS_TSOIL , & PRN , PH , PLE , PGFLUX , PSFCO2 , PEVAP , PUW , PRUNOFF , PDRAIN ,& PAC , PQSAT , PTSRAD , PAC_AGG , PHU_AGG , PDEEP_FLUX , PIRRIG ) !   ################################################################################## ! !!****  *GREENROOF* !! !!    PURPOSE !!    ------- !! !!    call the vegetation scheme (ISBA) inside TEB for greenroofs !! !!**  METHOD !!     ------ !!    based on subroutine \"garden\" !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !!    Based on subroutine \"garden\" !! !!    AUTHOR !!    ------ !! !!      C. de Munck & A. Lemonsu          * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !     Original    09/2011 !     C. de Munck   02/2013  irrigation (drip irrigation) !     B. decharme 04/2013 : Variables required in TEB to allow coupling with AROME/ALADIN/ARPEGE !                           phasing call isba !                           calculation of vegetation CO2 flux !                           dummy for water table / surface coupling !!    P. Samuelsson  10/2014  Introduced dummy variables in call to ISBA for MEB !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_DATA_COVER_n , ONLY : DATA_COVER_t USE MODD_DATA_ISBA_n , ONLY : DATA_ISBA_t USE MODD_SFX_GRID_n , ONLY : GRID_t USE MODD_SSO_n , ONLY : SSO_t , SSO_INIT USE MODD_TEB_n , ONLY : TEB_t USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t ! USE MODD_DATA_ISBA_n , ONLY : DATA_ISBA_t USE MODD_GR_BIOG_n , ONLY : GR_BIOG_t ! USE MODD_DIAG_n , ONLY : DIAG_t USE MODD_DIAG_EVAP_ISBA_n , ONLY : DIAG_EVAP_ISBA_t USE MODD_DIAG_MISC_ISBA_n , ONLY : DIAG_MISC_ISBA_t ! USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t USE MODD_ISBA_n , ONLY : ISBA_S_t , ISBA_K_t , ISBA_P_t , ISBA_PE_t ! USE MODD_AGRI_n , ONLY : AGRI_t , AGRI_INIT ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_TYPE_DATE_SURF , ONLY : DATE_TIME USE MODD_CSTS , ONLY : XCPD , XLVTT , XKARMAN ! USE MODI_ISBA USE MODI_VEGETATION_UPDATE USE MODI_VEGETATION_EVOL USE MODI_CARBON_EVOL USE MODE_THERMOS USE MODI_ROOF_IMPL_COEF USE MODI_TEB_IRRIG USE MODI_FLAG_TEB_VEG_n USE PROXI_SVAT_CONSTS , ONLY : GREENROOF_BR ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! ! ! TYPE ( DATA_COVER_t ), INTENT ( INOUT ) :: DTCO TYPE ( GRID_t ), INTENT ( INOUT ) :: G TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR ! TYPE ( DATA_ISBA_t ), INTENT ( INOUT ) :: DTV TYPE ( GR_BIOG_t ), INTENT ( INOUT ) :: GB ! TYPE ( DIAG_t ), INTENT ( INOUT ) :: DK TYPE ( DIAG_EVAP_ISBA_t ), INTENT ( INOUT ) :: DEK TYPE ( DIAG_MISC_ISBA_t ), INTENT ( INOUT ) :: DMK ! TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: GRO TYPE ( ISBA_S_t ), INTENT ( INOUT ) :: S TYPE ( ISBA_K_t ), INTENT ( INOUT ) :: K TYPE ( ISBA_P_t ), INTENT ( INOUT ) :: P TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK ! CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option !                                                     ! 'OLD' = direct !                                                     ! 'NEW' = Taylor serie, order 1 TYPE ( DATE_TIME ) , INTENT ( IN ) :: TPTIME ! current date and time from teb REAL , DIMENSION (:) , INTENT ( IN ) :: PTSUN ! solar time      (s from midnight) REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEQ_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEQ_B_COEF ! for humidity REAL , DIMENSION (:) , INTENT ( IN ) :: PPET_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPET_B_COEF ! for temperature REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:) , INTENT ( IN ) :: PZREF ! height of the first atmospheric level REAL , DIMENSION (:) , INTENT ( IN ) :: PUREF ! reference height for the wind REAL , DIMENSION (:) , INTENT ( IN ) :: PALB_GD ! green areas albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PTA ! temperature at first atm. level REAL , DIMENSION (:) , INTENT ( IN ) :: PQA ! specific humidity at first atm. level REAL , DIMENSION (:) , INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNA ! Exner function at first atm. level REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNS ! surface Exner function REAL , DIMENSION (:) , INTENT ( IN ) :: PRHOA ! air density at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PCO2 ! CO2 concentration in the air    (kg/m3) REAL , DIMENSION (:) , INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:) , INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:) , INTENT ( IN ) :: PZENITH ! solar zenithal angle REAL , DIMENSION (:) , INTENT ( IN ) :: PSW ! incoming total solar rad on an horizontal surface REAL , DIMENSION (:) , INTENT ( IN ) :: PLW ! atmospheric infrared radiation REAL , DIMENSION (:) , INTENT ( IN ) :: PVMOD ! module of horizontal wind near first atm. level REAL , DIMENSION (:) , INTENT ( IN ) :: PALBNIR_TVEG ! nearIR  veg tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBVIS_TVEG ! visible veg tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBNIR_TSOIL ! nearIR  soil tot albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PALBVIS_TSOIL ! visible soil tot albedo ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN ! net radiation over greenroofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PH ! sensible heat flux over greenroofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE ! latent heat flux over greenroofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX ! flux through the greenroofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PSFCO2 ! flux of greenroof CO2       (m/s*kg_CO2/kg_air) REAL , DIMENSION (:) , INTENT ( OUT ) :: PEVAP ! total evaporation over greenroofs (kg/m2/s) REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW ! friction flux (m2/s2) REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF ! greenroof surface runoff REAL , DIMENSION (:) , INTENT ( OUT ) :: PDRAIN ! greenroof surface drainage REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC ! greenroof aerodynamical conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PQSAT ! saturation humidity REAL , DIMENSION (:) , INTENT ( OUT ) :: PTSRAD ! greenroof radiative surface temp. (snow free) REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_AGG ! aggreg. aeodynamic resistance for greenroofs for latent heat flux REAL , DIMENSION (:) , INTENT ( OUT ) :: PHU_AGG ! aggreg. relative humidity for greenroofs for latent heat flux REAL , DIMENSION (:) , INTENT ( OUT ) :: PDEEP_FLUX ! Heat Flux at the bottom layer of the greenroof REAL , DIMENSION (:) , INTENT ( OUT ) :: PIRRIG ! greenroof summer irrigation rate ! ! !*      0.2    Declarations of local variables ! ! !------------------------------------------------------------------------------- ! !*      1.     Proxi model based on a fixed Bowen ratio !              ---------------------------------------- ! ! PRN (:) = ( 1. - PALB_GD ) * PSW (:) ! PH (:) = GREENROOF_BR * PRN (:) PLE (:) = ( 1 - GREENROOF_BR ) * PRN (:) ! !* Conduction heat flux is neglected PGFLUX (:) = 0. ! !* CO2 flux is neglected PSFCO2 (:) = 0. ! !* evaporation PEVAP (:) = PLE (:) / XLVTT ! !* Friction flux: assumes neutral formulation with roughness length of 0.01m PUW (:) = - ( XKARMAN / LOG ( PUREF (:) / 0.01 )) ** 2 * PVMOD (:) ** 2 ! !* Aerodynamical conductance: neglected because used further only for !  implicitation of canyon air temperature when the heat flux depends on the !  surface temperature ! PAC (:) = 0. ! !* surface saturation humidity PQSAT (:) = QSAT ( PTA (:), PPS (:)) ! !* Surface temperature : set equal to air temperature PTSRAD (:) = PTA (:) ! !* aerocynamical conductance for latent heat and surface humidity PAC_AGG (:) = 0. ! neglected (latent flux does not depend on surface humidity) PHU_AGG (:) = 0.3 ! surface humidity set to 30% ! !* Heat Flux at the bottom layer of the greenroof PDEEP_FLUX (:) = 0. ! !* greenroof hydrological diagnostics PRUNOFF (:) = 0. ! greenroof surface runoff PDRAIN (:) = 0. ! greenroof total (vertical) drainage PIRRIG (:) = 0. ! greenroof irrigation during time step !------------------------------------------------------------------------------- ! ! END SUBROUTINE GREENROOF","tags":"","loc":"proc/greenroof.html"},{"title":"OPEN_CLOSE_BIN_ASC_FORC – Town Energy Balance (TEB) model API docs","text":"subroutine OPEN_CLOSE_BIN_ASC_FORC(HACTION, HFORCING, HACTION2) Uses MODI_ABOR1_SFX PARKIND1 YOMHOOK Arguments Type Intent Optional Attributes Name character(len=5), intent(in) :: HACTION character(len=6), intent(in) :: HFORCING character(len=1), intent(in) :: HACTION2 Contents Source Code OPEN_CLOSE_BIN_ASC_FORC Source Code SUBROUTINE OPEN_CLOSE_BIN_ASC_FORC ( HACTION , HFORCING , HACTION2 ) !     ################################################################ ! !!****  *OPEN_CLOSE_BIN_ASC_FORC* - routine to open and close atmospheric forcing files !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      A. Lemonsu  *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    04/2008 !!      Modified by P. Le Moigne 07/2008: HACTION2 added !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! USE MODI_ABOR1_SFX ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! CHARACTER ( LEN = 5 ), INTENT ( IN ) :: HACTION ! action to do CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HFORCING ! forcing file type CHARACTER ( LEN = 1 ), INTENT ( IN ) :: HACTION2 ! 'R': read, 'W': write CHARACTER ( LEN = 7 ) :: YSTATUS ! file status (OLD/NEW) ! !*       0.2   Declarations of local variables !              ------------------------------- ! INTEGER :: INI REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'OPEN_CLOSE_BIN_ASC_FORC' , 0 , ZHOOK_HANDLE ) ! IF ( HACTION2 == 'R' ) THEN YSTATUS = 'UNKNOWN' ELSE IF ( HACTION2 == 'W' ) THEN YSTATUS = 'NEW    ' ELSE CALL ABOR1_SFX ( 'OPEN_CLOSE_BIN_ASC_FORC: UNKNOWN FILE STATUS, ' // YSTATUS ) ENDIF ! IF ( HACTION == 'CONF ' ) THEN IF ( LHOOK ) CALL DR_HOOK ( 'OPEN_CLOSE_BIN_ASC_FORC' , 1 , ZHOOK_HANDLE ) RETURN END IF ! IF ( HACTION == 'OPEN ' ) THEN IF ( HFORCING == 'ASCII ' ) THEN OPEN ( UNIT = 122 , FILE = 'input/Forc_TA.txt      ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 123 , FILE = 'input/Forc_QA.txt      ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 124 , FILE = 'input/Forc_WIND.txt    ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 125 , FILE = 'input/Forc_LW.txt      ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 126 , FILE = 'input/Forc_DIR_SW.txt  ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 127 , FILE = 'input/Forc_SCA_SW.txt  ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 128 , FILE = 'input/Forc_RAIN.txt    ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 129 , FILE = 'input/Forc_SNOW.txt    ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 130 , FILE = 'input/Forc_PS.txt      ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 131 , FILE = 'input/Forc_DIR.txt     ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) OPEN ( UNIT = 132 , FILE = 'input/Forc_CO2.txt     ' , FORM = 'FORMATTED' , STATUS = YSTATUS ) ENDIF ENDIF ! IF ( HACTION == 'CLOSE' ) THEN CLOSE ( 121 ) CLOSE ( 122 ) CLOSE ( 123 ) CLOSE ( 124 ) CLOSE ( 125 ) CLOSE ( 126 ) CLOSE ( 127 ) CLOSE ( 128 ) CLOSE ( 129 ) CLOSE ( 130 ) CLOSE ( 131 ) CLOSE ( 132 ) END IF IF ( LHOOK ) CALL DR_HOOK ( 'OPEN_CLOSE_BIN_ASC_FORC' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END SUBROUTINE OPEN_CLOSE_BIN_ASC_FORC","tags":"","loc":"proc/open_close_bin_asc_forc.html"},{"title":"ABOR1_SFX – Town Energy Balance (TEB) model API docs","text":"subroutine ABOR1_SFX(YTEXT) Uses MODI_CLOSE_FILE MODD_SURF_CONF Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: YTEXT Contents Source Code ABOR1_SFX Source Code SUBROUTINE ABOR1_SFX ( YTEXT ) !     ############################################################# ! !!****  *ABOR1_SFX* - abor1 subroutine !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!\tP. Le Moigne   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    06/2008 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! ! USE MODI_CLOSE_FILE USE MODD_SURF_CONF , ONLY : CPROGNAME ! !*       0.1   Declarations of arguments !              ------------------------- ! CHARACTER ( LEN =* ), INTENT ( IN ) :: YTEXT ! !*       0.2   Declarations of local variables !              ------------------------------- ! CHARACTER ( LEN = 6 ) :: YPROGRAM INTEGER :: ILUOUT = 25 ! logical unit of output file ! !------------------------------------------------------------------------------- ! !* get output listing file logical unit ! YPROGRAM = CPROGNAME ! ! IF ( YPROGRAM == 'ASCII ' . OR . YPROGRAM == 'TEXTE ' . OR . YPROGRAM == 'BINARY' ) THEN WRITE ( * , * ) YTEXT WRITE ( * , * ) '---------------------------------------------------------------------------' WRITE ( * , * ) 'MORE DETAILS ABOUT THE CRASH IN THE OUTPUT LISTING: SEE THE FILE NAMED    ' WRITE ( * , * ) 'LISTING_[NAME OF THE RUNNING .EXE: PGD, PREP, OFFLINE].txt              ' WRITE ( * , * ) '---------------------------------------------------------------------------' ENDIF ! WRITE ( ILUOUT , * ) '---------------------------------------------------------------------------' WRITE ( ILUOUT , * ) '---------------------------------------------------------------------------' WRITE ( ILUOUT , * ) '--------------------   FATAL ERROR in SURFEX  -----------------------------' WRITE ( ILUOUT , * ) '---------------------------------------------------------------------------' WRITE ( ILUOUT , * ) '---------------------------------------------------------------------------' WRITE ( ILUOUT , * ) '-                                                                         -' WRITE ( ILUOUT , * ) YTEXT WRITE ( ILUOUT , * ) '-                                                                         -' WRITE ( ILUOUT , * ) '---------------------------------------------------------------------------' WRITE ( ILUOUT , * ) '---------------------------------------------------------------------------' CALL CLOSE_FILE ( YPROGRAM , ILUOUT ) ! STOP ! END SUBROUTINE ABOR1_SFX","tags":"","loc":"proc/abor1_sfx.html"},{"title":"CLOSE_FILE_ASC – Town Energy Balance (TEB) model API docs","text":"subroutine CLOSE_FILE_ASC(HPROGRAM, KUNIT) Uses PARKIND1 YOMHOOK Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HPROGRAM integer, intent(in) :: KUNIT Contents Source Code CLOSE_FILE_ASC Source Code SUBROUTINE CLOSE_FILE_ASC ( HPROGRAM , KUNIT ) !     ####################################################### ! !!****  *CLOSE_FILE_ASC* - closes files read by surface in MESOHN !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    01/2003 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HPROGRAM ! main program INTEGER , INTENT ( IN ) :: KUNIT ! logical unit of file REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*       0.2   Declarations of local variables !              ------------------------------- ! !------------------------------------------------------------------------------- ! !* closes the file !  ------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'CLOSE_FILE_ASC' , 0 , ZHOOK_HANDLE ) CLOSE ( KUNIT ) IF ( LHOOK ) CALL DR_HOOK ( 'CLOSE_FILE_ASC' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE CLOSE_FILE_ASC","tags":"","loc":"proc/close_file_asc.html"},{"title":"OL_READ_ATM – Town Energy Balance (TEB) model API docs","text":"subroutine OL_READ_ATM(HSURF_FILETYPE, HFORCING_FILETYPE, KFORC_STEP, PTA, PQA, PWIND, PDIR_SW, PSCA_SW, PLW, PSNOW, PRAIN, PPS, PCO2, PDIR, OLIMIT_QAIR) Uses YOMHOOK MODE_THERMOS MODI_ABOR1_SFX MODI_OL_READ_ATM_ASCII PARKIND1 MODD_SURF_PAR Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HSURF_FILETYPE character(len=6), intent(in) :: HFORCING_FILETYPE integer, intent(in) :: KFORC_STEP real, intent(inout), DIMENSION(:,:) :: PTA real, intent(inout), DIMENSION(:,:) :: PQA real, intent(inout), DIMENSION(:,:) :: PWIND real, intent(inout), DIMENSION(:,:) :: PDIR_SW real, intent(inout), DIMENSION(:,:) :: PSCA_SW real, intent(inout), DIMENSION(:,:) :: PLW real, intent(inout), DIMENSION(:,:) :: PSNOW real, intent(inout), DIMENSION(:,:) :: PRAIN real, intent(inout), DIMENSION(:,:) :: PPS real, intent(inout), DIMENSION(:,:) :: PCO2 real, intent(inout), DIMENSION(:,:) :: PDIR logical, intent(in) :: OLIMIT_QAIR Contents Source Code OL_READ_ATM Source Code SUBROUTINE OL_READ_ATM (& HSURF_FILETYPE , HFORCING_FILETYPE , KFORC_STEP , & PTA , PQA , PWIND , PDIR_SW , PSCA_SW , PLW , PSNOW , PRAIN , PPS ,& PCO2 , PDIR , OLIMIT_QAIR ) !************************************************************************** ! !!    PURPOSE !!    ------- !         Read in the netcdf file the atmospheric forcing for the actual time !         step KFORC_STEP, and for the next one. !         The two time step are needed for the time interpolation of the !         forcing. !         If the end of the file  is reached, set the two step to the last !         values. !         Return undef value if the variable is not present !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      F. Habets   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original     06/2003 !!      P. Le Moigne 10/2004: set XCOUNT to 2 because of revised temporal loop in offline.f90: !!                            time evolution is done at the end of isba time step so first !!                            isba computation is done on first forcing time step !!      P. Le Moigne 10/2005: consistency checking between orographies read from forcing !!                            file and from initial file !!      B. Decharme  01/2009: Optional, limitation of Qair (<= Qsat(tair)) ! ! ! ! USE MODD_SURF_PAR , ONLY : XUNDEF !USE MODD_IO_SURF_OL, ONLY : XSTART,XCOUNT,XSTRIDE,LPARTR ! USE MODI_OL_READ_ATM_ASCII ! USE MODE_THERMOS ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! USE MODI_ABOR1_SFX ! IMPLICIT NONE ! ! global variables ! ! REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PTA !K REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PQA REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PWIND REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PDIR_SW REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PSCA_SW REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PLW REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PSNOW REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PRAIN REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PPS REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PCO2 REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PDIR INTEGER , INTENT ( IN ) :: KFORC_STEP CHARACTER ( LEN = 6 ) , INTENT ( IN ) :: HSURF_FILETYPE CHARACTER ( LEN = 6 ) , INTENT ( IN ) :: HFORCING_FILETYPE LOGICAL , INTENT ( IN ) :: OLIMIT_QAIR ! REAL , PARAMETER :: ZTAIR = 28 6.0 REAL , PARAMETER :: ZPSURF = 10132 5.0 ! REAL , DIMENSION ( SIZE ( PTA , 1 ), SIZE ( PTA , 2 )) :: ZWORK1 , ZWORK2 , ZQSAT ! INTEGER :: JFRC , IFRC , JJ , INI , INB ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! !set time variables IF ( LHOOK ) CALL DR_HOOK ( 'OL_READ_ATM' , 0 , ZHOOK_HANDLE ) !XSTART =KFORC_STEP !XCOUNT =SIZE(PTA,2) !XSTRIDE=1 !LPARTR=.TRUE. ! ! read data ! CALL OL_READ_ATM_ASCII ( KFORC_STEP , & PTA , PQA , PWIND , PDIR_SW , PSCA_SW , PLW , PSNOW , PRAIN , PPS ,& PCO2 , PDIR ) ! ! Assume Qair <= Qsat_air ! IF ( OLIMIT_QAIR ) THEN ! INI = SIZE ( PTA , 1 ) IFRC = SIZE ( PTA , 2 ) INB = 0 ! DO JFRC = 1 , IFRC DO JJ = 1 , INI IF ( PTA ( JJ , JFRC ) > 0.0 . AND . PTA ( JJ , JFRC ) /= XUNDEF ) THEN INB = INB + 1 ZWORK1 ( JJ , JFRC ) = PTA ( JJ , JFRC ) ZWORK2 ( JJ , JFRC ) = PPS ( JJ , JFRC ) ELSE ZWORK1 ( JJ , JFRC ) = ZTAIR ZWORK2 ( JJ , JFRC ) = ZPSURF PTA ( JJ , JFRC ) = XUNDEF PQA ( JJ , JFRC ) = 0.0 ENDIF ENDDO ENDDO ! IF ( INB == 0 . AND . INI /= 0 ) THEN CALL ABOR1_SFX ( 'OL_READ_ATM: THE FORCING IS UNDEFINED' ) ENDIF ! ZQSAT (:,:) = QSAT ( ZWORK1 (:,:), ZWORK2 (:,:)) ! PQA (:,:) = MIN ( PQA (:,:), ZQSAT (:,:)) ! ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( 'OL_READ_ATM' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE OL_READ_ATM","tags":"","loc":"proc/ol_read_atm.html"},{"title":"OL_READ_ATM_ASCII – Town Energy Balance (TEB) model API docs","text":"subroutine OL_READ_ATM_ASCII(KFORC_STEP, PTA, PQA, PWIND, PDIR_SW, PSCA_SW, PLW, PSNOW, PRAIN, PPS, PCO2, PDIR) Uses MODI_READ_SURF_ATM PARKIND1 YOMHOOK Arguments Type Intent Optional Attributes Name integer, intent(in) :: KFORC_STEP real, intent(out), DIMENSION(:,:) :: PTA real, intent(out), DIMENSION(:,:) :: PQA real, intent(out), DIMENSION(:,:) :: PWIND real, intent(out), DIMENSION(:,:) :: PDIR_SW real, intent(out), DIMENSION(:,:) :: PSCA_SW real, intent(out), DIMENSION(:,:) :: PLW real, intent(out), DIMENSION(:,:) :: PSNOW real, intent(out), DIMENSION(:,:) :: PRAIN real, intent(out), DIMENSION(:,:) :: PPS real, intent(out), DIMENSION(:,:) :: PCO2 real, intent(out), DIMENSION(:,:) :: PDIR Contents Source Code OL_READ_ATM_ASCII Source Code SUBROUTINE OL_READ_ATM_ASCII ( KFORC_STEP , & PTA , PQA , PWIND , PDIR_SW , PSCA_SW , PLW , PSNOW , & PRAIN , PPS , PCO2 , PDIR ) !************************************************************************** ! !!    PURPOSE !!    ------- !         Read in the ascii file the atmospheric forcing for the actual time !         step KFORC_STEP, and for the next one. !         The two time step are needed for the time interpolation of the !         forcing. !         If the end of the file  is reached, set the two step to the last !         values. !         Return undef value if the variable is not present !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      A. Lemonsu  *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original     03/2008 ! USE MODI_READ_SURF_ATM ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! ! global variables REAL , DIMENSION (:,:), INTENT ( OUT ) :: PTA REAL , DIMENSION (:,:), INTENT ( OUT ) :: PQA REAL , DIMENSION (:,:), INTENT ( OUT ) :: PWIND REAL , DIMENSION (:,:), INTENT ( OUT ) :: PDIR_SW REAL , DIMENSION (:,:), INTENT ( OUT ) :: PSCA_SW REAL , DIMENSION (:,:), INTENT ( OUT ) :: PLW REAL , DIMENSION (:,:), INTENT ( OUT ) :: PSNOW REAL , DIMENSION (:,:), INTENT ( OUT ) :: PRAIN REAL , DIMENSION (:,:), INTENT ( OUT ) :: PPS REAL , DIMENSION (:,:), INTENT ( OUT ) :: PCO2 REAL , DIMENSION (:,:), INTENT ( OUT ) :: PDIR INTEGER , INTENT ( IN ) :: KFORC_STEP ! local variables REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! read data IF ( LHOOK ) CALL DR_HOOK ( 'OL_READ_ATM_ASCII' , 0 , ZHOOK_HANDLE ) CALL READ_SURF_ATM ( 'ASCII ' , PTA (:, 1 : 2 ), KFORC_STEP , 2 , 122 ) CALL READ_SURF_ATM ( 'ASCII ' , PQA (:, 1 : 2 ), KFORC_STEP , 2 , 123 ) CALL READ_SURF_ATM ( 'ASCII ' , PWIND (:, 1 : 2 ), KFORC_STEP , 2 , 124 ) CALL READ_SURF_ATM ( 'ASCII ' , PLW (:, 1 : 2 ), KFORC_STEP , 2 , 125 ) CALL READ_SURF_ATM ( 'ASCII ' , PDIR_SW (:, 1 : 2 ), KFORC_STEP , 2 , 126 ) CALL READ_SURF_ATM ( 'ASCII ' , PSCA_SW (:, 1 : 2 ), KFORC_STEP , 2 , 127 ) CALL READ_SURF_ATM ( 'ASCII ' , PRAIN (:, 1 : 2 ), KFORC_STEP , 2 , 128 ) CALL READ_SURF_ATM ( 'ASCII ' , PSNOW (:, 1 : 2 ), KFORC_STEP , 2 , 129 ) CALL READ_SURF_ATM ( 'ASCII ' , PPS (:, 1 : 2 ), KFORC_STEP , 2 , 130 ) CALL READ_SURF_ATM ( 'ASCII ' , PDIR (:, 1 : 2 ), KFORC_STEP , 2 , 131 ) CALL READ_SURF_ATM ( 'ASCII ' , PCO2 (:, 1 : 2 ), KFORC_STEP , 2 , 132 ) ! IF ( LHOOK ) CALL DR_HOOK ( 'OL_READ_ATM_ASCII' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE OL_READ_ATM_ASCII","tags":"","loc":"proc/ol_read_atm_ascii.html"},{"title":"OL_ALLOC_ATM – Town Energy Balance (TEB) model API docs","text":"subroutine OL_ALLOC_ATM(KNI, KBANDS, KSCAL) Uses YOMHOOK MODD_SURF_PAR MODD_FORC_ATM PARKIND1 Arguments Type Intent Optional Attributes Name integer, intent(in) :: KNI integer, intent(in) :: KBANDS integer, intent(in) :: KSCAL Contents Source Code OL_ALLOC_ATM Source Code SUBROUTINE OL_ALLOC_ATM ( KNI , KBANDS , KSCAL ) !     ################################################################################# ! !! !!    MODIFICATIONS !!    ------------- !     05/2013  B. Decharme : New coupling variables (for AGCM) !------------------------------------------------------------------------------- ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_FORC_ATM , ONLY : CSV ,& ! name of all scalar variables XDIR_ALB ,& ! direct albedo for each band XSCA_ALB ,& ! diffuse albedo for each band XEMIS ,& ! emissivity XTSRAD ,& ! radiative temperature XTSUN ,& ! solar time                    (s from midnight) XZS ,& ! orography                             (m) XZREF ,& ! height of T,q forcing                 (m) XUREF ,& ! height of wind forcing                (m) XTA ,& ! air temperature forcing               (K) XQA ,& ! air specific humidity forcing         (kg/m3) XRHOA ,& ! air density forcing                   (kg/m3) XSV ,& ! scalar variables XU ,& ! zonal wind                            (m/s) XV ,& ! meridian wind                         (m/s) XDIR_SW ,& ! direct  solar radiation (on horizontal surf.) XSCA_SW ,& ! diffuse solar radiation (on horizontal surf.) XSW_BANDS ,& ! mean wavelength of each shortwave band (m) XZENITH ,& ! zenithal angle at t      (radian from the vertical) XZENITH2 ,& ! zenithal angle at t+1    (radian from the vertical) XAZIM ,& ! azimuthal angle      (radian from North, clockwise) XLW ,& ! longwave radiation (on horizontal surf.) XPS ,& ! pressure at atmospheric model surface (Pa) XPA ,& ! pressure at forcing level             (Pa) XCO2 ,& ! CO2 concentration in the air          (kg/kg) XSNOW ,& ! snow precipitation                    (kg/m2/s) XRAIN ,& ! liquid precipitation                  (kg/m2/s) XSFTH ,& ! flux of heat                          (W/m2) XSFTQ ,& ! flux of water vapor                   (kg/m2/s) XSFU ,& ! zonal momentum flux                   (pa) XSFV ,& ! meridian momentum flux                (pa) XSFCO2 ,& ! flux of CO2                           (kg/m2/s) XSFTS ,& ! flux of scalar var.                   (kg/m2/s) XPEW_A_COEF ,& ! implicit coefficients XPEW_B_COEF ,& ! needed if HCOUPLING='I' XPET_A_COEF ,& XPEQ_A_COEF ,& XPET_B_COEF ,& XPEQ_B_COEF ,& XTSURF ,& XZ0 ,& XZ0H ,& XQSURF ! ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! INTEGER , INTENT ( IN ) :: KNI ! grid dimension INTEGER , INTENT ( IN ) :: KBANDS ! grid dimension INTEGER , INTENT ( IN ) :: KSCAL ! grid dimension REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! !*      0.2    declarations of local variables ! !------------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'OL_ALLOC_ATM' , 0 , ZHOOK_HANDLE ) IF (. NOT . ALLOCATED ( CSV )) ALLOCATE ( CSV ( KSCAL ) ) ! name of all scalar variables IF (. NOT . ALLOCATED ( XDIR_ALB )) ALLOCATE ( XDIR_ALB ( KNI , KBANDS )) ! direct albedo for each band IF (. NOT . ALLOCATED ( XSCA_ALB )) ALLOCATE ( XSCA_ALB ( KNI , KBANDS )) ! diffuse albedo for each band IF (. NOT . ALLOCATED ( XEMIS )) ALLOCATE ( XEMIS ( KNI ) ) ! emissivity IF (. NOT . ALLOCATED ( XTSRAD )) ALLOCATE ( XTSRAD ( KNI ) ) ! radiative temperature IF (. NOT . ALLOCATED ( XTSUN )) ALLOCATE ( XTSUN ( KNI ) ) ! solar time                    (s from midnight) IF (. NOT . ALLOCATED ( XZREF )) ALLOCATE ( XZREF ( KNI ) ) ! height of T,q forcing                 (m) IF (. NOT . ALLOCATED ( XUREF )) ALLOCATE ( XUREF ( KNI ) ) ! height of wind forcing                (m) IF (. NOT . ALLOCATED ( XTA )) ALLOCATE ( XTA ( KNI ) ) ! air temperature forcing               (K) IF (. NOT . ALLOCATED ( XQA )) ALLOCATE ( XQA ( KNI ) ) ! air specific humidity forcing         (kg/m3) IF (. NOT . ALLOCATED ( XZS )) ALLOCATE ( XZS ( KNI ) ) ! orography                             (m) IF (. NOT . ALLOCATED ( XRHOA )) ALLOCATE ( XRHOA ( KNI ) ) ! air density forcing                   (kg/m3) IF (. NOT . ALLOCATED ( XSV )) ALLOCATE ( XSV ( KNI , KSCAL ) ) ! scalar variables IF (. NOT . ALLOCATED ( XU )) ALLOCATE ( XU ( KNI ) ) ! zonal wind                            (m/s) IF (. NOT . ALLOCATED ( XV )) ALLOCATE ( XV ( KNI ) ) ! meridian wind                         (m/s) IF (. NOT . ALLOCATED ( XDIR_SW )) ALLOCATE ( XDIR_SW ( KNI , KBANDS )) ! direct  solar radiation (on horizontal surf.) IF (. NOT . ALLOCATED ( XSCA_SW )) ALLOCATE ( XSCA_SW ( KNI , KBANDS )) ! diffuse solar radiation (on horizontal surf.) IF (. NOT . ALLOCATED ( XSW_BANDS )) ALLOCATE ( XSW_BANDS ( KBANDS ) ) ! mean wavelength of each shortwave band (m) IF (. NOT . ALLOCATED ( XZENITH )) ALLOCATE ( XZENITH ( KNI ) ) ! zenithal angle       (radian from the vertical) IF (. NOT . ALLOCATED ( XZENITH2 )) ALLOCATE ( XZENITH2 ( KNI ) ) ! zenithal angle at t+1(radian from the vertical) IF (. NOT . ALLOCATED ( XAZIM )) ALLOCATE ( XAZIM ( KNI ) ) ! azimuthal angle      (radian from North, clockwise) IF (. NOT . ALLOCATED ( XLW )) ALLOCATE ( XLW ( KNI ) ) ! longwave radiation (on horizontal surf.) IF (. NOT . ALLOCATED ( XPS )) ALLOCATE ( XPS ( KNI ) ) ! pressure at atmospheric model surface (Pa) IF (. NOT . ALLOCATED ( XPA )) ALLOCATE ( XPA ( KNI ) ) ! pressure at forcing level             (Pa) IF (. NOT . ALLOCATED ( XCO2 )) ALLOCATE ( XCO2 ( KNI ) ) ! CO2 concentration in the air          (kg/kg) IF (. NOT . ALLOCATED ( XSNOW )) ALLOCATE ( XSNOW ( KNI ) ) ! snow precipitation                    (kg/m2/s) IF (. NOT . ALLOCATED ( XRAIN )) ALLOCATE ( XRAIN ( KNI ) ) ! liquid precipitation                  (kg/m2/s) IF (. NOT . ALLOCATED ( XSFTH )) ALLOCATE ( XSFTH ( KNI ) ) ! flux of heat                          (W/m2) IF (. NOT . ALLOCATED ( XSFTQ )) ALLOCATE ( XSFTQ ( KNI ) ) ! flux of water vapor                   (kg/m2/s) IF (. NOT . ALLOCATED ( XSFU )) ALLOCATE ( XSFU ( KNI ) ) ! zonal momentum flux                   (pa) IF (. NOT . ALLOCATED ( XSFV )) ALLOCATE ( XSFV ( KNI ) ) ! meridian momentum flux                (pa) IF (. NOT . ALLOCATED ( XSFCO2 )) ALLOCATE ( XSFCO2 ( KNI ) ) ! flux of CO2                           (kg/m2/s) IF (. NOT . ALLOCATED ( XSFTS )) ALLOCATE ( XSFTS ( KNI , KSCAL ) ) ! flux of scalar var.                  (kg/m2/s) IF (. NOT . ALLOCATED ( XPEW_A_COEF )) ALLOCATE ( XPEW_A_COEF ( KNI ) ) ! implicit coefficients IF (. NOT . ALLOCATED ( XPEW_B_COEF )) ALLOCATE ( XPEW_B_COEF ( KNI ) ) ! needed if HCOUPLING='I' IF (. NOT . ALLOCATED ( XPET_A_COEF )) ALLOCATE ( XPET_A_COEF ( KNI ) ) IF (. NOT . ALLOCATED ( XPEQ_A_COEF )) ALLOCATE ( XPEQ_A_COEF ( KNI ) ) IF (. NOT . ALLOCATED ( XPET_B_COEF )) ALLOCATE ( XPET_B_COEF ( KNI ) ) IF (. NOT . ALLOCATED ( XPEQ_B_COEF )) ALLOCATE ( XPEQ_B_COEF ( KNI ) ) IF (. NOT . ALLOCATED ( XTSURF )) ALLOCATE ( XTSURF ( KNI ) ) IF (. NOT . ALLOCATED ( XZ0 ) ) ALLOCATE ( XZ0 ( KNI ) ) IF (. NOT . ALLOCATED ( XZ0H ) ) ALLOCATE ( XZ0H ( KNI ) ) IF (. NOT . ALLOCATED ( XQSURF )) ALLOCATE ( XQSURF ( KNI ) ) ! IF ( SIZE ( CSV ) >= 1 ) CSV ( 1 ) = '#CO   ' IF ( SIZE ( CSV ) >= 2 ) CSV ( 2 ) = '#O3   ' IF ( SIZE ( CSV ) >= 3 ) CSV ( 3 ) = '#H2O2 ' IF ( SIZE ( CSV ) >= 4 ) CSV ( 4 ) = '#NO   ' IF ( SIZE ( CSV ) >= 5 ) CSV ( 5 ) = '#NO2  ' IF ( SIZE ( CSV ) >= 6 ) CSV ( 6 ) = '#NO3  ' IF ( SIZE ( CSV ) >= 7 ) CSV ( 7 ) = '#N2O5 ' IF ( SIZE ( CSV ) >= 8 ) CSV ( 8 ) = '#HONO ' IF ( SIZE ( CSV ) >= 9 ) CSV ( 9 ) = '#HNO3 ' IF ( SIZE ( CSV ) >= 10 ) CSV ( 10 ) = '#HNO4 ' IF ( SIZE ( CSV ) >= 11 ) CSV ( 11 ) = '#NH3  ' IF ( SIZE ( CSV ) >= 12 ) CSV ( 12 ) = '#SO2  ' IF ( SIZE ( CSV ) >= 13 ) CSV ( 13 ) = '#SULF ' IF ( SIZE ( CSV ) >= 14 ) CSV ( 14 ) = '#OH   ' IF ( SIZE ( CSV ) >= 15 ) CSV ( 15 ) = '#HO2  ' IF ( SIZE ( CSV ) >= 16 ) CSV ( 16 ) = '#CH4  ' IF ( SIZE ( CSV ) >= 17 ) CSV ( 17 ) = '#ETH  ' IF ( SIZE ( CSV ) >= 18 ) CSV ( 18 ) = '#ALKA ' IF ( SIZE ( CSV ) >= 19 ) CSV ( 19 ) = '#ALKE ' IF ( SIZE ( CSV ) >= 20 ) CSV ( 20 ) = '#BIO  ' IF ( SIZE ( CSV ) >= 21 ) CSV ( 21 ) = '#ARO  ' IF ( SIZE ( CSV ) >= 22 ) CSV ( 22 ) = '#HCHO ' IF ( SIZE ( CSV ) >= 23 ) CSV ( 23 ) = '#ALD  ' IF ( SIZE ( CSV ) >= 24 ) CSV ( 24 ) = '#KET  ' IF ( SIZE ( CSV ) >= 25 ) CSV ( 25 ) = '#CARBO' IF ( SIZE ( CSV ) >= 26 ) CSV ( 26 ) = '#ONIT ' IF ( SIZE ( CSV ) >= 27 ) CSV ( 27 ) = '#PAN  ' IF ( SIZE ( CSV ) >= 28 ) CSV ( 28 ) = '#OP1  ' IF ( SIZE ( CSV ) >= 29 ) CSV ( 29 ) = '#OP2  ' IF ( SIZE ( CSV ) >= 30 ) CSV ( 30 ) = '#ORA  ' IF ( SIZE ( CSV ) >= 31 ) CSV ( 31 ) = '#ORA2 ' IF ( SIZE ( CSV ) >= 32 ) CSV ( 32 ) = '#MO2  ' IF ( SIZE ( CSV ) >= 33 ) CSV ( 33 ) = '#ALKAP' IF ( SIZE ( CSV ) >= 34 ) CSV ( 34 ) = '#ALKEP' IF ( SIZE ( CSV ) >= 35 ) CSV ( 35 ) = '#BIOP ' IF ( SIZE ( CSV ) >= 36 ) CSV ( 36 ) = '#PHO  ' IF ( SIZE ( CSV ) >= 37 ) CSV ( 37 ) = '#ADD  ' IF ( SIZE ( CSV ) >= 38 ) CSV ( 38 ) = '#AROP ' IF ( SIZE ( CSV ) >= 39 ) CSV ( 39 ) = '#CARBO' IF ( SIZE ( CSV ) >= 40 ) CSV ( 40 ) = '#OLN  ' IF ( SIZE ( CSV ) >= 41 ) CSV ( 41 ) = '#XO2  ' IF ( SIZE ( CSV ) >= 42 ) CSV ( 42 ) = '@M0I ' IF ( SIZE ( CSV ) >= 43 ) CSV ( 43 ) = '@M0J ' IF ( SIZE ( CSV ) >= 44 ) CSV ( 44 ) = '@M6I ' IF ( SIZE ( CSV ) >= 45 ) CSV ( 45 ) = '@M6J ' IF ( SIZE ( CSV ) >= 46 ) CSV ( 46 ) = '@H2OI' IF ( SIZE ( CSV ) >= 47 ) CSV ( 47 ) = '@H2OJ' IF ( SIZE ( CSV ) >= 48 ) CSV ( 48 ) = '@SO4I' IF ( SIZE ( CSV ) >= 49 ) CSV ( 49 ) = '@SO4J' IF ( SIZE ( CSV ) >= 50 ) CSV ( 50 ) = '@NO3I' IF ( SIZE ( CSV ) >= 51 ) CSV ( 51 ) = '@NO3J' IF ( SIZE ( CSV ) >= 52 ) CSV ( 52 ) = '@NH3I' IF ( SIZE ( CSV ) >= 53 ) CSV ( 53 ) = '@NH3J' IF ( SIZE ( CSV ) >= 54 ) CSV ( 54 ) = '@OCI' IF ( SIZE ( CSV ) >= 55 ) CSV ( 55 ) = '@OCJ' IF ( SIZE ( CSV ) >= 56 ) CSV ( 56 ) = '@BCI' IF ( SIZE ( CSV ) >= 57 ) CSV ( 57 ) = '@BCJ' IF ( SIZE ( CSV ) >= 58 ) CSV ( 58 ) = '@DSTI' IF ( SIZE ( CSV ) >= 59 ) CSV ( 59 ) = '@DSTJ' ! !CSV       (:)  ='UNDEF '! name of all scalar variables XDIR_ALB (:,:) = XUNDEF ! direct albedo for each band XSCA_ALB (:,:) = XUNDEF ! diffuse albedo for each band XEMIS (:) = XUNDEF ! emissivity XTSRAD (:) = XUNDEF ! radiative temperature XTSUN (:) = XUNDEF ! solar time                    (s from midnight) XZREF (:) = XUNDEF ! height of T,q forcing                 (m) XUREF (:) = XUNDEF ! height of wind forcing                (m) XTA (:) = XUNDEF ! air temperature forcing               (K) XQA (:) = XUNDEF ! air specific humidity forcing         (kg/m3) XRHOA (:) = XUNDEF ! air density forcing                   (kg/m3) XSV (:,:) = XUNDEF ! scalar variables XU (:) = XUNDEF ! zonal wind                            (m/s) XV (:) = XUNDEF ! meridian wind                         (m/s) XDIR_SW (:,:) = XUNDEF ! direct  solar radiation (on horizontal surf.) XSCA_SW (:,:) = XUNDEF ! diffuse solar radiation (on horizontal surf.) XSW_BANDS (:) = XUNDEF ! mean wavelength of each shortwave band (m) XZENITH (:) = XUNDEF ! zenithal angle at t      (radian from the vertical) XZENITH2 (:) = XUNDEF ! zenithal angle at t+1      (radian from the vertical) XAZIM (:) = XUNDEF ! azimuthal angle      (radian from North, clockwise) XLW (:) = XUNDEF ! longwave radiation (on horizontal surf.) XPS (:) = XUNDEF ! pressure at atmospheric model surface (Pa) XPA (:) = XUNDEF ! pressure at forcing level             (Pa) XZS (:) = XUNDEF ! atmospheric model orography           (m) XCO2 (:) = XUNDEF ! CO2 concentration in the air          (kg/kg) XSNOW (:) = XUNDEF ! snow precipitation                    (kg/m2/s) XRAIN (:) = XUNDEF ! liquid precipitation                  (kg/m2/s) XSFTH (:) = XUNDEF ! flux of heat                          (W/m2) XSFTQ (:) = XUNDEF ! flux of water vapor                   (kg/m2/s) XSFU (:) = XUNDEF ! zonal momentum flux                   (pa) XSFV (:) = XUNDEF ! meridian momentum flux                (pa) XSFCO2 (:) = XUNDEF ! flux of CO2                           (kg/m2/s) XSFTS (:,:) = XUNDEF ! flux of scalar var.                 (kg/m2/s) XPEW_A_COEF (:) = XUNDEF ! implicit coefficients XPEW_B_COEF (:) = XUNDEF ! needed if HCOUPLING='I' XPET_A_COEF (:) = XUNDEF XPEQ_A_COEF (:) = XUNDEF XPET_B_COEF (:) = XUNDEF XPEQ_B_COEF (:) = XUNDEF XTSURF (:) = XUNDEF ! effective temperature                  (K) XZ0 (:) = XUNDEF ! surface roughness length for momentum  (m) XZ0H (:) = XUNDEF ! surface roughness length for heat      (m) XQSURF (:) = XUNDEF ! specific humidity at surface           (kg/kg) ! IF ( LHOOK ) CALL DR_HOOK ( 'OL_ALLOC_ATM' , 1 , ZHOOK_HANDLE ) END SUBROUTINE OL_ALLOC_ATM","tags":"","loc":"proc/ol_alloc_atm.html"},{"title":"OL_TIME_INTERP_ATM – Town Energy Balance (TEB) model API docs","text":"subroutine OL_TIME_INTERP_ATM(KSURF_STEP, KNB_ATM, PTA1, PTA2, PQA1, PQA2, PWIND1, PWIND2, PDIR_SW1, PDIR_SW2, PSCA_SW1, PSCA_SW2, PLW1, PLW2, PSNOW2, PRAIN2, PPS1, PPS2, PCO21, PCO22, PDIR1, PDIR2, PZEN, PSUMZEN) Uses YOMHOOK MODD_FORC_ATM MODD_CSTS MODI_ABOR1_SFX PARKIND1 MODD_SURF_PAR USE OMP_LIB INCLUDE 'omp_lib.h' OMP PARALLEL PRIVATE(ZHOOK_HANDLE_OMP)\nOMP DO PRIVATE(J,ZU1,ZU2,ZV1,ZV2,ZDU,ZDV,ZDTA, &\nOMP ZDQA,ZDLW,ZDPS,ZDCO2,ZDDIR_SW,ZDSCA_SW,ZCOEF2)\nOMP END DO\nOMP END PARALLEL Arguments Type Intent Optional Attributes Name integer, intent(in) :: KSURF_STEP integer, intent(in) :: KNB_ATM real, intent(in), DIMENSION(:) :: PTA1 real, intent(in), DIMENSION(:) :: PTA2 real, intent(in), DIMENSION(:) :: PQA1 real, intent(in), DIMENSION(:) :: PQA2 real, intent(in), DIMENSION(:) :: PWIND1 real, intent(in), DIMENSION(:) :: PWIND2 real, intent(in), DIMENSION(:) :: PDIR_SW1 real, intent(in), DIMENSION(:) :: PDIR_SW2 real, intent(in), DIMENSION(:) :: PSCA_SW1 real, intent(in), DIMENSION(:) :: PSCA_SW2 real, intent(in), DIMENSION(:) :: PLW1 real, intent(in), DIMENSION(:) :: PLW2 real, intent(in), DIMENSION(:) :: PSNOW2 real, intent(in), DIMENSION(:) :: PRAIN2 real, intent(in), DIMENSION(:) :: PPS1 real, intent(in), DIMENSION(:) :: PPS2 real, intent(in), DIMENSION(:) :: PCO21 real, intent(in), DIMENSION(:) :: PCO22 real, intent(in), DIMENSION(:) :: PDIR1 real, intent(in), DIMENSION(:) :: PDIR2 real, intent(in), DIMENSION(:) :: PZEN real, intent(in), DIMENSION(:) :: PSUMZEN Contents Source Code OL_TIME_INTERP_ATM Source Code SUBROUTINE OL_TIME_INTERP_ATM ( KSURF_STEP , KNB_ATM , & PTA1 , PTA2 , PQA1 , PQA2 , PWIND1 , PWIND2 , & PDIR_SW1 , PDIR_SW2 , PSCA_SW1 , PSCA_SW2 , & PLW1 , PLW2 , PSNOW2 , PRAIN2 , & PPS1 , PPS2 , PCO21 , PCO22 , PDIR1 , PDIR2 , & PZEN , PSUMZEN ) !************************************************************************** ! !!    PURPOSE !!    ------- !        Time interpolation of the atmospheric forcing !        So far, it is a simple linear interpolation. !        More complex interpolation may be added, especially for the atmospheric !        radiation (Option to use). !        Output are in the module !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      F. Habets   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    06/2003 ! ! USE MODD_CSTS , ONLY : XPI , XRD , XRV , XG USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_FORC_ATM , ONLY : XTA ,& ! air temperature forcing               (K) XQA ,& ! air specific humidity forcing         (kg/m3) XRHOA ,& ! air density forcing                   (kg/m3) XZS ,& ! orography                             (m) XU ,& ! zonal wind                            (m/s) XV ,& ! meridian wind                         (m/s) XDIR_SW ,& ! direct  solar radiation (on horizontal surf.) XSCA_SW ,& ! diffuse solar radiation (on horizontal surf.) XLW ,& ! longwave radiation (on horizontal surf.) XPS ,& ! pressure at atmospheric model surface (Pa) XPA ,& ! pressure at forcing level             (Pa) XRHOA ,& ! density at forcing level              (kg/m3) XCO2 ,& ! CO2 concentration in the air          (kg/kg) XSNOW ,& ! snow precipitation                    (kg/m2/s) XRAIN ,& ! liquid precipitation                  (kg/m2/s) XZREF ! height of T,q forcing                 (m) ! USE MODI_ABOR1_SFX ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! #ifdef AIX64 !$ USE OMP_LIB #endif ! IMPLICIT NONE ! ! #ifndef AIX64 !$ INCLUDE 'omp_lib.h' #endif ! ! global variables INTEGER , INTENT ( IN ) :: KSURF_STEP , KNB_ATM REAL , DIMENSION (:), INTENT ( IN ) :: PTA1 , PTA2 , PQA1 , PQA2 , PWIND1 , PWIND2 REAL , DIMENSION (:), INTENT ( IN ) :: PDIR_SW1 , PDIR_SW2 , PSCA_SW1 , PSCA_SW2 , PLW1 , PLW2 REAL , DIMENSION (:), INTENT ( IN ) :: PSNOW2 , PRAIN2 , PPS1 , PPS2 , PCO21 , PCO22 , PDIR1 , PDIR2 REAL , DIMENSION (:), INTENT ( IN ) :: PZEN , PSUMZEN ! local variables REAL :: ZDTA , ZDQA , ZDDIR_SW , ZDSCA_SW , ZDLW , & ZDPS , ZDCO2 , ZDU , ZDV , ZU1 , ZV1 , ZU2 , ZV2 REAL :: ZPI , ZNB_ATM , ZSURF_STEP , ZCOEF , ZCOEF2 INTEGER :: J INTEGER :: ILUOUT REAL ( KIND = JPRB ) :: ZHOOK_HANDLE , ZHOOK_HANDLE_OMP LOGICAL :: LINTERP_SW = . FALSE . !======================================================================== ! IF ( LHOOK ) CALL DR_HOOK ( 'OL_TIME_INTERP_ATM_1' , 0 , ZHOOK_HANDLE ) ! ILUOUT = 10 ! ZPI = XPI / 18 0. ZNB_ATM = KNB_ATM * 1. ZSURF_STEP = KSURF_STEP * 1. - 1. ZCOEF = ZSURF_STEP / ZNB_ATM ! IF ( LHOOK ) CALL DR_HOOK ( 'OL_TIME_INTERP_ATM_1' , 1 , ZHOOK_HANDLE ) ! !$OMP PARALLEL PRIVATE(ZHOOK_HANDLE_OMP) IF ( LHOOK ) CALL DR_HOOK ( 'OL_TIME_INTERP_ATM_2' , 0 , ZHOOK_HANDLE_OMP ) !$OMP DO PRIVATE(J,ZU1,ZU2,ZV1,ZV2,ZDU,ZDV,ZDTA, & !$OMP ZDQA,ZDLW,ZDPS,ZDCO2,ZDDIR_SW,ZDSCA_SW,ZCOEF2) DO J = 1 , SIZE ( PTA1 ) ! IF ( PTA1 ( J ) /= XUNDEF ) THEN ! ! Compute wind components ! ! zonal wind ZU1 = PWIND1 ( J ) * SIN ( PDIR1 ( J ) * ZPI ) ZU2 = PWIND2 ( J ) * SIN ( PDIR2 ( J ) * ZPI ) ZDU = ( ZU2 - ZU1 ) * ZCOEF XU ( J ) = ZU1 + ZDU ! ZV1 = PWIND1 ( J ) * COS ( PDIR1 ( J ) * ZPI ) ZV2 = PWIND2 ( J ) * COS ( PDIR2 ( J ) * ZPI ) ZDV = ( ZV2 - ZV1 ) * ZCOEF XV ( J ) = ZV1 + ZDV ! ! Compute variation from atmospheric time step J and J+1 ! ZDTA = ( PTA2 ( J ) - PTA1 ( J )) * ZCOEF XTA ( J ) = PTA1 ( J ) + ZDTA ! ZDQA = ( PQA2 ( J ) - PQA1 ( J )) * ZCOEF XQA ( J ) = PQA1 ( J ) + ZDQA ! ZDLW = ( PLW2 ( J ) - PLW1 ( J )) * ZCOEF XLW ( J ) = PLW1 ( J ) + ZDLW ! ZDPS = ( PPS2 ( J ) - PPS1 ( J )) * ZCOEF XPS ( J ) = PPS1 ( J ) + ZDPS ! ZDCO2 = ( PCO22 ( J ) - PCO21 ( J )) * ZCOEF XCO2 ( J ) = PCO21 ( J ) + ZDCO2 ! IF ( LINTERP_SW ) THEN ! ZCOEF2 = 0. IF ( PSUMZEN ( J ) > 0. ) ZCOEF2 = MAX (( COS ( PZEN ( J )) / PSUMZEN ( J )), 0. ) ! XDIR_SW ( J , 1 ) = MIN ( PDIR_SW2 ( J ) * ZCOEF2 , 130 0.0 * MAX ( COS ( PZEN ( J )), 0. )) ! XSCA_SW ( J , 1 ) = MIN ( PSCA_SW2 ( J ) * ZCOEF2 , 130 0.0 * MAX ( COS ( PZEN ( J )), 0. )) ! ELSE ! ZDDIR_SW = ( PDIR_SW2 ( J ) - PDIR_SW1 ( J )) * ZCOEF XDIR_SW ( J , 1 ) = PDIR_SW1 ( J ) + ZDDIR_SW ! ZDSCA_SW = ( PSCA_SW2 ( J ) - PSCA_SW1 ( J )) * ZCOEF XSCA_SW ( J , 1 ) = PSCA_SW1 ( J ) + ZDSCA_SW ! ENDIF ! ! XRAIN ( J ) = PRAIN2 ( J ) XSNOW ( J ) = PSNOW2 ( J ) ! ! XRHOA ( J ) = XPS ( J ) / ( XTA ( J ) * XRD * ( 1. + (( XRV / XRD ) - 1. ) * XQA ( J ) ) + XZREF ( J ) * XG ) ! ! humidity in kg/m3 XQA ( J ) = XQA ( J ) * XRHOA ( J ) ! ENDIF ! ENDDO !$OMP END DO IF ( LHOOK ) CALL DR_HOOK ( 'OL_TIME_INTERP_ATM_2' , 1 , ZHOOK_HANDLE_OMP ) !$OMP END PARALLEL ! IF ( LHOOK ) CALL DR_HOOK ( 'OL_TIME_INTERP_ATM_3' , 0 , ZHOOK_HANDLE ) ! air density ! ! Check No value data !--------------------- ! Error cases ! IF (( MINVAL ( XTA ) . EQ . XUNDEF ). OR .( MINVAL ( XQA ). EQ . XUNDEF ). OR .& ( MINVAL ( XU ). EQ . XUNDEF ). OR .( MINVAL ( XRAIN ). EQ . XUNDEF ). OR .& ( MINVAL ( XSNOW ). EQ . XUNDEF )) THEN WRITE ( ILUOUT , * ) 'MINVAL(XTA),MINVAL(XQA),MINVAL(XU),MINVAL(XRAIN),MINVAL(XSNOW)' WRITE ( ILUOUT , * ) MINVAL ( XTA ), MINVAL ( XQA ), MINVAL ( XU ), MINVAL ( XRAIN ), MINVAL ( XSNOW ) CALL ABOR1_SFX ( 'OL_TIME_INTERP_ATM: UNDEFINED VALUE IN ATMOSPHERIC FORCING' ) ENDIF ! IF (( MINVAL ( XDIR_SW ). EQ . XUNDEF ). AND .( MINVAL ( XSCA_SW ). EQ . XUNDEF )) THEN WRITE ( ILUOUT , * ) 'MINVAL(XSCA_SW),MINVAL(XDIR_SW)' WRITE ( ILUOUT , * ) MINVAL ( XSCA_SW ), MINVAL ( XDIR_SW ) CALL ABOR1_SFX ( 'OL_TIME_INTERP_ATM: UNDEFINED VALUE IN ATMOSPHERIC FORCING' ) ENDIF ! IF (( MINVAL ( XPS ). EQ . XUNDEF ). AND .( MINVAL ( XZS ). EQ . XUNDEF )) THEN WRITE ( ILUOUT , * ) 'MINVAL(XPS),MINVAL(XZS)' WRITE ( ILUOUT , * ) MINVAL ( XPS ), MINVAL ( XZS ) CALL ABOR1_SFX ( 'OL_TIME_INTERP_ATM: UNDEFINED VALUE IN ATMOSPHERIC FORCING' ) ENDIF ! IF ( MINVAL ( XDIR_SW ). EQ . XUNDEF ) XDIR_SW (:,:) = 0. ! No direct solar radiation IF ( MINVAL ( XSCA_SW ). EQ . XUNDEF ) XSCA_SW (:,:) = 0. ! No diffuse solar radiation IF ( MINVAL ( XPS ) . EQ . XUNDEF ) THEN ! No surface Pressure WRITE ( ILUOUT , * ) ' OL_TIME_INTERP_ATM: SURFACE PRESSURE COMPUTED FROM ZS' XPS (:) = 101325 * ( 1 - 0.0065 * XZS (:) / 28 8.15 ) ** 5.31 ENDIF ! !* forcing level pressure from hydrostatism WHERE ( XPS (:) /= XUNDEF ) XPA (:) = XPS (:) - XRHOA (:) * XZREF (:) * XG ENDWHERE ! IF ( LHOOK ) CALL DR_HOOK ( 'OL_TIME_INTERP_ATM_3' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE OL_TIME_INTERP_ATM","tags":"","loc":"proc/ol_time_interp_atm.html"},{"title":"CLOSE_FILE – Town Energy Balance (TEB) model API docs","text":"subroutine CLOSE_FILE(HPROGRAM, KUNIT) Uses YOMHOOK MODI_CLOSE_FILE_ASC MODI_CLOSE_FILE_LFI MODI_CLOSE_FILE_OL PARKIND1 MODI_CLOSE_FILE_MNH MODI_CLOSE_FILE_FA Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HPROGRAM integer, intent(in) :: KUNIT Contents Source Code CLOSE_FILE Source Code SUBROUTINE CLOSE_FILE ( HPROGRAM , KUNIT ) !     ####################################################### ! !!****  *CLOSE_FILE* - generic routine to close a file !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    01/2004 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! #if defined(SFX_ASC) || defined(SFX_ARO) || defined(SFX_MNH) || defined(SFX_NC) USE MODI_CLOSE_FILE_ASC #endif #ifdef SFX_FA USE MODI_CLOSE_FILE_FA #endif #ifdef SFX_OL USE MODI_CLOSE_FILE_OL #endif #ifdef SFX_LFI USE MODI_CLOSE_FILE_LFI #endif ! #ifdef SFX_MNH USE MODI_CLOSE_FILE_MNH #endif ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HPROGRAM ! main program INTEGER , INTENT ( IN ) :: KUNIT ! logical unit of file REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*       0.2   Declarations of local variables !              ------------------------------- ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'CLOSE_FILE' , 0 , ZHOOK_HANDLE ) IF ( HPROGRAM == 'MESONH' ) THEN #ifdef SFX_MNH CALL CLOSE_FILE_MNH ( HPROGRAM , KUNIT ) #endif ELSE IF ( HPROGRAM == 'OFFLIN' ) THEN #ifdef SFX_OL CALL CLOSE_FILE_OL ( HPROGRAM , KUNIT ) #endif ELSE IF ( HPROGRAM == 'FA    ' ) THEN #ifdef SFX_FA CALL CLOSE_FILE_FA ( HPROGRAM , KUNIT ) #endif ELSE IF ( HPROGRAM == 'LFI   ' ) THEN #ifdef SFX_LFI CALL CLOSE_FILE_LFI ( HPROGRAM , KUNIT ) #endif ELSE CALL CLOSE_FILE_ASC ( HPROGRAM , KUNIT ) END IF IF ( LHOOK ) CALL DR_HOOK ( 'CLOSE_FILE' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE CLOSE_FILE","tags":"","loc":"proc/close_file.html"},{"title":"ADD_FORECAST_TO_DATE_SURF – Town Energy Balance (TEB) model API docs","text":"subroutine ADD_FORECAST_TO_DATE_SURF(KYEAR, KMONTH, KDAY, PSEC) Uses PARKIND1 YOMHOOK Arguments Type Intent Optional Attributes Name integer, intent(inout) :: KYEAR integer, intent(inout) :: KMONTH integer, intent(inout) :: KDAY real, intent(inout) :: PSEC Contents Source Code ADD_FORECAST_TO_DATE_SURF Source Code SUBROUTINE ADD_FORECAST_TO_DATE_SURF ( KYEAR , KMONTH , KDAY , PSEC ) !     ####################################################### ! !!****  *ADD_FORECAST_TO_DATE* - finds the current date and hour of a forecast !! !!    PURPOSE !!    ------- !! !!                                WARNING !! !!      -----> Only correct for dates between 19900301 and 21000228   <----- !! !!  The correct test should be: !! IF( ((MOD(KYEAR,4)==0).AND.(MOD(KYEAR,100)/=0)) .OR. (MOD(KYEAR,400)==0))THEN !! !!**  METHOD !!    ------ !! !!      A recursive method is used, adding one day ofter the other. !! !!    EXTERNAL !!    -------- !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !!    Book 2 !! !!    AUTHOR !!    ------ !! !     V.Masson  Meteo-France !! !!    MODIFICATIONS !!    ------------- !!      Original    01/09/95 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*       0.1   Declaration of arguments !              ------------------------ INTEGER , INTENT ( INOUT ) :: KYEAR ! year of date INTEGER , INTENT ( INOUT ) :: KMONTH ! month of date INTEGER , INTENT ( INOUT ) :: KDAY ! day of date REAL , INTENT ( INOUT ) :: PSEC ! number of seconds since date at 00 UTC ! !*       0.2   Declaration of local variables !              ------------------------------ ! INTEGER :: IDAYS ! number of days in KMONTH REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! !*       1.    Return condition: less than one day to add !              ------------------------------------------ ! IF ( LHOOK ) CALL DR_HOOK ( 'ADD_FORECAST_TO_DATE_SURF' , 0 , ZHOOK_HANDLE ) DO IF ( 8640 0. - PSEC > 1.E-6 ) EXIT ! !------------------------------------------------------------------------------- ! !*       2.    Adding one day !              -------------- ! PSEC = PSEC - 8640 0. ! !*       2.1   Number of days in a month !              ------------------------- ! SELECT CASE ( KMONTH ) CASE ( 4 , 6 , 9 , 11 ) IDAYS = 30 CASE ( 1 , 3 , 5 , 7 : 8 , 10 , 12 ) IDAYS = 31 CASE ( 2 ) IF ( (( MOD ( KYEAR , 4 ) == 0 ). AND .( MOD ( KYEAR , 100 ) /= 0 )) . OR . ( MOD ( KYEAR , 400 ) == 0 )) THEN IDAYS = 29 ELSE IDAYS = 28 ENDIF END SELECT ! !*       2.2   Last day of the month !              --------------------- ! IF ( KDAY == IDAYS ) THEN IF ( KMONTH == 12 ) THEN KDAY = 1 KMONTH = 1 KYEAR = KYEAR + 1 ELSE KDAY = 1 KMONTH = KMONTH + 1 ENDIF ! !*       2.3   Other days !              ---------- ELSE KDAY = KDAY + 1 ENDIF ! !------------------------------------------------------------------------------- ! !*       3.    Recursive call !              -------------- ! ENDDO IF ( LHOOK ) CALL DR_HOOK ( 'ADD_FORECAST_TO_DATE_SURF' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE ADD_FORECAST_TO_DATE_SURF","tags":"","loc":"proc/add_forecast_to_date_surf.html"},{"title":"READ_SURF_ATM – Town Energy Balance (TEB) model API docs","text":"subroutine READ_SURF_ATM(HPROGRAM, PFIELD, KFORC_STEP, KNB, KINIT) Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HPROGRAM real, intent(inout), DIMENSION(:,:) :: PFIELD integer, intent(in) :: KFORC_STEP integer, intent(in) :: KNB integer, intent(in) :: KINIT Contents Source Code READ_SURF_ATM Source Code SUBROUTINE READ_SURF_ATM ( HPROGRAM , PFIELD , & KFORC_STEP , KNB , KINIT ) !************************************************************************** IMPLICIT NONE ! ! global variables INTEGER , INTENT ( IN ) :: KFORC_STEP INTEGER , INTENT ( IN ) :: KNB INTEGER , INTENT ( IN ) :: KINIT CHARACTER ( LEN = 6 ) , INTENT ( IN ) :: HPROGRAM REAL , DIMENSION (:,:), INTENT ( OUT ) :: PFIELD END SUBROUTINE READ_SURF_ATM","tags":"","loc":"proc/read_surf_atm.html"},{"title":"SUNPOS – Town Energy Balance (TEB) model API docs","text":"subroutine SUNPOS(KYEAR, KMONTH, KDAY, PTIME, PLON, PLAT, PTSUN, PZENITH, PAZIMSOL) Uses MODD_CSTS Arguments Type Intent Optional Attributes Name integer, intent(in) :: KYEAR integer, intent(in) :: KMONTH integer, intent(in) :: KDAY real, intent(in) :: PTIME real, intent(in), DIMENSION(:) :: PLON real, intent(in), DIMENSION(:) :: PLAT real, intent(out), DIMENSION(:) :: PTSUN real, intent(out), DIMENSION(:) :: PZENITH real, intent(out), DIMENSION(:) :: PAZIMSOL Contents Source Code SUNPOS Source Code SUBROUTINE SUNPOS ( KYEAR , KMONTH , KDAY , PTIME , PLON , PLAT , PTSUN , PZENITH , PAZIMSOL ) ! INTEGER , INTENT ( IN ) :: KYEAR ! current year INTEGER , INTENT ( IN ) :: KMONTH ! current month INTEGER , INTENT ( IN ) :: KDAY ! current day REAL , INTENT ( IN ) :: PTIME ! current time REAL , DIMENSION (:), INTENT ( IN ) :: PLON ! longitude REAL , DIMENSION (:), INTENT ( IN ) :: PLAT ! latitude REAL , DIMENSION (:), INTENT ( OUT ) :: PZENITH ! Solar zenithal angle REAL , DIMENSION (:), INTENT ( OUT ) :: PAZIMSOL ! Solar azimuthal angle REAL , DIMENSION (:), INTENT ( OUT ) :: PTSUN ! Solar time ! END SUBROUTINE SUNPOS","tags":"","loc":"proc/sunpos.html"},{"title":"CIRCUMSOLAR_RAD – Town Energy Balance (TEB) model API docs","text":"subroutine CIRCUMSOLAR_RAD(PDIR_SW, PSCA_SW, PZENITH, PF1_o_B) Uses MODD_CSTS PARKIND1 YOMHOOK Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PDIR_SW real, intent(in), DIMENSION(:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PZENITH real, intent(out), DIMENSION(:) :: PF1_o_B Contents Source Code CIRCUMSOLAR_RAD Source Code SUBROUTINE CIRCUMSOLAR_RAD ( PDIR_SW , PSCA_SW , PZENITH , PF1_o_B ) REAL , DIMENSION (:), INTENT ( IN ) :: PDIR_SW ! direct radiation REAL , DIMENSION (:), INTENT ( IN ) :: PSCA_SW ! scattered radiation REAL , DIMENSION (:), INTENT ( IN ) :: PZENITH ! solar zenith angle REAL , DIMENSION (:), INTENT ( OUT ) :: PF1_o_B ! coef END SUBROUTINE CIRCUMSOLAR_RAD","tags":"","loc":"proc/circumsolar_rad.html"},{"title":"TEB_IRRIG – Town Energy Balance (TEB) model API docs","text":"subroutine TEB_IRRIG(OIRRIG, PTSTEP, KMONTH, PSOLAR_TIME, PSTART_MONTH, PEND_MONTH, PSTART_HOUR, PEND_HOUR, P24H_IRRIG, PIRRIG) Uses PARKIND1 YOMHOOK Arguments Type Intent Optional Attributes Name logical, intent(in) :: OIRRIG real, intent(in) :: PTSTEP integer, intent(in) :: KMONTH real, intent(in), DIMENSION(:) :: PSOLAR_TIME real, intent(in), DIMENSION(:) :: PSTART_MONTH real, intent(in), DIMENSION(:) :: PEND_MONTH real, intent(in), DIMENSION(:) :: PSTART_HOUR real, intent(in), DIMENSION(:) :: PEND_HOUR real, intent(in), DIMENSION(:) :: P24H_IRRIG real, intent(out), DIMENSION(:) :: PIRRIG Contents Source Code TEB_IRRIG Source Code SUBROUTINE TEB_IRRIG ( OIRRIG , PTSTEP , KMONTH , PSOLAR_TIME , & PSTART_MONTH , PEND_MONTH , PSTART_HOUR , PEND_HOUR ,& P24H_IRRIG , PIRRIG ) !   ########################################################################## ! !!****  *TEB_IRRIG* !! !!    PURPOSE !!    ------- ! ! Computes the amount of water for irrigation ! ! !!**  METHOD !     ------ ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      C. DeMunck & V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    05/2013 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! ! LOGICAL , INTENT ( IN ) :: OIRRIG ! Flag for irrigation or not REAL , INTENT ( IN ) :: PTSTEP ! time step INTEGER , INTENT ( IN ) :: KMONTH ! Present Month REAL , DIMENSION (:), INTENT ( IN ) :: PSOLAR_TIME ! solar time (s since midnight) REAL , DIMENSION (:), INTENT ( IN ) :: PSTART_MONTH ! First month for irrigation (included) REAL , DIMENSION (:), INTENT ( IN ) :: PEND_MONTH ! Last  month for irrigation (included) REAL , DIMENSION (:), INTENT ( IN ) :: PSTART_HOUR ! First month for irrigation (included) REAL , DIMENSION (:), INTENT ( IN ) :: PEND_HOUR ! Last  month for irrigation (ecluded) REAL , DIMENSION (:), INTENT ( IN ) :: P24H_IRRIG ! 24h total irrigation REAL , DIMENSION (:), INTENT ( OUT ) :: PIRRIG ! present irrigation ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*      0.2    declarations of local variables ! LOGICAL , DIMENSION ( SIZE ( PIRRIG )) :: GMONTH !if irrigation occurs during present month LOGICAL , DIMENSION ( SIZE ( PIRRIG )) :: GHOUR !if irrigation occurs at     present time REAL , DIMENSION ( SIZE ( PIRRIG )) :: ZDURATION ! duration of irrigation per day (s) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'TEB_IRRIG' , 0 , ZHOOK_HANDLE ) ! !*      1.     Default !              ------- ! PIRRIG = 0. ! IF (. NOT . OIRRIG ) THEN IF ( LHOOK ) CALL DR_HOOK ( 'TEB_IRRIG' , 1 , ZHOOK_HANDLE ) RETURN END IF ! !------------------------------------------------------------------------------- ! !*      2.     Is present month irrigated ? !              ---------------------------- ! WHERE ( PSTART_MONTH <= PEND_MONTH ) ! for summer in North hemisphere GMONTH = KMONTH >= PSTART_MONTH . AND . KMONTH <= PEND_MONTH ELSEWHERE ! for summer in South hemisphere ! change of year during irrigation period GMONTH = KMONTH >= PSTART_MONTH . OR . KMONTH <= PEND_MONTH END WHERE ! !------------------------------------------------------------------------------- ! !*      3.     Is present time irrigated (for each location) ? !              ----------------------------------------------- ! GHOUR = . FALSE . ZDURATION = 0. ! WHERE ( PSTART_HOUR <= PEND_HOUR ) ! typically irrigation during day GHOUR = PSOLAR_TIME + PTSTEP >= PSTART_HOUR * 360 0. . AND . PSOLAR_TIME <= PEND_HOUR * 360 0. ZDURATION = 360 0. * ( PEND_HOUR - PSTART_HOUR ) ELSE WHERE ! typically irrigation during night ! midnight is during irrigation period GHOUR = PSOLAR_TIME + PTSTEP >= PSTART_HOUR * 360 0. . OR . PSOLAR_TIME < PEND_HOUR * 360 0. ZDURATION = 360 0. * ( PEND_HOUR + 2 4. - PSTART_HOUR ) END WHERE ! !------------------------------------------------------------------------------- ! !*      4.     Computes irrigation !              ------------------- ! !* if duration is very short, all water is irrigated during the timestep ZDURATION = MAX ( ZDURATION , PTSTEP ) ! !* Concentration of the total 24h irrigation during the period of irrigation WHERE ( GMONTH (:) . AND . GHOUR (:)) PIRRIG (:) = P24H_IRRIG (:) / ZDURATION (:) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'TEB_IRRIG' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE TEB_IRRIG","tags":"","loc":"proc/teb_irrig.html"},{"title":"LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"subroutine LAYER_E_BUDGET(PT, PTSTEP, PIMPL, PHC, PTC, PD, PA, PB, PC, PY, PDQS) Uses PARKIND1 YOMHOOK MODI_TRIDIAG_GROUND Arguments Type Intent Optional Attributes Name real, intent(inout), DIMENSION(:,:) :: PT real, intent(in) :: PTSTEP real, intent(in) :: PIMPL real, intent(in), DIMENSION(:,:) :: PHC real, intent(in), DIMENSION(:,:) :: PTC real, intent(in), DIMENSION(:,:) :: PD real, intent(in), DIMENSION(:,:) :: PA real, intent(in), DIMENSION(:,:) :: PB real, intent(in), DIMENSION(:,:) :: PC real, intent(in), DIMENSION(:,:) :: PY real, intent(out), DIMENSION(:) :: PDQS Contents Source Code LAYER_E_BUDGET Source Code SUBROUTINE LAYER_E_BUDGET ( PT , PTSTEP , PIMPL , PHC , PTC , PD , PA , PB , PC , PY , PDQS ) !   ########################################################################## ! !!****  *FLOOR_LAYER_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of building floor temperatures ! ! !!**  METHOD !     ------ ! !    6 : equations for evolution of Ts_floor !        ************************************************************* ! !     dTf_k(t) / dt = 1/(df_k*Cf_k) * (- 2*Kf_k-1*(Tf_k-Tf_k-1)/(df_k-1 +df_k) !                                      - 2*Kf_k  *(Tf_k-Tf_k+1)/(df_k+1 +df_k) ) ! !     dTf_1(t) / dt = 1/(df_1*Cf_1) * (- 2*Kw_1*(Tw_1-Tw_2)/(dw_1 +dw_2)) ! !       with ! !   K*_k  = (d*_k+ d*_k+1)/(d*_k/k*_k+ d*_k+1/k*_k+1) ! ! ! The system is implicited (or semi-implicited). ! ! ZIMPL=1    ---> implicit system ! ZIMPL=0.5  ---> semi-implicit system ! ZIMPL=0    ---> explicit system ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      G. Pigeon           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    15/04/09 !!                     08/10 (G. Pigeon) computation of residual of energy balance !!                                       modification of the limit condition for !!                                       the deep temp. from the deep road temp. !!                                       to zero flux condition. idem for sfce T !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODI_TRIDIAG_GROUND ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT ! floor layers temperatures REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC ! heat capacity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC ! thermal conductivity for !road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PD ! depth of road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PA REAL , DIMENSION (:,:), INTENT ( IN ) :: PB REAL , DIMENSION (:,:), INTENT ( IN ) :: PC REAL , DIMENSION (:,:), INTENT ( IN ) :: PY REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS REAL , INTENT ( IN ) :: PIMPL ! implicitation coefficient ! !*      0.2    declarations of local variables ! ! REAL :: ZIMPL ! implicit coefficient REAL :: ZEXPL ! explicit coefficient ! REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: ZX ! solution ! REAL , DIMENSION ( SIZE ( PT , 1 )) :: ZEI ! internal energy of floor at t REAL , DIMENSION ( SIZE ( PT , 1 )) :: ZPEI ! internal energy of floor at time t+ ! INTEGER :: ILAYER ! number of floor layers INTEGER :: JLAYER ! loop counter INTEGER :: JJ ! loop counter REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'LAYER_E_BUDGET' , 0 , ZHOOK_HANDLE ) ! ILAYER = SIZE ( PT , 2 ) ! ZIMPL = PIMPL ZEXPL = 1. - PIMPL ! !------------------------------------------------------------------------------- ! !*      1.    Preliminaries : internal energy of floor at the current time step !             ----------------------------------------------------------------- ! ZEI (:) = 0. DO JLAYER = 1 , ILAYER DO JJ = 1 , SIZE ( PT , 1 ) ZEI ( JJ ) = ZEI ( JJ ) + ( PHC ( JJ , JLAYER ) * PD ( JJ , JLAYER ) * PT ( JJ , JLAYER ) ) ENDDO END DO ! !------------------------------------------------------------------------------- ! !*     2.     Tri-diagonal system resolution !              ------------------------------ ! CALL TRIDIAG_GROUND ( PA , PB , PC , PY , ZX ) ! DO JLAYER = 1 , ILAYER PT (:, JLAYER ) = ZX (:, JLAYER ) END DO ! !*      3.     heat storage inside floor and flux toward the floor !              --------------------------------------------------- ! !       3.1    internal energy of the floor at the next time step !              -------------------------------------------------- ! ZPEI (:) = 0.0 DO JLAYER = 1 , ILAYER DO JJ = 1 , SIZE ( PT , 1 ) ZPEI ( JJ ) = ZPEI ( JJ ) + ( PHC ( JJ , JLAYER ) * PD ( JJ , JLAYER ) * PT ( JJ , JLAYER ) ) ENDDO END DO ! !        3.2   heat storage flux inside floor !              ------------------------------ ! PDQS (:) = ( ZPEI (:) - ZEI (:)) / PTSTEP ! IF ( LHOOK ) CALL DR_HOOK ( 'LAYER_E_BUDGET' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- END SUBROUTINE LAYER_E_BUDGET","tags":"","loc":"proc/layer_e_budget.html"},{"title":"ISBA_SNOW_FRAC – Town Energy Balance (TEB) model API docs","text":"subroutine ISBA_SNOW_FRAC(HSNOW, PWSNOW, PRSNOW, PASNOW, PVEG, PLAI, PZ0, PPSN, PPSNV_A, PPSNG, PPSNV) Uses MODD_PREP_SNOW YOMHOOK MODE_SURF_SNOW_FRAC MODD_SNOW_PAR PARKIND1 Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: HSNOW real, intent(in), DIMENSION(:,:) :: PWSNOW real, intent(in), DIMENSION(:,:) :: PRSNOW real, intent(in), DIMENSION(:) :: PASNOW real, intent(in), DIMENSION(:) :: PVEG real, intent(in), DIMENSION(:) :: PLAI real, intent(in), DIMENSION(:) :: PZ0 real, intent(inout), DIMENSION(:) :: PPSN real, intent(inout), DIMENSION(:) :: PPSNV_A real, intent(inout), DIMENSION(:) :: PPSNG real, intent(inout), DIMENSION(:) :: PPSNV Contents Source Code ISBA_SNOW_FRAC Source Code SUBROUTINE ISBA_SNOW_FRAC ( HSNOW , PWSNOW , PRSNOW , PASNOW , & PVEG , PLAI , PZ0 , PPSN , PPSNV_A , PPSNG , PPSNV ) !     ########################################################################## ! !!****  *ISBA_SNOW_FRAC* !! !!    PURPOSE !!    ------- ! !     Calculates grid-averaged albedo and emissivity (according to snow scheme) ! !!    EXTERNAL !!    -------- !! !!    none !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    AUTHOR !!    ------ !! !!      S. Belair           * Meteo-France * !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_SNOW_PAR , ONLY : XEMISSN , XEMCRIN , XSNOWDMIN , & XRHOSMAX_ES , XRHOSMIN_ES , & XWCRN_EXPL , XDCRN_EXPL ! USE MODD_PREP_SNOW , ONLY : LSNOW_FRAC_TOT ! USE MODE_SURF_SNOW_FRAC ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! CHARACTER ( LEN =* ) , INTENT ( IN ) :: HSNOW ! ISBA snow scheme ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PWSNOW ! snow reservoir REAL , DIMENSION (:,:), INTENT ( IN ) :: PRSNOW ! snow density REAL , DIMENSION (:) , INTENT ( IN ) :: PASNOW ! snow albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PVEG REAL , DIMENSION (:) , INTENT ( IN ) :: PLAI REAL , DIMENSION (:) , INTENT ( IN ) :: PZ0 REAL , DIMENSION (:) , INTENT ( INOUT ) :: PPSN REAL , DIMENSION (:) , INTENT ( INOUT ) :: PPSNV_A REAL , DIMENSION (:) , INTENT ( INOUT ) :: PPSNG REAL , DIMENSION (:) , INTENT ( INOUT ) :: PPSNV !                                     PVEG = fraction of vegetation !                                     PLAI = leaf area index !                                     PZ0  = roughness length for momentum !                                     PPSN = grid fraction covered by snow !                                     PPSNG = fraction of the ground covered by snow !                                     PPSNV = fraction of the veg covered by snow ! !------------------------------------------------------------------------------- ! !*      0.     Local variables !              --------------- ! INTEGER :: JLAYER REAL , DIMENSION ( SIZE ( PVEG )) :: ZSNOWSWE REAL , DIMENSION ( SIZE ( PVEG )) :: ZSNOWD REAL , DIMENSION ( SIZE ( PVEG )) :: ZSNOWRHO REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'ISBA_SNOW_FRAC' , 0 , ZHOOK_HANDLE ) ! !*      1.     Compute Total SWE (kg m-2) and snowpack average density (kg m-3) !              ---------------------------------------------------------------- ! ZSNOWSWE (:) = 0. ! DO JLAYER = 1 , SIZE ( PWSNOW , 2 ) ZSNOWSWE (:) = ZSNOWSWE (:) + PWSNOW (:, JLAYER ) END DO ! IF ( HSNOW == '3-L' . OR . HSNOW == 'CRO' ) THEN ZSNOWD (:) = 0. DO JLAYER = 1 , SIZE ( PWSNOW , 2 ) ZSNOWD (:) = ZSNOWD (:) + PWSNOW (:, JLAYER ) / PRSNOW (:, JLAYER ) END DO ZSNOWRHO (:) = ZSNOWSWE (:) / MAX ( XSNOWDMIN , ZSNOWD (:)) ZSNOWRHO (:) = MAX ( XRHOSMIN_ES , MIN ( XRHOSMAX_ES , ZSNOWRHO (:))) ELSE ZSNOWRHO (:) = PRSNOW (:, 1 ) END IF ! !*      2.     Snow fraction over ground !              ------------------------- ! IF ( HSNOW == 'CRO' . OR . HSNOW == '3-L' ) THEN PPSNG (:) = MIN ( 1.0 , ZSNOWD (:) / XDCRN_EXPL ) ELSE PPSNG (:) = SNOW_FRAC_GROUND ( ZSNOWSWE ) ENDIF ! !*      3.     Snow fraction over vegetation !              ----------------------------- ! IF ( HSNOW == 'EBA' ) THEN PPSNV_A (:) = SNOW_FRAC_VEG_A ( PPSNG , PLAI , PASNOW ) PPSNV (:) = PPSNV_A (:) ELSE PPSNV (:) = SNOW_FRAC_VEG ( PPSNG , ZSNOWSWE , PZ0 , ZSNOWRHO ) ENDIF ! !*      4.     Total snow fraction !              ------------------- ! PPSN (:) = SNOW_FRAC_NAT ( ZSNOWSWE , PPSNG , PPSNV , PVEG ) ! IF ( LSNOW_FRAC_TOT ) THEN PPSN (:) = MIN ( 1.0 , ZSNOWSWE (:) / XWCRN_EXPL ) PPSNG (:) = PPSN (:) PPSNV (:) = PPSN (:) ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( 'ISBA_SNOW_FRAC' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE ISBA_SNOW_FRAC","tags":"","loc":"proc/isba_snow_frac.html"},{"title":"FLAG_TEB_VEG_n – Town Energy Balance (TEB) model API docs","text":"subroutine FLAG_TEB_VEG_n(PEK, IO, PMASK, KFLAG) Uses YOMHOOK PARKIND1 MODD_SURF_PAR MODD_ISBA_OPTIONS_n MODD_CO2V_PAR MODI_FLAG_GR_SNOW MODD_ISBA_n Arguments Type Intent Optional Attributes Name type(ISBA_PE_t), intent(inout) :: PEK type(ISBA_OPTIONS_t), intent(inout) :: IO real, intent(in), DIMENSION(:) :: PMASK integer, intent(in) :: KFLAG Contents Source Code FLAG_TEB_VEG_n Source Code SUBROUTINE FLAG_TEB_VEG_n ( PEK , IO , PMASK , KFLAG ) !     ################################## ! !!****  *FLAG_TEB_VEG_n* - routine to flag ISBA variables where gardens are !!                            not present !! !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    10/2011 !! !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! ! ! USE MODD_ISBA_n , ONLY : ISBA_PE_t USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t ! USE MODD_CO2V_PAR , ONLY : XANFMINIT , XCONDCTMIN ! USE MODD_SURF_PAR , ONLY : XUNDEF ! USE MODI_FLAG_GR_SNOW ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! ! TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: IO REAL , DIMENSION (:), INTENT ( IN ) :: PMASK ! INTEGER , INTENT ( IN ) :: KFLAG ! 1 : to put physical values to run ISBA afterwards !                            ! 2 : to flag with XUNDEF value for points wihtout garden ! !*       0.2   Declarations of local variables !              ------------------------------- ! REAL :: ZWR , ZTG , ZWG , ZRESA , ZANFM , ZDEF INTEGER :: JL1 , JL2 ! loop counter on layers REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !------------------------------------------------------------------------------- ! ! !* 1D physical dimension ! IF ( LHOOK ) CALL DR_HOOK ( 'FLAG_TEB_VEG_N' , 0 , ZHOOK_HANDLE ) ! ZWR = XUNDEF ! IF ( KFLAG == 1 ) THEN ZTG = 30 0. ZWG = 0.5 ZRESA = 10 0. ZANFM = XANFMINIT ZDEF = 0. ELSEIF ( KFLAG == 2 ) THEN ZTG = XUNDEF ZWG = XUNDEF ZRESA = XUNDEF ZANFM = XUNDEF ZDEF = XUNDEF ENDIF ! !------------------------------------------------------------------------------- ! ! DO JL1 = 1 , IO % NGROUND_LAYER WHERE ( PMASK (:) == 0. ) PEK % XTG (:, JL1 ) = ZTG PEK % XWG (:, JL1 ) = ZWG PEK % XWGI (:, JL1 ) = ZDEF END WHERE END DO ! WHERE ( PMASK (:) == 0. ) PEK % XWR (:) = ZWR PEK % XRESA (:) = ZRESA END WHERE ! IF ( IO % CPHOTO /= 'NON' ) THEN ! WHERE ( PMASK (:) == 0. ) PEK % XANFM (:) = ZANFM PEK % XAN (:) = ZDEF PEK % XANDAY (:) = ZDEF PEK % XLE (:) = ZDEF END WHERE ! IF ( IO % CPHOTO == 'NIT' . OR . IO % CPHOTO == 'NCB' ) THEN ! WHERE ( PMASK (:) == 0. ) PEK % XLAI (:) = ZDEF ! ELSE IF ( IO % CPHOTO == 'AST' ) THEN ! DO JL1 = 1 , SIZE ( PEK % XBIOMASS , 2 ) WHERE ( PMASK (:) == 0. ) PEK % XBIOMASS (:, JL1 ) = ZDEF PEK % XRESP_BIOMASS (:, JL1 ) = ZDEF END WHERE END DO ! END IF ! ENDIF ! ! !------------------------------------------------------------------------------- ! !* Flag snow characteristics ! CALL FLAG_GR_SNOW ( KFLAG , PMASK (:) == 0. , PEK % TSNOW ) ! ! !* snow-free characteristics ! IF ( KFLAG == 1 ) THEN WHERE ( PMASK (:) == 0. ) PEK % XSNOWFREE_ALB (:) = 0.2 PEK % XSNOWFREE_ALB_VEG (:) = 0.2 PEK % XSNOWFREE_ALB_SOIL (:) = 0.2 END WHERE ELSEIF ( KFLAG == 2 ) THEN WHERE ( PMASK == 0. ) PEK % XSNOWFREE_ALB (:) = XUNDEF PEK % XSNOWFREE_ALB_VEG (:) = XUNDEF PEK % XSNOWFREE_ALB_SOIL (:) = XUNDEF END WHERE END IF ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'FLAG_TEB_VEG_N' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE FLAG_TEB_VEG_n","tags":"","loc":"proc/flag_teb_veg_n.html"},{"title":"ROOF_LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"subroutine ROOF_LAYER_E_BUDGET(TOP, T, B, PQSAT_ROOF, PAC_BLD, PTSTEP, PDN_ROOF, PRHOA, PAC_ROOF, PAC_ROOF_WAT, PLW_RAD, PPS, PDELT_ROOF, PTA, PQA, PEXNA, PEXNS, PABS_SW_ROOF, PGSNOW_ROOF, PFLX_BLD_ROOF, PDQS_ROOF, PABS_LW_ROOF, PHFREE_ROOF, PLEFREE_ROOF, PIMB_ROOF, PG_GREENROOF_ROOF, PRADHT_IN, PTS_FLOOR, PTI_WALL, PRAD_ROOF_WALL, PRAD_ROOF_WIN, PRAD_ROOF_FLOOR, PRAD_ROOF_MASS, PCONV_ROOF_BLD, PRR, PLOAD_IN_ROOF) Uses MODD_BEM_n MODE_THERMOS YOMHOOK MODD_CSTS PARKIND1 MODD_SURF_PAR MODI_LAYER_E_BUDGET MODD_TEB_n MODD_TEB_OPTION_n MODI_LAYER_E_BUDGET_GET_COEF MODE_CONV_DOE Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B real, intent(inout), DIMENSION(:) :: PQSAT_ROOF real, intent(in), DIMENSION(:) :: PAC_BLD real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PDN_ROOF real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PAC_ROOF real, intent(in), DIMENSION(:) :: PAC_ROOF_WAT real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PDELT_ROOF real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PABS_SW_ROOF real, intent(in), DIMENSION(:) :: PGSNOW_ROOF real, intent(out), DIMENSION(:) :: PFLX_BLD_ROOF real, intent(out), DIMENSION(:) :: PDQS_ROOF real, intent(out), DIMENSION(:) :: PABS_LW_ROOF real, intent(out), DIMENSION(:) :: PHFREE_ROOF real, intent(out), DIMENSION(:) :: PLEFREE_ROOF real, intent(out), DIMENSION(:) :: PIMB_ROOF real, intent(in), DIMENSION(:) :: PG_GREENROOF_ROOF real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PTS_FLOOR real, intent(in), DIMENSION(:) :: PTI_WALL real, intent(out), DIMENSION(:) :: PRAD_ROOF_WALL real, intent(out), DIMENSION(:) :: PRAD_ROOF_WIN real, intent(out), DIMENSION(:) :: PRAD_ROOF_FLOOR real, intent(out), DIMENSION(:) :: PRAD_ROOF_MASS real, intent(out), DIMENSION(:) :: PCONV_ROOF_BLD real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PLOAD_IN_ROOF Contents Source Code ROOF_LAYER_E_BUDGET Source Code SUBROUTINE ROOF_LAYER_E_BUDGET ( TOP , T , B , PQSAT_ROOF , PAC_BLD , PTSTEP , PDN_ROOF , & PRHOA , PAC_ROOF , PAC_ROOF_WAT , PLW_RAD , PPS , & PDELT_ROOF , PTA , PQA , PEXNA , PEXNS , PABS_SW_ROOF , & PGSNOW_ROOF , PFLX_BLD_ROOF , PDQS_ROOF , PABS_LW_ROOF ,& PHFREE_ROOF , PLEFREE_ROOF , PIMB_ROOF , & PG_GREENROOF_ROOF , PRADHT_IN , PTS_FLOOR , PTI_WALL , & PRAD_ROOF_WALL , PRAD_ROOF_WIN , PRAD_ROOF_FLOOR , & PRAD_ROOF_MASS , PCONV_ROOF_BLD , PRR , PLOAD_IN_ROOF ) !   ########################################################################## ! !!****  *ROOF_LAYER_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of surface temperature of roofs ! ! !!**  METHOD !     ------ ! ! ! ! !    5 : equation for evolution of Ts_roof !        ********************************* ! !     dTt_1(t) / dt = 1/(dt_1*Ct_1) * (  Rn - H - LE !                                      - 2*Kt_1*(Tt_1-Tt_2)/(dt_1 +dt_2)       ) ! !     dTt_k(t) / dt = 1/(dt_k*Ct_k) * (- 2*Kt_k-1*(Tt_k-Tt_k-1)/(dt_k-1 +dt_k) !                                      - 2*Kt_k  *(Tt_k-Tt_k+1)/(dt_k+1 +dt_k) ) ! !       with ! !       K*_k  = (d*_k+ d*_k+1)/(d*_k/k*_k+ d*_k+1/k*_k+1) ! !       Rn = (dir_Rg + sca_Rg) (1-a) + emis * ( Rat - sigma Ts**4 (t+dt) ) ! !       H  = rho Cp CH V ( Ts (t+dt) - Tas ) ! !       LE = rho Lv CH V ( qs (t+dt) - qas ) ! !      where the as subscript denotes atmospheric values at ground level !      (and not at first half level) ! !      The tridiagonal systel is linearized with ! !       using      Ts**4 (t+dt) = Ts**4 (t) + 4*Ts**3 (t) * ( Ts(t+dt) - Ts(t) ) ! !       and  qs (t+dt) = Hu(t) * qsat(t) + Hu(t) dqsat/dT * ( Ts(t+dt) - Ts(t) ) ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !!                  17/10/05 (G. Pigeon) computation of storage inside the roofs !!                  26/04/12 (G. Pigeon) add term of heating of rain (new arg PRR+XCL) !!                     09/12 (G. Pigeon) modif of indoor conv. coef and implicit calculation !!                     10/12 (G. Pigeon) add indoor solar heat load !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS , ONLY : XCPD , XLVTT , XSTEFAN , XCL ! USE MODE_THERMOS ! USE MODI_LAYER_E_BUDGET USE MODI_LAYER_E_BUDGET_GET_COEF USE MODE_CONV_DOE ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , DIMENSION (:), INTENT ( INOUT ) :: PQSAT_ROOF ! q_sat(Ts) REAL , DIMENSION (:), INTENT ( IN ) :: PAC_BLD ! aerodynamical resistance ! inside building itself REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PDN_ROOF ! roof snow fraction REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density REAL , DIMENSION (:), INTENT ( IN ) :: PAC_ROOF ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( IN ) :: PAC_ROOF_WAT ! aerodynamical conductance (for water) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_ROOF ! fraction of water REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! air temperature at roof level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! air specific humidity ! at roof level REAL , DIMENSION (:), INTENT ( IN ) :: PEXNA ! exner function REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_ROOF ! absorbed solar radiation REAL , DIMENSION (:), INTENT ( IN ) :: PGSNOW_ROOF ! roof snow conduction !                                                   ! heat fluxes at mantel !                                                   ! base REAL , DIMENSION (:), INTENT ( IN ) :: PG_GREENROOF_ROOF ! heat conduction flux !                                                        between greenroof and !                                                        structural roof REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_ROOF ! flux from bld to roof REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_ROOF ! heat storage inside the roofs REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_ROOF ! absorbed infra-red rad. REAL , DIMENSION (:), INTENT ( OUT ) :: PHFREE_ROOF ! sensible heat flux of the ! snow free part of the roof REAL , DIMENSION (:), INTENT ( OUT ) :: PLEFREE_ROOF ! latent heat flux of the ! snow free part of the roof REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_ROOF ! residual energy imbalance ! of the roof for REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PTS_FLOOR ! surf. floor temp. (contact with bld air) REAL , DIMENSION (:), INTENT ( IN ) :: PTI_WALL ! indoor wall temp. REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_ROOF_WALL ! rad. fluxes from roof to wall [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_ROOF_WIN ! rad. fluxes from roof to win [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_ROOF_FLOOR ! rad. fluxes from roof to floor [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_ROOF_MASS ! rad. fluxes from roof to mass [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_ROOF_BLD ! conv. fluxes from roof to bld [W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PRR ! rain rate [kg m-2 s-1] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_IN_ROOF ! solar + int heat gain on roof W/m2 [roof] ! !*      0.2    declarations of local variables ! REAL :: ZIMPL = 1.0 ! implicit coefficient REAL :: ZEXPL = 0.0 ! explicit coefficient ! REAL , DIMENSION ( SIZE ( PTA )) :: ZDF_ROOF ! snow-free fraction REAL , DIMENSION ( SIZE ( PTA ), SIZE ( T % XT_ROOF , 2 )) :: ZA ,& ! lower diag. ZB ,& ! main  diag. ZC ,& ! upper diag. ZY ! r.h.s. ! REAL , DIMENSION ( SIZE ( PTA )) :: ZDQSAT_ROOF ! dq_sat/dTs REAL , DIMENSION ( SIZE ( PTA )) :: ZRHO_ACF_ROOF ! conductance * rho REAL , DIMENSION ( SIZE ( PTA )) :: ZRHO_ACF_ROOF_WAT ! conductance * rho (for water) REAL , DIMENSION ( SIZE ( PTA )) :: ZMTC_O_D_ROOF_IN ! thermal capacity times layer depth REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_ROOF ! roof surface temperature at previous time step REAL , DIMENSION ( SIZE ( PTA )) :: ZTRAD_ROOF ! roof radiative surface temperature at intermediate time step REAL , DIMENSION ( SIZE ( PTA )) :: ZTAER_ROOF ! roof aerodyn. surface temperature at intermediate time step REAL , DIMENSION ( SIZE ( PTA )) :: ZHEAT_RR ! heat used too cool/heat the rain from the roof REAL , DIMENSION ( SIZE ( PTA )) :: ZTI_ROOF ! temperature of internal roof layer used for radiative exchanges REAL , DIMENSION ( SIZE ( PTA )) :: ZTI_ROOF_CONV ! temperature of internal roof layer used for convective exchanges REAL , DIMENSION ( SIZE ( PTA )) :: ZCHTC_IN_ROOF ! Indoor roof convec heat transfer coefficient ! [W K-1 m-2(bld)] ! INTEGER :: JJ INTEGER :: IROOF_LAYER ! number of roof layers INTEGER :: JLAYER ! loop counter REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'ROOF_LAYER_E_BUDGET' , 0 , ZHOOK_HANDLE ) ! PRAD_ROOF_WALL (:) = XUNDEF PRAD_ROOF_WIN (:) = XUNDEF PRAD_ROOF_FLOOR (:) = XUNDEF PRAD_ROOF_MASS (:) = XUNDEF PCONV_ROOF_BLD (:) = XUNDEF ! ! *Convection heat transfer coefficients [W m-2 K-1] from EP Engineering Reference ! IROOF_LAYER = SIZE ( T % XT_ROOF , 2 ) ! ZCHTC_IN_ROOF (:) = CHTC_DOWN_DOE ( T % XT_ROOF (:, IROOF_LAYER ), B % XTI_BLD (:)) DO JJ = 1 , SIZE ( ZCHTC_IN_ROOF ) ZCHTC_IN_ROOF ( JJ ) = MAX ( 1. , ZCHTC_IN_ROOF ( JJ )) ENDDO ! CALL LAYER_E_BUDGET_GET_COEF ( T % XT_ROOF , PTSTEP , ZIMPL , T % XHC_ROOF , T % XTC_ROOF , T % XD_ROOF , & ZA , ZB , ZC , ZY ) ! ! DO JJ = 1 , SIZE ( PDN_ROOF ) ! ZDF_ROOF ( JJ ) = 1. - PDN_ROOF ( JJ ) ! ZTS_ROOF ( JJ ) = T % XT_ROOF ( JJ , 1 ) ZTI_ROOF ( JJ ) = T % XT_ROOF ( JJ , IROOF_LAYER ) ! !*      2.     Roof Ts coefficients !              -------------------- ! ZRHO_ACF_ROOF ( JJ ) = PRHOA ( JJ ) * PAC_ROOF ( JJ ) ZRHO_ACF_ROOF_WAT ( JJ ) = PRHOA ( JJ ) * PAC_ROOF_WAT ( JJ ) ! IF ( TOP % CBEM . EQ . 'DEF' ) THEN ZMTC_O_D_ROOF_IN ( JJ ) = 2. * T % XTC_ROOF ( JJ , IROOF_LAYER ) / T % XD_ROOF ( JJ , IROOF_LAYER ) ZMTC_O_D_ROOF_IN ( JJ ) = 1. / ( 1. / ZMTC_O_D_ROOF_IN ( JJ ) + 1. / ( XCPD * PRHOA ( JJ ) * PAC_BLD ( JJ )) ) ENDIF ! ENDDO ! !*      2.1    dqsat/dTs, and humidity for roofs !              --------------------------------- ! ZDQSAT_ROOF (:) = DQSAT ( ZTS_ROOF (:), PPS (:), PQSAT_ROOF (:)) ! !*      2.2    coefficients !              ------------ ! DO JJ = 1 , SIZE ( T % XT_ROOF , 1 ) ! ZB ( JJ , 1 ) = ZB ( JJ , 1 ) + ZDF_ROOF ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * ( & ZIMPL * ( XCPD / PEXNS ( JJ ) * ZRHO_ACF_ROOF ( JJ ) & + XLVTT * ZRHO_ACF_ROOF_WAT ( JJ ) * PDELT_ROOF ( JJ ) * ZDQSAT_ROOF ( JJ ) & + XSTEFAN * T % XEMIS_ROOF ( JJ ) * 4. * ZTS_ROOF ( JJ ) ** 3 & + PRR ( JJ ) * XCL )) !! heating/cooling of rain ! ZY ( JJ , 1 ) = ZY ( JJ , 1 ) + ( 1. - T % XGREENROOF ( JJ )) & * ( PDN_ROOF ( JJ ) * PGSNOW_ROOF ( JJ ) + ZDF_ROOF ( JJ ) * ( PABS_SW_ROOF ( JJ ) & + XCPD * ZRHO_ACF_ROOF ( JJ ) * ( PTA ( JJ ) / PEXNA ( JJ ) - ZEXPL * ZTS_ROOF ( JJ ) / PEXNS ( JJ )) & + T % XEMIS_ROOF ( JJ ) * PLW_RAD ( JJ ) & + XLVTT * ZRHO_ACF_ROOF_WAT ( JJ ) * PDELT_ROOF ( JJ ) & * ( PQA ( JJ ) - PQSAT_ROOF ( JJ ) + ZIMPL * ZDQSAT_ROOF ( JJ ) * ZTS_ROOF ( JJ ) ) & + XSTEFAN * T % XEMIS_ROOF ( JJ ) * ZTS_ROOF ( JJ ) ** 4 * ( 3. * ZIMPL - ZEXPL ) & + PRR ( JJ ) * XCL * ( PTA ( JJ ) - ZEXPL * ZTS_ROOF ( JJ )) ) ) & !! heating/cooling of rain + T % XGREENROOF ( JJ ) * PG_GREENROOF_ROOF ( JJ ) ! IF ( TOP % CBEM == \"DEF\" ) THEN ! ZB ( JJ , IROOF_LAYER ) = ZB ( JJ , IROOF_LAYER ) + ZIMPL * ZMTC_O_D_ROOF_IN ( JJ ) ! ZY ( JJ , IROOF_LAYER ) = ZY ( JJ , IROOF_LAYER ) & + ZMTC_O_D_ROOF_IN ( JJ ) * B % XTI_BLD ( JJ ) & - ZEXPL * ZMTC_O_D_ROOF_IN ( JJ ) * T % XT_ROOF ( JJ , IROOF_LAYER ) ! ELSEIF ( TOP % CBEM == \"BEM\" ) THEN ! ZB ( JJ , IROOF_LAYER ) = ZB ( JJ , IROOF_LAYER ) + ZIMPL * & ( ZCHTC_IN_ROOF ( JJ ) * 4. / 3. + PRADHT_IN ( JJ ) * & ( B % XF_FLOOR_MASS ( JJ ) + B % XF_FLOOR_WIN ( JJ ) + & B % XF_FLOOR_WALL ( JJ ) + B % XF_FLOOR_ROOF ( JJ ) )) ZY ( JJ , IROOF_LAYER ) = ZY ( JJ , IROOF_LAYER ) + & ZCHTC_IN_ROOF ( JJ ) * ( B % XTI_BLD ( JJ ) - 1. / 3. * T % XT_ROOF ( JJ , IROOF_LAYER ) * ( 4 * ZEXPL - 1. )) + & PRADHT_IN ( JJ ) * ( & B % XF_FLOOR_MASS ( JJ ) * ( B % XT_MASS ( JJ , 1 ) - ZEXPL * T % XT_ROOF ( JJ , IROOF_LAYER )) + & B % XF_FLOOR_WIN ( JJ ) * ( B % XT_WIN2 ( JJ ) - ZEXPL * T % XT_ROOF ( JJ , IROOF_LAYER )) + & B % XF_FLOOR_WALL ( JJ ) * ( PTI_WALL ( JJ ) - ZEXPL * T % XT_ROOF ( JJ , IROOF_LAYER )) + & B % XF_FLOOR_ROOF ( JJ ) * ( PTS_FLOOR ( JJ ) - ZEXPL * T % XT_ROOF ( JJ , IROOF_LAYER ))) + & PLOAD_IN_ROOF ( JJ ) ! ENDIF ! ENDDO ! ! CALL LAYER_E_BUDGET ( T % XT_ROOF , PTSTEP , ZIMPL , T % XHC_ROOF , T % XTC_ROOF , T % XD_ROOF , & ZA , ZB , ZC , ZY , PDQS_ROOF ) ! !------------------------------------------------------------------------------- ! !*     diagnostic: computation of flux between bld and internal roof layernfra-red radiation absorbed by roofs !              ------------------------------------- ! !* radiative surface temperature at intermediate time step ZTRAD_ROOF ( JJ ) = ( ZTS_ROOF ( JJ ) ** 4 + & 4. * ZIMPL * ZTS_ROOF ( JJ ) ** 3 * ( T % XT_ROOF ( JJ , 1 ) - ZTS_ROOF ( JJ )) ) ** 0.25 ! !* absorbed LW PABS_LW_ROOF ( JJ ) = T % XEMIS_ROOF ( JJ ) * ( PLW_RAD ( JJ ) - XSTEFAN * ZTRAD_ROOF ( JJ ) ** 4 ) ! !*      9.     Sensible heat flux between snow free roof and air !              ------------------------------------------------- ! !* aerodynamic surface temperature at the intermediate time step ZTAER_ROOF ( JJ ) = ZEXPL * ZTS_ROOF ( JJ ) + ZIMPL * T % XT_ROOF ( JJ , 1 ) PHFREE_ROOF ( JJ ) = ZRHO_ACF_ROOF ( JJ ) * XCPD * & ( ZTAER_ROOF ( JJ ) / PEXNS ( JJ ) - PTA ( JJ ) / PEXNA ( JJ ) ) ! ZHEAT_RR ( JJ ) = PRR ( JJ ) * XCL * ( ZTAER_ROOF ( JJ ) - PTA ( JJ )) ! !*      10.     Latent heat flux between snow free roof and air !              ------------------------------------------------- ! PLEFREE_ROOF ( JJ ) = ZRHO_ACF_ROOF_WAT ( JJ ) * XLVTT * PDELT_ROOF ( JJ ) * & ( PQSAT_ROOF ( JJ ) - PQA ( JJ ) + & ZIMPL * ZDQSAT_ROOF ( JJ ) * ( T % XT_ROOF ( JJ , 1 ) - ZTS_ROOF ( JJ )) ) ! !      13.     Energy imbalance for verification !              --------------------------------- PIMB_ROOF ( JJ ) = PABS_SW_ROOF ( JJ ) + PABS_LW_ROOF ( JJ ) - PDQS_ROOF ( JJ ) & - ZDF_ROOF ( JJ ) * ( PHFREE_ROOF ( JJ ) + PLEFREE_ROOF ( JJ )) & - PDN_ROOF ( JJ ) * PGSNOW_ROOF ( JJ ) + PFLX_BLD_ROOF ( JJ ) ! ENDDO ! !*      11.     New saturated specified humidity near the roof surface !              ------------------------------------------------------ ! PQSAT_ROOF (:) = QSAT ( T % XT_ROOF (:, 1 ), PPS (:)) ! !------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'ROOF_LAYER_E_BUDGET' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------- ! END SUBROUTINE ROOF_LAYER_E_BUDGET","tags":"","loc":"proc/roof_layer_e_budget.html"},{"title":"FLOOR_LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"subroutine FLOOR_LAYER_E_BUDGET(B, PTSTEP, PFLX_BLD_FL, PDQS_FL, PIMB_FL, PRADHT_IN, PRAD_WL_FL, PRAD_RF_FL, PRAD_WIN_FL, PLOAD_FL, PRAD_FL_MA, PCONV_FL_BLD) Uses YOMHOOK MODD_BEM_n PARKIND1 MODI_LAYER_E_BUDGET MODI_LAYER_E_BUDGET_GET_COEF MODE_CONV_DOE Arguments Type Intent Optional Attributes Name type(BEM_t), intent(inout) :: B real, intent(in) :: PTSTEP real, intent(out), DIMENSION(:) :: PFLX_BLD_FL real, intent(out), DIMENSION(:) :: PDQS_FL real, intent(out), DIMENSION(:) :: PIMB_FL real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PRAD_WL_FL real, intent(in), DIMENSION(:) :: PRAD_RF_FL real, intent(in), DIMENSION(:) :: PRAD_WIN_FL real, intent(in), DIMENSION(:) :: PLOAD_FL real, intent(out), DIMENSION(:) :: PRAD_FL_MA real, intent(out), DIMENSION(:) :: PCONV_FL_BLD Contents Source Code FLOOR_LAYER_E_BUDGET Source Code SUBROUTINE FLOOR_LAYER_E_BUDGET ( B , PTSTEP , PFLX_BLD_FL , PDQS_FL , PIMB_FL , PRADHT_IN , & PRAD_WL_FL , PRAD_RF_FL , PRAD_WIN_FL , PLOAD_FL , & PRAD_FL_MA , PCONV_FL_BLD ) !   ########################################################################## ! !!****  *FLOOR_LAYER_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of building floor temperatures ! ! !!**  METHOD !     ------ ! !    6 : equations for evolution of Ts_floor !        ************************************************************* ! !     dTf_k(t) / dt = 1/(df_k*Cf_k) * (- 2*Kf_k-1*(Tf_k-Tf_k-1)/(df_k-1 +df_k) !                                      - 2*Kf_k  *(Tf_k-Tf_k+1)/(df_k+1 +df_k) ) ! !     dTf_1(t) / dt = 1/(df_1*Cf_1) * (- 2*Kw_1*(Tw_1-Tw_2)/(dw_1 +dw_2)) ! !       with ! !   K*_k  = (d*_k+ d*_k+1)/(d*_k/k*_k+ d*_k+1/k*_k+1) ! ! ! The system is implicited (or semi-implicited). ! ! ZIMPL=1    ---> implicit system ! ZIMPL=0.5  ---> semi-implicit system ! ZIMPL=0    ---> explicit system ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      G. Pigeon           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    15/04/09 !!      G. Pigeon      08/10 computation of residual of energy balance !!                           modification of the limit condition for !!                           the deep temp. from the deep road temp. !!                           to zero flux condition. idem for sfce T !!      G. Pigeon      11/11 split in 2 for floor and mass to be flux conservative !!      G. Pigeon      09/12 modif of conv. coef + implicitation of the exchange !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_BEM_n , ONLY : BEM_t ! USE MODI_LAYER_E_BUDGET_GET_COEF USE MODI_LAYER_E_BUDGET USE MODE_CONV_DOE ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_FL !flux from building to floor REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_FL !heat storage inside the floor REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_FL !floor energy residual imbalance for verification REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_FL ! rad. fluxes from roof to floor[W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_WL_FL ! rad. fluxes from wall to floor[W m-2(wall)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_WIN_FL ! rad. fluxes from win to floor[W m-2(win)] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_FL ! solar and internal load to the floor REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_FL_MA ! rad. fluxes from floor to mass [W m-2(floor)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_FL_BLD ! conv. fluxes from floor to bld [W m-2(floor)] ! !*      0.2    declarations of local variables ! ! REAL :: ZIMPL = 1.0 ! implicit coefficient REAL :: ZEXPL = 0.0 ! explicit coefficient ! REAL , DIMENSION ( SIZE ( B % XT_FLOOR , 1 ), SIZE ( B % XT_FLOOR , 2 )) :: ZA ,& ! lower diag. ZB ,& ! main  diag. ZC ,& ! upper diag. ZY ! r.h.s. ! REAL , DIMENSION ( SIZE ( B % XT_FLOOR , 1 )) :: ZTS_FL ! surf. floor temp.  used for rad. exchanges REAL , DIMENSION ( SIZE ( B % XT_FLOOR , 1 )) :: ZTS_FL_CONV ! surf. floor temp. used for conv exchanges ! used during calculation REAL , DIMENSION ( SIZE ( B % XT_FLOOR , 1 )) :: ZCHTC_IN_FL ! Indoor floor convec heat transfer coefficient ! [W K-1 m-2(bld)] REAL ( KIND = JPRB ) :: ZHOOK_HANDLE INTEGER :: JJ !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'FLOOR_LAYER_E_BUDGET' , 0 , ZHOOK_HANDLE ) ! ! *Convection heat transfer coefficients [W m-2 K-1] !  From EP Engineering Reference ZCHTC_IN_FL (:) = CHTC_UP_DOE ( B % XT_FLOOR (:, 1 ), B % XTI_BLD (:)) DO JJ = 1 , SIZE ( ZCHTC_IN_FL ) ZCHTC_IN_FL ( JJ ) = MAX ( 1. , ZCHTC_IN_FL ( JJ )) ENDDO ! CALL LAYER_E_BUDGET_GET_COEF ( B % XT_FLOOR , PTSTEP , ZIMPL , B % XHC_FLOOR , B % XTC_FLOOR , B % XD_FLOOR , & ZA , ZB , ZC , ZY ) ! ZTS_FL (:) = B % XT_FLOOR (:, 1 ) ZB (:, 1 ) = ZB (:, 1 ) + ZIMPL * ( ZCHTC_IN_FL (:) * 4. / 3. + PRADHT_IN (:) * B % XF_FLOOR_MASS (:)) ZY (:, 1 ) = ZY (:, 1 ) & + ZCHTC_IN_FL (:) * ( B % XTI_BLD (:) - 1. / 3. * B % XT_FLOOR (:, 1 ) * ( 4 * ZEXPL - 1 )) & + B % XF_FLOOR_WIN (:) * PRAD_WIN_FL (:) + B % XF_FLOOR_WALL (:) * PRAD_WL_FL (:) & + B % XF_FLOOR_ROOF (:) * PRAD_RF_FL (:) & + PRADHT_IN (:) * B % XF_FLOOR_MASS (:) * ( B % XT_MASS (:, 1 ) - ZEXPL * B % XT_FLOOR (:, 1 )) & + PLOAD_FL (:) ! CALL LAYER_E_BUDGET ( B % XT_FLOOR , PTSTEP , ZIMPL , B % XHC_FLOOR , B % XTC_FLOOR , B % XD_FLOOR , & ZA , ZB , ZC , ZY , PDQS_FL ) ! !*      floor surface temperature used in the implicit formulation !       ---------------------------------------------------------- ZTS_FL_CONV (:) = 4. / 3. * ZIMPL * B % XT_FLOOR (:, 1 ) + 1. / 3. * ZTS_FL (:) * ( 4 * ZEXPL - 1. ) ZTS_FL (:) = ZEXPL * ZTS_FL (:) + ZIMPL * B % XT_FLOOR (:, 1 ) ! !*      fluxes with mass and indoor air !       ---------------------------------------------------------- PRAD_FL_MA (:) = PRADHT_IN (:) * ( ZTS_FL (:) - B % XT_MASS (:, 1 )) PCONV_FL_BLD (:) = ZCHTC_IN_FL (:) * ( ZTS_FL_CONV (:) - B % XTI_BLD (:)) ! !*     Flux between floor and indoor surfaces and air !       ------------------------------------------------ PFLX_BLD_FL (:) = - PCONV_FL_BLD (:) + B % XF_FLOOR_WIN (:) * PRAD_WIN_FL (:) & + B % XF_FLOOR_WALL (:) * PRAD_WL_FL (:) + B % XF_FLOOR_ROOF (:) * PRAD_RF_FL (:) & + PRADHT_IN (:) * B % XF_FLOOR_MASS (:) * ( B % XT_MASS (:, 1 ) - ZTS_FL (:)) & + PLOAD_FL (:) ! !*     Floor residual energy imbalance for verification !       ------------------------------------------------ PIMB_FL (:) = PFLX_BLD_FL (:) - PDQS_FL (:) ! IF ( LHOOK ) CALL DR_HOOK ( 'FLOOR_LAYER_E_BUDGET' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- END SUBROUTINE FLOOR_LAYER_E_BUDGET","tags":"","loc":"proc/floor_layer_e_budget.html"},{"title":"TEB_GARDEN – Town Energy Balance (TEB) model API docs","text":"subroutine TEB_GARDEN(DTCO, G, TOP, T, BOP, B, TPN, TIR, DMT, GDM, GRM, KTEB_P, HIMPLICIT_WIND, PTSUN, PT_CAN, PQ_CAN, PU_CAN, PT_LOWCAN, PQ_LOWCAN, PU_LOWCAN, PZ_LOWCAN, PPEW_A_COEF, PPEW_B_COEF, PPEW_A_COEF_LOWCAN, PPEW_B_COEF_LOWCAN, PPS, PPA, PEXNS, PEXNA, PTA, PQA, PRHOA, PCO2, PLW_RAD, PDIR_SW, PSCA_SW, PSW_BANDS, KSW, PZENITH, PAZIM, PRR, PSR, PZREF, PUREF, PVMOD, PH_TRAFFIC, PLE_TRAFFIC, PTSTEP, PLEW_RF, PLEW_RD, PLE_WL_A, PLE_WL_B, PRNSN_RF, PHSN_RF, PLESN_RF, PGSN_RF, PMELT_RF, PRNSN_RD, PHSN_RD, PLESN_RD, PGSN_RD, PMELT_RD, PRN_GRND, PH_GRND, PLE_GRND, PGFLX_GRND, PRN_TWN, PH_TWN, PLE_TWN, PGFLX_TWN, PEVAP_TWN, PSFCO2, PUW_GRND, PUW_RF, PDUWDU_GRND, PDUWDU_RF, PUSTAR_TWN, PCD, PCDN, PCH_TWN, PRI_TWN, PTS_TWN, PEMIS_TWN, PDIR_ALB_TWN, PSCA_ALB_TWN, PRESA_TWN, PAC_RD, PAC_GD, PAC_GR, PAC_RD_WAT, PAC_GD_WAT, PAC_GR_WAT, KDAY, PEMIT_LW_FAC, PEMIT_LW_GRND, PT_RAD_IND, PREF_SW_GRND, PREF_SW_FAC, PHU_BLD, PTIME, PPROD_BLD) Uses MODD_DATA_COVER_n MODI_BLD_OCC_CALENDAR MODD_BEM_n MODD_DIAG_MISC_TEB_n MODE_THERMOS MODI_GREENROOF MODD_SFX_GRID_n MODI_URBAN_LW_COEF MODD_TEB_n MODD_TEB_OPTION_n MODE_SURF_SNOW_FRAC MODI_SOLAR_PANEL MODI_GARDEN MODD_SNOW_PAR MODD_TEB_IRRIG_n MODI_AVG_URBAN_FLUXES MODD_TEB_PANEL_n MODD_DIAG_MISC_ISBA_n MODD_SURF_PAR MODD_TYPE_DATE_SURF MODI_TEB_VEG_PROPERTIES MODI_URBAN_SOLAR_ABS YOMHOOK MODI_WINDOW_SHADING_AVAILABILITY MODD_SURFEX_n MODI_TEB MODD_BEM_OPTION_n MODD_CSTS MODD_DIAG_n PARKIND1 MODD_DIAG_EVAP_ISBA_n Arguments Type Intent Optional Attributes Name type(DATA_COVER_t), intent(inout) :: DTCO type(GRID_t), intent(inout) :: G type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_OPTIONS_t), intent(inout) :: BOP type(BEM_t), intent(inout) :: B type(TEB_PANEL_t), intent(inout) :: TPN type(TEB_IRRIG_t), intent(inout) :: TIR type(DIAG_MISC_TEB_t), intent(inout) :: DMT type(TEB_GARDEN_MODEL_t), intent(inout) :: GDM type(TEB_GREENROOF_MODEL_t), intent(inout) :: GRM integer, intent(in) :: KTEB_P character(len=*), intent(in) :: HIMPLICIT_WIND real, intent(in), DIMENSION(:) :: PTSUN real, intent(inout), DIMENSION(:) :: PT_CAN real, intent(inout), DIMENSION(:) :: PQ_CAN real, intent(in), DIMENSION(:) :: PU_CAN real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PU_LOWCAN real, intent(in), DIMENSION(:) :: PZ_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPEW_A_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_B_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PPA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PCO2 real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:,:) :: PDIR_SW real, intent(in), DIMENSION(:,:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PSW_BANDS integer, intent(in) :: KSW real, intent(in), DIMENSION(:) :: PZENITH real, intent(in), DIMENSION(:) :: PAZIM real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PH_TRAFFIC real, intent(in), DIMENSION(:) :: PLE_TRAFFIC real, intent(in) :: PTSTEP real, intent(out), DIMENSION(:) :: PLEW_RF real, intent(out), DIMENSION(:) :: PLEW_RD real, intent(out), DIMENSION(:) :: PLE_WL_A real, intent(out), DIMENSION(:) :: PLE_WL_B real, intent(out), DIMENSION(:) :: PRNSN_RF real, intent(out), DIMENSION(:) :: PHSN_RF real, intent(out), DIMENSION(:) :: PLESN_RF real, intent(out), DIMENSION(:) :: PGSN_RF real, intent(out), DIMENSION(:) :: PMELT_RF real, intent(out), DIMENSION(:) :: PRNSN_RD real, intent(out), DIMENSION(:) :: PHSN_RD real, intent(out), DIMENSION(:) :: PLESN_RD real, intent(out), DIMENSION(:) :: PGSN_RD real, intent(out), DIMENSION(:) :: PMELT_RD real, intent(out), DIMENSION(:) :: PRN_GRND real, intent(out), DIMENSION(:) :: PH_GRND real, intent(out), DIMENSION(:) :: PLE_GRND real, intent(out), DIMENSION(:) :: PGFLX_GRND real, intent(out), DIMENSION(:) :: PRN_TWN real, intent(out), DIMENSION(:) :: PH_TWN real, intent(out), DIMENSION(:) :: PLE_TWN real, intent(out), DIMENSION(:) :: PGFLX_TWN real, intent(out), DIMENSION(:) :: PEVAP_TWN real, intent(out), DIMENSION(:) :: PSFCO2 real, intent(out), DIMENSION(:) :: PUW_GRND real, intent(out), DIMENSION(:) :: PUW_RF real, intent(out), DIMENSION(:) :: PDUWDU_GRND real, intent(out), DIMENSION(:) :: PDUWDU_RF real, intent(out), DIMENSION(:) :: PUSTAR_TWN real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN real, intent(out), DIMENSION(:) :: PCH_TWN real, intent(out), DIMENSION(:) :: PRI_TWN real, intent(out), DIMENSION(:) :: PTS_TWN real, intent(out), DIMENSION(:) :: PEMIS_TWN real, intent(out), DIMENSION(:) :: PDIR_ALB_TWN real, intent(out), DIMENSION(:) :: PSCA_ALB_TWN real, intent(out), DIMENSION(:) :: PRESA_TWN real, intent(out), DIMENSION(:) :: PAC_RD real, intent(out), DIMENSION(:) :: PAC_GD real, intent(out), DIMENSION(:) :: PAC_GR real, intent(out), DIMENSION(:) :: PAC_RD_WAT real, intent(out), DIMENSION(:) :: PAC_GD_WAT real, intent(out), DIMENSION(:) :: PAC_GR_WAT integer, intent(in) :: KDAY real, intent(out), DIMENSION(:) :: PEMIT_LW_FAC real, intent(out), DIMENSION(:) :: PEMIT_LW_GRND real, intent(out), DIMENSION(:) :: PT_RAD_IND real, intent(out), DIMENSION(:) :: PREF_SW_GRND real, intent(out), DIMENSION(:) :: PREF_SW_FAC real, intent(out), DIMENSION(:) :: PHU_BLD real, intent(in) :: PTIME real, intent(out), DIMENSION(:) :: PPROD_BLD Contents Source Code TEB_GARDEN Source Code SUBROUTINE TEB_GARDEN ( DTCO , G , TOP , T , BOP , B , TPN , TIR , DMT , GDM , GRM , KTEB_P , & HIMPLICIT_WIND , PTSUN , PT_CAN , PQ_CAN , PU_CAN , PT_LOWCAN , PQ_LOWCAN , & PU_LOWCAN , PZ_LOWCAN , PPEW_A_COEF , PPEW_B_COEF , PPEW_A_COEF_LOWCAN , & PPEW_B_COEF_LOWCAN , PPS , PPA , PEXNS , PEXNA , PTA , PQA , PRHOA , PCO2 , & PLW_RAD , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , PZENITH , PAZIM , PRR , PSR , & PZREF , PUREF , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , PTSTEP , PLEW_RF , PLEW_RD ,& PLE_WL_A , PLE_WL_B , PRNSN_RF , PHSN_RF , PLESN_RF , PGSN_RF , PMELT_RF , & PRNSN_RD , PHSN_RD , PLESN_RD , PGSN_RD , PMELT_RD , PRN_GRND , PH_GRND , & PLE_GRND , PGFLX_GRND , PRN_TWN , PH_TWN , PLE_TWN , PGFLX_TWN , PEVAP_TWN , & PSFCO2 , PUW_GRND , PUW_RF , PDUWDU_GRND , PDUWDU_RF , & PUSTAR_TWN , PCD , PCDN , PCH_TWN , PRI_TWN , PTS_TWN , PEMIS_TWN , & PDIR_ALB_TWN , PSCA_ALB_TWN , PRESA_TWN , PAC_RD , PAC_GD , PAC_GR , & PAC_RD_WAT , PAC_GD_WAT , PAC_GR_WAT , KDAY , PEMIT_LW_FAC , PEMIT_LW_GRND , & PT_RAD_IND , PREF_SW_GRND , PREF_SW_FAC , PHU_BLD , PTIME , PPROD_BLD ) !   ########################################################################## ! !!****  *TEB_GARDEN* !! !!    PURPOSE !!    ------- ! ! !!**  METHOD !     ------ ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      A. Lemonsu          * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!    Original    05/2009 !!                04/2012 add B%XTRAN_WIN !!    modified    08/2012 TOP%CCH_BEM/ ROUGH_WALL and ROUGH_ROOF for buildind conv coef. !!    modified    10/2012 add B%XF_WIN_WIN as arg !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_DATA_COVER_n , ONLY : DATA_COVER_t USE MODD_SFX_GRID_n , ONLY : GRID_t USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t ! USE MODD_DIAG_n , ONLY : DIAG_t USE MODD_DIAG_EVAP_ISBA_n , ONLY : DIAG_EVAP_ISBA_t USE MODD_DIAG_MISC_ISBA_n , ONLY : DIAG_MISC_ISBA_t ! USE MODD_SURFEX_n , ONLY : TEB_GARDEN_MODEL_t USE MODD_SURFEX_n , ONLY : TEB_GREENROOF_MODEL_t ! USE MODD_TYPE_DATE_SURF , ONLY : DATE_TIME USE MODD_CSTS , ONLY : XTT , XSTEFAN USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_SNOW_PAR , ONLY : XEMISSN , XANSMAX ! USE MODE_THERMOS USE MODE_SURF_SNOW_FRAC ! USE MODI_SOLAR_PANEL USE MODI_TEB_VEG_PROPERTIES USE MODI_WINDOW_SHADING_AVAILABILITY USE MODI_URBAN_SOLAR_ABS USE MODI_URBAN_LW_COEF USE MODI_GARDEN USE MODI_GREENROOF USE MODI_TEB USE MODI_AVG_URBAN_FLUXES USE MODI_BLD_OCC_CALENDAR ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! TYPE ( DATA_COVER_t ), INTENT ( INOUT ) :: DTCO ! TYPE ( GRID_t ), INTENT ( INOUT ) :: G ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_OPTIONS_t ), INTENT ( INOUT ) :: BOP TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_PANEL_t ), INTENT ( INOUT ) :: TPN TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT ! TYPE ( TEB_GARDEN_MODEL_t ), INTENT ( INOUT ) :: GDM TYPE ( TEB_GREENROOF_MODEL_t ), INTENT ( INOUT ) :: GRM ! INTEGER , INTENT ( IN ) :: KTEB_P ! TEB current patch number ! CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option !                                                         ! 'OLD' = direct !                                                         ! 'NEW' = Taylor serie, order 1 REAL , DIMENSION (:), INTENT ( IN ) :: PTSUN ! solar time   (s from midnight) ! REAL , DIMENSION (:) , INTENT ( INOUT ) :: PT_CAN ! canyon air temperature REAL , DIMENSION (:) , INTENT ( INOUT ) :: PQ_CAN ! canyon air specific humidity REAL , DIMENSION (:) , INTENT ( IN ) :: PU_CAN ! canyon hor. wind REAL , DIMENSION (:) , INTENT ( IN ) :: PU_LOWCAN ! wind near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PT_LOWCAN ! temp. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PQ_LOWCAN ! hum. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PZ_LOWCAN ! height of atm. var. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF_LOWCAN ! implicit coefficients for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF_LOWCAN ! between low canyon wind and road REAL , DIMENSION (:) , INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:) , INTENT ( IN ) :: PPA ! pressure at the first atmospheric level REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:) , INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PQA ! specific humidity at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNA ! exner function at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PRHOA ! air density at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PCO2 ! CO2 concentration in the air    (kg/m3) REAL , DIMENSION (:) , INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:,:), INTENT ( IN ) :: PDIR_SW ! incoming direct solar rad on an horizontal surface REAL , DIMENSION (:,:), INTENT ( IN ) :: PSCA_SW ! scattered incoming solar rad. REAL , DIMENSION (:) , INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) INTEGER , INTENT ( IN ) :: KSW ! number of short-wave spectral bands REAL , DIMENSION (:) , INTENT ( IN ) :: PZENITH ! solar zenithal angle REAL , DIMENSION (:) , INTENT ( IN ) :: PAZIM ! solar azimuthal angle ! (radian form N, clockwise) REAL , DIMENSION (:) , INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:) , INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:) , INTENT ( IN ) :: PH_TRAFFIC ! anthropogenic sensible heat fluxes due to traffic REAL , DIMENSION (:) , INTENT ( IN ) :: PLE_TRAFFIC ! anthropogenic latent heat fluxes due to traffic REAL , DIMENSION (:) , INTENT ( IN ) :: PZREF ! reference height of the first atm level (temperature) REAL , DIMENSION (:) , INTENT ( IN ) :: PUREF ! reference height of the first atm level (wind) REAL , INTENT ( IN ) :: PTSTEP ! time step ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PLEW_RF ! latent heat flux over roof (snow) REAL , DIMENSION (:) , INTENT ( OUT ) :: PLEW_RD ! latent heat flux over road (snow) REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_WL_A ! latent heat flux over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_WL_B ! latent heat flux over wall ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PRNSN_RF ! net radiation over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PHSN_RF ! sensible heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PLESN_RF ! latent heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PGSN_RF ! flux under the snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PMELT_RF ! snow melt REAL , DIMENSION (:) , INTENT ( OUT ) :: PRNSN_RD ! net radiation over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PHSN_RD ! sensible heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PLESN_RD ! latent heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PGSN_RD ! flux under the snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PMELT_RD ! snow melt ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_GRND ! net radiation over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_GRND ! sensible heat flux over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_GRND ! latent heat flux over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLX_GRND ! flux through the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_TWN ! net radiation over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_TWN ! sensible heat flux over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_TWN ! latent heat flux over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLX_TWN ! flux through the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PEVAP_TWN ! evaporation flux (kg/m2/s) REAL , DIMENSION (:) , INTENT ( OUT ) :: PSFCO2 ! flux of CO2       (m/s*kg_CO2/kg_air) REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW_GRND ! momentum flux for ground built surf REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW_RF ! momentum flux for roofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PDUWDU_GRND ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PDUWDU_RF ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PUSTAR_TWN ! friciton velocity over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PCD ! town averaged drag coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PCDN ! town averaged neutral drag coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PCH_TWN ! town averaged heat transfer coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PRI_TWN ! town averaged Richardson number REAL , DIMENSION (:) , INTENT ( OUT ) :: PTS_TWN ! town surface temperature REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIS_TWN ! town equivalent emissivity REAL , DIMENSION (:) , INTENT ( OUT ) :: PDIR_ALB_TWN ! town equivalent direct albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PSCA_ALB_TWN ! town equivalent diffuse albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PRESA_TWN ! town aerodynamical resistance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_RD ! road conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GD ! green area conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GR ! green roof conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_RD_WAT ! road conductance for latent heat REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GD_WAT ! green area conductance for latent heat REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GR_WAT ! green roof conductance for latent heat ! ! new arguments created after BEM ! INTEGER , INTENT ( IN ) :: KDAY ! Simulation day ! new argument for the UTCI calculation REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIT_LW_GRND ! LW flux emitted by the ground (W/m2 ground) REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIT_LW_FAC ! LW flux emitted by the facade (W/m2 ground) REAL , DIMENSION (:) , INTENT ( OUT ) :: PT_RAD_IND ! Indoor mean radiant temperature [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PREF_SW_GRND ! total solar rad reflected from ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PREF_SW_FAC ! total solar rad reflected from facade REAL , DIMENSION (:) , INTENT ( OUT ) :: PHU_BLD ! Indoor relative humidity 0 < (-) < 1 ! ! new arguments for shading, schedule or natural ventilation REAL , INTENT ( IN ) :: PTIME ! current time since midnight (UTC, s) ! !* arguments for solar panels ! REAL , DIMENSION (:), INTENT ( OUT ) :: PPROD_BLD ! Averaged     Energy production of solar panel on roofs (W/m2 bld  ) ! !*      0.2    Declarations of local variables ! TYPE ( DIAG_t ), POINTER :: GDDK TYPE ( DIAG_EVAP_ISBA_t ), POINTER :: GDDEK TYPE ( DIAG_MISC_ISBA_t ), POINTER :: GDDMK ! TYPE ( DIAG_t ), POINTER :: GRDK TYPE ( DIAG_EVAP_ISBA_t ), POINTER :: GRDEK TYPE ( DIAG_MISC_ISBA_t ), POINTER :: GRDMK ! REAL , DIMENSION ( SIZE ( PTA )) :: ZTA ! air temperature extrapolated at roof level REAL , DIMENSION ( SIZE ( PTA )) :: ZQA ! air humidity extrapolated at roof level ! REAL , DIMENSION ( SIZE ( PTA )) :: ZDN_RF ! snow fraction on roofs REAL , DIMENSION ( SIZE ( PTA )) :: ZDN_RD ! snow fraction on roads REAL , DIMENSION ( SIZE ( PTA )) :: ZDF_RF ! free-snow fraction on roofs REAL , DIMENSION ( SIZE ( PTA )) :: ZDF_RD ! free-snow fraction on roads REAL , DIMENSION ( SIZE ( PTA )) :: ZDELT_RD ! fraction of water on roads REAL , DIMENSION ( SIZE ( PTA )) :: ZDELT_RF ! fraction of water on roofs REAL , DIMENSION ( SIZE ( PTA )) :: ZAC_RF ! roof conductance REAL , DIMENSION ( SIZE ( PTA )) :: ZAC_RF_WAT ! roof water conductance REAL , DIMENSION ( SIZE ( PTA )) :: ZAC_WL ! wall conductance REAL , DIMENSION ( SIZE ( PTA )) :: ZAC_TOP ! top conductance REAL , DIMENSION ( SIZE ( PTA )) :: ZQSAT_RD ! hum of saturation for roads REAL , DIMENSION ( SIZE ( PTA )) :: ZQSAT_GD ! hum of saturation for green areas REAL , DIMENSION ( SIZE ( PTA )) :: ZQSAT_RF ! hum of saturation for roofs REAL , DIMENSION ( SIZE ( PTA )) :: ZQSAT_GR ! hum of saturation for green roofs ! ! coefficients for LW computations over snow (from previous time-step) ! REAL , DIMENSION ( SIZE ( PTA )) :: ZTSSN_RF ! roof snow temp at previous time-step REAL , DIMENSION ( SIZE ( PTA )) :: ZTSSN_RD ! road snow temp at previous time-step REAL , DIMENSION ( SIZE ( PTA )) :: ZESN_RF ! snow emissivity at previous time-step REAL , DIMENSION ( SIZE ( PTA )) :: ZESN_RD ! snow emissivity at previous time-step ! ! incoming shortwave radiation ! REAL , DIMENSION ( SIZE ( PTA )) :: ZDIR_SW ! direct  solar rad REAL , DIMENSION ( SIZE ( PTA )) :: ZSCA_SW ! diffuse solar rad INTEGER :: JSWB ! ! albedo & emissivity ! REAL , DIMENSION ( SIZE ( PTA )) :: ZALB_GD ! albedo     for green areas REAL , DIMENSION ( SIZE ( PTA )) :: ZEMIS_GD ! emissivity for green areas REAL , DIMENSION ( SIZE ( PTA )) :: ZALB_GR ! albedo     for green roofs REAL , DIMENSION ( SIZE ( PTA )) :: ZEMIS_GR ! emissivity for green roofs ! REAL , DIMENSION ( SIZE ( PTA )) :: ZALBNIR_TVEG_GD ! nearIR  veg tot albedo REAL , DIMENSION ( SIZE ( PTA )) :: ZALBVIS_TVEG_GD ! visible veg tot albedo REAL , DIMENSION ( SIZE ( PTA )) :: ZALBNIR_TSOIL_GD ! nearIR  soil tot albedo REAL , DIMENSION ( SIZE ( PTA )) :: ZALBVIS_TSOIL_GD ! visible soil tot albedo ! REAL , DIMENSION ( SIZE ( PTA )) :: ZALBNIR_TVEG_GR ! nearIR  veg tot albedo REAL , DIMENSION ( SIZE ( PTA )) :: ZALBVIS_TVEG_GR ! visible veg tot albedo REAL , DIMENSION ( SIZE ( PTA )) :: ZALBNIR_TSOIL_GR ! nearIR  soil tot albedo REAL , DIMENSION ( SIZE ( PTA )) :: ZALBVIS_TSOIL_GR ! visible soil tot albedo ! ! radiation received by surfaces ! REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_SW_RD ! solar rad received by roads REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_SW_WL_A ! solar rad received by walls REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_SW_WL_B ! solar rad received by walls REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_SW_GD ! solar rad received by gardens REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_SW_SN_RD ! solar rad received by snow on roads ! REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_LW_GD ! IR rad received by gardens ! REAL , DIMENSION ( SIZE ( PTA )) :: ZSW_RAD_GD ! solar radiation reaching urban green areas REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_SW_RF ! solar rad received by roofs in presence of solar panels ! ! coefficients for LW contributions ! REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WA_TO_WB ! LW contrib. wall       -> opposite wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WA_TO_R ! LW contrib. wall       -> road REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WB_TO_R ! LW contrib. wall       -> road REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WA_TO_G ! LW contrib. wall       -> green REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WB_TO_G ! LW contrib. wall       -> green REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WA_TO_WIN ! Radiative heat trasfer coeff wall-window REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WB_TO_WIN ! Radiative heat trasfer coeff wall-window ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WA_TO_NR ! LW contrib. wall       -> road(snow) REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WB_TO_NR ! LW contrib. wall       -> road(snow) REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_R_TO_WA ! LW contrib. road       -> wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_R_TO_WB ! LW contrib. road       -> wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_R_TO_WIN ! Radiative heat trasfer coeff road-window ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_G_TO_WA ! LW contrib. green      -> wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_G_TO_WB ! LW contrib. green      -> wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_G_TO_WIN ! L.W. interactions GARDEN areas->road ! REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WIN_TO_WA ! Radiative heat trasfer coeff window-wall ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WIN_TO_WB ! Radiative heat trasfer coeff window-wall ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WIN_TO_R ! Radiative heat trasfer coeff window-road ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WIN_TO_G ! Radiative heat trasfer coeff window-garden ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_WIN_TO_NR ! Radiative heat trasfer coeff window-road(snow) ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_S_TO_WA ! LW contrib. sky        -> wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_S_TO_WB ! LW contrib. sky        -> wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_S_TO_R ! LW contrib. sky        -> road REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_S_TO_G ! LW contrib. sky        -> green REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_S_TO_WIN ! Radiative heat trasfer coeff window-sky ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_S_TO_NR ! LW contrib. sky        -> road(snow) REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_NR_TO_WA ! LW contrib. road(snow) -> wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_NR_TO_WB ! LW contrib. road(snow) -> wall REAL , DIMENSION ( SIZE ( PTA )) :: ZLW_NR_TO_WIN ! L.W. interactions snow(road)->GARDEN areas ! REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_SW_WIN ! solar received by windows [W m-2(win)] REAL , DIMENSION ( SIZE ( PTA )) :: ZT_SKY ! sky temperature [K] REAL , DIMENSION ( SIZE ( PTA )) :: ZREC_LW_RF ! Incoming LW on roofs in presence of solar panels ! ! local variable at previous time-step ! REAL , DIMENSION ( SIZE ( PTA )) :: ZPET_A_COEF REAL , DIMENSION ( SIZE ( PTA )) :: ZPET_B_COEF REAL , DIMENSION ( SIZE ( PTA )) :: ZPEQ_A_COEF REAL , DIMENSION ( SIZE ( PTA )) :: ZPEQ_B_COEF ! REAL , DIMENSION ( SIZE ( PTA )) :: ZUW_RD ! momentum flux for roads REAL , DIMENSION ( SIZE ( PTA )) :: ZUW_GD ! momentum flux for green areas REAL , DIMENSION ( SIZE ( PTA )) :: ZUW_GR ! momentum flux for green roofs REAL , DIMENSION ( SIZE ( PTA )) :: ZDUWDU_RD ! ! REAL , DIMENSION ( SIZE ( PTA )) :: ZAC_AGG_GD ! aggreg. aeodynamic resistance for green areas REAL , DIMENSION ( SIZE ( PTA )) :: ZHU_AGG_GD ! aggreg. relative humidity for green areas REAL , DIMENSION ( SIZE ( PTA )) :: ZAC_AGG_GR ! aggreg. aeodynamic resistance for green roofs REAL , DIMENSION ( SIZE ( PTA )) :: ZHU_AGG_GR ! aggreg. relative humidity for green roofs ! !  surfaces relative fractions ! REAL , DIMENSION ( SIZE ( PTA )) :: ZRF_FRAC ! roof, wall and REAL , DIMENSION ( SIZE ( PTA )) :: ZWL_FRAC ! road fractions REAL , DIMENSION ( SIZE ( PTA )) :: ZRD_FRAC ! of exchange surf. REAL , DIMENSION ( SIZE ( PTA )) :: ZGD_FRAC ! REAL , DIMENSION ( SIZE ( PTA )) :: ZTOTS_O_HORS ! total canyon+roof surface !                                             ! over horizontal surface REAL , DIMENSION ( SIZE ( PTA )) :: ZWL_O_RD ! wall surface over road surface REAL , DIMENSION ( SIZE ( PTA )) :: ZWL_O_GRND ! wall surface over (road+green area) surface ! ! surface temperatures ! REAL , DIMENSION ( SIZE ( PTA )) :: ZMTC_O_GR_R1 ! mean thermal conductivity over distance !                                          ! between two layers (bottom GR & roof) ! ! fluxes from green surfaces ! REAL , DIMENSION ( SIZE ( PTA )) :: ZSFCO2_GD ! CO2 fluxes (m/s*kg_CO2/kg_air) REAL , DIMENSION ( SIZE ( PTA )) :: ZEMIT_LW_GD ! LW flux emitted by the garden (W/m2 garden) REAL , DIMENSION ( SIZE ( PTA )) :: ZSFCO2_GR ! CO2 fluxes over greenroofs (m/s*kg_CO2/kg_air) ! ! fluxes from built surfaces REAL , DIMENSION ( SIZE ( PTA )) :: ZEMIT_LW_RD ! LW flux emitted by the road (W/m2 road) ! ! fluxes from/to solar panel REAL , DIMENSION ( SIZE ( PTA )) :: ZEMIT_LWDN_PANEL ! LW flux emitted DOWNWARDS by the solar panel (W/m2 panel) REAL , DIMENSION ( SIZE ( PTA )) :: ZEMIT_LWUP_PANEL ! LW flux emitted UPWARDS   by the solar panel (W/m2 panel) REAL , DIMENSION ( SIZE ( PTA )) :: ZEMIT_LW_RF ! LW flux emitted UPWARDS   by the roof        (W/m2 roof ) ! REAL , DIMENSION ( SIZE ( PTA )) :: ZRN_GD , ZH_GD , ZLE_GD , ZGFLUX_GD , ZEVAP_GD , ZTSRAD_GD , ZRUNOFF_GD REAL , DIMENSIOn ( SIZE ( PTA )) :: ZRN_GR , ZH_GR , ZLE_GR , ZGFLUX_GR REAL , DIMENSION ( SIZE ( PTA )) :: ZEVAP_GR , ZTSRAD_GR , ZRUNOFF_GR , ZDRAIN_GR ! !new local variables for shading REAL , DIMENSION ( SIZE ( PTA )) :: ZE_SHADING ! energy not ref., nor absorbed, nor ! trans. by glazing [Wm-2(win)] LOGICAL , DIMENSION ( SIZE ( PTA )) :: GSHADE ! describes if one encounters the !                                                 ! conditions to close windows INTEGER :: JJ REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! !*      1.     Initializations !              --------------- ! !*      1.0    broadband radiative fluxes !              -------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'TEB_GARDEN' , 0 , ZHOOK_HANDLE ) ! GDDK => GDM % VD % ND % AL ( KTEB_P ) GDDEK => GDM % VD % NDE % AL ( KTEB_P ) GDDMK => GDM % VD % NDM % AL ( KTEB_P ) ! GRDK => GRM % VD % ND % AL ( KTEB_P ) GRDEK => GRM % VD % NDE % AL ( KTEB_P ) GRDMK => GRM % VD % NDM % AL ( KTEB_P ) ! ZDIR_SW (:) = 0. ZSCA_SW (:) = 0. ! DO JSWB = 1 , KSW DO JJ = 1 , SIZE ( PDIR_SW , 1 ) ZDIR_SW ( JJ ) = ZDIR_SW ( JJ ) + PDIR_SW ( JJ , JSWB ) ZSCA_SW ( JJ ) = ZSCA_SW ( JJ ) + PSCA_SW ( JJ , JSWB ) ENDDO END DO ! ! !*      1.1    surfaces relative fractions !              --------------------------- ! DO JJ = 1 , SIZE ( T % XROAD ) IF ( T % XROAD ( JJ ) . GT . 0. ) THEN ZTOTS_O_HORS ( JJ ) = 1. + T % XWALL_O_HOR ( JJ ) ZRF_FRAC ( JJ ) = T % XBLD ( JJ ) / ZTOTS_O_HORS ( JJ ) ZWL_FRAC ( JJ ) = T % XWALL_O_HOR ( JJ ) / ZTOTS_O_HORS ( JJ ) ZRD_FRAC ( JJ ) = T % XROAD ( JJ ) / ZTOTS_O_HORS ( JJ ) ZGD_FRAC ( JJ ) = T % XGARDEN ( JJ ) / ZTOTS_O_HORS ( JJ ) ZWL_O_RD ( JJ ) = ZWL_FRAC ( JJ ) / ZRD_FRAC ( JJ ) ZWL_O_GRND ( JJ ) = ZWL_FRAC ( JJ ) / ( ZRD_FRAC ( JJ ) + ZGD_FRAC ( JJ )) ELSEIF ( T % XBLD ( JJ ) . EQ . 0. . AND . T % XROAD ( JJ ) . EQ . 0. ) THEN ZTOTS_O_HORS ( JJ ) = 1. + T % XWALL_O_HOR ( JJ ) ZRF_FRAC ( JJ ) = 0. ZWL_FRAC ( JJ ) = T % XWALL_O_HOR ( JJ ) / ZTOTS_O_HORS ( JJ ) ZRD_FRAC ( JJ ) = 0. ZGD_FRAC ( JJ ) = T % XGARDEN ( JJ ) / ZTOTS_O_HORS ( JJ ) ZWL_O_RD ( JJ ) = 0. ZWL_O_GRND ( JJ ) = ZWL_FRAC ( JJ ) / ZGD_FRAC ( JJ ) ENDIF ENDDO ! !------------------------------------------------------------------------------- ! !*      2.     Snow-covered surfaces relative effects !              -------------------------------------- ! !*      2.1    Snow-covered surfaces relative fractions (at previous time-step) !              ---------------------------------------- CALL SNOW_FRAC_ROAD ( T % TSNOW_ROAD % WSNOW (:, 1 ), PSR (:) > 0. , ZDN_RD , ZDF_RD ) CALL SNOW_FRAC_ROOF ( T % TSNOW_ROOF % WSNOW (:, 1 ), PSR (:) > 0. , ZDN_RF , ZDF_RF ) ! !* new snow albedo ! WHERE ( T % TSNOW_ROAD % WSNOW (:, 1 ) == 0. . AND . PSR (:) > 0. ) T % TSNOW_ROAD % ALB (:) = XANSMAX WHERE ( T % TSNOW_ROOF % WSNOW (:, 1 ) == 0. . AND . PSR (:) > 0. ) T % TSNOW_ROOF % ALB (:) = XANSMAX ! !*      2.2    If snow was not present at previous time-step but is fallingadiative snow variables at previous time-step !              ---------------------------------------------- ! ZESN_RF (:) = T % TSNOW_ROOF % EMIS (:) ZESN_RD (:) = T % TSNOW_ROAD % EMIS (:) ZTSSN_RF (:) = T % TSNOW_ROOF % TS (:) ZTSSN_RD (:) = T % TSNOW_ROAD % TS (:) ! !------------------------------------------------------------------------------- ! !*      3.     Extrapolation of atmospheric T and q at roof level (for fluxes computation) !              -------------------------------------------------- ! ZTA (:) = PTA (:) * PEXNS (:) / PEXNA (:) ZQA (:) = PQA (:) * QSAT ( ZTA (:), PPS (:)) / QSAT ( PTA (:), PPA (:)) ! !------------------------------------------------------------------------------- ! !*      4.     Grid-averaged albedo and emissivity of green areas !              -------------------------------------------------- ! ZALB_GD = XUNDEF ZEMIS_GD = XUNDEF ZTSRAD_GD = XUNDEF ! IF ( TOP % LGARDEN ) THEN CALL TEB_VEG_PROPERTIES ( T % XGARDEN , GDM % O , GDM % NPE % AL ( KTEB_P ), & PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & ZTSRAD_GD , ZEMIS_GD , ZALB_GD , & PTA = PT_LOWCAN , & PALBNIR_TVEG = ZALBNIR_TVEG_GD , & PALBVIS_TVEG = ZALBVIS_TVEG_GD , & PALBNIR_TSOIL = ZALBNIR_TSOIL_GD , & PALBVIS_TSOIL = ZALBVIS_TSOIL_GD ) ENDIF ! ! for greenroofs : ! ZALB_GR = XUNDEF ZEMIS_GR = XUNDEF ZTSRAD_GR = XUNDEF ! IF ( TOP % LGREENROOF ) THEN CALL TEB_VEG_PROPERTIES ( T % XGREENROOF , GRM % O , GRM % NPE % AL ( KTEB_P ), & PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & ZTSRAD_GR , ZEMIS_GR , ZALB_GR , & PTA = PTA , & PALBNIR_TVEG = ZALBNIR_TVEG_GR , & PALBVIS_TVEG = ZALBVIS_TVEG_GR , & PALBNIR_TSOIL = ZALBNIR_TSOIL_GR , & PALBVIS_TSOIL = ZALBVIS_TSOIL_GR ) ENDIF ! !------------------------------------------------------------------------------- ! !*      5.     Occupation of buildings !              ----------------------- ! !* when building in unoccupied, target temperature is modified ! IF ( TOP % CBEM == \"BEM\" ) THEN CALL BLD_OCC_CALENDAR ( TOP % TTIME , PTSUN , T , B , 1. , DMT % XTCOOL_TARGET , DMT % XTHEAT_TARGET , DMT % XQIN ) ENDIF ! !------------------------------------------------------------------------------- ! !*      5.     Solar radiation !              --------------- ! ! !*       5.1   Windows management !              ------------------ ! !* checks if one encouters the conditions for closing the windows at day !  (needs to be equiped of solar protections and not to be confortable inside) ! GSHADE (:) = . FALSE . IF ( TOP % CBEM == \"BEM\" ) THEN CALL WINDOW_SHADING_AVAILABILITY ( B % LSHADE , B % XTI_BLD , DMT % XTCOOL_TARGET , GSHADE ) ! !* Reinitialize shading of windows when changing day ! WHERE ( PTSUN . LT . PTSTEP + 1E-3 ) B % LSHAD_DAY (:) = . FALSE . END IF ! ! !*       5.2   computes solar radiation exchanges !              ---------------------------------- ! CALL URBAN_SOLAR_ABS ( TOP , T , B , DMT , ZDIR_SW , ZSCA_SW , PZENITH , PAZIM , & TPN % XFRAC_PANEL , TPN % XALB_PANEL , ZALB_GD , & T % XSVF_GARDEN , ZALB_GR , ZDN_RF , ZDF_RF , & ZDN_RD , ZDF_RD , ZREC_SW_RD , ZREC_SW_SN_RD , & ZREC_SW_WL_A , ZREC_SW_WL_B , ZREC_SW_GD , & ZREC_SW_RF , PDIR_ALB_TWN , PSCA_ALB_TWN , & ZSW_RAD_GD , ZREC_SW_WIN , PREF_SW_GRND , & PREF_SW_FAC , ZE_SHADING , B % LSHAD_DAY , GSHADE ) ! !------------------------------------------------------------------------------- ! !*      6.     LW properties !              ------------- ! CALL URBAN_LW_COEF ( B , T , PLW_RAD , ZEMIS_GD , T % TSNOW_ROAD % TS , ZTSRAD_GD , & ZLW_WA_TO_WB , ZLW_WA_TO_R , ZLW_WB_TO_R , & ZLW_WA_TO_NR , ZLW_WB_TO_NR , ZLW_WA_TO_G , & ZLW_WB_TO_G , ZLW_WA_TO_WIN , ZLW_WB_TO_WIN , & ZLW_R_TO_WA , ZLW_R_TO_WB , ZLW_R_TO_WIN , & ZLW_G_TO_WA , ZLW_G_TO_WB , ZLW_G_TO_WIN , & ZLW_S_TO_WA , ZLW_S_TO_WB , ZLW_S_TO_R , & ZLW_S_TO_NR , ZLW_S_TO_G , ZLW_S_TO_WIN , & ZLW_WIN_TO_WA , ZLW_WIN_TO_WB , ZLW_WIN_TO_R , & ZLW_WIN_TO_NR , ZLW_WIN_TO_G , ZLW_NR_TO_WA , & ZLW_NR_TO_WB , ZLW_NR_TO_WIN ) ! !------------------------------------------------------------------------------- ! ! The subroutine is splitted in 2 because of compilation optimization issues CALL TEB_GARDEN2 CALL TEB_GARDEN3 ! IF ( LHOOK ) CALL DR_HOOK ( 'TEB_GARDEN' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- CONTAINS !------------------------------------------------------------------------------- SUBROUTINE TEB_GARDEN2 ! !*      7.     Terms of radiation absorption !              ----------------------------- ! !*      7.1    IR rad received by gardens (snow free and snow covered separately) !              -------------------------- ! IF ( TOP % LGARDEN ) THEN ZT_SKY (:) = ( PLW_RAD (:) / XSTEFAN ) ** 0.25 ZREC_LW_GD (:) = ( ZLW_S_TO_G (:) * ( ZT_SKY (:) - ZTSRAD_GD (:)) & + ZLW_WA_TO_G (:) * ( T % XT_WALL_A (:, 1 ) - ZTSRAD_GD (:)) & + ZLW_WB_TO_G (:) * ( T % XT_WALL_B (:, 1 ) - ZTSRAD_GD (:)) & + ZLW_WIN_TO_G (:) * ( B % XT_WIN1 (:) - ZTSRAD_GD (:)) ) & / ZEMIS_GD (:) + XSTEFAN * ZTSRAD_GD (:) ** 4 ELSE ZREC_LW_GD (:) = XUNDEF END IF ! !*     7.2     Effect of solar panels on incoming LW on roofs !              ---------------------------------------------- ! IF ( TOP % LSOLAR_PANEL ) THEN ! ! solar panels downwards surface is supposed to be at air temperature ! and to be have an emissivity of 1. ! ZEMIT_LWDN_PANEL = XSTEFAN * PTA ** 4 ! ! note that, for the time being, one considers that the solar panel ! intercept radiation both above roof and greenroofs (if any) ZREC_LW_RF = ( 1. - TPN % XFRAC_PANEL (:)) * PLW_RAD + TPN % XFRAC_PANEL (:) * ZEMIT_LWDN_PANEL ELSE ZEMIT_LWDN_PANEL = XUNDEF ZREC_LW_RF = PLW_RAD END IF ! !------------------------------------------------------------------------------- ! !*      8.     Treatment of green areas !              ------------------------ ! !*      8.1    Implicit coeefs for T and Q !              --------------------------- ! !* explicit coupling for the time being. !  canopy may need implicitation if there is a lot a garden in the grid mesh ! ZPET_A_COEF (:) = 0. ZPET_B_COEF (:) = PT_LOWCAN (:) / PEXNS (:) ZPEQ_A_COEF (:) = 0. ZPEQ_B_COEF (:) = PQ_LOWCAN (:) ! !*      8.2    Call ISBA for green areas !              ------------------------- ! IF ( TOP % LGARDEN ) THEN ! CALL GARDEN ( DTCO , G , T , TOP , TIR , GDM % DTV , GDM % GB , GDDK , GDDEK , GDDMK , & GDM % O , GDM % S , GDM % K , GDM % P , GDM % NPE % AL ( KTEB_P ), & HIMPLICIT_WIND , TOP % TTIME , PTSUN , PPEW_A_COEF_LOWCAN , PPEW_B_COEF_LOWCAN , & ZPET_A_COEF , ZPEQ_A_COEF , ZPET_B_COEF , ZPEQ_B_COEF , PTSTEP , PZREF , ZALB_GD , & PT_LOWCAN , PQ_LOWCAN , PEXNS , PRHOA , PCO2 , PPS , PRR , PSR , PZENITH , & ZREC_SW_GD , ZREC_LW_GD , PU_LOWCAN , ZALBNIR_TVEG_GD , ZALBVIS_TVEG_GD , & ZALBNIR_TSOIL_GD , ZALBVIS_TSOIL_GD , ZRN_GD , ZH_GD , ZLE_GD , ZGFLUX_GD , & ZSFCO2_GD , ZEVAP_GD , ZUW_GD , ZRUNOFF_GD , PAC_GD , ZQSAT_GD , ZTSRAD_GD , & ZAC_AGG_GD , ZHU_AGG_GD , DMT % XIRRIG_GARDEN ) PAC_GD_WAT (:) = PAC_GD (:) DMT % XABS_SW_GARDEN (:) = ( 1. - ZALB_GD (:)) * ZREC_SW_GD DMT % XABS_LW_GARDEN (:) = ZEMIS_GD (:) * ZREC_LW_GD (:) - XSTEFAN * ZEMIS_GD (:) * ZTSRAD_GD (:) ** 4 ZEMIT_LW_GD (:) = XSTEFAN * ZTSRAD_GD (:) ** 4 + ( 1 - ZEMIS_GD (:)) / ZEMIS_GD (:) * DMT % XABS_LW_GARDEN (:) ELSE ! ZRN_GD (:) = 0. ZH_GD (:) = 0. ZLE_GD (:) = 0. ZGFLUX_GD (:) = 0. ZEVAP_GD (:) = 0. ZRUNOFF_GD (:) = 0. ! ZTSRAD_GD (:) = XUNDEF ! ZUW_GD (:) = 0. PAC_GD (:) = 0. ZSFCO2_GD (:) = 0. ZQSAT_GD (:) = XUNDEF ZAC_AGG_GD (:) = XUNDEF ZHU_AGG_GD (:) = XUNDEF PAC_GD_WAT (:) = XUNDEF ZEMIT_LW_GD (:) = 0. ! DMT % XABS_SW_GARDEN (:) = XUNDEF DMT % XABS_LW_GARDEN (:) = XUNDEF ! DMT % XIRRIG_GARDEN (:) = 0. ! ENDIF ! !*      8.3    Call ISBA for greenroofs !              ------------------------- ! IF ( TOP % LGREENROOF ) THEN ! CALL GREENROOF ( DTCO , G , T , TOP , TIR , GRM % DTV , GRM % GB , GRDK , GRDEK , & GRDMK , GRM % O , GRM % S , GRM % K , GRM % P , GRM % NPE % AL ( KTEB_P ), & HIMPLICIT_WIND , TOP % TTIME , PTSUN , PPEW_A_COEF , PPEW_B_COEF , & ZPET_A_COEF , ZPEQ_A_COEF , ZPET_B_COEF , ZPEQ_B_COEF , PTSTEP , PZREF , & PUREF , ZALB_GD , PTA , PQA , PEXNS , PEXNA , PRHOA , PCO2 , PPS , PRR , PSR , PZENITH , & ZREC_SW_RF , ZREC_LW_RF , PVMOD , ZALBNIR_TVEG_GR , ZALBVIS_TVEG_GR , & ZALBNIR_TSOIL_GR , ZALBVIS_TSOIL_GR , ZRN_GR , ZH_GR , ZLE_GR , & ZGFLUX_GR , ZSFCO2_GR , ZEVAP_GR , ZUW_GR , ZRUNOFF_GR , ZDRAIN_GR , & PAC_GR , ZQSAT_GR , ZTSRAD_GR , ZAC_AGG_GR , ZHU_AGG_GR , & DMT % XG_GREENROOF_ROOF , DMT % XIRRIG_GREENROOF ) ! PAC_GR_WAT (:) = PAC_GR (:) DMT % XABS_SW_GREENROOF (:) = ( 1. - ZALB_GR (:)) * ZREC_SW_RF DMT % XABS_LW_GREENROOF (:) = ZEMIS_GR * ZREC_LW_RF - XSTEFAN * ZEMIS_GR * ZTSRAD_GR ** 4 ELSE ! ZRN_GR (:) = 0. ZH_GR (:) = 0. ZLE_GR (:) = 0. ZGFLUX_GR (:) = 0. ZEVAP_GR (:) = 0. ZRUNOFF_GR (:) = 0. ZDRAIN_GR (:) = 0. ! ZTSRAD_GR (:) = XUNDEF ! ZUW_GR (:) = 0. PAC_GR (:) = 0. ZSFCO2_GR (:) = 0. ZQSAT_GR (:) = XUNDEF ZAC_AGG_GR (:) = XUNDEF ZHU_AGG_GR (:) = XUNDEF ZMTC_O_GR_R1 (:) = XUNDEF ! DMT % XIRRIG_GREENROOF (:) = 0. DMT % XABS_SW_GREENROOF (:) = XUNDEF DMT % XABS_LW_GREENROOF (:) = XUNDEF DMT % XG_GREENROOF_ROOF (:) = XUNDEF ! ENDIF END SUBROUTINE TEB_GARDEN2 !------------------------------------------------------------------------------- SUBROUTINE TEB_GARDEN3 ! !*     9.      Treatment of built covers !              ------------------------- ! CALL TEB ( TOP , T , BOP , B , TIR , DMT , HIMPLICIT_WIND , & PTSUN , PT_CAN , PQ_CAN , PU_CAN , PT_LOWCAN , PQ_LOWCAN , PU_LOWCAN , & PZ_LOWCAN , PPEW_A_COEF , PPEW_B_COEF , PPEW_A_COEF_LOWCAN , & PPEW_B_COEF_LOWCAN , PPS , PPA , PEXNS , PEXNA , PTA , PQA , PRHOA , PLW_RAD , & PRR , PSR , PZREF , PUREF , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , PTSTEP , & ZDF_RF , ZDN_RF , ZDF_RD , ZDN_RD , ZQSAT_RF , ZQSAT_RD , ZDELT_RF , & ZDELT_RD , ZTSRAD_GD , PLEW_RF , ZUW_GR , PLEW_RD , PLE_WL_A , & PLE_WL_B , PRNSN_RF , PHSN_RF , PLESN_RF , PGSN_RF , PMELT_RF , & ZRN_GR , ZH_GR , ZLE_GR , ZGFLUX_GR , ZDRAIN_GR , ZRUNOFF_GR , & PRNSN_RD , PHSN_RD , PLESN_RD , PGSN_RD , PMELT_RD , ZUW_RD , PUW_RF , & ZDUWDU_RD , PDUWDU_RF , PUSTAR_TWN , PCD , PCDN , PCH_TWN , PRI_TWN , PRESA_TWN , & ZAC_RF , PAC_RD , ZAC_WL , ZAC_TOP , PAC_GD , ZAC_RF_WAT , PAC_RD_WAT , & ZLW_WA_TO_WB , ZLW_WA_TO_R , ZLW_WB_TO_R , ZLW_WA_TO_NR , ZLW_WB_TO_NR , & ZLW_R_TO_WA , ZLW_R_TO_WB , ZLW_G_TO_WA , ZLW_G_TO_WB , ZLW_S_TO_WA , & ZLW_S_TO_WB , ZLW_S_TO_R , ZLW_S_TO_NR , ZLW_NR_TO_WA , ZLW_NR_TO_WB , & ZLW_NR_TO_WIN , ZLW_WA_TO_WIN , ZLW_WB_TO_WIN , ZLW_G_TO_WIN , & ZLW_R_TO_WIN , ZLW_S_TO_WIN , ZLW_WIN_TO_WA , ZLW_WIN_TO_WB , & ZLW_WIN_TO_R , ZLW_WIN_TO_NR , KDAY , PEMIT_LW_FAC , ZEMIT_LW_RD , & PT_RAD_IND , PHU_BLD , PTIME , ZE_SHADING ) ! !------------------------------------------------------------------------------- ! !*    10.      Treatment of solar panels !              ------------------------- ! IF ( TOP % LSOLAR_PANEL ) THEN ! !* LW radiation coming upwards from roofs ! ZEMIT_LW_RF = ZREC_LW_RF & - ( T % XGREENROOF (:) * DMT % XABS_LW_GREENROOF (:) & + ( 1. - T % XGREENROOF (:)) * ZDF_RF (:) * DMT % XABS_LW_ROOF (:) & + ( 1. - T % XGREENROOF (:)) * ZDN_RF (:) * DMT % XABS_LW_SNOW_ROOF (:) ) ! ! note that, for the time being, one considers that the solar panel ! intercept radiation both above roof and greenroofs (if any) CALL SOLAR_PANEL ( TPN , DMT , PTSTEP , PTSUN , T % XRESIDENTIAL , ZEMIT_LW_RF , ZEMIT_LWDN_PANEL , & PLW_RAD , PTA , B % XN_FLOOR , PPROD_BLD ) ELSE PPROD_BLD = XUNDEF END IF !------------------------------------------------------------------------------- ! !*     11.     Aggregation !              ----------- ! CALL AVG_URBAN_FLUXES ( TOP , T , B , TPN , DMT , & PTS_TWN , PEMIS_TWN , PT_CAN , PQ_CAN , PT_LOWCAN , PQ_LOWCAN , & ZTA , ZQA , PRHOA , PPS , PH_TRAFFIC , PLE_TRAFFIC , ZWL_O_GRND , & ZESN_RF , ZEMIS_GR , PLW_RAD , ZAC_RF , ZAC_RF_WAT , ZAC_WL , PAC_RD , & PAC_RD_WAT , ZAC_TOP , PAC_GD , ZQSAT_GD , ZAC_AGG_GD , ZHU_AGG_GD , & ZQSAT_RF , ZQSAT_RD , ZDELT_RF , ZDELT_RD , ZRF_FRAC , ZWL_FRAC , & ZRD_FRAC , ZGD_FRAC , ZTOTS_O_HORS , ZDF_RF , ZDN_RF , ZDF_RD , ZDN_RD , & PLE_WL_A , PLE_WL_B , PLEW_RF , PLESN_RF , PLEW_RD , PLESN_RD , PHSN_RD , & ZTSRAD_GD , ZRN_GD , ZH_GD , ZLE_GD , ZGFLUX_GD , ZEVAP_GD , & ZRUNOFF_GD , ZEVAP_GR , ZRUNOFF_GR , ZDRAIN_GR , & PRN_GRND , PH_GRND , PLE_GRND , PGFLX_GRND , PRN_TWN , PH_TWN , PLE_TWN , & PGFLX_TWN , PEVAP_TWN , ZEMIT_LW_RD , ZEMIT_LW_GD , PEMIT_LW_GRND , ZEMIS_GD ) ! PSFCO2 (:) = T % XGARDEN (:) * ZSFCO2_GD (:) + T % XBLD (:) * T % XGREENROOF (:) * ZSFCO2_GR (:) ! no CO2 flux from built and road yet. ! !------------------------------------------------------------------------------- ! !*     12.     Momentum flux for ground built surfaces !              --------------------------------------- ! PUW_GRND (:) = ( T % XROAD (:) * ZUW_RD (:) + T % XGARDEN (:) * ZUW_GD (:)) / ( T % XROAD (:) + T % XGARDEN (:)) ! PDUWDU_GRND (:) = 0. ! END SUBROUTINE TEB_GARDEN3 ! !------------------------------------------------------------------------------- ! ! END SUBROUTINE TEB_GARDEN","tags":"","loc":"proc/teb_garden.html"},{"title":"VSLOG – Town Energy Balance (TEB) model API docs","text":"subroutine VSLOG(PA, PLOG, N) Uses PARKIND1 YOMHOOK Arguments Type Intent Optional Attributes Name real :: PA (N) real :: PLOG (N) integer :: N Contents None","tags":"","loc":"proc/vslog.html"},{"title":"GET_LUOUT – Town Energy Balance (TEB) model API docs","text":"subroutine GET_LUOUT(HPROGRAM, KLUOUT) Uses YOMHOOK MODI_MNHGET_LUOUT PARKIND1 MODI_AROGET_LUOUT MODI_LFIGET_LUOUT Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HPROGRAM integer, intent(out) :: KLUOUT Contents Source Code GET_LUOUT Source Code SUBROUTINE GET_LUOUT ( HPROGRAM , KLUOUT ) !     ####################################################### ! !!****  *GET_LUOUT* - routine to get output listing logical unit !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    01/2004 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! #ifdef SFX_LFI USE MODI_LFIGET_LUOUT #endif #ifdef SFX_MNH USE MODI_MNHGET_LUOUT #endif #ifdef SFX_ARO USE MODI_AROGET_LUOUT #endif ! IMPLICIT NONE ! ! !*       0.1   Declarations of arguments !              ------------------------- ! CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HPROGRAM ! program calling GROUND INTEGER , INTENT ( OUT ) :: KLUOUT ! Logical unit of output listing REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*       0.2   Declarations of local variables !              ------------------------------- ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'GET_LUOUT' , 0 , ZHOOK_HANDLE ) IF ( HPROGRAM == 'MESONH' ) THEN #ifdef SFX_MNH CALL MNHGET_LUOUT ( HPROGRAM , KLUOUT ) #endif ELSE IF ( HPROGRAM == 'AROME ' ) THEN #ifdef SFX_ARO CALL AROGET_LUOUT ( HPROGRAM , KLUOUT ) #endif ELSE IF ( HPROGRAM == 'LFI   ' ) THEN #ifdef SFX_LFI CALL LFIGET_LUOUT ( HPROGRAM , KLUOUT ) #endif ELSE KLUOUT = 10 END IF IF ( LHOOK ) CALL DR_HOOK ( 'GET_LUOUT' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE GET_LUOUT","tags":"","loc":"proc/get_luout.html"},{"title":"URBAN_EXCH_COEF – Town Energy Balance (TEB) model API docs","text":"subroutine URBAN_EXCH_COEF(HZ0H, PZ0_O_Z0H, PTG, PQS, PEXNS, PEXNA, PTA, PQA, PZREF, PUREF, PVMOD, PZ0, PRI, PCD, PCDN, PAC, PRA, PCH) Uses YOMHOOK MODI_SURFACE_CD MODD_CSTS MODI_WIND_THRESHOLD PARKIND1 MODI_SURFACE_AERO_COND MODI_SURFACE_RI MODI_FLXSURF3BX Arguments Type Intent Optional Attributes Name character(len=6) :: HZ0H real, intent(in) :: PZ0_O_Z0H real, intent(in), DIMENSION(:) :: PTG real, intent(in), DIMENSION(:) :: PQS real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PZ0 real, intent(out), DIMENSION(:) :: PRI real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN real, intent(out), DIMENSION(:) :: PAC real, intent(out), DIMENSION(:) :: PRA real, intent(out), DIMENSION(:) :: PCH Contents Source Code URBAN_EXCH_COEF Source Code SUBROUTINE URBAN_EXCH_COEF ( HZ0H , PZ0_O_Z0H , PTG , PQS , PEXNS , PEXNA , PTA , PQA , & PZREF , PUREF , PVMOD , PZ0 , & PRI , PCD , PCDN , PAC , PRA , PCH ) !          ####################################################################### ! !!****  *URBAN_DRAG* !! !!    PURPOSE !!    ------- ! !     Computes the surface drag coefficients over roof, road or town !     according several scientific formulations ! ! !!**  METHOD !!    ------ ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    01/2009    from urban_drag.f90 (modified by S.  Leroyer at CMC) !         01/2009 (S. Leroyer) option (HZ0H) for z0h applied on roof, road and town !!      B. Decharme    06/2009 limitation of Ri !!      B. Decharme    09/2009 limitation of Ri in surface_ri.F90 ! !------------------------------------------------------------------------------- USE MODI_SURFACE_RI USE MODI_SURFACE_CD USE MODI_SURFACE_AERO_COND USE MODI_WIND_THRESHOLD ! USE MODD_CSTS , ONLY : XKARMAN ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! USE MODI_FLXSURF3BX ! IMPLICIT NONE ! CHARACTER ( LEN = 6 ) :: HZ0H ! TEB option for z0h roof & road REAL , INTENT ( IN ) :: PZ0_O_Z0H ! z0/z0h ratio used in Mascart (1995) REAL , DIMENSION (:), INTENT ( IN ) :: PTG ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PQS ! surface specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PEXNA ! exner function ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind ! REAL , DIMENSION (:), INTENT ( IN ) :: PZ0 ! roughness length for momentum REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first ! atmospheric level REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the wind !                                             ! NOTE this is different from ZZREF !                                             ! ONLY in stand-alone/forced mode, !                                             ! NOT when coupled to a model (MesoNH) REAL , DIMENSION (:), INTENT ( OUT ) :: PRI ! Richardson number ! REAL , DIMENSION (:), INTENT ( OUT ) :: PCD ! drag coefficient for momentum REAL , DIMENSION (:), INTENT ( OUT ) :: PCDN ! neutral drag coefficient for momentum REAL , DIMENSION (:), INTENT ( OUT ) :: PAC ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PRA ! aerodynamical resistance REAL , DIMENSION (:), INTENT ( OUT ) :: PCH ! drag coefficient for heat ! !* local variables ! REAL , DIMENSION ( SIZE ( PZ0 )) :: ZZ0H ! roughness length for heat !* BRUT82 & KAND07 cases REAL , DIMENSION ( SIZE ( PTA )) :: cmu , ctu , rib , ftemp , fvap , ilmo ! temporary var for REAL , DIMENSION ( SIZE ( PTA )) :: ue , fcor , hBL , lzz0 , lzz0t , fm , fh ! flxsurf3 REAL , DIMENSION ( SIZE ( PTA )) :: z0h_roof , z0h_town , z0h_road ! local thermal roughness REAL , DIMENSION ( SIZE ( PTA )) :: zustar , zta , ztg REAL , DIMENSION ( SIZE ( PTA )) :: ZVMOD ! wind INTEGER N ! !* MASC95 case REAL , DIMENSION ( SIZE ( PTA )) :: ZDIRCOSZW ! orography slope cosine REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! !*      1.     Mascart 1995 exchange coefficients !              ---------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_EXCH_COEF' , 0 , ZHOOK_HANDLE ) IF ( HZ0H == 'MASC95' ) THEN ! ZZ0H = PZ0 / PZ0_O_Z0H ! fixed ratio for MASC95 ZDIRCOSZW = 1. ! no orography slope effect taken into account in TEB ! CALL SURFACE_RI ( PTG , PQS , PEXNS , PEXNA , PTA , PQA , & PZREF , PUREF , ZDIRCOSZW , PVMOD , PRI ) ! CALL SURFACE_CD ( PRI , PZREF , PUREF , PZ0 , ZZ0H , PCD , PCDN ) ! CALL SURFACE_AERO_COND ( PRI , PZREF , PUREF , PVMOD , PZ0 , ZZ0H , PAC , PRA , PCH ) ! ! !*      2.     Brutsaert 1982  or Kanda 2007 exchange coefficients !              --------------------------------------------------- ! ELSEIF ( HZ0H == 'BRUT82' . OR . HZ0H == 'KAND07' ) THEN ! initialisations fcor (:) = 1.0372462E-04 !RJ: can be removed N = SIZE ( PTA ) ! ! Set a minimum threshold to the wind ZVMOD (:) = WIND_THRESHOLD ( PVMOD (:), PUREF (:)) ! ! First guess of u* ZUSTAR (:) = 0.4 * ZVMOD (:) / LOG ( PUREF / PZ0 (:) ) ! IF ( HZ0H == 'KAND07' ) THEN ! Kanda 2007 ZZ0H (:) = PZ0 (:) * 7.4 * EXP ( - 1.29 * ( PZ0 (:) * zustar (:) / 1.461e-5 ) ** 0.25 ) ELSEIF ( HZ0H == 'BRUT82' ) THEN ! Brutsaert 1982 ZZ0H (:) = PZ0 (:) * 7.4 * EXP ( - 2.46 * ( PZ0 (:) * zustar (:) / 1.461e-5 ) ** 0.25 ) ENDIF ZTA = PTA / PEXNA ZTG = PTG / PEXNS CALL FLXSURF3BX ( cmu , ctu , PRI , ftemp , fvap , ilmo , & ue , fcor , ZTA , PQA , & PUREF , PZREF , ZVMOD , ZTG , PQS ,& hBL , PZ0 , ZZ0H , & lzz0 , lzz0t , fm , fh , N ) ! PCD (:) = ( cmu (:) / ue (:)) ** 2 PCDN (:) = ( XKARMAN / LOG ( PUREF (:) / PZ0 (:))) ** 2 PAC (:) = ( cmu (:) * ctu (:) / ue (:) ** 2 ) * ZVMOD (:) PRA (:) = 1. / PAC (:) PCH (:) = 1. / ( PRA (:) * ZVMOD (:)) ! END IF IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_EXCH_COEF' , 1 , ZHOOK_HANDLE ) END SUBROUTINE URBAN_EXCH_COEF","tags":"","loc":"proc/urban_exch_coef.html"},{"title":"SURFACE_RI – Town Energy Balance (TEB) model API docs","text":"subroutine SURFACE_RI(PTG, PQS, PEXNS, PEXNA, PTA, PQA, PZREF, PUREF, PDIRCOSZW, PVMOD, PRI) Uses YOMHOOK MODD_CSTS MODI_WIND_THRESHOLD PARKIND1 MODD_SURF_ATM Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PTG real, intent(in), DIMENSION(:) :: PQS real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PDIRCOSZW real, intent(in), DIMENSION(:) :: PVMOD real, intent(out), DIMENSION(:) :: PRI Contents Source Code SURFACE_RI Source Code SUBROUTINE SURFACE_RI ( PTG , PQS , PEXNS , PEXNA , PTA , PQA , & PZREF , PUREF , PDIRCOSZW , PVMOD , PRI ) !   ###################################################################### ! !!****  *SURFACE_RI* !! !!    PURPOSE !!    ------- ! !     Computes the richardson number near the ground ! ! !!**  METHOD !!    ------ ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !!    MODD_GROUND_PAR !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    22/09/98 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_CSTS , ONLY : XRV , XRD , XG USE MODD_SURF_ATM , ONLY : XRIMAX USE MODI_WIND_THRESHOLD ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PTG ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PQS ! surface specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PEXNA ! exner function ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind ! REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first ! atmospheric level REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the wind !                                             ! NOTE this is different from ZZREF !                                             ! ONLY in stand-alone/forced mode, !                                             ! NOT when coupled to a model (MesoNH) REAL , DIMENSION (:), INTENT ( IN ) :: PDIRCOSZW ! Cosine of the angle between !                                             ! the normal to the surface and !                                             ! the vertical ! REAL , DIMENSION (:), INTENT ( OUT ) :: PRI ! Richardson number ! !*      0.2    declarations of local variables ! ! REAL , DIMENSION ( SIZE ( PTG )) :: ZTHVA , ZTHVS REAL , DIMENSION ( SIZE ( PVMOD )) :: ZVMOD REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! !       1.     Richardson number !              ----------------- ! !                                                 virtual potential !                                                 temperature at the !                                                 first atmospheric level and !                                                 at the surface ! IF ( LHOOK ) CALL DR_HOOK ( 'SURFACE_RI' , 0 , ZHOOK_HANDLE ) ! ZTHVA (:) = PTA (:) / PEXNA (:) * ( 1. + ( XRV / XRD - 1. ) * PQA (:) ) ZTHVS (:) = PTG (:) / PEXNS (:) * ( 1. + ( XRV / XRD - 1. ) * PQS (:) ) ! ZVMOD (:) = WIND_THRESHOLD ( PVMOD (:), PUREF (:)) ! ! Richardson's number PRI (:) = XG * PDIRCOSZW (:) * PUREF (:) * PUREF (:) & * ( ZTHVA (:) - ZTHVS (:)) / ( 0.5 * ( ZTHVA (:) + ZTHVS (:)) ) & / ( ZVMOD (:) * ZVMOD (:)) / PZREF (:) ! PRI (:) = MIN ( PRI (:), XRIMAX ) ! IF ( LHOOK ) CALL DR_HOOK ( 'SURFACE_RI' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END SUBROUTINE SURFACE_RI","tags":"","loc":"proc/surface_ri.html"},{"title":"LAYER_E_BUDGET_GET_COEF – Town Energy Balance (TEB) model API docs","text":"subroutine LAYER_E_BUDGET_GET_COEF(PT, PTSTEP, PIMPL, PHC, PTC, PD, PA, PB, PC, PY) Uses PARKIND1 YOMHOOK Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PT real, intent(in) :: PTSTEP real, intent(in) :: PIMPL real, intent(in), DIMENSION(:,:) :: PHC real, intent(in), DIMENSION(:,:) :: PTC real, intent(in), DIMENSION(:,:) :: PD real, intent(out), DIMENSION(:,:) :: PA real, intent(out), DIMENSION(:,:) :: PB real, intent(out), DIMENSION(:,:) :: PC real, intent(out), DIMENSION(:,:) :: PY Contents Source Code LAYER_E_BUDGET_GET_COEF Source Code SUBROUTINE LAYER_E_BUDGET_GET_COEF ( PT , PTSTEP , PIMPL , PHC , PTC , PD , PA , PB , PC , PY ) !   ########################################################################## ! !!****  *LAYER_E_BUDGET_GET_COEF* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of building floor temperatures ! ! !!**  METHOD !     ------ ! !    6 : equations for evolution of Ts_floor !        ************************************************************* ! !     dTf_k(t) / dt = 1/(df_k*Cf_k) * (- 2*Kf_k-1*(Tf_k-Tf_k-1)/(df_k-1 +df_k) !                                      - 2*Kf_k  *(Tf_k-Tf_k+1)/(df_k+1 +df_k) ) ! !     dTf_1(t) / dt = 1/(df_1*Cf_1) * (- 2*Kw_1*(Tw_1-Tw_2)/(dw_1 +dw_2)) ! !       with ! !   K*_k  = (d*_k+ d*_k+1)/(d*_k/k*_k+ d*_k+1/k*_k+1) ! ! ! The system is implicited (or semi-implicited). ! ! ZIMPL=1    ---> implicit system ! ZIMPL=0.5  ---> semi-implicit system ! ZIMPL=0    ---> explicit system ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      G. Pigeon           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    15/04/09 !!                     08/10 (G. Pigeon) computation of residual of energy balance !!                                       modification of the limit condition for !!                                       the deep temp. from the deep road temp. !!                                       to zero flux condition. idem for sfce T !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PT ! floor layers temperatures REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC ! heat capacity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC ! thermal conductivity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PD ! depth of road layers REAL , DIMENSION (:,:), INTENT ( OUT ) :: PA REAL , DIMENSION (:,:), INTENT ( OUT ) :: PB REAL , DIMENSION (:,:), INTENT ( OUT ) :: PC REAL , DIMENSION (:,:), INTENT ( OUT ) :: PY REAL , INTENT ( IN ) :: PIMPL ! implicitation coefficient ! !*      0.2    declarations of local variables ! REAL :: ZIMPL ! implicit coefficient REAL :: ZEXPL ! explicit coefficient ! ! mean thermal conductivity over distance between 2 layers REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: ZMTC_O_D ! thermal capacity times layer depth REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: ZHC_D ! INTEGER :: ILAYER ! number of floor layers INTEGER :: JLAYER ! loop counter INTEGER :: JJ ! loop counter REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'LAYER_E_BUDGET_GET_COEF' , 0 , ZHOOK_HANDLE ) ! !*      1.     layer thermal properties !              ------------------------ ! ZIMPL = PIMPL ZEXPL = 1. - PIMPL ! ILAYER = SIZE ( PT , 2 ) ZMTC_O_D (:,:) = 0. ! DO JLAYER = 1 , ILAYER - 1 DO JJ = 1 , SIZE ( PT , 1 ) ZMTC_O_D ( JJ , JLAYER ) = 2. / ( PD ( JJ , JLAYER ) / PTC ( JJ , JLAYER ) + PD ( JJ , JLAYER + 1 ) / PTC ( JJ , JLAYER + 1 ) ) ZHC_D ( JJ , JLAYER ) = PHC ( JJ , JLAYER ) * PD ( JJ , JLAYER ) ENDDO END DO ! DO JJ = 1 , SIZE ( PT , 1 ) ZHC_D ( JJ , ILAYER ) = PHC ( JJ , ILAYER ) * PD ( JJ , ILAYER ) ENDDO ! !------------------------------------------------------------------------------- ! !*      3.    Surface layer coefficients !             ------------------------------ ! ! no implication for Ts and use of flux from BEM or BLD_E_BUDGET DO JLAYER = 1 , ILAYER DO JJ = 1 , SIZE ( PT , 1 ) ! IF ( JLAYER == 1 ) THEN PA ( JJ , JLAYER ) = 0. ELSE PA ( JJ , JLAYER ) = - ZIMPL * ZMTC_O_D ( JJ , JLAYER - 1 ) ENDIF ! IF ( JLAYER == ILAYER ) THEN PC ( JJ , JLAYER ) = 0. ELSE PC ( JJ , JLAYER ) = - ZIMPL * ZMTC_O_D ( JJ , JLAYER ) ENDIF ! PB ( JJ , JLAYER ) = ZHC_D ( JJ , JLAYER ) / PTSTEP PY ( JJ , JLAYER ) = ZHC_D ( JJ , JLAYER ) / PTSTEP * PT ( JJ , JLAYER ) ! IF ( JLAYER . GT . 1. ) THEN PB ( JJ , JLAYER ) = PB ( JJ , JLAYER ) + ZIMPL * ZMTC_O_D ( JJ , JLAYER - 1 ) PY ( JJ , JLAYER ) = PY ( JJ , JLAYER ) + ZEXPL * ZMTC_O_D ( JJ , JLAYER - 1 ) * ( PT ( JJ , JLAYER - 1 ) - PT ( JJ , JLAYER ) ) ENDIF ! IF ( JLAYER . LT . ILAYER ) THEN PB ( JJ , JLAYER ) = PB ( JJ , JLAYER ) + ZIMPL * ZMTC_O_D ( JJ , JLAYER ) PY ( JJ , JLAYER ) = PY ( JJ , JLAYER ) + ZEXPL * ZMTC_O_D ( JJ , JLAYER ) * ( PT ( JJ , JLAYER + 1 ) - PT ( JJ , JLAYER ) ) ENDIF ! ENDDO ! ENDDO ! IF ( LHOOK ) CALL DR_HOOK ( 'LAYER_E_BUDGET_GET_COEF' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- END SUBROUTINE LAYER_E_BUDGET_GET_COEF","tags":"","loc":"proc/layer_e_budget_get_coef.html"},{"title":"URBAN_SOLAR_ABS – Town Energy Balance (TEB) model API docs","text":"subroutine URBAN_SOLAR_ABS(TOP, T, B, DMT, PDIR_SW, PSCA_SW, PZENITH, PAZIM, PFRAC_PANEL, PALB_PANEL, PALB_GD, PSVF_GD, PALB_GRF, PDN_RF, PDF_RF, PDN_RD, PDF_RD, PREC_SW_RD, PREC_SW_SN_RD, PREC_SW_WL_A, PREC_SW_WL_B, PREC_SW_GD, PREC_SW_RF, PDIR_ALB_TWN, PSCA_ALB_TWN, PSW_RAD_GD, PREC_SW_WIN, PREF_SW_GRND, PREF_SW_FAC, PE_SHADING, OSHAD_DAY, OSHADE, OALB_ONLY) Uses MODD_DIAG_MISC_TEB_n MODD_BEM_n MODD_BEM_CST YOMHOOK MODD_CSTS PARKIND1 MODD_SURF_PAR MODD_TEB_n MODI_WINDOW_SHADING MODD_TEB_OPTION_n Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B type(DIAG_MISC_TEB_t), intent(inout) :: DMT real, intent(in), DIMENSION(:) :: PDIR_SW real, intent(in), DIMENSION(:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PZENITH real, intent(in), DIMENSION(:) :: PAZIM real, intent(in), DIMENSION(:) :: PFRAC_PANEL real, intent(in), DIMENSION(:) :: PALB_PANEL real, intent(in), DIMENSION(:) :: PALB_GD real, intent(in), DIMENSION(:) :: PSVF_GD real, intent(in), DIMENSION(:) :: PALB_GRF real, intent(in), DIMENSION(:) :: PDN_RF real, intent(in), DIMENSION(:) :: PDF_RF real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PDF_RD real, intent(out), DIMENSION(:) :: PREC_SW_RD real, intent(out), DIMENSION(:) :: PREC_SW_SN_RD real, intent(out), DIMENSION(:) :: PREC_SW_WL_A real, intent(out), DIMENSION(:) :: PREC_SW_WL_B real, intent(out), DIMENSION(:) :: PREC_SW_GD real, intent(out), DIMENSION(:) :: PREC_SW_RF real, intent(out), DIMENSION(:) :: PDIR_ALB_TWN real, intent(out), DIMENSION(:) :: PSCA_ALB_TWN real, intent(out), DIMENSION(:) :: PSW_RAD_GD real, intent(out), DIMENSION(:) :: PREC_SW_WIN real, intent(out), DIMENSION(:) :: PREF_SW_GRND real, intent(out), DIMENSION(:) :: PREF_SW_FAC real, intent(out), DIMENSION(:) :: PE_SHADING logical, intent(inout), DIMENSION(:) :: OSHAD_DAY logical, intent(in), DIMENSION(:) :: OSHADE logical, intent(in), optional :: OALB_ONLY Contents Source Code URBAN_SOLAR_ABS Source Code SUBROUTINE URBAN_SOLAR_ABS ( TOP , T , B , DMT , PDIR_SW , PSCA_SW , PZENITH , PAZIM , & PFRAC_PANEL , PALB_PANEL , PALB_GD , PSVF_GD , PALB_GRF , & PDN_RF , PDF_RF , PDN_RD , PDF_RD , PREC_SW_RD , & PREC_SW_SN_RD , PREC_SW_WL_A , PREC_SW_WL_B , & PREC_SW_GD , PREC_SW_RF , PDIR_ALB_TWN , PSCA_ALB_TWN , & PSW_RAD_GD , PREC_SW_WIN , PREF_SW_GRND , PREF_SW_FAC , & PE_SHADING , OSHAD_DAY , OSHADE , OALB_ONLY ) !   ########################################################################## ! !!****  *URBAN_SOLAR_ABS* !! !!    PURPOSE !!    ------- ! !     Computes the solar radiation flux absorbed by roofs, roads and walls. !     The absorption by roofs is trivial. ! ! !!**  METHOD !     ------ ! ! !        computation of input solar radiation on each surface !        **************************************************** ! !    direct fluxes: !    ------------- ! !    dir_Rg_road (Wm-2) =   S * 2*theta0/pi !                         - S *2/tan(zen) * h/W /pi * (1-cos(theta0)) ! !    dir_Rg_wall (Wm-2) =   S / tan(zen) /pi * (1-cos(theta0)) !                         + S * W/h * (1/2 -theta0/pi) ! !   where zen      is the zenithal angle, from horizon !         h/W      is the aspect ratio of the canyon !         S        is the direct solar radiation flux on a horizontal surface ! !         theta0 = arcsin(min(W/h * tan(zen),1)) ! !   The surfaces will keep (1-a) times these fluxes, and reflect the !   remaining ! !    scattered fluxes: !    ---------------- ! !   sca_Rg_road = sca_Rg * SVF_road ! !   sca_Rg_wall = sca_Rg * SVF_wall ! ! !    solar flux and isotropic reflections : !    ------------------------------------ ! !  after 0 reflection, the absorbed part of the flux is: ! !      ARg_r(0) = (1-a_r) (sca_Rg_road + dir_Rg_road) ! !      ARg_w(0) = (1-a_w) (sca_Rg_wall + dir_Rg_wall) ! !    and the reflected parts are ! !      RRg_r(0) = a_r (sca_Rg_road + dir_Rg_road) ! !      RRg_w(0) = a_w (sca_Rg_wall + dir_Rg_wall) ! !  after n reflection: ! !      ARg_r(n) = ARg_r(n-1) + RRg_w(n-1) * (1-  SVF_r)(1-a_r) ! !      ARg_w(n) = ARg_w(n-1) + RRg_r(n-1) *      SVF_w (1-a_w) !                            + RRg_w(n-1) * (1-2*SVF_w)(1-a_w) ! !      RRg_r(n) = (1- SVF_r) a_r RRg_w(n-1) ! !      RRg_w(n) =     SVF_w  a_w RRg_r(n-1) !                +(1-2SVF_w) a_w RRg_w(n-1) ! ! !   i.e. !                                               n-1 !      ARg_r(n) = ARg_r(0) + (1-  SVF_r)(1-a_r) SUM RRg_w(k) !                                               k=0 ! !                                               n-1 !      ARg_w(n) = ARg_w(0) +      SVF_w (1-a_w) SUM RRg_r(k) !                                               k=0 !                                               n-1 !                          + (1-2*SVF_w)(1-a_w) SUM RRg_w(k) !                                               k=0 ! ! with ! !     n                             n-1 !    SUM RRg_r(k) = (1-  SVF_r) a_r SUM RRg_w(k)      +  RRg_r(0) !    k=0                            k=0 ! !     n                             n-1 !    SUM RRg_w(k) =      SVF_w  a_w SUM RRg_r(k) !    k=0                            k=0 !                                   n-1 !                  +(1-2*SVF_w) a_w SUM RRg_w(k)      +  RRg_w(0) !                                   k=0 ! ! !   Then ! !     n                                        n-1 !    SUM RRg_w(k) =  (1-2*SVF_w)       a_w     SUM RRg_w(k) !    k=0                                       k=0 !                                              n-2 !                  + (1-  SVF_r) SVF_w a_w a_r SUM RRg_w(k) !                                              k=0 ! !                  + RRg_w(0) + SVF_w a_w RRg_r(0) ! ! ! ! !  solving this system, lead after an infinity of reflections/absorptions: ! !    inf                      RRg_w(0) + SVF_w a_w RRg_r(0) !    SUM RRg_w(k) = ---------------------------------------------------- !    k=0             1 - (1-2*SVF_w) a_w - (1-  SVF_r) SVF_w a_w a_r ! ! !    inf            (1-  SVF_r) a_r ( a_w SVF_w RRg_r(0) + RRg_w(0) ) !    SUM RRg_r(k) = ------------------------------------------------------------ + RRg_r(0) !    k=0             1 - (1-2*SVF_w) a_w - (1-  SVF_r) SVF_w a_w a_r ! ! ! ARg_r(n) and ARg_w(n) follow ! ! ! If snow is present, the albedos in all these formulae (and only these, ! not the final net radiation budget) are modified by the albedo of the ! snow-covered surface. ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !!                  21/11/00 (V. Masson)  bug in reflections for roads !!                     12/02 (A. Lemonsu) bug in diagnostic of albedo !!                     12/11 (V. Masson ) adds road direction option !!                     01/12 (V. Masson ) adds 2 different wall direct insulations !!                     04/12 (G. Pigeon) add B%XTRAN_WIN !!                     09/12 (C. de Munck-A. Lemonsu) add green roofs !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t ! USE MODD_CSTS , ONLY : XPI USE MODD_BEM_CST , ONLY : XWIN_SW_MAX USE MODD_SURF_PAR , ONLY : XUNDEF ! USE MODI_WINDOW_SHADING ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP ! 'UNIF' : classical TEB version, all walls are identical ! 'TWO ' : the two opposite walls are different & receive different solar energy TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT ! REAL , DIMENSION (:), INTENT ( IN ) :: PDIR_SW ! incoming direct solar radiation REAL , DIMENSION (:), INTENT ( IN ) :: PSCA_SW ! scattered incoming solar rad. REAL , DIMENSION (:), INTENT ( IN ) :: PZENITH ! solar zenithal angle REAL , DIMENSION (:), INTENT ( IN ) :: PAZIM ! solar azimuthal angle !                                                      ! (radian from N, clockwise) REAL , DIMENSION (:), INTENT ( IN ) :: PFRAC_PANEL ! Fraction of solar panel on roofs (-) REAL , DIMENSION (:), INTENT ( IN ) :: PALB_PANEL ! Albedo     of solar panels (-) REAL , DIMENSION (:), INTENT ( IN ) :: PALB_GD ! GD areas albedo REAL , DIMENSION (:), INTENT ( IN ) :: PSVF_GD ! GD areas sky view factor REAL , DIMENSION (:), INTENT ( IN ) :: PALB_GRF ! green roof albedo REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RF ! snow-covered roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RF ! snow-free    roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered road fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RD ! snow-free    road fraction ! !new arguments for shading REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_RD ! solar radiation received !                                                      ! by snow-free roads REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_WL_A ! solar radiation received REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_WL_B ! solar radiation received !                                                    ! by snow-free walls REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_GD ! solar radiation received !                                                    ! by GD areas REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_RF ! solar radiation received !                                                    ! by RF areas (below solar panels if any) REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_SN_RD ! solar radiation received !                                                    ! by snow-covered roads REAL , DIMENSION (:), INTENT ( OUT ) :: PDIR_ALB_TWN ! town direct albedo REAL , DIMENSION (:), INTENT ( OUT ) :: PSCA_ALB_TWN ! town diffuse albedo ! REAL , DIMENSION (:), INTENT ( OUT ) :: PSW_RAD_GD ! solar radiation reaching GD areas REAL , DIMENSION (:), INTENT ( OUT ) :: PREC_SW_WIN ! solar radiation received by windows REAL , DIMENSION (:), INTENT ( OUT ) :: PREF_SW_GRND ! total solar radiation reflected by ground REAL , DIMENSION (:), INTENT ( OUT ) :: PREF_SW_FAC ! total solar radiation reflected by wall !new arguments for shading REAL , DIMENSION (:), INTENT ( OUT ) :: PE_SHADING ! Energy that is not reflected ! by the shading, nor transmitted through ! the bld, nor absorbed by the ! [W/m2(win)] LOGICAL , DIMENSION (:), INTENT ( INOUT ) :: OSHAD_DAY ! has shading been necessary this day ? LOGICAL , DIMENSION (:), INTENT ( IN ) :: OSHADE ! are building conditions favorable for !                                                      ! shading (independantly of solar irradiance) ? ! LOGICAL , INTENT ( IN ), OPTIONAL :: OALB_ONLY ! !*      0.2    declarations of local variables ! ! REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZDIR_SW ! direct and diffuse incoming radiation REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZSCA_SW ! with a minimum to compute albedo REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZTANZEN ! tangente of solar zenithal angle REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZTHETA0 ! canyon angle for !                                                       ! which solar !                                                       ! radiation !                                                       ! reaches the road ! REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZAALB_RD ! averaged albedo REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZDIR_SW_RD ! direct radiation reaching REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZDIR_SW_WL_A ! road, wall A, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZDIR_SW_WL_B ! wall B, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZDIR_SW_GD ! GD areas, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZDIR_SW_WL ! and on average on 2 walls REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZSCA_SW_RD ! diffuse radiation reaching REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZSCA_SW_WL ! road, wall, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZSCA_SW_GD ! and GD areas ! REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_RF ! solar radiation REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_RD ! absorbed by roofs, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_WL_A ! road, wall A, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_WL_B ! wall B, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_WL ! both walls on average, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_GD ! GD areas, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_GRF ! green roof areas, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_PANEL ! solar panels, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_WIN ! window (abs+trans), and snow REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_SN_RF ! over roof, wall, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_DIR_SW_SN_RD ! and GD areas REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_RF ! solar radiation REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_RD ! absorbed by roofs, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_WL ! road, wall, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_GD ! GD areas, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_GRF ! green roof areas, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_PANEL ! solar panels, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_WIN ! window (abs+trans), and snow REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_SN_RF ! over roof and wall, REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_SCA_SW_SN_RD ! coming from diffuse rad. REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZDW ! difference of radiation !                                                       ! absorbed by the 2 walls ! REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZRD ! REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZRD_DIR ! Road direction !                                                     ! (radian from N, clockwise) REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZGD ! ! REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZREC_DIR_SW_WIN REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZREC_SCA_SW_WIN REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZAALB_WL ! REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZTRAN_WIN ! solar transmittivity of windows REAL , DIMENSION ( SIZE ( PDIR_SW )) :: ZABS_WIN ! solar transmittivity of windows LOGICAL , DIMENSION ( SIZE ( PDIR_SW )) :: G_EFF_SHAD !TRUE if shading should be active considering actual rad ! LOGICAL :: GALB_ONLY INTEGER :: JJ ! loop index REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_SOLAR_ABS' , 0 , ZHOOK_HANDLE ) ! GALB_ONLY = . FALSE . IF ( PRESENT ( OALB_ONLY )) GALB_ONLY = OALB_ONLY ! ZDIR_SW = MAX ( PDIR_SW , 0. ) ZSCA_SW = MAX ( PSCA_SW , 0.000001 ) ! ZRD_DIR = T % XROAD_DIR (:) * XPI / 18 0. ! DO JJ = 1 , SIZE ( T % XROAD ) ! IF ( T % XROAD ( JJ ) + T % XGARDEN ( JJ ). NE . 0. ) THEN ZRD ( JJ ) = T % XROAD ( JJ ) / ( T % XROAD ( JJ ) + T % XGARDEN ( JJ )) ZGD ( JJ ) = T % XGARDEN ( JJ ) / ( T % XROAD ( JJ ) + T % XGARDEN ( JJ )) ELSE ZRD ( JJ ) = 0. ZGD ( JJ ) = 0. ENDIF ! !------------------------------------------------------------------------------- ! !*      1.     SOLAR RADIATIONS FOR ROOFS !              -------------------------- ! !* One supposes that solar panels, if present, intercept all solar radiation ! ZABS_DIR_SW_PANEL ( JJ ) = ZDIR_SW ( JJ ) * ( 1. - PALB_PANEL ( JJ )) ZABS_SCA_SW_PANEL ( JJ ) = ZSCA_SW ( JJ ) * ( 1. - PALB_PANEL ( JJ )) ! !* solar energy received by the surfaces below solar panels ZABS_DIR_SW_RF ( JJ ) = ZDIR_SW ( JJ ) * ( 1. - T % XALB_ROOF ( JJ )) * ( 1. - PFRAC_PANEL ( JJ )) ZABS_DIR_SW_SN_RF ( JJ ) = ZDIR_SW ( JJ ) * ( 1. - T % TSNOW_ROOF % ALB ( JJ )) * ( 1. - PFRAC_PANEL ( JJ )) ZABS_DIR_SW_GRF ( JJ ) = ZDIR_SW ( JJ ) * ( 1. - PALB_GRF ( JJ )) * ( 1. - PFRAC_PANEL ( JJ )) ZABS_SCA_SW_RF ( JJ ) = ZSCA_SW ( JJ ) * ( 1. - T % XALB_ROOF ( JJ )) * ( 1. - PFRAC_PANEL ( JJ )) ZABS_SCA_SW_SN_RF ( JJ ) = ZSCA_SW ( JJ ) * ( 1. - T % TSNOW_ROOF % ALB ( JJ )) * ( 1. - PFRAC_PANEL ( JJ )) ZABS_SCA_SW_GRF ( JJ ) = ZSCA_SW ( JJ ) * ( 1. - PALB_GRF ( JJ )) * ( 1. - PFRAC_PANEL ( JJ )) ! !------------------------------------------------------------------------------- ! !*      2.     SOLAR RADIATIONS FOR ROADS AND WALLS !              ------------------------------------ ! IF ( ABS ( 0.5 * XPI - PZENITH ( JJ )) < 1.E-6 ) THEN IF ( 0.5 * XPI - PZENITH ( JJ ) > 0. ) ZTANZEN ( JJ ) = TAN ( 0.5 * XPI - 1.E-6 ) IF ( 0.5 * XPI - PZENITH ( JJ ) <= 0. ) ZTANZEN ( JJ ) = TAN ( 0.5 * XPI + 1.E-6 ) ELSEIF ( ABS ( PZENITH ( JJ )) < 1.E-6 ) THEN ZTANZEN ( JJ ) = SIGN ( 1. , PZENITH ( JJ )) * TAN ( 1.E-6 ) ELSE ZTANZEN ( JJ ) = TAN ( PZENITH ( JJ )) ENDIF ! ! IF ( T % XBLD ( JJ ) . GT . 0. ) THEN ! !*      2.1    radiation coefficients !              ---------------------- ! IF ( TOP % CROAD_DIR == 'UNIF' ) THEN ZTHETA0 ( JJ ) = ASIN ( MIN ( ABS ( 1. / ZTANZEN ( JJ )) / T % XCAN_HW_RATIO ( JJ ), 1. ) ) ! !*      2.2    direct solar radiation received by roads and GARDEN areas !               ------------------------------------------------------- ! ZDIR_SW_RD ( JJ ) = ( ZDIR_SW ( JJ ) * 2. * ZTHETA0 ( JJ ) / XPI & - ZDIR_SW ( JJ ) * 2. * ZTANZEN ( JJ ) / XPI & * T % XCAN_HW_RATIO ( JJ ) * ( 1. - COS ( ZTHETA0 ( JJ ))) ) ! ZDIR_SW_GD ( JJ ) = ( ZDIR_SW ( JJ ) * 2. * ZTHETA0 ( JJ ) / XPI & - ZDIR_SW ( JJ ) * 2. * ZTANZEN ( JJ ) / XPI & * T % XCAN_HW_RATIO ( JJ ) * ( 1. - COS ( ZTHETA0 ( JJ ))) ) ELSE ZDIR_SW_RD ( JJ ) = ZDIR_SW ( JJ ) * & MAX ( 0. , 1. - T % XCAN_HW_RATIO ( JJ ) * ZTANZEN ( JJ ) * ABS ( SIN ( PAZIM ( JJ ) - ZRD_DIR ( JJ )))) ZDIR_SW_GD ( JJ ) = ZDIR_SW_RD ( JJ ) END IF ! !*      2.3    direct solar radiation received by walls !              ---------------------------------------- ! ZDIR_SW_WL ( JJ ) = ( ZDIR_SW ( JJ ) - ( ZDIR_SW_RD ( JJ ) * ZRD ( JJ ) + ZDIR_SW_GD ( JJ ) * ZGD ( JJ ))) & * 0.5 / T % XCAN_HW_RATIO ( JJ ) ! ELSE ! ZDIR_SW_RD ( JJ ) = ZDIR_SW ( JJ ) ZDIR_SW_GD ( JJ ) = ZDIR_SW ( JJ ) ZDIR_SW_WL ( JJ ) = 0. ! ENDIF ! IF ( TOP % CROAD_DIR == 'UNIF' . OR . TOP % CWALL_OPT == 'UNIF' ) THEN !* if walls are averaged, then ZDIR_SW_WL_A ( JJ ) = ZDIR_SW_WL ( JJ ) ZDIR_SW_WL_B ( JJ ) = ZDIR_SW_WL ( JJ ) ELSE !* if walls are separated, then radiation reaches the wall facing sun ! Note that wall A is the one facing mostly to the South (depending to ! road orientation), and wall B in the one facing mostly to the North ! ! In case of N-S road, wall A is the West  wall (= East-facing  wall), !                  and wall B is the East  wall (= West-facing  wall) ! In case of E-W road, wall A is the North wall (= South-facing wall), !                  and wall B is the South wall (= North-facing wall) IF ( SIN ( PAZIM ( JJ ) - ZRD_DIR ( JJ )) > 0. ) THEN ZDIR_SW_WL_A ( JJ ) = 2. * ZDIR_SW_WL ( JJ ) ZDIR_SW_WL_B ( JJ ) = 0. ELSE ZDIR_SW_WL_A ( JJ ) = 0. ZDIR_SW_WL_B ( JJ ) = 2. * ZDIR_SW_WL ( JJ ) END IF END IF ! ! ! !*      2.4    diffuse solar radiation received by roads and GARDEN areas !              --------------------------------------------------------- ! ZSCA_SW_RD ( JJ ) = ZSCA_SW ( JJ ) * T % XSVF_ROAD ( JJ ) ! ZSCA_SW_GD ( JJ ) = ZSCA_SW ( JJ ) * PSVF_GD ( JJ ) ! !*      2.5    diffuse solar radiation received by walls !              ----------------------------------------- ! ZSCA_SW_WL ( JJ ) = ZSCA_SW ( JJ ) * T % XSVF_WALL ( JJ ) ! !*      2.6    total solar radiation received by GARDEN areas !              --------------------------------------------- ! PSW_RAD_GD ( JJ ) = ZDIR_SW_GD ( JJ ) + ZSCA_SW_GD ( JJ ) ! !*      2.7    averaged albedos when snow is present !              ------------------------------------- ! ZAALB_RD ( JJ ) = PDF_RD ( JJ ) * T % XALB_ROAD ( JJ ) + PDN_RD ( JJ ) * T % TSNOW_ROAD % ALB ( JJ ) ! ! ENDDO ! !*      2.7b    averaged facade albedo !              ------------------------------------- ! IF ( TOP % CBEM == 'BEM' ) THEN ! ZTRAN_WIN (:) = B % XTRAN_WIN (:) ! G_EFF_SHAD (:) = OSHADE (:). AND .( ZDIR_SW_WL (:) + ZSCA_SW_WL (:) > XWIN_SW_MAX ) ! OSHAD_DAY (:) = G_EFF_SHAD (:) . OR . OSHAD_DAY (:) ! CALL WINDOW_SHADING ( B % XSHGC , B % XSHGC_SH , OSHAD_DAY , T % XALB_WALL , & B % XABS_WIN , ZABS_WIN , B % XALB_WIN , ZTRAN_WIN ) ! ELSE ! ZABS_WIN (:) = 0. B % XALB_WIN (:) = 0. ZTRAN_WIN (:) = 0. ! ENDIF ! ZAALB_WL (:) = B % XGR (:) * B % XALB_WIN (:) + ( 1. - B % XGR (:)) * T % XALB_WALL (:) ! !*      2.8    absorption of direct incoming solar radiation !              --------------------------------------------- ! ! CALL SOLAR_REFLECTIONS ( ZDIR_SW_RD , ZDIR_SW_WL , ZDIR_SW_GD , ZABS_DIR_SW_RD , & ZABS_DIR_SW_SN_RD , ZABS_DIR_SW_WL , ZABS_DIR_SW_GD , & ZABS_DIR_SW_WIN ) ! IF ( TOP % CROAD_DIR == 'UNIF' . OR . TOP % CWALL_OPT == 'UNIF' ) THEN !* if walls are averaged, then ZABS_DIR_SW_WL_A = ZABS_DIR_SW_WL ZABS_DIR_SW_WL_B = ZABS_DIR_SW_WL ELSE !* if walls are separated, then radiation reaches the wall facing sun ! Note that wall A is the one facing mostly to the North (depending to ! road orientation), and wall B in the one facing mostly to the South. ZDW = ( 1. - T % XALB_WALL (:)) * ZAALB_WL (:) * ( 1. - 2. * T % XSVF_WALL (:)) & / ( 1. + ZAALB_WL (:) * ( 1. - 2. * T % XSVF_WALL (:))) & * 0.5 * ( ZDIR_SW_WL_A (:) - ZDIR_SW_WL_B (:)) & + 0.5 * ( 1. - T % XALB_WALL (:)) * ( ZDIR_SW_WL_A - ZDIR_SW_WL_B ) ZABS_DIR_SW_WL_A = ZABS_DIR_SW_WL + ZDW ZABS_DIR_SW_WL_B = ZABS_DIR_SW_WL - ZDW END IF ! !*      2.9    absorption of diffuse incoming solar radiation !              ---------------------------------------------- ! CALL SOLAR_REFLECTIONS ( ZSCA_SW_RD , ZSCA_SW_WL , ZSCA_SW_GD , & ZABS_SCA_SW_RD , ZABS_SCA_SW_SN_RD , & ZABS_SCA_SW_WL , ZABS_SCA_SW_GD , ZABS_SCA_SW_WIN ) ! ! solar flux reflected for wall and road ! PREF_SW_GRND = ZRD * T % XALB_ROAD / ( 1. - T % XALB_ROAD ) * ( ZABS_DIR_SW_RD + ZABS_SCA_SW_RD ) & + ZGD * PALB_GD / ( 1. - PALB_GD ) * ( ZABS_DIR_SW_GD + ZABS_SCA_SW_GD ) ! PREF_SW_FAC = ( 1 - B % XGR ) * T % XALB_WALL / ( 1. - T % XALB_WALL ) * ( ZABS_DIR_SW_WL + ZABS_SCA_SW_WL ) & + B % XGR * B % XALB_WIN / ( 1 - B % XALB_WIN ) * ( ZABS_DIR_SW_WIN + ZABS_SCA_SW_WIN ) ! !------------------------------------------------------------------------------- ! !*      3.     Town albedo !              ----------- ! !*      3.1    direct albedo !              ------------- ! CALL TOWN_ALBEDO ( ZDIR_SW , ZABS_DIR_SW_RF , ZABS_DIR_SW_SN_RF , & ZABS_DIR_SW_RD , ZABS_DIR_SW_SN_RD , ZABS_DIR_SW_WL , & ZABS_DIR_SW_GD , ZABS_DIR_SW_GRF , ZABS_DIR_SW_WIN , & ZABS_DIR_SW_PANEL , PDIR_ALB_TWN ) ! !*      3.2    direct albedo !              ------------- ! CALL TOWN_ALBEDO ( ZSCA_SW , ZABS_SCA_SW_RF , ZABS_SCA_SW_SN_RF , & ZABS_SCA_SW_RD , ZABS_SCA_SW_SN_RD , ZABS_SCA_SW_WL , & ZABS_SCA_SW_GD , ZABS_SCA_SW_GRF , ZABS_SCA_SW_WIN , & ZABS_SCA_SW_PANEL , PSCA_ALB_TWN ) ! WHERE ( PDIR_ALB_TWN == XUNDEF ) PDIR_ALB_TWN = PSCA_ALB_TWN ! IF ( GALB_ONLY ) THEN IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_SOLAR_ABS' , 1 , ZHOOK_HANDLE ) RETURN ENDIF !------------------------------------------------------------------------------- ! !*      4.     Trivial cases !              ------------- ! WHERE ( PDIR_SW (:) == 0. ) ZABS_DIR_SW_RF (:) = 0. ZABS_DIR_SW_RD (:) = 0. ZABS_DIR_SW_WL_A (:) = 0. ZABS_DIR_SW_WL_B (:) = 0. ZABS_DIR_SW_GD (:) = 0. ZABS_DIR_SW_GRF (:) = 0. ZABS_DIR_SW_PANEL (:) = 0. ZABS_DIR_SW_WIN (:) = 0. ZABS_DIR_SW_SN_RF (:) = 0. ZABS_DIR_SW_SN_RD (:) = 0. END WHERE ! WHERE ( PSCA_SW (:) == 0. ) ZABS_SCA_SW_RF (:) = 0. ZABS_SCA_SW_RD (:) = 0. ZABS_SCA_SW_WL (:) = 0. ZABS_SCA_SW_GD (:) = 0. ZABS_SCA_SW_GRF (:) = 0. ZABS_SCA_SW_PANEL (:) = 0. ZABS_SCA_SW_WIN (:) = 0. ZABS_SCA_SW_SN_RF (:) = 0. ZABS_SCA_SW_SN_RD (:) = 0. END WHERE ! DMT % XABS_SW_ROOF (:) = 0. DMT % XABS_SW_ROAD (:) = 0. DMT % XABS_SW_WALL_A (:) = 0. DMT % XABS_SW_WALL_B (:) = 0. DMT % XABS_SW_GARDEN (:) = 0. DMT % XABS_SW_GREENROOF (:) = 0. DMT % XABS_SW_SNOW_ROOF (:) = 0. DMT % XABS_SW_SNOW_ROAD (:) = 0. IF ( TOP % CBEM == \"BEM\" ) THEN DMT % XABS_SW_WIN (:) = 0. ENDIF ! PREC_SW_WIN (:) = 0. PREC_SW_RD (:) = 0. PREC_SW_WL_A (:) = 0. PREC_SW_WL_B (:) = 0. PREC_SW_GD (:) = 0. PREC_SW_SN_RD (:) = 0. PREC_SW_RF (:) = 0. ! !------------------------------------------------------------------------------- ! ! IF ( TOP % CBEM == 'BEM' ) THEN ! DO JJ = 1 , SIZE ( T % XROAD ) ! ! solar radiation absorbed (but not transmitted) by windows ! ZREC_DIR_SW_WIN ( JJ ) = ZABS_DIR_SW_WIN ( JJ ) / ( 1. - B % XALB_WIN ( JJ )) ZREC_SCA_SW_WIN ( JJ ) = ZABS_SCA_SW_WIN ( JJ ) / ( 1. - B % XALB_WIN ( JJ )) ! PREC_SW_WIN ( JJ ) = ZREC_DIR_SW_WIN ( JJ ) + ZREC_SCA_SW_WIN ( JJ ) ! DMT % XABS_SW_WIN ( JJ ) = ( ZREC_DIR_SW_WIN ( JJ ) + ZREC_SCA_SW_WIN ( JJ )) * ZABS_WIN ( JJ ) ! DMT % XTR_SW_WIN ( JJ ) = PREC_SW_WIN ( JJ ) * ZTRAN_WIN ( JJ ) ! ENDDO ! ENDIF ! DO JJ = 1 , SIZE ( T % XROAD ) ! !*      5.     Total solar radiation absorbed by each surface !              ---------------------------------------------- ! ! solar radiation absorbed by roofs ! DMT % XABS_SW_ROOF ( JJ ) = ZABS_DIR_SW_RF ( JJ ) + ZABS_SCA_SW_RF ( JJ ) ! ! solar radiation absorbed by roads ! DMT % XABS_SW_ROAD ( JJ ) = ZABS_DIR_SW_RD ( JJ ) + ZABS_SCA_SW_RD ( JJ ) ! ! solar radiation absorbed by GARDEN areas ! DMT % XABS_SW_GARDEN ( JJ ) = ZABS_DIR_SW_GD ( JJ ) + ZABS_SCA_SW_GD ( JJ ) ! ! solar radiation absorbed by GRF areas ! DMT % XABS_SW_GREENROOF ( JJ ) = ZABS_DIR_SW_GRF ( JJ ) + ZABS_SCA_SW_GRF ( JJ ) ! ! solar radiation absorbed by walls ! DMT % XABS_SW_WALL_A ( JJ ) = ZABS_DIR_SW_WL_A ( JJ ) + ZABS_SCA_SW_WL ( JJ ) DMT % XABS_SW_WALL_B ( JJ ) = ZABS_DIR_SW_WL_B ( JJ ) + ZABS_SCA_SW_WL ( JJ ) ! ! ! solar radiation absorbed by snow on roofs ! DMT % XABS_SW_SNOW_ROOF ( JJ ) = ZABS_DIR_SW_SN_RF ( JJ ) + ZABS_SCA_SW_SN_RF ( JJ ) ! ! solar radiation absorbed by snow on roads ! DMT % XABS_SW_SNOW_ROAD ( JJ ) = ZABS_DIR_SW_SN_RD ( JJ ) + ZABS_SCA_SW_SN_RD ( JJ ) ! !------------------------------------------------------------------------------- ! !*      6.     total solar radiation received by roads and GARDEN areas !              ------------------------------------------------------- ! PREC_SW_RD ( JJ ) = DMT % XABS_SW_ROAD ( JJ ) / ( 1. - T % XALB_ROAD ( JJ )) ! PREC_SW_SN_RD ( JJ ) = DMT % XABS_SW_SNOW_ROAD ( JJ ) / ( 1. - T % TSNOW_ROAD % ALB ( JJ )) ! PREC_SW_WL_A ( JJ ) = DMT % XABS_SW_WALL_A ( JJ ) / ( 1. - T % XALB_WALL ( JJ )) PREC_SW_WL_B ( JJ ) = DMT % XABS_SW_WALL_B ( JJ ) / ( 1. - T % XALB_WALL ( JJ )) ! PREC_SW_GD ( JJ ) = DMT % XABS_SW_GARDEN ( JJ ) / ( 1. - PALB_GD ( JJ )) ! !*      6.2    total solar radiation received by roof surfaces below solar panels ! PREC_SW_RF ( JJ ) = ( PDIR_SW ( JJ ) + PSCA_SW ( JJ )) * ( 1. - PFRAC_PANEL ( JJ )) ! !------------------------------------------------------------------------------- ! !*      7.     total solar radiation transmitted inside building !*             and energy not ref., nor absorbed, nor transmitted !              -------------------------------------------------- ! !               [W/m2(bld)] PE_SHADING ( JJ ) = PREC_SW_WIN ( JJ ) * ( 1. - B % XALB_WIN ( JJ ) - ZABS_WIN ( JJ ) - ZTRAN_WIN ( JJ )) !               [W/m2(win)] ENDDO ! IF ( TOP % LSOLAR_PANEL ) THEN ! DO JJ = 1 , SIZE ( T % XROAD ) ! ! solar radiation absorbed by solar panels ! DMT % XABS_SW_PANEL ( JJ ) = ZABS_DIR_SW_PANEL ( JJ ) + ZABS_SCA_SW_PANEL ( JJ ) ! ENDDO ! ENDIF ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_SOLAR_ABS' , 1 , ZHOOK_HANDLE ) CONTAINS ! !------------------------------------------------------------------------------- SUBROUTINE SOLAR_REFLECTIONS ( ZSW_RD , ZSW_WL , ZSW_GD , ZABS_SW_RD , ZABS_SW_SN_RD , & ZABS_SW_WL , ZABS_SW_GD , ZABS_SW_WIN ) ! REAL , DIMENSION (:), INTENT ( IN ) :: ZSW_RD ! solar radiation received by road, REAL , DIMENSION (:), INTENT ( IN ) :: ZSW_WL ! wall, and GD areas REAL , DIMENSION (:), INTENT ( IN ) :: ZSW_GD ! before reflection REAL , DIMENSION (:), INTENT ( OUT ) :: ZABS_SW_RD ! solar radiation absorbed by REAL , DIMENSION (:), INTENT ( OUT ) :: ZABS_SW_SN_RD ! solar radiation absorbed by REAL , DIMENSION (:), INTENT ( OUT ) :: ZABS_SW_WL ! road, snow over road, and wall REAL , DIMENSION (:), INTENT ( OUT ) :: ZABS_SW_GD ! solar radiation absorbed by garden REAL , DIMENSION (:), INTENT ( OUT ) :: ZABS_SW_WIN ! solar radiation absorbed by window ! REAL , DIMENSION ( SIZE ( ZSW_RD )) :: ZREF0_SW_RD ! first solar reflection REAL , DIMENSION ( SIZE ( ZSW_RD )) :: ZREF0_SW_WL ! against road, wall REAL , DIMENSION ( SIZE ( ZSW_RD )) :: ZREF0_SW_GD ! and GD areas REAL , DIMENSION ( SIZE ( ZSW_RD )) :: ZSREF_SW_RD ! sum of all reflections REAL , DIMENSION ( SIZE ( ZSW_RD )) :: ZSREF_SW_WL ! against road, wall, REAL , DIMENSION ( SIZE ( ZSW_RD )) :: ZSREF_SW_GD ! and GD areas ! REAL , DIMENSION ( SIZE ( ZSW_RD )) :: ZWORK1 , ZWORK2 , ZDENOM INTEGER :: JJ REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'SOLAR_REFLECTIONS' , 0 , ZHOOK_HANDLE ) ! DO JJ = 1 , SIZE ( ZSW_RD ) !*      A.     first solar radiation reflection !              -------------------------------- ! ZREF0_SW_RD ( JJ ) = ZAALB_RD ( JJ ) * ZSW_RD ( JJ ) ! ZREF0_SW_GD ( JJ ) = PALB_GD ( JJ ) * ZSW_GD ( JJ ) ! ZREF0_SW_WL ( JJ ) = ZAALB_WL ( JJ ) * ZSW_WL ( JJ ) ! !*      B.     sum of solar radiation reflected !              -------------------------------- ! ZDENOM ( JJ ) = 1. - ( 1. - 2. * T % XSVF_WALL ( JJ )) * T % XALB_WALL ( JJ ) - ( 1. - T % XSVF_ROAD ( JJ )) * & T % XSVF_WALL ( JJ ) * T % XALB_WALL ( JJ ) * ZAALB_RD ( JJ ) * ZRD ( JJ ) & - ( 1. - PSVF_GD ( JJ )) * & T % XSVF_WALL ( JJ ) * T % XALB_WALL ( JJ ) * PALB_GD ( JJ ) * ZGD ( JJ ) ZWORK1 ( JJ ) = T % XSVF_WALL ( JJ ) * T % XALB_WALL ( JJ ) * ZRD ( JJ ) ZWORK2 ( JJ ) = T % XSVF_WALL ( JJ ) * T % XALB_WALL ( JJ ) * ZGD ( JJ ) ! ! ZSREF_SW_WL ( JJ ) = ( ZREF0_SW_WL ( JJ ) + ZWORK1 ( JJ ) * ZREF0_SW_RD ( JJ ) & + ZWORK2 ( JJ ) * ZREF0_SW_GD ( JJ )) / ZDENOM ( JJ ) ZSREF_SW_RD ( JJ ) = (( 1. - T % XSVF_ROAD ( JJ )) * ZAALB_RD ( JJ ) * ZREF0_SW_WL ( JJ ) & + ( 1. - T % XSVF_ROAD ( JJ )) * ZAALB_RD ( JJ ) * ZWORK1 ( JJ ) * ZREF0_SW_RD ( JJ ) & + ( 1. - T % XSVF_ROAD ( JJ )) * ZAALB_RD ( JJ ) * ZWORK2 ( JJ ) * ZREF0_SW_GD ( JJ )) & / ZDENOM ( JJ ) + ZREF0_SW_RD ( JJ ) ZSREF_SW_GD ( JJ ) = (( 1. - PSVF_GD ( JJ )) * PALB_GD ( JJ ) * ZREF0_SW_WL ( JJ ) & + ( 1. - PSVF_GD ( JJ )) * PALB_GD ( JJ ) * ZWORK1 ( JJ ) * ZREF0_SW_RD ( JJ ) & + ( 1. - PSVF_GD ( JJ )) * PALB_GD ( JJ ) * ZWORK2 ( JJ ) * ZREF0_SW_GD ( JJ ) )& / ZDENOM ( JJ ) + ZREF0_SW_GD ( JJ ) ! !*      C.     total solar radiation received by roads and GD areas !              ------------------------------------------------------- ! ZABS_SW_RD ( JJ ) = ( 1. - T % XALB_ROAD ( JJ )) * ( ZSW_RD ( JJ ) + ZSREF_SW_WL ( JJ ) * ( 1. - T % XSVF_ROAD ( JJ ))) ! ZABS_SW_SN_RD ( JJ ) = ( 1. - T % TSNOW_ROAD % ALB ( JJ )) * & ( ZSW_RD ( JJ ) + ZSREF_SW_WL ( JJ ) * ( 1. - T % XSVF_ROAD ( JJ ))) ! ZABS_SW_GD ( JJ ) = ( 1. - PALB_GD ( JJ )) * ( ZSW_GD ( JJ ) + ZSREF_SW_WL ( JJ ) * ( 1. - PSVF_GD ( JJ ))) ! ! !*      D.     total solar radiation received by walls !              --------------------------------------- ! ZABS_SW_WL ( JJ ) = ( 1. - T % XALB_WALL ( JJ )) & * ( ZSW_WL ( JJ ) & + ZSREF_SW_RD ( JJ ) * T % XSVF_WALL ( JJ ) * ZRD ( JJ ) & + ZSREF_SW_GD ( JJ ) * T % XSVF_WALL ( JJ ) * ZGD ( JJ ) & + ZSREF_SW_WL ( JJ ) * ( 1. - 2. * T % XSVF_WALL ( JJ )) ) ! ZABS_SW_WIN ( JJ ) = ( 1. - B % XALB_WIN ( JJ )) & * ( ZSW_WL ( JJ ) & + ZSREF_SW_RD ( JJ ) * T % XSVF_WALL ( JJ ) * ZRD ( JJ ) & + ZSREF_SW_GD ( JJ ) * T % XSVF_WALL ( JJ ) * ZGD ( JJ ) & + ZSREF_SW_WL ( JJ ) * ( 1. - 2. * T % XSVF_WALL ( JJ )) ) ! ENDDO ! IF ( LHOOK ) CALL DR_HOOK ( 'SOLAR_REFLECTIONS' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE SOLAR_REFLECTIONS ! !------------------------------------------------------------------------------- ! SUBROUTINE TOWN_ALBEDO ( ZSW , ZABS_SW_RF , ZABS_SW_SN_RF , ZABS_SW_RD , ZABS_SW_SN_RD ,& ZABS_SW_WL , ZABS_SW_GD , ZABS_SW_GRF , ZABS_SW_WIN , & ZABS_SW_PANEL , ZALBEDO ) ! REAL , DIMENSION (:), INTENT ( IN ) :: ZSW ! incoming solar radiation REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_RF ! solar radiation absorbed by roofs REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_RD ! solar radiation absorbed by roads REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_WL ! solar radiation absorbed by walls REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_WIN ! solar radiation absorbed & transmitted by windows REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_GD ! solar radiation absorbed by GARDEN areas REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_GRF ! solar radiation absorbed by green roof areas REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_SN_RF ! solar radiation absorbed by roof snow REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_SN_RD ! solar radiation absorbed by road snow REAL , DIMENSION (:), INTENT ( IN ) :: ZABS_SW_PANEL ! solar radiation absorbed by solar panels REAL , DIMENSION (:), INTENT ( OUT ) :: ZALBEDO ! town averaged albedo REAL , DIMENSION ( SIZE ( ZSW )) :: ZSW_UP ! outgoing solar radiation INTEGER :: JJ REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'TOWN_ALBEDO' , 0 , ZHOOK_HANDLE ) DO JJ = 1 , SIZE ( ZSW ) ZSW_UP ( JJ ) = ZSW ( JJ ) & - ( T % XBLD ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * PDF_RF ( JJ ) * ZABS_SW_RF ( JJ )& + T % XBLD ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * PDN_RF ( JJ ) * ZABS_SW_SN_RF ( JJ )& + T % XBLD ( JJ ) * T % XGREENROOF ( JJ ) * ZABS_SW_GRF ( JJ )& + T % XBLD ( JJ ) * PFRAC_PANEL ( JJ ) * ZABS_SW_PANEL ( JJ )& + T % XROAD ( JJ ) * PDF_RD ( JJ ) * ZABS_SW_RD ( JJ ) & + T % XROAD ( JJ ) * PDN_RD ( JJ ) * ZABS_SW_SN_RD ( JJ )& + T % XGARDEN ( JJ ) * ZABS_SW_GD ( JJ ) & + T % XWALL_O_HOR ( JJ ) * ( 1. - B % XGR ( JJ )) * ZABS_SW_WL ( JJ ) & + T % XWALL_O_HOR ( JJ ) * B % XGR ( JJ ) * ZABS_SW_WIN ( JJ ) ) ! IF ( ZSW ( JJ ) > 0. ) THEN ZALBEDO ( JJ ) = ZSW_UP ( JJ ) / ZSW ( JJ ) ELSE ZALBEDO ( JJ ) = XUNDEF END IF ! ENDDO IF ( LHOOK ) CALL DR_HOOK ( 'TOWN_ALBEDO' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE TOWN_ALBEDO ! !------------------------------------------------------------------------------- ! END SUBROUTINE URBAN_SOLAR_ABS","tags":"","loc":"proc/urban_solar_abs.html"},{"title":"FLAG_GR_SNOW – Town Energy Balance (TEB) model API docs","text":"subroutine FLAG_GR_SNOW(KFLAG, OMASK, TPSNOW) Uses YOMHOOK MODD_SURF_PAR PARKIND1 MODD_TYPE_SNOW Arguments Type Intent Optional Attributes Name integer, intent(in) :: KFLAG logical, intent(in), DIMENSION(:) :: OMASK type(SURF_SNOW), intent(inout) :: TPSNOW Contents Source Code FLAG_GR_SNOW Source Code SUBROUTINE FLAG_GR_SNOW ( KFLAG , OMASK , TPSNOW ) !     ########################################################## ! !!****  *FLAG_GR_SNOW* - routine to flag snow surface fields !! !!    PURPOSE !!    ------- !       Initialize snow surface fields. ! !!**  METHOD !!    ------ !! !! !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original       10/2011 !!      P. Samuelsson  07/2014 Added snow albedos !----------------------------------------------------------------------------- ! !*       0.    DECLARATIONS ! USE MODD_TYPE_SNOW ! USE MODD_SURF_PAR , ONLY : XUNDEF ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*       0.1   declarations of arguments ! INTEGER , INTENT ( IN ) :: KFLAG ! 1 : to put physical values to run ISBA afterwards !                            ! 2 : to flag with XUNDEF value for points wihtout LOGICAL , DIMENSION (:), INTENT ( IN ) :: OMASK ! T: points where snow values !                                          !    must be flagged TYPE ( SURF_SNOW ), INTENT ( INOUT ) :: TPSNOW ! snow characteristics ! !*       0.2   declarations of local variables ! REAL :: ZVAL INTEGER :: JLAYER REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'FLAG_GR_SNOW' , 0 , ZHOOK_HANDLE ) ! IF ( KFLAG == 1 ) THEN ZVAL = 0. ELSEIF ( KFLAG == 2 ) THEN ZVAL = XUNDEF ENDIF ! DO JLAYER = 1 , TPSNOW % NLAYER ! WHERE ( OMASK (:)) TPSNOW % WSNOW (:, JLAYER ) = ZVAL ! IF ( KFLAG == 1 ) THEN ! WHERE ( OMASK (:)) TPSNOW % RHO (:, JLAYER ) = XUNDEF ! IF ( SIZE ( TPSNOW % TEMP ) > 0 ) THEN WHERE ( OMASK (:)) TPSNOW % TEMP (:, JLAYER ) = XUNDEF TPSNOW % HEAT (:, JLAYER ) = XUNDEF END WHERE ENDIF ! IF ( SIZE ( TPSNOW % T ) > 0 ) WHERE ( OMASK (:)) TPSNOW % T (:, JLAYER ) = XUNDEF ! IF ( SIZE ( TPSNOW % GRAN1 ) > 0 ) THEN WHERE ( OMASK (:)) TPSNOW % GRAN1 (:, JLAYER ) = XUNDEF TPSNOW % GRAN2 (:, JLAYER ) = XUNDEF TPSNOW % HIST (:, JLAYER ) = XUNDEF TPSNOW % AGE (:, JLAYER ) = XUNDEF END WHERE END IF ! ENDIF ! ENDDO ! IF ( KFLAG == 1 ) THEN ! WHERE ( OMASK (:)) TPSNOW % ALB (:) = XUNDEF WHERE ( OMASK (:)) TPSNOW % ALBVIS (:) = XUNDEF WHERE ( OMASK (:)) TPSNOW % ALBNIR (:) = XUNDEF WHERE ( OMASK (:)) TPSNOW % ALBFIR (:) = XUNDEF ! IF ( SIZE ( TPSNOW % EMIS ) > 0 ) THEN WHERE ( OMASK (:)) TPSNOW % EMIS (:) = XUNDEF TPSNOW % TS (:) = XUNDEF END WHERE END IF ! ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( 'FLAG_GR_SNOW' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE FLAG_GR_SNOW","tags":"","loc":"proc/flag_gr_snow.html"},{"title":"FACADE_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"subroutine FACADE_E_BUDGET(TOP, T, B, DMT, PTSTEP, PDN_RD, PRHOA, PAC_WL, PAC_BLD, PLW_RAD, PPS, PEXNS, PT_CANYON, PTS_RD, PTSN_RD, PTS_GD, PTS_FL, PLW_WA_TO_WB, PLW_R_TO_WA, PLW_R_TO_WB, PLW_G_TO_WA, PLW_G_TO_WB, PLW_S_TO_WA, PLW_S_TO_WB, PLW_NR_TO_WA, PLW_NR_TO_WB, PLW_WIN_TO_WA, PLW_WIN_TO_WB, PLW_S_TO_WIN, PLW_WA_TO_WIN, PLW_WB_TO_WIN, PLW_R_TO_WIN, PLW_G_TO_WIN, PLW_NR_TO_WIN, PFLX_BLD_WL_A, PDQS_WL_A, PFLX_BLD_WL_B, PDQS_WL_B, PEMIT_LW_FAC, PIMB_WL, PRADHT_IN, PRAD_RF_WL, PRAD_RF_WIN, PRAD_WL_FL, PRAD_WL_MA, PRAD_WIN_FL, PRAD_WIN_MA, PCONV_WL_BLD, PCONV_WIN_BLD, PAC_WIN, PLOAD_IN_WL, PLOAD_IN_WIN) Uses MODI_WALL_LAYER_E_BUDGET MODD_DIAG_MISC_TEB_n MODD_BEM_n YOMHOOK MODD_CSTS MODI_WINDOW_E_BUDGET PARKIND1 MODD_SURF_PAR MODD_TEB_n MODD_TEB_OPTION_n Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B type(DIAG_MISC_TEB_t), intent(inout) :: DMT real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PAC_WL real, intent(in), DIMENSION(:) :: PAC_BLD real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PT_CANYON real, intent(in), DIMENSION(:) :: PTS_RD real, intent(in), DIMENSION(:) :: PTSN_RD real, intent(in), DIMENSION(:) :: PTS_GD real, intent(in), DIMENSION(:) :: PTS_FL real, intent(in), DIMENSION(:) :: PLW_WA_TO_WB real, intent(in), DIMENSION(:) :: PLW_R_TO_WA real, intent(in), DIMENSION(:) :: PLW_R_TO_WB real, intent(in), DIMENSION(:) :: PLW_G_TO_WA real, intent(in), DIMENSION(:) :: PLW_G_TO_WB real, intent(in), DIMENSION(:) :: PLW_S_TO_WA real, intent(in), DIMENSION(:) :: PLW_S_TO_WB real, intent(in), DIMENSION(:) :: PLW_NR_TO_WA real, intent(in), DIMENSION(:) :: PLW_NR_TO_WB real, intent(in), DIMENSION(:) :: PLW_WIN_TO_WA real, intent(in), DIMENSION(:) :: PLW_WIN_TO_WB real, intent(in), DIMENSION(:) :: PLW_S_TO_WIN real, intent(in), DIMENSION(:) :: PLW_WA_TO_WIN real, intent(in), DIMENSION(:) :: PLW_WB_TO_WIN real, intent(in), DIMENSION(:) :: PLW_R_TO_WIN real, intent(in), DIMENSION(:) :: PLW_G_TO_WIN real, intent(in), DIMENSION(:) :: PLW_NR_TO_WIN real, intent(out), DIMENSION(:) :: PFLX_BLD_WL_A real, intent(inout), DIMENSION(:) :: PDQS_WL_A real, intent(out), DIMENSION(:) :: PFLX_BLD_WL_B real, intent(inout), DIMENSION(:) :: PDQS_WL_B real, intent(out), DIMENSION(:) :: PEMIT_LW_FAC real, intent(out), DIMENSION(:) :: PIMB_WL real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PRAD_RF_WL real, intent(in), DIMENSION(:) :: PRAD_RF_WIN real, intent(out), DIMENSION(:) :: PRAD_WL_FL real, intent(out), DIMENSION(:) :: PRAD_WL_MA real, intent(out), DIMENSION(:) :: PRAD_WIN_FL real, intent(out), DIMENSION(:) :: PRAD_WIN_MA real, intent(out), DIMENSION(:) :: PCONV_WL_BLD real, intent(out), DIMENSION(:) :: PCONV_WIN_BLD real, intent(in), DIMENSION(:) :: PAC_WIN real, intent(in), DIMENSION(:) :: PLOAD_IN_WL real, intent(in), DIMENSION(:) :: PLOAD_IN_WIN Contents Source Code FACADE_E_BUDGET Source Code SUBROUTINE FACADE_E_BUDGET ( TOP , T , B , DMT , PTSTEP , PDN_RD , PRHOA , PAC_WL , PAC_BLD , & PLW_RAD , PPS , PEXNS , PT_CANYON , PTS_RD , PTSN_RD , PTS_GD , & PTS_FL , PLW_WA_TO_WB , PLW_R_TO_WA , PLW_R_TO_WB , & PLW_G_TO_WA , PLW_G_TO_WB , PLW_S_TO_WA , PLW_S_TO_WB , & PLW_NR_TO_WA , PLW_NR_TO_WB , PLW_WIN_TO_WA , PLW_WIN_TO_WB , & PLW_S_TO_WIN , PLW_WA_TO_WIN , PLW_WB_TO_WIN , PLW_R_TO_WIN ,& PLW_G_TO_WIN , PLW_NR_TO_WIN , PFLX_BLD_WL_A , PDQS_WL_A , & PFLX_BLD_WL_B , PDQS_WL_B , PEMIT_LW_FAC , PIMB_WL , & PRADHT_IN , PRAD_RF_WL , PRAD_RF_WIN , PRAD_WL_FL , & PRAD_WL_MA , PRAD_WIN_FL , PRAD_WIN_MA , PCONV_WL_BLD , & PCONV_WIN_BLD , PAC_WIN , PLOAD_IN_WL , PLOAD_IN_WIN ) ! !   ########################################################################## ! !!****  *FACADE_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evolution of wall and window temperature from !     wall_layer_e_budget et window_e_budget ! ! !!**  METHOD !     ------ ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      G. Pigeon           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    10/11/2011 !!      G. Pigeon     /09/2012: new conv. coef for indoor/outdoor !!      G. Pigeon     /10/2012: new arg. : solar heat load for indoor !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS , ONLY : XCPD ! USE MODI_WALL_LAYER_E_BUDGET USE MODI_WINDOW_E_BUDGET USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT ! REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered fraction on roads REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! rho REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WL ! aerodynamical conductance !                                                 ! between wall and canyon REAL , DIMENSION (:), INTENT ( IN ) :: PAC_BLD ! aerodynamical conductance ! inside the building itself REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface Exner function REAL , DIMENSION (:), INTENT ( IN ) :: PT_CANYON ! air canyon temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_RD ! road surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTSN_RD ! road snow temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GD ! green area surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_FL ! floor layers temperatures [K] ! REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_WB ! LW interactions wall  -> wall (both versions) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WA ! LW interactions road -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WB ! LW interactions road -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WA ! LW interactions garden -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WB ! LW interactions garden -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WA ! LW interactions sky   -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WB ! LW interactions sky   -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WA ! LW interactions road(snow) -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WB ! LW interactions road(snow) -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_WIN ! Radiative heat trasfer coeff wall-window ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_WIN ! Radiative heat trasfer coeff wall-window ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WIN ! Radiative heat trasfer coeff window-sky ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_WA ! Radiative heat trasfer coeff window-wall ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_WB ! Radiative heat trasfer coeff window-wall ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WIN ! Radiative heat trasfer coeff window-road ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WIN ! Radiative heat trasfer coeff window-garden REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WIN ! Radiative heat trasfer coeff window-snow ! REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_WL_A ! flux from bld to wall REAL , DIMENSION (:), INTENT ( INOUT ) :: PDQS_WL_A ! heat storage inside the wall REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_WL_B ! flux from bld to wall REAL , DIMENSION (:), INTENT ( INOUT ) :: PDQS_WL_B ! heat storage inside the wall REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_FAC ! LW flux emitted by the facade (W/m2 of facade) REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_WL ! wall residual energy imbalance ! for verification [W m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_WL ! rad. fluxes from roof to wall [W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_WIN ! rad. fluxes from roof to win [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WL_FL ! rad. fluxes from wall to floor [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WL_MA ! rad. fluxes from wall to mass [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WIN_FL ! rad. fluxes from window to floor [W m-2(win)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WIN_MA ! rad. fluxes from window to mass [W m-2(win)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_WL_BLD ! conv. fluxes from wall to bld [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_WIN_BLD ! conv. fluxes from window to bld [W m-2(wind.)] REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WIN ! window aerodynamic conductance ! REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_IN_WL ! solar + inter. heat gains W/m2 [wall] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_IN_WIN ! solar + inter. heat gains W/m2 [win] !*      0.2    declarations of local variables ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZRAD_WL_WIN ! rad. fluxes between averaged wall and win [W m-2(wall)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZRAD_WL_A_WIN ! rad. fluxes between one wall and win [W m-2(wall)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZEMIS_WIN ! window emissivity REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZEMIT_LW_WIN ! Longwave radiation emitted by the window [W m-2(window)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZEMIT_LW_WL_A ! Longwave radiation emitted by the wall [W m-2(wall)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZEMIT_LW_WL_B ! Longwave radiation emitted by the wall [W m-2(wall)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZTS_WL_A ! surface temperature of wall A at previous time-step REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZTS_WL_B ! surface temperature of wall B at previous time-step REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZTI_WL_A ! internal temperature of wall A at previous time-step REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZTI_WL_B ! internal temperature of wall B at previous time-step REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZTS_WL ! surface temperature of averaged wall at new time-step REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZIMB_WL ! wall residual energy imbalance for verification [W m-2] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZRAD_WL_FL ! rad. fluxes from wall to floor [W m-2(wall)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZRAD_WL_MA ! rad. fluxes from wall to mass [W m-2(wall)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZCONV_WL_BLD ! conv. fluxes from wall to bld [W m-2(wall)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZLW_W_TO_WIN ! Radiative heat trasfer coeff wall-window [W K-1 m-2] INTEGER :: IWL REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'FACADE_E_BUDGET' , 0 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- PRAD_WL_FL = XUNDEF PRAD_WL_MA = XUNDEF PRAD_WIN_FL = XUNDEF PRAD_WIN_MA = XUNDEF PCONV_WL_BLD = XUNDEF PCONV_WIN_BLD = XUNDEF ! !* surface temperature of the opposite wall !  ---------------------------------------- ! ZTS_WL_A (:) = T % XT_WALL_A (:, 1 ) ZTS_WL_B (:) = T % XT_WALL_B (:, 1 ) IWL = SIZE ( T % XT_WALL_A , 2 ) ZTI_WL_A (:) = T % XT_WALL_A (:, IWL ) ZTI_WL_B (:) = T % XT_WALL_B (:, IWL ) ! ! *Convection heat transfer coefficients [W m-2 K-1] from EP Engineering Reference ! -------------------------------------------------------------------------------- ! ! ! *opaque balance of the facade for wall A !  --------------------------------------- ! CALL WALL_LAYER_E_BUDGET ( TOP , T , B , T % XT_WALL_A , ZTS_WL_B , ZTI_WL_B , PTSTEP , PDN_RD , & PRHOA , PAC_WL , PAC_BLD , PLW_RAD , PPS , PEXNS , DMT % XABS_SW_WALL_A ,& PT_CANYON , PTS_RD , PTSN_RD , PTS_GD , PTS_FL , PLW_WA_TO_WB , & PLW_R_TO_WA , PLW_G_TO_WA , PLW_NR_TO_WA , PLW_WIN_TO_WA , & PLW_S_TO_WA , PFLX_BLD_WL_A , PDQS_WL_A , DMT % XABS_LW_WALL_A , & ZEMIT_LW_WL_A , DMT % XH_WALL_A , ZIMB_WL , PRADHT_IN , PRAD_RF_WL , & ZRAD_WL_A_WIN , ZRAD_WL_FL , ZRAD_WL_MA , ZCONV_WL_BLD , & PLOAD_IN_WL ) ! PIMB_WL = 0.5 * ZIMB_WL PRAD_WL_FL = 0.5 * ZRAD_WL_FL PRAD_WL_MA = 0.5 * ZRAD_WL_MA PCONV_WL_BLD = 0.5 * ZCONV_WL_BLD ZRAD_WL_WIN = 0.5 * ZRAD_WL_A_WIN ! ! *opaque balance of the facade for wall B !  --------------------------------------- ! IF ( TOP % CWALL_OPT /= 'UNIF' ) THEN CALL WALL_LAYER_E_BUDGET ( TOP , T , B , T % XT_WALL_B , ZTS_WL_A , ZTI_WL_A , PTSTEP , PDN_RD , & PRHOA , PAC_WL , PAC_BLD , PLW_RAD , PPS , PEXNS , DMT % XABS_SW_WALL_B , & PT_CANYON , PTS_RD , PTSN_RD , PTS_GD , PTS_FL , PLW_WA_TO_WB , & PLW_R_TO_WB , PLW_G_TO_WB , PLW_NR_TO_WB , PLW_WIN_TO_WB , & PLW_S_TO_WB , PFLX_BLD_WL_B , PDQS_WL_B , DMT % XABS_LW_WALL_B , & ZEMIT_LW_WL_B , DMT % XH_WALL_B , ZIMB_WL , PRADHT_IN , PRAD_RF_WL ,& ZRAD_WL_A_WIN , ZRAD_WL_FL , ZRAD_WL_MA , ZCONV_WL_BLD , & PLOAD_IN_WL ) ELSE T % XT_WALL_B = T % XT_WALL_A DMT % XH_WALL_B = DMT % XH_WALL_A DMT % XABS_LW_WALL_B = DMT % XABS_LW_WALL_A PDQS_WL_B = PDQS_WL_A PFLX_BLD_WL_B = PFLX_BLD_WL_A ZEMIT_LW_WL_B = ZEMIT_LW_WL_A END IF ! PIMB_WL = PIMB_WL + 0.5 * ZIMB_WL PRAD_WL_FL = PRAD_WL_FL + 0.5 * ZRAD_WL_FL PRAD_WL_MA = PRAD_WL_MA + 0.5 * ZRAD_WL_MA PCONV_WL_BLD = PCONV_WL_BLD + 0.5 * ZCONV_WL_BLD ZRAD_WL_WIN = ZRAD_WL_WIN + 0.5 * ZRAD_WL_A_WIN ! !------------------------------------------------------------------------------- ! ! *Energy Balance for windows (averaged on both walls) !  --------------------------------------------------- ! IF ( TOP % CBEM == 'DEF' ) THEN ZEMIT_LW_WIN (:) = 0. END IF ! IF ( TOP % CBEM == 'BEM' ) THEN ZEMIS_WIN (:) = 0.84 ! From Engineering Reference documentation p219 ! (see http://apps1.eere.energy.gov/buildings/energyplus/ ZLW_W_TO_WIN (:) = PLW_WA_TO_WIN (:) + PLW_WB_TO_WIN (:) ZTS_WL (:) = XUNDEF WHERE ( ZLW_W_TO_WIN (:) > 0. ) & ZTS_WL (:) = ( PLW_WA_TO_WIN (:) * T % XT_WALL_A (:, 1 ) + PLW_WB_TO_WIN (:) * T % XT_WALL_B (:, 1 ) ) / ZLW_W_TO_WIN (:) CALL WINDOW_E_BUDGET ( B , ZEMIS_WIN , ZLW_W_TO_WIN , PLW_R_TO_WIN , PLW_G_TO_WIN , PLW_NR_TO_WIN , & PLW_S_TO_WIN , PRAD_RF_WIN , ZRAD_WL_WIN , DMT % XABS_SW_WIN , PLW_RAD , PAC_WIN , & PRADHT_IN , PTS_FL , PRHOA , PDN_RD , PT_CANYON , ZTS_WL , PTS_RD , PTSN_RD , & PTS_GD , PRAD_WIN_FL , PRAD_WIN_MA , PCONV_WIN_BLD , ZEMIT_LW_WIN , & DMT % XABS_LW_WIN , PLOAD_IN_WIN ) ENDIF !*        wall, and win emitted LW radiation on snow-free surfaces !         ---------------------------------------------------------------- ! ! PEMIT_LW_FAC (:) = 0.5 * ( ZEMIT_LW_WL_A (:) + ZEMIT_LW_WL_B (:)) * ( 1 - B % XGR (:)) + ZEMIT_LW_WIN (:) * B % XGR (:) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'FACADE_E_BUDGET' , 1 , ZHOOK_HANDLE ) END SUBROUTINE FACADE_E_BUDGET","tags":"","loc":"proc/facade_e_budget.html"},{"title":"WIND_THRESHOLD – Town Energy Balance (TEB) model API docs","text":"function WIND_THRESHOLD(PWIND, PUREF) result(PWIND_NEW) Uses YOMHOOK MODD_SURF_ATM PARKIND1 Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWIND real, intent(in), DIMENSION(:) :: PUREF Return Value real,\n  DIMENSION(SIZE(PWIND)) Contents Source Code WIND_THRESHOLD Source Code FUNCTION WIND_THRESHOLD ( PWIND , PUREF ) RESULT ( PWIND_NEW ) !   ############################################################################ ! !!****  *WIND_THRESHOLD* !! !!    PURPOSE !!    ------- ! !     Set a minimum value to the wind for exchange coefficient computations. !     This minimum value depends on the forcing height ! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    09/2007 !------------------------------------------------------------------------------- ! USE MODD_SURF_ATM , ONLY : XCISMIN , XVMODMIN , LALDTHRES ! !*       0.     DECLARATIONS !               ------------ ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PWIND ! wind REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! forcing level ! REAL , DIMENSION ( SIZE ( PWIND )) :: PWIND_NEW ! modified wind REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! ! !*      0.2    declarations of local variables ! !------------------------------------------------------------------------------- ! !  wind gradient ! IF ( LHOOK ) CALL DR_HOOK ( 'WIND_THRESHOLD' , 0 , ZHOOK_HANDLE ) IF (. NOT . LALDTHRES ) THEN ! !  minimum value for exchange coefficients computations : 1m/s / 10m PWIND_NEW = MAX ( PWIND , 0.1 * MIN ( 1 0. , PUREF ) ) ELSE !  minimum value for exchange coefficients computations : 1m/s / 10m PWIND_NEW = MAX ( XVMODMIN , SQRT ( PWIND ** 2 + ( XCISMIN * PUREF ) ** 2 ) ) ENDIF IF ( LHOOK ) CALL DR_HOOK ( 'WIND_THRESHOLD' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END FUNCTION WIND_THRESHOLD","tags":"","loc":"proc/wind_threshold.html"},{"title":"WINDOW_SHADING_AVAILABILITY – Town Energy Balance (TEB) model API docs","text":"subroutine WINDOW_SHADING_AVAILABILITY(OSHADE, PTI_BLD, PTCOOL_TARGET, OSHADE_POSSIBLE) Uses MODD_BEM_CST Arguments Type Intent Optional Attributes Name logical, intent(in), DIMENSION(:) :: OSHADE real, intent(in), DIMENSION(:) :: PTI_BLD real, intent(in), DIMENSION(:) :: PTCOOL_TARGET logical, intent(out), DIMENSION(:) :: OSHADE_POSSIBLE Contents Source Code WINDOW_SHADING_AVAILABILITY Source Code SUBROUTINE WINDOW_SHADING_AVAILABILITY ( OSHADE , PTI_BLD , PTCOOL_TARGET , OSHADE_POSSIBLE ) !     ########################################################################################################### ! !!****  *WINDOW_SHADING_AVAILABILITY* !! !!    PURPOSE !!    ------- !!* checks if one encouters the conditions for closing the windows at day !  (needs to be equiped of solar protections and not to be confortable inside) ! !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      G. Pigeon   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    10/2011 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_BEM_CST , ONLY : XCOMFORT_TEMP_FOR_SHADING_USE ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! LOGICAL , DIMENSION (:), INTENT ( IN ) :: OSHADE ! TRUE if solar protections exist REAL , DIMENSION (:), INTENT ( IN ) :: PTI_BLD ! indoor air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTCOOL_TARGET ! Cooling setpoint of HVAC system LOGICAL , DIMENSION (:), INTENT ( OUT ) :: OSHADE_POSSIBLE ! TRUE if solar protections !                                                     ! are likely to be used today if !                                                     ! solar irradiance is enough ! !*       0.2   Declarations of local variables ! ! !------------------------------------------------------------------------------- ! ! ! OSHADE_POSSIBLE (:) = OSHADE (:) . AND . & ( PTI_BLD (:) . GE . XCOMFORT_TEMP_FOR_SHADING_USE & . OR . PTI_BLD (:) . EQ . PTCOOL_TARGET (:) ) ! END SUBROUTINE WINDOW_SHADING_AVAILABILITY","tags":"","loc":"proc/window_shading_availability.html"},{"title":"INI_CTURBS – Town Energy Balance (TEB) model API docs","text":"subroutine INI_CTURBS() Uses MODD_CSTS PARKIND1 YOMHOOK MODD_CANOPY_TURB Arguments None Contents Source Code INI_CTURBS Source Code SUBROUTINE INI_CTURBS !! !!****     *INI_CTURBS*  - routine to initialize the turbulence scheme !!                        constants. !! !!      PURPOSE !!      ------- !         The purpose of this routine is to initialize the turbulence !       scheme constants that are stored in module MODD_CTURB ! !!      METHOD !!      ------ !!        The constants are set to their numerical values !! !!      AUTHOR !!      ------ !!        V. Masson         * Meteo-France * !! !!      MODIFICATIONS !!      ------------- !! -------------------------------------------------------------------------- ! !*        0. DECLARATIONS !            ------------ ! USE MODD_CSTS , ONLY : XKARMAN USE MODD_CANOPY_TURB , ONLY : XTKEMIN , XCEP , XCED , XALPSBL , XA0 , XCMFS , XASBL ,& XCSHF , XCTP ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !  --------------------------------------------------------------------------- ! !         1. SETTING THE NUMERICAL VALUES !            ---------------------------- ! !         1.1 Constant for dissipation of Tke ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'INI_CTURBS' , 0 , ZHOOK_HANDLE ) XCED = 0.845 !       Redelsperger-Sommeria (1981) = 0.70 !       Schmidt-Schumann      (1989) = 0.845 !       Cheng-Canuto-Howard   (2002) = 0.845 ! ! !         1.2 Constant for wind pressure-correlations ! XCEP = 2.11 !       Redelsperger-Sommeria (1981) = 4. !       Schmidt-Schumann      (1989) = 3.5 !       Cheng-Canuto-Howard   (2002) = 2.11 ! ! !         1.3 Constant a0 for wind pressure-correlations ! XA0 = 0.6 !       Redelsperger-Sommeria (1981) = 0.6 !       Schmidt-Schumann      (1989) = 0.55 !       Cheng-Canuto-Howard   (2002) = 0.6 ! ! !         1.4 Constant for temperature and vapor pressure-correlations ! XCTP = 4.65 !       Redelsperger-Sommeria (1981) = 4. !       Schmidt-Schumann      (1989) = 3.25 !       Cheng-Canuto-Howard   (2002) = 4.65 ! ! !         1.5 Value related to the TKE universal function within SBL ! XALPSBL = 4.63 !       Redelsperger et al 2001     = 4.63 !       Wyngaard et al. 1974        = 3.75 !       Stull 1988                  = 4.75 ! ! ! !         2. Derivated constants !            ------------------- ! !         2.1 Constant in fluxes equations ! XCMFS = 2. / 3. / XCEP * ( 1. - XA0 ) !Constant for the momentum flux due to shear (RS) ! ! Redelsperger-Sommeria (1981) ......... 0.066 ! Schmidt-Schumann      (1989) ......... 0.086 ! Cheng-Canuto-Howard   (2002) ......... 0.126 ! XCSHF = 2. / 3. / XCTP !Constant for the sensible heat flux(RS) ! ! Redelsperger-Sommeria (1981) ......... 0.167 ! Schmidt-Schumann      (1989) ......... 0.204 ! Cheng-Canuto-Howard   (2002) ......... 0.143 ! ! !         2.2 Value related to the TKE universal function within SBL ! ! XASBL = 0.5 * ( XALPSBL ** ( 3. / 2. ) * XKARMAN * XCED + XKARMAN / SQRT ( XALPSBL ) / XCMFS ) !       Redelsperger et al 2001 ! ! ! !         3. MINIMUM VALUES !            -------------- ! XTKEMIN = 1.E-4 IF ( LHOOK ) CALL DR_HOOK ( 'INI_CTURBS' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE INI_CTURBS","tags":"","loc":"proc/ini_cturbs.html"},{"title":"BLD_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"subroutine BLD_E_BUDGET(OTI_EVOL, PTSTEP, PBLD, PWALL_O_HOR, PRHOA, PT_ROOF, PT_WALL, PTI_BLD, PTS_FLOOR) Uses MODD_CSTS YOMHOOK MODD_SURF_PAR PARKIND1 Arguments Type Intent Optional Attributes Name logical, intent(in) :: OTI_EVOL real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PBLD real, intent(in), DIMENSION(:) :: PWALL_O_HOR real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:,:) :: PT_ROOF real, intent(in), DIMENSION(:,:) :: PT_WALL real, intent(inout), DIMENSION(:) :: PTI_BLD real, intent(in), DIMENSION(:) :: PTS_FLOOR Contents Source Code BLD_E_BUDGET Source Code SUBROUTINE BLD_E_BUDGET ( OTI_EVOL , PTSTEP , PBLD , PWALL_O_HOR , & PRHOA , PT_ROOF , PT_WALL , PTI_BLD , PTS_FLOOR ) !   ########################################################################## ! !!****  *BLD_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of the temperature of inside building air ! !!**  METHOD !     ------ ! !     The resistance term between the surfaces and the room is given !     by a standard value, which mimics both the convection !     and the radiative interactions in the room. !     This explains the very low resistance. It is used to compute !     the evolution of the surfaces only. !     This resistance value is 0.123 Km/W  (typical for inside surfaces). !     (ENVIRONMENTAL SCIENCE IN BUILDING, 3rd Edition, Randall McMullan, !      THE MACMILLAN PRESS Limited). ! ! ! !     On the contrary, the evolution of the air temperature is mainly !     governed by the convection (considering the low radiative absorption !     of the air itself). !     In order to have a simple formulation, a diurnal cycle is assumed, !     with a force restore formulation. ! !     The floor temperature is fixed ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    24/08/00 ! !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_CSTS , ONLY : XTT , XCPD , XDAY USE MODD_SURF_PAR , ONLY : XUNDEF ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! LOGICAL , INTENT ( IN ) :: OTI_EVOL ! true --> internal temp. of !                                                   !      of buildings evolves !                                                   ! false--> it is fixed REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PBLD ! building fraction REAL , DIMENSION (:), INTENT ( IN ) :: PWALL_O_HOR ! wall surf. / hor. surf. REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density ! at the lowest level REAL , DIMENSION (:,:), INTENT ( IN ) :: PT_ROOF ! roof layers temperatures REAL , DIMENSION (:,:), INTENT ( IN ) :: PT_WALL ! wall layers temperatures REAL , DIMENSION (:), INTENT ( INOUT ) :: PTI_BLD ! building air temperature ! computed with its equation evolution REAL , DIMENSION (:), INTENT ( IN ) :: PTS_FLOOR ! floor surface temperature ! !*      0.2    declarations of local variables ! ! REAL :: ZTAU ! temporal filter period ! INTEGER :: IROOF ! number of roof layers INTEGER :: IWALL ! number of wall layers REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'BLD_E_BUDGET' , 0 , ZHOOK_HANDLE ) ! !*      1.   initializations !            --------------- ! IROOF = SIZE ( PT_ROOF , 2 ) IWALL = SIZE ( PT_WALL , 2 ) ! !!! 27/01/2012 passé dans TEB !! PTS_FLOOR(:)= 19. + XTT !!! 27/01/2012 passé dans TEB ! !*      2.   no evolution of interior temperature if OTI_EVOL=.FALSE. !            -------------------------------------------------------- ! IF (. NOT . OTI_EVOL . AND . LHOOK ) CALL DR_HOOK ( 'BLD_E_BUDGET' , 1 , ZHOOK_HANDLE ) IF (. NOT . OTI_EVOL ) RETURN ! !*      3.   evolution of the internal temperature !            ------------------------------------- ! ZTAU = XDAY ! WHERE ( PBLD (:) . GT . 0. ) PTI_BLD (:) = PTI_BLD (:) * ( ZTAU - PTSTEP ) / ZTAU & + ( PT_ROOF (:, IROOF ) * PBLD (:) & + PT_WALL (:, IWALL ) * PWALL_O_HOR (:) & + PTS_FLOOR (:) * PBLD (:) ) & / ( 2. * PBLD (:) + PWALL_O_HOR (:) ) * PTSTEP / ZTAU ELSEWHERE PTI_BLD (:) = PTS_FLOOR (:) ENDWHERE ! ! !*      5.   internal temperature set to a minimum value (heating) !            ----------------------------------------------------- ! PTI_BLD (:) = MAX ( PTI_BLD (:) , PTS_FLOOR (:) ) ! IF ( LHOOK ) CALL DR_HOOK ( 'BLD_E_BUDGET' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- END SUBROUTINE BLD_E_BUDGET","tags":"","loc":"proc/bld_e_budget.html"},{"title":"INI_CSTS – Town Energy Balance (TEB) model API docs","text":"subroutine INI_CSTS() Uses YOMHOOK MODI_INI_OCEAN_CSTS MODD_CSTS MODI_INI_SURF_CSTS MODI_INI_CTURBS PARKIND1 Arguments None Contents Source Code INI_CSTS Source Code SUBROUTINE INI_CSTS !     ################## ! !!****  *INI_CSTS * - routine to initialize the module MODD_CST !! !!    PURPOSE !!    ------- !       The purpose of this routine is to initialize  the physical constants !     stored in  module MODD_CST. ! ! !!**  METHOD !!    ------ !!      The physical constants are set to their numerical values !! !! !!    EXTERNAL !!    -------- !!      FMLOOK : to retrieve logical unit number associated to a file !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST     : contains physical constants !! !!    REFERENCE !!    --------- !!      Book2 of the documentation (module MODD_CST, routine INI_CSTS) !! !! !!    AUTHOR !!    ------ !!      V. Ducrocq       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    18/05/94 !!      J. Stein    02/01/95  add the volumic mass of liquid water !!      J.-P. Pinty 13/12/95  add the water vapor pressure over solid ice !!      J. Stein    29/06/97  add XTH00 !!      V. Masson   05/10/98  add XRHOLI !!      C. Mari     31/10/00  add NDAYSEC !!      V. Masson   01/03/03  add XCONDI !!      A. Voldoire 01/12/09  add XTTSI, XICEC, XTTS for ESM !!      J. Escobar  28/03/2014 for pb with emissivity/aerosol reset XSURF_TINY=1.0e-80 in real8 case !! !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! USE MODI_INI_CTURBS ! USE MODI_INI_OCEAN_CSTS ! USE MODI_INI_SURF_CSTS ! IMPLICIT NONE ! !------------------------------------------------------------------------------- ! !*       1.     FUNDAMENTAL CONSTANTS !               --------------------- ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'INI_CSTS' , 0 , ZHOOK_HANDLE ) #ifdef SFX_MNH #ifdef MNH_MPI_DOUBLE_PRECISION XSURF_TINY = 1.0e-80 #else XSURF_TINY = TINY ( XSURF_TINY ) #endif #else XSURF_TINY = 1.0e-80 #endif XSURF_TINY_12 = SQRT ( XSURF_TINY ) XSURF_EPSILON = EPSILON ( XSURF_EPSILON ) * 1 0.0 XPI = 2. * ASIN ( 1. ) XKARMAN = 0.4 XBOLTZ = 1.380658E-23 XLIGHTSPEED = 29979245 8. XPLANCK = 6.6260755E-34 XAVOGADRO = 6.0221367E+23 ! !------------------------------------------------------------------------------- ! !*       2.     ASTRONOMICAL CONSTANTS !               ---------------------- ! XDAY = 8640 0. XSIYEA = 36 5.25 * XDAY * 2. * XPI / 6.283076 XSIDAY = XDAY / ( 1. + XDAY / XSIYEA ) XOMEGA = 2. * XPI / XSIDAY NDAYSEC = 24 * 3600 ! Number of seconds in a day ! !-------------------------------------------------------------------------------! ! ! !*       3.     TERRESTRIAL GEOIDE CONSTANTS !               ---------------------------- ! XRADIUS = 637122 9. XG = 9.80665 ! !------------------------------------------------------------------------------- ! !*       4.     REFERENCE PRESSURE !               ------------------- ! XP00 = 1.E5 XTH00 = 30 0. !------------------------------------------------------------------------------- ! !*       5.     RADIATION CONSTANTS !               ------------------- ! !JUAN OVERFLOW XSTEFAN = 2.* XPI**5 * XBOLTZ**4 / (15.* XLIGHTSPEED**2 * XPLANCK**3) XSTEFAN = ( 2. * XPI ** 5 / 1 5. ) * ( ( XBOLTZ / XPLANCK ) * XBOLTZ ) * ( XBOLTZ / ( XLIGHTSPEED * XPLANCK )) ** 2 XI0 = 137 0. ! !------------------------------------------------------------------------------- ! !*       6.     THERMODYNAMIC CONSTANTS !               ----------------------- ! XMD = 2 8.9644E-3 XMV = 1 8.0153E-3 XRD = XAVOGADRO * XBOLTZ / XMD XRV = XAVOGADRO * XBOLTZ / XMV XCPD = 7. * XRD / 2. XCPV = 4. * XRV XRHOLW = 100 0. XRHOLI = 91 7. XCONDI = 2.22 XCL = 4.218E+3 XCI = 2.106E+3 XTT = 27 3.16 XTTSI = XTT - 1.8 XICEC = 0.5 XTTS = XTT * ( 1 - XICEC ) + XTTSI * XICEC XLVTT = 2.5008E+6 XLSTT = 2.8345E+6 XLMTT = XLSTT - XLVTT XESTT = 61 1.14 XGAMW = ( XCL - XCPV ) / XRV XBETAW = ( XLVTT / XRV ) + ( XGAMW * XTT ) XALPW = LOG ( XESTT ) + ( XBETAW / XTT ) + ( XGAMW * LOG ( XTT )) XGAMI = ( XCI - XCPV ) / XRV XBETAI = ( XLSTT / XRV ) + ( XGAMI * XTT ) XALPI = LOG ( XESTT ) + ( XBETAI / XTT ) + ( XGAMI * LOG ( XTT )) ! !------------------------------------------------------------------------------- ! !*       7.     TURBULENCE CONSTANTS !               -------------------- ! CALL INI_CTURBS !------------------------------------------------------------------------------- ! !*       8.     OCEAN CONSTANTS !               --------------- ! CALL INI_OCEAN_CSTS ! !*       9.     SURFACE CONSTANTS !               ----------------- ! CALL INI_SURF_CSTS IF ( LHOOK ) CALL DR_HOOK ( 'INI_CSTS' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE INI_CSTS","tags":"","loc":"proc/ini_csts.html"},{"title":"ISBA_PROPERTIES – Town Energy Balance (TEB) model API docs","text":"subroutine ISBA_PROPERTIES(IO, PEK, PDIR_SW, PSCA_SW, PSW_BANDS, KSW, PASNOW, PANOSNOW, PESNOW, PENOSNOW, PTSSNOW, PTSNOSNOW, PALBNIR_TVEG, PALBVIS_TVEG, PALBNIR_TSOIL, PALBVIS_TSOIL) Uses MODI_ISBA_ALBEDO YOMHOOK MODI_ISBA_SNOW_FRAC MODD_SNOW_PAR MODD_TYPE_SNOW MODD_WATER_PAR PARKIND1 MODD_ISBA_OPTIONS_n MODD_ISBA_n Arguments Type Intent Optional Attributes Name type(ISBA_OPTIONS_t), intent(inout) :: IO type(ISBA_PE_t), intent(inout) :: PEK real, intent(in), DIMENSION(:,:) :: PDIR_SW real, intent(in), DIMENSION(:,:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PSW_BANDS integer, intent(in) :: KSW real, intent(out), DIMENSION(:) :: PASNOW real, intent(out), DIMENSION(:) :: PANOSNOW real, intent(out), DIMENSION(:) :: PESNOW real, intent(out), DIMENSION(:) :: PENOSNOW real, intent(out), DIMENSION(:) :: PTSSNOW real, intent(out), DIMENSION(:) :: PTSNOSNOW real, intent(out), DIMENSION(:) :: PALBNIR_TVEG real, intent(out), DIMENSION(:) :: PALBVIS_TVEG real, intent(out), DIMENSION(:) :: PALBNIR_TSOIL real, intent(out), DIMENSION(:) :: PALBVIS_TSOIL Contents Source Code ISBA_PROPERTIES Source Code SUBROUTINE ISBA_PROPERTIES ( IO , PEK , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & PASNOW , PANOSNOW , PESNOW , PENOSNOW , & PTSSNOW , PTSNOSNOW , & PALBNIR_TVEG , PALBVIS_TVEG , PALBNIR_TSOIL , PALBVIS_TSOIL ) !     ########################################################################## ! !!****  *ISBA_PROPERTIES* !! !!    PURPOSE !!    ------- ! !     Calculates grid-averaged albedo and emissivity (according to snow scheme) ! !!    EXTERNAL !!    -------- !! !!    none !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    AUTHOR !!    ------ !! !!\tS. Belair           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !! !!      P. Samuelsson  02/2012  MEB !! !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_ISBA_OPTIONS_n , ONLY : ISBA_OPTIONS_t USE MODD_ISBA_n , ONLY : ISBA_PE_t ! USE MODD_TYPE_SNOW USE MODD_SNOW_PAR , ONLY : XEMISSN , XEMCRIN , XSNOWDMIN , & XRHOSMAX_ES , XRHOSMIN_ES USE MODD_WATER_PAR , ONLY : XEMISWAT ! USE MODI_ISBA_SNOW_FRAC USE MODI_ISBA_ALBEDO ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: IO TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PDIR_SW ! direct incoming solar radiation REAL , DIMENSION (:,:), INTENT ( IN ) :: PSCA_SW ! diffus incoming solar radiation REAL , DIMENSION (:) , INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) INTEGER , INTENT ( IN ) :: KSW ! number of short-wave spectral bands ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PASNOW ! = snow albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PANOSNOW ! = snow free albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PESNOW ! = snow emissivity REAL , DIMENSION (:) , INTENT ( OUT ) :: PENOSNOW ! = snow free emissivity REAL , DIMENSION (:) , INTENT ( OUT ) :: PTSSNOW ! = snow radiative temperature REAL , DIMENSION (:) , INTENT ( OUT ) :: PTSNOSNOW ! = snow free radiative temperature ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBNIR_TVEG ! nearIR  veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBVIS_TVEG ! visible veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBNIR_TSOIL ! nearIR  soil tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBVIS_TSOIL ! visible soil tot albedo ! !*      0.2    declarations of local variables ! REAL , DIMENSION ( SIZE ( PDIR_SW , 1 )) :: ZGLOBAL_SW ! global incoming SW rad. REAL , DIMENSION ( SIZE ( PEK % XALBNIR )) :: ZALBF REAL , DIMENSION ( SIZE ( PEK % XALBNIR )) :: ZFFV REAL , DIMENSION ( SIZE ( PEK % XALBNIR )) :: ZFFG ! LOGICAL , PARAMETER :: GMEB = . FALSE . REAL , DIMENSION ( SIZE ( PDIR_SW , 1 )) :: ZP_MEB_SCA_SW , ZALBNIR_TSNOW , ZALBVIS_TSNOW REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'ISBA_PROPERTIES' , 0 , ZHOOK_HANDLE ) ! CALL ISBA_SNOW_FRAC ( PEK % TSNOW % SCHEME , PEK % TSNOW % WSNOW , PEK % TSNOW % RHO , PEK % TSNOW % ALB , & PEK % XVEG , PEK % XLAI , PEK % XZ0 , & PEK % XPSN , PEK % XPSNV_A , PEK % XPSNG , PEK % XPSNV ) ! !------------------------------------------------------------------------------- !*      2.     Compute snow-free albedo !              ------------------------ ! !* Snow-free surface albedo for each wavelength ! ZALBF = 0. ZFFV = 0. ZFFG = 0. ! CALL ISBA_ALBEDO ( PEK , IO % LTR_ML , GMEB , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & ZALBF , ZFFV , ZFFG , ZGLOBAL_SW , ZP_MEB_SCA_SW , & PALBNIR_TVEG , PALBVIS_TVEG , PALBNIR_TSOIL , PALBVIS_TSOIL ) PANOSNOW (:) = PEK % XSNOWFREE_ALB (:) !------------------------------------------------------------------------------- ! !*      3.     Compute aggeragted albedo and emissivity !              ---------------------------------------- ! IF ( PEK % TSNOW % SCHEME == '3-L' . OR . PEK % TSNOW % SCHEME == 'CRO' . OR . IO % CISBA == 'DIF' ) THEN ! ! NON-SNOW covered Grid averaged albedo and emissivity for explicit snow scheme: ! PASNOW (:) = PEK % TSNOW % ALB (:) PESNOW (:) = PEK % TSNOW % EMIS (:) PENOSNOW (:) = PEK % XEMIS (:) PTSSNOW (:) = PEK % TSNOW % TS (:) PTSNOSNOW (:) = PEK % XTG (:, 1 ) ELSE ! ! Grid averaged albedo and emissivity for composite snow scheme: ! IF ( PEK % TSNOW % SCHEME == 'EBA' ) THEN ! PASNOW (:) = PEK % TSNOW % ALB (:) PESNOW (:) = XEMCRIN PENOSNOW (:) = PEK % XEMIS (:) PTSSNOW (:) = PEK % XTG (:, 1 ) PTSNOSNOW (:) = PEK % XTG (:, 1 ) ELSE PASNOW (:) = PEK % TSNOW % ALB (:) PESNOW (:) = XEMISSN PENOSNOW (:) = PEK % XEMIS (:) PTSSNOW (:) = PEK % XTG (:, 1 ) PTSNOSNOW (:) = PEK % XTG (:, 1 ) ENDIF ! ENDIF IF ( LHOOK ) CALL DR_HOOK ( 'ISBA_PROPERTIES' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE ISBA_PROPERTIES","tags":"","loc":"proc/isba_properties.html"},{"title":"OPEN_NAMELIST – Town Energy Balance (TEB) model API docs","text":"subroutine OPEN_NAMELIST(HPROGRAM, KLUNAM, HFILE) Uses MODI_OPEN_NAMELIST_NC YOMHOOK MODI_MNHOPEN_NAMELIST MODI_AROOPEN_NAMELIST MODI_OPEN_NAMELIST_OL MODI_OPEN_NAMELIST_FA MODI_OPEN_NAMELIST_LFI PARKIND1 MODI_OPEN_NAMELIST_ASC Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HPROGRAM integer, intent(out) :: KLUNAM character(len=28), intent(in), optional :: HFILE Contents Source Code OPEN_NAMELIST Source Code SUBROUTINE OPEN_NAMELIST ( HPROGRAM , KLUNAM , HFILE ) !     ####################################################### ! !!****  *OPEN_NAMELIST* - routine to open a namelist file !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    01/2003 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! #ifdef SFX_OL USE MODI_OPEN_NAMELIST_OL #endif #ifdef SFX_ASC USE MODI_OPEN_NAMELIST_ASC #endif #ifdef SFX_FA USE MODI_OPEN_NAMELIST_FA #endif #ifdef SFX_LFI USE MODI_OPEN_NAMELIST_LFI #endif #ifdef SFX_NC USE MODI_OPEN_NAMELIST_NC #endif #ifdef SFX_MNH USE MODI_MNHOPEN_NAMELIST #endif #ifdef SFX_ARO USE MODI_AROOPEN_NAMELIST #endif ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HPROGRAM ! main program INTEGER , INTENT ( OUT ) :: KLUNAM ! logical unit of namelist CHARACTER ( LEN = 28 ), INTENT ( IN ), OPTIONAL :: HFILE ! ASCII file to open ! !*       0.2   Declarations of local variables !              ------------------------------- ! CHARACTER ( LEN = 28 ) :: YFILE REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'OPEN_NAMELIST' , 0 , ZHOOK_HANDLE ) IF ( PRESENT ( HFILE )) THEN YFILE = HFILE ELSE YFILE = '                            ' END IF IF ( HPROGRAM == 'MESONH' ) THEN #ifdef SFX_MNH CALL MNHOPEN_NAMELIST ( HPROGRAM , KLUNAM , YFILE ) #endif ELSE IF ( HPROGRAM == 'OFFLIN' ) THEN #ifdef SFX_OL CALL OPEN_NAMELIST_OL ( HPROGRAM , KLUNAM , YFILE ) #endif ELSE IF ( HPROGRAM == 'ASCII ' ) THEN #ifdef SFX_ASC CALL OPEN_NAMELIST_ASC ( HPROGRAM , KLUNAM , YFILE ) #endif ELSE IF ( HPROGRAM == 'AROME ' ) THEN #ifdef SFX_ARO CALL AROOPEN_NAMELIST ( HPROGRAM , KLUNAM , YFILE ) #endif ELSE IF ( HPROGRAM == 'FA    ' ) THEN #ifdef SFX_FA CALL OPEN_NAMELIST_FA ( HPROGRAM , KLUNAM , YFILE ) #endif ELSE IF ( HPROGRAM == 'LFI   ' ) THEN #ifdef SFX_LFI CALL OPEN_NAMELIST_LFI ( HPROGRAM , KLUNAM , YFILE ) #endif ELSE IF ( HPROGRAM == 'NC    ' ) THEN #ifdef SFX_NC CALL OPEN_NAMELIST_NC ( HPROGRAM , KLUNAM , YFILE ) #endif END IF ! IF ( LHOOK ) CALL DR_HOOK ( 'OPEN_NAMELIST' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE OPEN_NAMELIST","tags":"","loc":"proc/open_namelist.html"},{"title":"WALL_LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"subroutine WALL_LAYER_E_BUDGET(TOP, T, B, PT_WL, PTS_WL_B, PTI_WL_B, PTSTEP, PDN_RD, PRHOA, PAC_WL, PAC_BLD, PLW_RAD, PPS, PEXNS, PABS_SW_WL, PT_CANYON, PTS_RD, PTSNOW_RD, PTS_GD, PTS_FL, PLW_WA_TO_WB, PLW_R_TO_W, PLW_G_TO_W, PLW_NR_TO_W, PLW_WIN_TO_W, PLW_S_TO_W, PFLX_BLD_WL, PDQS_WL, PABS_LW_WL, PEMIT_LW_WL, PH_WL, PIMB_WL, PRADHT_IN, PRAD_RF_WL, PRAD_WL_WIN, PRAD_WL_FL, PRAD_WL_MA, PCONV_WL_BLD, PLOAD_IN_WL) Uses MODD_BEM_n YOMHOOK MODD_CSTS PARKIND1 MODD_SURF_PAR MODI_LAYER_E_BUDGET MODD_TEB_n MODD_TEB_OPTION_n MODI_LAYER_E_BUDGET_GET_COEF MODE_CONV_DOE Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B real, intent(inout), DIMENSION(:,:) :: PT_WL real, intent(in), DIMENSION(:) :: PTS_WL_B real, intent(in), DIMENSION(:) :: PTI_WL_B real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PAC_WL real, intent(in), DIMENSION(:) :: PAC_BLD real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PABS_SW_WL real, intent(in), DIMENSION(:) :: PT_CANYON real, intent(in), DIMENSION(:) :: PTS_RD real, intent(in), DIMENSION(:) :: PTSNOW_RD real, intent(in), DIMENSION(:) :: PTS_GD real, intent(in), DIMENSION(:) :: PTS_FL real, intent(in), DIMENSION(:) :: PLW_WA_TO_WB real, intent(in), DIMENSION(:) :: PLW_R_TO_W real, intent(in), DIMENSION(:) :: PLW_G_TO_W real, intent(in), DIMENSION(:) :: PLW_NR_TO_W real, intent(in), DIMENSION(:) :: PLW_WIN_TO_W real, intent(in), DIMENSION(:) :: PLW_S_TO_W real, intent(out), DIMENSION(:) :: PFLX_BLD_WL real, intent(inout), DIMENSION(:) :: PDQS_WL real, intent(out), DIMENSION(:) :: PABS_LW_WL real, intent(out), DIMENSION(:) :: PEMIT_LW_WL real, intent(out), DIMENSION(:) :: PH_WL real, intent(out), DIMENSION(:) :: PIMB_WL real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PRAD_RF_WL real, intent(out), DIMENSION(:) :: PRAD_WL_WIN real, intent(out), DIMENSION(:) :: PRAD_WL_FL real, intent(out), DIMENSION(:) :: PRAD_WL_MA real, intent(out), DIMENSION(:) :: PCONV_WL_BLD real, intent(in), DIMENSION(:) :: PLOAD_IN_WL Contents Source Code WALL_LAYER_E_BUDGET Source Code SUBROUTINE WALL_LAYER_E_BUDGET ( TOP , T , B , PT_WL , PTS_WL_B , PTI_WL_B , PTSTEP , PDN_RD , & PRHOA , PAC_WL , PAC_BLD , PLW_RAD , PPS , PEXNS , PABS_SW_WL , & PT_CANYON , PTS_RD , PTSNOW_RD , PTS_GD , PTS_FL , & PLW_WA_TO_WB , PLW_R_TO_W , PLW_G_TO_W , PLW_NR_TO_W , & PLW_WIN_TO_W , PLW_S_TO_W , PFLX_BLD_WL , PDQS_WL , & PABS_LW_WL , PEMIT_LW_WL , PH_WL , PIMB_WL , PRADHT_IN , & PRAD_RF_WL , PRAD_WL_WIN , PRAD_WL_FL , PRAD_WL_MA , & PCONV_WL_BLD , PLOAD_IN_WL ) !   ########################################################################## ! !!****  *ROAD_WALL_LAYER_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of roads and walls surface temperatures ! ! !!**  METHOD !     ------ ! !    6 : equations for evolution of Ts_road and Ts_wall simultaneously !        ************************************************************* ! !     dTw_k(t) / dt = 1/(dw_k*Cw_k) * (- 2*Kw_k-1*(Tw_k-Tw_k-1)/(dw_k-1 +dw_k) !                                      - 2*Kw_k  *(Tw_k-Tw_k+1)/(dw_k+1 +dw_k) ) ! !     dTw_1(t) / dt = 1/(dw_1*Cw_1) * (  Rn_w - H_w - LE_w !                                      - 2*Kw_1*(Tw_1-Tw_2)/(dw_1 +dw_2)       ) ! ! !       with ! !   K*_k  = (d*_k+ d*_k+1)/(d*_k/k*_k+ d*_k+1/k*_k+1) ! !   Rn_w = abs_Rg_w !  - sigma * emis_w                                                   * Ts_w**4 (t+dt) !  +         emis_w                       *      SVF_w                * LWR !  + sigma * emis_w * emis_r              *      SVF_w                * Ts_r**4 (t+dt) !  + sigma * emis_w * emis_w              * (1-2*SVF_w)               * Ts_w**4 (t+dt) !  +         emis_w            (1-emis_r) *      SVF_r  *      SVF_w  * LWR !  +         emis_w            (1-emis_w) *      SVF_w  * (1-2*SVF_w) * LWR !  + sigma * emis_w * emis_w * (1-emis_r) *      SVF_w  * (1-  SVF_r) * Ts_w**4 (t+dt) !  + sigma * emis_w * emis_w * (1-emis_w) * (1-2*SVF_w) * (1-2*SVF_w) * Ts_w**4 (t+dt) !  + sigma * emis_w * emis_r * (1-emis_w) *      SVF_w  * (1-2*SVF_w) * Ts_r**4 (t+dt) ! !  H_w  = rho Cp CH V ( Ts_w (t+dt) - Ta_canyon ) ! !  LE_w = rho Lv CH V ( qs_w (t+dt) - qa_canyon ) ! ! ! The system is implicited (or semi-implicited). ! ! ZIMPL=1    ---> implicit system ! ZIMPL=0.5  ---> semi-implicit system ! ZIMPL=0    ---> explicit system ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !!                  21/11/01 (V. Masson and A. Lemonsu) bug of latent flux !!                           for very strong evaporation (all reservoir emptied !!                           in one time-step) !!                     02/11 (V. Masson) splits the routine for road and walls separately !!                     01/12 (V. Masson) separates the 2 walls !!                     09/12 (G. Pigeon) modif internal convective coef convection !!                     10/12 (G. Pigeon) add solar heat gain of indoor wall !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS , ONLY : XCPD , XSTEFAN ! USE MODI_LAYER_E_BUDGET_GET_COEF USE MODI_LAYER_E_BUDGET USE MODE_CONV_DOE ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_WL ! wall layers temperatures REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WL_B ! opposite wall surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTI_WL_B ! opposite wall internal temperature REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered fraction on roads REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! rho REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WL ! aerodynamical conductance [m/s] !                                                 ! between wall and canyon REAL , DIMENSION (:), INTENT ( IN ) :: PAC_BLD ! aerodynamical conductance ! inside the building itself REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface Exner function REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_WL ! absorbed solar radiation REAL , DIMENSION (:), INTENT ( IN ) :: PT_CANYON ! air canyon temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_RD ! road surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTSNOW_RD ! road snow temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GD ! green area surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_FL ! floor layers temperatures [K] ! REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_WB ! LW interactions wall  -> opposite wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_W ! LW interactions road -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_W ! LW interactions garden -> wall ; DEF formulation REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_W ! LW interactions sky   -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_W ! LW interactions road(snow) -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_W ! Radiative heat trasfer coeff wall-window ! [W K-1 m-2] ! REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_WL ! flux from bld to wall REAL , DIMENSION (:), INTENT ( INOUT ) :: PDQS_WL ! heat storage inside the wall REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_WL ! absorbed infrared rad. [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_WL ! LW flux emitted by the wall [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PH_WL ! Sensible heat flux from wall to air [W/m2(wall)] ! wall = facade - glazing REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_WL ! wall residual energy imbalance ! for verification [W m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_WL ! rad. fluxes from roof to wall [W m-2(roof)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WL_WIN ! rad. fluxes from wall to win  [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WL_FL ! rad. fluxes from wall to floor [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WL_MA ! rad. fluxes from wall to mass [W m-2(wall)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_WL_BLD ! conv. fluxes from wall to bld [W m-2(wall)] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_IN_WL ! LOAD from solar heat gain + rad int. gains  W/m2 [Wall] ! !*      0.2    declarations of local variables ! ! REAL :: ZIMPL = 1.0 ! implicit coefficient REAL :: ZEXPL = 0.0 ! explicit coefficient ! REAL , DIMENSION ( SIZE ( PPS ), SIZE ( PT_WL , 2 )) :: ZA ,& ! lower diag. ZB ,& ! main  diag. ZC ,& ! upper diag. ZY ! r.h.s. ! REAL , DIMENSION ( SIZE ( PPS )) :: ZMTC_O_D_WL_IN REAL , DIMENSION ( SIZE ( PPS )) :: ZDF_RD ! Road snow free fraction REAL , DIMENSION ( SIZE ( PPS )) :: ZRHO_ACF_W ! rho * conductance !                                         !     * snow-free f. ! ! thermal capacity times layer depth REAL , DIMENSION ( SIZE ( PPS )) :: ZTS_WL ! wall surface temperature REAL , DIMENSION ( SIZE ( PPS )) :: ZTI_WL ! wall indoor surface temperature REAL , DIMENSION ( SIZE ( PPS )) :: ZTI_WL_CONV ! wall indoor surface temperature for conv. flux REAL , DIMENSION ( SIZE ( PPS )) :: ZT_SKY ! sky temperature [K] ! REAL , DIMENSION ( SIZE ( PPS )) :: ZTI_RF ! Indoor roof temperature [K] REAL , DIMENSION ( SIZE ( PPS )) :: ZDIF_RAD_WL_RF !diff between the rad flux that should receive the wall from the roof ! and what it really receives [W m-2(bld)] REAL , DIMENSION ( SIZE ( PPS )) :: ZRAD_WL_RF ! rad flux between the wall and the roof computed for the wall balance REAL , DIMENSION ( SIZE ( PPS )) :: ZF_WL_WL ! View factor wall-wall inside the building REAL , DIMENSION ( SIZE ( PPS )) :: ZCHTC_IN_WL ! indoor convective heat transfer coeff wall [W m-2 K-1] INTEGER :: IWL_LAYER ! number of wall layers INTEGER :: JJ ! loop counter REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'WALL_LAYER_E_BUDGET' , 0 , ZHOOK_HANDLE ) ! PFLX_BLD_WL = XUNDEF PIMB_WL = XUNDEF PRAD_WL_WIN = XUNDEF PRAD_WL_FL = XUNDEF PRAD_WL_MA = XUNDEF PCONV_WL_BLD = XUNDEF ! CALL LAYER_E_BUDGET_GET_COEF ( PT_WL , PTSTEP , ZIMPL , T % XHC_WALL , T % XTC_WALL , T % XD_WALL , & ZA , ZB , ZC , ZY ) ! IWL_LAYER = SIZE ( PT_WL , 2 ) ! DO JJ = 1 , SIZE ( PDN_RD ) ! ZDF_RD ( JJ ) = 1. - PDN_RD ( JJ ) ! ZTS_WL ( JJ ) = PT_WL ( JJ , 1 ) ZTI_WL ( JJ ) = PT_WL ( JJ , IWL_LAYER ) ! !*      2.1    outdoor convective flux properties !              ---------------------------------- ! ZRHO_ACF_W ( JJ ) = PRHOA ( JJ ) * PAC_WL ( JJ ) ! !*      2.2    Sky temperature !              --------------- ! ZT_SKY ( JJ ) = ( PLW_RAD ( JJ ) / XSTEFAN ) ** 0.25 ! !*      2.3    indoor average thermal conductivity !              ----------------------------------- ! IF ( TOP % CBEM . EQ . \"DEF\" ) THEN ZMTC_O_D_WL_IN ( JJ ) = 2. * T % XTC_WALL ( JJ , IWL_LAYER ) / T % XD_WALL ( JJ , IWL_LAYER ) ZMTC_O_D_WL_IN ( JJ ) = 1. / ( 1. / ZMTC_O_D_WL_IN ( JJ ) + 1. / ( XCPD * PRHOA ( JJ ) * PAC_BLD ( JJ ))) ENDIF ENDDO ! !*      2.4    indoor convective coefficient !              ----------------------------- ! ZCHTC_IN_WL (:) = CHTC_VERT_DOE ( PT_WL (:, IWL_LAYER ), B % XTI_BLD (:)) DO JJ = 1 , SIZE ( ZCHTC_IN_WL ) ZCHTC_IN_WL ( JJ ) = MAX ( 1. , ZCHTC_IN_WL ( JJ )) ENDDO ! !------------------------------------------------------------------------------- ! !*      3.    Outer wall layer coefficients !             ------------------------------ ! DO JJ = 1 , SIZE ( PT_WL , 1 ) ! ZB ( JJ , 1 ) = ZB ( JJ , 1 ) + ZIMPL * XCPD / PEXNS ( JJ ) * ZRHO_ACF_W ( JJ ) ! ZY ( JJ , 1 ) = ZY ( JJ , 1 ) + PABS_SW_WL ( JJ ) & + XCPD / PEXNS ( JJ ) * ZRHO_ACF_W ( JJ ) * ( PT_CANYON ( JJ ) - ZEXPL * ZTS_WL ( JJ ) ) ! ! ZB ( JJ , 1 ) = ZB ( JJ , 1 ) & + ZIMPL * ( PLW_S_TO_W ( JJ ) + PLW_WA_TO_WB ( JJ ) & + ZDF_RD ( JJ ) * PLW_R_TO_W ( JJ ) + PLW_G_TO_W ( JJ ) & + PDN_RD ( JJ ) * PLW_NR_TO_W ( JJ ) & + PLW_WIN_TO_W ( JJ ) ) ! ZY ( JJ , 1 ) = ZY ( JJ , 1 ) + & PLW_S_TO_W ( JJ ) * ( ZT_SKY ( JJ ) - ZEXPL * ZTS_WL ( JJ )) & + PLW_WA_TO_WB ( JJ ) * ( PTS_WL_B ( JJ ) - ZEXPL * ZTS_WL ( JJ )) & + ZDF_RD ( JJ ) * PLW_R_TO_W ( JJ ) * ( PTS_RD ( JJ ) - ZEXPL * ZTS_WL ( JJ )) & + PDN_RD ( JJ ) * PLW_NR_TO_W ( JJ ) * ( PTSNOW_RD ( JJ ) - ZEXPL * ZTS_WL ( JJ )) & + PLW_WIN_TO_W ( JJ ) * ( B % XT_WIN1 ( JJ ) - ZEXPL * ZTS_WL ( JJ )) ! IF ( SIZE ( PTS_GD ) > 0 ) THEN ZY ( JJ , 1 ) = ZY ( JJ , 1 ) + PLW_G_TO_W ( JJ ) * ( PTS_GD ( JJ ) - ZEXPL * ZTS_WL ( JJ )) ENDIF ! ENDDO ! !------------------------------------------------------------------------------- ! !*      4.    Inside wall layer coefficients !             ----------------------------- ! DO JJ = 1 , SIZE ( PT_WL , 1 ) ! IF ( TOP % CBEM == \"DEF\" ) THEN ! ZB ( JJ , IWL_LAYER ) = ZB ( JJ , IWL_LAYER ) + ZIMPL * ZMTC_O_D_WL_IN ( JJ ) ! ZY ( JJ , IWL_LAYER ) = ZY ( JJ , IWL_LAYER ) & + ZMTC_O_D_WL_IN ( JJ ) * B % XTI_BLD ( JJ ) & - ZEXPL * ZMTC_O_D_WL_IN ( JJ ) * PT_WL ( JJ , IWL_LAYER ) ! ELSEIF ( TOP % CBEM == \"BEM\" ) THEN ! ZF_WL_WL ( JJ ) = 1. - B % XF_WALL_MASS ( JJ ) - B % XF_WALL_WIN ( JJ ) - 2. * B % XF_WALL_FLOOR ( JJ ) ! ZB ( JJ , IWL_LAYER ) = ZB ( JJ , IWL_LAYER ) + ZIMPL * & ( ZCHTC_IN_WL ( JJ ) * 4. / 3. + PRADHT_IN ( JJ ) * & ( B % XF_WALL_MASS ( JJ ) + B % XF_WALL_WIN ( JJ ) & + ZF_WL_WL ( JJ ) + 2 * B % XF_WALL_FLOOR ( JJ ))) ! ZTI_RF ( JJ ) = PRAD_RF_WL ( JJ ) / PRADHT_IN ( JJ ) + PT_WL ( JJ , IWL_LAYER ) ! ZY ( JJ , IWL_LAYER ) = ZY ( JJ , IWL_LAYER ) + & ZCHTC_IN_WL ( JJ ) * ( B % XTI_BLD ( JJ ) - 1. / 3. * PT_WL ( JJ , IWL_LAYER ) * ( 4 * ZEXPL - 1 )) + & PRADHT_IN ( JJ ) * ( & B % XF_WALL_MASS ( JJ ) * ( B % XT_MASS ( JJ , 1 ) - ZEXPL * PT_WL ( JJ , IWL_LAYER )) + & B % XF_WALL_WIN ( JJ ) * ( B % XT_WIN2 ( JJ ) - ZEXPL * PT_WL ( JJ , IWL_LAYER )) + & B % XF_WALL_FLOOR ( JJ ) * ( PTS_FL ( JJ ) - ZEXPL * PT_WL ( JJ , IWL_LAYER )) + & ZF_WL_WL ( JJ ) * ( PTI_WL_B ( JJ ) - ZEXPL * PT_WL ( JJ , IWL_LAYER )) + & B % XF_WALL_FLOOR ( JJ ) * ( ZTI_RF ( JJ ) - ZEXPL * PT_WL ( JJ , IWL_LAYER )) ) + & PLOAD_IN_WL ( JJ ) ! ENDIF ! END DO ! !------------------------------------------------------------------------------- ! !*      5.    heat conduction calculation !             --------------------------- ! CALL LAYER_E_BUDGET ( PT_WL , PTSTEP , ZIMPL , T % XHC_WALL , T % XTC_WALL , T % XD_WALL , & ZA , ZB , ZC , ZY , PDQS_WL ) ! !------------------------------------------------------------------------------- ! !*   6.   diagnostics of flux echanged with the wall !         ------------------------------------------ ! ! !* radiative surface temperature used during the energy balance ZTS_WL (:) = ZIMPL * PT_WL (:, 1 ) + ZEXPL * ZTS_WL (:) ! PABS_LW_WL (:) = PLW_S_TO_W (:) * ( ZT_SKY (:) - ZTS_WL (:)) + & ZDF_RD (:) * PLW_R_TO_W (:) * ( PTS_RD (:) - ZTS_WL (:)) + & PLW_WA_TO_WB (:) * ( PTS_WL_B (:) - ZTS_WL (:)) + & PLW_WIN_TO_W (:) * ( B % XT_WIN1 (:) - ZTS_WL (:)) + & PDN_RD (:) * PLW_NR_TO_W (:) * ( PTSNOW_RD (:) - ZTS_WL (:)) ! IF ( SIZE ( PTS_GD ) > 0 ) THEN PABS_LW_WL (:) = PABS_LW_WL (:) + PLW_G_TO_W (:) * ( PTS_GD (:) - ZTS_WL (:)) ENDIF ! !* emitted lw flux PEMIT_LW_WL (:) = XSTEFAN * PT_WL (:, 1 ) ** 4 + & ( 1 - T % XEMIS_WALL (:)) / T % XEMIS_WALL (:) * PABS_LW_WL (:) ! !* sensible heat flux to outdoor PH_WL (:) = ZRHO_ACF_W (:) * XCPD / PEXNS (:) * & ( ZIMPL * PT_WL (:, 1 ) + ZEXPL * ZTS_WL (:) - PT_CANYON (:) ) ! IF ( TOP % CBEM == 'BEM' ) THEN ! !compute ZTI_WALL used in flux calculation ZTI_WL_CONV (:) = 4. / 3. * ZIMPL * PT_WL (:, IWL_LAYER ) + 1. / 3. * ZTI_WL (:) * ( 4 * ZEXPL - 1. ) ZTI_WL (:) = ZEXPL * ZTI_WL (:) + ZIMPL * PT_WL (:, IWL_LAYER ) ! !compute IR exchanged fluxes with the roof in the wall balance ZRAD_WL_RF (:) = PRADHT_IN (:) * ( ZTI_WL (:) - ZTI_RF (:)) !compute the difference with the IR flux echanged between roof and wall for !the roof balance, this difference will be added to the floor ZDIF_RAD_WL_RF (:) = ZRAD_WL_RF (:) + PRAD_RF_WL (:) !compute exchanged fluxes with other surfaces for which the balance is done after PRAD_WL_FL (:) = PRADHT_IN (:) * ( ZTI_WL (:) - PTS_FL (:)) ! contribution of the difference between the flux from the wall/flux from ! the roof PRAD_WL_FL (:) = PRAD_WL_FL (:) + ZDIF_RAD_WL_RF (:) PRAD_WL_MA (:) = PRADHT_IN (:) * ( ZTI_WL (:) - B % XT_MASS (:, 1 )) PRAD_WL_WIN (:) = PRADHT_IN (:) * ( ZTI_WL (:) - B % XT_WIN2 (:)) PCONV_WL_BLD (:) = ZCHTC_IN_WL (:) * ( ZTI_WL_CONV (:) - B % XTI_BLD (:)) ! ! PFLX_BLD_WL (:) = - PCONV_WL_BLD (:) & + B % XF_WALL_FLOOR (:) * PRAD_RF_WL (:) & + PRADHT_IN (:) * ( B % XF_WALL_MASS (:) * ( B % XT_MASS (:, 1 ) - ZTI_WL (:)) & + B % XF_WALL_WIN (:) * ( B % XT_WIN2 (:) - ZTI_WL (:)) & + B % XF_WALL_FLOOR (:) * ( PTS_FL (:) - ZTI_WL (:)) ) ! !* wall energy residual imbalance for verification !  ----------------------------------------------- PIMB_WL (:) = PABS_SW_WL (:) + PABS_LW_WL (:) & - PDQS_WL (:) - PH_WL (:) & + PFLX_BLD_WL (:) ! ! END IF ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'WALL_LAYER_E_BUDGET' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE WALL_LAYER_E_BUDGET","tags":"","loc":"proc/wall_layer_e_budget.html"},{"title":"BEM – Town Energy Balance (TEB) model API docs","text":"subroutine BEM(BOP, T, B, DMT, PTSTEP, PSUNTIME, KDAY, PPS, PRHOA, PT_CAN, PQ_CAN, PU_CAN, PHU_BLD, PT_RAD_IND, PFLX_BLD_FL, PFLX_BLD_MA, PRADHT_IN, PRAD_RF_MA, PRAD_RF_FL, PRAD_WL_MA, PRAD_WL_FL, PRAD_WIN_MA, PRAD_WIN_FL, PCONV_RF_BLD, PCONV_WL_BLD, PCONV_WIN_BLD, PLOAD_IN_FL, PLOAD_IN_MA) Uses MODD_DIAG_MISC_TEB_n MODD_BEM_n MODD_BEM_OPTION_n MODE_THERMOS MODE_PSYCHRO YOMHOOK MODD_CSTS MODI_DX_AIR_COOLING_COIL_CV MODI_FLOOR_LAYER_E_BUDGET mode_psychrolib PARKIND1 MODD_TEB_n MODI_MASS_LAYER_E_BUDGET MinimalDXCoolingDriver MODE_CONV_DOE Arguments Type Intent Optional Attributes Name type(BEM_OPTIONS_t), intent(inout) :: BOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B type(DIAG_MISC_TEB_t), intent(inout) :: DMT real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PSUNTIME integer, intent(in) :: KDAY real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PT_CAN real, intent(in), DIMENSION(:) :: PQ_CAN real, intent(in), DIMENSION(:) :: PU_CAN real, intent(out), DIMENSION(:) :: PHU_BLD real, intent(in), DIMENSION(:) :: PT_RAD_IND real, intent(out), DIMENSION(:) :: PFLX_BLD_FL real, intent(out), DIMENSION(:) :: PFLX_BLD_MA real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PRAD_RF_MA real, intent(in), DIMENSION(:) :: PRAD_RF_FL real, intent(in), DIMENSION(:) :: PRAD_WL_MA real, intent(in), DIMENSION(:) :: PRAD_WL_FL real, intent(in), DIMENSION(:) :: PRAD_WIN_MA real, intent(in), DIMENSION(:) :: PRAD_WIN_FL real, intent(in), DIMENSION(:) :: PCONV_RF_BLD real, intent(in), DIMENSION(:) :: PCONV_WL_BLD real, intent(in), DIMENSION(:) :: PCONV_WIN_BLD real, intent(in), DIMENSION(:) :: PLOAD_IN_FL real, intent(in), DIMENSION(:) :: PLOAD_IN_MA Contents Source Code BEM Source Code SUBROUTINE BEM ( BOP , T , B , DMT , PTSTEP , PSUNTIME , KDAY , PPS , PRHOA , PT_CAN , & PQ_CAN , PU_CAN , PHU_BLD , PT_RAD_IND , PFLX_BLD_FL , PFLX_BLD_MA ,& PRADHT_IN , PRAD_RF_MA , PRAD_RF_FL , PRAD_WL_MA , PRAD_WL_FL ,& PRAD_WIN_MA , PRAD_WIN_FL , PCONV_RF_BLD , PCONV_WL_BLD , & PCONV_WIN_BLD , PLOAD_IN_FL , PLOAD_IN_MA ) !   ########################################################################## ! !!****  *BEM* !! !!    PURPOSE !!    ------- ! !     Computes the temperature and humidity evolution of indoor air, !     building energy demand, HVAC energy consumption, !     waste heat from HVAC systems, and heat fluxes from indoor to building surfaces. ! ! !!**  METHOD !     ------ ! !              NOMENCLATURE: bld  - refers to building plant area; !                            floor- refers to building plant area multiplied !                                   by the number of floors; !                            wall - refers to wall area (excluding windows). !                            win  - refers to window area. !                            mass - refers to internal mass area. ! ! !        solar radiation transmitted through windows !        ******************************************* ! !     Qsol_tr_win = Qsol_facade * tr_win * GR ! ! !        indoor wall conv/rad heat transfer coefficients !        *********************************************** ! !     The calculation of CHTC accounts for favorable or unfavorable convection !     depending on the relative position between the hot layer and cold layer ! ! !        building energy demand !        ********************** ! !     Calculation of the cooling and heating, sensible and latent building energy demand. !     The sensible demand includes the convective heat transfer from indoor surfaces, the !     convective fraction of internal heat gains, and sensible infiltration/ventilation heat !     gains. The latent demand includes the latent fraction of internal heat gains and latent !     infiltration/ventilation heat gains. ! !        surface areas and volummes (referred to m2_bld) !        *********************************************** ! !     Awall   =  WALL_O_HOR * (1 - GR) / BLD [m2_wall/m2_bld] !     Awin    =  WALL_O_HOR * GR / BLD       [m2_win/m2_bld] !     Amass   =  2 * N_FLOOR                  [m2_mass/m2_bld] !     N_FLOOR  =  BLD_HEIGHT / FLOOR_HEIGHT   [#] !     Aroof   =  1                           [m2_roof/m2_bld] !     Afloor  =  1                           [m2_floor/m2_bld] !     Vol_air =  BLD_HEIGHT                  [m3_bld/m2_bld] ! ! !        evolution of the internal temperature !        ************************************* ! !                                  dTin !     Vol_air * ro_air * cp_air * ---- = h_wall * Awall * (Twall - Tin) !                                   dt    + h_roof * Aroof * (Troof -Tin) !                                         + h_floor * Afloor *(Tfloor - Tin) !                                         + h_mass * Amass * (Tmass - Tin) !                                         + h_win * Awin * (Twin - Tin) !                                         + Qig * (1 - fig_rad) * (1-fig_lat) !                                         + Vinf * ro_air * cp_air * (Tout - Tin) !                                         + Vsys * ro_air * cp_air * (Tsys - Tin) ! ! !        evolution of the internal specific humidity !        ******************************************* ! !                                  dQin !      Vol_air * ro_air * lv_air * ---- = Qig * fig_lat !                                   dt    + Vinf * ro_air * lv_air * (Qout - Qin) !                                         + Vsys * ro_air * lv_air * (Qsys - Qin) ! ! !        heat fluxes from indoor to surfaces !        *********************************** ! !      Qin_wall  = h_wall  * (Tin - Twall)  [W/m2_wall] !      Qin_roof  = h_roof  * (Tin - Troof)  [W/m2_roof] !      Qin_floor = h_floor * (Tin - Tfloor) [W/m2_floor] !      Qin_mass  = h_wall  * (Tin - Tmass) !                + Qig * fig_rad * (1-fig_lat)/ 2 !                + Qsol_tr_win              [W/m2_mass] ! ! !        energy consumption and waste heat from cooling system !        ***************************************************** ! !      Qhvac  = Qbld / COP !      Qwaste = Qbld + Qhvac ! ! !        energy consumption and waste heat from heating system !        ***************************************************** ! !      Qhvac  = Qbld / Eff !      Qwaste = Qhvac - Qbld ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      B. Bueno           * Meteo-France * !! !!!    MODIFICATIONS !!    ------------- !!     Original 2010 !!     G. Pigeon nov. 2011: inclusion floor/mass budget inside !!                          add automatic/manual ventilation !!                          conserve exchanges with the different surfaces inside 1 time step !!    G. Pigeon sept. 2012: use of TARP/DOE coef for indoor convection !!                          use of both T%XT_WALL_A and T%XT_WALL_B for calculations !!                          the internal mass depth is 1/2 of the floor depth !!                          add the option of no atmospheric heat releases by HVAC system (B%XF_WATER_COND < 0) !!    G. Pigeon oct. 2012:  use indoor air density + new solar heat gain distribution !!    V. Masson May  2013   implicitation of internal building temperature evolution !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t ! USE MODD_CSTS , ONLY : XCPD , XSTEFAN , XLVTT , XG , XRV , XRD USE MODE_THERMOS USE MODE_PSYCHRO USE MODI_DX_AIR_COOLING_COIL_CV USE MODI_FLOOR_LAYER_E_BUDGET USE MODI_MASS_LAYER_E_BUDGET USE MODE_CONV_DOE ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! USE MODD_CSTS , ONLY : XTT ! use MinimalDXCoolingDriver , only : SimMinimalDXCooling use mode_psychrolib , only : SetUnitSystem , SI , GetHumRatioFromSpecificHum , GetSpecificHumFromHumRatio ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! TYPE ( BEM_OPTIONS_t ), INTENT ( INOUT ) :: BOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT ! REAL , INTENT ( IN ) :: PTSTEP ! Time step REAL , DIMENSION (:), INTENT ( IN ) :: PSUNTIME ! current solar time since midnight (solar time, s) INTEGER , INTENT ( IN ) :: KDAY ! Simulation day ! REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! Canyon air pressure [Pa] REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! Air density at the lowest level [kg m-3] REAL , DIMENSION (:), INTENT ( IN ) :: PT_CAN ! Canyon air temperature [K] REAL , DIMENSION (:), INTENT ( IN ) :: PQ_CAN ! Canyon air specific humidity [kg kg-1] REAL , DIMENSION (:), INTENT ( IN ) :: PU_CAN ! Canyon wind speed (m s-1) ! REAL , DIMENSION (:), INTENT ( OUT ) :: PHU_BLD ! Indoor relative humidity 0 < (-) < 1 REAL , DIMENSION (:), INTENT ( IN ) :: PT_RAD_IND ! Indoor mean radiant temperature [K] ! REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_FL ! Heat flux from indoor air to floor ! [W m-2(bld)] REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_MA ! Heat flux from indoor air to mass ! [W m-2(bld)] REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient ! [W K-1 m-2] REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_RF_MA ! Rad. fluxes between roof and mass REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_RF_FL ! Rad. fluxes between roof and floor REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_WL_MA ! Rad. fluxes between wall and mass REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_WL_FL ! Rad. fluxes between wall and floor REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_WIN_MA ! Rad. fluxes between wind. and mass REAL , DIMENSION (:) , INTENT ( IN ) :: PRAD_WIN_FL ! Rad. fluxes between wind. and floor REAL , DIMENSION (:) , INTENT ( IN ) :: PCONV_RF_BLD ! Conv. fluxes between roof and indoor air REAL , DIMENSION (:) , INTENT ( IN ) :: PCONV_WL_BLD ! Conv. fluxes between wall and indoor air REAL , DIMENSION (:) , INTENT ( IN ) :: PCONV_WIN_BLD ! Conv. fluxes between wind. and indoor air REAL , DIMENSION (:) , INTENT ( IN ) :: PLOAD_IN_FL ! solar + int heat gain on floor W/m2 [floor] REAL , DIMENSION (:) , INTENT ( IN ) :: PLOAD_IN_MA ! solar + int heat gain on floor W/m2 [mass] ! !*      0.2    Declarations of local variables ! INTEGER :: IRF ! Number of roof layers INTEGER :: IWL ! Number of wall layers !REAL                           :: ZTCOMF_MAX   ! Maximum comfort temperature for nat.vent [K] ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZFAN_AP ! Fan design pressure increase [Pa] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZFAN_EFF ! Fan total efficiency ! LOGICAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: GSCHED ! Day-night schedule flag ! *to be transported to inputs* ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZF_NIGHT ! Reduction factor of int.gains at night REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZF_DAY ! Amplification factor of int.gains at daytime ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZAC_IN_MA_COOL , ZAC_IN_FL_COOL , & ZAC_IN_RF_COOL , ZAC_IN_WL_A_COOL , & ZAC_IN_WL_B_COOL , ZAC_IN_WIN_COOL REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZAC_IN_MA_HEAT , ZAC_IN_FL_HEAT , & ZAC_IN_RF_HEAT , ZAC_IN_WL_A_HEAT , & ZAC_IN_WL_B_HEAT , ZAC_IN_WIN_HEAT ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZQIN ! Internal heat gains [W m-2(bld)] ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZV_VENT ! Ventilation flow rate [m3 s-1 m-2(bld)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZINF ! Infiltration flow rate [m3 s-1 m-2(bld)] ! LOGICAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: GNAT_VENT ! Is Natural ventilation active ? REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZNAT_VENT ! Nat.vent airflow rate [m3 s-1 m-2(bld)] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZTI_BLD ! Indoor air temperature at time step t + dt [K] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZTI_BLD_OPEN ! Indoor air temperature if windows opened REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZTI_BLD_CLOSED ! Indoor air temperature if windows closed ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZQCOOL_TRGT ! Specific humidity cooling setpoing [kg kg-1] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZQHEAT_TRGT ! Specific humidity heating setpoing [kg kg-1] ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZSHR ! Rated sensible heat rate REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZM_SYS_RAT ! Auxiliar mass flow rate [kg s-1 m-2(bld)] ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZXMIX ! Outdoor mixing fraction REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZT_MIX ! Mixing air temperature [K] REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZQ_MIX ! Mixing air specific humidity [kg kg-1] ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZQI_BLD ! Indoor air humidity at time step t + dt [K} REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZWASTE ! REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZDQS_FL REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZIMB_FL REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZDQS_MA REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZIMB_MA REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZLOAD_FL ! sum of solar and internal loads on floor REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZLOAD_MA ! sum of solar and internal loads on mass REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZRAD_FL_MA ! Rad. fluxes from floor to mass REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZCONV_FL_BLD ! Conv. fluxes from floor to indoor air REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZCONV_MA_BLD ! Conv. fluxes from mass to indoor air REAL , DIMENSION ( SIZE ( B % XTI_BLD )) :: ZRHOI ! indoor air density ! INTEGER :: JJ ! Loop counter REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! Local variable used for the coupling with MinimalDX REAL :: OutdoorHumRatio , InletHumRatio , OutletHumRatio , OutdoorTDryBulb , InletTDryBulb , OutletTemperature ! ! Psychrolib: use International System of Units call SetUnitSystem ( SI ) ! !!REAL :: ZEXPL = 0.5 !explicit coefficient for internal temperature evol. !!REAL :: ZIMPL = 0.5 !implicit coef.. ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'BEM' , 0 , ZHOOK_HANDLE ) ! !*      1.   Initializations !            --------------- ! ZRHOI (:) = PPS (:) / ( XRD * B % XTI_BLD (:) * ( 1. + (( XRV / XRD ) - 1. ) * B % XQI_BLD (:) ) ) ! *Temperal definitions for nat.vent* !ZTCOMF_MAX  = 26. + 273.16 ! ! *Definitions ZFAN_AP (:) = 60 0.0 ZFAN_EFF (:) = 0.7 ! ! *Other calcs IRF = SIZE ( T % XT_ROOF , 2 ) IWL = SIZE ( T % XT_WALL_A , 2 ) ! ! ! initial condition of QI_BLD equivalent to 50% RH IF ( ANY ( B % XQI_BLD (:) <= 1E-6 )) B % XQI_BLD = 0.5 * QSAT ( B % XTI_BLD , PPS ) ! ! *Temperal definitions for shedule* GSCHED (:) = . FALSE . WHERE ( GSCHED (:)) ZF_NIGHT (:) = 0.8 ZF_DAY (:) = 1.2 ELSE WHERE ZF_NIGHT (:) = 1. ZF_DAY (:) = 1. END WHERE ! ! *Int.gains schedule ! ZQIN = DMT % XQIN * B % XN_FLOOR WHERE ( PSUNTIME (:) > 0. . AND . PSUNTIME (:) < 2520 0. ) ! night between 0000 and 0700 ZQIN (:) = ZQIN (:) * ZF_NIGHT (:) ELSEWHERE ZQIN (:) = ZQIN (:) * ZF_DAY (:) END WHERE ! *Change of units AC/H -> [m3 s-1 m-2(bld)] ZV_VENT (:) = B % XV_VENT (:) * T % XBLD_HEIGHT (:) / 360 0. ZINF (:) = B % XINF (:) * T % XBLD_HEIGHT (:) / 360 0. ! !*      2.   heat balance for building floor and mass !            ---------------------------------------- ! !*      2.1 total load on the internal mass or floor ZLOAD_FL (:) = ( ZQIN (:) * B % XQIN_FRAD (:) * ( 1. - B % XQIN_FLAT (:)) + DMT % XTR_SW_WIN (:)) / ( B % XMASS_O_BLD (:) + 1. ) WHERE ( B % XN_FLOOR (:) > 1. ) ZLOAD_MA (:) = ZLOAD_FL (:) ELSEWHERE ZLOAD_MA (:) = 0. ENDWHERE ! !*      2.2 FLOOR HEAT BALANCE ! CALL FLOOR_LAYER_E_BUDGET ( B , PTSTEP , PFLX_BLD_FL , ZDQS_FL , ZIMB_FL , PRADHT_IN , & PRAD_WL_FL , PRAD_RF_FL , PRAD_WIN_FL , PLOAD_IN_FL , & ZRAD_FL_MA , ZCONV_FL_BLD ) ! !*      2.3 MASS HEAT BALANCE ! CALL MASS_LAYER_E_BUDGET ( B , PTSTEP , PFLX_BLD_MA , ZDQS_MA , ZIMB_MA , PRADHT_IN , & PRAD_WL_MA , PRAD_RF_MA , PRAD_WIN_MA , PLOAD_IN_MA , & ZRAD_FL_MA , ZCONV_MA_BLD ) ! ! ZAC_IN_WL_A_COOL = CHTC_VERT_DOE ( T % XT_WALL_A (:, IWL ), DMT % XTCOOL_TARGET ) ZAC_IN_WL_B_COOL = CHTC_VERT_DOE ( T % XT_WALL_B (:, IWL ), DMT % XTCOOL_TARGET ) ZAC_IN_WIN_COOL = CHTC_VERT_DOE ( B % XT_WIN2 , DMT % XTCOOL_TARGET ) ZAC_IN_MA_COOL = CHTC_VERT_DOE ( B % XT_MASS (:, 1 ) , DMT % XTCOOL_TARGET ) ZAC_IN_RF_COOL = CHTC_DOWN_DOE ( T % XT_ROOF (:, IRF ) , DMT % XTCOOL_TARGET ) ZAC_IN_FL_COOL = CHTC_UP_DOE ( B % XT_FLOOR (:, 1 ) , DMT % XTCOOL_TARGET ) ZAC_IN_WL_A_HEAT = CHTC_VERT_DOE ( T % XT_WALL_A (:, IWL ), DMT % XTHEAT_TARGET ) ZAC_IN_WL_B_HEAT = CHTC_VERT_DOE ( T % XT_WALL_B (:, IWL ), DMT % XTHEAT_TARGET ) ZAC_IN_WIN_HEAT = CHTC_VERT_DOE ( B % XT_WIN2 , DMT % XTHEAT_TARGET ) ZAC_IN_MA_HEAT = CHTC_VERT_DOE ( B % XT_MASS (:, 1 ) , DMT % XTHEAT_TARGET ) ZAC_IN_RF_HEAT = CHTC_DOWN_DOE ( T % XT_ROOF (:, IRF ) , DMT % XTHEAT_TARGET ) ZAC_IN_FL_HEAT = CHTC_UP_DOE ( B % XT_FLOOR (:, 1 ) , DMT % XTHEAT_TARGET ) DO JJ = 1 , SIZE ( ZAC_IN_WIN_COOL ) ZAC_IN_WL_A_COOL ( JJ ) = MAX ( 1. , ZAC_IN_WL_A_COOL ( JJ )) ZAC_IN_WL_B_COOL ( JJ ) = MAX ( 1. , ZAC_IN_WL_B_COOL ( JJ )) ZAC_IN_WIN_COOL ( JJ ) = MAX ( 1. , ZAC_IN_WIN_COOL ( JJ )) ZAC_IN_MA_COOL ( JJ ) = MAX ( 1. , ZAC_IN_MA_COOL ( JJ )) ZAC_IN_RF_COOL ( JJ ) = MAX ( 1. , ZAC_IN_RF_COOL ( JJ )) ZAC_IN_FL_COOL ( JJ ) = MAX ( 1. , ZAC_IN_FL_COOL ( JJ )) ZAC_IN_WL_A_HEAT ( JJ ) = MAX ( 1. , ZAC_IN_WL_A_HEAT ( JJ )) ZAC_IN_WL_B_HEAT ( JJ ) = MAX ( 1. , ZAC_IN_WL_B_HEAT ( JJ )) ZAC_IN_WIN_HEAT ( JJ ) = MAX ( 1. , ZAC_IN_WIN_HEAT ( JJ )) ZAC_IN_MA_HEAT ( JJ ) = MAX ( 1. , ZAC_IN_MA_HEAT ( JJ )) ZAC_IN_RF_HEAT ( JJ ) = MAX ( 1. , ZAC_IN_RF_HEAT ( JJ )) ZAC_IN_FL_HEAT ( JJ ) = MAX ( 1. , ZAC_IN_FL_HEAT ( JJ )) ENDDO !*      4.   Indoor energy balance calculation !            --------------------------------- ! DO JJ = 1 , SIZE ( PT_CAN ) ! *first guess of indoor temperature ZTI_BLD ( JJ ) = B % XTI_BLD ( JJ ) + PTSTEP / ( ZRHOI ( JJ ) * XCPD * T % XBLD_HEIGHT ( JJ )) & * ( T % XWALL_O_BLD ( JJ ) * PCONV_WL_BLD ( JJ ) + B % XGLAZ_O_BLD ( JJ ) * PCONV_WIN_BLD ( JJ ) & + B % XMASS_O_BLD ( JJ ) * ZCONV_MA_BLD ( JJ ) + PCONV_RF_BLD ( JJ ) + ZCONV_FL_BLD ( JJ ) & + ZQIN ( JJ ) * ( 1 - B % XQIN_FRAD ( JJ )) * ( 1 - B % XQIN_FLAT ( JJ )) ) ! !################################################################################ ! *is natural surventilation active at the current time step ? !--------------------------------------------------------------------------------- ! !    *no surventilation possible IF ( B % CNATVENT ( JJ ) == 'NONE' ) THEN ! GNAT_VENT ( JJ ) = . FALSE . ! !    *automatic management of surventilation ELSEIF ( B % CNATVENT ( JJ ) == 'AUTO' . OR . B % CNATVENT ( JJ ) == 'MECH' ) THEN ! IF ( MOD ( PSUNTIME ( JJ ), 360 0. ) . LT . PTSTEP ) THEN ! IF ( B % XTI_BLD ( JJ ). GT . PT_CAN ( JJ ) + 1 ) THEN ! condition to enable the IF ( B % CNATVENT ( JJ ) == 'AUTO' ) THEN ! natural surventilation rate calculation (window opening) CALL GET_NAT_VENT ( B % XTI_BLD ( JJ ), PT_CAN ( JJ ), PU_CAN ( JJ ), B % XGR ( JJ ), & B % XFLOOR_HW_RATIO ( JJ ), T % XBLD_HEIGHT ( JJ ), ZNAT_VENT ( JJ )) ELSE IF ( B % CNATVENT ( JJ ) == 'MECH' ) THEN ! mechanical surventilation rate calculation : 5 volumes/hour ZNAT_VENT ( JJ ) = 5.0 * T % XBLD_HEIGHT ( JJ ) / 360 0. END IF ! ZTI_BLD_OPEN ( JJ ) = ZTI_BLD ( JJ ) & + ZNAT_VENT ( JJ ) * PTSTEP / T % XBLD_HEIGHT ( JJ ) * ( PT_CAN ( JJ ) - B % XTI_BLD ( JJ )) ZTI_BLD_CLOSED ( JJ ) = ZTI_BLD ( JJ ) & + ( ZINF ( JJ ) + ZV_VENT ( JJ )) * PTSTEP / T % XBLD_HEIGHT ( JJ ) * ( PT_CAN ( JJ ) - B % XTI_BLD ( JJ )) ! GNAT_VENT ( JJ ) = ( ZTI_BLD_OPEN ( JJ ) <= DMT % XTCOOL_TARGET ( JJ ) . AND . & ZTI_BLD_OPEN ( JJ ) < ZTI_BLD_CLOSED ( JJ ) . AND . & ZTI_BLD_OPEN ( JJ ) > DMT % XTHEAT_TARGET ( JJ ) + 4. ) ! ELSE GNAT_VENT ( JJ ) = . FALSE . ENDIF B % LNATVENT_NIGHT ( JJ ) = GNAT_VENT ( JJ ) ELSE GNAT_VENT ( JJ ) = B % LNATVENT_NIGHT ( JJ ) ENDIF ! !    *manual management of surventilation ELSEIF ( B % CNATVENT ( JJ ) == 'MANU' ) THEN ! B % LNATVENT_NIGHT ( JJ ) = B % LNATVENT_NIGHT ( JJ ) . AND . & . NOT . ( PSUNTIME ( JJ ) > 5. * 3600 . AND . PSUNTIME ( JJ ) < 1 8. * 3600 ) ! GNAT_VENT ( JJ ) = ( PSUNTIME ( JJ ) > 1 8. * 360 0. . AND . PSUNTIME ( JJ ) < 2 1. * 360 0. & . AND . PT_CAN ( JJ ) < B % XTI_BLD ( JJ ) + 2. & . AND . PT_CAN ( JJ ) > DMT % XTHEAT_TARGET ( JJ ) & . AND . ( B % XTI_BLD ( JJ ) > DMT % XTHEAT_TARGET ( JJ ) + 5. & . OR . B % XTI_BLD ( JJ ) == DMT % XTCOOL_TARGET ( JJ ) ) ) GNAT_VENT ( JJ ) = GNAT_VENT ( JJ ) . OR . B % LNATVENT_NIGHT ( JJ ) ! ENDIF ! ! Decicion about natural surventilation OK !################################################################################ ! ! !################################################################################ ! COMPUTE ENERGY DEMAND !--------------------------------------------------------------------------------- ! *If natural surventilation ACTIVE IF ( GNAT_VENT ( JJ )) THEN ! CALL GET_NAT_VENT ( B % XTI_BLD ( JJ ), PT_CAN ( JJ ), PU_CAN ( JJ ), B % XGR ( JJ ), & B % XFLOOR_HW_RATIO ( JJ ), T % XBLD_HEIGHT ( JJ ), ZNAT_VENT ( JJ ) ) ! ZV_VENT ( JJ ) = 0. ZINF ( JJ ) = 0. ! DMT % XH_BLD_COOL ( JJ ) = 0.0 ! No HVAC consumption DMT % XH_BLD_HEAT ( JJ ) = 0.0 DMT % XLE_BLD_COOL ( JJ ) = 0.0 ! No HVAC consumption DMT % XLE_BLD_HEAT ( JJ ) = 0.0 ! DMT % XT_BLD_COOL ( JJ ) = 0.0 ! No HVAC consumption DMT % XHVAC_COOL ( JJ ) = 0.0 DMT % XT_SYS ( JJ ) = B % XTI_BLD ( JJ ) ! No mechanical ventilation DMT % XQ_SYS ( JJ ) = B % XQI_BLD ( JJ ) ! DMT % XH_WASTE ( JJ ) = 0.0 DMT % XLE_WASTE ( JJ ) = 0.0 DMT % XFAN_POWER ( JJ ) = 0.0 DMT % XHVAC_HEAT ( JJ ) = 0.0 ! DMT % XM_SYS ( JJ ) = 0.0 DMT % XCOP ( JJ ) = 0.0 DMT % XCAP_SYS ( JJ ) = 0.0 ! ! *If natural surventilation INACTIVE ELSE ! ZNAT_VENT ( JJ ) = 0. ! ! ------------------------------------------------ ! * Building energy demand for heating and cooling ! ------------------------------------------------ ! DMT % XH_BLD_COOL ( JJ ) = T % XWALL_O_BLD ( JJ ) / 2. * ( ZAC_IN_WL_A_COOL ( JJ ) * ( T % XT_WALL_A ( JJ , IWL ) - DMT % XTCOOL_TARGET ( JJ )) & + ZAC_IN_WL_B_COOL ( JJ ) * ( T % XT_WALL_B ( JJ , IWL ) - DMT % XTCOOL_TARGET ( JJ ))) & + B % XGLAZ_O_BLD ( JJ ) * ZAC_IN_WIN_COOL ( JJ ) * ( B % XT_WIN2 ( JJ ) - DMT % XTCOOL_TARGET ( JJ )) & + ZAC_IN_MA_COOL ( JJ ) * B % XMASS_O_BLD ( JJ ) * ( B % XT_MASS ( JJ , 1 ) - DMT % XTCOOL_TARGET ( JJ )) & + ZAC_IN_RF_COOL ( JJ ) * ( T % XT_ROOF ( JJ , IRF ) - DMT % XTCOOL_TARGET ( JJ )) & + ZAC_IN_FL_COOL ( JJ ) * ( B % XT_FLOOR ( JJ , 1 ) - DMT % XTCOOL_TARGET ( JJ )) & + ZQIN ( JJ ) * ( 1 - B % XQIN_FRAD ( JJ )) * ( 1 - B % XQIN_FLAT ( JJ )) & + ( ZINF ( JJ ) + ZV_VENT ( JJ )) * ZRHOI ( JJ ) * XCPD * ( PT_CAN ( JJ ) - DMT % XTCOOL_TARGET ( JJ )) ! DMT % XH_BLD_HEAT ( JJ ) = - ( T % XWALL_O_BLD ( JJ ) / 2. * ( ZAC_IN_WL_A_HEAT ( JJ ) * ( T % XT_WALL_A ( JJ , IWL ) - DMT % XTHEAT_TARGET ( JJ )) & + ZAC_IN_WL_B_HEAT ( JJ ) * ( T % XT_WALL_B ( JJ , IWL ) - DMT % XTHEAT_TARGET ( JJ ))) & + B % XGLAZ_O_BLD ( JJ ) * ZAC_IN_WIN_HEAT ( JJ ) * ( B % XT_WIN2 ( JJ ) - DMT % XTHEAT_TARGET ( JJ )) & + ZAC_IN_MA_HEAT ( JJ ) * B % XMASS_O_BLD ( JJ ) * ( B % XT_MASS ( JJ , 1 ) - DMT % XTHEAT_TARGET ( JJ )) & + ZAC_IN_RF_HEAT ( JJ ) * ( T % XT_ROOF ( JJ , IRF ) - DMT % XTHEAT_TARGET ( JJ )) & + ZAC_IN_FL_HEAT ( JJ ) * ( B % XT_FLOOR ( JJ , 1 ) - DMT % XTHEAT_TARGET ( JJ )) & + ZQIN ( JJ ) * ( 1 - B % XQIN_FRAD ( JJ )) * ( 1 - B % XQIN_FLAT ( JJ )) & + ( ZINF ( JJ ) + ZV_VENT ( JJ )) * ZRHOI ( JJ ) * XCPD * ( PT_CAN ( JJ ) - DMT % XTHEAT_TARGET ( JJ ))) ! ZQCOOL_TRGT ( JJ ) = 0.62198 * B % XHR_TARGET ( JJ ) * PSAT ( DMT % XTCOOL_TARGET ( JJ )) / & ( PPS ( JJ ) - B % XHR_TARGET ( JJ ) * PSAT ( DMT % XTCOOL_TARGET ( JJ ))) ! DMT % XLE_BLD_COOL ( JJ ) = ZQIN ( JJ ) * B % XQIN_FLAT ( JJ ) & + ( ZINF ( JJ ) + ZV_VENT ( JJ )) * ZRHOI ( JJ ) * XLVTT * ( PQ_CAN ( JJ ) - ZQCOOL_TRGT ( JJ )) ! ZQHEAT_TRGT ( JJ ) = 0.62198 * B % XHR_TARGET ( JJ ) * PSAT ( DMT % XTHEAT_TARGET ( JJ )) / & ( PPS ( JJ ) - B % XHR_TARGET ( JJ ) * PSAT ( DMT % XTHEAT_TARGET ( JJ ))) ! DMT % XLE_BLD_HEAT ( JJ ) = ZQIN ( JJ ) * B % XQIN_FLAT ( JJ ) & + ( ZINF ( JJ ) + ZV_VENT ( JJ )) * ZRHOI ( JJ ) * XLVTT * ( PQ_CAN ( JJ ) - ZQHEAT_TRGT ( JJ )) ! ! * Autosize calculations ! IF ( BOP % LAUTOSIZE . AND . KDAY == 15 ) THEN ! IF ( DMT % XH_BLD_COOL ( JJ ) > B % XAUX_MAX ( JJ )) THEN ! B % XAUX_MAX ( JJ ) = DMT % XH_BLD_COOL ( JJ ) ! ! Cooling coil sensible heat rate ZSHR ( JJ ) = MIN ( XCPD * ( DMT % XTCOOL_TARGET ( JJ ) - B % XT_ADP ( JJ )) / & ( ENTH_FN_T_Q ( DMT % XTCOOL_TARGET ( JJ ), ZQCOOL_TRGT ( JJ )) - & ENTH_FN_T_Q ( B % XT_ADP ( JJ ), QSAT ( B % XT_ADP ( JJ ), PPS ( JJ )))), 1. ) ! Cooling Coil Capacity [W m-2(bld)] B % XCAP_SYS_RAT ( JJ ) = DMT % XH_BLD_COOL ( JJ ) / ZSHR ( JJ ) ! ! Cooling rated air flow rate [kg s-1 m-2(bld)] ZM_SYS_RAT ( JJ ) = DMT % XH_BLD_COOL ( JJ ) / XCPD / ( DMT % XTCOOL_TARGET ( JJ ) - ( 1 4.0 + 27 3.16 )) IF ( ZM_SYS_RAT ( JJ ) > B % XM_SYS_RAT ( JJ )) B % XM_SYS_RAT ( JJ ) = ZM_SYS_RAT ( JJ ) ! ! Impose condition IF ( B % XM_SYS_RAT ( JJ ) / ZRHOI ( JJ ) / B % XCAP_SYS_RAT ( JJ ) < 0.00004027 ) THEN B % XCAP_SYS_RAT ( JJ ) = B % XM_SYS_RAT ( JJ ) / ZRHOI ( JJ ) / 0.00004027 ELSE IF ( B % XM_SYS_RAT ( JJ ) / ZRHOI ( JJ ) / B % XCAP_SYS_RAT ( JJ ) > 0.00006041 ) THEN B % XCAP_SYS_RAT ( JJ ) = B % XM_SYS_RAT ( JJ ) / ZRHOI ( JJ ) / 0.00006041 END IF ! END IF ! END IF ! ! * END Autosize calculations ! ! * system efficiency ! ................... ! DMT % XM_SYS ( JJ ) = B % XM_SYS_RAT ( JJ ) DMT % XCOP ( JJ ) = B % XCOP_RAT ( JJ ) DMT % XCAP_SYS ( JJ ) = B % XCAP_SYS_RAT ( JJ ) ! ! * Mixing conditions ! ................. ! ZXMIX ( JJ ) = ZV_VENT ( JJ ) * ZRHOI ( JJ ) / DMT % XM_SYS ( JJ ) ZT_MIX ( JJ ) = ZXMIX ( JJ ) * PT_CAN ( JJ ) + ( 1. - ZXMIX ( JJ )) * B % XTI_BLD ( JJ ) ZQ_MIX ( JJ ) = ZXMIX ( JJ ) * PQ_CAN ( JJ ) + ( 1. - ZXMIX ( JJ )) * B % XQI_BLD ( JJ ) ! ! --------------------------------------------- ! * COOLING system : Performance and Waste heat ! --------------------------------------------- ! IF ( DMT % XH_BLD_COOL ( JJ ) >= 0.0 ) THEN ! ! *ideal system IF ( BOP % CCOOL_COIL == 'IDEAL' ) THEN ! DMT % XT_BLD_COOL ( JJ ) = DMT % XH_BLD_COOL ( JJ ) + DMT % XLE_BLD_COOL ( JJ ) !desactivation of LE_BLD_COOL impact on HVAC_COOL calculation !following too much impact in VURCA simulation (23/01/2012) !this would be the case for a vaporization system ! !DMT%XHVAC_COOL (JJ) = DMT%XT_BLD_COOL(JJ) / B%XCOP_RAT(JJ) DMT % XHVAC_COOL ( JJ ) = DMT % XH_BLD_COOL ( JJ ) / B % XCOP_RAT ( JJ ) IF ( DMT % XHVAC_COOL ( JJ ) < 0.0 ) DMT % XHVAC_COOL ( JJ ) = 0.0 ! DMT % XT_SYS ( JJ ) = ZT_MIX ( JJ ) - DMT % XH_BLD_COOL ( JJ ) / DMT % XM_SYS ( JJ ) / XCPD !DMT%XQ_SYS(JJ) = ZQ_MIX(JJ) - DMT%XLE_BLD_COOL(JJ) / DMT%XM_SYS(JJ)/ XLVTT !desactivation following too much impact in VURCA simulation !(23/01/2012) DMT % XQ_SYS ( JJ ) = ZQ_MIX ( JJ ) ! DMT % XH_WASTE ( JJ ) = DMT % XHVAC_COOL ( JJ ) * ( 1. + B % XCOP_RAT ( JJ )) * ( 1. - B % XF_WATER_COND ( JJ )) DMT % XLE_WASTE ( JJ ) = DMT % XHVAC_COOL ( JJ ) * ( 1. + B % XCOP_RAT ( JJ )) * B % XF_WATER_COND ( JJ ) ! ! *real system ELSEIF ( BOP % CCOOL_COIL == 'DXCOIL' ) THEN ! CALL DX_AIR_COOLING_COIL_CV ( PT_CAN ( JJ ), PQ_CAN ( JJ ), PPS ( JJ ), ZRHOI ( JJ ), ZT_MIX ( JJ ), & ZQ_MIX ( JJ ), B % XCOP_RAT ( JJ ), B % XCAP_SYS_RAT ( JJ ), & B % XT_ADP ( JJ ), B % XF_WATER_COND ( JJ ), DMT % XM_SYS ( JJ ), & DMT % XH_BLD_COOL ( JJ ), DMT % XH_WASTE ( JJ ), DMT % XLE_WASTE ( JJ ), & DMT % XCOP ( JJ ), DMT % XCAP_SYS ( JJ ), DMT % XT_SYS ( JJ ), & DMT % XQ_SYS ( JJ ), DMT % XHVAC_COOL ( JJ ), DMT % XT_BLD_COOL ( JJ ) ) ELSEIF ( BOP % CCOOL_COIL == 'MINIDX' ) THEN ! Notes: ! B%XT_ADP(JJ) -- i.e. PT_ADP in dx_air_cooling_coil_cv.F90 -- is no loger needed as the ADP is now calculated. ! B%XF_WATER_COND(JJ) -- i.e. PF_WATER_COND in dx_air_cooling_coil_cv.F90 -- is no longer used as ! MinimalDX only supoorts dry evaporators. B % XF_WATER_COND ( JJ ) = 0. ! In TEB the humidity is specified in terms of speicifc humidity, in MinimalDX the mixing ratio is used instead. OutdoorHumRatio = GetHumRatioFromSpecificHum ( PQ_CAN ( JJ )) InletHumRatio = GetHumRatioFromSpecificHum ( ZQ_MIX ( JJ )) ! In TEB the temperature is specified in K, in MinimalDX in degree C. OutdoorTDryBulb = PT_CAN ( JJ ) - XTT InletTDryBulb = ZT_MIX ( JJ ) - XTT call SimMinimalDXCooling ( OutdoorTDryBulb , & ! PT_CANYON   : OutdoorTDryBulb OutdoorHumRatio , & ! PQ_CANYON   : OutdoorSpecificHum PPS ( JJ ), & ! PPS         : OutdoorPressure InletTDryBulb , & ! PT_IN       : InletTDryBulb InletHumRatio , & ! PQ_IN       : InletHumRatio B % XCOP_RAT ( JJ ), & ! PCOP_RAT    : RatedCOP B % XCAP_SYS_RAT ( JJ ), & ! PCAP_SYS_RAT: RatedTotCap DMT % XH_BLD_COOL ( JJ ), & ! PH_BLD_COOL : SensibleCoolingLoad DMT % XM_SYS ( JJ ), & ! PM_SYS      : RatedAirMassFlowRate DMT % XCOP ( JJ ), & ! PCOP        : COP DMT % XCAP_SYS ( JJ ), & ! PCAP_SYS    : TotalCoolingCapacity OutletTemperature , & ! PT_OUT      : OutletTemperature OutletHumRatio , & ! PQ_OUT      : OutletHumRatio DMT % XHVAC_COOL ( JJ ), & ! PDX_POWER   : ElecCoolingPower DMT % XLE_WASTE ( JJ ), & ! LE_WASTE    : LatCoolingEnergyRate DMT % XT_BLD_COOL ( JJ ), & ! PT_BLD_COOL : TotalCoolingEnergyRate DMT % XH_WASTE ( JJ ) ) ! PH_WASTE    : TotalSensibleHeatOut DMT % XT_SYS ( JJ ) = OutletTemperature + XTT DMT % XQ_SYS ( JJ ) = GetSpecificHumFromHumRatio ( OutletHumRatio ) ENDIF !end type of cooling system !!! case of system without atmospheric releases. I-e releases in soil/water F_WATER_COND < 0 IF ( B % XF_WATER_COND ( JJ ) < 0 ) THEN DMT % XH_WASTE ( JJ ) = 0. DMT % XLE_WASTE ( JJ ) = 0. ENDIF !!!! ! !         From EP Engineering Reference (p. 647) DMT % XFAN_POWER ( JJ ) = DMT % XM_SYS ( JJ ) * ZFAN_AP ( JJ ) * ZFAN_EFF ( JJ ) * ZRHOI ( JJ ) ! DMT % XH_BLD_HEAT ( JJ ) = 0.0 DMT % XLE_BLD_HEAT ( JJ ) = 0.0 DMT % XHVAC_HEAT ( JJ ) = 0.0 ! ! --------------------------------------------- ! * HEATING system : Performance and Waste heat ! --------------------------------------------- ! ELSE IF ( DMT % XH_BLD_HEAT ( JJ ) > 0.0 ) THEN ! ! *specific computation for real heating system IF ( BOP % CHEAT_COIL . EQ . 'FINCAP' ) THEN IF ( DMT % XH_BLD_HEAT ( JJ ) > B % XCAP_SYS_HEAT ( JJ )) DMT % XH_BLD_HEAT ( JJ ) = B % XCAP_SYS_HEAT ( JJ ) END IF ! DMT % XT_SYS ( JJ ) = ZT_MIX ( JJ ) + DMT % XH_BLD_HEAT ( JJ ) / DMT % XM_SYS ( JJ ) / XCPD DMT % XQ_SYS ( JJ ) = ZQ_MIX ( JJ ) ! DMT % XHVAC_HEAT ( JJ ) = DMT % XH_BLD_HEAT ( JJ ) / B % XEFF_HEAT ( JJ ) DMT % XH_WASTE ( JJ ) = DMT % XHVAC_HEAT ( JJ ) - DMT % XH_BLD_HEAT ( JJ ) DMT % XLE_WASTE ( JJ ) = 0.0 DMT % XH_BLD_COOL ( JJ ) = 0.0 DMT % XLE_BLD_COOL ( JJ ) = 0.0 DMT % XT_BLD_COOL ( JJ ) = 0.0 DMT % XHVAC_COOL ( JJ ) = 0.0 !       From EP Engineering Reference (p. 647) DMT % XFAN_POWER ( JJ ) = DMT % XM_SYS ( JJ ) * ZFAN_AP ( JJ ) * ( ZFAN_EFF ( JJ ) * ZRHOI ( JJ )) ! ! ------------------------------ ! * NEITHEIR COOLING NOR HEATING ! ------------------------------ ! ELSE ! DMT % XH_BLD_COOL ( JJ ) = 0.0 DMT % XH_BLD_HEAT ( JJ ) = 0.0 DMT % XLE_BLD_COOL ( JJ ) = 0.0 DMT % XLE_BLD_HEAT ( JJ ) = 0.0 ! DMT % XT_BLD_COOL ( JJ ) = 0.0 DMT % XHVAC_COOL ( JJ ) = 0.0 DMT % XT_SYS ( JJ ) = ZT_MIX ( JJ ) DMT % XQ_SYS ( JJ ) = ZQ_MIX ( JJ ) DMT % XH_WASTE ( JJ ) = 0.0 DMT % XLE_WASTE ( JJ ) = 0.0 DMT % XFAN_POWER ( JJ ) = 0.0 DMT % XHVAC_HEAT ( JJ ) = 0.0 ! END IF !end for heating/cooling sytem ! END IF ! !--------------------------------------------------------------------------------- ! ENERGY DEMAND COMPUTED !################################################################################ ENDDO ! !--------------------------------------------------- ! EVOLUTION OF THE INTERNAL TEMPERATURE AND HUMIDITY !################################################### ! ZTI_BLD (:) = ( ZTI_BLD (:) + PTSTEP / T % XBLD_HEIGHT (:) * & (( ZINF (:) + ZNAT_VENT (:)) * PT_CAN (:) + DMT % XM_SYS (:) / ZRHOI (:) * ( DMT % XT_SYS (:) ) )) & / ( 1. + PTSTEP / T % XBLD_HEIGHT (:) * ( ZINF (:) + ZNAT_VENT (:) + DMT % XM_SYS (:) / ZRHOI (:)) ) ZQI_BLD (:) = ( B % XQI_BLD (:) + PTSTEP / T % XBLD_HEIGHT (:) * & ( ZQIN (:) * B % XQIN_FLAT (:) / ( ZRHOI (:) * XLVTT ) + ( ZINF (:) + ZNAT_VENT (:)) * ( PQ_CAN (:)) & + DMT % XM_SYS (:) / ZRHOI (:) * ( DMT % XQ_SYS (:) ) ))& / ( 1. + PTSTEP / T % XBLD_HEIGHT (:) * ( ZINF (:) + ZNAT_VENT (:) + DMT % XM_SYS (:) / ZRHOI (:)) ) ! ! Update variables B % XTI_BLD (:) = ZTI_BLD (:) B % XQI_BLD (:) = ZQI_BLD (:) ! ! Waste heat due to infiltration/ventilation ZWASTE (:) = ( ZINF (:) + ZV_VENT (:) + ZNAT_VENT (:)) * ZRHOI (:) DMT % XH_WASTE (:) = DMT % XH_WASTE (:) + ZWASTE (:) * XCPD * ( B % XTI_BLD (:) - PT_CAN (:)) DMT % XLE_WASTE (:) = DMT % XLE_WASTE (:) + ZWASTE (:) * XLVTT * ( B % XQI_BLD (:) - PQ_CAN (:)) ! ! IF ( LHOOK ) CALL DR_HOOK ( 'BEM' , 1 , ZHOOK_HANDLE ) ! CONTAINS ! SUBROUTINE GET_NAT_VENT ( PTI_BLD , PPT_CAN , PPU_CAN , PGR , PF_AUX , PPBLD_HEIGHT , PNAT_VENT ) ! IMPLICIT NONE ! REAL , INTENT ( IN ) :: PTI_BLD REAL , INTENT ( IN ) :: PPT_CAN REAL , INTENT ( IN ) :: PPU_CAN REAL , INTENT ( IN ) :: PGR REAL , INTENT ( IN ) :: PF_AUX REAL , INTENT ( IN ) :: PPBLD_HEIGHT REAL , INTENT ( OUT ) :: PNAT_VENT REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'BEM:GET_NAT_VENT' , 0 , ZHOOK_HANDLE ) ! PNAT_VENT = XG * ( PTI_BLD - PPT_CAN ) IF ( PNAT_VENT . LT . 0. ) THEN ! exceptional case with MANU ventilation system PNAT_VENT = PPBLD_HEIGHT / 360 0. !minimum value ELSE PNAT_VENT = 1. / 3. * ( PNAT_VENT / PPT_CAN ) ** ( 1. / 2. ) & * ( 1.5 + PTI_BLD / PNAT_VENT * 1. / 2. * PPU_CAN ** 2 * 0.1 ) ** ( 3. / 2. ) & * PGR * PF_AUX / 1.5 / 2. PNAT_VENT = MIN ( PNAT_VENT , 5.0 * PPBLD_HEIGHT / 360 0. ) ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( 'BEM:GET_NAT_VENT' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE GET_NAT_VENT ! END SUBROUTINE BEM","tags":"","loc":"proc/bem.html"},{"title":"ALBEDO_FROM_NIR_VIS – Town Energy Balance (TEB) model API docs","text":"subroutine ALBEDO_FROM_NIR_VIS(PSW_BANDS, PALBNIR, PALBVIS, PALBUV, PDIR_ALB, PSCA_ALB) Uses MODD_ISBA_PAR YOMHOOK MODD_SURF_PAR PARKIND1 Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PSW_BANDS real, intent(in), DIMENSION(:) :: PALBNIR real, intent(in), DIMENSION(:) :: PALBVIS real, intent(in), DIMENSION(:) :: PALBUV real, intent(out), DIMENSION(:,:) :: PDIR_ALB real, intent(out), DIMENSION(:,:) :: PSCA_ALB Contents Source Code ALBEDO_FROM_NIR_VIS Source Code SUBROUTINE ALBEDO_FROM_NIR_VIS ( PSW_BANDS , PALBNIR , PALBVIS , PALBUV , PDIR_ALB , PSCA_ALB ) !     ########################################################################### ! !!****  *ALBEDO_FROM_NIR_VIS* - routine to initialize albedo for !!                              any wavelength from near-infra-red, !!                              visible and UV albedo !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    02/2003 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_ISBA_PAR , ONLY : XRED_EDGE , XUV_EDGE USE MODD_SURF_PAR , ONLY : XUNDEF ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! REAL , DIMENSION (:), INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) REAL , DIMENSION (:), INTENT ( IN ) :: PALBNIR ! near infra-red albedo REAL , DIMENSION (:), INTENT ( IN ) :: PALBVIS ! visible albedo REAL , DIMENSION (:), INTENT ( IN ) :: PALBUV ! UV albedo REAL , DIMENSION (:,:), INTENT ( OUT ) :: PDIR_ALB ! direct  albedo for each wavelength REAL , DIMENSION (:,:), INTENT ( OUT ) :: PSCA_ALB ! diffuse albedo for each wavelength ! !*       0.2   Declarations of local variables !              ------------------------------- ! INTEGER :: ISWB ! number of SW spectral bands INTEGER :: JSWB ! loop counter on number of SW spectral bands REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'ALBEDO_FROM_NIR_VIS' , 0 , ZHOOK_HANDLE ) ISWB = SIZE ( PSW_BANDS ) ! PDIR_ALB (:,:) = XUNDEF PSCA_ALB (:,:) = XUNDEF ! IF ( ISWB == 1 ) THEN WHERE ( PALBNIR (:) /= XUNDEF ) PDIR_ALB (:, 1 ) = 0.5 * ( PALBNIR (:) + PALBVIS (:)) ELSE DO JSWB = 1 , ISWB IF ( PSW_BANDS ( JSWB ) > XRED_EDGE ) THEN ! XRED_EDGE=0.7 micro-m PDIR_ALB (:, JSWB ) = PALBNIR (:) ELSE IF ( PSW_BANDS ( JSWB ) < XUV_EDGE ) THEN ! XUV_EDGE=0.25 micro-m PDIR_ALB (:, JSWB ) = PALBUV (:) ELSE PDIR_ALB (:, JSWB ) = PALBVIS (:) END IF END DO END IF ! PSCA_ALB (:,:) = PDIR_ALB (:,:) IF ( LHOOK ) CALL DR_HOOK ( 'ALBEDO_FROM_NIR_VIS' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END SUBROUTINE ALBEDO_FROM_NIR_VIS","tags":"","loc":"proc/albedo_from_nir_vis.html"},{"title":"ISBA_ALBEDO – Town Energy Balance (TEB) model API docs","text":"subroutine ISBA_ALBEDO(PEK, OTR_ML, OMEB, PDIR_SW, PSCA_SW, PSW_BANDS, KSW, PFALB, PFFV, PFFG, PGLOBAL_SW, PMEB_SCA_SW, PALBNIR_TVEG, PALBVIS_TVEG, PALBNIR_TSOIL, PALBVIS_TSOIL) Uses YOMHOOK MODI_ALBEDO_FROM_NIR_VIS PARKIND1 MODD_SURF_PAR MODD_ISBA_n Arguments Type Intent Optional Attributes Name type(ISBA_PE_t), intent(inout) :: PEK logical, intent(in) :: OTR_ML logical, intent(in) :: OMEB real, intent(in), DIMENSION(:,:) :: PDIR_SW real, intent(in), DIMENSION(:,:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PSW_BANDS integer, intent(in) :: KSW real, intent(in), DIMENSION(:) :: PFALB real, intent(in), DIMENSION(:) :: PFFV real, intent(in), DIMENSION(:) :: PFFG real, intent(out), DIMENSION(:) :: PGLOBAL_SW real, intent(out), DIMENSION(:) :: PMEB_SCA_SW real, intent(out), DIMENSION(:) :: PALBNIR_TVEG real, intent(out), DIMENSION(:) :: PALBVIS_TVEG real, intent(out), DIMENSION(:) :: PALBNIR_TSOIL real, intent(out), DIMENSION(:) :: PALBVIS_TSOIL Contents Source Code ISBA_ALBEDO Source Code SUBROUTINE ISBA_ALBEDO ( PEK , OTR_ML , OMEB , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & PFALB , PFFV , PFFG , PGLOBAL_SW , & PMEB_SCA_SW , PALBNIR_TVEG , PALBVIS_TVEG , & PALBNIR_TSOIL , PALBVIS_TSOIL ) !     ########################################################################## ! !!****  *ISBA_ALBEDO* !! !!    PURPOSE !!    ------- ! !     Calculates grid-averaged albedo and emissivity (according to snow scheme) ! !!    EXTERNAL !!    -------- !! !!    none !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    AUTHOR !!    ------ !! !!\tS. Belair           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original !!      P. Samuelsson  02/2012  MEB !! !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_ISBA_n , ONLY : ISBA_PE_t ! USE MODD_SURF_PAR , ONLY : XUNDEF ! USE MODI_ALBEDO_FROM_NIR_VIS ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! LOGICAL , INTENT ( IN ) :: OTR_ML LOGICAL , INTENT ( IN ) :: OMEB ! True = patch with multi-energy balance !                                                 ! False = patch with classical ISBA ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PDIR_SW ! direct incoming solar radiation REAL , DIMENSION (:,:), INTENT ( IN ) :: PSCA_SW ! diffus incoming solar radiation REAL , DIMENSION (:) , INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) INTEGER , INTENT ( IN ) :: KSW ! number of short-wave spectral bands ! TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: PEK ! REAL , DIMENSION (:) , INTENT ( IN ) :: PFALB ! Floodplain albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PFFV ! Floodplain fraction over vegetation REAL , DIMENSION (:) , INTENT ( IN ) :: PFFG ! Floodplain fraction over the ground ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PGLOBAL_SW ! global incoming SW rad. REAL , DIMENSION (:) , INTENT ( OUT ) :: PMEB_SCA_SW ! diffuse incoming SW rad. REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBNIR_TVEG ! nearIR  veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBVIS_TVEG ! visible veg tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBNIR_TSOIL ! nearIR  soil tot albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PALBVIS_TSOIL ! visible soil tot albedo ! !------------------------------------------------------------------------------- ! !*      0.     Local variables !              --------------- ! INTEGER :: JLAYER INTEGER :: JSWB REAL , DIMENSION ( SIZE ( PEK % XALBNIR )) :: ZSW_UP REAL , DIMENSION ( SIZE ( PEK % XALBNIR ), KSW ) :: ZDIR_ALB_WITHOUT_SNOW REAL , DIMENSION ( SIZE ( PEK % XALBNIR ), KSW ) :: ZSCA_ALB_WITHOUT_SNOW REAL , DIMENSION ( SIZE ( PEK % XALBNIR ), KSW ) :: ZDIR_ALB_VEG_WITHOUT_SNOW REAL , DIMENSION ( SIZE ( PEK % XALBNIR ), KSW ) :: ZSCA_ALB_VEG_WITHOUT_SNOW REAL , DIMENSION ( SIZE ( PEK % XALBNIR ), KSW ) :: ZDIR_ALB_SOIL_WITHOUT_SNOW REAL , DIMENSION ( SIZE ( PEK % XALBNIR ), KSW ) :: ZSCA_ALB_SOIL_WITHOUT_SNOW REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !------------------------------------------------------------------------------- ! !*      2.     Compute snow-free albedo !              ------------------------ ! !* Snow-free surface albedo for each wavelength ! IF ( LHOOK ) CALL DR_HOOK ( 'ISBA_ALBEDO' , 0 , ZHOOK_HANDLE ) ! IF ( OTR_ML ) THEN IF ( OMEB ) THEN PALBNIR_TVEG (:) = PEK % XALBNIR_VEG (:) PALBNIR_TSOIL (:) = ( 1. - PFFG (:)) * PEK % XALBNIR_SOIL (:) + PFFG (:) * PFALB (:) PALBVIS_TVEG (:) = PEK % XALBVIS_VEG (:) PALBVIS_TSOIL (:) = ( 1. - PFFG (:)) * PEK % XALBVIS_SOIL (:) + PFFG (:) * PFALB (:) ELSE PALBNIR_TVEG (:) = PEK % XALBNIR_VEG (:) PALBNIR_TSOIL (:) = PEK % XALBNIR_SOIL (:) PALBVIS_TVEG (:) = PEK % XALBVIS_VEG (:) PALBVIS_TSOIL (:) = PEK % XALBVIS_SOIL (:) ENDIF ELSE PALBNIR_TVEG (:) = XUNDEF PALBNIR_TSOIL (:) = XUNDEF PALBVIS_TVEG (:) = XUNDEF PALBVIS_TSOIL (:) = XUNDEF ENDIF ! CALL ALBEDO_FROM_NIR_VIS ( PSW_BANDS , PEK % XALBNIR (:), PEK % XALBVIS (:), PEK % XALBUV (:), & ZDIR_ALB_WITHOUT_SNOW , ZSCA_ALB_WITHOUT_SNOW ) ! !* total shortwave incoming radiation ! PGLOBAL_SW (:) = 0. PMEB_SCA_SW (:) = 0. DO JSWB = 1 , KSW PGLOBAL_SW (:) = PGLOBAL_SW (:) + ( PDIR_SW (:, JSWB ) + PSCA_SW (:, JSWB )) PMEB_SCA_SW (:) = PMEB_SCA_SW (:) + ( PSCA_SW (:, JSWB )) END DO ! !* snow-free global albedo (needed by ISBA) ! ZSW_UP (:) = 0. DO JSWB = 1 , KSW ZSW_UP (:) = ZSW_UP (:) & + ZDIR_ALB_WITHOUT_SNOW (:, JSWB ) * PDIR_SW (:, JSWB ) & + ZSCA_ALB_WITHOUT_SNOW (:, JSWB ) * PSCA_SW (:, JSWB ) END DO PEK % XSNOWFREE_ALB (:) = XUNDEF WHERE ( PGLOBAL_SW (:) > 0. ) PEK % XSNOWFREE_ALB (:) = ZSW_UP (:) / PGLOBAL_SW (:) ELSEWHERE PEK % XSNOWFREE_ALB (:) = ZDIR_ALB_WITHOUT_SNOW (:, 1 ) END WHERE ! IF ( PEK % TSNOW % SCHEME == 'EBA' ) THEN CALL ALBEDO_FROM_NIR_VIS ( PSW_BANDS , & PEK % XALBNIR_VEG (:), PEK % XALBVIS_VEG (:), PEK % XALBUV_VEG (:), & ZDIR_ALB_VEG_WITHOUT_SNOW , ZSCA_ALB_VEG_WITHOUT_SNOW ) ZSW_UP (:) = 0. DO JSWB = 1 , KSW ZSW_UP (:) = ZSW_UP (:) & + ZDIR_ALB_VEG_WITHOUT_SNOW (:, JSWB ) * PDIR_SW (:, JSWB ) & + ZSCA_ALB_VEG_WITHOUT_SNOW (:, JSWB ) * PSCA_SW (:, JSWB ) END DO PEK % XSNOWFREE_ALB_VEG (:) = XUNDEF WHERE ( PGLOBAL_SW (:) > 0. ) PEK % XSNOWFREE_ALB_VEG (:) = ZSW_UP (:) / PGLOBAL_SW (:) ! CALL ALBEDO_FROM_NIR_VIS ( PSW_BANDS , & PEK % XALBNIR_SOIL (:), PEK % XALBVIS_SOIL (:), PEK % XALBUV_SOIL (:), & ZDIR_ALB_SOIL_WITHOUT_SNOW , ZSCA_ALB_SOIL_WITHOUT_SNOW ) ZSW_UP (:) = 0. DO JSWB = 1 , KSW ZSW_UP (:) = ZSW_UP (:) & + ZDIR_ALB_SOIL_WITHOUT_SNOW (:, JSWB ) * PDIR_SW (:, JSWB ) & + ZSCA_ALB_SOIL_WITHOUT_SNOW (:, JSWB ) * PSCA_SW (:, JSWB ) END DO PEK % XSNOWFREE_ALB_SOIL (:) = XUNDEF WHERE ( PGLOBAL_SW (:) > 0. ) PEK % XSNOWFREE_ALB_SOIL (:) = ZSW_UP (:) / PGLOBAL_SW (:) ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( 'ISBA_ALBEDO' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE ISBA_ALBEDO","tags":"","loc":"proc/isba_albedo.html"},{"title":"SURFACE_AERO_COND – Town Energy Balance (TEB) model API docs","text":"subroutine SURFACE_AERO_COND(PRI, PZREF, PUREF, PVMOD, PZ0, PZ0H, PAC, PRA, PCH) Uses YOMHOOK MODE_THERMOS MODD_CSTS MODI_WIND_THRESHOLD PARKIND1 Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PRI real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PZ0 real, intent(in), DIMENSION(:) :: PZ0H real, intent(out), DIMENSION(:) :: PAC real, intent(out), DIMENSION(:) :: PRA real, intent(out), DIMENSION(:) :: PCH Contents Source Code SURFACE_AERO_COND Source Code SUBROUTINE SURFACE_AERO_COND ( PRI , PZREF , PUREF , PVMOD , PZ0 ,& PZ0H , PAC , PRA , PCH ) !   ###################################################################### ! !!****  *SURFACE_AERO_COND* !! !!    PURPOSE !!    ------- ! !     Computes the drag coefficients for heat and momentum near the ground ! ! !!**  METHOD !!    ------ ! ! ! !    1 and 2 : computation of relative humidity near the ground ! !    3 : richardson number ! !    4 : the aerodynamical resistance for heat transfers is deduced ! !    5 : the drag coefficient for momentum ZCD is computed ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/01/98 !!                  02/04/01 (P Jabouille) limitation of Z0 with 0.5 PUREF !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_CSTS , ONLY : XKARMAN USE MODI_WIND_THRESHOLD ! USE MODE_THERMOS ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PRI ! Richardson number REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first ! atmospheric level REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the wind ! NOTE this is different from ZZREF ! ONLY in stand-alone/forced mode, ! NOT when coupled to a model (MesoNH) REAL , DIMENSION (:), INTENT ( IN ) :: PZ0 ! roughness length for momentum REAL , DIMENSION (:), INTENT ( IN ) :: PZ0H ! roughness length for heat ! REAL , DIMENSION (:), INTENT ( OUT ) :: PAC ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PRA ! aerodynamical resistance REAL , DIMENSION (:), INTENT ( OUT ) :: PCH ! drag coefficient for heat ! !*      0.2    declarations of local variables ! ! REAL , DIMENSION ( SIZE ( PRI )) :: ZZ0 , ZZ0H , ZMU , & ZFH , ZCHSTAR , ZPH , ZCDN , & ZSTA , ZDI , ZWORK1 , ZWORK2 , ZWORK3 REAL , DIMENSION ( SIZE ( PRI )) :: ZVMOD ! INTEGER :: JJ REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! Functions: REAL :: X , CHSTAR , PH CHSTAR ( X ) = 3.2165 + 4.3431 * X + 0.5360 * X * X - 0.0781 * X * X * X PH ( X ) = 0.5802 - 0.1571 * X + 0.0327 * X * X - 0.0026 * X * X * X ! !------------------------------------------------------------------------------- ! !*       4.     Surface aerodynamic resistance for heat transfers !               ------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'SURFACE_AERO_COND' , 0 , ZHOOK_HANDLE ) ZVMOD (:) = WIND_THRESHOLD ( PVMOD (:), PUREF (:)) ! DO JJ = 1 , SIZE ( PRI ) ZZ0 ( JJ ) = MIN ( PZ0 ( JJ ), PUREF ( JJ ) * 0.5 ) ZZ0H ( JJ ) = MIN ( ZZ0 ( JJ ), PZ0H ( JJ )) ZZ0H ( JJ ) = MIN ( ZZ0H ( JJ ), PZREF ( JJ ) * 0.5 ) ! ZWORK1 ( JJ ) = LOG ( PUREF ( JJ ) / ZZ0 ( JJ ) ) ZWORK2 ( JJ ) = PZREF ( JJ ) / ZZ0H ( JJ ) ZWORK3 ( JJ ) = ZVMOD ( JJ ) * ZVMOD ( JJ ) ZMU ( JJ ) = MAX ( LOG ( ZZ0 ( JJ ) / ZZ0H ( JJ ) ), 0.0 ) ZFH ( JJ ) = ZWORK1 ( JJ ) / LOG ( ZWORK2 ( JJ )) ! ZCHSTAR ( JJ ) = CHSTAR ( ZMU ( JJ )) ZPH ( JJ ) = PH ( ZMU ( JJ )) ! ! ZCDN ( JJ ) = ( XKARMAN / ZWORK1 ( JJ )) ** 2. ! ! ZSTA ( JJ ) = PRI ( JJ ) * ZWORK3 ( JJ ) ! ! IF ( PRI ( JJ ) < 0.0 ) THEN ZDI ( JJ ) = 1. / ( ZVMOD ( JJ ) & + ZCHSTAR ( JJ ) * ZCDN ( JJ ) * 1 5. & * ZWORK2 ( JJ ) ** ZPH ( JJ ) & * ZFH ( JJ ) * SQRT ( - ZSTA ( JJ )) & ) PAC ( JJ ) = ZCDN ( JJ ) * ( ZVMOD ( JJ ) - 1 5. * ZSTA ( JJ ) * ZDI ( JJ )) * ZFH ( JJ ) ELSE ZDI ( JJ ) = SQRT ( ZWORK3 ( JJ ) + 5. * ZSTA ( JJ ) ) PAC ( JJ ) = ZCDN ( JJ ) * ZVMOD ( JJ ) / ( 1. + 1 5. * ZSTA ( JJ ) * ZDI ( JJ ) & / ZWORK3 ( JJ ) / ZVMOD ( JJ ) ) * ZFH ( JJ ) ENDIF ! PRA ( JJ ) = 1. / PAC ( JJ ) ! PCH ( JJ ) = 1. / ( PRA ( JJ ) * ZVMOD ( JJ )) ! ENDDO IF ( LHOOK ) CALL DR_HOOK ( 'SURFACE_AERO_COND' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE SURFACE_AERO_COND","tags":"","loc":"proc/surface_aero_cond.html"},{"title":"WINDOW_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"subroutine WINDOW_E_BUDGET(B, PEMIS_WIN, PLW_W_TO_WIN, PLW_R_TO_WIN, PLW_G_TO_WIN, PLW_NR_TO_WIN, PLW_S_TO_WIN, PRAD_RF_WIN, PRAD_WL_WIN, PABS_SW_WIN, PLW_RAD, PAC_WL, PRADHT_IN, PTS_FL, PRHOA, PDN_RD, PT_CANYON, PTS_WL, PTS_RD, PTSN_RD, PTS_GD, PRAD_WIN_FL, PRAD_WIN_MA, PCONV_WIN_BLD, PEMIT_LW_WIN, PABS_LW_WIN, PLOAD_IN_WIN) Uses YOMHOOK MODD_BEM_n MODD_CSTS PARKIND1 MODE_CONV_DOE Arguments Type Intent Optional Attributes Name type(BEM_t), intent(inout) :: B real, intent(in), DIMENSION(:) :: PEMIS_WIN real, intent(in), DIMENSION(:) :: PLW_W_TO_WIN real, intent(in), DIMENSION(:) :: PLW_R_TO_WIN real, intent(in), DIMENSION(:) :: PLW_G_TO_WIN real, intent(in), DIMENSION(:) :: PLW_NR_TO_WIN real, intent(in), DIMENSION(:) :: PLW_S_TO_WIN real, intent(in), DIMENSION(:) :: PRAD_RF_WIN real, intent(in), DIMENSION(:) :: PRAD_WL_WIN real, intent(in), DIMENSION(:) :: PABS_SW_WIN real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PAC_WL real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PTS_FL real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PT_CANYON real, intent(in), DIMENSION(:) :: PTS_WL real, intent(in), DIMENSION(:) :: PTS_RD real, intent(in), DIMENSION(:) :: PTSN_RD real, intent(in), DIMENSION(:) :: PTS_GD real, intent(out), DIMENSION(:) :: PRAD_WIN_FL real, intent(out), DIMENSION(:) :: PRAD_WIN_MA real, intent(out), DIMENSION(:) :: PCONV_WIN_BLD real, intent(out), DIMENSION(:) :: PEMIT_LW_WIN real, intent(out), DIMENSION(:) :: PABS_LW_WIN real, intent(in), DIMENSION(:) :: PLOAD_IN_WIN Contents Source Code WINDOW_E_BUDGET Source Code SUBROUTINE WINDOW_E_BUDGET ( B , PEMIS_WIN , PLW_W_TO_WIN , PLW_R_TO_WIN , PLW_G_TO_WIN , & PLW_NR_TO_WIN , PLW_S_TO_WIN , PRAD_RF_WIN , PRAD_WL_WIN , & PABS_SW_WIN , PLW_RAD , PAC_WL , PRADHT_IN , PTS_FL , PRHOA , & PDN_RD , PT_CANYON , PTS_WL , PTS_RD , PTSN_RD , PTS_GD , & PRAD_WIN_FL , PRAD_WIN_MA , PCONV_WIN_BLD , PEMIT_LW_WIN , & PABS_LW_WIN , PLOAD_IN_WIN ) !################################################################################################################################### ! !!****  *WINDOW_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of window temperature ! ! !!**  METHOD !     ------ ! ! window is supposed double pane with no thermal capacity ! a steady state energy balance is applied to both layers that exchanges U_WIN(T1 - T2) ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      B. Bueno           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    04/2011 !!      G. Pigeon   10/11/2011 exteranlized window balance from wall_layer_e_budget to window_e_budget and use fluxes from layers for !                              which the balance has been computed before (roof and wall) and returns the fluxes to the compartments !                              computed afterwards (floor, mass, bld) !!      G. Pigeon      09/2012 new indoor conv. coef !!      G. Pigeon      10/2012 separate abs from outdoor on both side of window !!                            + add loads for indoor face of the window !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_BEM_n , ONLY : BEM_t ! USE MODD_CSTS , ONLY : XCPD , XSTEFAN USE MODE_CONV_DOE USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , DIMENSION (:), INTENT ( IN ) :: PEMIS_WIN ! window emissivity REAL , DIMENSION (:), INTENT ( IN ) :: PLW_W_TO_WIN ! Radiative heat trasfer coeff window-wall outdoor ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WIN ! Radiative heat trasfer coeff window-road ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WIN ! Radiative heat trasfer coeff window-garden REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WIN ! Radiative heat trasfer coeff window-snow REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WIN ! Radiative heat trasfer coeff window-sky ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_WIN ! rad. fluxes from roof to win [W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_WL_WIN ! rad. fluxes from wall to win [W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_WIN ! window absorbed shortwave radiation [W m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WL ! aerodynamical conductance between wall and canyon REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PTS_FL ! floor layers temperatures [K] REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! rho REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered fraction on roads REAL , DIMENSION (:), INTENT ( IN ) :: PT_CANYON ! air canyon temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WL ! wall outdoor surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_RD ! road surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTSN_RD ! road snow temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GD ! green area surface temperature REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WIN_FL ! rad. fluxes from window to floor [W m-2(window)] REAL , DIMENSION (:), INTENT ( OUT ) :: PRAD_WIN_MA ! rad. fluxes from window to mass [W m-2(window)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_WIN_BLD ! conv. fluxes from window to bld [W m-2(window)] REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_WIN ! Longwave radiation emitted by the window [W m-2(window)] REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_WIN ! Longwave radiation absorbed by the window [W m-2(window)] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_IN_WIN ! solar + internal heat gain ! !*      0.2    declarations of local variables ! REAL , DIMENSION ( SIZE ( PT_CANYON )) :: ZT_SKY ! sky temperature [K] REAL , DIMENSION ( SIZE ( PT_CANYON )) :: ZA12 ! REAL , DIMENSION ( SIZE ( PT_CANYON )) :: ZB2 ! auxiliar variables for window temperature REAL , DIMENSION ( SIZE ( PT_CANYON )) :: ZB1 ! calculations REAL , DIMENSION ( SIZE ( PT_CANYON )) :: ZA21 ! REAL , DIMENSION ( SIZE ( PT_CANYON )) :: ZCHTC_IN_WIN ! indoor convective heat transfer coef. window [W m-2 K-1] INTEGER :: JJ !*      Preliminaries !       ------------- ZCHTC_IN_WIN = CHTC_VERT_DOE ( B % XT_WIN2 , B % XTI_BLD ) DO JJ = 1 , SIZE ( ZCHTC_IN_WIN ) ZCHTC_IN_WIN ( JJ ) = MAX ( 1. , ZCHTC_IN_WIN ( JJ )) ENDDO !*      1.    Sky temperature !             --------------- ZT_SKY (:) = ( PLW_RAD (:) / XSTEFAN ) ** 0.25 ! ZA12 (:) = ZCHTC_IN_WIN (:) & + PRADHT_IN (:) * B % XF_WIN_MASS (:) & + PRADHT_IN (:) * B % XF_WIN_FLOOR (:) & + B % XUGG_WIN (:) ! ZB1 (:) = ZCHTC_IN_WIN (:) * B % XTI_BLD (:) & + PRADHT_IN (:) * B % XF_WIN_MASS (:) * B % XT_MASS (:, 1 ) & + B % XF_WIN_WALL (:) * PRAD_WL_WIN (:) & + B % XF_WIN_FLOOR (:) * PRAD_RF_WIN (:) & + PRADHT_IN (:) * B % XF_WIN_FLOOR (:) * PTS_FL (:) & + PLOAD_IN_WIN (:) + PABS_SW_WIN (:) / 2. ! ZA21 (:) = - PAC_WL (:) * PRHOA (:) * XCPD & - PLW_S_TO_WIN (:) & - PLW_W_TO_WIN (:) & - PLW_R_TO_WIN (:) * ( 1. - PDN_RD (:))& - PLW_G_TO_WIN (:) & - PLW_NR_TO_WIN (:) * PDN_RD (:) & - B % XUGG_WIN (:) ! ZB2 (:) = - PAC_WL (:) * PRHOA (:) * XCPD * PT_CANYON (:) & - PLW_S_TO_WIN (:) * ZT_SKY (:) & - PLW_W_TO_WIN (:) * PTS_WL (:) & - PLW_R_TO_WIN (:) * ( 1. - PDN_RD (:)) * PTS_RD (:) & - PLW_NR_TO_WIN (:) * PDN_RD (:) * PTSN_RD (:) & - PABS_SW_WIN (:) / 2. ! IF ( SIZE ( PTS_GD ) > 0 ) THEN ZB2 (:) = ZB2 (:) - PLW_G_TO_WIN (:) * PTS_GD (:) ENDIF ! ! compute outdoor temperature B % XT_WIN1 (:) = ( ZB2 (:) - ZB1 (:) * B % XUGG_WIN (:) / ZA12 (:) ) / & ( ZA21 (:) + B % XUGG_WIN (:) ** 2 / ZA12 (:) ) ! ! compute indoor temperature B % XT_WIN2 (:) = ( ZB1 (:) + B % XUGG_WIN (:) * B % XT_WIN1 (:) ) / ZA12 (:) ! ! outdoor infrared radiation absorded by the window PABS_LW_WIN (:) = PLW_S_TO_WIN (:) * ( ZT_SKY (:) - B % XT_WIN1 (:)) + & ( 1. - PDN_RD (:)) * PLW_R_TO_WIN (:) * ( PTS_RD (:) - B % XT_WIN1 (:)) + & PLW_W_TO_WIN (:) * ( PTS_WL (:) - B % XT_WIN1 (:)) + & PDN_RD (:) * PLW_NR_TO_WIN (:) * ( PTSN_RD (:) - B % XT_WIN1 (:)) ! IF ( SIZE ( PTS_GD ) > 0 ) THEN PABS_LW_WIN (:) = PABS_LW_WIN (:) + PLW_G_TO_WIN (:) * ( PTS_GD (:) - B % XT_WIN1 (:)) ENDIF ! ! outdoor infrared radiation emited by the window PEMIT_LW_WIN (:) = XSTEFAN * B % XT_WIN1 (:) ** 4 + ( 1 - PEMIS_WIN (:)) / PEMIS_WIN (:) * PABS_LW_WIN (:) ! PRAD_WIN_FL (:) = PRADHT_IN (:) * ( B % XT_WIN2 (:) - PTS_FL (:)) PRAD_WIN_MA (:) = PRADHT_IN (:) * ( B % XT_WIN2 (:) - B % XT_MASS (:, 1 )) PCONV_WIN_BLD (:) = ZCHTC_IN_WIN (:) * ( B % XT_WIN2 (:) - B % XTI_BLD (:)) ! END SUBROUTINE WINDOW_E_BUDGET","tags":"","loc":"proc/window_e_budget.html"},{"title":"CLOSE_NAMELIST – Town Energy Balance (TEB) model API docs","text":"subroutine CLOSE_NAMELIST(HPROGRAM, KLUNAM) Uses YOMHOOK MODI_MNHCLOSE_NAMELIST MODI_CLOSE_NAMELIST_LFI MODI_CLOSE_NAMELIST_ASC PARKIND1 MODI_CLOSE_NAMELIST_OL MODI_CLOSE_NAMELIST_FA MODI_CLOSE_NAMELIST_NC MODI_AROCLOSE_NAMELIST Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HPROGRAM integer, intent(in) :: KLUNAM Contents Source Code CLOSE_NAMELIST Source Code SUBROUTINE CLOSE_NAMELIST ( HPROGRAM , KLUNAM ) !     ####################################################### ! !!****  *CLOSE_NAMELIST* - generic routine to close a namelist file !! !!    PURPOSE !!    ------- !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      V. Masson   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    01/2004 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! #ifdef SFX_ASC USE MODI_CLOSE_NAMELIST_ASC #endif #ifdef SFX_FA USE MODI_CLOSE_NAMELIST_FA #endif #ifdef SFX_LFI USE MODI_CLOSE_NAMELIST_LFI #endif #ifdef SFX_OL USE MODI_CLOSE_NAMELIST_OL #endif #ifdef SFX_NC USE MODI_CLOSE_NAMELIST_NC #endif #ifdef SFX_MNH USE MODI_MNHCLOSE_NAMELIST #endif #ifdef SFX_ARO USE MODI_AROCLOSE_NAMELIST #endif ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! ! !*       0.1   Declarations of arguments !              ------------------------- ! CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HPROGRAM ! main program INTEGER , INTENT ( IN ) :: KLUNAM ! logical unit of namelist REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*       0.2   Declarations of local variables !              ------------------------------- ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'CLOSE_NAMELIST' , 0 , ZHOOK_HANDLE ) IF ( HPROGRAM == 'MESONH' ) THEN #ifdef SFX_MNH CALL MNHCLOSE_NAMELIST ( HPROGRAM , KLUNAM ) #endif ELSE IF ( HPROGRAM == 'OFFLIN' ) THEN #ifdef SFX_OL CALL CLOSE_NAMELIST_OL ( HPROGRAM , KLUNAM ) #endif ELSE IF ( HPROGRAM == 'ASCII ' ) THEN #ifdef SFX_ASC CALL CLOSE_NAMELIST_ASC ( HPROGRAM , KLUNAM ) #endif ELSE IF ( HPROGRAM == 'AROME ' ) THEN #ifdef SFX_ARO CALL AROCLOSE_NAMELIST ( HPROGRAM , KLUNAM ) #endif ELSE IF ( HPROGRAM == 'FA    ' ) THEN #ifdef SFX_FA CALL CLOSE_NAMELIST_FA ( HPROGRAM , KLUNAM ) #endif ELSE IF ( HPROGRAM == 'LFI   ' ) THEN #ifdef SFX_LFI CALL CLOSE_NAMELIST_LFI ( HPROGRAM , KLUNAM ) #endif ELSE IF ( HPROGRAM == 'NC    ' ) THEN #ifdef SFX_NC CALL CLOSE_NAMELIST_NC ( HPROGRAM , KLUNAM ) #endif END IF IF ( LHOOK ) CALL DR_HOOK ( 'CLOSE_NAMELIST' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE CLOSE_NAMELIST","tags":"","loc":"proc/close_namelist.html"},{"title":"SNOW_COVER_1LAYER – Town Energy Balance (TEB) model API docs","text":"subroutine SNOW_COVER_1LAYER(PTSTEP, PANSMIN, PANSMAX, PTODRY, PRHOSMIN, PRHOSMAX, PRHOFOLD, OALL_MELT, PDRAIN_TIME, PWCRN, PZ0SN, PZ0HSN, TPSNOW, PTG, PTG_COEFA, PTG_COEFB, PABS_SW, PLW1, PLW2, PTA, PQA, PVMOD, PPS, PRHOA, PSR, PZREF, PUREF, PRNSNOW, PHSNOW, PLESNOW, PGSNOW, PMELT, PDQS_SNOW, PABS_LW) Uses MODE_THERMOS YOMHOOK MODD_CSTS MODD_SNOW_PAR MODD_TYPE_SNOW PARKIND1 MODD_SURF_PAR MODI_SURFACE_AERO_COND MODI_SURFACE_RI Arguments Type Intent Optional Attributes Name real, intent(in) :: PTSTEP real, intent(in) :: PANSMIN real, intent(in) :: PANSMAX real, intent(in) :: PTODRY real, intent(in) :: PRHOSMIN real, intent(in) :: PRHOSMAX real, intent(in) :: PRHOFOLD logical, intent(in) :: OALL_MELT real, intent(in) :: PDRAIN_TIME real, intent(in) :: PWCRN real, intent(in) :: PZ0SN real, intent(in) :: PZ0HSN type(SURF_SNOW), intent(inout) :: TPSNOW real, intent(in), DIMENSION(:) :: PTG real, intent(in), DIMENSION(:) :: PTG_COEFA real, intent(in), DIMENSION(:) :: PTG_COEFB real, intent(in), DIMENSION(:) :: PABS_SW real, intent(in), DIMENSION(:) :: PLW1 real, intent(in), DIMENSION(:) :: PLW2 real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(out), DIMENSION(:) :: PRNSNOW real, intent(out), DIMENSION(:) :: PHSNOW real, intent(out), DIMENSION(:) :: PLESNOW real, intent(out), DIMENSION(:) :: PGSNOW real, intent(out), DIMENSION(:) :: PMELT real, intent(out), DIMENSION(:) :: PDQS_SNOW real, intent(out), DIMENSION(:) :: PABS_LW Contents Source Code SNOW_COVER_1LAYER Source Code SUBROUTINE SNOW_COVER_1LAYER ( PTSTEP , PANSMIN , PANSMAX , PTODRY , PRHOSMIN , PRHOSMAX , & PRHOFOLD , OALL_MELT , PDRAIN_TIME , PWCRN , PZ0SN , PZ0HSN , & TPSNOW , PTG , PTG_COEFA , PTG_COEFB , PABS_SW , PLW1 , PLW2 , & PTA , PQA , PVMOD , PPS , PRHOA , PSR , PZREF , PUREF , PRNSNOW ,& PHSNOW , PLESNOW , PGSNOW , PMELT , PDQS_SNOW , PABS_LW ) !   ########################################################################## ! !!****  *SNOW_COVER_1LAYER* !! !!    PURPOSE !!    ------- ! !     One layer snow mantel scheme ! ! !!**  METHOD !     ------ ! ! ! The temperature equation is written as: ! !              b T+ = y ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    08/09/98 !!      J. Escobar 24/10/2012 : BUF PGI10.X , rewrite some 1 line WHERE statement !!      V. Masson  13/09/2013 : implicitation of coupling with roof below !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TYPE_SNOW , ONLY : SURF_SNOW ! USE MODD_CSTS , ONLY : XTT , XCI , XRHOLI , XRHOLW , XCPD , XLSTT , XLMTT , XDAY , XCONDI USE MODD_SNOW_PAR , ONLY : XEMISSN USE MODD_SURF_PAR , ONLY : XUNDEF ! USE MODE_THERMOS ! USE MODI_SURFACE_RI USE MODI_SURFACE_AERO_COND ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! ! REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , INTENT ( IN ) :: PANSMIN ! minimum snow albedo REAL , INTENT ( IN ) :: PANSMAX ! maximum snow albedo REAL , INTENT ( IN ) :: PTODRY ! snow albedo decreasing constant REAL , INTENT ( IN ) :: PRHOSMIN ! minimum snow density REAL , INTENT ( IN ) :: PRHOSMAX ! maximum snow density REAL , INTENT ( IN ) :: PRHOFOLD ! snow density increasing constant LOGICAL , INTENT ( IN ) :: OALL_MELT ! T --> all snow runs off if ! lower surf. temperature is ! positive REAL , INTENT ( IN ) :: PDRAIN_TIME ! drainage folding time (days) REAL , INTENT ( IN ) :: PWCRN ! critical snow amount necessary ! to cover the considered surface REAL , INTENT ( IN ) :: PZ0SN ! snow roughness length for momentum REAL , INTENT ( IN ) :: PZ0HSN ! snow roughness length for heat TYPE ( SURF_SNOW ), INTENT ( INOUT ) :: TPSNOW REAL , DIMENSION (:), INTENT ( IN ) :: PTG ! underlying ground temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTG_COEFA ! underlying ground temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTG_COEFB ! implicit terms REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW ! absorbed SW energy (Wm-2) REAL , DIMENSION (:), INTENT ( IN ) :: PLW1 ! LW coef independant of TSNOW ! (Wm-2)     usually equal to: !      emis_snow * LW_down ! REAL , DIMENSION (:), INTENT ( IN ) :: PLW2 ! LW coef dependant   of TSNOW ! (Wm-2 K-4) usually equal to: ! -1 * emis_snow * stefan_constant ! REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first ! atmospheric level (temperature) REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the first ! atmospheric level (wind) REAL , DIMENSION (:), INTENT ( OUT ) :: PRNSNOW ! net radiation over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PHSNOW ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PLESNOW ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PGSNOW ! flux under the snow REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT ! snow melting rate (kg/m2/s) REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_SNOW ! heat storage inside snow REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW ! absorbed LW rad by snow (W/m2) ! ! !*      0.2    declarations of local variables ! REAL :: ZEXPL = 0. REAL :: ZIMPL = 1. ! REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZEXNS , ZEXNA , ZDIRCOSZW REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZZ0 ! roughness length for momentum REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZZ0H ! roughness length forheat ! REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZRI ! Richardson number REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZAC ! aerodynamical conductance REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZRA ! aerodynamical resistance REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZCH ! drag coefficient for heat REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZB , ZY ! coefficients in Ts eq. REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZWSNOW ! snow before evolution REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZSNOW_HC ! snow heat capacity REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZSNOW_TC ! snow thermal conductivity REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZSNOW_D ! snow depth REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZMELT ! snow melting rate (kg/m3/s) REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZTS_SNOW ! snow surface temperature ! at previous time-step REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZQSAT ! specific humidity !                                         ! for ice REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZDQSAT ! d(specific humidity)/dT !                                         ! for ice ! REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZSR1 , ZSR2 ! norm. snow precip. ! LOGICAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: GSNOWMASK ! where snow is !                                             ! at previuos time-step LOGICAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: GFLUXMASK ! where fluxes can !                                             ! be computed at !                                             ! new time-step !                                             ! i.e. snow occurence !                                             ! at previous time-step !                                             ! OR snow fall INTEGER , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: JSNOWMASK1 , JSNOWMASK2 , JSNOWMASK3 ! where snow is or not !                                                                      ! at previuos time-step INTEGER , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: JFLUXMASK ! where fluxes can !                                             ! be computed at !                                             ! new time-step !                                             ! i.e. snow occurence !                                             ! at previous time-step !                                             ! OR snow fall ! REAL :: ZWSNOW_MIN = 0.1 ! minimum value of snow content (kg/m2) for prognostic !                        ! computations ! REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZEI_SNOW ! internal energy of snow REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZPEI_SNOW ! internal energy of snow at t+ REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZWORK1 REAL , DIMENSION ( SIZE ( TPSNOW % WSNOW , 1 )) :: ZDQSATI , ZQSATI ! INTEGER :: JJ , JI , JCOMPT_SNOW1 , JCOMPT_SNOW2 , JCOMPT_SNOW3 , JCOMPT_FLUX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! ! IF ( LHOOK ) CALL DR_HOOK ( 'SNOW_COVER_1LAYER' , 0 , ZHOOK_HANDLE ) ZB (:) = 0. ZY (:) = 0. ZMELT (:) = 0. PMELT (:) = 0. PRNSNOW (:) = 0. PHSNOW (:) = 0. PLESNOW (:) = 0. PGSNOW (:) = 0. !RJ: workaround to prevent decomposition unstable xundef masks for Tx_LWA_SN_RD fields !RJ: in TEB_DIAGNOSTICS.nc during TEB_GARDEN_GREENROOF_BEM_3L_IRRIG_* tests !RJ: problem with decomposition handling somewhere else #ifdef RJ_PFIX PABS_LW (:) = 0.0 #else PABS_LW (:) = XUNDEF #endif ! !* snow reservoir before evolution ! ZWSNOW (:) = TPSNOW % WSNOW (:, 1 ) ZTS_SNOW (:) = MIN ( XTT , PTG (:)) ! ZSNOW_D (:) = 0. ZSNOW_TC (:) = 0. ZSNOW_HC (:) = 0. ! !------------------------------------------------------------------------------- ! !*      1.1    most useful masks !              ----------------- ! GSNOWMASK (:) = . FALSE . GFLUXMASK (:) = . FALSE . JSNOWMASK1 (:) = 0. JSNOWMASK2 (:) = 0. JSNOWMASK3 (:) = 0. JFLUXMASK (:) = 0. !*      1.2    drag !              ---- ! !*      1.2.1  defaults !              -------- ! !* variation of temperature with altitude is neglected ! ZEXNS (:) = 1. ZEXNA (:) = 1. ! !* slope is neglected in drag computation ! ZDIRCOSZW (:) = 1. ! !* roughness length are imposed: ! ZZ0 (:) = PZ0SN ZZ0H (:) = PZ0HSN ! ! !*      1.1    most useful masks !              ----------------- !* snow occurence at previous time-step ! !* snow occurence during the time-step for fluxes computation ! JCOMPT_SNOW1 = 0 JCOMPT_SNOW2 = 0 JCOMPT_SNOW3 = 0 JCOMPT_FLUX = 0 DO JJ = 1 , SIZE ( ZWSNOW ) IF ( ZWSNOW ( JJ ) > 0. ) THEN GSNOWMASK ( JJ ) = . TRUE . !* surface temperature ZTS_SNOW ( JJ ) = TPSNOW % TS ( JJ ) GFLUXMASK ( JJ ) = . TRUE . !gsnowmask=t JCOMPT_SNOW1 = JCOMPT_SNOW1 + 1 JSNOWMASK1 ( JCOMPT_SNOW1 ) = JJ !gfluxmask=t JCOMPT_FLUX = JCOMPT_FLUX + 1 JFLUXMASK ( JCOMPT_FLUX ) = JJ IF ( ZWSNOW ( JJ ) >= ZWSNOW_MIN ) THEN !second snow mask JCOMPT_SNOW3 = JCOMPT_SNOW3 + 1 JSNOWMASK3 ( JCOMPT_SNOW3 ) = JJ ELSE !lower limit of snow cover for prognostic computations !0.1 kg/m2 of snow water content TPSNOW % T ( JJ , 1 ) = MIN ( PTG ( JJ ), XTT ) ENDIF ELSE TPSNOW % T ( JJ , 1 ) = MIN ( PTG ( JJ ), XTT ) !gsnowmask=false JCOMPT_SNOW2 = JCOMPT_SNOW2 + 1 JSNOWMASK2 ( JCOMPT_SNOW2 ) = JJ IF ( PSR ( JJ ) > 0. ) THEN GFLUXMASK ( JJ ) = . TRUE . JCOMPT_FLUX = JCOMPT_FLUX + 1 JFLUXMASK ( JCOMPT_FLUX ) = JJ ENDIF ENDIF ENDDO ! !------------------------------------------------------------------------------- ! !*      1.2    drag !              ---- ! !*      1.2.2   qsat (Tsnow) !              ------------ ! ZQSAT (:) = QSATI ( ZTS_SNOW (:), PPS (:) ) ! !*      1.2.3  Richardson number !              ----------------- ! !* snow is present on all the considered surface. !* computation occurs where snow is and/or falls. ! CALL SURFACE_RI ( ZTS_SNOW , ZQSAT , ZEXNS , ZEXNA , PTA , PQA , & PZREF , PUREF , ZDIRCOSZW , PVMOD , ZRI ) ! !*      1.2.4  Aerodynamical conductance !              ------------------------- ! CALL SURFACE_AERO_COND ( ZRI , PZREF , PUREF , PVMOD , ZZ0 , ZZ0H , ZAC , ZRA , ZCH ) ! !------------------------------------------------------------------------------- ! !*      2.     snow thermal characteristics !              ---------------------------- !cdir nodep DO JJ = 1 , JCOMPT_SNOW1 ! JI = JSNOWMASK1 ( JJ ) ! !*      2.1    snow heat capacity ZSNOW_HC ( JI ) = TPSNOW % RHO ( JI , 1 ) * XCI * XRHOLI / XRHOLW !*      2.2    snow depth ZSNOW_D ( JI ) = ZWSNOW ( JI ) / TPSNOW % RHO ( JI , 1 ) !*      2.3    snow thermal conductivity ZSNOW_TC ( JI ) = XCONDI * ( TPSNOW % RHO ( JI , 1 ) / XRHOLW ) ** 1.885 !*      2.4    internal energy of snow ZEI_SNOW ( JI ) = ZSNOW_HC ( JI ) * ZSNOW_D ( JI ) * TPSNOW % T ( JI , 1 ) ! ENDDO ! !cdir nodep DO JJ = 1 , JCOMPT_SNOW2 ! JI = JSNOWMASK2 ( JJ ) ! !*      2.1    snow heat capacity ZSNOW_HC ( JI ) = PRHOSMIN * XCI * XRHOLI / XRHOLW !*      2.2    snow depth ZSNOW_D ( JI ) = PTSTEP * PSR ( JI ) / PRHOSMIN !*      2.3    snow thermal conductivity ZSNOW_TC ( JI ) = XCONDI * ( PRHOSMIN / XRHOLW ) ** 1.885 !*      2.4    internal energy of snow ZEI_SNOW ( JI ) = 0. ! ENDDO ! !------------------------------------------------------------------------------- ! !*      3.     Snow temperature evolution !              -------------------------- ! !*      3.5    dqsat/ dT (Tsnow) !              ----------------- ! ZDQSATI = DQSATI ( ZTS_SNOW (:), PPS (:), ZQSAT (:)) WHERE ( GSNOWMASK (:) . AND . ZWSNOW (:) >= ZWSNOW_MIN ) ZDQSAT (:) = ZDQSATI (:) END WHERE ! !*      3.1    coefficients from Temperature tendency !              -------------------------------------- ! !cdir nodep DO JJ = 1 , JCOMPT_SNOW3 ! JI = JSNOWMASK3 ( JJ ) ZWORK1 ( JI ) = ZSNOW_D ( JI ) * ZSNOW_HC ( JI ) / PTSTEP ! ZB ( JI ) = ZB ( JI ) + ZWORK1 ( JI ) ! !*      3.2    coefficients from solar radiation !          --------------------------------- ! ZY ( JI ) = ZY ( JI ) + ZWORK1 ( JI ) * TPSNOW % T ( JI , 1 ) + PABS_SW ( JI ) ! ! !*      3.3    coefficients from infra-red radiation !              ------------------------------------- ! ZWORK1 ( JI ) = PLW2 ( JI ) * TPSNOW % T ( JI , 1 ) ** 3 ! ZB ( JI ) = ZB ( JI ) - 4 * ZIMPL * ZWORK1 ( JI ) ! ZY ( JI ) = ZY ( JI ) + PLW1 ( JI ) + ZWORK1 ( JI ) * ( ZEXPL - 3. * ZIMPL ) * TPSNOW % T ( JI , 1 ) ! ! !*      3.4    coefficients from sensible heat flux !              ------------------------------------ ! ZWORK1 ( JI ) = XCPD * PRHOA ( JI ) * ZAC ( JI ) ! ZB ( JI ) = ZB ( JI ) + ZWORK1 ( JI ) * ZIMPL ! ZY ( JI ) = ZY ( JI ) - ZWORK1 ( JI ) * ( ZEXPL * TPSNOW % T ( JI , 1 ) - PTA ( JI ) ) ! ! !*      3.6    coefficients from latent heat flux !              ---------------------------------- ! ZWORK1 ( JI ) = XLSTT * PRHOA ( JI ) * ZAC ( JI ) ! ZB ( JI ) = ZB ( JI ) + ZWORK1 ( JI ) * ZIMPL * ZDQSAT ( JI ) ! ZY ( JI ) = ZY ( JI ) - ZWORK1 ( JI ) * ( ZQSAT ( JI ) - PQA ( JI ) - ZIMPL * ZDQSAT ( JI ) * TPSNOW % T ( JI , 1 ) ) ! !*      3.7    coefficients from conduction flux at snow base !              ---------------------------------------------- ! ZWORK1 ( JI ) = ZSNOW_TC ( JI ) / ( 0.5 * ZSNOW_D ( JI )) ! ZB ( JI ) = ZB ( JI ) + ZWORK1 ( JI ) * ZIMPL / ( 1. + ZWORK1 ( JI ) * PTG_COEFA ( JI ) ) ! ZY ( JI ) = ZY ( JI ) - ZWORK1 ( JI ) * ( ZEXPL * TPSNOW % T ( JI , 1 ) - PTG_COEFB ( JI )) & / ( 1. + ZWORK1 ( JI ) * PTG_COEFA ( JI ) ) ! !*      3.8    guess of snow temperature before accumulation and melting !              --------------------------------------------------------- ! TPSNOW % T ( JI , 1 ) = ZY ( JI ) / ZB ( JI ) ! ENDDO ! !------------------------------------------------------------------------------- ! !*      4.     Snow melt !              --------- ! !*      4.1    melting !              ------- ! !cdir nodep DO JJ = 1 , JCOMPT_SNOW1 ! JI = JSNOWMASK1 ( JJ ) ! ZMELT ( JI ) = MAX ( TPSNOW % T ( JI , 1 ) - XTT , 0. ) * ZSNOW_HC ( JI ) / XLMTT / PTSTEP ! ZMELT ( JI ) = MIN ( ZMELT ( JI ) , ZWSNOW ( JI ) / ZSNOW_D ( JI ) / PTSTEP ) ! TPSNOW % T ( JI , 1 ) = MIN ( TPSNOW % T ( JI , 1 ) , XTT ) ! ENDDO ! !*      4.2    run-off of all snow if lower surface temperature is positive !              ------------------------------------------------------------ ! !* this option is used when snow is located on sloping roofs for example. ! IF ( OALL_MELT ) THEN WHERE ( GSNOWMASK (:) . AND . PTG (:) > XTT . AND . ZWSNOW (:) >= ZWSNOW_MIN ) PMELT (:) = PMELT (:) + ZWSNOW (:) / PTSTEP END WHERE END IF ! !*      4.3    output melting in kg/m2/s !              ------------------------- ! PMELT (:) = ZMELT (:) * ZSNOW_D (:) ! !------------------------------------------------------------------------------- ! !*      5.     fluxes !              ------ ! !*      5.3    qsat (Tsnow) !              ------------ ! ZQSATI = QSATI ( TPSNOW % T (:, 1 ), PPS (:)) WHERE ( GFLUXMASK (:)) ZQSAT (:) = ZQSATI (:) END WHERE ! !*      5.1    net radiation (with Ts lin. extrapolation) !              ------------- ! !cdir nodep DO JJ = 1 , JCOMPT_FLUX ! JI = JFLUXMASK ( JJ ) ! PABS_LW ( JI ) = PLW1 ( JI ) + PLW2 ( JI ) * TPSNOW % T ( JI , 1 ) ** 4 ! PRNSNOW ( JI ) = PABS_SW ( JI ) + PABS_LW ( JI ) ! ! !*      5.2    sensible heat flux !              ------------------ ! PHSNOW ( JI ) = XCPD * PRHOA ( JI ) * ZAC ( JI ) * ( TPSNOW % T ( JI , 1 ) - PTA ( JI ) ) ! ! !*      5.4    latent heat flux !              ---------------- ! PLESNOW ( JI ) = XLSTT * PRHOA ( JI ) * ZAC ( JI ) * ( ZQSAT ( JI ) - PQA ( JI ) ) ! ! !*      5.5    Conduction heat flux !              -------------------- ! !PGSNOW(JI) = ZSNOW_TC(JI)/(0.5*ZSNOW_D(JI)) * ( TPSNOW%T(JI,1) - PTG(JI) ) PGSNOW ( JI ) = ZSNOW_TC ( JI ) / ( 0.5 * ZSNOW_D ( JI )) * ( TPSNOW % T ( JI , 1 ) - PTG_COEFB ( JI ) ) & / ( 1. + ZSNOW_TC ( JI ) / ( 0.5 * ZSNOW_D ( JI )) * PTG_COEFA ( JI ) ) ! ! !*      5.6    If ground T>0 C, Melting is estimated from conduction heat flux !              --------------------------------------------------------------- ! IF ( PTG ( JI ) > XTT ) PMELT ( JI ) = MAX ( PMELT ( JI ), - PGSNOW ( JI ) / XLMTT ) ! ENDDO ! !------------------------------------------------------------------------------- ! !*      6.     reservoir evolution !              ------------------- ! !cdir nodep DO JJ = 1 , SIZE ( TPSNOW % WSNOW , 1 ) ! !*      6.1    snow fall !              --------- ! TPSNOW % WSNOW ( JJ , 1 ) = TPSNOW % WSNOW ( JJ , 1 ) + PTSTEP * PSR ( JJ ) ! ! !*      6.2    sublimation !              ----------- ! PLESNOW ( JJ ) = MIN ( PLESNOW ( JJ ), XLSTT * TPSNOW % WSNOW ( JJ , 1 ) / PTSTEP ) ! TPSNOW % WSNOW ( JJ , 1 ) = MAX ( TPSNOW % WSNOW ( JJ , 1 ) - PTSTEP * PLESNOW ( JJ ) / XLSTT , 0. ) ! IF ( TPSNOW % WSNOW ( JJ , 1 ) < 1.E-8 * PTSTEP ) TPSNOW % WSNOW ( JJ , 1 ) = 0. ! !*      6.3    melting !              ------- ! PMELT ( JJ ) = MIN ( PMELT ( JJ ), TPSNOW % WSNOW ( JJ , 1 ) / PTSTEP ) ! TPSNOW % WSNOW ( JJ , 1 ) = MAX ( TPSNOW % WSNOW ( JJ , 1 ) - PTSTEP * PMELT ( JJ ) , 0. ) ! IF ( TPSNOW % WSNOW ( JJ , 1 ) < 1.E-8 * PTSTEP ) TPSNOW % WSNOW ( JJ , 1 ) = 0. ! IF ( TPSNOW % WSNOW ( JJ , 1 ) == 0. ) PGSNOW ( JJ ) = MAX ( PGSNOW ( JJ ), - PMELT ( JJ ) * XLMTT ) ! ENDDO ! !*      6.4    time dependent drainage !              ----------------------- ! IF ( PDRAIN_TIME > 0. ) THEN WHERE ( TPSNOW % WSNOW (:, 1 ) > 0. ) TPSNOW % WSNOW (:, 1 ) = TPSNOW % WSNOW (:, 1 ) * EXP ( - PTSTEP / PDRAIN_TIME / XDAY ) END WHERE END IF ! !*      6.5    melting of last 1mm of snow depth !              --------------------------------- ! WHERE ( TPSNOW % WSNOW (:, 1 ) < ZWSNOW_MIN . AND . PMELT (:) > 0. . AND . PSR (:) == 0. ) PMELT (:) = PMELT (:) + TPSNOW % WSNOW (:, 1 ) / PTSTEP TPSNOW % WSNOW (:, 1 ) = 0. END WHERE ! WHERE ( TPSNOW % WSNOW (:, 1 ) < 1.E-8 * PTSTEP ) TPSNOW % WSNOW (:, 1 ) = 0. END WHERE ! !------------------------------------------------------------------------------- ! !*      7.     albedo evolution !              ---------------- ! !*      7.1    If melting occurs or not !              ----------------------- ! ! !cdir nodep DO JJ = 1 , JCOMPT_SNOW1 ! JI = JSNOWMASK1 ( JJ ) ! IF ( PMELT ( JI ) > 0. ) THEN ! TPSNOW % ALB ( JI ) = ( TPSNOW % ALB ( JI ) - PANSMIN ) * EXP ( - PRHOFOLD * PTSTEP / XDAY ) + PANSMIN & + PSR ( JI ) * PTSTEP / PWCRN * PANSMAX ! ELSEIF ( PMELT ( JI ) == 0. ) THEN TPSNOW % ALB ( JI ) = TPSNOW % ALB ( JI ) - PTODRY * PTSTEP / XDAY + PSR ( JI ) * PTSTEP / PWCRN * PANSMAX ! ENDIF ! ENDDO ! !------------------------------------------------------------------------------- ! !*      8.     density evolution !              ----------------- ! !*      8.1    old snow !              -------- ! !cdir nodep DO JJ = 1 , JCOMPT_SNOW1 ! JI = JSNOWMASK1 ( JJ ) ! IF ( TPSNOW % WSNOW ( JI , 1 ) > 0. ) THEN ! ZSR1 ( JI ) = MAX ( TPSNOW % WSNOW ( JI , 1 ) , PSR ( JI ) * PTSTEP ) ! TPSNOW % RHO ( JI , 1 ) = ( TPSNOW % RHO ( JI , 1 ) - PRHOSMAX ) * EXP ( - PRHOFOLD * PTSTEP / XDAY ) + PRHOSMAX TPSNOW % RHO ( JI , 1 ) = ( ( ZSR1 ( JI ) - PSR ( JI ) * PTSTEP ) * TPSNOW % RHO ( JI , 1 ) & + ( PSR ( JI ) * PTSTEP ) * PRHOSMIN ) / ZSR1 ( JI ) ENDIF ! ENDDO ! !*      8.2    fresh snow !              ---------- ! !cdir nodep DO JJ = 1 , SIZE ( TPSNOW % WSNOW , 1 ) IF ( TPSNOW % WSNOW ( JJ , 1 ) > 0. ) THEN TPSNOW % ALB ( JJ ) = MAX ( TPSNOW % ALB ( JJ ), PANSMIN ) TPSNOW % ALB ( JJ ) = MIN ( TPSNOW % ALB ( JJ ), PANSMAX ) IF ( ZWSNOW ( JJ ) == 0. ) THEN TPSNOW % ALB ( JJ ) = PANSMAX TPSNOW % EMIS ( JJ ) = XEMISSN TPSNOW % RHO ( JJ , 1 ) = PRHOSMIN ENDIF ENDIF ENDDO ! !------------------------------------------------------------------------------- ! !*      9.     fresh snow accumulation (if more than 1mm of snow depth) !              ----------------------- ! !cdir nodep DO JJ = 1 , JCOMPT_SNOW3 ! JI = JSNOWMASK3 ( JJ ) ! IF ( PSR ( JI ) > 0. . AND . TPSNOW % WSNOW ( JI , 1 ) > 0. ) THEN ! ZSR2 ( JI ) = MIN ( TPSNOW % WSNOW ( JI , 1 ) , PSR ( JI ) * PTSTEP ) ! TPSNOW % T ( JI , 1 ) = ( ( TPSNOW % WSNOW ( JI , 1 ) - ZSR2 ( JI ) ) * TPSNOW % T ( JI , 1 ) & + ZSR2 ( JI ) * MIN ( PTA ( JI ) , XTT )) / ( TPSNOW % WSNOW ( JI , 1 ) ) ENDIF ! ENDDO ! !------------------------------------------------------------------------------- ! !*     10.     Surface temperature !              ------------------- ! !* note that if the relation between snow pack temperature and its !  surface temperature is modified, think to modify it also in !  subroutine init_snow_lw.f90 ! WHERE ( GSNOWMASK (:) ) TPSNOW % TS (:) = TPSNOW % T (:, 1 ) END WHERE ! !------------------------------------------------------------------------------- ! !*     11.     bogus values !              ------------ ! !*     11.1    snow characteristics where snow IS present at current time-step !              --------------------------------------------------------------- ! WHERE ( TPSNOW % WSNOW (:, 1 ) == 0. ) TPSNOW % T (:, 1 ) = XUNDEF TPSNOW % RHO (:, 1 ) = XUNDEF TPSNOW % ALB (:) = XUNDEF TPSNOW % TS (:) = XUNDEF TPSNOW % EMIS (:) = XUNDEF END WHERE ! ! !------------------------------------------------------------------------------- ! !*     12.     Heat storage inside snow pack ! WHERE ( GSNOWMASK (:)) ZPEI_SNOW (:) = ZSNOW_HC (:) * ZSNOW_D (:) * TPSNOW % T (:, 1 ) ELSEWHERE ZPEI_SNOW (:) = 0. END WHERE PDQS_SNOW (:) = ( ZPEI_SNOW (:) - ZEI_SNOW (:)) / PTSTEP ! IF ( LHOOK ) CALL DR_HOOK ( 'SNOW_COVER_1LAYER' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END SUBROUTINE SNOW_COVER_1LAYER","tags":"","loc":"proc/snow_cover_1layer.html"},{"title":"URBAN_LW_COEF – Town Energy Balance (TEB) model API docs","text":"subroutine URBAN_LW_COEF(B, T, PLW_RAD, PEMIS_G, PTS_SR, PTS_G, PLW_WA_TO_WB, PLW_WA_TO_R, PLW_WB_TO_R, PLW_WA_TO_NR, PLW_WB_TO_NR, PLW_WA_TO_G, PLW_WB_TO_G, PLW_WA_TO_WIN, PLW_WB_TO_WIN, PLW_R_TO_WA, PLW_R_TO_WB, PLW_R_TO_WIN, PLW_G_TO_WA, PLW_G_TO_WB, PLW_G_TO_WIN, PLW_S_TO_WA, PLW_S_TO_WB, PLW_S_TO_R, PLW_S_TO_NR, PLW_S_TO_G, PLW_S_TO_WIN, PLW_WIN_TO_WA, PLW_WIN_TO_WB, PLW_WIN_TO_R, PLW_WIN_TO_NR, PLW_WIN_TO_G, PLW_NR_TO_WA, PLW_NR_TO_WB, PLW_NR_TO_WIN) Uses MODD_BEM_n YOMHOOK MODD_CSTS PARKIND1 MODD_SURF_PAR MODD_TEB_n Arguments Type Intent Optional Attributes Name type(BEM_t), intent(inout) :: B type(TEB_t), intent(inout) :: T real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PEMIS_G real, intent(in), DIMENSION(:) :: PTS_SR real, intent(in), DIMENSION(:) :: PTS_G real, intent(out), DIMENSION(:) :: PLW_WA_TO_WB real, intent(out), DIMENSION(:) :: PLW_WA_TO_R real, intent(out), DIMENSION(:) :: PLW_WB_TO_R real, intent(out), DIMENSION(:) :: PLW_WA_TO_NR real, intent(out), DIMENSION(:) :: PLW_WB_TO_NR real, intent(out), DIMENSION(:) :: PLW_WA_TO_G real, intent(out), DIMENSION(:) :: PLW_WB_TO_G real, intent(out), DIMENSION(:) :: PLW_WA_TO_WIN real, intent(out), DIMENSION(:) :: PLW_WB_TO_WIN real, intent(out), DIMENSION(:) :: PLW_R_TO_WA real, intent(out), DIMENSION(:) :: PLW_R_TO_WB real, intent(out), DIMENSION(:) :: PLW_R_TO_WIN real, intent(out), DIMENSION(:) :: PLW_G_TO_WA real, intent(out), DIMENSION(:) :: PLW_G_TO_WB real, intent(out), DIMENSION(:) :: PLW_G_TO_WIN real, intent(out), DIMENSION(:) :: PLW_S_TO_WA real, intent(out), DIMENSION(:) :: PLW_S_TO_WB real, intent(out), DIMENSION(:) :: PLW_S_TO_R real, intent(out), DIMENSION(:) :: PLW_S_TO_NR real, intent(out), DIMENSION(:) :: PLW_S_TO_G real, intent(out), DIMENSION(:) :: PLW_S_TO_WIN real, intent(out), DIMENSION(:) :: PLW_WIN_TO_WA real, intent(out), DIMENSION(:) :: PLW_WIN_TO_WB real, intent(out), DIMENSION(:) :: PLW_WIN_TO_R real, intent(out), DIMENSION(:) :: PLW_WIN_TO_NR real, intent(out), DIMENSION(:) :: PLW_WIN_TO_G real, intent(out), DIMENSION(:) :: PLW_NR_TO_WA real, intent(out), DIMENSION(:) :: PLW_NR_TO_WB real, intent(out), DIMENSION(:) :: PLW_NR_TO_WIN Contents Source Code URBAN_LW_COEF Source Code SUBROUTINE URBAN_LW_COEF ( B , T , PLW_RAD , PEMIS_G , PTS_SR , PTS_G , & PLW_WA_TO_WB , PLW_WA_TO_R , PLW_WB_TO_R , & PLW_WA_TO_NR , PLW_WB_TO_NR , & PLW_WA_TO_G , PLW_WB_TO_G , & PLW_WA_TO_WIN , PLW_WB_TO_WIN , & PLW_R_TO_WA , PLW_R_TO_WB , PLW_R_TO_WIN , & PLW_G_TO_WA , PLW_G_TO_WB , PLW_G_TO_WIN , & PLW_S_TO_WA , PLW_S_TO_WB , PLW_S_TO_R , & PLW_S_TO_NR , PLW_S_TO_G , PLW_S_TO_WIN , & PLW_WIN_TO_WA , PLW_WIN_TO_WB , PLW_WIN_TO_R , & PLW_WIN_TO_NR , PLW_WIN_TO_G , & PLW_NR_TO_WA , PLW_NR_TO_WB , PLW_NR_TO_WIN ) !   ########################################################################## ! !!****  *URBAN_LW_COEF* !! !!    PURPOSE !!    ------- ! !     Computes the coefficients before each of the temperatures in the !     radiative budgets ! ! !!**  METHOD !     ------ ! ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    08/09/98 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_BEM_n , ONLY : BEM_t USE MODD_TEB_n , ONLY : TEB_t ! USE MODD_CSTS , ONLY : XSTEFAN USE MODD_SURF_PAR , ONLY : XUNDEF ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_t ), INTENT ( INOUT ) :: T ! REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! incoming LW radiation REAL , DIMENSION (:), INTENT ( IN ) :: PEMIS_G ! GARDEN area emissivity ! REAL , DIMENSION (:), INTENT ( IN ) :: PTS_G ! garden surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_SR ! snow surface temperature ! REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WA_TO_WB ! L.W. interactions wall->opposite wall REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WA_TO_R ! L.W. interactions wall->road for road balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WB_TO_R ! L.W. interactions wall->road for road balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WA_TO_NR ! L.W. interactions wall->snow for snow balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WB_TO_NR ! L.W. interactions wall->snow for snow balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WA_TO_G ! L.W. interactions wall->GARDEN areas for garden balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WB_TO_G ! L.W. interactions wall->GARDEN areas for garden balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WA_TO_WIN ! L.W. interactions wall->win for window balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WB_TO_WIN ! L.W. interactions wall->win for window balance ! REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_R_TO_WA ! L.W. interactions road->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_R_TO_WB ! L.W. interactions road->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_R_TO_WIN ! L.W. interactions road->win for win balance ! REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_G_TO_WA ! L.W. interactions GARDEN areas->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_G_TO_WB ! L.W. interactions GARDEN areas->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_G_TO_WIN ! L.W. interactions GARDEN areas->road for window balance ! REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_WA ! L.W. interactions sky->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_WB ! L.W. interactions sky->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_R ! L.W. interactions sky->road for raod balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_NR ! L.W. interactions sky->snow for snow balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_G ! L.W. interactions sky->GARDEN areas for garden balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_S_TO_WIN ! L.W. interactions sky->win for window balance ! REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WIN_TO_WA ! L.W. interactions win->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WIN_TO_WB ! L.W. interactions win->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WIN_TO_R ! L.W. interactions win->road for road balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WIN_TO_NR ! L.W. interactions win->GARDEN areas for snow balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_WIN_TO_G ! L.W. interactions win->GARDEN areas for garden balance ! REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_NR_TO_WA ! L.W. interactions snow(road)->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_NR_TO_WB ! L.W. interactions snow(road)->wall for wall balance REAL , DIMENSION (:), INTENT ( OUT ) :: PLW_NR_TO_WIN ! L.W. interactions snow(road)->WIN areas for window balance ! !*      0.2    declarations of local variables ! REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZT_S ! sky temperature ! REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZEMIS_WIN REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_W_W REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_R_W REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_R_WIN REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_W_R REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_W_G REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_W_WIN REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_W_NR REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_WIN_W REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_WIN_R REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_WIN_G REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_WIN_NR REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_G_W REAL , DIMENSION ( SIZE ( T % XBLD )) :: ZF_G_WIN ! REAL :: ZE1 , ZE2 , ZF , ZT1 , ZT2 , ZLW ZLW ( ZE1 , ZE2 , ZF , ZT1 , ZT2 ) = 4. * XSTEFAN * ZE1 * ZE2 * ZF * (( ZT1 + ZT2 ) / 2. ) ** 3 ! INTEGER :: JJ REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_LW_COEF' , 0 , ZHOOK_HANDLE ) ! ZT_S (:) = ( PLW_RAD (:) / XSTEFAN ) ** 0.25 ! DO JJ = 1 , SIZE ( T % XROAD ) ! ZEMIS_WIN ( JJ ) = 0.84 !from Energy Plus Engineering Reference, p219 ! see http://apps1.eere.energy.gov/buildings/energyplus/ ! ZF_W_R ( JJ ) = T % XSVF_WALL ( JJ ) * ( T % XROAD ( JJ ) / ( 1. - T % XBLD ( JJ ))) ZF_W_G ( JJ ) = T % XSVF_WALL ( JJ ) * ( T % XGARDEN ( JJ ) / ( 1. - T % XBLD ( JJ ))) ZF_W_NR ( JJ ) = T % XSVF_WALL ( JJ ) ! ZF_WIN_R ( JJ ) = ZF_W_R ( JJ ) ZF_WIN_G ( JJ ) = ZF_W_G ( JJ ) ZF_WIN_NR ( JJ ) = ZF_W_NR ( JJ ) ! ZF_R_W ( JJ ) = ( 1 - T % XSVF_ROAD ( JJ )) * ( 1. - B % XGR ( JJ )) * 0.5 ZF_R_WIN ( JJ ) = ( 1 - T % XSVF_ROAD ( JJ )) * B % XGR ( JJ ) ! ZF_G_W ( JJ ) = ZF_R_W ( JJ ) ZF_G_WIN ( JJ ) = ZF_R_WIN ( JJ ) ! ZF_WIN_W ( JJ ) = ( 1. - 2. * T % XSVF_WALL ( JJ )) * ( 1. - B % XGR ( JJ )) ZF_W_W ( JJ ) = ( 1. - 2. * T % XSVF_WALL ( JJ )) * ( 1. - B % XGR ( JJ )) ZF_W_WIN ( JJ ) = ( 1. - 2. * T % XSVF_WALL ( JJ )) * B % XGR ( JJ ) ! ! PLW_WA_TO_WB ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_W ( JJ ), T % XT_WALL_A ( JJ , 1 ), T % XT_WALL_B ( JJ , 1 )) ! PLW_WA_TO_R ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), T % XEMIS_ROAD ( JJ ), ZF_R_W ( JJ ), T % XT_WALL_A ( JJ , 1 ), T % XT_ROAD ( JJ , 1 )) PLW_WB_TO_R ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), T % XEMIS_ROAD ( JJ ), ZF_R_W ( JJ ), T % XT_WALL_B ( JJ , 1 ), T % XT_ROAD ( JJ , 1 )) PLW_R_TO_WA ( JJ ) = ZLW ( T % XEMIS_ROAD ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_R ( JJ ), T % XT_ROAD ( JJ , 1 ), T % XT_WALL_A ( JJ , 1 )) PLW_R_TO_WB ( JJ ) = ZLW ( T % XEMIS_ROAD ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_R ( JJ ), T % XT_ROAD ( JJ , 1 ), T % XT_WALL_B ( JJ , 1 )) ! IF ( SIZE ( PTS_G ) > 0 ) THEN PLW_WA_TO_G ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), PEMIS_G ( JJ ), ZF_G_W ( JJ ), T % XT_WALL_A ( JJ , 1 ), PTS_G ( JJ )) PLW_WB_TO_G ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), PEMIS_G ( JJ ), ZF_G_W ( JJ ), T % XT_WALL_B ( JJ , 1 ), PTS_G ( JJ )) PLW_G_TO_WA ( JJ ) = ZLW ( PEMIS_G ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_G ( JJ ), PTS_G ( JJ ), T % XT_WALL_A ( JJ , 1 )) PLW_G_TO_WB ( JJ ) = ZLW ( PEMIS_G ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_G ( JJ ), PTS_G ( JJ ), T % XT_WALL_B ( JJ , 1 )) ELSE PLW_WA_TO_G ( JJ ) = 0. PLW_WB_TO_G ( JJ ) = 0. PLW_G_TO_WA ( JJ ) = 0. PLW_G_TO_WB ( JJ ) = 0. ENDIF ! ! IF ( PTS_SR ( JJ ) . EQ . XUNDEF ) THEN PLW_WA_TO_NR ( JJ ) = 0. PLW_WB_TO_NR ( JJ ) = 0. PLW_NR_TO_WA ( JJ ) = 0. PLW_NR_TO_WB ( JJ ) = 0. ! PLW_WIN_TO_NR ( JJ ) = 0. PLW_NR_TO_WIN ( JJ ) = 0 ! PLW_S_TO_NR ( JJ ) = 0. ELSE PLW_WA_TO_NR ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), T % TSNOW_ROAD % EMIS ( JJ ), ZF_R_W ( JJ ), T % XT_WALL_A ( JJ , 1 ), PTS_SR ( JJ )) PLW_WB_TO_NR ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), T % TSNOW_ROAD % EMIS ( JJ ), ZF_R_W ( JJ ), T % XT_WALL_B ( JJ , 1 ), PTS_SR ( JJ )) PLW_NR_TO_WA ( JJ ) = ZLW ( T % TSNOW_ROAD % EMIS ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_NR ( JJ ), PTS_SR ( JJ ), T % XT_WALL_A ( JJ , 1 )) PLW_NR_TO_WB ( JJ ) = ZLW ( T % TSNOW_ROAD % EMIS ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_NR ( JJ ), PTS_SR ( JJ ), T % XT_WALL_B ( JJ , 1 )) ! PLW_WIN_TO_NR ( JJ ) = ZLW ( ZEMIS_WIN ( JJ ), T % TSNOW_ROAD % EMIS ( JJ ), ZF_R_WIN ( JJ ), B % XT_WIN1 ( JJ ), PTS_SR ( JJ )) PLW_NR_TO_WIN ( JJ ) = ZLW ( T % TSNOW_ROAD % EMIS ( JJ ), ZEMIS_WIN ( JJ ), ZF_WIN_NR ( JJ ), PTS_SR ( JJ ), B % XT_WIN1 ( JJ )) ! PLW_S_TO_NR ( JJ ) = ZLW ( 1. , T % TSNOW_ROAD % EMIS ( JJ ), T % XSVF_ROAD ( JJ ), ZT_S ( JJ ), PTS_SR ( JJ )) ENDIF ! PLW_WIN_TO_R ( JJ ) = ZLW ( ZEMIS_WIN ( JJ ), T % XEMIS_ROAD ( JJ ), ZF_R_WIN ( JJ ), B % XT_WIN1 ( JJ ), T % XT_ROAD ( JJ , 1 )) PLW_R_TO_WIN ( JJ ) = ZLW ( T % XEMIS_ROAD ( JJ ), ZEMIS_WIN ( JJ ), ZF_WIN_R ( JJ ), T % XT_ROAD ( JJ , 1 ), B % XT_WIN1 ( JJ )) ! IF ( SIZE ( PTS_G ) > 0 ) THEN PLW_WIN_TO_G ( JJ ) = ZLW ( ZEMIS_WIN ( JJ ), PEMIS_G ( JJ ), ZF_G_WIN ( JJ ), B % XT_WIN1 ( JJ ), PTS_G ( JJ )) PLW_G_TO_WIN ( JJ ) = ZLW ( PEMIS_G ( JJ ), ZEMIS_WIN ( JJ ), ZF_WIN_G ( JJ ), PTS_G ( JJ ), B % XT_WIN1 ( JJ )) ELSE PLW_WIN_TO_G ( JJ ) = 0. PLW_G_TO_WIN ( JJ ) = 0. ENDIF ! PLW_WIN_TO_WA ( JJ ) = ZLW ( ZEMIS_WIN ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_WIN ( JJ ), B % XT_WIN1 ( JJ ), T % XT_WALL_A ( JJ , 1 )) PLW_WIN_TO_WB ( JJ ) = ZLW ( ZEMIS_WIN ( JJ ), T % XEMIS_WALL ( JJ ), ZF_W_WIN ( JJ ), B % XT_WIN1 ( JJ ), T % XT_WALL_B ( JJ , 1 )) PLW_WA_TO_WIN ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), ZEMIS_WIN ( JJ ), ZF_WIN_W ( JJ ), T % XT_WALL_A ( JJ , 1 ), B % XT_WIN1 ( JJ )) PLW_WB_TO_WIN ( JJ ) = ZLW ( T % XEMIS_WALL ( JJ ), ZEMIS_WIN ( JJ ), ZF_WIN_W ( JJ ), T % XT_WALL_B ( JJ , 1 ), B % XT_WIN1 ( JJ )) ! PLW_S_TO_WIN ( JJ ) = ZLW ( 1. , ZEMIS_WIN ( JJ ), T % XSVF_WALL ( JJ ), ZT_S ( JJ ), B % XT_WIN1 ( JJ )) ! PLW_S_TO_WA ( JJ ) = ZLW ( 1. , T % XEMIS_WALL ( JJ ), T % XSVF_WALL ( JJ ), ZT_S ( JJ ), T % XT_WALL_A ( JJ , 1 )) PLW_S_TO_WB ( JJ ) = ZLW ( 1. , T % XEMIS_WALL ( JJ ), T % XSVF_WALL ( JJ ), ZT_S ( JJ ), T % XT_WALL_B ( JJ , 1 )) ! IF ( SIZE ( PTS_G ) > 0 ) THEN PLW_S_TO_G ( JJ ) = ZLW ( 1. , PEMIS_G ( JJ ), T % XSVF_ROAD ( JJ ), ZT_S ( JJ ), PTS_G ( JJ )) ENDIF PLW_S_TO_R ( JJ ) = ZLW ( 1. , T % XEMIS_ROAD ( JJ ), T % XSVF_ROAD ( JJ ), ZT_S ( JJ ), T % XT_ROAD ( JJ , 1 )) PLW_S_TO_NR ( JJ ) = ZLW ( 1. , T % TSNOW_ROAD % EMIS ( JJ ), T % XSVF_ROAD ( JJ ), ZT_S ( JJ ), PTS_SR ( JJ )) ! ENDDO !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_LW_COEF' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE URBAN_LW_COEF","tags":"","loc":"proc/urban_lw_coef.html"},{"title":"DX_AIR_COOLING_COIL_CV – Town Energy Balance (TEB) model API docs","text":"subroutine DX_AIR_COOLING_COIL_CV(PT_CANYON, PQ_CANYON, PPS, PRHOA, PT_IN, PQ_IN, PCOP_RAT, PCAP_SYS_RAT, PT_ADP, PF_WATER_COND, PM_SYS, PH_BLD_COOL, PH_WASTE, PLE_WASTE, PCOP, PCAP_SYS, PT_OUT, PQ_OUT, PDX_POWER, PT_BLD_COOL) Uses YOMHOOK MODE_THERMOS MODE_PSYCHRO MODD_CSTS PARKIND1 Arguments Type Intent Optional Attributes Name real, intent(in) :: PT_CANYON real, intent(in) :: PQ_CANYON real, intent(in) :: PPS real, intent(in) :: PRHOA real, intent(in) :: PT_IN real, intent(in) :: PQ_IN real, intent(in) :: PCOP_RAT real, intent(in) :: PCAP_SYS_RAT real, intent(in) :: PT_ADP real, intent(in) :: PF_WATER_COND real, intent(inout) :: PM_SYS real, intent(inout) :: PH_BLD_COOL real, intent(out) :: PH_WASTE real, intent(out) :: PLE_WASTE real, intent(out) :: PCOP real, intent(out) :: PCAP_SYS real, intent(out) :: PT_OUT real, intent(out) :: PQ_OUT real, intent(out) :: PDX_POWER real, intent(out) :: PT_BLD_COOL Contents Source Code DX_AIR_COOLING_COIL_CV Source Code SUBROUTINE DX_AIR_COOLING_COIL_CV ( PT_CANYON , PQ_CANYON , PPS , PRHOA , & PT_IN , PQ_IN , PCOP_RAT , PCAP_SYS_RAT , & PT_ADP , PF_WATER_COND , & PM_SYS , PH_BLD_COOL , PH_WASTE , PLE_WASTE , & PCOP , PCAP_SYS , PT_OUT , PQ_OUT , & PDX_POWER , PT_BLD_COOL ) ! USE MODE_THERMOS USE MODE_PSYCHRO ! USE MODD_CSTS , ONLY : XCPD ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! ! Extracted from EP_Engineer_ref p. 518 ! REAL , INTENT ( IN ) :: PT_CANYON ! Canyon air temperature [K] REAL , INTENT ( IN ) :: PQ_CANYON ! Canyon air humidity ratio [kg kg-1] REAL , INTENT ( IN ) :: PPS ! Canyon air pressure [Pa] REAL , INTENT ( IN ) :: PRHOA ! Canyon air density [kg m-3] REAL , INTENT ( IN ) :: PT_IN ! Actual inlet air temperature [K] REAL , INTENT ( IN ) :: PQ_IN ! Actual inlet air humidity ratio [kg kg-1] REAL , INTENT ( IN ) :: PCOP_RAT ! Rated COP REAL , INTENT ( IN ) :: PCAP_SYS_RAT ! Rated capacity [W] REAL , INTENT ( IN ) :: PT_ADP ! Apparatus dewpoint [K] REAL , INTENT ( IN ) :: PF_WATER_COND ! fraction of evaporation of the condenser REAL , INTENT ( INOUT ) :: PM_SYS ! HVAC air mass flow rate [kg s-1] REAL , INTENT ( INOUT ) :: PH_BLD_COOL ! Sensible cooling load REAL , INTENT ( OUT ) :: PH_WASTE ! Sensible heat rejected by the condenser [W] REAL , INTENT ( OUT ) :: PLE_WASTE ! Latent heat rejected by the condenser [W] REAL , INTENT ( OUT ) :: PCOP ! Actual COP REAL , INTENT ( OUT ) :: PCAP_SYS ! Actual capacity [W] REAL , INTENT ( OUT ) :: PT_OUT ! Actual outlet temperature [K] REAL , INTENT ( OUT ) :: PQ_OUT ! Actual outlet humidity ratio [kg kg-1] REAL , INTENT ( OUT ) :: PDX_POWER ! Electrical power consumed by the DX unit [W] REAL , INTENT ( OUT ) :: PT_BLD_COOL ! Total energy supplied by the DX unit [W] ! REAL :: ZTWB_CANYON ! Canyon air wet-bulb temperature [ K] REAL :: ZCAPTEMP ! Total cooling capacity modifier curve function of temperature REAL :: ZTW_IN ! Wet-bulb temperature of the air entering the coil [ K] REAL :: ZT_COND ! Dry-bulb or wet-bulb air temperature entering the condenser [K] REAL :: ZEIRTEMP ! Energy input ratio modifier curve function of temperature REAL :: ZPLR ! Part load ratio REAL :: ZPARTLOADF ! Part load fraction correlation REAL :: ZSHR ! Actual coil sensible heat rate REAL :: ZH_ADP ! Enthalpy of air at ADP conditions [J/kg] REAL :: ZH_OUT ! Enthalpy of air leaving the cooling coil [J/kg] REAL :: ZH_IN ! Enthalpy of air entering the cooling coil [J/kg] ! Performance curves coefficients REAL :: ZA1 REAL :: ZB1 REAL :: ZC1 REAL :: ZD1 REAL :: ZE1 REAL :: ZF1 ! Total cooling capacity modifier curve function of flow fraction (desactivated) !REAL :: ZCAPFLOW !REAL :: ZA2 !REAL :: ZB2 !REAL :: ZC2 REAL :: ZA3 REAL :: ZB3 REAL :: ZC3 REAL :: ZD3 REAL :: ZE3 REAL :: ZF3 ! Energy input ratio modifier curve function of flow fraction (desactivated) !REAL :: ZEIRFLOW !REAL :: ZA4 !REAL :: ZB4 !REAL :: ZC4 REAL :: ZA5 REAL :: ZB5 REAL :: ZC5 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'DX_AIR_COOLING_COIL_CV' , 0 , ZHOOK_HANDLE ) ! !*      A.     Definitions !              ----------- ! ! !*      B.     Performance curves !              ------------------ ! Total cooling capacity modifier curve function of temperature ! Obtained from default vaules of EnergyPlus SingleSpeedDX ! DOE-2.1E, COOL-CAP-FT for PTAC w/ SI temps !  FurnaceDX DX Coil Cap-FT, Minimum Value of x, 12.77778; !                            Maximum Value of x, 23.88889; !                            Minimum Value of y, 23.88889; !                            Maximum Value of y, 46.11111 ZA1 = 0.942587793 !- Coefficient1 Constant ZB1 = 0.009543347 !- Coefficient2 x ZC1 = 0.00068377 !- Coefficient3 x**2 ZD1 = - 0.011042676 !- Coefficient4 y ZE1 = 0.000005249 !- Coefficient5 y**2 ZF1 = - 0.00000972 !- Coefficient6 x*y ! Total cooling capacity modifier curve function of flow fraction ! DOE-2.1E, RATED-CCAP-FFLOW for PTAC !  FurnaceDX DX Coil Cap-FF, Minimum Value of x, 0.5; !                            Maximum Value of x, 1.5; !ZA2 =  0.8           !- Coefficient1 Constant !ZB2 =  0.2           !- Coefficient2 x !ZC2 =  0             !- Coefficient3 x**2 ! Energy input ratio modifier curve function of temperature ! DOE-2.1E, COOL-EIR-FT for PTAC w/ SI temps !  FurnaceDX DX Coil EIR-FT,  Minimum Value of x, 12.77778; !                            Maximum Value of x, 23.88889; !                            Minimum Value of y, 23.88889; !                            Maximum Value of y, 46.11111 ZA3 = 0.342414409 !- Coefficient1 Constant ZB3 = 0.034885008 !- Coefficient2 x ZC3 = - 0.0006237 !- Coefficient3 x**2 ZD3 = 0.004977216 !- Coefficient4 y ZE3 = 0.000437951 !- Coefficient5 y**2 ZF3 = - 0.000728028 !- Coefficient6 x*y ! Energy input ratio modifier curve function of flow fraction ! DOE-2.1E, RATED-CEIR-FFLOW for PTAC !  FurnaceDX DX Coil EIR-FF, Minimum Value of x, 0.5; !                            Maximum Value of x, 1.5; !ZA4 = 1.1552         !- Coefficient1 Constant !ZB4 = -0.1808        !- Coefficient2 x !ZC4 = 0.0256         !- Coefficient3 x**2 ! Part load fraction correlation ! PLF = l.- Cd(1.-PLR) where Cd = 0.15 !  FurnaceDX DX Coil PLF, Minimum Value of x, 0.0; !                         Maximum Value of x, 1.0; ZA5 = 0.85 !- Coefficient1 Constant ZB5 = 0.15 !- Coefficient2 x ZC5 = 0 !- Coefficient3 x**2 ! ! !*      C.     Total cooling capacity !              ---------------------- ! IF ( PM_SYS / PRHOA / PCAP_SYS_RAT < 0.00004027 ) THEN PM_SYS = 0.00004027 * PCAP_SYS_RAT * PRHOA !     PRINT*,'ERROR: HVAC supply air flow rate must be greater than 0.00004027m3/s/W' ELSE IF ( PM_SYS / PRHOA / PCAP_SYS_RAT > 0.00006041 ) THEN PM_SYS = 0.00006041 * PCAP_SYS_RAT * PRHOA !     PRINT*,'ERROR: HVAC supply air flow rate must be lower than 0.00006041m3/s/W' END IF ! ! Wet-bulb temperature entering the cooling coil ZTW_IN = TWB_FROM_TPQ ( PT_IN , PPS , PQ_IN ) ! ! Dry-bulb temperature of the air entering an air-cooled condenser ! or wet-bulb temp entering a water-cooled condenser ZTWB_CANYON = TWB_FROM_TPQ ( PT_CANYON , PPS , PQ_CANYON ) ZT_COND = ZTWB_CANYON + ( PT_CANYON - ZTWB_CANYON ) * ( 1. - PF_WATER_COND ) ! ! Total cooling capacity modifier curve function of temperature ZCAPTEMP = ZA1 + ( ZTW_IN - 27 3.15 ) * ( ZB1 + ZC1 * ( ZTW_IN - 27 3.15 )) & + ( ZT_COND - 27 3.15 ) * ( ZD1 + ZE1 * ( ZT_COND - 27 3.15 )) & + ( ZTW_IN - 27 3.15 ) * ( ZT_COND - 27 3.15 ) * ZF1 ! ! Total cooling capacity PCAP_SYS = PCAP_SYS_RAT * ZCAPTEMP ! !*      D. Coil outlet conditions !          ---------------------- ! ! Inlet air enthalpy ZH_IN = ENTH_FN_T_Q ( PT_IN , PQ_IN ) ! Apparatus dewpoint enthalpy ZH_ADP = ENTH_FN_T_Q ( PT_ADP , QSAT ( PT_ADP , PPS )) ! ! Cooling coil sensible heat rate IF ( ZH_IN - ZH_ADP < 1 0. ) THEN ! ZSHR = 1. ! PT_OUT = PT_ADP PQ_OUT = PQ_IN ZH_OUT = ENTH_FN_T_Q ( PT_OUT , PQ_OUT ) PT_BLD_COOL = 0.0 ! ELSE ! ZSHR = MIN ( XCPD * ( PT_IN - PT_ADP ) / ( ZH_IN - ZH_ADP ), 1. ) ! ! ! Thermal load limited by the system capacity IF ( PH_BLD_COOL > PCAP_SYS * ZSHR ) PH_BLD_COOL = PCAP_SYS * ZSHR ! ! Outlet air temperature PT_OUT = PT_IN - PH_BLD_COOL / PM_SYS / XCPD IF ( PT_OUT < PT_ADP ) PT_OUT = PT_ADP ! ! Outlet air enthalpy ZH_OUT = ZH_IN - XCPD * ( PT_IN - PT_OUT ) / ZSHR ! ! Outlet air humidity ratio PQ_OUT = Q_FN_T_ENTH ( PT_OUT , ZH_OUT ) ! ! Total thermal energy supplied by the cooling coil PT_BLD_COOL = PM_SYS * ( ZH_IN - ZH_OUT ) ! END IF ! ! !*      D. HVAC efficiency and electrical power consumed by the DX unit !          ------------------------------------------------------------ ! ! Energy input ratio modifier curve function of temperature ZEIRTEMP = ZA3 + ( ZTW_IN - 27 3.15 ) * ( ZB3 + ZC3 * ( ZTW_IN - 27 3.15 )) & + ( ZT_COND - 27 3.15 ) * ( ZD3 + ZE3 * ( ZT_COND - 27 3.15 )) & + ( ZTW_IN - 27 3.15 ) * ( ZT_COND - 27 3.15 ) * ZF3 ! ! HVAC coefficient of performance PCOP = PCOP_RAT / ZEIRTEMP ! ! Part load fraction correlation ZPLR = PH_BLD_COOL / ( PCAP_SYS * ZSHR ) ! IF ( ZPLR > 1.0 ) ZPLR = 1.0 ! ZPARTLOADF = ZA5 + ZB5 * ZPLR + ZC5 * ZPLR ** 2 IF ( ZPARTLOADF < MIN ( 0.7 , ZPLR ) ) ZPARTLOADF = MIN ( 0.7 , ZPLR ) ! ! Electrical power consumed by the DX unit ! (compressors plus outdoor condenser fans) PDX_POWER = PCAP_SYS / PCOP * ZPLR / ZPARTLOADF ! ! !*      E. Waste heat emissions !          -------------------- ! ! Total heat rejected by the condenser PLE_WASTE = ( PT_BLD_COOL + PDX_POWER ) * PF_WATER_COND PH_WASTE = ( PT_BLD_COOL + PDX_POWER ) * ( 1. - PF_WATER_COND ) ! IF ( LHOOK ) CALL DR_HOOK ( 'DX_AIR_COOLING_COIL_CV' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE DX_AIR_COOLING_COIL_CV","tags":"","loc":"proc/dx_air_cooling_coil_cv.html"},{"title":"DAY_OF_WEEK – Town Energy Balance (TEB) model API docs","text":"subroutine DAY_OF_WEEK(PYEAR, PMONTH, PDAY, PDOW) Uses PARKIND1 YOMHOOK Arguments Type Intent Optional Attributes Name integer, intent(in) :: PYEAR integer, intent(in) :: PMONTH integer, intent(in) :: PDAY integer, intent(out) :: PDOW Contents Source Code DAY_OF_WEEK Source Code SUBROUTINE DAY_OF_WEEK ( PYEAR , PMONTH , PDAY , PDOW ) !################################################ !! DAY_OF_WEEK !! !!  PURPOSE !!  ------- !! DAY_OF_WEEK COMPUTES THE DAY OF THE WEEK BASED UPON THE GIVEN DATE, !! MONTH AND YEAR.  IT USES THE ZELLER CONGRUENCE ALGORITHIM. !! PDAY IS THE DAY OF THE MONTH, 1 - 31 !! PMONTH IS THE MONTH OF THE YEAR, 1 - 12 !! PYEAR IS THE YEAR, E.G., 1977 !! IT RETURNS 1 FOR SUNDAY, 2 FOR MONDAY, ETC. !! !! AUTHOR !! ------ !! G. Pigeon *Météo-France* !! !! MODIFICATIONS !! ------------- !! Original  02/2010 USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! !! DECLARATION IMPLICIT NONE !! 1. declaraction of arguments INTEGER , INTENT ( IN ) :: PYEAR !current year (UTC) INTEGER , INTENT ( IN ) :: PMONTH !current month (UTC) INTEGER , INTENT ( IN ) :: PDAY !current day (UTC) INTEGER , INTENT ( OUT ) :: PDOW !current day of the week !! !! 2. declaration of local variables INTEGER :: DAY , YR , MN , N1 , N2 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'DAY_OF_WEEK' , 0 , ZHOOK_HANDLE ) ! YR = PYEAR MN = PMONTH !   IF JANUARY OR FEBRUARY, ADJUST MONTH AND YEAR IF ( MN . LE . 2 ) THEN MN = MN + 12 YR = YR - 1 END IF N1 = ( 26 * ( MN + 1 )) / 10 N2 = ( 125 * YR ) / 100 DAY = PDAY + N1 + N2 - ( YR / 100 ) + ( YR / 400 ) - 1 PDOW = MOD ( DAY , 7 ) + 1 ! IF ( LHOOK ) CALL DR_HOOK ( 'DAY_OF_WEEK' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE DAY_OF_WEEK","tags":"","loc":"proc/day_of_week.html"},{"title":"AVG_URBAN_FLUXES – Town Energy Balance (TEB) model API docs","text":"subroutine AVG_URBAN_FLUXES(TOP, T, B, TPN, DMT, PTS_TWN, PEMIS_TWN, PT_CAN, PQ_CAN, PT_LOWCAN, PQ_LOWCAN, PTA, PQA, PRHOA, PPS, PH_TRAFFIC, PLE_TRAFFIC, PWL_O_GRND, PESN_RF, PEMIS_GR, PLW_RAD, PAC_RF, PAC_RF_WAT, PAC_WL, PAC_RD, PAC_RD_WAT, PAC_TOP, PAC_GD, PQSAT_GD, PAC_AGG_GD, PHU_AGG_GD, PQSAT_RF, PQSAT_RD, PDELT_RF, PDELT_RD, PRF_FRAC, PWL_FRAC, PRD_FRAC, PGD_FRAC, PTOTS_O_HORS, PDF_RF, PDN_RF, PDF_RD, PDN_RD, PLE_WL_A, PLE_WL_B, PLEW_RF, PLESN_RF, PLEW_RD, PLESN_RD, PHSN_RD, PTSRAD_GD, PRN_GD, PH_GD, PLE_GD, PGFLUX_GD, PEVAP_GD, PRUNOFF_GD, PEVAP_GR, PRUNOFF_GR, PDRAIN_GR, PRN_GRND, PH_GRND, PLE_GRND, PGFLX_GRND, PRN_TWN, PH_TWN, PLE_TWN, PGFLX_TWN, PEVAP_TWN, PEMIT_LW_RD, PEMIT_LW_GD, PEMIT_LW_GRND, PEMIS_GD) Uses MODD_DIAG_MISC_TEB_n MODD_BEM_n MODE_THERMOS YOMHOOK MODD_CSTS MODD_TEB_PANEL_n PARKIND1 MODD_TEB_n MODD_TEB_OPTION_n Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B type(TEB_PANEL_t), intent(inout) :: TPN type(DIAG_MISC_TEB_t), intent(inout) :: DMT real, intent(out), DIMENSION(:) :: PTS_TWN real, intent(out), DIMENSION(:) :: PEMIS_TWN real, intent(inout), DIMENSION(:) :: PT_CAN real, intent(inout), DIMENSION(:) :: PQ_CAN real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PH_TRAFFIC real, intent(in), DIMENSION(:) :: PLE_TRAFFIC real, intent(in), DIMENSION(:) :: PWL_O_GRND real, intent(in), DIMENSION(:) :: PESN_RF real, intent(in), DIMENSION(:) :: PEMIS_GR real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PAC_RF real, intent(in), DIMENSION(:) :: PAC_RF_WAT real, intent(in), DIMENSION(:) :: PAC_WL real, intent(in), DIMENSION(:) :: PAC_RD real, intent(in), DIMENSION(:) :: PAC_RD_WAT real, intent(in), DIMENSION(:) :: PAC_TOP real, intent(in), DIMENSION(:) :: PAC_GD real, intent(in), DIMENSION(:) :: PQSAT_GD real, intent(in), DIMENSION(:) :: PAC_AGG_GD real, intent(in), DIMENSION(:) :: PHU_AGG_GD real, intent(in), DIMENSION(:) :: PQSAT_RF real, intent(in), DIMENSION(:) :: PQSAT_RD real, intent(in), DIMENSION(:) :: PDELT_RF real, intent(in), DIMENSION(:) :: PDELT_RD real, intent(in), DIMENSION(:) :: PRF_FRAC real, intent(in), DIMENSION(:) :: PWL_FRAC real, intent(in), DIMENSION(:) :: PRD_FRAC real, intent(in), DIMENSION(:) :: PGD_FRAC real, intent(in), DIMENSION(:) :: PTOTS_O_HORS real, intent(in), DIMENSION(:) :: PDF_RF real, intent(in), DIMENSION(:) :: PDN_RF real, intent(in), DIMENSION(:) :: PDF_RD real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PLE_WL_A real, intent(in), DIMENSION(:) :: PLE_WL_B real, intent(in), DIMENSION(:) :: PLEW_RF real, intent(in), DIMENSION(:) :: PLESN_RF real, intent(in), DIMENSION(:) :: PLEW_RD real, intent(in), DIMENSION(:) :: PLESN_RD real, intent(in), DIMENSION(:) :: PHSN_RD real, intent(in), DIMENSION(:) :: PTSRAD_GD real, intent(in), DIMENSION(:) :: PRN_GD real, intent(in), DIMENSION(:) :: PH_GD real, intent(in), DIMENSION(:) :: PLE_GD real, intent(in), DIMENSION(:) :: PGFLUX_GD real, intent(in), DIMENSION(:) :: PEVAP_GD real, intent(in), DIMENSION(:) :: PRUNOFF_GD real, intent(in), DIMENSION(:) :: PEVAP_GR real, intent(in), DIMENSION(:) :: PRUNOFF_GR real, intent(in), DIMENSION(:) :: PDRAIN_GR real, intent(out), DIMENSION(:) :: PRN_GRND real, intent(out), DIMENSION(:) :: PH_GRND real, intent(out), DIMENSION(:) :: PLE_GRND real, intent(out), DIMENSION(:) :: PGFLX_GRND real, intent(out), DIMENSION(:) :: PRN_TWN real, intent(out), DIMENSION(:) :: PH_TWN real, intent(out), DIMENSION(:) :: PLE_TWN real, intent(out), DIMENSION(:) :: PGFLX_TWN real, intent(out), DIMENSION(:) :: PEVAP_TWN real, intent(in), DIMENSION(:) :: PEMIT_LW_RD real, intent(in), DIMENSION(:) :: PEMIT_LW_GD real, intent(out), DIMENSION(:) :: PEMIT_LW_GRND real, intent(in), DIMENSION(:) :: PEMIS_GD Contents Source Code AVG_URBAN_FLUXES Source Code SUBROUTINE AVG_URBAN_FLUXES ( TOP , T , B , TPN , DMT , & PTS_TWN , PEMIS_TWN , PT_CAN , & PQ_CAN , PT_LOWCAN , PQ_LOWCAN , PTA , PQA , PRHOA , PPS ,& PH_TRAFFIC , PLE_TRAFFIC , PWL_O_GRND , PESN_RF , & PEMIS_GR , PLW_RAD , PAC_RF , PAC_RF_WAT , PAC_WL , & PAC_RD , PAC_RD_WAT , PAC_TOP , PAC_GD , PQSAT_GD , & PAC_AGG_GD , PHU_AGG_GD , PQSAT_RF , PQSAT_RD , & PDELT_RF , PDELT_RD , PRF_FRAC , PWL_FRAC , PRD_FRAC , & PGD_FRAC , PTOTS_O_HORS , PDF_RF , PDN_RF , PDF_RD , & PDN_RD , PLE_WL_A , PLE_WL_B , PLEW_RF , PLESN_RF , & PLEW_RD , PLESN_RD , PHSN_RD , & PTSRAD_GD , PRN_GD , PH_GD , PLE_GD , PGFLUX_GD , PEVAP_GD ,& PRUNOFF_GD , PEVAP_GR , PRUNOFF_GR , PDRAIN_GR , & PRN_GRND , PH_GRND , PLE_GRND , PGFLX_GRND , & PRN_TWN , PH_TWN , PLE_TWN , PGFLX_TWN , PEVAP_TWN , & PEMIT_LW_RD , PEMIT_LW_GD , PEMIT_LW_GRND , PEMIS_GD ) !   ########################################################################## ! !!****  *AVG_URBAN_FLUXES* computes fluxes on urbanized surfaces !! !!    PURPOSE !!    ------- ! ! !!**  METHOD !     ------ ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !!                     12/02 (A. Lemonsu) modifications of emissivity and Tstown !!                     07/07 (P. LeMoigne) expression of latent heat fluxes as !!                           functions of w'theta' instead of w'T' !!                     17/10 (G. Pigeon)  computation of anthropogenic heat due !!                           to domestic heating !!                     10/11 (G. Pigeon) simplification for road, garden, roof, !!                           wall fractions !!                     08/13 (V. Masson) adds solar panels !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t ! USE MODD_CSTS , ONLY : XCPD , XLVTT , XLSTT , XSTEFAN ! USE MODE_THERMOS ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_PANEL_t ), INTENT ( INOUT ) :: TPN TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT ! REAL , DIMENSION (:), INTENT ( OUT ) :: PTS_TWN ! town surface temperature REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIS_TWN ! town equivalent emissivity REAL , DIMENSION (:), INTENT ( INOUT ) :: PT_CAN ! canyon air temperature REAL , DIMENSION (:), INTENT ( INOUT ) :: PQ_CAN ! canyon air specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PT_LOWCAN ! low canyon air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PQ_LOWCAN ! low canyon air specific humidity ! REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at roof level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity ! at roof level REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! surface pressure REAL , DIMENSION (:), INTENT ( IN ) :: PH_TRAFFIC ! anthropogenic sensible !                                                      ! heat fluxes due to traffic REAL , DIMENSION (:), INTENT ( IN ) :: PLE_TRAFFIC ! anthropogenic latent !                                                      ! heat fluxes due to traffic REAL , DIMENSION (:), INTENT ( IN ) :: PWL_O_GRND ! wall Surf. / ground (road+green) Surf. ! REAL , DIMENSION (:), INTENT ( IN ) :: PESN_RF ! snow roof emissivity ! REAL , DIMENSION (:), INTENT ( IN ) :: PEMIS_GR ! green roof emissivity ! REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! incoming longwave rad. ! REAL , DIMENSION (:), INTENT ( IN ) :: PAC_RF ! surface conductance !                                                      ! for heat transfers !                                                      ! above roofs REAL , DIMENSION (:), INTENT ( IN ) :: PAC_RF_WAT ! surface conductance !                                                      ! for heat transfers !                                                      ! above roofs (for water) REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WL ! surface conductance !                                                      ! for heat transfer !                                                      ! between wall and canyon REAL , DIMENSION (:), INTENT ( IN ) :: PAC_RD ! surface conductance !                                                      ! for heat transfers !                                                      ! between road and canyon REAL , DIMENSION (:), INTENT ( IN ) :: PAC_RD_WAT ! surface conductance !                                                      ! for heat transfers !                                                      ! inside canyon (for water) REAL , DIMENSION (:), INTENT ( IN ) :: PAC_TOP ! aerodynamical conductance !                                                      ! between atmosphere and !                                                      ! canyon top REAL , DIMENSION (:), INTENT ( IN ) :: PAC_GD ! aerodynamical conductance !                                                      ! between atmosphere and !                                                      ! green areas REAL , DIMENSION (:), INTENT ( IN ) :: PQSAT_GD ! q_sat(Ts) REAL , DIMENSION (:), INTENT ( IN ) :: PAC_AGG_GD ! aggregated aerodyn resistance for green areas REAL , DIMENSION (:), INTENT ( IN ) :: PHU_AGG_GD ! aggregated relative humidity for green areas ! REAL , DIMENSION (:), INTENT ( IN ) :: PQSAT_RF ! q_sat(Ts) REAL , DIMENSION (:), INTENT ( IN ) :: PQSAT_RD ! q_sat(Ts) REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_RF ! water fraction on snow-free REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_RD ! roof and roads REAL , DIMENSION (:), INTENT ( IN ) :: PRF_FRAC ! roof, wall, REAL , DIMENSION (:), INTENT ( IN ) :: PWL_FRAC ! road, and green area REAL , DIMENSION (:), INTENT ( IN ) :: PRD_FRAC ! fractions REAL , DIMENSION (:), INTENT ( IN ) :: PGD_FRAC ! of exchange surf. REAL , DIMENSION (:), INTENT ( IN ) :: PTOTS_O_HORS ! total canyon+roof surface !                                                    ! over horizontal surface REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RF ! snow-free    roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RF ! snow-covered roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RD ! snow-free    road fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered road fraction ! REAL , DIMENSION (:), INTENT ( IN ) :: PLE_WL_A ! latent heat flux over wall REAL , DIMENSION (:), INTENT ( IN ) :: PLE_WL_B ! latent heat flux over wall ! REAL , DIMENSION (:), INTENT ( IN ) :: PLEW_RF ! latent heat flux of snowfree roof REAL , DIMENSION (:), INTENT ( IN ) :: PLESN_RF ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PLEW_RD ! latent heat flux of snowfree road REAL , DIMENSION (:), INTENT ( IN ) :: PLESN_RD ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PHSN_RD ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PTSRAD_GD ! green area surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PRN_GD ! net radiation over green areas REAL , DIMENSION (:), INTENT ( IN ) :: PH_GD ! sensible heat flux over green areas REAL , DIMENSION (:), INTENT ( IN ) :: PLE_GD ! latent heat flux over green areas REAL , DIMENSION (:), INTENT ( IN ) :: PGFLUX_GD ! flux through the green areas REAL , DIMENSION (:), INTENT ( IN ) :: PEVAP_GD ! evaporation over gardens REAL , DIMENSION (:), INTENT ( IN ) :: PRUNOFF_GD ! surface runoff over green areas      (kg/m2/s) REAL , DIMENSION (:), INTENT ( IN ) :: PEVAP_GR ! evaporation over green roofs REAL , DIMENSION (:), INTENT ( IN ) :: PRUNOFF_GR ! surface runoff over green roofs      (kg/m2/s) REAL , DIMENSION (:), INTENT ( IN ) :: PDRAIN_GR ! outlet drainage at green roof base   (kg/m2/s) ! ! REAL , DIMENSION (:), INTENT ( OUT ) :: PRN_GRND ! net radiation over ground REAL , DIMENSION (:), INTENT ( OUT ) :: PH_GRND ! sensible heat flux over ground REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_GRND ! latent heat flux over ground REAL , DIMENSION (:), INTENT ( OUT ) :: PGFLX_GRND ! flux through the ground REAL , DIMENSION (:), INTENT ( OUT ) :: PRN_TWN ! net radiation over town REAL , DIMENSION (:), INTENT ( OUT ) :: PH_TWN ! sensible heat flux over town REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_TWN ! latent heat flux over town REAL , DIMENSION (:), INTENT ( OUT ) :: PGFLX_TWN ! flux through the ground for town REAL , DIMENSION (:), INTENT ( OUT ) :: PEVAP_TWN ! evaporation (kg/m2/s) ! REAL , DIMENSION (:), INTENT ( IN ) :: PEMIT_LW_RD ! LW emitted by the road (W/m2 road) REAL , DIMENSION (:), INTENT ( IN ) :: PEMIT_LW_GD ! LW emitted by the garden (W/m2 garden) REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_GRND ! LW emitted by the ground (road+garden) (W/m2 ground) ! REAL , DIMENSION (:), INTENT ( IN ) :: PEMIS_GD ! garden emissivity ! !*      0.2    declarations of local variables ! REAL , DIMENSION ( SIZE ( PLW_RAD )) :: ZLW_UP ! upwards radiations REAL , DIMENSION ( SIZE ( T % XROAD )) :: ZQSAT_CAN REAL , DIMENSION ( SIZE ( T % XROAD )) :: ZRD , ZGD ! REAL :: ZINTER INTEGER :: JJ REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'AVG_URBAN_FLUXES' , 0 , ZHOOK_HANDLE ) ! ZRD (:) = 0. ZGD (:) = 0. ! DO JJ = 1 , SIZE ( T % XROAD ) ! IF ( T % XROAD ( JJ ) + T % XGARDEN ( JJ ). NE . 0. ) THEN ZRD ( JJ ) = T % XROAD ( JJ ) / ( T % XROAD ( JJ ) + T % XGARDEN ( JJ )) ZGD ( JJ ) = T % XGARDEN ( JJ ) / ( T % XROAD ( JJ ) + T % XGARDEN ( JJ )) ELSE ZRD ( JJ ) = 0. ZGD ( JJ ) = 0. ENDIF ! !*      1.     Averaged fluxes for ground (green areas + road) !              ----------------------------------------------- ! PRN_GRND ( JJ ) = ZRD ( JJ ) * DMT % XRN_ROAD ( JJ ) + ZGD ( JJ ) * PRN_GD ( JJ ) ! PH_GRND ( JJ ) = ZRD ( JJ ) * DMT % XH_ROAD ( JJ ) + ZGD ( JJ ) * PH_GD ( JJ ) + PH_TRAFFIC ( JJ ) / ( 1. - T % XBLD ( JJ )) ! PLE_GRND ( JJ ) = ZRD ( JJ ) * DMT % XLE_ROAD ( JJ ) + ZGD ( JJ ) * PLE_GD ( JJ ) + PLE_TRAFFIC ( JJ ) / ( 1. - T % XBLD ( JJ )) ! PGFLX_GRND ( JJ ) = ZRD ( JJ ) * DMT % XGFLUX_ROAD ( JJ ) + ZGD ( JJ ) * PGFLUX_GD ( JJ ) ! ! PEMIT_LW_GRND ( JJ ) = T % XROAD_O_GRND ( JJ ) * PEMIT_LW_RD ( JJ ) + T % XGARDEN_O_GRND ( JJ ) * PEMIT_LW_GD ( JJ ) !------------------------------------------------------------------------------- ! !*      2.     Averaged fluxes JJ built + green areas !              ------------------------------------- ! PRN_TWN ( JJ ) = PTOTS_O_HORS ( JJ ) * ( & + PRF_FRAC ( JJ ) * DMT % XRN_ROOF ( JJ ) & + PRD_FRAC ( JJ ) * DMT % XRN_ROAD ( JJ ) & + PGD_FRAC ( JJ ) * PRN_GD ( JJ ) & + PWL_FRAC ( JJ ) * DMT % XRN_WALL_A ( JJ ) * 0.5 & + PWL_FRAC ( JJ ) * DMT % XRN_WALL_B ( JJ ) * 0.5 ) ! PH_TWN ( JJ ) = PTOTS_O_HORS ( JJ ) * ( & + PRF_FRAC ( JJ ) * DMT % XH_ROOF ( JJ ) & + PRD_FRAC ( JJ ) * DMT % XH_ROAD ( JJ ) & + PGD_FRAC ( JJ ) * PH_GD ( JJ ) & + PWL_FRAC ( JJ ) * DMT % XH_WALL_A ( JJ ) * 0.5 & + PWL_FRAC ( JJ ) * DMT % XH_WALL_B ( JJ ) * 0.5 ) & + PH_TRAFFIC ( JJ ) + T % XH_INDUSTRY ( JJ ) ! PLE_TWN ( JJ ) = PTOTS_O_HORS ( JJ ) * ( & PRF_FRAC ( JJ ) * DMT % XLE_ROOF ( JJ ) & + PRD_FRAC ( JJ ) * DMT % XLE_ROAD ( JJ ) & + PGD_FRAC ( JJ ) * PLE_GD ( JJ ) & + PWL_FRAC ( JJ ) * PLE_WL_A ( JJ ) * 0.5 & + PWL_FRAC ( JJ ) * PLE_WL_B ( JJ ) * 0.5 ) & + PLE_TRAFFIC ( JJ ) + T % XLE_INDUSTRY ( JJ ) ! PGFLX_TWN ( JJ ) = PTOTS_O_HORS ( JJ ) * ( & PRF_FRAC ( JJ ) * DMT % XGFLUX_ROOF ( JJ ) & + PRD_FRAC ( JJ ) * DMT % XGFLUX_ROAD ( JJ ) & + PGD_FRAC ( JJ ) * PGFLUX_GD ( JJ ) & + PWL_FRAC ( JJ ) * DMT % XGFLUX_WALL_A ( JJ ) * 0.5 & + PWL_FRAC ( JJ ) * DMT % XGFLUX_WALL_B ( JJ ) * 0.5 ) ! IF ( TOP % LSOLAR_PANEL ) THEN PRN_TWN ( JJ ) = PRN_TWN ( JJ ) + PTOTS_O_HORS ( JJ ) * ( PRF_FRAC ( JJ ) * DMT % XRN_PANEL ( JJ ) * TPN % XFRAC_PANEL ( JJ )) PH_TWN ( JJ ) = PH_TWN ( JJ ) + PTOTS_O_HORS ( JJ ) * ( PRF_FRAC ( JJ ) * DMT % XH_PANEL ( JJ ) * TPN % XFRAC_PANEL ( JJ )) ENDIF !------------------------------------------------------------------------------- ! !*      3.     Infra-red Radiative properties !              ------------------------------ ! !*      3.1    Upward IR radiation for town !              ---------------------------- ! ZLW_UP ( JJ ) = PLW_RAD ( JJ ) & - ( PRF_FRAC ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * PDF_RF ( JJ ) * DMT % XABS_LW_ROOF ( JJ ) & + PRF_FRAC ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * PDN_RF ( JJ ) * DMT % XABS_LW_SNOW_ROOF ( JJ ) & + PRF_FRAC ( JJ ) * T % XGREENROOF ( JJ ) * DMT % XABS_LW_GREENROOF ( JJ ) & + PRD_FRAC ( JJ ) * PDF_RD ( JJ ) * DMT % XABS_LW_ROAD ( JJ ) & + PRD_FRAC ( JJ ) * PDN_RD ( JJ ) * DMT % XABS_LW_SNOW_ROAD ( JJ ) & + PGD_FRAC ( JJ ) * DMT % XABS_LW_GARDEN ( JJ ) & + PWL_FRAC ( JJ ) * 0.5 * DMT % XABS_LW_WALL_A ( JJ ) & + PWL_FRAC ( JJ ) * 0.5 * DMT % XABS_LW_WALL_B ( JJ ) & ) * PTOTS_O_HORS ( JJ ) ! IF ( TOP % LSOLAR_PANEL ) THEN ZLW_UP ( JJ ) = ZLW_UP ( JJ ) - PTOTS_O_HORS ( JJ ) * ( PRF_FRAC ( JJ ) * DMT % XABS_LW_PANEL ( JJ ) * TPN % XFRAC_PANEL ( JJ )) ENDIF ! !*      3.2    Town emissivity !              --------------- ! PEMIS_TWN ( JJ ) = T % XBLD ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * PDF_RF ( JJ ) * T % XEMIS_ROOF ( JJ ) * ( 1. - TPN % XFRAC_PANEL ( JJ )) & + T % XBLD ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * PDN_RF ( JJ ) * PESN_RF ( JJ ) * ( 1. - TPN % XFRAC_PANEL ( JJ )) & + T % XBLD ( JJ ) * T % XGREENROOF ( JJ ) * PEMIS_GR ( JJ ) * ( 1. - TPN % XFRAC_PANEL ( JJ )) & + T % XBLD ( JJ ) * TPN % XEMIS_PANEL ( JJ ) * TPN % XFRAC_PANEL ( JJ ) & + T % XROAD ( JJ ) * ( T % XSVF_ROAD ( JJ ) * PDF_RD ( JJ ) * T % XEMIS_ROAD ( JJ ) & + T % XSVF_ROAD ( JJ ) * PDN_RD ( JJ ) * T % TSNOW_ROAD % EMIS ( JJ )) & + T % XGARDEN ( JJ ) * T % XSVF_GARDEN ( JJ ) * PEMIS_GD ( JJ ) & + T % XWALL_O_HOR ( JJ ) * T % XSVF_WALL ( JJ ) * T % XEMIS_WALL ( JJ ) ! !*      3.3    Town radiative surface temperature !              ---------------------------------- ! PTS_TWN ( JJ ) = (( ZLW_UP ( JJ ) - PLW_RAD ( JJ ) * ( 1. - PEMIS_TWN ( JJ ))) / PEMIS_TWN ( JJ ) / XSTEFAN ) ** 0.25 ! !------------------------------------------------------------------------------- ! !*      4.     Averaged evaporative flux (kg/m2/s) !              ----------------------------------- ! PEVAP_TWN ( JJ ) = PTOTS_O_HORS ( JJ ) * ( & PRF_FRAC ( JJ ) * PDF_RF ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * PLEW_RF ( JJ ) / XLVTT & + PRF_FRAC ( JJ ) * PDN_RF ( JJ ) * ( 1. - T % XGREENROOF ( JJ )) * PLESN_RF ( JJ ) / XLSTT & + PRF_FRAC ( JJ ) * T % XGREENROOF ( JJ ) * PEVAP_GR ( JJ ) & + PRD_FRAC ( JJ ) * PDF_RD ( JJ ) * PLEW_RD ( JJ ) / XLVTT & + PRD_FRAC ( JJ ) * PDN_RD ( JJ ) * PLESN_RD ( JJ ) / XLSTT & + PGD_FRAC ( JJ ) * PEVAP_GD ( JJ ) & + PWL_FRAC ( JJ ) * 0.5 * ( PLE_WL_A ( JJ ) + PLE_WL_B ( JJ )) / XLVTT )& + PLE_TRAFFIC ( JJ ) / XLVTT & + T % XLE_INDUSTRY ( JJ ) / XLVTT ! IF ( TOP % CBEM == \"BEM\" ) THEN PEVAP_TWN ( JJ ) = PEVAP_TWN ( JJ ) + PRF_FRAC ( JJ ) * ( 1. - B % XF_WASTE_CAN ( JJ )) * DMT % XLE_WASTE ( JJ ) / XLVTT ENDIF !------------------------------------------------------------------------------- ! !*      5.     Averaged runoff flux (kg/m2/s) !              ----------------------------------- ! DMT % XRUNOFF_TOWN ( JJ ) = (( 1. - T % XGREENROOF ( JJ )) * DMT % XRUNOFF_STRLROOF ( JJ ) & + T % XGREENROOF ( JJ ) * ( PRUNOFF_GR ( JJ ) + PDRAIN_GR ( JJ ))) * T % XBLD ( JJ ) & + T % XROAD ( JJ ) * DMT % XRUNOFF_ROAD ( JJ ) & + T % XGARDEN ( JJ ) * PRUNOFF_GD ( JJ ) !------------------------------------------------------------------------------- ! !*      6.    Air canyon temperature at time t+dt !             ----------------------------------- ! IF (. NOT . TOP % LCANOPY ) THEN ZINTER = PAC_RD ( JJ ) * PDF_RD ( JJ ) * ZRD ( JJ ) + PAC_GD ( JJ ) * ZGD ( JJ ) + PAC_WL ( JJ ) * PWL_O_GRND ( JJ ) + PAC_TOP ( JJ ) PT_CAN ( JJ ) = ( T % XT_ROAD ( JJ , 1 ) * PAC_RD ( JJ ) * PDF_RD ( JJ ) * ZRD ( JJ ) & + T % XT_WALL_A ( JJ , 1 ) * PAC_WL ( JJ ) * ( 1. - B % XGR ( JJ )) * PWL_O_GRND ( JJ ) * 0.5 & + T % XT_WALL_B ( JJ , 1 ) * PAC_WL ( JJ ) * ( 1. - B % XGR ( JJ )) * PWL_O_GRND ( JJ ) * 0.5 & + B % XT_WIN1 ( JJ ) * PAC_WL ( JJ ) * B % XGR ( JJ ) * PWL_O_GRND ( JJ ) & + PTA ( JJ ) * PAC_TOP ( JJ ) & + PH_TRAFFIC ( JJ ) / ( 1. - T % XBLD ( JJ )) / PRHOA ( JJ ) / XCPD & + PHSN_RD ( JJ ) * PDN_RD ( JJ ) / PRHOA ( JJ ) / XCPD ) & / ZINTER ! PT_CAN ( JJ ) = PT_CAN ( JJ ) + ( PTSRAD_GD ( JJ ) * PAC_GD ( JJ ) * ZGD ( JJ ) ) / ZINTER ! IF ( TOP % CBEM == \"BEM\" ) THEN PT_CAN ( JJ ) = PT_CAN ( JJ ) + ( DMT % XH_WASTE ( JJ ) * B % XF_WASTE_CAN ( JJ ) / ( 1 - T % XBLD ( JJ )) / PRHOA ( JJ ) / XCPD ) / ZINTER ENDIF !------------------------------------------------------------------------------- ! !*      7.     Air canyon specific humidity !              ---------------------------- ! ZINTER = PAC_RD_WAT ( JJ ) * PDF_RD ( JJ ) * PDELT_RD ( JJ ) * ZRD ( JJ ) + PAC_AGG_GD ( JJ ) * PHU_AGG_GD ( JJ ) * ZGD ( JJ ) + PAC_TOP ( JJ ) PQ_CAN ( JJ ) = ( PQSAT_RD ( JJ ) * PAC_RD_WAT ( JJ ) * PDF_RD ( JJ ) * ZRD ( JJ ) * PDELT_RD ( JJ ) & + PQSAT_GD ( JJ ) * PAC_AGG_GD ( JJ ) * PHU_AGG_GD ( JJ ) * ZGD ( JJ ) & + PQA ( JJ ) * PAC_TOP ( JJ ) & + PLE_TRAFFIC ( JJ ) / ( 1. - T % XBLD ( JJ )) / PRHOA ( JJ ) / XLVTT & + PLESN_RD ( JJ ) * PDN_RD ( JJ ) / PRHOA ( JJ ) / XLVTT * ZRD ( JJ ) ) / ZINTER IF ( TOP % CBEM == \"BEM\" ) THEN PQ_CAN ( JJ ) = PQ_CAN ( JJ ) + ( DMT % XLE_WASTE ( JJ ) * B % XF_WASTE_CAN ( JJ ) / ( 1 - T % XBLD ( JJ )) / PRHOA ( JJ ) / XLVTT ) / ZINTER ENDIF ENDIF ! ENDDO ! !*check that canyon specif. humidity lower than saturation ! ZQSAT_CAN (:) = QSAT ( PT_CAN (:), PPS (:)) WHERE ( PQ_CAN (:) > ZQSAT_CAN (:)) PQ_CAN (:) = ZQSAT_CAN (:) END WHERE ! IF ( LHOOK ) CALL DR_HOOK ( 'AVG_URBAN_FLUXES' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END SUBROUTINE AVG_URBAN_FLUXES","tags":"","loc":"proc/avg_urban_fluxes.html"},{"title":"URBAN_SNOW_EVOL – Town Energy Balance (TEB) model API docs","text":"subroutine URBAN_SNOW_EVOL(T, B, PT_LWCN, PQ_LWCN, PU_LWCN, PTS_RF, PTS_RD, PTS_WL_A, PTS_WL_B, PPS, PTA, PQA, PRHOA, PLW_RAD, PSR, PZREF, PUREF, PVMOD, PTSTEP, PZ_LWCN, PDN_RF, PABS_SW_SN_RF, PABS_LW_SN_RF, PDN_RD, PABS_SW_SN_RD, PABS_LW_SN_RD, PRNSN_RF, PHSN_RF, PLESN_RF, PGSN_RF, PMELT_RF, PRNSN_RD, PHSN_RD, PLESN_RD, PGSN_RD, PMELT_RD, PLW_WA_TO_NR, PLW_WB_TO_NR, PLW_S_TO_NR, PLW_WIN_TO_NR, PDQS_SN_RF, PDQS_SN_RD) Uses MODD_BEM_n MODE_SURF_SNOW_FRAC MODI_ROOF_IMPL_COEF YOMHOOK MODD_CSTS MODD_SNOW_PAR MODI_SNOW_COVER_1LAYER PARKIND1 MODD_SURF_PAR MODD_TEB_n Arguments Type Intent Optional Attributes Name type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B real, intent(in), DIMENSION(:) :: PT_LWCN real, intent(in), DIMENSION(:) :: PQ_LWCN real, intent(in), DIMENSION(:) :: PU_LWCN real, intent(in), DIMENSION(:) :: PTS_RF real, intent(in), DIMENSION(:) :: PTS_RD real, intent(in), DIMENSION(:) :: PTS_WL_A real, intent(in), DIMENSION(:) :: PTS_WL_B real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PZ_LWCN real, intent(in), DIMENSION(:) :: PDN_RF real, intent(in), DIMENSION(:) :: PABS_SW_SN_RF real, intent(out), DIMENSION(:) :: PABS_LW_SN_RF real, intent(inout), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PABS_SW_SN_RD real, intent(out), DIMENSION(:) :: PABS_LW_SN_RD real, intent(out), DIMENSION(:) :: PRNSN_RF real, intent(out), DIMENSION(:) :: PHSN_RF real, intent(out), DIMENSION(:) :: PLESN_RF real, intent(out), DIMENSION(:) :: PGSN_RF real, intent(out), DIMENSION(:) :: PMELT_RF real, intent(out), DIMENSION(:) :: PRNSN_RD real, intent(out), DIMENSION(:) :: PHSN_RD real, intent(out), DIMENSION(:) :: PLESN_RD real, intent(out), DIMENSION(:) :: PGSN_RD real, intent(out), DIMENSION(:) :: PMELT_RD real, intent(in), DIMENSION(:) :: PLW_WA_TO_NR real, intent(in), DIMENSION(:) :: PLW_WB_TO_NR real, intent(in), DIMENSION(:) :: PLW_S_TO_NR real, intent(in), DIMENSION(:) :: PLW_WIN_TO_NR real, intent(out), DIMENSION(:) :: PDQS_SN_RF real, intent(out), DIMENSION(:) :: PDQS_SN_RD Contents Source Code URBAN_SNOW_EVOL Source Code SUBROUTINE URBAN_SNOW_EVOL ( T , B , PT_LWCN , PQ_LWCN , PU_LWCN , PTS_RF , PTS_RD , PTS_WL_A , & PTS_WL_B , PPS , PTA , PQA , PRHOA , PLW_RAD , PSR , PZREF , PUREF , & PVMOD , PTSTEP , PZ_LWCN , PDN_RF , PABS_SW_SN_RF , PABS_LW_SN_RF ,& PDN_RD , PABS_SW_SN_RD , PABS_LW_SN_RD , PRNSN_RF , PHSN_RF , & PLESN_RF , PGSN_RF , PMELT_RF , PRNSN_RD , PHSN_RD , PLESN_RD , & PGSN_RD , PMELT_RD , PLW_WA_TO_NR , PLW_WB_TO_NR , PLW_S_TO_NR , & PLW_WIN_TO_NR , PDQS_SN_RF , PDQS_SN_RD ) !   ########################################################################## ! !!****  *URBAN_SNOW_EVOL* !! !!    PURPOSE !!    ------- ! ! !!**  METHOD !     ------ ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t ! USE MODD_SNOW_PAR , ONLY : XZ0SN , XZ0HSN , & XANSMIN_ROOF , XANSMAX_ROOF , XANS_TODRY_ROOF , & XANS_T_ROOF , XRHOSMIN_ROOF , XRHOSMAX_ROOF , & XWCRN_ROOF , & XANSMIN_ROAD , XANSMAX_ROAD , XANS_TODRY_ROAD , & XANS_T_ROAD , XRHOSMIN_ROAD , XRHOSMAX_ROAD , & XWCRN_ROAD USE MODD_CSTS , ONLY : XSTEFAN ! USE MODE_SURF_SNOW_FRAC ! USE MODI_ROOF_IMPL_COEF USE MODI_SNOW_COVER_1LAYER ! USE MODD_SURF_PAR , ONLY : XUNDEF ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , DIMENSION (:), INTENT ( IN ) :: PT_LWCN ! LWCN air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PQ_LWCN ! LWCN air specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PU_LWCN ! LWCN hor. wind REAL , DIMENSION (:), INTENT ( IN ) :: PTS_RF ! roof surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_RD ! road surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WL_A ! wall surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WL_B ! wall surface temperature ! REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first ! atmospheric level (temperature) REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the first ! atmospheric level (wind) ! at first atmospheric level REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PZ_LWCN ! height of forcing ! REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RF ! snow-covered roof frac. REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_SN_RF ! SW absorbed by roof snow REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_SN_RF ! absorbed IR rad by snow on roof REAL , DIMENSION (:), INTENT ( INOUT ) :: PDN_RD ! snow-covered road frac. REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_SN_RD ! SW absorbed by road snow REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_SN_RD ! absorbed IR rad by snow on road ! REAL , DIMENSION (:), INTENT ( OUT ) :: PRNSN_RF ! net radiation over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PHSN_RF ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PLESN_RF ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PGSN_RF ! flux under the snow REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT_RF ! snow melt REAL , DIMENSION (:), INTENT ( OUT ) :: PRNSN_RD ! net radiation over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PHSN_RD ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PLESN_RD ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PGSN_RD ! flux under the snow REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT_RD ! snow melt ! REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_NR ! LW contrib. wall       -> road(snow) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_NR ! LW contrib. wall       -> road(snow) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_NR ! LW contrib. sky        -> road(snow) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_NR ! LW contrib. win       -> road(snow) REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_SN_RF ! Heat storage in snowpack on roofs REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_SN_RD ! Heat storage in snowpack on roads ! !*      0.2    declarations of local variables ! REAL , DIMENSION ( SIZE ( PTA )) :: ZLW1_RD ! independant from REAL , DIMENSION ( SIZE ( PTA )) :: ZLW1_RF ! surface temperature ! REAL , DIMENSION ( SIZE ( PTA )) :: ZLW2_RD ! to be multiplied by REAL , DIMENSION ( SIZE ( PTA )) :: ZLW2_RF ! 4th power of !                                         ! surface temperature REAL , DIMENSION ( SIZE ( PTA )) :: ZSR_RF ! snow fall on roof snow (kg/s/m2 of snow) REAL , DIMENSION ( SIZE ( PTA )) :: ZSR_RD ! snow fall on road snow (kg/s/m2 of snow) ! REAL , DIMENSION ( SIZE ( PTA )) :: ZT_SKY ! sky temperature REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_COEFA ! Coefficient A for implicit coupling !                                         ! of snow with the underlying surface REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_COEFB ! Coefficient B for implicit coupling !                                         ! of snow with the underlying surface ! ! flags to call to snow routines ! LOGICAL :: GSN_RF , GSN_RD ! ! loop counters ! INTEGER :: JL REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_SNOW_EVOL' , 0 , ZHOOK_HANDLE ) PRNSN_RF (:) = 0. PHSN_RF (:) = 0. PLESN_RF (:) = 0. PGSN_RF (:) = 0. PMELT_RF (:) = 0. PRNSN_RD (:) = 0. PHSN_RD (:) = 0. PLESN_RD (:) = 0. PGSN_RD (:) = 0. PMELT_RD (:) = 0. PABS_LW_SN_RF (:) = 0. PABS_LW_SN_RD (:) = 0. ! !------------------------------------------------------------------------------- ! GSN_RF = ANY ( PSR (:) > 0. . OR . T % TSNOW_ROOF % WSNOW (:, 1 ) > 0. ) GSN_RD = ANY ( PSR (:) > 0. . OR . T % TSNOW_ROAD % WSNOW (:, 1 ) > 0. ) ! !------------------------------------------------------------------------------- ! !*      5.     Snow mantel model !              ----------------- ! !*      5.1    roofs !              ----- ! IF ( GSN_RF ) THEN ! !* initializes LW radiative coefficients ! ZLW1_RF (:) = T % TSNOW_ROOF % EMIS (:) * PLW_RAD (:) ZLW2_RF (:) = - T % TSNOW_ROOF % EMIS (:) * XSTEFAN ! !* The global amount of snow on roofs is supposed located on a !  fraction of the roof surface. All computations are then !  done only for each m2 of snow, and not for each m2 of roof. ! DO JL = 1 , SIZE ( T % TSNOW_ROOF % WSNOW , 2 ) WHERE ( PDN_RF (:) > 0. ) T % TSNOW_ROOF % WSNOW (:, JL ) = T % TSNOW_ROOF % WSNOW (:, JL ) / PDN_RF (:) END DO ZSR_RF = 0. WHERE ( PDN_RF (:) > 0. ) ZSR_RF (:) = PSR (:) / PDN_RF (:) ! !* Estimates implicit coupling between snow and roof ! (strictly equal to an implicit formulation for 100% snow coverage) ! CALL ROOF_IMPL_COEF ( T , PTSTEP , ZTS_COEFA , ZTS_COEFB ) ! !* call to snow mantel scheme ! IF ( T % TSNOW_ROOF % SCHEME == '1-L' ) & CALL SNOW_COVER_1LAYER ( PTSTEP , XANSMIN_ROOF , XANSMAX_ROOF , XANS_TODRY_ROOF , & XRHOSMIN_ROOF , XRHOSMAX_ROOF , XANS_T_ROOF , . TRUE ., 0. , & XWCRN_ROOF , XZ0SN , XZ0HSN , T % TSNOW_ROOF , PTS_RF , & ZTS_COEFA , ZTS_COEFB , PABS_SW_SN_RF , ZLW1_RF , ZLW2_RF ,& PTA , PQA , PVMOD , PPS , PRHOA , ZSR_RF , PZREF , PUREF , & PRNSN_RF , PHSN_RF , PLESN_RF , PGSN_RF , PMELT_RF , & PDQS_SN_RF , PABS_LW_SN_RF ) ! ! !* The global amount of snow on roofs is reported to total roof surface. ! DO JL = 1 , SIZE ( T % TSNOW_ROOF % WSNOW , 2 ) T % TSNOW_ROOF % WSNOW (:, JL ) = T % TSNOW_ROOF % WSNOW (:, JL ) * PDN_RF (:) END DO ! END IF ! !*      5.2    roads !              ----- ! IF ( GSN_RD ) THEN ! ZT_SKY (:) = ( PLW_RAD (:) / XSTEFAN ) ** 0.25 ! ZLW1_RD (:) = PLW_S_TO_NR (:) * ( ZT_SKY (:) - T % TSNOW_ROAD % TS (:)) & + PLW_WA_TO_NR (:) * ( PTS_WL_A (:) - T % TSNOW_ROAD % TS (:)) & + PLW_WB_TO_NR (:) * ( PTS_WL_B (:) - T % TSNOW_ROAD % TS (:)) & + PLW_WIN_TO_NR (:) * ( B % XT_WIN1 (:) - T % TSNOW_ROAD % TS (:)) ZLW2_RD (:) = 0.0 ! !* The global amount of snow on roads is supposed located on a !  fraction of the road surface. All computations are then !  done only for each m2 of snow, and not for each m2 of road. ! DO JL = 1 , SIZE ( T % TSNOW_ROAD % WSNOW , 2 ) WHERE ( PDN_RD (:) > 0. ) T % TSNOW_ROAD % WSNOW (:, JL ) = T % TSNOW_ROAD % WSNOW (:, JL ) / PDN_RD (:) END DO ZSR_RD = 0. WHERE ( PDN_RD (:) > 0. ) ZSR_RD (:) = PSR (:) / PDN_RD (:) ! !* no implicit coupling necessary with road ! ZTS_COEFA = 0. ZTS_COEFB = PTS_RD ! !* call to snow mantel scheme ! IF ( T % TSNOW_ROAD % SCHEME == '1-L' ) & CALL SNOW_COVER_1LAYER ( PTSTEP , XANSMIN_ROAD , XANSMAX_ROAD , XANS_TODRY_ROAD , & XRHOSMIN_ROAD , XRHOSMAX_ROAD , XANS_T_ROAD , . FALSE ., & 0. , XWCRN_ROAD , XZ0SN , XZ0HSN , T % TSNOW_ROAD , PTS_RD , & ZTS_COEFA , ZTS_COEFB , PABS_SW_SN_RD , ZLW1_RD , ZLW2_RD ,& PT_LWCN , PQ_LWCN , PU_LWCN , PPS , PRHOA , ZSR_RD , PZ_LWCN ,& PZ_LWCN , PRNSN_RD , PHSN_RD , PLESN_RD , PGSN_RD , & PMELT_RD , PDQS_SN_RD , PABS_LW_SN_RD ) ! !* The global amount of snow on roads is reported to total road surface. ! DO JL = 1 , SIZE ( T % TSNOW_ROAD % WSNOW , 2 ) T % TSNOW_ROAD % WSNOW (:, JL ) = T % TSNOW_ROAD % WSNOW (:, JL ) * PDN_RD (:) END DO ! WHERE ( T % TSNOW_ROAD % T (:, 1 ) . EQ . XUNDEF ) PDN_RD (:) = 0.0 ! END IF IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_SNOW_EVOL' , 1 , ZHOOK_HANDLE ) ! ! !------------------------------------------------------------------------------- ! END SUBROUTINE URBAN_SNOW_EVOL","tags":"","loc":"proc/urban_snow_evol.html"},{"title":"FLXSURF3BX – Town Energy Balance (TEB) model API docs","text":"subroutine FLXSURF3BX(CMU, CTU, RIB, FTEMP, FVAP, ILMO, UE, FCOR, TA, QA, ZU, ZT, VA, TG, QG, H, Z0, Z0T, LZZ0, LZZ0T, fm, fh, N) Uses MODI_VSLOG PARKIND1 YOMHOOK Arguments Type Intent Optional Attributes Name real :: CMU (N) real :: CTU (N) real :: RIB (N) real :: FTEMP (N) real :: FVAP (N) real :: ILMO (N) real :: UE (N) real :: FCOR (N) real :: TA (N) real :: QA (N) real :: ZU (N) real :: ZT (N) real :: VA (N) real :: TG (N) real :: QG (N) real :: H (N) real :: Z0 (N) real :: Z0T (N) real :: LZZ0 (N) real :: LZZ0T (N) real :: fm (N) real :: fh (N) integer :: N Contents Source Code FLXSURF3BX Source Code SUBROUTINE FLXSURF3BX ( CMU , CTU , RIB , FTEMP , FVAP , ILMO , & & UE , FCOR , TA , QA , ZU , ZT , VA , & & TG , QG , H , Z0 , Z0T , & & LZZ0 , LZZ0T , FM , FH , N ) ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB !RJ: added modi, after freeform conversion USE MODI_VSLOG ! IMPLICIT NONE INTEGER :: N REAL :: CMU ( N ), CTU ( N ), RIB ( N ), FCOR ( N ), ILMO ( N ) REAL :: FTEMP ( N ), FVAP ( N ), TA ( N ), QA ( N ), ZU ( N ), ZT ( N ), VA ( N ) REAL :: TG ( N ), QG ( N ), H ( N ), Z0 ( N ), UE ( N ) REAL :: Z0T ( N ), LZZ0 ( N ), LZZ0T ( N ) REAL :: fm ( N ), fh ( N ) ! !Author !          Y.Delage (Jul 1990) !Revision ! 001      G. Pellerin (Jun 94) New function for unstable case ! 002      G. Pellerin (Jui 94) New formulation for stable case ! 003      B. Bilodeau (Nov 95) Replace VK by KARMAN ! 004      M. Desgagne (Dec 95) Add safety code in function ff !                               and ensures that RIB is non zero ! 005      R. Sarrazin (Jan 96) Correction for H ! 006      C. Girard (Nov 95) - Diffuse T instead of Tv ! 007      G. Pellerin (Feb 96) Revised calculation for H (stable) ! 008      G. Pellerin (Feb 96) Remove corrective terms to CTU ! 009      Y. Delage and B. Bilodeau (Jul 97) - Cleanup ! 010      Y. Delage (Feb 98) - Addition of HMIN ! 011      D. Talbot and Y. Delage (Jan 02) - !             Correct bug of zero divide by dg in loop 35 ! 012      Y. Delage (Oct 03) - Set top of surface layer at ZU +Z0 !                   - Output UE instead of UE**2 and rename subroutine !                   - Change iteration scheme for stable case !                   - Introduce log-linear profile for near-neutral stable cases !                   - set VAMIN inside flxsurf and initialise ILMO and H !                   - Put stability functions into local functions via stabfunc.h ! 013      Y. Delage (Sep 04) - Input of wind and temperature/humidity !                                at different levels ! 014      R. McTaggart-Cowan and B. Bilodeau (May 2006) - !             Clean up stabfunc.h ! 015      L. Spacek (Dec 07) - Correction of the log-linear profile !                               Double precision for rib calculations ! !Object !          to calculate surface layer transfer coefficients and fluxes ! !Arguments ! !          - Output - ! CMU      transfer coefficient of momentum times UE ! CTU      transfer coefficient of temperature times UE ! RIB      bulk Richardson number ! FTEMP    temperature flux ! FVAP     vapor flux ! ILMO     (1/length of Monin-Obukov) ! UE       friction velocity ! H        height of the boundary layer ! FM       momentum stability function ! FH       heat stability function ! LZZ0     log ((zu+z0)/z0) ! LZZ0T    log ((zt+z0)/z0t) ! !          - Input - ! FCOR     Coriolis factor ! ZU       height of wind input (measured from model base at topo height + Z0) ! ZT       height of temperature and humidity input ! TA       potential temperature at ZT ! QA       specific humidity at ZT ! VA       wind speed at ZU ! TG       surface temperature ! QG       specific humidity at the surface ! Z0       roughness length for momentum      flux calculations ! Z0T      roughness length for heat/moisture flux calculations ! N        horizontal dimension ! ! !RJ #include \"surfcon.h\" !RJ       LOGICAL :: INIT !     PHYSICAL CONSTANTS REAL , PARAMETER :: CPD = . 10054 6e+4 ! J K-1 kg-1    ! specific heat of dry air REAL , PARAMETER :: CPV = . 18694 6e+4 ! J K-1 kg-1    ! specific heat of water vapour REAL , PARAMETER :: RGASD = . 2870 5e+3 ! J K-1 kg-1    ! gas constant for dry air REAL , PARAMETER :: RGASV = . 4615 1e+3 ! J K-1 kg-1    ! gas constant for water vapour REAL , PARAMETER :: TRPL = . 2731 6e+3 ! K             ! triple point of water REAL , PARAMETER :: TCDK = . 2731 5e+3 !               ! conversion from kelvin to celsius REAL , PARAMETER :: RAUW = . 1e+4 !               ! density of liquid H2O REAL , PARAMETER :: EPS1 = . 62194800221014 !               ! RGASD/RGASV REAL , PARAMETER :: EPS2 = . 3780199778986 !               ! 1 - EPS1 REAL , PARAMETER :: DELTA = . 6077686814144 !               ! 1/EPS1 - 1 REAL , PARAMETER :: CAPPA = . 28549121795 !               ! RGASD/CPD REAL , PARAMETER :: TGL = . 2731 6e+3 ! K             ! ice temperature in the atmosphere REAL , PARAMETER :: CONSOL = . 136 7e+4 ! W m-2         ! solar constant REAL , PARAMETER :: GRAV = . 98061 6e+1 ! M s-2         ! gravitational acceleration REAL , PARAMETER :: RAYT = . 63712 2e+7 ! M             ! mean radius of the earth REAL , PARAMETER :: STEFAN = . 56694 8e-7 ! J m-2 s-1 K-4 ! Stefan-Boltzmann constant REAL , PARAMETER :: PI = . 31415926535 9e+1 !               ! PI constant = ACOS(-1) REAL , PARAMETER :: OMEGA = . 729 2e-4 ! s-1           ! angular speed of rotation of the earth REAL , PARAMETER :: KNAMS = . 514791 !               ! conversion from knots to m/s REAL , PARAMETER :: STLO = . 662848658394 3e-3 ! K s2 m-2      ! Schuman-Newell Lapse Rate REAL , PARAMETER :: KARMAN = . 35 !               ! Von Karman constant REAL , PARAMETER :: RIC = . 2 !               ! Critical Richardson number REAL , PARAMETER :: CHLC = . 250 1e+7 ! J kg-1        ! latent heat of condensation REAL , PARAMETER :: CHLF = . 33 4e+6 ! J kg-1        ! latent heat of fusion REAL , PARAMETER :: T1S = . 2731 6e+3 ! K             ! constant used to calculate L/Cp in fcn HTVOCP REAL , PARAMETER :: T2S = . 2581 6e+3 ! K             ! constant used to calculate L/Cp in fcn HTVOCP REAL , PARAMETER :: AW = . 313501282994 8e+4 !               ! constant used to calculate L/Cp in fcn HTVOCP REAL , PARAMETER :: BW = . 236707576631 6e+1 !               ! constant used to calculate L/Cp in fcn HTVOCP REAL , PARAMETER :: AI = . 286488771308 7e+4 !               ! constant used to calculate L/Cp in fcn HTVOCP REAL , PARAMETER :: BI = . 166093131502 !               ! constant used to calculate L/Cp in fcn HTVOCP REAL , PARAMETER :: SLP = . 666666666666 7e-1 !               ! constant used to calculate L/Cp in fcn HTVOCP !RJ #include \"consphy.h\" !     INITIALIZES THE CONSTANTS FOR THE COMMONS OF THE FLXSURF3 ROUTINE FROM !     CANADIAN METEOROLOGICAL CENTER REAL , PARAMETER :: AS = 1 2. REAL , PARAMETER :: ASX = 5. REAL , PARAMETER :: CI = 4 0. REAL , PARAMETER :: BS = 1.0 REAL , PARAMETER :: BETA = 1.0 REAL , PARAMETER :: FACTN = 1.2 REAL , PARAMETER :: HMIN = 3 0. REAL , PARAMETER :: ANGMAX = 0.85 REAL , PARAMETER :: RAC3 = SQRT ( 3. ) ! !* ! INTEGER , PARAMETER :: JDBL = 8 ! INTEGER :: J INTEGER :: IT INTEGER , PARAMETER :: ITMAX = 3 REAL , PARAMETER :: HMAX = 150 0.0 REAL , PARAMETER :: CORMIN = 0.7E-4 REAL , PARAMETER :: EPSLN = 1.0e-05 REAL , PARAMETER :: VAMIN = 0.1 REAL :: CM , CT , ZP REAL :: F , G , DG REAL :: hi , HE , HS , unsl REAL ( KIND = JDBL ) :: DTHV , TVA , TVS REAL :: HL , U REAL :: CS , XX , XX0 , YY , YY0 REAL :: ZB , DD , ILMOX REAL :: DF , ZZ , betsasx REAL :: aa , bb , cc REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! DF ( ZZ ) = ( 1 - ZZ * hi ) * sqrt ( 1 + 4 * AS * BETA * unsl * ZZ / ( 1 - ZZ * hi )) CS = AS * 2.5 betsasx = 1. / asx ! IF ( LHOOK ) CALL DR_HOOK ( 'FLXSURF3BX' , 0 , ZHOOK_HANDLE ) ! DO J = 1 , N LZZ0 ( J ) = 1 + ZU ( J ) / Z0 ( J ) LZZ0T ( J ) = ( ZT ( J ) + Z0 ( J )) / Z0T ( J ) ENDDO ! call vslog ( LZZ0T , LZZ0T , N ) call vslog ( LZZ0 , LZZ0 , N ) ! DO J = 1 , N ! !  CALCULATE THE RICHARDSON NUMBER ZP = ZU ( J ) ** 2 / ( ZT ( J ) + Z0 ( J ) - Z0T ( J )) u = max ( vamin , va ( j )) tva = ( 1.0_JDBL + DELTA * QA ( J )) * TA ( J ) tvs = ( 1.0_JDBL + DELTA * QG ( J )) * TG ( J ) dthv = tva - tvs RIB ( J ) = GRAV / ( tvs + 0.5_JDBL * dthv ) * ZP * dthv / ( u * u ) if ( rib ( j ) >= 0.0_JDBL ) rib ( j ) = max ( rib ( j ), EPSLN ) if ( rib ( j ) < 0.0_JDBL ) rib ( j ) = min ( rib ( j ), - EPSLN ) ! !  FIRST APPROXIMATION TO ILMO IF ( RIB ( J ) > 0.0_JDBL ) THEN FM ( J ) = LZZ0 ( J ) + CS * RIB ( J ) / max ( 2 * z0 ( j ), 1.0_JDBL ) FH ( J ) = BETA * ( LZZ0T ( J ) + CS * RIB ( J )) / & & max ( sqrt ( z0 ( j ) * z0t ( j )), 1.0_JDBL ) ILMO ( J ) = RIB ( J ) * FM ( J ) * FM ( J ) / ( ZP * FH ( J )) F = MAX ( ABS ( FCOR ( J )), CORMIN ) H ( J ) = BS * sqrt ( KARMAN * u / ( ILMO ( J ) * F * fm ( j ))) ELSE FM ( J ) = LZZ0 ( J ) - min ( 0.7_JDBL + log ( 1 - rib ( j )), LZZ0 ( J ) - 1 ) FH ( J ) = BETA * ( LZZ0T ( J ) - min ( 0.7_JDBL + log ( 1 - rib ( j )), LZZ0T ( J ) - 1 )) ILMO ( J ) = RIB ( J ) * FM ( J ) * FM ( J ) / ( ZP * FH ( J )) ENDIF ENDDO ! ! - - - - - - - - -  BEGINNING OF ITERATION LOOP - - - - - - - - - - - DO 35 IT = 1 , ITMAX DO 35 J = 1 , N u = max ( vamin , va ( j )) ZP = ZU ( J ) ** 2 / ( ZT ( J ) + Z0 ( J ) - Z0T ( J )) IF ( RIB ( J ) > 0.0_JDBL ) THEN !---------------------------------------------------------------------- !  STABLE CASE ILMO ( J ) = max ( EPSLN , ILMO ( J )) hl = ( ZU ( J ) + 10 * Z0 ( J )) * FACTN F = MAX ( ABS ( FCOR ( J )), CORMIN ) hs = BS * sqrt ( KARMAN * u / ( ILMO ( J ) * F * fm ( j ))) H ( J ) = MAX ( HMIN , hs , hl , factn / ( 4 * AS * BETA * ilmo ( j ))) hi = 1 / h ( j ) !CDIR IEXPAND fm ( J ) = LZZ0 ( J ) + psi ( ZU ( J ) + Z0 ( J ), hi , ilmo ( j )) - psi ( Z0 ( J ), hi , ilmo ( j )) !CDIR IEXPAND fh ( J ) = BETA * ( LZZ0T ( J ) + psi ( ZT ( J ) + Z0 ( J ), hi , ilmo ( j )) - psi ( Z0T ( J ), hi , & & ilmo ( j ))) unsl = ILMO ( J ) DG =- ZP * FH ( J ) / ( FM ( J ) * FM ( J )) * ( 1 + beta * ( DF ( ZT ( J ) + Z0 ( J )) - DF ( Z0T ( J ))) / & & ( 2 * FH ( J )) - ( DF ( ZU ( J ) + Z0 ( J )) - DF ( Z0 ( J ))) / FM ( J )) !---------------------------------------------------------------------- !  UNSTABLE CASE ELSE ILMO ( J ) = MIN ( 0. , ILMO ( J )) !CDIR IEXPAND FM ( J ) = fmi ( zu ( j ) + z0 ( j ), z0 ( j ), lzz0 ( j ), ilmo ( j ), xx , xx0 ) !CDIR IEXPAND FH ( J ) = fhi ( zt ( j ) + z0 ( j ), z0t ( j ), lzz0t ( j ), ilmo ( j ), yy , yy0 ) DG =- ZP * FH ( J ) / ( FM ( J ) * FM ( J )) * ( 1 + beta / FH ( J ) * ( 1 / YY - 1 / YY0 ) - 2 / FM ( J ) * & & ( 1 / XX - 1 / XX0 )) ENDIF !---------------------------------------------------------------------- IF ( IT < ITMAX ) THEN G = RIB ( J ) - FH ( J ) / ( FM ( J ) * FM ( J )) * ZP * ILMO ( J ) ILMO ( J ) = ILMO ( J ) - G / DG ENDIF 35 CONTINUE ! - - - - - -  - - - END OF ITERATION LOOP - - - - - - - - - - - - - - ! DO 80 J = 1 , N u = max ( vamin , va ( j )) if ( asx < as ) then !---------------------------------------------------------------------- !  CALCULATE ILMO AND STABILITY FUNCTIONS FROM LOG-LINEAR PROFILE !     (SOLUTION OF A QUADRATIC EQATION) ! zb = zu ( j ) / ( zt ( j ) + z0 ( j ) - z0t ( j )) !  DISCRIMINANT dd = ( beta * lzz0t ( j ) * zb ) ** 2 - 4 * rib ( j ) * asx * lzz0 ( j ) * & & ( beta * lzz0t ( j ) * zb - lzz0 ( j )) if ( rib ( j ) > 0.0_JDBL . and . rib ( j ) < betsasx . and . dd >= 0. ) then !  COEFFICIENTS aa = asx * asx * rib ( j ) - asx bb =- beta * lzz0t ( j ) * zb + 2 * rib ( j ) * asx * lzz0 ( j ) cc = rib ( j ) * lzz0 ( j ) ** 2 !  SOLUTION if ( bb >= 0 ) then ilmox = ( - bb - sqrt ( dd )) / ( 2 * zu ( j ) * aa ) else ilmox = 2 * cc / ( zu ( j ) * ( - bb + sqrt ( dd ))) endif if ( ilmox < ilmo ( j )) then ilmo ( j ) = ilmox fm ( j ) = lzz0 ( j ) + asx * zu ( j ) * ilmox fh ( j ) = beta * lzz0t ( j ) + asx * ( zt ( j ) + z0 ( j ) - z0t ( j )) * ilmox endif endif endif !---------------------------------------------------------------------- CM = KARMAN / FM ( J ) CT = KARMAN / FH ( J ) UE ( J ) = u * CM CMU ( J ) = CM * UE ( J ) CTU ( J ) = CT * UE ( J ) if ( rib ( j ) > 0.0_JDBL ) then !          stable case H ( J ) = MIN ( H ( J ), hmax ) else !          unstable case F = MAX ( ABS ( FCOR ( J )), CORMIN ) he = max ( HMIN , 0.3_JDBL * UE ( J ) / F ) H ( J ) = MIN ( he , hmax ) endif FTEMP ( J ) =- CTU ( J ) * ( TA ( J ) - TG ( J )) FVAP ( J ) =- CTU ( J ) * ( QA ( J ) - QG ( J )) 80 CONTINUE IF ( LHOOK ) CALL DR_HOOK ( 'FLXSURF3BX' , 1 , ZHOOK_HANDLE ) CONTAINS !RJ: inlining directly !RJ #include \"stabfunc2.h\" ! !   Internal function FMI !   Stability function for momentum in the unstable regime (ilmo<0) !   Reference: Delage Y. and Girard C. BLM 58 (19-31) Eq. 19 ! FUNCTION FMI ( Z2 , Z02 , LZZ02 , ILMO2 , X , X0 ) IMPLICIT NONE ! REAL :: FMI REAL , INTENT ( IN ) :: Z2 , Z02 , LZZ02 , ILMO2 REAL , INTENT ( OUT ) :: X , X0 ! X = ( 1 - CI * Z2 * BETA * ILMO2 ) ** ( 0.16666666 ) X0 = ( 1 - CI * Z02 * BETA * ILMO2 ) ** ( 0.16666666 ) FMI = LZZ02 + LOG (( X0 + 1 ) ** 2 * SQRT ( X0 ** 2 - X0 + 1 ) * ( X0 ** 2 + X0 + 1 ) ** 1.5 & & / (( X + 1 ) ** 2 * SQRT ( X ** 2 - X + 1 ) * ( X ** 2 + X + 1 ) ** 1.5 )) & & + RAC3 * ATAN ( RAC3 * (( X ** 2 - 1 ) * X0 - ( X0 ** 2 - 1 ) * X ) / & & (( X0 ** 2 - 1 ) * ( X ** 2 - 1 ) + 3 * X * X0 )) ! RETURN END FUNCTION FMI ! !   Internal function FHI !   Stability function for heat and moisture in the unstable regime (ilmo<0) !   Reference: Delage Y. and Girard C. BLM 58 (19-31) Eq. 17 ! FUNCTION FHI ( Z2 , Z0T2 , LZZ0T2 , ILMO2 , Y , Y0 ) IMPLICIT NONE ! REAL :: FHI REAL , INTENT ( IN ) :: Z2 , Z0T2 , LZZ0T2 , ILMO2 REAL , INTENT ( OUT ) :: Y , Y0 ! Y = ( 1 - CI * Z2 * BETA * ILMO2 ) ** ( 0.33333333 ) Y0 = ( 1 - CI * Z0T2 * BETA * ILMO2 ) ** ( 0.33333333 ) FHI = BETA * ( LZZ0T2 + 1.5 * LOG (( Y0 ** 2 + Y0 + 1 ) / ( Y ** 2 + Y + 1 )) + RAC3 * & & ATAN ( RAC3 * 2 * ( Y - Y0 ) / (( 2 * Y0 + 1 ) * ( 2 * Y + 1 ) + 3 ))) ! RETURN END FUNCTION FHI ! !   Internal function psi !   Stability function for momentum in the stable regime (unsl>0) !   Reference :  Y. Delage, BLM, 82 (p23-48) (Eqs.33-37) ! FUNCTION PSI ( Z2 , HI2 , ILMO2 ) IMPLICIT NONE ! REAL :: PSI REAL :: a , b , c , d REAL , INTENT ( IN ) :: ILMO2 , Z2 , HI2 ! d = 4 * AS * BETA * ILMO2 c = d * hi2 - hi2 ** 2 b = d - 2 * hi2 a = sqrt ( 1 + b * z2 - c * z2 ** 2 ) psi = 0.5 * ( a - z2 * hi2 - log ( 1 + b * z2 * 0.5 + a ) - & & b / ( 2 * sqrt ( c )) * asin (( b - 2 * c * z2 ) / d )) ! RETURN END FUNCTION PSI ! END SUBROUTINE FLXSURF3BX","tags":"","loc":"proc/flxsurf3bx.html"},{"title":"WINDOW_DATA – Town Energy Balance (TEB) model API docs","text":"subroutine WINDOW_DATA(KI, B) Uses YOMHOOK MODD_BEM_n PARKIND1 Arguments Type Intent Optional Attributes Name integer, intent(in) :: KI type(BEM_t), intent(inout) :: B Contents Source Code WINDOW_DATA Source Code SUBROUTINE WINDOW_DATA ( KI , B ) !     ############################################################# ! ! !!****  *WINDOW_DATA* !! !!    PURPOSE !!    ------- ! !     Computes the radiative properties of the window ! ! !!**  METHOD !!     ------ !! uses U_WIN (window conductivity) and SHGC (window solar heat gain coef) !! to compute the normal incident transmittance/reflectance !! a factor to normal incident tran/ref is applied to take into account all !! possible incidence between 18deg and 72deg !! !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! Simple Window Model from EnergyPlus Engineering Reference V7, 2012, p. 217. !! !!    AUTHOR !!    ------ !! !!      B. Bueno           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    11/10 !!      G. Pigeon & J. Le Bras  09/12 apply new factor to normal incident tran/ref !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_BEM_n , ONLY : BEM_t ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! INTEGER , INTENT ( IN ) :: KI ! number of points TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , DIMENSION ( KI ) :: ZR_IW ! interior film resistance under winter conditions REAL , DIMENSION ( KI ) :: ZR_OW ! exterior fild resistance uder winter conditions REAL , DIMENSION ( KI ) :: ZR_IS ! interior film resistance under summer conditions REAL , DIMENSION ( KI ) :: ZR_OS ! exterior fild resistance uder summer conditions REAL , DIMENSION ( KI ) :: ZFRAC ! inward flowing fraction REAL , DIMENSION ( KI ) :: ZTRAN_WIN_NORM ! Window transmittance for normal incident beam REAL , DIMENSION ( KI ) :: ZALB_WIN_NORM ! Window reflectance for normal incident beam REAL , DIMENSION ( KI ) :: ZFAC_TRAN ! transmittance factor of the window to the normal incidence REAL , DIMENSION ( KI ) :: ZFAC_ALB ! reflectance (albedo) factor of the window to normal incidence REAL ( KIND = JPRB ) :: ZHOOK_HANDLE REAL :: TA , RA , TBCD , RBCD , TD , RD , TE , RE , TFGHI , RFGHI , TFH , RFH , TJ , RJ ! !* initialization and determine transmittance and reflectance factor of the window !Curve AT temp Et        RA = R temp Et TA = 0.9237767331 ; RA = 1.6911265959 TBCD = 0.8802058937 ; RBCD = 1.5239470129 TD = 0.893430955 ; RD = 1.0888507586 TE = 0.8743096978 ; RE = 1.5494187256 TFH = 0.8424427652 ; RFH = 1.0983010317 TFGHI = 0.8327695761 ; RFGHI = 1.3316554732 TJ = 0.7889001341 ; RJ = 1.0837577691 WHERE ( B % XU_WIN <= 1.42 ) !from 3 building BLD, TOUR and MI-2005 !ZONE 1 WHERE ( B % XSHGC >= 0.45 ) ZFAC_TRAN = TE ZFAC_ALB = RE END WHERE !ZONE 2 WHERE ( B % XSHGC < 0.45 . AND . B % XSHGC > 0.35 ) ZFAC_TRAN = TJ + ( B % XSHGC - 0.35 ) * ( TE - TJ ) / ( 0.45 - 0.35 ) ZFAC_ALB = RJ + ( B % XSHGC - 0.35 ) * ( RE - RJ ) / ( 0.45 - 0.35 ) END WHERE !ZONE 3 WHERE ( B % XSHGC <= 0.35 ) ZFAC_TRAN = TJ ZFAC_ALB = RJ END WHERE END WHERE WHERE ( B % XU_WIN > 1.42 . AND . B % XU_WIN < 1.70 ) !ZONE 4 WHERE ( B % XSHGC >= 0.55 ) ZFAC_TRAN = TE ZFAC_ALB = RE END WHERE !ZONE 5 WHERE ( B % XSHGC > 0.5 . AND . B % XSHGC < 0.55 ) ZFAC_TRAN = TE + ( B % XU_WIN - 1.42 ) * (( TFGHI + ( B % XSHGC - 0.5 ) * ( TE - TFGHI ) / ( 0.55 - 0.50 )) - TE ) / ( 1.70 - 1.42 ) ZFAC_ALB = RE + ( B % XU_WIN - 1.42 ) * (( RFGHI + ( B % XSHGC - 0.5 ) * ( RE - RFGHI ) / ( 0.55 - 0.50 )) - RE ) / ( 1.70 - 1.42 ) END WHERE !ZONE 6 WHERE ( B % XSHGC >= 0.45 . AND . B % XSHGC <= 0.5 ) ZFAC_TRAN = TE + ( B % XU_WIN - 1.42 ) * ( TFGHI - TE ) / ( 1.70 - 1.42 ) ZFAC_ALB = RE + ( B % XU_WIN - 1.42 ) * ( RFGHI - RE ) / ( 1.70 - 1.42 ) END WHERE !ZONE 7 WHERE ( B % XSHGC > 0.35 . AND . B % XSHGC < 0.45 ) ZFAC_TRAN = ( TJ + ( B % XSHGC - 0.35 ) * ( TE - TJ ) / ( 0.45 - 0.35 )) + & ( B % XU_WIN - 1.42 ) * ( TFGHI - ( TJ + ( B % XSHGC - 0.35 ) * ( TE - TJ ) / ( 0.45 - 0.35 ))) / ( 1.70 - 1.42 ) ZFAC_ALB = ( RJ + ( B % XSHGC - 0.35 ) * ( RE - RJ ) / ( 0.45 - 0.35 )) + & ( B % XU_WIN - 1.42 ) * ( RFGHI - ( RJ + ( B % XSHGC - 0.35 ) * ( RE - RJ ) / ( 0.45 - 0.35 ))) / ( 1.70 - 1.42 ) END WHERE !ZONE 8 WHERE ( B % XSHGC >= 0.30 . AND . B % XSHGC <= 0.35 ) ZFAC_TRAN = TJ + ( B % XU_WIN - 1.42 ) * ( TFGHI - TJ ) / ( 1.70 - 1.42 ) ZFAC_ALB = RJ + ( B % XU_WIN - 1.42 ) * ( RFGHI - RJ ) / ( 1.70 - 1.42 ) END WHERE !ZONE 9 WHERE ( B % XSHGC > 0.25 . AND . B % XSHGC < 0.35 ) ZFAC_TRAN = TJ + ( B % XU_WIN - 1.42 ) * (( TFH + ( B % XSHGC - 0.25 ) * ( TJ - TFH ) / ( 0.30 - 0.25 )) - TJ ) / ( 1.70 - 1.42 ) ZFAC_ALB = RJ + ( B % XU_WIN - 1.42 ) * (( RFH + ( B % XSHGC - 0.25 ) * ( RJ - RFH ) / ( 0.30 - 0.25 )) - RJ ) / ( 1.70 - 1.42 ) END WHERE !ZONE 10 WHERE ( B % XSHGC <= 0.25 ) ZFAC_TRAN = TJ + ( B % XU_WIN - 1.42 ) * ( TFH - TJ ) / ( 1.70 - 1.42 ) ZFAC_ALB = RJ + ( B % XU_WIN - 1.42 ) * ( RFH - RJ ) / ( 1.70 - 1.42 ) END WHERE END WHERE WHERE ( B % XU_WIN >= 1.70 . AND . B % XU_WIN <= 3.41 ) !ZONE 11 WHERE ( B % XSHGC >= 0.55 ) ZFAC_TRAN = TE ZFAC_ALB = RE END WHERE !ZONE 12 WHERE ( B % XSHGC > 0.5 . AND . B % XSHGC < 0.55 ) ZFAC_TRAN = TFGHI + ( B % XSHGC - 0.50 ) * ( TE - TFGHI ) / ( 0.55 - 0.50 ) ZFAC_ALB = RFGHI + ( B % XSHGC - 0.50 ) * ( RE - RFGHI ) / ( 0.55 - 0.50 ) END WHERE !ZONE 13 WHERE ( B % XSHGC >= 0.30 . AND . B % XSHGC <= 0.50 ) ZFAC_TRAN = TFGHI ZFAC_ALB = RFGHI END WHERE !ZONE 14 WHERE ( B % XSHGC > 0.25 . AND . B % XSHGC < 0.30 ) ZFAC_TRAN = TFH + ( B % XSHGC - 0.25 ) * ( TFGHI - TFH ) / ( 0.30 - 0.25 ) ZFAC_ALB = RFGHI + ( B % XSHGC - 0.25 ) * ( RFGHI - RFH ) / ( 0.30 - 0.25 ) END WHERE !ZONE 15 WHERE ( B % XSHGC <= 0.25 ) ZFAC_TRAN = TFH ZFAC_ALB = RFH END WHERE END WHERE WHERE ( B % XU_WIN > 3.41 . AND . B % XU_WIN < 4.54 ) !ZONE 16 WHERE ( B % XSHGC >= 0.65 ) ZFAC_TRAN = TE + ( B % XU_WIN - 3.41 ) * ( TA - TE ) / ( 4.54 - 3.41 ) ZFAC_ALB = RE + ( B % XU_WIN - 3.41 ) * ( RA - RE ) / ( 4.54 - 3.41 ) END WHERE !ZONE 17 WHERE ( B % XSHGC > 0.60 . AND . B % XSHGC < 0.65 ) ZFAC_TRAN = TE + ( B % XU_WIN - 3.41 ) * (( TBCD + ( B % XSHGC - 0.60 ) * ( TA - TBCD ) / ( 0.65 - 0.60 )) - TE ) / ( 4.54 - 3.41 ) ZFAC_ALB = RE + ( B % XU_WIN - 3.41 ) * (( RBCD + ( B % XSHGC - 0.60 ) * ( RA - RBCD ) / ( 0.65 - 0.60 )) - RE ) / ( 4.54 - 3.41 ) END WHERE !ZONE 18 WHERE ( B % XSHGC >= 0.55 . AND . B % XSHGC <= 0.60 ) ZFAC_TRAN = TE + ( B % XU_WIN - 3.41 ) * ( TBCD - TE ) / ( 4.54 - 3.41 ) ZFAC_ALB = RE + ( B % XU_WIN - 3.41 ) * ( RBCD - RE ) / ( 4.54 - 3.41 ) END WHERE !ZONE 19 WHERE ( B % XSHGC > 0.50 . AND . B % XSHGC < 0.55 ) ZFAC_TRAN = ( TFGHI + ( B % XSHGC - 0.50 ) * ( TE - TFGHI ) / ( 0.55 - 0.50 )) + & ( B % XU_WIN - 3.41 ) * ( TBCD - ( TFGHI + ( B % XSHGC - 0.50 ) * ( TE - TFGHI ) / ( 0.55 - 0.50 ))) / ( 4.54 - 3.41 ) ZFAC_ALB = ( RFGHI + ( B % XSHGC - 0.50 ) * ( RE - RFGHI ) / ( 0.55 - 0.50 )) + & ( B % XU_WIN - 3.41 ) * ( RBCD - ( RFGHI + ( B % XSHGC - 0.50 ) * ( RE - RFGHI ) / ( 0.55 - 0.50 ))) / ( 4.54 - 3.41 ) END WHERE !ZONE 20 WHERE ( B % XSHGC >= 0.45 . AND . B % XSHGC <= 0.50 ) ZFAC_TRAN = TFGHI + ( B % XU_WIN - 3.41 ) * ( TBCD - TFGHI ) / ( 4.54 - 3.41 ) ZFAC_ALB = RFGHI + ( B % XU_WIN - 3.41 ) * ( RBCD - RFGHI ) / ( 4.54 - 3.41 ) END WHERE !ZONE 21 WHERE ( B % XSHGC > 0.30 . AND . B % XSHGC < 0.45 ) ZFAC_TRAN = TFGHI + ( B % XU_WIN - 3.41 ) * (( TA + ( B % XSHGC - 0.30 ) * ( TBCD - TA ) / ( 0.45 - 0.30 )) - TFGHI ) / ( 4.54 - 3.41 ) ZFAC_ALB = RFGHI + ( B % XU_WIN - 3.41 ) * (( RA + ( B % XSHGC - 0.30 ) * ( RBCD - RA ) / ( 0.45 - 0.30 )) - RFGHI ) / ( 4.54 - 3.41 ) END WHERE !ZONE 22 WHERE ( B % XSHGC > 0.25 . AND . B % XSHGC < 0.30 ) ZFAC_TRAN = ( TFH + ( B % XSHGC - 0.25 ) * ( TFGHI - TFH ) / ( 0.30 - 0.25 )) + & ( B % XU_WIN - 3.41 ) * ( TD - ( TFH + ( B % XSHGC - 0.30 ) * ( TFGHI - TFH ) / ( 0.30 - 0.25 ))) / ( 4.54 - 3.41 ) ZFAC_ALB = ( RFH + ( B % XSHGC - 0.25 ) * ( RFGHI - RFH ) / ( 0.30 - 0.25 )) + & ( B % XU_WIN - 3.41 ) * ( RD - ( RFH + ( B % XSHGC - 0.30 ) * ( RFGHI - RFH ) / ( 0.30 - 0.25 ))) / ( 4.54 - 3.41 ) END WHERE !ZONE 23 WHERE ( B % XSHGC <= 0.25 ) ZFAC_TRAN = TFH + ( B % XU_WIN - 3.41 ) * ( TD - TFH ) / ( 4.54 - 3.41 ) ZFAC_ALB = RFH + ( B % XU_WIN - 3.41 ) * ( RD - RFH ) / ( 4.54 - 3.41 ) END WHERE END WHERE WHERE ( B % XU_WIN >= 4.54 ) !ZONE 24 WHERE ( B % XSHGC >= 0.65 ) ZFAC_TRAN = TA ZFAC_ALB = RA END WHERE !ZONE 25 WHERE ( B % XSHGC >= 0.60 . AND . B % XSHGC <= 0.65 ) ZFAC_TRAN = TBCD + ( B % XSHGC - 0.60 ) * ( TA - TBCD ) / ( 0.65 - 0.60 ) ZFAC_ALB = RBCD + ( B % XSHGC - 0.60 ) * ( RA - RBCD ) / ( 0.65 - 0.60 ) END WHERE !ZONE 26 WHERE ( B % XSHGC >= 0.45 . AND . B % XSHGC <= 0.60 ) ZFAC_TRAN = TBCD ZFAC_ALB = RBCD END WHERE !ZONE 27 WHERE ( B % XSHGC >= 0.30 . AND . B % XSHGC <= 0.45 ) ZFAC_TRAN = TD + ( B % XSHGC - 0.30 ) * ( TBCD - TD ) / ( 0.45 - 0.30 ) ZFAC_ALB = RD + ( B % XSHGC - 0.30 ) * ( RBCD - RD ) / ( 0.45 - 0.30 ) END WHERE !ZONE 28 WHERE ( B % XSHGC <= 0.30 ) ZFAC_TRAN = TD ZFAC_ALB = RD END WHERE END WHERE !*      A.     Determine glass-to-glass U-factor !              --------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'WINDOW_DATA' , 0 , ZHOOK_HANDLE ) ! WHERE ( B % XU_WIN (:) < 5.85 ) ZR_IW (:) = 1. / ( 0.359073 * log ( B % XU_WIN (:)) + 6.949915 ) ELSEWHERE ZR_IW (:) = 1. / ( 1.788041 * B % XU_WIN (:) - 2.886625 ) END WHERE ! ZR_OW (:) = 1. / ( 0.025342 * B % XU_WIN (:) + 2 9.163853 ) ! B % XUGG_WIN (:) = 1. / ( 1. / B % XU_WIN (:) - ZR_IW (:) - ZR_OW (:)) ! !*      B.     Determine layer solar transmittance !              ----------------------------------- ! WHERE ( B % XU_WIN (:) > 4.5 ) WHERE ( B % XSHGC (:) < 0.7206 ) ZTRAN_WIN_NORM (:) = 0.939998 * B % XSHGC (:) ** 2 + 0.20332 * B % XSHGC (:) ELSE WHERE ZTRAN_WIN_NORM (:) = 1.30415 * B % XSHGC (:) - 0.30515 END WHERE END WHERE WHERE ( B % XU_WIN (:) < 3.4 ) WHERE ( B % XSHGC (:) <= 0.15 ) ZTRAN_WIN_NORM (:) = 0.41040 * B % XSHGC (:) ELSE WHERE ZTRAN_WIN_NORM (:) = 0.085775 * B % XSHGC (:) ** 2 + 0.963954 * B % XSHGC (:) - 0.084958 END WHERE END WHERE WHERE ( B % XU_WIN (:) >= 3.4 . AND . B % XU_WIN (:) <= 4.5 ) WHERE ( B % XSHGC (:) <= 0.15 ) ZTRAN_WIN_NORM (:) = 0.5 * ( 0.939998 * B % XSHGC (:) ** 2 + ( 0.20332 + 0.41040 ) * B % XSHGC (:)) ELSE WHERE WHERE ( B % XSHGC (:) > 0.15 . AND . B % XSHGC (:) < 0.7206 ) ZTRAN_WIN_NORM (:) = 0.5 * & (( 0.939998 + 0.085775 ) * B % XSHGC (:) ** 2 + ( 0.20332 + 0.963954 ) * B % XSHGC (:) - 0.084958 ) ELSE WHERE ZTRAN_WIN_NORM (:) = 0.5 * & ( 0.085775 * B % XSHGC (:) ** 2 + ( 0.963954 + 1.30415 ) * B % XSHGC (:) - ( 0.084958 + 0.30515 )) END WHERE END WHERE END WHERE ! ! !*      C.     Determine layer solar reflectance !              --------------------------------- ! WHERE ( B % XU_WIN (:) > 4.5 ) ZR_IS (:) = 1. / ( 2 9.436546 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) ** 3 & - 2 1.943415 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) ** 2 & + 9.945872 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) + 7.426151 ) ! ZR_OS (:) = 1. / ( 2.225824 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) + 2 0.57708 ) ELSE WHERE WHERE ( B % XU_WIN (:) >= 3.4 ) ZR_IS (:) = 0.5 * ( & 1. / ( 2 9.436546 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) ** 3 & - 2 1.943415 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) ** 2 & + 9.945872 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) + 7.426151 ) & + 1. / ( 19 9.8208128 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) ** 3 & - 9 0.639733 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) ** 2 & + 1 9.737055 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) + 6.766575 ) ) ! ZR_OS (:) = 0.5 * ( & 1. / ( 2.225824 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) + 2 0.57708 ) & + 1. / ( 5.763355 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) + 2 0.541528 ) ) ! ELSE WHERE ZR_IS (:) = 1. / ( 19 9.8208128 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) ** 3 & - 9 0.639733 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) ** 2 & + 1 9.737055 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) + 6.766575 ) ! ZR_OS (:) = 1. / ( 5.763355 * ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) + 2 0.541528 ) END WHERE ! END WHERE ! ZFRAC (:) = ( ZR_OS (:) + 0.5 * ( 1. / B % XUGG_WIN (:))) / & ( ZR_OS (:) + 1. / B % XUGG_WIN (:) + ZR_IS (:)) ! ZALB_WIN_NORM (:) = 1. - ZTRAN_WIN_NORM (:) - ( B % XSHGC (:) - ZTRAN_WIN_NORM (:)) / ZFRAC (:) ! !*      D.     Determine layer solar absortance !              -------------------------------- ! B % XTRAN_WIN (:) = ZTRAN_WIN_NORM (:) * ZFAC_TRAN B % XALB_WIN (:) = ZALB_WIN_NORM (:) * ZFAC_ALB ! B % XABS_WIN (:) = 1. - B % XALB_WIN (:) - B % XTRAN_WIN (:) ! IF ( LHOOK ) CALL DR_HOOK ( 'WINDOW_DATA' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE WINDOW_DATA","tags":"","loc":"proc/window_data.html"},{"title":"ROOF_IMPL_COEF – Town Energy Balance (TEB) model API docs","text":"subroutine ROOF_IMPL_COEF(T, PTSTEP, PTDEEP_A, PTDEEP_B) Uses MODI_LAYER_E_BUDGET_GET_COEF PARKIND1 YOMHOOK MODD_TEB_n Arguments Type Intent Optional Attributes Name type(TEB_t), intent(inout) :: T real, intent(in) :: PTSTEP real, intent(out), DIMENSION(:) :: PTDEEP_A real, intent(out), DIMENSION(:) :: PTDEEP_B Contents Source Code ROOF_IMPL_COEF Source Code SUBROUTINE ROOF_IMPL_COEF ( T , PTSTEP , PTDEEP_A , PTDEEP_B ) !   ############################################### ! !! !!    PURPOSE !!    ------- ! !     Computes the corfficients for implicitation of upper !     roof layer with what is above ! ! !!**  METHOD !     ------ ! !  One computes a guess assuming a zero flux condition at the base !  of the roof. One solves the half part of the tridiagonal matrix !  fromm bottom to top. ! !!     The classical tridiagonal algorithm is used to invert the !!     implicit operator (from bottom to top only). Its matrix is given by: !! !!     (  b(1)      c(1)      0        0        0         0        0        0  ) !!     (  a(2)      b(2)     c(2)      0  ...    0        0        0        0  ) !!     (   0        a(3)     b(3)     c(3)       0        0        0        0  ) !!      ....................................................................... !!     (   0   ...   0      a(k)      b(k)     c(k)       0   ...  0        0  ) !!      ....................................................................... !!     (   0         0        0        0        0 ...  a(n-1)   b(n-1)   c(n-1)) !!     (   0         0        0        0        0 ...     0      a(n)     b(n) ) !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    01/2013 !! !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_n , ONLY : TEB_t ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! USE MODI_LAYER_E_BUDGET_GET_COEF ! IMPLICIT NONE ! ! !*      0.1    Declarations of arguments ! TYPE ( TEB_t ), INTENT ( INOUT ) :: T ! REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( OUT ) :: PTDEEP_A , PTDEEP_B ! Deep soil temperature (prescribed) !                                      PTDEEP_A = Deep soil temperature !                                                 coefficient depending on flux !                                      PTDEEP_B = Deep soil temperature (prescribed) !                                               which models heating/cooling from !                                               below the diurnal wave penetration !                                               (surface temperature) depth. If it !                                               is FLAGGED as undefined, then the zero !                                               flux lower BC is applied. !                                      Tdeep = PTDEEP_B + PTDEEP_A * PDEEP_FLUX !                                              (with PDEEP_FLUX in W/m2) ! !*      0.2    Local variables ! REAL :: ZIMPL = 1.0 ! implicit coefficient INTEGER :: JK ! loop counter INTEGER :: ILAYER ! REAL , DIMENSION ( SIZE ( PTDEEP_A ), SIZE ( T % XT_ROOF , 2 )) :: ZA ,& ! lower diag. ZB ,& ! main  diag. ZC ,& ! upper diag. ZY ! r.h.s. REAL , DIMENSION ( SIZE ( PTDEEP_A )) :: ZDET ! work array REAL , DIMENSION ( SIZE ( PTDEEP_A ), SIZE ( T % XT_ROOF , 2 )) :: ZW ! work array REAL , DIMENSION ( SIZE ( PTDEEP_A ), SIZE ( T % XT_ROOF , 2 )) :: ZT ! guess of T ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'ROOF_IMPL_COEF' , 0 , ZHOOK_HANDLE ) ! !*      1.0    Coefficients of the tridioagonal matrix for heat conduction eq. !              --------------------------------------------------------------- ! ILAYER = SIZE ( T % XT_ROOF , 2 ) ! CALL LAYER_E_BUDGET_GET_COEF ( T % XT_ROOF , PTSTEP , ZIMPL , T % XHC_ROOF , T % XTC_ROOF , T % XD_ROOF , & ZA , ZB , ZC , ZY ) ! !------------------------------------------------------------------------------- ! !*      2.0    Solving of the equation from bottom to top !              ------------------------------------------ ! ! layer at bottom of roof ! ZDET (:) = ZB (:, ILAYER ) ! ZT (:, ILAYER ) = ZY (:, ILAYER ) / ZDET (:) ! ! internal layers & top layer (but without the external heat flux term) ! DO JK = ILAYER - 1 , 1 , - 1 ZW (:, JK ) = ZA (:, JK + 1 ) / ZDET (:) ZDET (:) = ZB (:, JK ) - ZC (:, JK ) * ZW (:, JK ) ZT (:, JK ) = ( ZY (:, JK ) - ZC (:, JK ) * ZT (:, JK + 1 ) ) / ZDET (:) ! + FLUX / ZDET !                                                          ! for layer 1 !                                                          ! because the external !                                                          ! flux would be !                                                          ! included in the Y !                                                          ! term END DO ! ! Implicit coefficients for the heat flux ! PTDEEP_B = ZT (:, 1 ) PTDEEP_A = 1. / ZDET (:) ! !* The following lines are here if you want to test the explicit coupling !PTDEEP_B = T%XT_ROOF(:,1) !PTDEEP_A = 0. !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'ROOF_IMPL_COEF' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END SUBROUTINE ROOF_IMPL_COEF","tags":"","loc":"proc/roof_impl_coef.html"},{"title":"TEB – Town Energy Balance (TEB) model API docs","text":"subroutine TEB(TOP, T, BOP, B, TIR, DMT, HIMPLICIT_WIND, PTSUN, PT_CANYON, PQ_CANYON, PU_CANYON, PT_LOWCAN, PQ_LOWCAN, PU_LOWCAN, PZ_LOWCAN, PPEW_A_COEF, PPEW_B_COEF, PPEW_A_COEF_LOWCAN, PPEW_B_COEF_LOWCAN, PPS, PPA, PEXNS, PEXNA, PTA, PQA, PRHOA, PLW_RAD, PRR, PSR, PZREF, PUREF, PVMOD, PH_TRAFFIC, PLE_TRAFFIC, PTSTEP, PDF_RF, PDN_RF, PDF_RD, PDN_RD, PQSAT_RF, PQSAT_RD, PDELT_RF, PDELT_RD, PTS_GARDEN, PLEW_RF, PUW_GR, PLEW_RD, PLE_WL_A, PLE_WL_B, PRNSN_RF, PHSN_RF, PLESN_RF, PGSN_RF, PMELT_RF, PRN_GR, PH_GR, PLE_GR, PGFLUX_GR, PDRAIN_GR, PRUNOFF_GR, PRNSN_RD, PHSN_RD, PLESN_RD, PGSN_RD, PMELT_RD, PUW_RD, PUW_RF, PDUWDU_RD, PDUWDU_RF, PUSTAR_TWN, PCD, PCDN, PCH_TWN, PRI_TWN, PRESA_TWN, PAC_RF, PAC_RD, PAC_WL, PAC_TOP, PAC_GARDEN, PAC_RF_WAT, PAC_RD_WAT, PLW_WA_TO_WB, PLW_WA_TO_R, PLW_WB_TO_R, PLW_WA_TO_NR, PLW_WB_TO_NR, PLW_R_TO_WA, PLW_R_TO_WB, PLW_G_TO_WA, PLW_G_TO_WB, PLW_S_TO_WA, PLW_S_TO_WB, PLW_S_TO_R, PLW_S_TO_NR, PLW_NR_TO_WA, PLW_NR_TO_WB, PLW_NR_TO_WIN, PLW_WA_TO_WIN, PLW_WB_TO_WIN, PLW_G_TO_WIN, PLW_R_TO_WIN, PLW_S_TO_WIN, PLW_WIN_TO_WA, PLW_WIN_TO_WB, PLW_WIN_TO_R, PLW_WIN_TO_NR, KDAY, PEMIT_LW_FAC, PEMIT_LW_RD, PT_RAD_IND, PHU_BLD, PTIME, PE_SHADING) Uses MODD_BEM_n MODD_DIAG_MISC_TEB_n MODE_THERMOS MODI_ROAD_LAYER_E_BUDGET MODI_SNOW_COVER_1LAYER MODI_URBAN_FLUXES MODI_ROOF_LAYER_E_BUDGET MODD_TEB_n MODI_URBAN_HYDRO MODI_FACADE_E_BUDGET MODD_TEB_OPTION_n MODE_SURF_SNOW_FRAC MODD_SNOW_PAR MODD_TEB_IRRIG_n MODI_BLD_E_BUDGET MODD_SURF_PAR MODI_URBAN_DRAG MODI_BEM MODD_TYPE_DATE_SURF YOMHOOK MODI_URBAN_SNOW_EVOL MODI_TEB_IRRIG MODD_BEM_OPTION_n MODD_CSTS MODI_WIND_THRESHOLD PARKIND1 Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_OPTIONS_t), intent(inout) :: BOP type(BEM_t), intent(inout) :: B type(TEB_IRRIG_t), intent(inout) :: TIR type(DIAG_MISC_TEB_t), intent(inout) :: DMT character(len=*), intent(in) :: HIMPLICIT_WIND real, intent(in), DIMENSION(:) :: PTSUN real, intent(inout), DIMENSION(:) :: PT_CANYON real, intent(inout), DIMENSION(:) :: PQ_CANYON real, intent(in), DIMENSION(:) :: PU_CANYON real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PU_LOWCAN real, intent(in), DIMENSION(:) :: PZ_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPEW_A_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_B_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PPA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PH_TRAFFIC real, intent(in), DIMENSION(:) :: PLE_TRAFFIC real, intent(in) :: PTSTEP real, intent(inout), DIMENSION(:) :: PDF_RF real, intent(inout), DIMENSION(:) :: PDN_RF real, intent(inout), DIMENSION(:) :: PDF_RD real, intent(inout), DIMENSION(:) :: PDN_RD real, intent(out), DIMENSION(:) :: PQSAT_RF real, intent(out), DIMENSION(:) :: PQSAT_RD real, intent(out), DIMENSION(:) :: PDELT_RF real, intent(out), DIMENSION(:) :: PDELT_RD real, intent(in), DIMENSION(:) :: PTS_GARDEN real, intent(out), DIMENSION(:) :: PLEW_RF real, intent(in), DIMENSION(:) :: PUW_GR real, intent(out), DIMENSION(:) :: PLEW_RD real, intent(out), DIMENSION(:) :: PLE_WL_A real, intent(out), DIMENSION(:) :: PLE_WL_B real, intent(out), DIMENSION(:) :: PRNSN_RF real, intent(out), DIMENSION(:) :: PHSN_RF real, intent(out), DIMENSION(:) :: PLESN_RF real, intent(out), DIMENSION(:) :: PGSN_RF real, intent(out), DIMENSION(:) :: PMELT_RF real, intent(in), DIMENSION(:) :: PRN_GR real, intent(in), DIMENSION(:) :: PH_GR real, intent(in), DIMENSION(:) :: PLE_GR real, intent(in), DIMENSION(:) :: PGFLUX_GR real, intent(in), DIMENSION(:) :: PDRAIN_GR real, intent(in), DIMENSION(:) :: PRUNOFF_GR real, intent(out), DIMENSION(:) :: PRNSN_RD real, intent(out), DIMENSION(:) :: PHSN_RD real, intent(out), DIMENSION(:) :: PLESN_RD real, intent(out), DIMENSION(:) :: PGSN_RD real, intent(out), DIMENSION(:) :: PMELT_RD real, intent(out), DIMENSION(:) :: PUW_RD real, intent(out), DIMENSION(:) :: PUW_RF real, intent(out), DIMENSION(:) :: PDUWDU_RD real, intent(out), DIMENSION(:) :: PDUWDU_RF real, intent(out), DIMENSION(:) :: PUSTAR_TWN real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN real, intent(out), DIMENSION(:) :: PCH_TWN real, intent(out), DIMENSION(:) :: PRI_TWN real, intent(out), DIMENSION(:) :: PRESA_TWN real, intent(out), DIMENSION(:) :: PAC_RF real, intent(inout), DIMENSION(:) :: PAC_RD real, intent(out), DIMENSION(:) :: PAC_WL real, intent(out), DIMENSION(:) :: PAC_TOP real, intent(in), DIMENSION(:) :: PAC_GARDEN real, intent(out), DIMENSION(:) :: PAC_RF_WAT real, intent(out), DIMENSION(:) :: PAC_RD_WAT real, intent(in), DIMENSION(:) :: PLW_WA_TO_WB real, intent(in), DIMENSION(:) :: PLW_WA_TO_R real, intent(in), DIMENSION(:) :: PLW_WB_TO_R real, intent(in), DIMENSION(:) :: PLW_WA_TO_NR real, intent(in), DIMENSION(:) :: PLW_WB_TO_NR real, intent(in), DIMENSION(:) :: PLW_R_TO_WA real, intent(in), DIMENSION(:) :: PLW_R_TO_WB real, intent(in), DIMENSION(:) :: PLW_G_TO_WA real, intent(in), DIMENSION(:) :: PLW_G_TO_WB real, intent(in), DIMENSION(:) :: PLW_S_TO_WA real, intent(in), DIMENSION(:) :: PLW_S_TO_WB real, intent(in), DIMENSION(:) :: PLW_S_TO_R real, intent(in), DIMENSION(:) :: PLW_S_TO_NR real, intent(in), DIMENSION(:) :: PLW_NR_TO_WA real, intent(in), DIMENSION(:) :: PLW_NR_TO_WB real, intent(in), DIMENSION(:) :: PLW_NR_TO_WIN real, intent(in), DIMENSION(:) :: PLW_WA_TO_WIN real, intent(in), DIMENSION(:) :: PLW_WB_TO_WIN real, intent(in), DIMENSION(:) :: PLW_G_TO_WIN real, intent(in), DIMENSION(:) :: PLW_R_TO_WIN real, intent(in), DIMENSION(:) :: PLW_S_TO_WIN real, intent(in), DIMENSION(:) :: PLW_WIN_TO_WA real, intent(in), DIMENSION(:) :: PLW_WIN_TO_WB real, intent(in), DIMENSION(:) :: PLW_WIN_TO_R real, intent(in), DIMENSION(:) :: PLW_WIN_TO_NR integer, intent(in) :: KDAY real, intent(out), DIMENSION(:) :: PEMIT_LW_FAC real, intent(out), DIMENSION(:) :: PEMIT_LW_RD real, intent(out), DIMENSION(:) :: PT_RAD_IND real, intent(out), DIMENSION(:) :: PHU_BLD real, intent(in) :: PTIME real, intent(in), DIMENSION(:) :: PE_SHADING Contents Source Code TEB Source Code SUBROUTINE TEB ( TOP , T , BOP , B , TIR , DMT , HIMPLICIT_WIND , PTSUN , & PT_CANYON , PQ_CANYON , PU_CANYON , PT_LOWCAN , PQ_LOWCAN , PU_LOWCAN , & PZ_LOWCAN , PPEW_A_COEF , PPEW_B_COEF , PPEW_A_COEF_LOWCAN , & PPEW_B_COEF_LOWCAN , PPS , PPA , PEXNS , PEXNA , PTA , PQA , PRHOA , & PLW_RAD , PRR , PSR , PZREF , PUREF , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , & PTSTEP , PDF_RF , PDN_RF , PDF_RD , PDN_RD , PQSAT_RF , PQSAT_RD , & PDELT_RF , PDELT_RD , PTS_GARDEN , PLEW_RF , PUW_GR , PLEW_RD , PLE_WL_A ,& PLE_WL_B , PRNSN_RF , PHSN_RF , PLESN_RF , PGSN_RF , PMELT_RF , PRN_GR , & PH_GR , PLE_GR , PGFLUX_GR , PDRAIN_GR , PRUNOFF_GR , PRNSN_RD , & PHSN_RD , PLESN_RD , PGSN_RD , PMELT_RD , PUW_RD , PUW_RF , PDUWDU_RD , & PDUWDU_RF , PUSTAR_TWN , PCD , PCDN , PCH_TWN , PRI_TWN , PRESA_TWN , & PAC_RF , PAC_RD , PAC_WL , PAC_TOP , PAC_GARDEN , PAC_RF_WAT , & PAC_RD_WAT , PLW_WA_TO_WB , PLW_WA_TO_R , PLW_WB_TO_R , PLW_WA_TO_NR , & PLW_WB_TO_NR , PLW_R_TO_WA , PLW_R_TO_WB , PLW_G_TO_WA , PLW_G_TO_WB , & PLW_S_TO_WA , PLW_S_TO_WB , PLW_S_TO_R , PLW_S_TO_NR , PLW_NR_TO_WA , & PLW_NR_TO_WB , PLW_NR_TO_WIN , PLW_WA_TO_WIN , PLW_WB_TO_WIN , & PLW_G_TO_WIN , PLW_R_TO_WIN , PLW_S_TO_WIN , PLW_WIN_TO_WA , & PLW_WIN_TO_WB , PLW_WIN_TO_R , PLW_WIN_TO_NR , KDAY , PEMIT_LW_FAC , & PEMIT_LW_RD , PT_RAD_IND , PHU_BLD , PTIME , PE_SHADING ) !   ########################################################################## ! !!****  *TEB* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of prognostic variables and the fluxes !     over artificial surfaces as towns, taking into account the canyon like !     geometry of urbanized areas. ! ! !!**  METHOD !     ------ ! !     The prognostic variables are: !       - the surface temperature for roofs, roads, and walls !       - the water reservoir, whose maximum value is 10mm ! ! !    1 : Warning about snow !        ****************** ! !     Except for snow mantel evolution, all other computation with snow !   variables must be performed with these variables at previous time-step, !   and NOT new time-step. This insure coherence between snow fractions !   (computed at the begining) and other snow characteristics (albedo, Ts). ! ! !    2 : computation of input solar radiation on each surface !        **************************************************** ! !      Those are now done in subroutine urban_solar_abs.F90 ! !    3 : drag coefficient for momentum !        ***************************** ! ! !    4 : aerodynamical resistance for heat transfers !        ******************************************* ! ! !    5 : equation for evolution of Ts_roof !        ********************************* ! ! !       Rn = (dir_Rg + sca_Rg) (1-a) + emis * ( Rat - sigma Ts**4 (t+dt) ) ! !       H  = rho Cp CH V ( Ts (t+dt) - Tas ) ! !       LE = rho Lv CH V ( qs (t+dt) - qas ) ! !      where the as subscript denotes atmospheric values at ground level !      (and not at first half level) ! ! !    6 : equations for evolution of Ts_road and Ts_wall simultaneously !        ************************************************************* ! ! ! !   Rn_w = abs_Rg_w !  - sigma * emis_w                                                   * Ts_w**4 (t+dt) !  +         emis_w                       *      SVF_w                * Rat !  + sigma * emis_w * emis_r              *      SVF_w                * Ts_r**4 (t+dt) !  + sigma * emis_w * emis_w              * (1-2*SVF_w)               * Ts_w**4 (t+dt) !  + sigma * emis_w * emis_w * (1-emis_r) *      SVF_w  * (1-  SVF_r) * Ts_w**4 (t+dt) !  + sigma * emis_w * emis_w * (1-emis_w) * (1-2*SVF_w) * (1-2*SVF_w) * Ts_w**4 (t+dt) !  + sigma * emis_w * emis_r * (1-emis_w) *      SVF_w  * (1-2*SVF_w) * Ts_r**4 (t+dt) ! !   Rn_r = abs_Rg_r !  - sigma * emis_r                                                   * Ts_r**4 (t+dt) !  +         emis_r                       *    SVF_r                  * Rat !  + sigma * emis_r * emis_w              * (1-SVF_r)                 * Ts_w**4 (t+dt) !  + sigma * emis_r * emis_w * (1-emis_w) * (1-SVF_r)   * (1-2*SVF_w) * Ts_w**4 (t+dt) !  + sigma * emis_r * emis_r * (1-emis_w) * (1-SVF_r)   *      SVF_w  * Ts_r**4 (t+dt) ! !  H_w  = rho Cp CH V ( Ts_w (t+dt) - Ta_canyon ) ! !  LE_w = rho Lv CH V ( qs_w (t+dt) - qa_canyon ) ! !  H_r  = rho Cp CH V ( Ts_r (t+dt) - Ta_canyon ) ! !  LE_r = rho Lv CH V ( qs_r (t+dt) - qa_canyon ) ! ! with again !                AC_can * Swall/Sroad * Twall + AC_can * Troad + AC_top * Ta + H_traffic/Cp/rho/Sroad !   Ta_canyon = ------------------------------------------------------------------------------------- !                AC_can * Swall/Sroad         + AC_can         + AC_top ! ! !                 AC_can * delt_road * Hu_road * qsat(Troad) + AC_top * qa + LE_traffic/Lv/rho/Sroad !   qa_canyon = ------------------------------------------------------------------------------------ !                 AC_can * delt_road                        + AC_top ! ! ! ! !    7 : computation of fluxes for each surface type !        ******************************************* ! ! !    8 : averaging of the fluxes !        *********************** ! !   This is done on the total exchange surface (roof + wall + road), !  which is bigger than the horizontal surface (roof+road), leading !  to bigger fluxes. ! !   The fluxes due to industrial activity are directly added into the !  atmosphere ! ! !    9 : road reservoir evolution !        ************************ ! !   The roof reservoir runoff goes directly into the road reservoir. ! !   Runoff occurs for road reservoir (too much water), as well as drainage !   (evacuation system, typical time scale: 1 day) ! ! !------------------------ !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !!     21 / 10 / 2003   P. Tulet    output aerodynamical resistance !!     01 / 07 / 2005   P.Le Moigne Exner functions as arguments to urban_fluxes !!     17 / 10 / 2005   (G. Pigeon) computation of anthropogenic heat from domestic heating !!          01 / 2012   V. Masson   Separates the 2 walls !!     25 / 09 / 2012   B. Decharme new wind implicitation !!          07 / 2013   V. Masson   Adds road watering !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !     ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t ! USE MODD_TYPE_DATE_SURF , ONLY : DATE_TIME USE MODD_CSTS , ONLY : XTT , XSTEFAN , XCPD , XLVTT USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_SNOW_PAR , ONLY : XEMISSN , XANSMAX_ROOF , & XANSMAX_ROAD , XWCRN_ROOF , XWCRN_ROAD ! USE MODE_THERMOS USE MODE_SURF_SNOW_FRAC ! USE MODI_SNOW_COVER_1LAYER USE MODI_URBAN_DRAG USE MODI_URBAN_SNOW_EVOL USE MODI_ROOF_LAYER_E_BUDGET USE MODI_ROAD_LAYER_E_BUDGET USE MODI_FACADE_E_BUDGET USE MODI_URBAN_FLUXES USE MODI_URBAN_HYDRO USE MODI_BLD_E_BUDGET USE MODI_WIND_THRESHOLD USE MODI_BEM USE MODI_TEB_IRRIG ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_OPTIONS_t ), INTENT ( INOUT ) :: BOP TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT ! CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option !                                                     ! 'OLD' = direct !                                                     ! 'NEW' = Taylor serie, order 1 REAL , DIMENSION (:), INTENT ( IN ) :: PTSUN ! solar time   (s from midnight) REAL , DIMENSION (:), INTENT ( INOUT ) :: PT_CANYON ! canyon air temperature REAL , DIMENSION (:), INTENT ( INOUT ) :: PQ_CANYON ! canyon air specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PU_CANYON ! canyon hor. wind REAL , DIMENSION (:), INTENT ( IN ) :: PU_LOWCAN ! wind near the road REAL , DIMENSION (:), INTENT ( IN ) :: PT_LOWCAN ! temp. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PQ_LOWCAN ! hum. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PZ_LOWCAN ! height of atm. var. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_A_COEF_LOWCAN ! implicit coefficients for wind coupling REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_B_COEF_LOWCAN ! between low canyon wind and road REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PPA ! pressure at the first atmospheric level REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PH_TRAFFIC ! anthropogenic sensible !                                                  ! heat fluxes due to traffic REAL , DIMENSION (:), INTENT ( IN ) :: PLE_TRAFFIC ! anthropogenic latent !                                                  ! heat fluxes due to traffic REAL , DIMENSION (:), INTENT ( IN ) :: PEXNA ! exner function ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:), INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first ! atmospheric level (temperature) REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the first ! atmospheric level (wind) REAL , INTENT ( IN ) :: PTSTEP ! time step ! REAL , DIMENSION (:), INTENT ( INOUT ) :: PDF_RF ! snow-free    fraction on roofs REAL , DIMENSION (:), INTENT ( INOUT ) :: PDN_RF ! snow-covered fraction on roofs REAL , DIMENSION (:), INTENT ( INOUT ) :: PDF_RD ! snow-free    fraction on roads REAL , DIMENSION (:), INTENT ( INOUT ) :: PDN_RD ! snow-covered fraction on roads REAL , DIMENSION (:), INTENT ( OUT ) :: PQSAT_RF ! hum at saturation over roof REAL , DIMENSION (:), INTENT ( OUT ) :: PQSAT_RD ! hum at saturation over road REAL , DIMENSION (:), INTENT ( OUT ) :: PDELT_RF ! water fraction on roof REAL , DIMENSION (:), INTENT ( OUT ) :: PDELT_RD ! water fraction on road ! REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GARDEN ! GARDEN area surf temp. ! greenroof REAL , DIMENSION (:), INTENT ( OUT ) :: PLEW_RF ! latent heat flux over roof (snow) REAL , DIMENSION (:), INTENT ( OUT ) :: PLEW_RD ! latent heat flux over road (snow) REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_WL_A ! latent heat flux over wall REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_WL_B ! latent heat flux over wall ! REAL , DIMENSION (:), INTENT ( IN ) :: PUW_GR ! Momentum flux for greenroofs ! REAL , DIMENSION (:), INTENT ( OUT ) :: PRNSN_RF ! net radiation over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PHSN_RF ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PLESN_RF ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PGSN_RF ! flux under the snow REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT_RF ! snow melt REAL , DIMENSION (:), INTENT ( OUT ) :: PRNSN_RD ! net radiation over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PHSN_RD ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PLESN_RD ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( OUT ) :: PGSN_RD ! flux under the snow REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT_RD ! snow melt ! REAL , DIMENSION (:), INTENT ( OUT ) :: PUW_RD ! Momentum flux for roads REAL , DIMENSION (:), INTENT ( OUT ) :: PUW_RF ! Momentum flux for roofs REAL , DIMENSION (:), INTENT ( OUT ) :: PDUWDU_RD ! REAL , DIMENSION (:), INTENT ( OUT ) :: PDUWDU_RF ! REAL , DIMENSION (:), INTENT ( OUT ) :: PUSTAR_TWN ! friciton velocity over town ! REAL , DIMENSION (:), INTENT ( IN ) :: PRN_GR ! net radiation over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PH_GR ! sensible heat flux over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PLE_GR ! latent heat flux over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PGFLUX_GR ! flux through the greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PRUNOFF_GR ! runoff over green roofs REAL , DIMENSION (:), INTENT ( IN ) :: PDRAIN_GR ! outlet drainage at base of green roofs ! REAL , DIMENSION (:), INTENT ( OUT ) :: PCD ! town averaged drag coefficient REAL , DIMENSION (:), INTENT ( OUT ) :: PCDN ! town averaged neutral drag coefficient REAL , DIMENSION (:), INTENT ( OUT ) :: PCH_TWN ! town averaged heat transfer !                                                 ! coefficient REAL , DIMENSION (:), INTENT ( OUT ) :: PRI_TWN ! town averaged Richardson number REAL , DIMENSION (:), INTENT ( OUT ) :: PRESA_TWN ! town aerodynamical resistance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_RF ! roof conductance REAL , DIMENSION (:), INTENT ( INOUT ) :: PAC_RD ! road conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_WL ! wall conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_TOP ! top conductance REAL , DIMENSION (:), INTENT ( IN ) :: PAC_GARDEN ! garden conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_RF_WAT ! roof water conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_RD_WAT ! roof water conductance ! REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_WB ! LW contrib. wall A (orB) -> wall B (or A) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_R ! LW contrib. wall       -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_R ! LW contrib. wall       -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_NR ! LW contrib. wall       -> road(snow) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_NR ! LW contrib. wall       -> road(snow) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WA ! LW contrib. road       -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WB ! LW contrib. road       -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WA ! LW contrib. GARDEN     -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WB ! LW contrib. GARDEN     -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WA ! LW contrib. road(snow) -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WB ! LW contrib. road(snow) -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WA ! LW contrib. sky        -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WB ! LW contrib. sky        -> wall REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_R ! LW contrib. sky        -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_NR ! LW contrib. sky        -> road(snow) ! ! new arguments after BEM ! INTEGER , INTENT ( IN ) :: KDAY ! Simulation day REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_WIN ! Radiative heat trasfer coeff wall-window ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_WIN ! Radiative heat trasfer coeff wall-window ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_G_TO_WIN ! Radiative heat trasfer coeff garden-window ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_R_TO_WIN ! Radiative heat trasfer coeff road-window ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_WIN ! Radiative heat trasfer coeff window-sky ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_WA ! Radiative heat trasfer coeff window-wall ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_WB ! Radiative heat trasfer coeff window-wall ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_R ! Radiative heat trasfer coeff window-road ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_NR_TO_WIN ! Radiative heat trasfer coeff road(snow)-win ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_NR ! Radiative heat trasfer coeff win-road(snow) ! [W K-1 m-2] !new argument for PET calculation REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_RD ! LW fluxes emitted by road (W/m2 surf road) REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_FAC ! LW fluxes emitted by wall (W/m2 surf wall) REAL , DIMENSION (:), INTENT ( OUT ) :: PT_RAD_IND ! Indoor mean radiant temperature [K] REAL , DIMENSION (:), INTENT ( OUT ) :: PHU_BLD ! Indoor relative humidity 0 < (-) < 1 REAL , INTENT ( IN ) :: PTIME ! current time since midnight (UTC, s) REAL , DIMENSION (:), INTENT ( IN ) :: PE_SHADING !energy not ref., nor absorbed, nor !trans. by glazing [Wm-2(win)] ! !*      0.2    Declarations of local variables ! REAL , DIMENSION ( SIZE ( PTA )) :: ZVMOD ! wind REAL , DIMENSION ( SIZE ( PTA )) :: ZWS_RF_MAX ! maximum deepness of roof REAL , DIMENSION ( SIZE ( PTA )) :: ZWS_RD_MAX ! and road water reservoirs ! REAL , DIMENSION ( SIZE ( PTA )) :: ZAC_BLD ! surface conductance inside the building itself in DEF building model REAL , DIMENSION ( SIZE ( PTA )) :: ZTA ! air temperature extrapolated at roof level REAL , DIMENSION ( SIZE ( PTA )) :: ZQA ! air humidity extrapolated at roof level ! REAL , DIMENSION ( SIZE ( PTA )) :: ZDQS_RD ! heat storage inside road REAL , DIMENSION ( SIZE ( PTA )) :: ZDQS_RF ! heat storage inside roof REAL , DIMENSION ( SIZE ( PTA )) :: ZDQS_WL_A ! heat storage inside wall REAL , DIMENSION ( SIZE ( PTA )) :: ZDQS_WL_B ! heat storage inside wall REAL , DIMENSION ( SIZE ( PTA )) :: ZFLX_BLD_RF !heat flux from inside through roof REAL , DIMENSION ( SIZE ( PTA )) :: ZFLX_BLD_WL_A !heat flux from inside through wall REAL , DIMENSION ( SIZE ( PTA )) :: ZFLX_BLD_WL_B !heat flux from inside through wall REAL , DIMENSION ( SIZE ( PTA )) :: ZFLX_BLD_FL !heat flux from inside through floor REAL , DIMENSION ( SIZE ( PTA )) :: ZFLX_BLD_MA !heat flux from inside through mass ! REAL , DIMENSION ( SIZE ( PTA )) :: ZDQS_SN_RF ! heat storage inside roof snowpack REAL , DIMENSION ( SIZE ( PTA )) :: ZDQS_SN_RD ! heat storage inside road snowpack REAL , DIMENSION ( SIZE ( PTA )) :: ZMELT_BLT ! Snow melt for built & impervious part ! ! coefficients for LW computations over snow (from previous time-step) ! REAL , DIMENSION ( SIZE ( PTA )) :: ZTSSN_RD ! road snow temperature !                                          ! at previous time-step ! new local variables after BEM ! REAL , DIMENSION ( SIZE ( PTA )) :: ZIMB_RF ! residual energy imbalance ! of the roof for ! verification REAL , DIMENSION ( SIZE ( PTA )) :: ZIMB_RD ! road residual energy imbalance ! for verification [W m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZIMB_WL ! wall residual energy imbalance ! for verification [W m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_RD ! road surface temperature !                                            ! at previous time-step REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_WL_A ! wall A surface temperature !                                            ! at previous time-step REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_WL_B ! wall B surface temperature !                                            ! at previous time-step REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_WL ! averaged wall surface temperature !                                            ! at previous time-step REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_RF ! roof surface temperature !                                            ! at previous time-step REAL , DIMENSION ( SIZE ( PTA ), SIZE ( T % XT_WALL_A , 2 )) :: ZT_WL ! averaged wall surface temperature ! INTEGER :: IWL , IRF ! number of wall, roof layer REAL , DIMENSION ( SIZE ( PTA )) :: ZRADHT_IN ! Indoor radiant heat transfer coefficient ! [W K-1 m-2] REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_FL ! floor surface temperature [K] REAL , DIMENSION ( SIZE ( PTA )) :: ZRAD_RF_WL ! rad. flux from roof to averaged wall [W m-2(roof)] REAL , DIMENSION ( SIZE ( PTA )) :: ZRAD_RF_WIN ! rad. flux from roof to window [W m-2(roof)] REAL , DIMENSION ( SIZE ( PTA )) :: ZRAD_RF_FL ! rad. flux from roof to floor [W m-2(roof)] REAL , DIMENSION ( SIZE ( PTA )) :: ZRAD_RF_MA ! rad. flux from roof to mass [W m-2(roof)] REAL , DIMENSION ( SIZE ( PTA )) :: ZCONV_RF_BLD ! rad. flux from roof to bld [W m-2(roof)] REAL , DIMENSION ( SIZE ( PTA )) :: ZRAD_WL_FL ! rad. flux from averaged wall to floor [W m-2(wall)] REAL , DIMENSION ( SIZE ( PTA )) :: ZRAD_WL_MA ! rad. flux from averaged wall to mass [W m-2(wall)] REAL , DIMENSION ( SIZE ( PTA )) :: ZRAD_WIN_FL ! rad. flux from averaged wall to floor [W m-2(win)] REAL , DIMENSION ( SIZE ( PTA )) :: ZRAD_WIN_MA ! rad. flux from averaged wall to mass [W m-2(win)] REAL , DIMENSION ( SIZE ( PTA )) :: ZCONV_WL_BLD ! rad. flux from roof to bld [W m-2(wall)] REAL , DIMENSION ( SIZE ( PTA )) :: ZCONV_WIN_BLD ! rad. flux from roof to bld [W m-2(win)] REAL , DIMENSION ( SIZE ( PTA )) :: ZAC_WIN ! window aerodynamic conductance REAL , DIMENSION ( SIZE ( PTA )) :: ZLOAD_IN_RF ! indoor load on roof W/m2[roof] REAL , DIMENSION ( SIZE ( PTA )) :: ZLOAD_IN_FL ! indoor load on floor W/m2[floor] REAL , DIMENSION ( SIZE ( PTA )) :: ZLOAD_IN_WL ! indoor load on wall W/m2[wall] REAL , DIMENSION ( SIZE ( PTA )) :: ZLOAD_IN_WIN ! indoor load on win W/m2[win] REAL , DIMENSION ( SIZE ( PTA )) :: ZLOAD_IN_MA ! indoor load on mass W/m2[mass] ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'TEB' , 0 , ZHOOK_HANDLE ) ! !*      1.     Initializations !              --------------- ! !*      1.1    Water reservoirs !              ---------------- ! ZWS_RF_MAX = 1. ! (1mm) maximum deepness of roof water reservoir ZWS_RD_MAX = 1. ! (1mm) maximum deepness of road water reservoir ! !*      1.2    radiative snow variables at previous time-step !              ---------------------------------------------- ! ZTSSN_RD (:) = T % TSNOW_ROAD % TS (:) ! ! !*      1.3    indoor aerodynamique conductance for DEF case !              ---------------------------------------------- ! ZAC_BLD (:) = XUNDEF IF ( TOP % CBEM == 'DEF' ) ZAC_BLD = 1. / 0.123 / ( XCPD * PRHOA (:)) !* (normalized by rho Cp for convenience) !------------------------------------------------------------------------------- ! !*      1.3    number of roof/wall layer !              ------------------------- ! IWL = SIZE ( T % XT_WALL_A , 2 ) IRF = SIZE ( T % XT_ROOF , 2 ) ! ZTS_WL_A (:) = T % XT_WALL_A (:, 1 ) ZTS_WL_B (:) = T % XT_WALL_B (:, 1 ) ZTS_WL (:) = 0.5 * ( ZTS_WL_A (:) + ZTS_WL_B (:)) ZTS_RD (:) = T % XT_ROAD (:, 1 ) ZTS_RF (:) = T % XT_ROOF (:, 1 ) ! ! !*      1.4    load on indoor walls !              ------------------------- ! IF ( TOP % CBEM == 'BEM' ) THEN ! ZLOAD_IN_RF = B % XF_FLOOR_WIN * DMT % XTR_SW_WIN + DMT % XQIN * B % XN_FLOOR * ( 1 - B % XQIN_FLAT ) * B % XQIN_FRAD & / ( 2 + T % XWALL_O_BLD + B % XGLAZ_O_BLD + B % XMASS_O_BLD ) ! W/mnow-covered surfaces relative effects !              -------------------------------------- ! !*      2.1    Effects on water reservoirs !              --------------------------- ! ZWS_RF_MAX (:) = ZWS_RF_MAX (:) * PDF_RF (:) ZWS_RD_MAX (:) = ZWS_RD_MAX (:) * PDF_RD (:) ! !------------------------------------------------------------------------------- ! !*      3.     Surface drag !              ------------ ! CALL URBAN_DRAG ( TOP , T , B , HIMPLICIT_WIND , PTSTEP , PT_CANYON , PQ_CANYON , & PU_CANYON , PT_LOWCAN , PQ_LOWCAN , PU_LOWCAN , PZ_LOWCAN , & ZTS_RF , ZTS_RD , ZTS_WL , PTS_GARDEN , PDN_RF , PDN_RD , & PEXNS , PEXNA , PTA , PQA , PPS , PRHOA , PZREF , PUREF , & PVMOD , ZWS_RF_MAX , ZWS_RD_MAX , PPEW_A_COEF , & PPEW_B_COEF , PPEW_A_COEF_LOWCAN , PPEW_B_COEF_LOWCAN , & PQSAT_RF , PQSAT_RD , PDELT_RF , PDELT_RD , PCD , PCDN , & PAC_RF , PAC_RF_WAT , PAC_WL , PAC_RD , PAC_RD_WAT , & PAC_TOP , PAC_GARDEN , PRI_TWN , PUW_RD , PUW_RF , & PDUWDU_RD , PDUWDU_RF , PUSTAR_TWN , ZAC_WIN ) ! !* area-averaged heat transfer coefficient ! ZVMOD (:) = WIND_THRESHOLD ( PVMOD (:), PUREF (:)) ! PCH_TWN (:) = ( T % XBLD (:) * PAC_RF (:) + ( 1. - T % XBLD (:)) * PAC_TOP (:)) / ZVMOD (:) ! !* aggregation of momentum fluxes for roofs (=> derivate of flux also recalculated) ! PUW_RF (:) = ( 1 - T % XGREENROOF (:)) * PUW_RF (:) + T % XGREENROOF (:) * PUW_GR (:) WHERE ( PVMOD (:) /= 0. ) PDUWDU_RF (:) = 2. * PUW_RF (:) / PVMOD (:) ! !------------------------------------------------------------------------------- ! !*      4.     Extrapolation of atmospheric T and q at roof level (for fluxes computation) !              -------------------------------------------------- ! ZTA (:) = PTA (:) * PEXNS (:) / PEXNA (:) ZQA (:) = PQA (:) * QSAT ( PTA (:), PPS (:)) / QSAT ( ZTA (:), PPA (:)) ! !------------------------------------------------------------------------------- ! !*      5.     Snow mantel model !              ----------------- ! CALL URBAN_SNOW_EVOL ( T , B , PT_LOWCAN , PQ_LOWCAN , PU_LOWCAN , ZTS_RF , ZTS_RD , ZTS_WL_A , & ZTS_WL_B , PPS , ZTA , ZQA , PRHOA , PLW_RAD , PSR , PZREF , PUREF , PVMOD , & PTSTEP , PZ_LOWCAN , PDN_RF , DMT % XABS_SW_SNOW_ROOF , & DMT % XABS_LW_SNOW_ROOF , PDN_RD , DMT % XABS_SW_SNOW_ROAD , & DMT % XABS_LW_SNOW_ROAD , PRNSN_RF , PHSN_RF , PLESN_RF , PGSN_RF , & PMELT_RF , PRNSN_RD , PHSN_RD , PLESN_RD , PGSN_RD , PMELT_RD , & PLW_WA_TO_NR , PLW_WB_TO_NR , PLW_S_TO_NR , PLW_WIN_TO_NR , ZDQS_SN_RF , & ZDQS_SN_RD ) ! !------------------------------------------------------------------------------- ! !*      6.    LW properties !              ------------- ! PDF_RD (:) = 1. - PDN_RD (:) ! !------------------------------------------------------------------------------- ! !*      7.    Indoor radiative temperature !              --------------------------- ! ! uses the averaged temperature of both walls for the building energy balance ZT_WL (:,:) = 0.5 * ( T % XT_WALL_A (:,:) + T % XT_WALL_B (:,:)) ! SELECT CASE ( TOP % CBEM ) CASE ( \"DEF\" ) ZTS_FL (:) = 1 9. + XTT PT_RAD_IND (:) = ( T % XWALL_O_HOR (:) / T % XBLD (:) * ZT_WL (:, IWL ) + & T % XT_ROOF (:, IRF ) + ZTS_FL (:) ) / ( T % XWALL_O_HOR (:) / T % XBLD (:) + 1. + 1. ) ZRADHT_IN (:) = XUNDEF CASE ( \"BEM\" ) ZTS_FL (:) = B % XT_FLOOR (:, 1 ) PT_RAD_IND (:) = ( B % XT_MASS (:, 1 ) * B % XMASS_O_BLD (:) + ZT_WL (:, IWL ) * T % XWALL_O_BLD (:) & + ZTS_FL (:) + T % XT_ROOF (:, IRF ) + B % XT_WIN2 (:) * B % XGLAZ_O_BLD (:)) & / ( B % XMASS_O_BLD (:) + T % XWALL_O_BLD (:) + 1. + 1. + B % XGLAZ_O_BLD (:)) !             Assuming indoor surface emissivities of 0.9 ZRADHT_IN (:) = 0.9 * 0.9 * 4 * XSTEFAN * PT_RAD_IND (:) ** 3 END SELECT ! ! !*      7.    Roof Ts computation !              ------------------- ! !* ts_roof and qsat_roof are updated ! CALL ROOF_LAYER_E_BUDGET ( TOP , T , B , PQSAT_RF , ZAC_BLD , PTSTEP , PDN_RF , PRHOA , & PAC_RF , PAC_RF_WAT , PLW_RAD , PPS , PDELT_RF , ZTA , ZQA , & PEXNA , PEXNS , DMT % XABS_SW_ROOF , PGSN_RF , ZFLX_BLD_RF , & ZDQS_RF , DMT % XABS_LW_ROOF , DMT % XH_ROOF , PLEW_RF , ZIMB_RF , & DMT % XG_GREENROOF_ROOF , ZRADHT_IN , ZTS_FL , ZT_WL (:, IWL ),& ZRAD_RF_WL , ZRAD_RF_WIN , ZRAD_RF_FL , ZRAD_RF_MA , ZCONV_RF_BLD , & PRR , & !modif to add heating/cooling of rain ZLOAD_IN_RF ) ! !------------------------------------------------------------------------------- ! !*      8.    Road Ts computations !              ----------------------------- ! !* Road watering CALL TEB_IRRIG ( TIR % LPAR_RD_IRRIG , PTSTEP , TOP % TTIME % TDATE % MONTH , PTSUN , & TIR % XRD_START_MONTH , TIR % XRD_END_MONTH , TIR % XRD_START_HOUR , & TIR % XRD_END_HOUR , TIR % XRD_24H_IRRIG , DMT % XIRRIG_ROAD ) !* ts_road, ts_wall, qsat_road, t_canyon and q_canyon are updated ! CALL ROAD_LAYER_E_BUDGET ( T , B , PTSTEP , PDN_RD , PRHOA , PAC_RD , PAC_RD_WAT , & PLW_RAD , PPS , PQSAT_RD , PDELT_RD , PEXNS , & DMT % XABS_SW_ROAD , PGSN_RD , PQ_LOWCAN , PT_LOWCAN ,& ZTS_WL_A , ZTS_WL_B , ZTSSN_RD , PTS_GARDEN , & PLW_WA_TO_R , PLW_WB_TO_R , PLW_S_TO_R , & PLW_WIN_TO_R , PEMIT_LW_RD , ZDQS_RD , DMT % XABS_LW_ROAD , & DMT % XH_ROAD , PLEW_RD , ZIMB_RD , PRR + DMT % XIRRIG_ROAD ) ! !------------------------------------------------------------------------------- ! !*      8.     Wall Ts computations !              ----------------------------- ! CALL FACADE_E_BUDGET ( TOP , T , B , DMT , PTSTEP , PDN_RD , PRHOA , PAC_WL , ZAC_BLD , & PLW_RAD , PPS , PEXNS , PT_CANYON , ZTS_RD , ZTSSN_RD , PTS_GARDEN , & ZTS_FL , PLW_WA_TO_WB , PLW_R_TO_WA , PLW_R_TO_WB , & PLW_G_TO_WA , PLW_G_TO_WB , PLW_S_TO_WA , PLW_S_TO_WB , & PLW_NR_TO_WA , PLW_NR_TO_WB , PLW_WIN_TO_WA , & PLW_WIN_TO_WB , PLW_S_TO_WIN , PLW_WA_TO_WIN , & PLW_WB_TO_WIN , PLW_R_TO_WIN , PLW_G_TO_WIN , & PLW_NR_TO_WIN , ZFLX_BLD_WL_A , ZDQS_WL_A , & ZFLX_BLD_WL_B , ZDQS_WL_B , PEMIT_LW_FAC , ZIMB_WL , & ZRADHT_IN , ZRAD_RF_WL , ZRAD_RF_WIN , ZRAD_WL_FL , & ZRAD_WL_MA , ZRAD_WIN_FL , ZRAD_WIN_MA , ZCONV_WL_BLD , & ZCONV_WIN_BLD , ZAC_WIN , ZLOAD_IN_WL , ZLOAD_IN_WIN ) ! !------------------------------------------------------------------------------- ! !*      9.     Evolution of interior building air temperature !              ---------------------------------------------- ! ! uses the averaged temperature of both walls for the building energy balance ZT_WL (:,:) = 0.5 * ( T % XT_WALL_A (:,:) + T % XT_WALL_B (:,:)) ! SELECT CASE ( TOP % CBEM ) CASE ( \"DEF\" ) ! CALL BLD_E_BUDGET (. TRUE ., PTSTEP , T % XBLD , T % XWALL_O_HOR , & PRHOA , T % XT_ROOF , ZT_WL , B % XTI_BLD , ZTS_FL (:) ) !variables that needs to be computed apart B % XQI_BLD = 0.5 * QSAT ( B % XTI_BLD , PPS ) !variables that need to be set 0 for calculation ZFLX_BLD_FL (:) = 0. ZFLX_BLD_MA (:) = 0. !other variables PHU_BLD (:) = XUNDEF CASE ( \"BEM\" ) CALL BEM ( BOP , T , B , DMT , PTSTEP , PTSUN , KDAY , PPS , PRHOA , PT_CANYON , & PQ_CANYON , PU_CANYON , PHU_BLD , PT_RAD_IND , ZFLX_BLD_FL ,& ZFLX_BLD_MA , ZRADHT_IN , ZRAD_RF_MA , ZRAD_RF_FL , & ZRAD_WL_MA , ZRAD_WL_FL , ZRAD_WIN_MA , ZRAD_WIN_FL , & ZCONV_RF_BLD , ZCONV_WL_BLD , ZCONV_WIN_BLD , ZLOAD_IN_FL ,& ZLOAD_IN_MA ) DMT % XH_WASTE = DMT % XH_WASTE * T % XBLD DMT % XLE_WASTE = DMT % XLE_WASTE * T % XBLD END SELECT ! !------------------------------------------------------------------------------- ! !*      10.    Fluxes over built surfaces !              -------------------------- ! CALL URBAN_FLUXES ( TOP , T , B , DMT , HIMPLICIT_WIND , PT_CANYON , PPEW_A_COEF , PPEW_B_COEF , & PEXNS , PRHOA , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , PAC_WL , PCD , PDF_RF , & PDN_RF , PDF_RD , PDN_RD , PRNSN_RF , PHSN_RF , PLESN_RF , PGSN_RF , & PRNSN_RD , PHSN_RD , PLESN_RD , PGSN_RD , PMELT_RF , ZDQS_RF , PMELT_RD , & ZDQS_RD , ZDQS_WL_A , ZDQS_WL_B , ZFLX_BLD_RF , ZFLX_BLD_WL_A , & ZFLX_BLD_WL_B , ZFLX_BLD_FL , ZFLX_BLD_MA , PE_SHADING , PLEW_RF , & PRN_GR , PH_GR , PLE_GR , PGFLUX_GR , & PLEW_RD , PLE_WL_A , PLE_WL_B , ZMELT_BLT , PUSTAR_TWN ) ! ! ! Water transfer from snow reservoir to water reservoir in case of snow melt ! WHERE ( PMELT_RF (:) . GT . 0. ) T % XWS_ROOF (:) = MIN ( ZWS_RF_MAX , T % XWS_ROOF (:) + PMELT_RF (:) * PTSTEP ) ENDWHERE ! WHERE ( PMELT_RD (:) . GT . 0. ) T % XWS_ROAD (:) = MIN ( ZWS_RD_MAX , T % XWS_ROAD (:) + PMELT_RD (:) * PTSTEP ) ENDWHERE ! !------------------------------------------------------------------------------- ! !*      11.    Roof ans road reservoirs evolution !              ---------------------------------- ! CALL URBAN_HYDRO ( ZWS_RF_MAX , ZWS_RD_MAX , T % XWS_ROOF , T % XWS_ROAD , PRR , & DMT % XIRRIG_ROAD , PTSTEP , T % XBLD , DMT % XLE_ROOF , DMT % XLE_ROAD , & DMT % XRUNOFF_STRLROOF , DMT % XRUNOFF_ROAD ) ! IF ( TOP % LGREENROOF ) THEN DMT % XRUNOFF_ROOF (:) = ( 1. - T % XGREENROOF (:)) * DMT % XRUNOFF_STRLROOF (:) & + T % XGREENROOF (:) * ( PRUNOFF_GR (:) + PDRAIN_GR (:)) ELSE DMT % XRUNOFF_ROOF (:) = DMT % XRUNOFF_STRLROOF (:) ENDIF ! !------------------------------------------------------------------------------- ! !*      19.    Compute aerodynamical resistance !              -------------------------------- ! PRESA_TWN (:) = 1. / ( T % XBLD (:) * PAC_RF (:) + ( 1. - T % XBLD (:)) * PAC_TOP (:)) ! IF ( LHOOK ) CALL DR_HOOK ( 'TEB' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END SUBROUTINE TEB","tags":"","loc":"proc/teb.html"},{"title":"TRIDIAG_GROUND – Town Energy Balance (TEB) model API docs","text":"subroutine TRIDIAG_GROUND(PA, PB, PC, PY, PX) Uses PARKIND1 YOMHOOK Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PA real, intent(in), DIMENSION(:,:) :: PB real, intent(in), DIMENSION(:,:) :: PC real, intent(in), DIMENSION(:,:) :: PY real, intent(out), DIMENSION(:,:) :: PX Contents Source Code TRIDIAG_GROUND Source Code SUBROUTINE TRIDIAG_GROUND ( PA , PB , PC , PY , PX ) !      ######################################### ! ! !!****   *TRIDIAG_GROUND* - routine to solve a time implicit scheme !! !! !!     PURPOSE !!     ------- !        The purpose of this routine is to resolve the linear system: ! !       A.X = Y ! !      where A is a tridiagonal matrix, and X and Y two vertical vectors. !     However, the computations are performed at the same time for all !     the verticals where an inversion of the system is necessary. !     This explain the dimansion of the input variables. ! !!**   METHOD !!     ------ !! !!        Then, the classical tridiagonal algorithm is used to invert the !!     implicit operator. Its matrix is given by: !! !!     (  b(1)      c(1)      0        0        0         0        0        0  ) !!     (  a(2)      b(2)     c(2)      0  ...    0        0        0        0  ) !!     (   0        a(3)     b(3)     c(3)       0        0        0        0  ) !!      ....................................................................... !!     (   0   ...   0      a(k)      b(k)     c(k)       0   ...  0        0  ) !!      ....................................................................... !!     (   0         0        0        0        0 ...  a(n-1)   b(n-1)   c(n-1)) !!     (   0         0        0        0        0 ...     0      a(n)     b(n) ) !! !! !!       All these computations are purely vertical and vectorizations are !!     easely achieved by processing all the verticals in parallel. !! !!     EXTERNAL !!     -------- !! !!       NONE !! !!     IMPLICIT ARGUMENTS !!     ------------------ !! !!     REFERENCE !!     --------- !! !!     AUTHOR !!     ------ !!       V. Masson !! !!     MODIFICATIONS !!     ------------- !!       Original        May 13, 1998 !!       Modified : !!       B. Decharme  08/12 Loop optimization !! --------------------------------------------------------------------- ! !*       0. DECLARATIONS ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! ! !*       0.1 declarations of arguments ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PA ! lower diag. elements of A matrix REAL , DIMENSION (:,:), INTENT ( IN ) :: PB ! main  diag. elements of A matrix REAL , DIMENSION (:,:), INTENT ( IN ) :: PC ! upper diag. elements of A matrix REAL , DIMENSION (:,:), INTENT ( IN ) :: PY ! r.h.s. term ! REAL , DIMENSION (:,:), INTENT ( OUT ) :: PX ! solution of A.X = Y ! !*       0.2 declarations of local variables ! INTEGER :: JI ! number of point loop control INTEGER :: JK ! vertical loop control INTEGER :: INI ! number of point INTEGER :: INL ! number of vertical levels ! REAL , DIMENSION ( SIZE ( PA , 1 ) ) :: ZDET ! work array REAL , DIMENSION ( SIZE ( PA , 1 ), SIZE ( PA , 2 )) :: ZW ! work array REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! --------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'TRIDIAG_GROUND' , 0 , ZHOOK_HANDLE ) INI = SIZE ( PX , 1 ) INL = SIZE ( PX , 2 ) ! !*       1.  levels going up !            --------------- ! !*       1.1 first level !            ----------- ! ZDET (:) = PB (:, 1 ) PX (:, 1 ) = PY (:, 1 ) / ZDET (:) ! !*       1.2 other levels !            ------------ ! DO JK = 2 , INL DO JI = 1 , INI ZW ( JI , JK ) = PC ( JI , JK - 1 ) / ZDET ( JI ) ZDET ( JI ) = PB ( JI , JK ) - PA ( JI , JK ) * ZW ( JI , JK ) PX ( JI , JK ) = ( PY ( JI , JK ) - PA ( JI , JK ) * PX ( JI , JK - 1 ) ) / ZDET ( JI ) END DO END DO ! !------------------------------------------------------------------------------- ! !*       2.  levels going down !            ----------------- ! DO JK = INL - 1 , 1 , - 1 DO JI = 1 , INI PX ( JI , JK ) = PX ( JI , JK ) - ZW ( JI , JK + 1 ) * PX ( JI , JK + 1 ) END DO END DO IF ( LHOOK ) CALL DR_HOOK ( 'TRIDIAG_GROUND' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE TRIDIAG_GROUND","tags":"","loc":"proc/tridiag_ground.html"},{"title":"BLD_OCC_CALENDAR – Town Energy Balance (TEB) model API docs","text":"subroutine BLD_OCC_CALENDAR(TPTIME, PTSUN, T, B, PQIN_FRAC, PTCOOL_TARGET, PTHEAT_TARGET, PQIN) Uses MODD_BEM_n MODI_DAY_OF_WEEK YOMHOOK MODD_CSTS PARKIND1 MODD_TEB_n MODD_TYPE_DATE_SURF Arguments Type Intent Optional Attributes Name type(DATE_TIME), intent(inout) :: TPTIME real, intent(in), DIMENSION(:) :: PTSUN type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B real, intent(in) :: PQIN_FRAC real, intent(out), DIMENSION(:) :: PTCOOL_TARGET real, intent(out), DIMENSION(:) :: PTHEAT_TARGET real, intent(out), DIMENSION(:) :: PQIN Contents Source Code BLD_OCC_CALENDAR Source Code SUBROUTINE BLD_OCC_CALENDAR ( TPTIME , PTSUN , T , B , PQIN_FRAC , PTCOOL_TARGET , PTHEAT_TARGET , PQIN ) !##################################################################################### !! **** BLD_OCC_CALENDAR * !! !!  PURPOSE !!  ------- !! BLD_OCC_CALENDAR defines the parameters relevant for BEM (TCOOL_TARGET, THEAT_TARGET and QIN) !! depending on the building use type (hence the DOW and local French TOD) * based on MUSCADE scenarii * !! !! AUTHOR !! ------ !! C. de Munck     *Météo-France* !! !! MODIFICATIONS !! ------------- !! Original  02/2013 ! USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t ! USE MODD_TYPE_DATE_SURF , ONLY : DATE_TIME ! USE MODD_CSTS , ONLY : XTT ! USE MODI_DAY_OF_WEEK ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !! 1. declaration of arguments ! TYPE ( DATE_TIME ), INTENT ( INOUT ) :: TPTIME REAL , DIMENSION (:) , INTENT ( IN ) :: PTSUN ! current solar time  (s, UTC) ! TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , INTENT ( IN ) :: PQIN_FRAC ! Fraction of internal gains when unoccupied (-) ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PTCOOL_TARGET ! Cooling setpoint of HVAC system [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PTHEAT_TARGET ! Heating setpoint of HVAC system [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PQIN ! Internal heat gains [W m-2(floor)] ! !! 2. declaration of local variables ! CHARACTER ( LEN = 6 ) :: CTIME ! Local time scheme (winter or summer time) INTEGER :: JDOW ! day of week INTEGER :: JJ ! REAL , DIMENSION ( SIZE ( PQIN )) :: ZTOD_BEG ! first Time Of Day that building unoccupied (UTC, s) REAL , DIMENSION ( SIZE ( PQIN )) :: ZTOD_END ! last Time Of Day that building unoccupied (UTC, s) REAL , DIMENSION ( SIZE ( PQIN )) :: ZDT ! Target temperature change when unoccupied (K) REAL ( KIND = JPRB ) :: ZTODOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'BLD_OCC_CALENDAR' , 0 , ZTODOOK_HANDLE ) ! !-------------------------------------------------------------------------------------- !  3. determine the day of the week and the local time scheme in France !-------------------------------------------------------------------------------------- ! CALL DAY_OF_WEEK ( TPTIME % TDATE % YEAR , TPTIME % TDATE % MONTH , TPTIME % TDATE % DAY , JDOW ) ! CTIME = 'WINTER' IF ( TPTIME % TDATE % MONTH >= 4 . AND . TPTIME % TDATE % MONTH <= 10 ) CTIME = 'SUMMER' ! !-------------------------------------------------------------------------------------- !  4. initialisation of parameters !-------------------------------------------------------------------------------------- ! ! Parameters assigned to the occupied values - read in namelist via BATI.csv : ! PTHEAT_TARGET (:) = B % XTHEAT_TARGET (:) ! PTCOOL_TARGET (:) = B % XTCOOL_TARGET (:) ! PQIN (:) = B % XQIN (:) ! ZTOD_BEG (:) = 0. ZTOD_END (:) = 0. ! !-------------------------------------------------------------------------------------- !  5. computes beginning and end of unoccupied calendar based on building USE TYPE !-------------------------------------------------------------------------------------- ! DO JJ = 1 , SIZE ( PTSUN ) ! IF ( T % XRESIDENTIAL ( JJ ) > 0.5 ) THEN ! RESIDENTIAL ! IF ( JDOW >= 2 . AND . JDOW <= 6 ) THEN ! week days ZTOD_BEG ( JJ ) = 9. * 360 0. !  9 UTC - WINTER time ZTOD_END ( JJ ) = 1 7. * 360 0. ! 17 UTC - WINTER time END IF ZDT ( JJ ) = T % XDT_RES ! ELSE ! IF ( JDOW >= 2 . AND . JDOW <= 7 ) THEN ! week days ZTOD_BEG ( JJ ) = 1 7. * 360 0. ! 17 UTC ZTOD_END ( JJ ) = 7. * 360 0. !  7 UTC ELSE ! week-end ZTOD_BEG ( JJ ) = 0. * 360 0. !   0 UTC ZTOD_END ( JJ ) = 2 4. * 360 0. !  24 UTC END IF ZDT ( JJ ) = T % XDT_OFF ! END IF ! adjustment of unoccupied TOD based on time scheme IF ( CTIME == 'SUMMER' ) THEN ZTOD_BEG ( JJ ) = ZTOD_BEG ( JJ ) - 360 0. ZTOD_END ( JJ ) = ZTOD_END ( JJ ) - 360 0. END IF ! ENDDO ! !-------------------------------------------------------------------------------------- !  6. modulate BEM input values for unoccupied building calendar !-------------------------------------------------------------------------------------- ! DO JJ = 1 , SIZE ( PTSUN ) ! IF (( ( ZTOD_BEG ( JJ ) < ZTOD_END ( JJ )) . AND . ( PTSUN ( JJ ) > ZTOD_BEG ( JJ ) . AND . PTSUN ( JJ ) < ZTOD_END ( JJ )) ) & . OR . & ( ( ZTOD_BEG ( JJ ) > ZTOD_END ( JJ )) . AND . (( PTSUN ( JJ ) > 0 . AND . PTSUN ( JJ ) < ZTOD_END ( JJ )) . OR . & ( PTSUN ( JJ ) > ZTOD_BEG ( JJ ) . AND . PTSUN ( JJ ) < 24 * 360 0. )))) THEN ! PTHEAT_TARGET ( JJ ) = B % XTHEAT_TARGET ( JJ ) - ZDT ( JJ ) PTCOOL_TARGET ( JJ ) = B % XTCOOL_TARGET ( JJ ) + ZDT ( JJ ) PQIN ( JJ ) = PQIN_FRAC * PQIN ( JJ ) ENDIF ! ENDDO ! !-------------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'BLD_OCC_CALENDAR' , 1 , ZTODOOK_HANDLE ) ! END SUBROUTINE BLD_OCC_CALENDAR","tags":"","loc":"proc/bld_occ_calendar.html"},{"title":"INI_OCEAN_CSTS – Town Energy Balance (TEB) model API docs","text":"subroutine INI_OCEAN_CSTS() Uses PARKIND1 YOMHOOK MODD_OCEAN_CSTS Arguments None Contents Source Code INI_OCEAN_CSTS Source Code SUBROUTINE INI_OCEAN_CSTS !     ################## ! !!****  *INI_OCEAN_CSTS * - routine to initialize the module MODD_OCEAN_CSTS !! !!    PURPOSE !!    ------- !       The purpose of this routine is to initialize  the physical constants !     stored in  module MODD_OCEAN_CSTS. ! ! !!**  METHOD !!    ------ !!      The physical constants are set to their numerical values !! !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_OCEAN_CST     : contains physical constants !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      C. Lebeaupin Brossier       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    01/2008 !! !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_OCEAN_CSTS ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !------------------------------------------------------------------------------- ! ! !*       1.     THERMODYNAMICAL CONSTANTS OF SEAWATER !               ------------------------------------- ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'INI_OCEAN_CSTS' , 0 , ZHOOK_HANDLE ) ! XRHOSW = 102 4. XRHOSWREF = 102 4.458 XCPSW = 417 8.4 ! !*       2.     CORIOLIS FRACTION !               ----------------- XGAMA = 0.53 ! !*       3.     TURBULENCE CONSTANTS !               -------------------- XZCE = 1. / 0.7 XCKL = 0.1 ! !*       4.      RADIATION CONSTANTS !               -------------------- !from Jerlov's 1976 optical water C type I XR = 0.58 XD1 = 0.35 XD2 = 2 3. !albedo of seawater XALBEDOSW = 0.06 ! IF ( LHOOK ) CALL DR_HOOK ( 'INI_OCEAN_CSTS' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE INI_OCEAN_CSTS","tags":"","loc":"proc/ini_ocean_csts.html"},{"title":"SURFACE_CD – Town Energy Balance (TEB) model API docs","text":"subroutine SURFACE_CD(PRI, PZREF, PUREF, PZ0EFF, PZ0H, PCD, PCDN) Uses MODD_CSTS YOMHOOK MODE_THERMOS PARKIND1 Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PRI real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PZ0EFF real, intent(in), DIMENSION(:) :: PZ0H real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN Contents Source Code SURFACE_CD Source Code SUBROUTINE SURFACE_CD ( PRI , PZREF , PUREF , PZ0EFF , PZ0H , & PCD , PCDN ) !   ################################################################# ! !!****  *SURFACE_CD* !! !!    PURPOSE !!    ------- ! !     Computes the drag coefficients for momentum near the ground ! ! !!**  METHOD !!    ------ ! ! ! !    1 and 2 : computation of relative humidity near the ground ! !    3 : richardson number ! !    4 : the aerodynamical resistance for heat transfers is deduced ! !    5 : the drag coefficient for momentum ZCD is computed ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !!    MODD_GROUND_PAR !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/01/98 !!                  02/04/01 (P Jabouille) limitation of Z0 with 0.5 PUREF !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_CSTS , ONLY : XKARMAN ! USE MODE_THERMOS ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PRI ! Richardson number REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first ! atmospheric level REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the wind !                                             ! NOTE this is different from ZZREF !                                             ! ONLY in stand-alone/forced mode, !                                             ! NOT when coupled to a model (MesoNH) REAL , DIMENSION (:), INTENT ( IN ) :: PZ0EFF ! roughness length for momentum ! with subgrid-scale orography REAL , DIMENSION (:), INTENT ( IN ) :: PZ0H ! roughness length for heat ! REAL , DIMENSION (:), INTENT ( OUT ) :: PCD ! drag coefficient for momentum REAL , DIMENSION (:), INTENT ( OUT ) :: PCDN ! neutral drag coefficient for momentum ! !*      0.2    declarations of local variables ! ! REAL :: ZZ0EFF , ZZ0H , ZMU , & ZCMSTAR , ZPM , ZCM , ZFM INTEGER :: JJ REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! Functions : REAL :: X , CMSTAR , PM CMSTAR ( X ) = 6.8741 + 2.6933 * X - 0.3601 * X * X + 0.0154 * X * X * X PM ( X ) = 0.5233 - 0.0815 * X + 0.0135 * X * X - 0.0010 * X * X * X !------------------------------------------------------------------------------- ! !*       1.     Drag coefficient for momentum transfers !               --------------------------------------- ! ! IF ( LHOOK ) CALL DR_HOOK ( 'SURFACE_CD' , 0 , ZHOOK_HANDLE ) DO JJ = 1 , SIZE ( PRI ) ZZ0EFF = MIN ( PZ0EFF ( JJ ), PUREF ( JJ ) * 0.5 ) ZZ0H = MIN ( ZZ0EFF , PZ0H ( JJ )) ! ZMU = LOG ( MIN ( ZZ0EFF / ZZ0H , 20 0. ) ) ! PCDN ( JJ ) = ( XKARMAN / LOG ( PUREF ( JJ ) / ZZ0EFF )) ** 2 ZCMSTAR = CMSTAR ( ZMU ) ZPM = PM ( ZMU ) ! ZCM = 1 0. * ZCMSTAR * PCDN ( JJ ) * ( PUREF ( JJ ) / ZZ0EFF ) ** ZPM ! IF ( PRI ( JJ ) > 0.0 ) THEN ZFM = 1. + 1 0. * PRI ( JJ ) / SQRT ( 1. + 5. * PRI ( JJ ) ) ZFM = 1. / ZFM ELSE ZFM = 1. - 1 0. * PRI ( JJ ) / ( 1. + ZCM * SQRT ( - PRI ( JJ )) ) ENDIF ! PCD ( JJ ) = PCDN ( JJ ) * ZFM ! ENDDO IF ( LHOOK ) CALL DR_HOOK ( 'SURFACE_CD' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE SURFACE_CD","tags":"","loc":"proc/surface_cd.html"},{"title":"SOLAR_PANEL – Town Energy Balance (TEB) model API docs","text":"subroutine SOLAR_PANEL(TPN, DMT, PTSTEP, PTSUN, PRESIDENTIAL, PEMIT_LW_ROOF, PEMIT_LWDN_PANEL, PLW_RAD, PTA, PN_FLOOR, PPROD_BLD) Uses YOMHOOK MODD_DIAG_MISC_TEB_n MODD_CSTS MODD_TEB_PANEL_n PARKIND1 MODD_SURF_PAR Arguments Type Intent Optional Attributes Name type(TEB_PANEL_t), intent(inout) :: TPN type(DIAG_MISC_TEB_t), intent(inout) :: DMT real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PTSUN real, intent(in), DIMENSION(:) :: PRESIDENTIAL real, intent(in), DIMENSION(:) :: PEMIT_LW_ROOF real, intent(in), DIMENSION(:) :: PEMIT_LWDN_PANEL real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PN_FLOOR real, intent(out), DIMENSION(:) :: PPROD_BLD Contents Source Code SOLAR_PANEL Source Code SUBROUTINE SOLAR_PANEL ( TPN , DMT , PTSTEP , PTSUN , PRESIDENTIAL , PEMIT_LW_ROOF , & PEMIT_LWDN_PANEL , PLW_RAD , PTA , PN_FLOOR , PPROD_BLD ) !   ########################################################################## ! !!****  *SOLAR_PANEL* !! !!    PURPOSE !!    ------- ! ! Computes the energy budget of the solar panels. ! ! !!**  METHOD !     ------ ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    08/2013 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS , ONLY : XSTEFAN ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_PANEL_t ), INTENT ( INOUT ) :: TPN TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT ! REAL , INTENT ( IN ) :: PTSTEP ! time step  (s) REAL , DIMENSION (:), INTENT ( IN ) :: PTSUN ! solar time (s since solar midnight) REAL , DIMENSION (:), INTENT ( IN ) :: PRESIDENTIAL ! Buildings Residential use fraction        (-) REAL , DIMENSION (:), INTENT ( IN ) :: PEMIT_LW_ROOF ! Upwards   LW flux from roof               (W/m2) REAL , DIMENSION (:), INTENT ( IN ) :: PEMIT_LWDN_PANEL ! Downwards LW flux from panel              (W/m2) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! Incoming Longwave radiation               (W/m2) REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! Air temperature                           (K) REAL , DIMENSION (:), INTENT ( IN ) :: PN_FLOOR ! number of floors                          (-) ! REAL , DIMENSION (:), INTENT ( OUT ) :: PPROD_BLD ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*      0.2    declarations of parameters ! ! coefficient to take into account irradiance to estimate surface temperature of panel REAL , PARAMETER :: XKT = 0.05 ! (Km2/W) ! ! coefficient to take into account optimum orientation of the solar panel REAL , PARAMETER :: XFT = 1.10 ! (-) ! ! optimum panel temperature for photovoltaic production REAL , PARAMETER :: XT_OPT = 29 8.15 ! (K) ! ! coefficient to take into account decrease of production for warm temperatures REAL , PARAMETER :: XT_LOSS = 0.005 ! (K-1) ! ! difference of temperature between cold and hot water REAL , PARAMETER :: XWATER_DT = 4 5. ! (K) ! ! density of m2 of panel per m2 of floor necessary for hot water production REAL , PARAMETER :: XTHER_FLOOR = 1. / 3 0. ! (-) ! ! Annual thermal production for an increase of 1K of the water temperature REAL , PARAMETER :: XTHER_RATE = 0.5 * 1.16 * 3 2. ! (kWh/year/m2 panel) ! !! Maximum irradiance above which there is no more heating necessary (target temperature reached quickly) !REAL, PARAMETER :: XTHER_IRR = 500.           ! (W/m2) ! Efficiency for thermal panels REAL , PARAMETER :: XTHER_EFF = 0.60 ! (-) ! ! ! ! !*      0.3    declarations of local variables ! REAL :: ZTHER_DAILY_TARGET ! daily target for thermal production         (J/m2) REAL , DIMENSION ( SIZE ( PTA )) :: ZIRRADIANCE ! incoming solar radiation normal to the solar panel (W/m2) REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_PANEL ! Surface temperature of the upwards face of the solar panel (K) REAL , DIMENSION ( SIZE ( PTA )) :: ZLWU_PANEL ! Upwards longwave radiation from the solar panel (W/m2) REAL , DIMENSION ( SIZE ( PTA )) :: ZTHER_FRAC ! Fraction of thermal      panels per m2 of roof  (m2 panel/m2 bld) REAL , DIMENSION ( SIZE ( PTA )) :: ZPHOT_FRAC ! Fraction of photovoltaic panels per m2 of roof  (m2 panel/m2 bld) REAL , DIMENSION ( SIZE ( PTA )) :: ZTHER_PRODC_DAY ! guess of daily production by thermal panels (J/m2) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'SOLAR_PANEL' , 0 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! !*      0.4    Default values for output variables !              ----------------------------------- ! DMT % XABS_LW_PANEL = XUNDEF ! Absorbed LW enerby by solar panel         (W/m2) DMT % XH_PANEL = XUNDEF ! Sensible heat released by the solar panel (W/m2) DMT % XRN_PANEL = XUNDEF ! Net radiation     of the solar panel      (W/m2) DMT % XTHER_PROD_PANEL = XUNDEF ! Thermal      Energy production of the solar panel      (W/m2) DMT % XPHOT_PROD_PANEL = XUNDEF ! Photovoltaic Energy production of the solar panel      (W/m2) DMT % XPROD_PANEL = XUNDEF ! Averaged     Energy production of the solar panel      (W/m2) DMT % XTHER_PROD_BLD = 0. ! Thermal      Energy production of the solar panel      (W/m2) DMT % XPHOT_PROD_BLD = 0. ! Photovoltaic Energy production of the solar panel      (W/m2) PPROD_BLD = 0. ! Averaged     Energy production of the solar panel      (W/m2) ! !------------------------------------------------------------------------------- ! !*      1.     Initializations !              --------------- ! !*      1.1    Checks hour for daily thermal production reset !              ---------------------------------------------- ! !* energy reset between midnight and 1AM. WHERE ( PTSUN (:) >= 0. . AND . PTSUN (:) <= 360 0. ) TPN % XTHER_PRODC_DAY (:) = 0. ! ! !*      1.2    Daily target production for thermal panels !              ------------------------------------------ ! ZTHER_DAILY_TARGET = ( 2. * XTHER_RATE ) * XWATER_DT * ( 100 0. / 36 5. * 360 0. ) ! (J/m2) ! the factor 2 is to remove the assumption of cloudy days in the annual mean production ! !------------------------------------------------------------------------------- !* Note that computations are done only where solar panels are present WHERE ( TPN % XFRAC_PANEL (:) > 0. ) !------------------------------------------------------------------------------- ! !*      2.     Irradiance on panel !              ------------------- ! ZIRRADIANCE (:) = XFT * DMT % XABS_SW_PANEL (:) / ( 1. - TPN % XALB_PANEL (:) ) ! !------------------------------------------------------------------------------- ! !*      3.     Solar panel temperature !              ----------------------- ! ZTS_PANEL (:) = PTA (:) + XKT * ZIRRADIANCE (:) ! !------------------------------------------------------------------------------- ! !*      4.     Upwards solar panel LW radiation !              -------------------------------- ! ZLWU_PANEL (:) = TPN % XEMIS_PANEL (:) * XSTEFAN * ZTS_PANEL (:) ** 4 & + ( 1. - TPN % XEMIS_PANEL (:)) * PLW_RAD (:) ! !------------------------------------------------------------------------------- ! !*      5.     Solar panel LW budget !              --------------------- ! DMT % XABS_LW_PANEL (:) = PLW_RAD (:) + PEMIT_LW_ROOF (:) - PEMIT_LWDN_PANEL (:) - ZLWU_PANEL (:) ! !------------------------------------------------------------------------------- ! !*      6.     Solar panel Net radiation !              ------------------------- ! DMT % XRN_PANEL (:) = DMT % XABS_SW_PANEL (:) + DMT % XABS_LW_PANEL (:) ! !------------------------------------------------------------------------------- ! !*      7.     Fraction of panel surface types !              ------------------------------- ! !*      7.1    Panel dedicated to thermal production of hot water !              -------------------------------------------------- ! ZTHER_FRAC (:) = MIN ( XTHER_FLOOR * PN_FLOOR (:) * PRESIDENTIAL (:), TPN % XFRAC_PANEL (:) ) ! (m2 thermal       panel / m2 roof) ! !*      7.2    Photovoltaic panel !              ------------------ ! ZPHOT_FRAC (:) = TPN % XFRAC_PANEL (:) - ZTHER_FRAC (:) ! (m2 photovoltaic panel / m2 roof) ! !------------------------------------------------------------------------------- ! !*      8.     Thermal Production of hot water (W/m2 thermal panel) !              ------------------------------- ! !*      8.1    Instantaneous production !              ------------------------ ! DMT % XTHER_PROD_PANEL (:) = XTHER_EFF * ZIRRADIANCE (:) ! (W/m2) !  DMT%XTHER_PROD_PANEL(:) = XTHER_RATE * XWATER_DT * (1000. / 24. / 365.) ! !*      8.2    Integrated daily production !              --------------------------- ! ZTHER_PRODC_DAY (:) = TPN % XTHER_PRODC_DAY (:) + PTSTEP * DMT % XTHER_PROD_PANEL (:) ! (J/m2) ! !*      8.3    Daily production limited by daily target !              ---------------------------------------- ! ZTHER_PRODC_DAY (:) = MIN ( ZTHER_PRODC_DAY (:) , ZTHER_DAILY_TARGET ) ! !*      8.4     Instantaneous production taking into account target limit if reached !               -------------------------------------------------------------------- ! DMT % XTHER_PROD_PANEL (:) = ( ZTHER_PRODC_DAY (:) - TPN % XTHER_PRODC_DAY (:) ) / PTSTEP ! !*      8.5    Updates daily production !              ------------------------ ! TPN % XTHER_PRODC_DAY (:) = ZTHER_PRODC_DAY (:) !------------------------------------------------------------------------------- ! !*      9.     Photovoltaic Production  (W/m2 photovoltaic panel) !              ----------------------- ! DMT % XPHOT_PROD_PANEL (:) = TPN % XEFF_PANEL (:) * ZIRRADIANCE (:) * MIN ( 1. , 1. - XT_LOSS * ( ZTS_PANEL (:) - XT_OPT )) ! !------------------------------------------------------------------------------- ! !*     10.     Averaged Production  (W/m2 panel) !              ------------------- ! DMT % XPROD_PANEL (:) = DMT % XTHER_PROD_PANEL (:) * ( ZTHER_FRAC (:) / TPN % XFRAC_PANEL (:)) & + DMT % XPHOT_PROD_PANEL (:) * ( ZPHOT_FRAC (:) / TPN % XFRAC_PANEL (:)) ! !------------------------------------------------------------------------------- ! !*     11.     Sensible heat flux  (W/m2 panel) !              ------------------ ! DMT % XH_PANEL (:) = DMT % XRN_PANEL (:) - DMT % XPROD_PANEL (:) ! !------------------------------------------------------------------------------- ! !*     12.     Productions per building (W/m2 bldtags":"","loc":"proc/solar_panel.html"},{"title":"URBAN_HYDRO – Town Energy Balance (TEB) model API docs","text":"subroutine URBAN_HYDRO(PWS_ROOF_MAX, PWS_ROAD_MAX, PWS_ROOF, PWS_ROAD, PRR, PIRRIG_ROAD, PTSTEP, PBLD, PLE_ROOF, PLE_ROAD, PRUNOFF_STRLROOF, PRUNOFF_ROAD) Uses MODD_CSTS PARKIND1 YOMHOOK Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWS_ROOF_MAX real, intent(in), DIMENSION(:) :: PWS_ROAD_MAX real, intent(inout), DIMENSION(:) :: PWS_ROOF real, intent(inout), DIMENSION(:) :: PWS_ROAD real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PIRRIG_ROAD real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PBLD real, intent(in), DIMENSION(:) :: PLE_ROOF real, intent(in), DIMENSION(:) :: PLE_ROAD real, intent(out), DIMENSION(:) :: PRUNOFF_STRLROOF real, intent(out), DIMENSION(:) :: PRUNOFF_ROAD Contents Source Code URBAN_HYDRO Source Code SUBROUTINE URBAN_HYDRO ( PWS_ROOF_MAX , PWS_ROAD_MAX , PWS_ROOF , PWS_ROAD , & PRR , PIRRIG_ROAD , PTSTEP , PBLD , PLE_ROOF , & PLE_ROAD , PRUNOFF_STRLROOF , PRUNOFF_ROAD ) !   ########################################################################## ! !!****  *URBAN_HYDRO* !! !!    PURPOSE !!    ------- ! !     Computes the evolution of prognostic water reservoirs !     of urbanized areas. ! ! !!**  METHOD !     ------ ! ! !   The roof reservoir runoff goes directly into the road reservoir. ! !   Runoff occurs for road reservoir (too much water), as well as drainage !   (evacuation system, typical time scale: 1 day) ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_CSTS , ONLY : XLVTT ! ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PWS_ROOF_MAX ! maximum deepness of roof water reservoir REAL , DIMENSION (:), INTENT ( IN ) :: PWS_ROAD_MAX ! maximum deepness of road water reservoir REAL , DIMENSION (:), INTENT ( INOUT ) :: PWS_ROOF ! roof water reservoir REAL , DIMENSION (:), INTENT ( INOUT ) :: PWS_ROAD ! road water reservoir REAL , DIMENSION (:), INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:), INTENT ( IN ) :: PIRRIG_ROAD ! watering rate for roads REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PBLD ! fraction of buildings REAL , DIMENSION (:), INTENT ( IN ) :: PLE_ROOF ! latent heat flux over roof REAL , DIMENSION (:), INTENT ( IN ) :: PLE_ROAD ! latent heat flux over road ! REAL , DIMENSION (:), INTENT ( OUT ) :: PRUNOFF_STRLROOF ! runoff (kg/m2/s) REAL , DIMENSION (:), INTENT ( OUT ) :: PRUNOFF_ROAD ! runoff (kg/m2/s) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*      0.2    declarations of local variables ! ! !------------------------------------------------------------------------------- ! !*      1.     Roof reservoir evolution !              ------------------------ ! ! !                                           evolution of the water reservoir !                                           (if we don't consider the runoff) !                                           PRR in kg/m2/s therefore PWS in mm ! IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_HYDRO' , 0 , ZHOOK_HANDLE ) PWS_ROOF (:) = PWS_ROOF (:) & - PTSTEP * ( PLE_ROOF (:) / XLVTT - PRR (:) ) ! !                                           Ws_town must be positive ! PWS_ROOF (:) = MAX ( 0. , PWS_ROOF (:)) ! !                                           if Ws_town > Ws_town_max, !                                           there is runoff ! PRUNOFF_STRLROOF (:) = MAX ( 0. , ( PWS_ROOF (:) - PWS_ROOF_MAX (:)) / PTSTEP ) ! PWS_ROOF (:) = MIN ( PWS_ROOF (:), PWS_ROOF_MAX (:)) ! !------------------------------------------------------------------------------- ! !*      2.     Road reservoir evolution !              ------------------------ ! ! !                                           evolution of the water reservoir !                                           (if we don't consider the runoff) !                                           PRR in kg/m2/s therefore PWS in mm ! PWS_ROAD (:) = PWS_ROAD (:) & - PTSTEP * ( PLE_ROAD (:) / XLVTT - PRR (:) - PIRRIG_ROAD (:) ) ! !                                           Ws_town must be positive ! PWS_ROAD (:) = MAX ( 0. , PWS_ROAD (:)) ! !                                           if Ws_town > Ws_town_max, !                                           there is runoff ! PRUNOFF_ROAD (:) = MAX ( 0. , ( PWS_ROAD (:) - PWS_ROAD_MAX (:)) / PTSTEP ) ! PWS_ROAD (:) = MIN ( PWS_ROAD (:), PWS_ROAD_MAX (:)) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_HYDRO' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE URBAN_HYDRO","tags":"","loc":"proc/urban_hydro.html"},{"title":"MASS_LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"subroutine MASS_LAYER_E_BUDGET(B, PTSTEP, PFLX_BLD_MA, PDQS_MA, PIMB_MA, PRADHT_IN, PRAD_WL_MA, PRAD_RF_MA, PRAD_WIN_MA, PLOAD_MA, PRAD_FL_MA, PCONV_MA_BLD) Uses YOMHOOK MODD_BEM_n PARKIND1 MODI_LAYER_E_BUDGET MODI_LAYER_E_BUDGET_GET_COEF MODE_CONV_DOE Arguments Type Intent Optional Attributes Name type(BEM_t), intent(inout) :: B real, intent(in) :: PTSTEP real, intent(out), DIMENSION(:) :: PFLX_BLD_MA real, intent(out), DIMENSION(:) :: PDQS_MA real, intent(out), DIMENSION(:) :: PIMB_MA real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PRAD_WL_MA real, intent(in), DIMENSION(:) :: PRAD_RF_MA real, intent(in), DIMENSION(:) :: PRAD_WIN_MA real, intent(in), DIMENSION(:) :: PLOAD_MA real, intent(in), DIMENSION(:) :: PRAD_FL_MA real, intent(out), DIMENSION(:) :: PCONV_MA_BLD Contents Source Code MASS_LAYER_E_BUDGET Source Code SUBROUTINE MASS_LAYER_E_BUDGET ( B , PTSTEP , PFLX_BLD_MA , PDQS_MA , PIMB_MA , PRADHT_IN , & PRAD_WL_MA , PRAD_RF_MA , PRAD_WIN_MA , PLOAD_MA , & PRAD_FL_MA , PCONV_MA_BLD ) !   ########################################################################## ! !!****  *MASS_LAYER_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of building floor temperatures ! ! !!**  METHOD !     ------ ! !    6 : equations for evolution of Ts_floor !        ************************************************************* ! !     dTf_k(t) / dt = 1/(df_k*Cf_k) * (- 2*Kf_k-1*(Tf_k-Tf_k-1)/(df_k-1 +df_k) !                                      - 2*Kf_k  *(Tf_k-Tf_k+1)/(df_k+1 +df_k) ) ! !     dTf_1(t) / dt = 1/(df_1*Cf_1) * (- 2*Kw_1*(Tw_1-Tw_2)/(dw_1 +dw_2)) ! !       with ! !   K*_k  = (d*_k+ d*_k+1)/(d*_k/k*_k+ d*_k+1/k*_k+1) ! ! ! The system is implicited (or semi-implicited). ! ! ZIMPL=1    ---> implicit system ! ZIMPL=0.5  ---> semi-implicit system ! ZIMPL=0    ---> explicit system ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      G. Pigeon           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    11/11 !!      G. Pigeon   09/12 modif internal convection coef !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_BEM_n , ONLY : BEM_t ! USE MODI_LAYER_E_BUDGET_GET_COEF USE MODI_LAYER_E_BUDGET USE MODE_CONV_DOE ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( OUT ) :: PFLX_BLD_MA !flux from building to floor REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_MA !heat storage inside the floor REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_MA !floor energy residual imbalance for verification REAL , DIMENSION (:), INTENT ( IN ) :: PRADHT_IN ! Indoor radiant heat transfer coefficient ! [W K-1 m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_RF_MA ! rad. fluxes from roof to floor[W m-2(roof)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_WL_MA ! rad. fluxes from wall to floor[W m-2(wall)] REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_WIN_MA ! rad. fluxes from win to floor[W m-2(win)] REAL , DIMENSION (:), INTENT ( IN ) :: PLOAD_MA ! solar and internal load to the floor REAL , DIMENSION (:), INTENT ( IN ) :: PRAD_FL_MA ! rad. fluxes from floor to mass [W m-2(floor)] REAL , DIMENSION (:), INTENT ( OUT ) :: PCONV_MA_BLD ! conv. fluxes from floor to bld [W m-2(floor)] ! !*      0.2    declarations of local variables ! ! REAL :: ZIMPL = 1.0 ! implicit coefficient REAL :: ZEXPL = 0.0 ! explicit coefficient ! REAL , DIMENSION ( SIZE ( B % XT_MASS , 1 ), SIZE ( B % XT_MASS , 2 )) :: ZA ,& ! lower diag. ZB ,& ! main  diag. ZC ,& ! upper diag. ZY ! r.h.s. ! REAL , DIMENSION ( SIZE ( B % XT_MASS , 1 )) :: ZTS_MA ! surf. mass temp. ! used during calculation REAL , DIMENSION ( SIZE ( B % XT_MASS , 1 )) :: ZTS_MA_CONV ! surf. mass temp. used for conv flux REAL , DIMENSION ( SIZE ( B % XT_MASS , 1 )) :: ZCHTC_IN_MA ! Indoor floor convec heat transfer coefficient ! [W K-1 m-2(bld)] INTEGER :: JJ REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MASS_LAYER_E_BUDGET' , 0 , ZHOOK_HANDLE ) ! ! *Convection heat transfer coefficients [W m-2 K-1] from EP Engineering Reference ! ZCHTC_IN_MA (:) = CHTC_VERT_DOE ( B % XT_MASS (:, 1 ), B % XTI_BLD (:)) DO JJ = 1 , SIZE ( ZCHTC_IN_MA ) ZCHTC_IN_MA ( JJ ) = MAX ( 1. , ZCHTC_IN_MA ( JJ )) ENDDO ! CALL LAYER_E_BUDGET_GET_COEF ( B % XT_MASS , PTSTEP , ZIMPL , B % XHC_FLOOR , B % XTC_FLOOR , B % XD_FLOOR / 2. , & ZA , ZB , ZC , ZY ) ! ZTS_MA (:) = B % XT_MASS (:, 1 ) ZB (:, 1 ) = ZB (:, 1 ) + ZIMPL * 4. / 3. * ZCHTC_IN_MA (:) ZY (:, 1 ) = ZY (:, 1 ) & + ZCHTC_IN_MA (:) * ( B % XTI_BLD (:) - 1. / 3. * B % XT_MASS (:, 1 ) * ( 4 * ZEXPL - 1. )) & + B % XF_MASS_WIN (:) * PRAD_WIN_MA (:) + B % XF_MASS_WALL (:) * PRAD_WL_MA (:) & + B % XF_MASS_FLOOR (:) * ( PRAD_RF_MA (:) + PRAD_FL_MA (:)) + PLOAD_MA (:) ! CALL LAYER_E_BUDGET ( B % XT_MASS , PTSTEP , ZIMPL , B % XHC_FLOOR , B % XTC_FLOOR , B % XD_FLOOR / 2. , & ZA , ZB , ZC , ZY , PDQS_MA ) ! !*      calculation of temperature used in energy balance calculation !       ------------------------------------------------------------- ! ZTS_MA_CONV (:) = ZIMPL * 4. / 3. * B % XT_MASS (:, 1 ) + 1. / 3 * ZTS_MA (:) * ( 4 * ZEXPL - 1. ) ZTS_MA (:) = ZEXPL * ZTS_MA (:) + ZIMPL * B % XT_MASS (:, 1 ) ! !*      calculation of convection flux between mass and building air !       ------------------------------------------------------------ ! PCONV_MA_BLD (:) = ZCHTC_IN_MA (:) * ( ZTS_MA_CONV (:) - B % XTI_BLD (:)) ! !*      For diagnostics calculation of flux exchanged between the mass and the !       indoor !       ------------------------------------------------ ! PFLX_BLD_MA (:) = - PCONV_MA_BLD (:) + B % XF_MASS_WIN (:) * PRAD_WIN_MA (:) & + B % XF_MASS_WALL (:) * PRAD_WL_MA (:) & + B % XF_MASS_FLOOR (:) * ( PRAD_RF_MA (:) + PRAD_FL_MA (:)) + PLOAD_MA (:) ! !*      Floor residual energy imbalance for verification !       ------------------------------------------------ ! PIMB_MA (:) = PFLX_BLD_MA (:) - PDQS_MA (:) ! IF ( LHOOK ) CALL DR_HOOK ( 'MASS_LAYER_E_BUDGET' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- END SUBROUTINE MASS_LAYER_E_BUDGET","tags":"","loc":"proc/mass_layer_e_budget.html"},{"title":"INI_SURF_CSTS – Town Energy Balance (TEB) model API docs","text":"subroutine INI_SURF_CSTS() Uses MODD_REPROD_OPER YOMHOOK MODI_OPEN_NAMELIST MODI_GET_LUOUT MODD_SNOW_PAR MODI_CLOSE_NAMELIST MODD_WATER_PAR MODD_MEB_PAR MODD_FLOOD_PAR MODD_SURF_PAR MODE_POS_SURF PARKIND1 MODI_TEST_NAM_VAR_SURF MODD_SURF_CONF Arguments None Contents Source Code INI_SURF_CSTS Source Code SUBROUTINE INI_SURF_CSTS !     ################## ! !!****  *INI_SURF_CSTS * - routine to initialize all surface parameter as !!                         emissivity and albedo !! !!    PURPOSE !!    ------- ! !!**  METHOD !!    ------ !!      The physical constants are set to their default numerical values !!      or specified in namelist NAM_SURF_CSTS !! !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !!    AUTHOR !!    ------ !!      B. Decharme       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    08/2009 !!      M Lafaysse 05/2014 : snow parameters !!      B. Decharme    05/13 : Add NAM_SURF_REPROD_OPER for versions reproductibility !!      P. Samuelsson 10/2014 MEB !!      B. Decharme    01/16 : Update XCFFV !! !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_SURF_CONF , ONLY : CPROGNAME ! USE MODD_WATER_PAR USE MODD_FLOOD_PAR USE MODD_MEB_PAR , ONLY : XTAU_LW , & XRAGNC_FACTOR , XKDELTA_WR USE MODD_SNOW_PAR , ONLY : XEMISSN , XANSMIN , XANSMAX , & XAGLAMIN , XAGLAMAX , XHGLA , & XWSNV , XZ0SN , XZ0HSN , & XTAU_SMELT , & XALBICE1 , XALBICE2 , XALBICE3 , & XRHOTHRESHOLD_ICE , XZ0ICEZ0SNOW , & XVAGING_NOGLACIER , XVAGING_GLACIER , & XPERCENTAGEPORE , & LMEBREC , & XANSFRACMEL , XTEMPANS , & XANSMINMEB ! USE MODI_GET_LUOUT USE MODI_OPEN_NAMELIST USE MODI_CLOSE_NAMELIST USE MODE_POS_SURF ! USE MODD_REPROD_OPER , ONLY : XEVERG_RSMIN , XEVERG_VEG , & CDGAVG , CIMPLICIT_WIND , & CQSAT , CCHARNOCK , CDGDIF USE MODI_TEST_NAM_VAR_SURF ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! INTEGER :: ILUOUT ! unit of output listing file INTEGER :: ILUNAM ! namelist file  logical unit LOGICAL :: GFOUND ! true if namelist is found ! LOGICAL :: LREPROD_OPER ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! NAMELIST / NAM_SURF_CSTS / XEMISSN , XANSMIN , XANSMAX , XAGLAMIN , XAGLAMAX , & XALBWAT , XALBCOEF_TA96 , XALBSCA_WAT , XEMISWAT , & XALBWATICE , XEMISWATICE , XHGLA , XWSNV , XCFFV , & XZ0SN , XZ0HSN , XTAU_SMELT , XALBSEAICE , & XZ0FLOOD , XALBWATSNOW , & LMEBREC , & XANSFRACMEL , XTEMPANS , XANSMINMEB , & XTAU_LW , XRAGNC_FACTOR ! NAMELIST / NAM_SURF_SNOW_CSTS / XZ0ICEZ0SNOW , XRHOTHRESHOLD_ICE , & XALBICE1 , XALBICE2 , XALBICE3 , & XVAGING_NOGLACIER , XVAGING_GLACIER , & XPERCENTAGEPORE ! NAMELIST / NAM_REPROD_OPER / LREPROD_OPER , XEVERG_RSMIN , XEVERG_VEG , & CDGAVG , CDGDIF , CIMPLICIT_WIND , CQSAT , & CCHARNOCK ! !------------------------------------------------------------------------------- !*       0. INIT !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'INI_SURF_CSTS' , 0 , ZHOOK_HANDLE ) ! XALBWAT = XUNDEF XALBSEAICE = XUNDEF XALBWATICE = XUNDEF XALBWATSNOW = XUNDEF XEMISWAT = XUNDEF XEMISWATICE = XUNDEF XEMISSN = XUNDEF ! !------------------------------------------------------------------------------- !*       1. Default values !------------------------------------------------------------------------------- ! ! Minimum and maximum values of the albedo of snow: ! XANSMIN = 0.50 ! (-) XANSMAX = 0.85 ! (-) ! ! Minimum and maximum values of the albedo of permanet snow/ice: ! XAGLAMIN = 0.8 ! (-) XAGLAMAX = 0.85 ! (-) ! ! Use recommended settings for snow albedo (FALSE = ISBA default) ! LMEBREC = . FALSE . ! ! Fraction of maximum value of the albedo of snow that is reached for melting ! snow ! XANSFRACMEL = 1.0 ! (-) ! ! Threeshold temperature above which the snow albedo starts to decrease ! XTEMPANS = 27 4.15 ! (K) ! ! Minimum value of the albedo of snow reached under canopy vegetation: ! XANSMINMEB = 0.30 ! (-) ! ! Height of aged snow in glacier case (allows Pn=1) ! XHGLA = 3 3.3 !(m) ! ! Coefficient for calculation of snow fraction over vegetation ! XWSNV = 5.0 !(-) ! ! Water direct albedo coefficient (option \"TA96\") ! XALBCOEF_TA96 = 0.037 ! ! Water diffuse albedo ! XALBSCA_WAT = 0.06 ! Coefficient for calculation of floodplain fraction over vegetation ! XCFFV = 4.0 ! ! Roughness length of pure snow surface (m) ! XZ0SN = 0.001 ! ! Roughness length for heat of pure snow surface (m) ! XZ0HSN = 0.0001 ! ! Snow Melt timescale with D95 (s): needed to prevent time step ! dependence of melt when snow fraction < unity. ! XTAU_SMELT = 30 0. ! ! Extinction coefficient for view factor for long-wave radiation ! XTAU_LW = 0.5 ! - ! ! MEB resistance increase factor for canopy air sapce. ! If=1, then NO effect. It is generally >=1 ! and is needed because the original parameterization ! does not account for extremely stable conditions, ! such as over a snowpack. ! XRAGNC_FACTOR = 20 0. ! - ! ! MEB maximum intercepted water fraction (on vegetation) ! XKDELTA_WR = 0.25 ! - ! ! NAM_SURF_SNOW_CSTS ! ! Roughness length ratio between ice and snow XZ0ICEZ0SNOW = 1 0. ! ! 3 bands spectral albedo for glacier ice (CROCUS) ! Default values from Lejeune et al 2009 (Zongo, Bolivia) XALBICE1 = 0.38 XALBICE2 = 0.23 XALBICE3 = 0.08 ! ! Gerbaux et al 2005 (Saint Sorlin) ! PALBICE1=0.23 ! PALBICE2=0.16 ! PALBICE3=0.05 ! ! Density threshold for ice detection kg.m-3 XRHOTHRESHOLD_ICE = 85 0. ! ! Parameters for ageing effect on albedo XVAGING_NOGLACIER = 6 0. XVAGING_GLACIER = 90 0. ! percentage of the total pore volume to compute the max liquid water holding capacity   !Pahaut 1976 XPERCENTAGEPORE = 0.05 ! ! Roughness length for flood (m) ! XZ0FLOOD = 0.0002 !------------------------------------------------------------------------------- ! ! * Reproductibility for SURFEX OPER ! LREPROD_OPER = . FALSE . ! default ! ! * Vegetation parameters for tropical forest ! !XEVERG_RSMIN : old = 250. (Manzi 1993) but observations range !               from 140 to 180. According to Delire et al. (1997) and !               new tests over 6 local sites, 175. is recommended !               Should be the default after check with AROME/ALADIN ! XEVERG_RSMIN = 17 5. !Rsmin ! !XEVERG_VEG : old = 0.99 (Manzi 1993) but according to Delire et al. (1997) and !             new tests over 6 local sites, 1.0 is recommended because 0.99 !             induces unrealistic bare soil evaporation for Tropical forest !             Should be the default after check with AROME/ALADIN ! XEVERG_VEG = 1.0 !Veg fraction ! ! * Soil depth average ! CDGAVG = 'INV' ! ! * Soil depth with ISBA-DF ! CDGDIF = 'ROOT' ! ! * wind implicitation option ! CIMPLICIT_WIND = 'NEW' ! ! * qsat computation ! CQSAT = 'NEW' ! ! * Charnock parameter ! CCHARNOCK = 'NEW' ! !------------------------------------------------------------------------------- !*       2. User values !------------------------------------------------------------------------------- ! CALL GET_LUOUT ( CPROGNAME , ILUOUT ) ! CALL OPEN_NAMELIST ( CPROGNAME , ILUNAM ) ! ! CALL POSNAM(ILUNAM,'NAM_SURF_CSTS',GFOUND,ILUOUT) !IF (GFOUND) READ(UNIT=ILUNAM,NML=NAM_SURF_CSTS) ! IF ( LMEBREC ) THEN ! Fraction of maximum value of the albedo of snow that is reached for melting ! snow ! XANSFRACMEL = 0.85 ! (-) ! ! Threeshold temperature above which the snow albedo starts to decrease ! XTEMPANS = 26 8.15 ! (K) ! ENDIF ! ! CALL POSNAM(ILUNAM,'NAM_SURF_SNOW_CSTS',GFOUND,ILUOUT) !IF (GFOUND) READ(UNIT=ILUNAM,NML=NAM_SURF_SNOW_CSTS) ! !------------------------------------------------------------------------------- !*       3. For Reproductibility !------------------------------------------------------------------------------- ! ! CALL POSNAM(ILUNAM,'NAM_REPROD_OPER',GFOUND,ILUOUT) !IF (GFOUND) READ(UNIT=ILUNAM,NML=NAM_REPROD_OPER) ! CALL TEST_NAM_VAR_SURF ( ILUOUT , 'CDGAVG' , CDGAVG , 'ARI' , 'INV' ) CALL TEST_NAM_VAR_SURF ( ILUOUT , 'CDGDIF' , CDGDIF , 'SOIL' , 'ROOT' ) CALL TEST_NAM_VAR_SURF ( ILUOUT , 'CIMPLICIT_WIND' , CIMPLICIT_WIND , 'NEW' , 'OLD' ) CALL TEST_NAM_VAR_SURF ( ILUOUT , 'CQSAT' , CIMPLICIT_WIND , 'NEW' , 'OLD' ) CALL TEST_NAM_VAR_SURF ( ILUOUT , 'CCHARNOCK' , CIMPLICIT_WIND , 'NEW' , 'OLD' ) ! CALL TEST_NAM_VAR_SURF ( ILUOUT , 'XEVERG_RSMIN' , XEVERG_RSMIN , 17 5.0 , 25 0.0 ) CALL TEST_NAM_VAR_SURF ( ILUOUT , 'XEVERG_VEG' , XEVERG_VEG , 1.0 , 0.99 ) ! IF ( LREPROD_OPER ) THEN XEVERG_RSMIN = 25 0. XEVERG_VEG = 0.99 CDGAVG = 'ARI' CQSAT = 'OLD' CCHARNOCK = 'OLD' ENDIF ! ! Water global albedo (option \"UNIF\") ! IF ( XALBWAT == XUNDEF ) THEN IF ( LREPROD_OPER ) THEN XALBWAT = 0.135 ELSE XALBWAT = 0.065 ENDIF ENDIF ! ! Sea ice albedo ! IF ( XALBSEAICE == XUNDEF ) THEN IF ( LREPROD_OPER ) THEN XALBSEAICE = 0.85 ELSE XALBSEAICE = 0.71 ENDIF ENDIF ! ! water ice and snow albedo ! IF ( XALBWATICE == XUNDEF ) THEN IF ( LREPROD_OPER ) THEN XALBWATICE = 0.85 ELSE XALBWATICE = 0.40 ENDIF ENDIF ! IF ( XALBWATSNOW == XUNDEF ) THEN IF ( LREPROD_OPER ) THEN XALBWATSNOW = 0.85 ELSE XALBWATSNOW = 0.60 ENDIF ENDIF ! ! Water emissivity ! IF ( XEMISWAT == XUNDEF ) THEN IF ( LREPROD_OPER ) THEN XEMISWAT = 0.98 ELSE XEMISWAT = 0.96 ENDIF ENDIF ! ! Sea ice emissivity ! IF ( XEMISWATICE == XUNDEF ) THEN IF ( LREPROD_OPER ) THEN XEMISWATICE = 1.0 ELSE XEMISWATICE = 0.97 ENDIF ENDIF ! ! ! Snow emissivity: ! IF ( XEMISSN == XUNDEF ) THEN IF ( LREPROD_OPER ) THEN XEMISSN = 1.0 ELSE XEMISSN = 0.99 ENDIF ENDIF ! !------------------------------------------------------------------------------- ! CALL CLOSE_NAMELIST ( CPROGNAME , ILUNAM ) ! IF ( LHOOK ) CALL DR_HOOK ( 'INI_SURF_CSTS' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE INI_SURF_CSTS","tags":"","loc":"proc/ini_surf_csts.html"},{"title":"URBAN_FLUXES – Town Energy Balance (TEB) model API docs","text":"subroutine URBAN_FLUXES(TOP, T, B, DMT, HIMPLICIT_WIND, PT_CANYON, PPEW_A_COEF, PPEW_B_COEF, PEXNS, PRHOA, PVMOD, PH_TRAFFIC, PLE_TRAFFIC, PAC_WL, PCD, PDF_RF, PDN_RF, PDF_RD, PDN_RD, PRNSN_RF, PHSN_RF, PLESN_RF, PGSN_RF, PRNSN_RD, PHSN_RD, PLESN_RD, PGSN_RD, PMELT_RF, PDQS_RF, PMELT_RD, PDQS_RD, PDQS_WL_A, PDQS_WL_B, PFLX_BLD_RF, PFLX_BLD_WL_A, PFLX_BLD_WL_B, PFLX_BLD_FL, PFLX_BLD_MA, PE_SHADING, PLEW_RF, PRN_GR, PH_GR, PLE_GR, PGFLUX_GR, PLEW_RD, PLE_WL_A, PLE_WL_B, PMELT_BLT, PUSTAR_TWN) Uses MODD_DIAG_MISC_TEB_n MODD_BEM_n YOMHOOK MODD_CSTS PARKIND1 MODD_SURF_PAR MODD_TEB_n MODD_TEB_OPTION_n Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B type(DIAG_MISC_TEB_t), intent(inout) :: DMT character(len=*), intent(in) :: HIMPLICIT_WIND real, intent(in), DIMENSION(:) :: PT_CANYON real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PH_TRAFFIC real, intent(in), DIMENSION(:) :: PLE_TRAFFIC real, intent(in), DIMENSION(:) :: PAC_WL real, intent(in), DIMENSION(:) :: PCD real, intent(in), DIMENSION(:) :: PDF_RF real, intent(in), DIMENSION(:) :: PDN_RF real, intent(in), DIMENSION(:) :: PDF_RD real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PRNSN_RF real, intent(in), DIMENSION(:) :: PHSN_RF real, intent(in), DIMENSION(:) :: PLESN_RF real, intent(in), DIMENSION(:) :: PGSN_RF real, intent(in), DIMENSION(:) :: PRNSN_RD real, intent(in), DIMENSION(:) :: PHSN_RD real, intent(in), DIMENSION(:) :: PLESN_RD real, intent(in), DIMENSION(:) :: PGSN_RD real, intent(in), DIMENSION(:) :: PMELT_RF real, intent(in), DIMENSION(:) :: PDQS_RF real, intent(in), DIMENSION(:) :: PMELT_RD real, intent(in), DIMENSION(:) :: PDQS_RD real, intent(in), DIMENSION(:) :: PDQS_WL_A real, intent(in), DIMENSION(:) :: PDQS_WL_B real, intent(in), DIMENSION(:) :: PFLX_BLD_RF real, intent(in), DIMENSION(:) :: PFLX_BLD_WL_A real, intent(in), DIMENSION(:) :: PFLX_BLD_WL_B real, intent(in), DIMENSION(:) :: PFLX_BLD_FL real, intent(in), DIMENSION(:) :: PFLX_BLD_MA real, intent(in), DIMENSION(:) :: PE_SHADING real, intent(in), DIMENSION(:) :: PLEW_RF real, intent(in), DIMENSION(:) :: PRN_GR real, intent(in), DIMENSION(:) :: PH_GR real, intent(in), DIMENSION(:) :: PLE_GR real, intent(in), DIMENSION(:) :: PGFLUX_GR real, intent(in), DIMENSION(:) :: PLEW_RD real, intent(out), DIMENSION(:) :: PLE_WL_A real, intent(out), DIMENSION(:) :: PLE_WL_B real, intent(out), DIMENSION(:) :: PMELT_BLT real, intent(out), DIMENSION(:) :: PUSTAR_TWN Contents Source Code URBAN_FLUXES Source Code SUBROUTINE URBAN_FLUXES ( TOP , T , B , DMT , HIMPLICIT_WIND , PT_CANYON , PPEW_A_COEF , PPEW_B_COEF , & PEXNS , PRHOA , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , PAC_WL , PCD , PDF_RF , & PDN_RF , PDF_RD , PDN_RD , PRNSN_RF , PHSN_RF , PLESN_RF , PGSN_RF , & PRNSN_RD , PHSN_RD , PLESN_RD , PGSN_RD , PMELT_RF , PDQS_RF , PMELT_RD , & PDQS_RD , PDQS_WL_A , PDQS_WL_B , PFLX_BLD_RF , PFLX_BLD_WL_A , & PFLX_BLD_WL_B , PFLX_BLD_FL , PFLX_BLD_MA , PE_SHADING , PLEW_RF , & PRN_GR , PH_GR , PLE_GR , PGFLUX_GR , & PLEW_RD , PLE_WL_A , PLE_WL_B , PMELT_BLT , PUSTAR_TWN ) !   ########################################################################## ! !!****  *URBAN_FLUXES* computes fluxes on urbanized surfaces !! !!    PURPOSE !!    ------- ! ! !!**  METHOD !     ------ ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !!                     12/02 (A. Lemonsu) modifications of emissivity and Tstown !!                     07/07 (P. LeMoigne) expression of latent heat fluxes as !!                           functions of w'theta' instead of w'T' !!                     17/10 (G. Pigeon)  computation of anthropogenic heat due !!                            to domestic heating !!      Modified    09/2012 : B. Decharme New wind implicitation !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS , ONLY : XCPD ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT ! CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option !                                                     ! 'OLD' = direct !                                                     ! 'NEW' = Taylor serie, order 1 REAL , DIMENSION (:), INTENT ( IN ) :: PT_CANYON ! canyon air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PH_TRAFFIC ! anthropogenic sensible !                                                  ! heat fluxes due to traffic REAL , DIMENSION (:), INTENT ( IN ) :: PLE_TRAFFIC ! anthropogenic latent !                                                  ! heat fluxes due to traffic REAL , DIMENSION (:), INTENT ( IN ) :: PAC_WL ! surface conductance !                                                 ! for heat transfer !                                                 ! between wall and canyon REAL , DIMENSION (:), INTENT ( IN ) :: PCD ! drag coefficient REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RF ! snow-free    roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RF ! snow-covered roof fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDF_RD ! snow-free    road fraction REAL , DIMENSION (:), INTENT ( IN ) :: PDN_RD ! snow-covered road fraction ! REAL , DIMENSION (:), INTENT ( IN ) :: PRNSN_RF ! net radiation over snow REAL , DIMENSION (:), INTENT ( IN ) :: PHSN_RF ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PLESN_RF ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PGSN_RF ! flux under the snow REAL , DIMENSION (:), INTENT ( IN ) :: PRNSN_RD ! net radiation over snow REAL , DIMENSION (:), INTENT ( IN ) :: PHSN_RD ! sensible heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PLESN_RD ! latent heat flux over snow REAL , DIMENSION (:), INTENT ( IN ) :: PGSN_RD ! flux under the snow ! REAL , DIMENSION (:), INTENT ( IN ) :: PMELT_RF ! snow melting on roof REAL , DIMENSION (:), INTENT ( IN ) :: PDQS_RF ! storage inside roofs REAL , DIMENSION (:), INTENT ( IN ) :: PMELT_RD ! snow melting on road REAL , DIMENSION (:), INTENT ( IN ) :: PDQS_RD ! storage inside roads REAL , DIMENSION (:), INTENT ( IN ) :: PDQS_WL_A ! storage inside walls REAL , DIMENSION (:), INTENT ( IN ) :: PDQS_WL_B ! storage inside walls REAL , DIMENSION (:), INTENT ( IN ) :: PFLX_BLD_RF ! heat flx from bld to roof REAL , DIMENSION (:), INTENT ( IN ) :: PFLX_BLD_WL_A ! heat flx from bld to wall A REAL , DIMENSION (:), INTENT ( IN ) :: PFLX_BLD_WL_B ! heat flx from bld to wall B REAL , DIMENSION (:), INTENT ( IN ) :: PFLX_BLD_FL ! heat flx from bld to floor REAL , DIMENSION (:), INTENT ( IN ) :: PFLX_BLD_MA ! heat flx from bld to mass REAL , DIMENSION (:), INTENT ( IN ) :: PE_SHADING ! energy not ref., nor absorbed, nor !trans. by glazing [W !m-2(win)] ! REAL , DIMENSION (:), INTENT ( IN ) :: PLEW_RF ! latent heat flux over snow-free roof REAL , DIMENSION (:), INTENT ( IN ) :: PLEW_RD ! latent heat flux of snow-free road REAL , DIMENSION (:), INTENT ( IN ) :: PRN_GR ! net radiation over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PH_GR ! sensible heat flux over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PLE_GR ! latent heat flux over greenroof REAL , DIMENSION (:), INTENT ( IN ) :: PGFLUX_GR ! flux through the greenroof ! REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_WL_A ! latent heat flux over wall REAL , DIMENSION (:), INTENT ( OUT ) :: PLE_WL_B ! latent heat flux over wall ! REAL , DIMENSION (:), INTENT ( OUT ) :: PMELT_BLT ! snow melting for town ! REAL , DIMENSION (:), INTENT ( OUT ) :: PUSTAR_TWN ! friction velocity over town ! !*      0.2    declarations of local variables ! REAL , DIMENSION ( SIZE ( PRHOA )) :: ZH_RF_SNFREE REAL , DIMENSION ( SIZE ( PRHOA )) :: ZRN_RF_SNFREE REAL , DIMENSION ( SIZE ( PRHOA )) :: ZUSTAR2 ! square of friction velocity (m2/s2) REAL , DIMENSION ( SIZE ( PRHOA )) :: ZVMOD ! Wind REAL , DIMENSIOn ( SIZE ( PRHOA )) :: ZINTER ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_FLUXES' , 0 , ZHOOK_HANDLE ) ! !*      1.     Fluxes at snow-free roofs !              ------------------------- ! !                                            net radiation ! ! ZRN_RF_SNFREE (:) = DMT % XABS_SW_ROOF (:) + DMT % XABS_LW_ROOF (:) ! !                                            sensible heat flux ! ZH_RF_SNFREE (:) = DMT % XH_ROOF (:) ! !------------------------------------------------------------------------------- ! !*      2.     Fluxes at snow-free roads !              ------------------------- ! !                                            net radiation ! DMT % XRN_ROAD (:) = DMT % XABS_SW_ROAD (:) + DMT % XABS_LW_ROAD (:) ! !------------------------------------------------------------------------------- ! !*      3.     Fluxes at walls !              --------------- ! !                                            net radiation ! DMT % XRN_WALL_A (:) = DMT % XABS_SW_WALL_A (:) + DMT % XABS_LW_WALL_A (:) DMT % XRN_WALL_B (:) = DMT % XABS_SW_WALL_B (:) + DMT % XABS_LW_WALL_B (:) ! IF ( TOP % CBEM == \"BEM\" ) THEN ZINTER (:) = DMT % XABS_SW_WIN (:) + DMT % XABS_LW_WIN (:) DMT % XRN_WALL_A (:) = DMT % XRN_WALL_A (:) * ( 1. - B % XGR (:)) + ZINTER (:) * B % XGR (:) DMT % XRN_WALL_B (:) = DMT % XRN_WALL_B (:) * ( 1. - B % XGR (:)) + ZINTER (:) * B % XGR (:) ENDIF ! !                                            heat flux into the ground ! DMT % XGFLUX_WALL_A (:) = DMT % XRN_WALL_A (:) - DMT % XH_WALL_A (:) DMT % XGFLUX_WALL_B (:) = DMT % XRN_WALL_B (:) - DMT % XH_WALL_B (:) ! !                                            sensible heat flux ! !before -> PH_WL in [W.m-2(wall)] ZINTER (:) = PAC_WL (:) * XCPD * PRHOA (:) / PEXNS (:) * ( B % XT_WIN1 (:) - PT_CANYON (:)) + PE_SHADING (:) ! DMT % XH_WALL_A (:) = ( 1. - B % XGR (:)) * DMT % XH_WALL_A (:) + B % XGR (:) * ZINTER (:) DMT % XH_WALL_B (:) = ( 1. - B % XGR (:)) * DMT % XH_WALL_B (:) + B % XGR (:) * ZINTER (:) ! IF ( TOP % CBEM == \"BEM\" ) THEN ZINTER (:) = B % XF_WASTE_CAN (:) * DMT % XH_WASTE (:) / T % XWALL_O_HOR (:) DMT % XH_WALL_A (:) = DMT % XH_WALL_A (:) + ZINTER (:) DMT % XH_WALL_B (:) = DMT % XH_WALL_B (:) + ZINTER (:) ENDIF ! IF ( TOP % CBEM == \"BEM\" ) THEN !after PH_WALL in [W.m-2(facade=wall + win)] ZINTER (:) = B % XF_WASTE_CAN (:) * DMT % XLE_WASTE (:) / T % XWALL_O_HOR (:) ELSE ZINTER (:) = 0. ENDIF PLE_WL_A (:) = ZINTER (:) PLE_WL_B (:) = ZINTER (:) ! !------------------------------------------------------------------------------- ! !*      4.     Snow-free and snow-covered surfaces averaging !              --------------------------------------------- ! !*      4.1    Roads !              ----- ! !                                            heat flux into the ground ! DMT % XGFLUX_ROAD (:) = PDF_RD (:) * ( DMT % XRN_ROAD (:) - DMT % XH_ROAD (:) - PLEW_RD (:) )& + PDN_RD (:) * PGSN_RD (:) ! !                                            net radiation ! DMT % XRN_ROAD (:) = DMT % XRN_ROAD (:) * PDF_RD (:) + PRNSN_RD (:) * PDN_RD (:) ! !                                            sensible heat flux !                                            total latent heat of evaporation from !                                            the road (snow free + snow) ! ! sensible heat flux ! DMT % XH_ROAD (:) = DMT % XH_ROAD (:) * PDF_RD (:) + PHSN_RD (:) * PDN_RD (:) ! total latent heat of evaporation from  the road (snow free + snow) ! DMT % XLE_ROAD (:) = PLEW_RD (:) * PDF_RD (:) + PLESN_RD (:) * PDN_RD (:) ! !*      4.2    Roofs !              ----- ! !                                            heat flux into the ground ! DMT % XGFLUX_STRLROOF (:) = PDF_RF (:) * ( ZRN_RF_SNFREE (:) - ZH_RF_SNFREE (:) - PLEW_RF (:)) + PDN_RF (:) * PGSN_RF (:) DMT % XGFLUX_ROOF (:) = ( 1. - T % XGREENROOF (:)) * DMT % XGFLUX_STRLROOF (:) + T % XGREENROOF (:) * PGFLUX_GR (:) ! ! !                                            net radiation ! DMT % XRN_STRLROOF (:) = ZRN_RF_SNFREE (:) * PDF_RF (:) + PRNSN_RF (:) * PDN_RF (:) DMT % XRN_ROOF (:) = ( 1. - T % XGREENROOF (:)) * DMT % XRN_STRLROOF (:) + T % XGREENROOF (:) * PRN_GR (:) ! !                                            sensible heat flux !                                            total latent heat of evaporation from !                                            the roof (snow free + snow) ! ! sensible heat flux ! DMT % XH_STRLROOF (:) = DMT % XH_ROOF (:) * PDF_RF (:) + PHSN_RF (:) * PDN_RF (:) DMT % XH_ROOF (:) = ( 1. - T % XGREENROOF (:)) * DMT % XH_STRLROOF (:) + T % XGREENROOF (:) * PH_GR (:) ! ! ! total latent heat of evaporation from the roof (snow free + snow) ! DMT % XLE_STRLROOF (:) = PLEW_RF (:) * PDF_RF (:) + PLESN_RF (:) * PDN_RF (:) DMT % XLE_ROOF (:) = ( 1. - T % XGREENROOF (:)) * DMT % XLE_STRLROOF (:) + T % XGREENROOF (:) * PLE_GR (:) ! IF ( TOP % CBEM == \"BEM\" ) THEN DMT % XH_ROOF (:) = DMT % XH_ROOF (:) + ( 1 - B % XF_WASTE_CAN (:)) * DMT % XH_WASTE (:) / T % XBLD (:) DMT % XLE_ROOF (:) = DMT % XLE_ROOF (:) + ( 1 - B % XF_WASTE_CAN (:)) * DMT % XLE_WASTE (:) / T % XBLD (:) ENDIF !------------------------------------------------------------------------------- ! !*      5.     Momentum fluxes !              --------------- ! PUSTAR_TWN (:) = XUNDEF ! IF (. NOT . TOP % LCANOPY ) THEN ! ZUSTAR2 (:) = 0.0 ZVMOD (:) = PVMOD (:) ! IF ( HIMPLICIT_WIND == 'OLD' ) THEN ! old implicitation ZUSTAR2 (:) = ( PCD (:) * PVMOD (:) * PPEW_B_COEF (:)) / ( 1.0 - PRHOA (:) * PCD (:) * PVMOD (:) * PPEW_A_COEF (:)) ELSE ! new implicitation ZUSTAR2 (:) = ( PCD (:) * PVMOD (:) * ( 2. * PPEW_B_COEF (:) - PVMOD (:))) / & ( 1.0 - 2.0 * PRHOA (:) * PCD (:) * PVMOD (:) * PPEW_A_COEF (:)) ! ZVMOD (:) = PRHOA (:) * PPEW_A_COEF (:) * ZUSTAR2 (:) + PPEW_B_COEF (:) ZVMOD (:) = MAX ( ZVMOD (:), 0. ) ! WHERE ( PPEW_A_COEF (:) /= 0. ) ZUSTAR2 (:) = MAX ( ( ZVMOD (:) - PPEW_B_COEF (:) ) / ( PRHOA (:) * PPEW_A_COEF (:)), 0. ) ENDWHERE ! ENDIF ! PUSTAR_TWN (:) = SQRT ( ZUSTAR2 (:)) ! ENDIF ! !------------------------------------------------------------------------------- ! !*      6.     Averaged fluxes !              --------------- ! !*      6.1    Built fraction !              -------------- ! DMT % XRN_BLT (:) = ( T % XBLD (:) * DMT % XRN_ROOF (:) & + T % XROAD (:) * DMT % XRN_ROAD (:) & + 0.5 * T % XWALL_O_HOR (:) * DMT % XRN_WALL_A (:) & + 0.5 * T % XWALL_O_HOR (:) * DMT % XRN_WALL_B (:)) & / ( T % XROAD (:) + T % XBLD (:)) ! DMT % XH_BLT (:) = ( T % XBLD (:) * DMT % XH_ROOF (:) & + T % XROAD (:) * DMT % XH_ROAD (:) & + 0.5 * T % XWALL_O_HOR (:) * DMT % XH_WALL_A (:) & + 0.5 * T % XWALL_O_HOR (:) * DMT % XH_WALL_B (:)) & / ( T % XROAD (:) + T % XBLD (:)) ! DMT % XLE_BLT (:) = ( T % XBLD (:) * DMT % XLE_ROOF (:) & + T % XROAD (:) * DMT % XLE_ROAD (:) & + 0.5 * T % XWALL_O_HOR (:) * PLE_WL_A (:) & + 0.5 * T % XWALL_O_HOR (:) * PLE_WL_B (:)) & / ( T % XROAD (:) + T % XBLD (:)) ! DMT % XGFLUX_BLT (:) = ( T % XBLD (:) * DMT % XGFLUX_ROOF (:) & + T % XROAD (:) * DMT % XGFLUX_ROAD (:) & + 0.5 * T % XWALL_O_HOR (:) * DMT % XGFLUX_WALL_A (:) & + 0.5 * T % XWALL_O_HOR (:) * DMT % XGFLUX_WALL_B (:)) & / ( T % XROAD (:) + T % XBLD (:)) ! PMELT_BLT (:) = ( T % XBLD (:) * PMELT_RF (:) * PDN_RF (:) & + T % XROAD (:) * PMELT_RD (:) * PDN_RD (:)) & / ( T % XROAD (:) + T % XBLD (:)) ! DMT % XDQS_TOWN (:) = ( T % XBLD (:) * PDQS_RF (:) & + T % XROAD (:) * PDQS_RD (:) & + 0.5 * T % XWALL_O_HOR (:) * PDQS_WL_A (:) & + 0.5 * T % XWALL_O_HOR (:) * PDQS_WL_B (:) ) & / ( T % XROAD (:) + T % XBLD (:)) ! IF ( TOP % CBEM == \"DEF\" ) THEN DMT % XQF_BLD (:) = ( ZH_RF_SNFREE (:) + PLEW_RF (:) + & PDQS_RF (:) - ZRN_RF_SNFREE (:) ) * PDF_RF (:) & + ( PDQS_RF (:) - PGSN_RF (:) ) * PDN_RF (:) & + 0.5 * T % XWALL_O_HOR (:) / T % XBLD (:) * ( DMT % XH_WALL_A (:) + PLE_WL_A (:) + PDQS_WL_A (:) - DMT % XRN_WALL_A (:) ) & + 0.5 * T % XWALL_O_HOR (:) / T % XBLD (:) * ( DMT % XH_WALL_B (:) + PLE_WL_B (:) + PDQS_WL_B (:) - DMT % XRN_WALL_B (:) ) DMT % XFLX_BLD (:) = XUNDEF ELSEIF ( TOP % CBEM == \"BEM\" ) THEN DMT % XQF_BLD (:) = DMT % XQIN (:) * B % XN_FLOOR (:) + DMT % XHVAC_COOL (:) + DMT % XHVAC_HEAT (:) DMT % XFLX_BLD (:) = PFLX_BLD_RF (:) + 0.5 * T % XWALL_O_HOR (:) / T % XBLD (:) * PFLX_BLD_WL_A (:) & + 0.5 * T % XWALL_O_HOR (:) / T % XBLD (:) * PFLX_BLD_WL_B (:) & + PFLX_BLD_FL (:) + PFLX_BLD_MA (:) ENDIF ! DMT % XQF_TOWN (:) = T % XBLD (:) * DMT % XQF_BLD (:) + PH_TRAFFIC (:) + T % XH_INDUSTRY (:) + PLE_TRAFFIC (:) + T % XLE_INDUSTRY (:) ! !Flux from the building to its structure -> we need to add the component to the !floor, the mass and the window ! ! IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_FLUXES' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE URBAN_FLUXES","tags":"","loc":"proc/urban_fluxes.html"},{"title":"TEST_NAM_VARC0_SURF – Town Energy Balance (TEB) model API docs","text":"subroutine TEST_NAM_VARC0_SURF(KLUOUT, HNAME, HVAR, HVALUE1, HVALUE2, HVALUE3, HVALUE4, HVALUE5, HVALUE6, HVALUE7, HVALUE8, HVALUE9, HVALUE10) Uses MODI_ABOR1_SFX PARKIND1 YOMHOOK Arguments Type Intent Optional Attributes Name integer, intent(in) :: KLUOUT character(len=*), intent(in) :: HNAME character(len=*), intent(in) :: HVAR character(len=*), intent(in), optional :: HVALUE1 character(len=*), intent(in), optional :: HVALUE2 character(len=*), intent(in), optional :: HVALUE3 character(len=*), intent(in), optional :: HVALUE4 character(len=*), intent(in), optional :: HVALUE5 character(len=*), intent(in), optional :: HVALUE6 character(len=*), intent(in), optional :: HVALUE7 character(len=*), intent(in), optional :: HVALUE8 character(len=*), intent(in), optional :: HVALUE9 character(len=*), intent(in), optional :: HVALUE10 Contents Source Code TEST_NAM_VARC0_SURF Source Code SUBROUTINE TEST_NAM_VARC0_SURF ( KLUOUT , HNAME , HVAR , & HVALUE1 , HVALUE2 , HVALUE3 , & HVALUE4 , HVALUE5 , HVALUE6 , & HVALUE7 , HVALUE8 , HVALUE9 , & HVALUE10 ) ! INTEGER , INTENT ( IN ) :: KLUOUT ! output listing logical unit CHARACTER ( LEN =* ) , INTENT ( IN ) :: HNAME ! name of the variable to test CHARACTER ( LEN =* ) , INTENT ( IN ) :: HVAR ! variable to test CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE1 ! first possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE2 ! second possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE3 ! third possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE4 ! fourth possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE5 ! fiveth possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE6 ! sixth possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE7 ! seventh possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE8 ! eightth possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE9 ! nineth possible value CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: HVALUE10 ! tenth possible value ! END SUBROUTINE TEST_NAM_VARC0_SURF","tags":"","loc":"proc/test_nam_varc0_surf.html"},{"title":"TEST_NAM_VARL0_SURF – Town Energy Balance (TEB) model API docs","text":"subroutine TEST_NAM_VARL0_SURF(KLUOUT, HNAME, OVAR, OVALUE) Uses MODI_ABOR1_SFX PARKIND1 YOMHOOK Arguments Type Intent Optional Attributes Name integer, intent(in) :: KLUOUT character(len=*), intent(in) :: HNAME logical, intent(in) :: OVAR logical, intent(in), optional :: OVALUE Contents Source Code TEST_NAM_VARL0_SURF Source Code SUBROUTINE TEST_NAM_VARL0_SURF ( KLUOUT , HNAME , OVAR , OVALUE ) ! INTEGER , INTENT ( IN ) :: KLUOUT ! output listing logical unit CHARACTER ( LEN =* ) , INTENT ( IN ) :: HNAME ! name of the variable to test LOGICAL , INTENT ( IN ) :: OVAR ! variable to test LOGICAL , INTENT ( IN ), OPTIONAL :: OVALUE ! possible value ! END SUBROUTINE TEST_NAM_VARL0_SURF","tags":"","loc":"proc/test_nam_varl0_surf.html"},{"title":"TEST_NAM_VARN0_SURF – Town Energy Balance (TEB) model API docs","text":"subroutine TEST_NAM_VARN0_SURF(KLUOUT, HNAME, KVAR, KVALUE1, KVALUE2, KVALUE3, KVALUE4, KVALUE5, KVALUE6, KVALUE7, KVALUE8, KVALUE9, KVALUE10) Uses MODI_ABOR1_SFX PARKIND1 YOMHOOK Arguments Type Intent Optional Attributes Name integer, intent(in) :: KLUOUT character(len=*), intent(in) :: HNAME integer, intent(in) :: KVAR integer, intent(in), optional :: KVALUE1 integer, intent(in), optional :: KVALUE2 integer, intent(in), optional :: KVALUE3 integer, intent(in), optional :: KVALUE4 integer, intent(in), optional :: KVALUE5 integer, intent(in), optional :: KVALUE6 integer, intent(in), optional :: KVALUE7 integer, intent(in), optional :: KVALUE8 integer, intent(in), optional :: KVALUE9 integer, intent(in), optional :: KVALUE10 Contents Source Code TEST_NAM_VARN0_SURF Source Code SUBROUTINE TEST_NAM_VARN0_SURF ( KLUOUT , HNAME , KVAR , & KVALUE1 , KVALUE2 , KVALUE3 , & KVALUE4 , KVALUE5 , KVALUE6 , & KVALUE7 , KVALUE8 , KVALUE9 , & KVALUE10 ) ! INTEGER , INTENT ( IN ) :: KLUOUT ! output listing logical unit CHARACTER ( LEN =* ) , INTENT ( IN ) :: HNAME ! name of the variable to test INTEGER , INTENT ( IN ) :: KVAR ! variable to test INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE1 ! first possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE2 ! second possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE3 ! third possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE4 ! fourth possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE5 ! fiveth possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE6 ! sixth possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE7 ! seventh possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE8 ! eightth possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE9 ! nineth possible value INTEGER , INTENT ( IN ), OPTIONAL :: KVALUE10 ! 10th possible value ! END SUBROUTINE TEST_NAM_VARN0_SURF","tags":"","loc":"proc/test_nam_varn0_surf.html"},{"title":"TEST_NAM_VARX0_SURF – Town Energy Balance (TEB) model API docs","text":"subroutine TEST_NAM_VARX0_SURF(KLUOUT, HNAME, PVAR, PVALUE1, PVALUE2, PVALUE3, PVALUE4, PVALUE5, PVALUE6, PVALUE7, PVALUE8, PVALUE9, PVALUE10) Uses MODI_ABOR1_SFX PARKIND1 YOMHOOK Arguments Type Intent Optional Attributes Name integer, intent(in) :: KLUOUT character(len=*), intent(in) :: HNAME real, intent(in) :: PVAR real, intent(in), optional :: PVALUE1 real, intent(in), optional :: PVALUE2 real, intent(in), optional :: PVALUE3 real, intent(in), optional :: PVALUE4 real, intent(in), optional :: PVALUE5 real, intent(in), optional :: PVALUE6 real, intent(in), optional :: PVALUE7 real, intent(in), optional :: PVALUE8 real, intent(in), optional :: PVALUE9 real, intent(in), optional :: PVALUE10 Contents Source Code TEST_NAM_VARX0_SURF Source Code SUBROUTINE TEST_NAM_VARX0_SURF ( KLUOUT , HNAME , PVAR , & PVALUE1 , PVALUE2 , PVALUE3 , & PVALUE4 , PVALUE5 , PVALUE6 , & PVALUE7 , PVALUE8 , PVALUE9 , & PVALUE10 ) ! INTEGER , INTENT ( IN ) :: KLUOUT ! output listing logical unit CHARACTER ( LEN =* ) , INTENT ( IN ) :: HNAME ! name of the variable to test REAL , INTENT ( IN ) :: PVAR ! variable to test REAL , INTENT ( IN ), OPTIONAL :: PVALUE1 ! first possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE2 ! second possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE3 ! third possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE4 ! fourth possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE5 ! fiveth possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE6 ! sixth possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE7 ! seventh possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE8 ! eightth possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE9 ! nineth possible value REAL , INTENT ( IN ), OPTIONAL :: PVALUE10 ! 10th possible value ! END SUBROUTINE TEST_NAM_VARX0_SURF","tags":"","loc":"proc/test_nam_varx0_surf.html"},{"title":"BEM_MORPHO – Town Energy Balance (TEB) model API docs","text":"subroutine BEM_MORPHO(PBLD, PWALL_O_HOR, PBLD_HEIGHT, PWALL_O_BLD, B) Uses MODD_BEM_n Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PBLD real, intent(in), DIMENSION(:) :: PWALL_O_HOR real, intent(in), DIMENSION(:) :: PBLD_HEIGHT real, intent(out), DIMENSION(:) :: PWALL_O_BLD type(BEM_t), intent(inout) :: B Contents Source Code BEM_MORPHO Source Code SUBROUTINE BEM_MORPHO ( PBLD , PWALL_O_HOR , PBLD_HEIGHT , PWALL_O_BLD , B ) !##################################################################### ! !!**** *BEM_MORPHO !! !!    PURPOSE !!    ------- !! compute morphometric parameter of the building for BEM !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      G. Pigeon   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    10/2011 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_BEM_n , ONLY : BEM_t ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! REAL , DIMENSION (:), INTENT ( IN ) :: PBLD ! Urban horizontal building density REAL , DIMENSION (:), INTENT ( IN ) :: PWALL_O_HOR ! Wall to horizontal surface ratio REAL , DIMENSION (:), INTENT ( IN ) :: PBLD_HEIGHT ! Average building height [m] REAL , DIMENSION (:), INTENT ( OUT ) :: PWALL_O_BLD ! wall surface per ground building surface [m2(wall)/m2(bld)] TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! !*      0.2    Declarations of local variables ! REAL , DIMENSION ( SIZE ( PBLD )) :: ZF_AUX2 ! Auxiliar view factor ! !RJ: missing declaration INTEGER :: JJ ! !------------------------------------------------------------------------------ ! !*    1.   Verify floor height !          ------------------- ! DO JJ = 1 , SIZE ( PBLD ) IF ( B % XFLOOR_HEIGHT ( JJ ) < 2.5 ) THEN !    WRITE(ILUOUT,*) 'WARNING: B%XFLOOR_HEIGHT low ',B%XFLOOR_HEIGHT(JJ),' grid mesh number ',JJ B % XFLOOR_HEIGHT ( JJ ) = 2.5 ENDIF IF ( B % XFLOOR_HEIGHT ( JJ ) > PBLD_HEIGHT ( JJ )) THEN !    WRITE(ILUOUT,*) 'WARNING: B%XFLOOR_HEIGHT higher than PBLD_HEIGHT ',B%XFLOOR_HEIGHT(JJ),' grid mesh number ',JJ, & !                    'set to PBLD_HEIGHT' B % XFLOOR_HEIGHT ( JJ ) = PBLD_HEIGHT ( JJ ) ENDIF ! !*    1.   Verify location of HVAC release for very extended buildings !          ----------------------------------------------------------- ! IF ( PBLD ( JJ ) > 0.9999 . AND . B % XF_WASTE_CAN ( JJ ) > 0. ) THEN !    WRITE(ILUOUT,*) 'WARNING: B%XF_WASTE_CAN cannot be higher than 0. while PBLD is 0.9999',B%XF_WASTE_CAN(JJ), & !                    ' grid mesh number ',JJ,' set to 0.' B % XF_WASTE_CAN ( JJ ) = 0. ENDIF END DO ! !*       1.    floor number, relative surf. and view factors caculation !              -------------------------------------------------------- ! B % XN_FLOOR (:) = FLOAT ( NINT ( PBLD_HEIGHT (:) / B % XFLOOR_HEIGHT (:) )) PWALL_O_BLD (:) = PWALL_O_HOR (:) * ( 1. - B % XGR (:)) / PBLD (:) ! [m2(wall)/m2(bld)] B % XGLAZ_O_BLD (:) = PWALL_O_HOR (:) * B % XGR (:) / PBLD (:) ! [m2(win)/m2(bld)] WHERE ( B % XN_FLOOR > 1.5 ) !* more than 1 floor level -> the floor and the roof don't see each other ! !           ROOF !  |---------------------| !  |                     | !  |                     | !  |        MASS         | !  |---------------------| !  |---------------------| !  |        MASS         | !  |                     | !  |                     | !  |        FLOOR        | !  |---------------------| ! B % XMASS_O_BLD (:) = 2 * ( B % XN_FLOOR (:) - 1. ) ! [m2(mass)/m2(bld)] B % XFLOOR_HW_RATIO (:) = PWALL_O_HOR (:) / B % XN_FLOOR (:) / PBLD (:) / 2. ! B % XF_FLOOR_MASS (:) = ( B % XFLOOR_HW_RATIO (:) ** 2 + 1. ) ** 0.5 - B % XFLOOR_HW_RATIO (:) B % XF_FLOOR_WALL (:) = ( 1. - B % XF_FLOOR_MASS (:)) * ( 1. - B % XGR (:)) B % XF_FLOOR_WIN (:) = ( 1. - B % XF_FLOOR_MASS (:)) * B % XGR (:) B % XF_FLOOR_ROOF (:) = 0. ! no rad interaction between floor and roof ! ZF_AUX2 (:) = ( 1. - B % XF_FLOOR_MASS (:)) / B % XFLOOR_HW_RATIO (:) ! B % XF_WALL_FLOOR (:) = ZF_AUX2 (:) / ( 2. * B % XN_FLOOR (:) ) B % XF_WALL_MASS (:) = B % XF_WALL_FLOOR (:) * ( 2. * B % XN_FLOOR (:) - 2. ) B % XF_WALL_WIN (:) = ( 1. - ZF_AUX2 (:)) * B % XGR (:) ! B % XF_WIN_FLOOR (:) = B % XF_WALL_FLOOR (:) B % XF_WIN_MASS (:) = B % XF_WALL_MASS (:) B % XF_WIN_WALL (:) = ( 1. - B % XF_WIN_FLOOR (:) * 2. - B % XF_WIN_MASS (:) ) * ( 1. - B % XGR (:)) B % XF_WIN_WIN (:) = ( 1. - B % XF_WIN_FLOOR (:) * 2. - B % XF_WIN_MASS (:) ) * B % XGR (:) ! B % XF_MASS_FLOOR (:) = B % XF_FLOOR_MASS (:) / B % XMASS_O_BLD (:) B % XF_MASS_WALL (:) = PWALL_O_BLD (:) * B % XF_WALL_MASS (:) / B % XMASS_O_BLD (:) B % XF_MASS_WIN (:) = B % XGLAZ_O_BLD (:) * B % XF_WIN_MASS (:) / B % XMASS_O_BLD (:) ELSE WHERE !* 1 floor level -> no mass view factors ; roof and floor see each other ! !           ROOF !  |---------------------| !  |                     | !  |                     | !  |        FLOOR        | !  |---------------------| ! B % XMASS_O_BLD (:) = 0. B % XFLOOR_HW_RATIO (:) = PWALL_O_HOR (:) / PBLD (:) / 2. ! B % XF_FLOOR_ROOF (:) = ( B % XFLOOR_HW_RATIO (:) ** 2 + 1. ) ** 0.5 - B % XFLOOR_HW_RATIO (:) B % XF_FLOOR_MASS (:) = 0. B % XF_FLOOR_WALL (:) = ( 1. - B % XF_FLOOR_ROOF (:)) * ( 1. - B % XGR (:)) B % XF_FLOOR_WIN (:) = ( 1. - B % XF_FLOOR_ROOF (:)) * B % XGR (:) ! ZF_AUX2 (:) = ( 1. - B % XF_FLOOR_ROOF (:)) / B % XFLOOR_HW_RATIO (:) ! B % XF_WALL_FLOOR (:) = ZF_AUX2 (:) / 2. B % XF_WALL_MASS (:) = 0. B % XF_WALL_WIN (:) = ( 1. - ZF_AUX2 (:)) * B % XGR (:) ! B % XF_WIN_FLOOR (:) = B % XF_WALL_FLOOR (:) B % XF_WIN_MASS (:) = 0. B % XF_WIN_WALL (:) = ( 1. - B % XF_WIN_FLOOR (:) * 2. - B % XF_WIN_MASS (:) ) * ( 1. - B % XGR (:)) B % XF_WIN_WIN (:) = ( 1. - B % XF_WIN_FLOOR (:) * 2. - B % XF_WIN_MASS (:) ) * B % XGR (:) ! B % XF_MASS_FLOOR (:) = 0. B % XF_MASS_WALL (:) = 0. B % XF_MASS_WIN (:) = 0. END WHERE ! END SUBROUTINE BEM_MORPHO","tags":"","loc":"proc/bem_morpho.html"},{"title":"URBAN_DRAG – Town Energy Balance (TEB) model API docs","text":"subroutine URBAN_DRAG(TOP, T, B, HIMPLICIT_WIND, PTSTEP, PT_CANYON, PQ_CANYON, PU_CANYON, PT_LOWCAN, PQ_LOWCAN, PU_LOWCAN, PZ_LOWCAN, PTS_ROOF, PTS_ROAD, PTS_WALL, PTS_GARDEN, PDELT_SNOW_ROOF, PDELT_SNOW_ROAD, PEXNS, PEXNA, PTA, PQA, PPS, PRHOA, PZREF, PUREF, PVMOD, PWS_ROOF_MAX, PWS_ROAD_MAX, PPEW_A_COEF, PPEW_B_COEF, PPEW_A_COEF_LOWCAN, PPEW_B_COEF_LOWCAN, PQSAT_ROOF, PQSAT_ROAD, PDELT_ROOF, PDELT_ROAD, PCD, PCDN, PAC_ROOF, PAC_ROOF_WAT, PAC_WALL, PAC_ROAD, PAC_ROAD_WAT, PAC_TOP, PAC_GARDEN, PRI, PUW_ROAD, PUW_ROOF, PDUWDU_ROAD, PDUWDU_ROOF, PUSTAR_TOWN, PAC_WIN) Uses MODD_BEM_n MODE_THERMOS YOMHOOK MODD_CSTS PARKIND1 MODD_SURF_PAR MODI_URBAN_EXCH_COEF MODD_TEB_n MODD_TEB_OPTION_n MODE_CONV_DOE Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B character(len=*), intent(in) :: HIMPLICIT_WIND real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PT_CANYON real, intent(in), DIMENSION(:) :: PQ_CANYON real, intent(in), DIMENSION(:) :: PU_CANYON real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PU_LOWCAN real, intent(in), DIMENSION(:) :: PZ_LOWCAN real, intent(in), DIMENSION(:) :: PTS_ROOF real, intent(in), DIMENSION(:) :: PTS_ROAD real, intent(in), DIMENSION(:) :: PTS_WALL real, intent(in), DIMENSION(:) :: PTS_GARDEN real, intent(in), DIMENSION(:) :: PDELT_SNOW_ROOF real, intent(in), DIMENSION(:) :: PDELT_SNOW_ROAD real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PWS_ROOF_MAX real, intent(in), DIMENSION(:) :: PWS_ROAD_MAX real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPEW_A_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_B_COEF_LOWCAN real, intent(out), DIMENSION(:) :: PQSAT_ROOF real, intent(out), DIMENSION(:) :: PQSAT_ROAD real, intent(out), DIMENSION(:) :: PDELT_ROOF real, intent(out), DIMENSION(:) :: PDELT_ROAD real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN real, intent(out), DIMENSION(:) :: PAC_ROOF real, intent(out), DIMENSION(:) :: PAC_ROOF_WAT real, intent(out), DIMENSION(:) :: PAC_WALL real, intent(out), DIMENSION(:) :: PAC_ROAD real, intent(out), DIMENSION(:) :: PAC_ROAD_WAT real, intent(out), DIMENSION(:) :: PAC_TOP real, intent(in), DIMENSION(:) :: PAC_GARDEN real, intent(out), DIMENSION(:) :: PRI real, intent(out), DIMENSION(:) :: PUW_ROAD real, intent(out), DIMENSION(:) :: PUW_ROOF real, intent(out), DIMENSION(:) :: PDUWDU_ROAD real, intent(out), DIMENSION(:) :: PDUWDU_ROOF real, intent(out), DIMENSION(:) :: PUSTAR_TOWN real, intent(out), DIMENSION(:) :: PAC_WIN Contents Source Code URBAN_DRAG Source Code SUBROUTINE URBAN_DRAG ( TOP , T , B , HIMPLICIT_WIND , PTSTEP , PT_CANYON , PQ_CANYON , & PU_CANYON , PT_LOWCAN , PQ_LOWCAN , PU_LOWCAN , PZ_LOWCAN , & PTS_ROOF , PTS_ROAD , PTS_WALL , PTS_GARDEN , & PDELT_SNOW_ROOF , PDELT_SNOW_ROAD , PEXNS , PEXNA , PTA , & PQA , PPS , PRHOA , PZREF , PUREF , PVMOD , PWS_ROOF_MAX , & PWS_ROAD_MAX , PPEW_A_COEF , PPEW_B_COEF , & PPEW_A_COEF_LOWCAN , PPEW_B_COEF_LOWCAN , PQSAT_ROOF , & PQSAT_ROAD , PDELT_ROOF , PDELT_ROAD , PCD , PCDN , PAC_ROOF , & PAC_ROOF_WAT , PAC_WALL , PAC_ROAD , PAC_ROAD_WAT , PAC_TOP , & PAC_GARDEN , PRI , PUW_ROAD , PUW_ROOF , PDUWDU_ROAD , & PDUWDU_ROOF , PUSTAR_TOWN , PAC_WIN ) !   ########################################################################## ! !!****  *URBAN_DRAG* !! !!    PURPOSE !!    ------- ! !     Computes the surface drag over artificial surfaces as towns, !     taking into account the canyon like geometry of urbanized areas. ! ! !!**  METHOD !!    ------ ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/01/98 !!          01/00 (V. Masson)  separation of skimming, wake and isolated flows !!          09/00 (V. Masson)  use of Z0 for roads !!          12/02 (A. Lemonsu) convective speed w* in canyon !             04 (A. Lemonsu) z0h=z0m for resistance canyon-atmosphere !          03/08 (S. Leroyer) debug PU_CAN (1. * H/3) !          12/08 (S. Leroyer) option (TOP%CZ0H) for z0h applied on roof, road and town !!         09/12 B. Decharme new wind implicitation !          11/11 (G. Pigeon) apply only urban_exch_coef when necessary if !                            canopy/no canopy !          09/12 (G. Pigeon) add new formulation for outdoor conv. coef for !                            wall/roof/window !! !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS , ONLY : XLVTT , XPI , XCPD , XG , XKARMAN ! !USE MODE_SBLS USE MODE_THERMOS USE MODI_URBAN_EXCH_COEF USE MODE_CONV_DOE ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option !                                                     ! 'OLD' = direct !                                                     ! 'NEW' = Taylor serie, order 1 ! REAL , INTENT ( IN ) :: PTSTEP ! time-step REAL , DIMENSION (:), INTENT ( IN ) :: PT_CANYON ! canyon air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PQ_CANYON ! canyon air specific humidity. REAL , DIMENSION (:), INTENT ( IN ) :: PU_CANYON ! hor. wind in canyon REAL , DIMENSION (:), INTENT ( IN ) :: PU_LOWCAN ! wind near the road REAL , DIMENSION (:), INTENT ( IN ) :: PT_LOWCAN ! temp. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PQ_LOWCAN ! hum. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PZ_LOWCAN ! height of atm. var. near the road REAL , DIMENSION (:), INTENT ( IN ) :: PTS_ROOF ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_ROAD ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WALL ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GARDEN ! surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_SNOW_ROOF ! fraction of snow on roof REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_SNOW_ROAD ! fraction of snow on road REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PQA ! specific humidity ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PEXNA ! exner function ! at the lowest level REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! air density REAL , DIMENSION (:), INTENT ( IN ) :: PZREF ! reference height of the first ! atmospheric level (temperature) REAL , DIMENSION (:), INTENT ( IN ) :: PUREF ! reference height of the first ! atmospheric level (wind) REAL , DIMENSION (:), INTENT ( IN ) :: PWS_ROOF_MAX ! maximum deepness of roof REAL , DIMENSION (:), INTENT ( IN ) :: PWS_ROAD_MAX ! and water reservoirs (kg/m2) REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients (m2s/kg) REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling     (m/s) REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_A_COEF_LOWCAN ! implicit coefficients for wind coupling (m2s/kg) REAL , DIMENSION (:), INTENT ( IN ) :: PPEW_B_COEF_LOWCAN ! between low canyon wind and road (m/s) ! REAL , DIMENSION (:), INTENT ( OUT ) :: PQSAT_ROOF ! qsat(Ts) REAL , DIMENSION (:), INTENT ( OUT ) :: PQSAT_ROAD ! qsat(Ts) REAL , DIMENSION (:), INTENT ( OUT ) :: PDELT_ROOF ! water fraction on REAL , DIMENSION (:), INTENT ( OUT ) :: PDELT_ROAD ! snow-free surfaces REAL , DIMENSION (:), INTENT ( OUT ) :: PCD ! drag coefficient REAL , DIMENSION (:), INTENT ( OUT ) :: PCDN ! neutral drag coefficient REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_ROOF ! aerodynamical conductance REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_ROOF_WAT ! aerodynamical conductance (for water) REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_WALL ! aerodynamical conductance !                                                   ! between canyon air and !                                                   ! walls REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_ROAD ! aerodynamical conductance !                                                   ! between canyon air and !                                                   ! roads REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_ROAD_WAT ! aerodynamical conductance !                                                   ! between canyon air and !                                                   ! road (for water) REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_TOP ! aerodynamical conductance !                                                   ! between canyon top and atm. REAL , DIMENSION (:), INTENT ( IN ) :: PAC_GARDEN ! aerodynamical conductance !                                                   ! between canyon air and GARDEN areas REAL , DIMENSION (:), INTENT ( OUT ) :: PRI ! Town Richardson number ! REAL , DIMENSION (:), INTENT ( OUT ) :: PUW_ROAD ! Momentum flux for roads REAL , DIMENSION (:), INTENT ( OUT ) :: PUW_ROOF ! Momentum flux for roofs REAL , DIMENSION (:), INTENT ( OUT ) :: PDUWDU_ROAD ! REAL , DIMENSION (:), INTENT ( OUT ) :: PDUWDU_ROOF ! REAL , DIMENSION (:), INTENT ( OUT ) :: PUSTAR_TOWN ! Fraction velocity for town ! REAL , DIMENSION (:), INTENT ( OUT ) :: PAC_WIN ! aerodynamical conductance for window ! !*      0.2    declarations of local variables ! ! REAL , DIMENSION ( SIZE ( PTA )) :: ZTS_TOWN ! town averaged temp. REAL , DIMENSION ( SIZE ( PTA )) :: ZQ_TOWN ! town averaged hum. REAL , DIMENSION ( SIZE ( PTA )) :: ZAVDELT_ROOF ! averaged water frac. REAL , DIMENSION ( SIZE ( PTA )) :: ZQ_ROOF ! roof spec. hum. REAL , DIMENSION ( SIZE ( PTA )) :: ZZ0_ROOF ! roof roughness length REAL , DIMENSION ( SIZE ( PTA )) :: ZZ0_ROAD ! road roughness length REAL , DIMENSION ( SIZE ( PTA )) :: ZW_CAN ! ver. wind in canyon REAL , DIMENSION ( SIZE ( PTA )) :: ZRI ! Richardson number REAL , DIMENSION ( SIZE ( PTA )) :: ZLE_MAX ! maximum latent heat flux available REAL , DIMENSION ( SIZE ( PTA )) :: ZLE ! actual latent heat flux REAL , DIMENSION ( SIZE ( PTA )) :: ZRA_ROOF ! aerodynamical resistance REAL , DIMENSION ( SIZE ( PTA )) :: ZCH_ROOF ! drag coefficient for heat REAL , DIMENSION ( SIZE ( PTA )) :: ZRA_TOP ! aerodynamical resistance REAL , DIMENSION ( SIZE ( PTA )) :: ZCH_TOP ! drag coefficient for heat REAL , DIMENSION ( SIZE ( PTA )) :: ZRA_ROAD ! aerodynamical resistance REAL , DIMENSION ( SIZE ( PTA )) :: ZCH_ROAD ! drag coeifficient for heat REAL , DIMENSION ( SIZE ( PTA )) :: ZCD_ROAD ! road  surf. exchange coefficient REAL , DIMENSION ( SIZE ( PTA )) :: ZAC ! town aerodynamical conductance (not used) REAL , DIMENSION ( SIZE ( PTA )) :: ZRA ! town aerodynamical resistance  (not used) REAL , DIMENSION ( SIZE ( PTA )) :: ZCH ! town drag coefficient for heat (not used) REAL , DIMENSION ( SIZE ( PTA )) :: ZCD ! any surf. exchange coefficient (not used) REAL , DIMENSION ( SIZE ( PTA )) :: ZCDN ! any surf. neutral exch. coef.  (not used) ! REAL , DIMENSION ( SIZE ( PTA )) :: ZU_STAR , ZW_STAR !! REAL , DIMENSION ( SIZE ( PTA )) :: ZQ0 !! ! REAL , DIMENSION ( SIZE ( PTA )) :: ZUSTAR2 ! square of friction velocity (m2/s2 REAL , DIMENSION ( SIZE ( PTA )) :: ZVMOD ! module of the horizontal wind at t+1 ! ! for calculation of momentum fluxes REAL , DIMENSION ( SIZE ( PTA )) :: ZLMO ! Monin-Obukhov length REAL , DIMENSION ( SIZE ( PTA )) :: ZUSTAR_ROAD ! friction velocity for roads REAL , DIMENSION ( SIZE ( PTA )) :: ZUSTAR_ROOF ! friction velocity for roofs REAL , DIMENSION ( SIZE ( PTA )) :: ZUSTAR_TOWN ! ! REAL , DIMENSION ( SIZE ( PTA )) :: ZZ0_TOP ! roughness length for zac_top calculation REAL , DIMENSION ( SIZE ( PTA )) :: ZCHTCN_WIN ! natural convective heat transfer coef. for window [W/(m2.K)] REAL , DIMENSION ( SIZE ( PTA )) :: ZCHTCN_ROOF ! natural convective heat transfer coef. for roof [W/(m2.K)] REAL , DIMENSION ( SIZE ( PTA )) :: ZCHTCS_ROOF ! forced convective heat transfer coef. for smooth roof [W/(m2.K)] REAL , DIMENSION ( SIZE ( PTA )) :: ZCHTCN_WALL ! natural convective heat transfer coef. for wall [W/(m2.K)] REAL , DIMENSION ( SIZE ( PTA )) :: ZCHTCS_WALL ! forced natural convective heat transfer coef. for smooth wall [W/(m2.K)] ! INTEGER :: JLOOP , JJ !! ! REAL :: ZZ0_O_Z0H = 20 0. ! z0/z0h ratio used in Mascart (1995) formulation. !                         ! It is set to the maximum value acceptable by !                         ! formulation. Observed values are often larger in cities. REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! ! IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_DRAG' , 0 , ZHOOK_HANDLE ) ! ZZ0_ROOF (:) = 0.15 ! z0 for roofs ZZ0_ROAD (:) = MIN ( 0.05 , 0.1 * PZ_LOWCAN (:)) ! z0 for roads ! ZZ0_TOP (:) = T % XZ0_TOWN (:) ! PCD (:) = XUNDEF PCDN (:) = XUNDEF PAC_TOP (:) = XUNDEF PRI (:) = XUNDEF ! PUW_ROAD (:) = XUNDEF PUW_ROOF (:) = XUNDEF PDUWDU_ROAD (:) = XUNDEF PDUWDU_ROOF (:) = XUNDEF PUSTAR_TOWN (:) = XUNDEF ! !------------------------------------------------------------------------------- ! !*      1.     roof and road saturation specific humidity !              ------------------------------------------ ! PQSAT_ROOF (:) = QSAT ( PTS_ROOF (:), PPS (:)) ! PQSAT_ROAD (:) = QSAT ( PTS_ROAD (:), PPS (:)) ! !------------------------------------------------------------------------------- ! !*      2.     fraction of water on roofs !              -------------------------- ! PDELT_ROOF = 1. ! !*      2.1    general case !              ------------ ! WHERE ( PQSAT_ROOF (:) >= PQA (:) ) PDELT_ROOF (:) = ( T % XWS_ROOF (:) / PWS_ROOF_MAX ) ** ( 2. / 3. ) END WHERE ! !*      2.2    dew deposition on roofs (PDELT_ROOF=1) !              ----------------------- ! !------------------------------------------------------------------------------- ! !*      3.     fraction of water on roads !              -------------------------- ! PDELT_ROAD = 1. ! !*      3.1    general case !              ------------ ! WHERE ( PQSAT_ROAD (:) >= PQ_CANYON (:) ) PDELT_ROAD (:) = ( T % XWS_ROAD (:) / PWS_ROAD_MAX ) ** ( 2. / 3. ) END WHERE ! !*      3.2    dew deposition on roads (PDELT_ROAD=1) !              ----------------------- ! !------------------------------------------------------------------------------- ! !*      4.     Drag coefficient for momentum between roof level and atmosphere !              --------------------------------------------------------------- ! ! DO JJ = 1 , SIZE ( PTA ) ! !*      4.1    Averaged temperature at roof level !              ---------------------------------- ! ZTS_TOWN ( JJ ) = T % XBLD ( JJ ) * PTS_ROOF ( JJ ) + ( 1. - T % XBLD ( JJ )) * PT_CANYON ( JJ ) ! !*      4.2    Averaged water fraction on roofs !              ------------------------------- ! ZAVDELT_ROOF ( JJ ) = PDELT_ROOF ( JJ ) * PDELT_SNOW_ROOF ( JJ ) ! !*      4.3    Roof specific humidity !              ---------------------- ! ZQ_ROOF ( JJ ) = PQSAT_ROOF ( JJ ) * ZAVDELT_ROOF ( JJ ) ! !*      4.4    Averaged Saturation specific humidity !              ------------------------------------- ! ZQ_TOWN ( JJ ) = T % XBLD ( JJ ) * ZQ_ROOF ( JJ ) + ( 1. - T % XBLD ( JJ )) * PQ_CANYON ( JJ ) ! ENDDO ! !------------------------------------------------------------------------------- ! !*      5.     Momentum drag coefficient !              ------------------------- ! IF (. NOT . TOP % LCANOPY ) THEN CALL URBAN_EXCH_COEF ( TOP % CZ0H , ZZ0_O_Z0H , ZTS_TOWN , ZQ_TOWN , PEXNS , PEXNA , PTA , PQA , & PZREF + T % XBLD_HEIGHT / 3. , PUREF + T % XBLD_HEIGHT / 3. , PVMOD , T % XZ0_TOWN , & PRI , PCD , PCDN , ZAC , ZRA , ZCH ) ENDIF ! !------------------------------------------------------------------------------- ! !*      6.     Drag coefficient for heat fluxes between roofs and atmosphere !              ------------------------------------------------------------- ! IF ( TOP % CCH_BEM == \"DOE-2\" ) THEN ZCHTCN_ROOF = CHTC_UP_DOE ( PTS_ROOF , PTA ) ZCHTCS_ROOF = CHTC_SMOOTH_WIND_DOE ( ZCHTCN_ROOF , PVMOD ) PAC_ROOF = CHTC_ROUGH_DOE ( ZCHTCN_ROOF , ZCHTCS_ROOF , T % XROUGH_ROOF ) / PRHOA / XCPD ELSE CALL URBAN_EXCH_COEF ( TOP % CZ0H , ZZ0_O_Z0H , PTS_ROOF , ZQ_ROOF , PEXNS , PEXNA , PTA , PQA , & PZREF , PUREF , PVMOD , ZZ0_ROOF , ZRI , ZCD , ZCDN , PAC_ROOF , & ZRA_ROOF , ZCH_ROOF ) ENDIF ! ! DO JJ = 1 , SIZE ( PTA ) ZLE_MAX ( JJ ) = T % XWS_ROOF ( JJ ) / PTSTEP * XLVTT ZLE ( JJ ) = ( PQSAT_ROOF ( JJ ) - PQA ( JJ )) & * PAC_ROOF ( JJ ) * PDELT_ROOF ( JJ ) * XLVTT * PRHOA ( JJ ) ! PAC_ROOF_WAT ( JJ ) = PAC_ROOF ( JJ ) ! IF ( PDELT_ROOF ( JJ ) == 0. ) PAC_ROOF_WAT ( JJ ) = 0. ! IF ( ZLE ( JJ ) > 0. ) PAC_ROOF_WAT ( JJ ) = PAC_ROOF ( JJ ) * MIN ( 1. , ZLE_MAX ( JJ ) / ZLE ( JJ ) ) ! ENDDO !------------------------------------------------------------------------------- ! !*      7.     Drag coefficient for heat fluxes between canyon and atmosphere !              -------------------------------------------------------------- ! !* Because air/air exchanges are considered, roughness length for heat is set !  equal to roughness length for momentum. ! IF (. NOT . TOP % LCANOPY ) THEN CALL URBAN_EXCH_COEF ( 'MASC95' , 1. , PT_CANYON , PQ_CANYON , PEXNS , PEXNA , PTA , PQA , & PZREF + T % XBLD_HEIGHT - PZ_LOWCAN , PUREF + T % XBLD_HEIGHT - PZ_LOWCAN , & PVMOD , ZZ0_TOP , ZRI , ZCD , ZCDN , PAC_TOP , ZRA_TOP , ZCH_TOP ) ENDIF ! !------------------------------------------------------------------------------- ! !*      8.     Drag coefficient for heat fluxes between walls, road and canyon !              --------------------------------------------------------------- ! !*      8.1    aerodynamical conductance for walls !              ----------------------------------- ! IF ( TOP % CCH_BEM == \"DOE-2\" ) THEN DO JJ = 1 , SIZE ( PTA ) ZCHTCN_WALL ( JJ ) = CHTC_VERT_DOE ( PTS_WALL ( JJ ), PT_CANYON ( JJ )) ZCHTCS_WALL ( JJ ) = 0.5 * ( CHTC_SMOOTH_LEE_DOE ( ZCHTCN_WALL ( JJ ), PU_CANYON ( JJ )) + & CHTC_SMOOTH_WIND_DOE ( ZCHTCN_WALL ( JJ ), PU_CANYON ( JJ )) ) PAC_WALL ( JJ ) = CHTC_ROUGH_DOE ( ZCHTCN_WALL ( JJ ), ZCHTCS_WALL ( JJ ), T % XROUGH_WALL ( JJ )) / XCPD / PRHOA ( JJ ) END DO ELSE PAC_WALL (:) = ( 1 1.8 + 4.2 * PU_CANYON (:) ) / XCPD / PRHOA (:) END IF ! !*      8.2    aerodynamical conductance for roads !              ----------------------------------- ! ZW_STAR (:) = 0. ZQ0 (:) = 0. ! ! DO JLOOP = 1 , 3 ! ZW_CAN (:) = ZW_STAR (:) ! ! CALL URBAN_EXCH_COEF ( TOP % CZ0H , ZZ0_O_Z0H , PTS_ROAD , PQ_LOWCAN , PEXNS , PEXNA , & PT_LOWCAN , PQ_LOWCAN , PZ_LOWCAN , PZ_LOWCAN , & PU_LOWCAN + ZW_CAN , ZZ0_ROAD , ZRI , ZCD_ROAD , ZCDN , & PAC_ROAD , ZRA_ROAD , ZCH_ROAD ) ! DO JJ = 1 , SIZE ( PTA ) ZQ0 ( JJ ) = ( PTS_WALL ( JJ ) - PT_CANYON ( JJ )) * PAC_WALL ( JJ ) * T % XWALL_O_GRND ( JJ ) IF ( T % XROAD ( JJ ) . GT . 0. ) THEN ZQ0 ( JJ ) = ZQ0 ( JJ ) & + ( PTS_ROAD ( JJ ) - PT_LOWCAN ( JJ )) * PAC_ROAD ( JJ ) * T % XROAD ( JJ ) / ( T % XROAD ( JJ ) + T % XGARDEN ( JJ )) ENDIF IF ( T % XGARDEN ( JJ ) . GT . 0. ) THEN ZQ0 ( JJ ) = ZQ0 ( JJ ) & + ( PTS_GARDEN ( JJ ) - PT_LOWCAN ( JJ )) * PAC_GARDEN ( JJ ) * T % XGARDEN ( JJ ) / ( T % XROAD ( JJ ) + T % XGARDEN ( JJ )) ENDIF ! IF ( ZQ0 ( JJ ) >= 0. ) THEN ZW_STAR ( JJ ) = ( ( XG * PEXNA ( JJ ) / PTA ( JJ )) * ZQ0 ( JJ ) * T % XBLD_HEIGHT ( JJ )) ** ( 1 / 3. ) ELSE ZW_STAR ( JJ ) = 0. ENDIF ! ENDDO ! END DO ! ! !*      8.4    aerodynamical conductance for water limited by available wateraerodynamical conductance for window !              ------------------------------------ ! ZCHTCN_WIN ( JJ ) = CHTC_VERT_DOE ( B % XT_WIN1 ( JJ ), PT_CANYON ( JJ )) ! PAC_WIN ( JJ ) = 0.5 * ( CHTC_SMOOTH_LEE_DOE ( ZCHTCN_WIN ( JJ ), PU_CANYON ( JJ )) + & CHTC_SMOOTH_WIND_DOE ( ZCHTCN_WIN ( JJ ), PU_CANYON ( JJ )) ) & / PRHOA ( JJ ) / XCPD ! !------------------------------------------------------------------------------- ! !*      9.     Momentum fluxes !              --------------- ! !*      9.1    For roads !              --------- ! !* road friction ! IF ( TOP % LCANOPY ) THEN ! ZUSTAR2 ( JJ ) = XUNDEF ! IF ( HIMPLICIT_WIND == 'OLD' ) THEN !   old implicitation ZUSTAR2 ( JJ ) = ( ZCD_ROAD ( JJ ) * PU_LOWCAN ( JJ ) * PPEW_B_COEF_LOWCAN ( JJ )) / & ( 1.0 - PRHOA ( JJ ) * ZCD_ROAD ( JJ ) * PU_LOWCAN ( JJ ) * PPEW_A_COEF_LOWCAN ( JJ )) ELSE !   new implicitation ZUSTAR2 ( JJ ) = ( ZCD_ROAD ( JJ ) * PU_LOWCAN ( JJ ) * ( 2. * PPEW_B_COEF_LOWCAN ( JJ ) - PU_LOWCAN ( JJ ))) / & ( 1.0 - 2.0 * PRHOA ( JJ ) * ZCD_ROAD ( JJ ) * PU_LOWCAN ( JJ ) * PPEW_A_COEF_LOWCAN ( JJ )) ! ZVMOD ( JJ ) = PRHOA ( JJ ) * PPEW_A_COEF_LOWCAN ( JJ ) * ZUSTAR2 ( JJ ) + PPEW_B_COEF_LOWCAN ( JJ ) ZVMOD ( JJ ) = MAX ( ZVMOD ( JJ ), 0. ) ! IF ( PPEW_A_COEF_LOWCAN ( JJ ) /= 0. ) THEN ZUSTAR2 ( JJ ) = MAX ( ( ZVMOD ( JJ ) - PPEW_B_COEF_LOWCAN ( JJ ) ) / ( PRHOA ( JJ ) * PPEW_A_COEF_LOWCAN ( JJ )), 0. ) ENDIF ! ENDIF ! PUW_ROAD ( JJ ) = - ZUSTAR2 ( JJ ) ! PDUWDU_ROAD ( JJ ) = 0. ! implicitation already taken into account in PUW_ROAD ! !*      9.2    For roofs !              --------- ! !* roof friction !* neutral case, as guess ! ! ZUSTAR_ROOF ( JJ ) = PVMOD ( JJ ) * XKARMAN / LOG ( PZREF ( JJ ) / ZZ0_ROOF ( JJ )) ! PUW_ROOF ( JJ ) = - ZUSTAR_ROOF ( JJ ) ** 2 PDUWDU_ROOF ( JJ ) = 0. IF ( PVMOD ( JJ ) /= 0. ) PDUWDU_ROOF ( JJ ) = 2. * PUW_ROOF ( JJ ) / PVMOD ( JJ ) ! ELSE ! !*      9.3    For town !              -------- ! ZUSTAR2 ( JJ ) = XUNDEF ! IF ( HIMPLICIT_WIND == 'OLD' ) THEN !   old implicitation ZUSTAR2 ( JJ ) = ( PCD ( JJ ) * PVMOD ( JJ ) * PPEW_B_COEF ( JJ )) / & ( 1.0 - PRHOA ( JJ ) * PCD ( JJ ) * PVMOD ( JJ ) * PPEW_A_COEF ( JJ )) ELSE !   new implicitation ZUSTAR2 ( JJ ) = ( PCD ( JJ ) * PVMOD ( JJ ) * ( 2. * PPEW_B_COEF ( JJ ) - PVMOD ( JJ ))) / & ( 1.0 - 2.0 * PRHOA ( JJ ) * PCD ( JJ ) * PVMOD ( JJ ) * PPEW_A_COEF ( JJ )) ! ZVMOD ( JJ ) = PRHOA ( JJ ) * PPEW_A_COEF ( JJ ) * ZUSTAR2 ( JJ ) + PPEW_B_COEF ( JJ ) ZVMOD ( JJ ) = MAX ( ZVMOD ( JJ ), 0. ) ! IF ( PPEW_A_COEF ( JJ ) /= 0. ) THEN ZUSTAR2 ( JJ ) = MAX ( ( ZVMOD ( JJ ) - PPEW_B_COEF ( JJ ) ) / ( PRHOA ( JJ ) * PPEW_A_COEF ( JJ )), 0. ) ENDIF ! ENDIF ! PUSTAR_TOWN ( JJ ) = SQRT ( ZUSTAR2 ( JJ )) ! ENDIF ! ENDDO ! IF ( LHOOK ) CALL DR_HOOK ( 'URBAN_DRAG' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END SUBROUTINE URBAN_DRAG","tags":"","loc":"proc/urban_drag.html"},{"title":"WINDOW_SHADING – Town Energy Balance (TEB) model API docs","text":"subroutine WINDOW_SHADING(PSHGC, PSHGC_SH, O_SHADE, PALB_WALL, PABS_WIN, PABS_WINSH, PALB_WIN, PTRAN_WIN) Uses PARKIND1 YOMHOOK Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PSHGC real, intent(in), DIMENSION(:) :: PSHGC_SH logical, intent(in), DIMENSION(:) :: O_SHADE real, intent(in), DIMENSION(:) :: PALB_WALL real, intent(in), DIMENSION(:) :: PABS_WIN real, intent(out), DIMENSION(:) :: PABS_WINSH real, intent(out), DIMENSION(:) :: PALB_WIN real, intent(inout), DIMENSION(:) :: PTRAN_WIN Contents Source Code WINDOW_SHADING Source Code SUBROUTINE WINDOW_SHADING ( PSHGC , PSHGC_SH , O_SHADE , PALB_WALL , & PABS_WIN , PABS_WINSH , PALB_WIN , PTRAN_WIN ) !     ############################################################# ! ! ! !!****  *WINDOW_SHADING* !! !!    PURPOSE !!    ------- ! !     Computes the radiative properties of the window in case of shading !     devices active ! ! !!**  METHOD !!     ------ !! !!    apply radiative properties coming from namelist input (SHGC_SH) !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !!   EnergyPlus Engineering Reference V7, 2012, p. 217. !! !!    AUTHOR !!    ------ !! !!      B. Bueno           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    11/10 !!      G. Pigeon   09/12 code reorganization to take into account propertie !!                  from window !------------------------------------------------------------------------------- ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PSHGC !Window solar heat gain coefficient REAL , DIMENSION (:), INTENT ( IN ) :: PSHGC_SH !Window + shading solar heat gain coefficient LOGICAL , DIMENSION (:), INTENT ( IN ) :: O_SHADE !use of shadings TRUE -> shadings ; !FALSE -> no shading REAL , DIMENSION (:), INTENT ( IN ) :: PALB_WALL !albedo of the wall REAL , DIMENSION (:), INTENT ( IN ) :: PABS_WIN !Window absorptivity REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_WINSH !Window absorptivity after shading REAL , DIMENSION (:), INTENT ( OUT ) :: PALB_WIN !Albedo of the ensemble window + shading REAL , DIMENSION (:), INTENT ( INOUT ) :: PTRAN_WIN !Window transmitivity ! !local variables REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'WINDOW_SHADING' , 0 , ZHOOK_HANDLE ) ! WHERE ( O_SHADE ) PTRAN_WIN (:) = PSHGC_SH (:) PABS_WINSH (:) = PTRAN_WIN (:) * PABS_WIN (:) PALB_WIN (:) = PALB_WALL (:) ELSE WHERE PTRAN_WIN (:) = PTRAN_WIN (:) PABS_WINSH (:) = PABS_WIN (:) PALB_WIN (:) = 1. - PABS_WIN (:) - PTRAN_WIN (:) END WHERE ! WHERE (( PABS_WINSH (:) + PTRAN_WIN (:) + PALB_WIN ) > 1. ) PALB_WIN (:) = 1. - PABS_WINSH (:) - PTRAN_WIN (:) END WHERE ! IF ( LHOOK ) CALL DR_HOOK ( 'WINDOW_SHADING' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE WINDOW_SHADING","tags":"","loc":"proc/window_shading.html"},{"title":"ROAD_LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"subroutine ROAD_LAYER_E_BUDGET(T, B, PTSTEP, PDN_ROAD, PRHOA, PAC_ROAD, PAC_ROAD_WAT, PLW_RAD, PPS, PQSAT_ROAD, PDELT_ROAD, PEXNS, PABS_SW_ROAD, PGSNOW_ROAD, PQ_LOWCAN, PT_LOWCAN, PTS_WALL_A, PTS_WALL_B, PTSNOW_ROAD, PTS_GARDEN, PLW_WA_TO_R, PLW_WB_TO_R, PLW_S_TO_R, PLW_WIN_TO_R, PEMIT_LW_ROAD, PDQS_ROAD, PABS_LW_ROAD, PHFREE_ROAD, PLEFREE_ROAD, PIMB_ROAD, PRR) Uses MODD_BEM_n MODE_THERMOS YOMHOOK MODD_CSTS PARKIND1 MODI_LAYER_E_BUDGET MODD_TEB_n MODI_LAYER_E_BUDGET_GET_COEF Arguments Type Intent Optional Attributes Name type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PDN_ROAD real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PAC_ROAD real, intent(in), DIMENSION(:) :: PAC_ROAD_WAT real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PQSAT_ROAD real, intent(in), DIMENSION(:) :: PDELT_ROAD real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PABS_SW_ROAD real, intent(in), DIMENSION(:) :: PGSNOW_ROAD real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PTS_WALL_A real, intent(in), DIMENSION(:) :: PTS_WALL_B real, intent(in), DIMENSION(:) :: PTSNOW_ROAD real, intent(in), DIMENSION(:) :: PTS_GARDEN real, intent(in), DIMENSION(:) :: PLW_WA_TO_R real, intent(in), DIMENSION(:) :: PLW_WB_TO_R real, intent(in), DIMENSION(:) :: PLW_S_TO_R real, intent(in), DIMENSION(:) :: PLW_WIN_TO_R real, intent(out), DIMENSION(:) :: PEMIT_LW_ROAD real, intent(out), DIMENSION(:) :: PDQS_ROAD real, intent(out), DIMENSION(:) :: PABS_LW_ROAD real, intent(out), DIMENSION(:) :: PHFREE_ROAD real, intent(out), DIMENSION(:) :: PLEFREE_ROAD real, intent(out), DIMENSION(:) :: PIMB_ROAD real, intent(in), DIMENSION(:) :: PRR Contents Source Code ROAD_LAYER_E_BUDGET Source Code SUBROUTINE ROAD_LAYER_E_BUDGET ( T , B , PTSTEP , PDN_ROAD , PRHOA , PAC_ROAD , PAC_ROAD_WAT , & PLW_RAD , PPS , PQSAT_ROAD , PDELT_ROAD , PEXNS , & PABS_SW_ROAD , PGSNOW_ROAD , PQ_LOWCAN , PT_LOWCAN , & PTS_WALL_A , PTS_WALL_B , PTSNOW_ROAD , PTS_GARDEN , & PLW_WA_TO_R , PLW_WB_TO_R , PLW_S_TO_R , PLW_WIN_TO_R , & PEMIT_LW_ROAD , PDQS_ROAD , PABS_LW_ROAD , PHFREE_ROAD , & PLEFREE_ROAD , PIMB_ROAD , PRR ) !   ########################################################################## ! !!****  *ROAD_LAYER_E_BUDGET* !! !!    PURPOSE !!    ------- ! !     Computes the evoultion of roads surface temperatures ! ! !!**  METHOD !     ------ ! !    6 : equations for evolution of Ts_road !        ********************************** ! ! !     dTr_1(t) / dt = 1/(dr_1*Cr_1) * (  Rn_r - H_r - LE_r !                                      - 2*Kr_1*(Tr_1-Tr_2)/(dr_1 +dr_2)       ) ! !     dTr_k(t) / dt = 1/(dr_k*Cr_k) * (- 2*Kr_k-1*(Tr_k-Tr_k-1)/(dr_k-1 +dr_k) !                                      - 2*Kr_k  *(Tr_k-Tr_k+1)/(dr_k+1 +dr_k) ) ! !       with ! !   K*_k  = (d*_k+ d*_k+1)/(d*_k/k*_k+ d*_k+1/k*_k+1) ! !   Rn_r = abs_Rg_r !  - sigma * emis_r                                                   * Ts_r**4 (t+dt) !  +         emis_r                       *    SVF_r                  * LWR !  + sigma * emis_r * emis_w              * (1-SVF_r)                 * Ts_w**4 (t+dt) !  +         emis_r            (1-emis_w) * (1-SVF_r)   *      SVF_w  * LWR !  + sigma * emis_r * emis_w * (1-emis_w) * (1-SVF_r)   * (1-2*SVF_w) * Ts_w**4 (t+dt) !  + sigma * emis_r * emis_r * (1-emis_w) * (1-SVF_r)   *      SVF_w  * Ts_r**4 (t+dt) ! !  H_r  = rho Cp CH V ( Ts_r (t+dt) - Ta_canyon ) ! !  LE_r = rho Lv CH V ( qs_r (t+dt) - qa_canyon ) ! ! ! The system is implicited (or semi-implicited). ! ! ZIMPL=1    ---> implicit system ! ZIMPL=0.5  ---> semi-implicit system ! ZIMPL=0    ---> explicit system ! ! ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    23/01/98 !!                  21/11/01 (V. Masson and A. Lemonsu) bug of latent flux !!                           for very strong evaporation (all reservoir emptied !!                           in one time-step) !!                     02/11 (V. Masson) split of the routine for roads and walls separately !!      G. Pigeon      09/2012: add heating/cooling of rain from air temperature !!                             to surface road temp. for the road energy budget !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_n , ONLY : BEM_t ! USE MODD_CSTS , ONLY : XCPD , XLVTT , XSTEFAN , XCL ! USE MODE_THERMOS ! USE MODI_LAYER_E_BUDGET USE MODI_LAYER_E_BUDGET_GET_COEF ! USE YOMHOOK , ONLY : LHOOK , DR_HOOK USE PARKIND1 , ONLY : JPRB ! IMPLICIT NONE ! !*      0.1    declarations of arguments ! TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_t ), INTENT ( INOUT ) :: B ! REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:), INTENT ( IN ) :: PDN_ROAD ! road snow fraction REAL , DIMENSION (:), INTENT ( IN ) :: PRHOA ! rho REAL , DIMENSION (:), INTENT ( IN ) :: PAC_ROAD ! aerodynamical conductance !                                                 ! between road and canyon REAL , DIMENSION (:), INTENT ( IN ) :: PAC_ROAD_WAT ! aerodynamical conductance !                                                 ! between road and canyon !                                                 ! (for water) REAL , DIMENSION (:), INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:), INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:), INTENT ( IN ) :: PQSAT_ROAD ! q_sat(Ts) REAL , DIMENSION (:), INTENT ( IN ) :: PDELT_ROAD ! fraction of water REAL , DIMENSION (:), INTENT ( IN ) :: PEXNS ! surface Exner function REAL , DIMENSION (:), INTENT ( IN ) :: PABS_SW_ROAD ! absorbed solar radiation REAL , DIMENSION (:), INTENT ( IN ) :: PGSNOW_ROAD ! road snow conduction !                                                 ! heat fluxes at mantel !                                                 ! base REAL , DIMENSION (:), INTENT ( IN ) :: PQ_LOWCAN ! and specific humidity REAL , DIMENSION (:), INTENT ( IN ) :: PT_LOWCAN ! low canyon air temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WALL_A ! wall surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_WALL_B ! wall surface temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTSNOW_ROAD ! road snow temperature REAL , DIMENSION (:), INTENT ( IN ) :: PTS_GARDEN ! green area surface temperature ! REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WA_TO_R ! LW interactions wall  -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WB_TO_R ! LW interactions wall  -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_S_TO_R ! LW interactions sky   -> road REAL , DIMENSION (:), INTENT ( IN ) :: PLW_WIN_TO_R ! LW interactions window -> road ! REAL , DIMENSION (:), INTENT ( OUT ) :: PEMIT_LW_ROAD ! LW flux emitted by the road (W/m2 of road) REAL , DIMENSION (:), INTENT ( OUT ) :: PDQS_ROAD !heat storage inside the road REAL , DIMENSION (:), INTENT ( OUT ) :: PABS_LW_ROAD ! absorbed infrared rad. REAL , DIMENSION (:), INTENT ( OUT ) :: PHFREE_ROAD ! sensible heat flux on the ! snow free part of the road [W m-2] REAL , DIMENSION (:), INTENT ( OUT ) :: PLEFREE_ROAD ! latent heat flux on the ! snow free part of the road [W m-2] REAL , DIMENSION (:), INTENT ( OUT ) :: PIMB_ROAD ! road residual energy imbalance ! for verification [W m-2] REAL , DIMENSION (:), INTENT ( IN ) :: PRR ! rain rate [kg m-2 s-1] ! !*      0.2    declarations of local variables ! REAL :: ZIMPL = 1.0 ! implicit coefficient REAL :: ZEXPL = 0.0 ! explicit coefficient ! REAL , DIMENSION ( SIZE ( T % XT_ROAD , 1 ), SIZE ( T % XT_ROAD , 2 )) :: ZA ,& ! lower diag. ZB ,& ! main  diag. ZC ,& ! upper diag. ZY ! r.h.s. ! REAL , DIMENSION ( SIZE ( PPS )) :: ZDN_ROAD ! snow-covered surface fraction on road REAL , DIMENSION ( SIZE ( PPS )) :: ZDF_ROAD ! snow-free surface fraction on road ! REAL , DIMENSION ( SIZE ( PPS )) :: ZDQSAT_ROAD ! dq_sat/dTs REAL , DIMENSION ( SIZE ( PPS )) :: ZRHO_ACF_R ! rho * conductance !                                         !     * snow-free f. REAL , DIMENSION ( SIZE ( PPS )) :: ZRHO_ACF_R_WAT ! rho * conductance for water !                                         !     * snow-free f. ! thermal capacity times layer depth REAL , DIMENSION ( SIZE ( PPS )) :: ZTS_ROAD ! road surface temperature REAL , DIMENSION ( SIZE ( PPS )) :: ZHEAT_RR ! heat used too cool/heat the rain from the roof REAL , DIMENSION ( SIZE ( PPS )) :: ZT_SKY ! road surface temperature ! INTEGER :: IROAD_LAYER ! number of road layers INTEGER :: JJ ! loop counter REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'ROAD_LAYER_E_BUDGET' , 0 , ZHOOK_HANDLE ) ! CALL LAYER_E_BUDGET_GET_COEF ( T % XT_ROAD , PTSTEP , ZIMPL , T % XHC_ROAD , T % XTC_ROAD , T % XD_ROAD , & ZA , ZB , ZC , ZY ) ! !*      1.     Layer thermal properties !              ------------------------ ! IROAD_LAYER = SIZE ( T % XT_ROAD , 2 ) ! DO JJ = 1 , SIZE ( PDN_ROAD ) ! ZDN_ROAD ( JJ ) = PDN_ROAD ( JJ ) ZDF_ROAD ( JJ ) = 1. - ZDN_ROAD ( JJ ) ! !*      2.3    Surface temperatures !              -------------------- ! ZTS_ROAD ( JJ ) = T % XT_ROAD ( JJ , 1 ) ! !*      2.2    flux properties !              --------------- ! ZRHO_ACF_R ( JJ ) = PRHOA ( JJ ) * PAC_ROAD ( JJ ) * ZDF_ROAD ( JJ ) ZRHO_ACF_R_WAT ( JJ ) = PRHOA ( JJ ) * PAC_ROAD_WAT ( JJ ) * ZDF_ROAD ( JJ ) ! !*     2.4   Sky temperature !            --------------- ! ZT_SKY ( JJ ) = ( PLW_RAD ( JJ ) / XSTEFAN ) ** 0.25 ! ENDDO ! !*      2.4    qsat, dqsat/dTs, and humidity for roads !              --------------------------------------- ! ZDQSAT_ROAD (:) = DQSAT ( ZTS_ROAD (:), PPS (:), PQSAT_ROAD (:)) ! !------------------------------------------------------------------------------- ! !*      3.     First road layers coefficients (in contact with outdoor env.) !              ------------------------------------------------------------- ! DO JJ = 1 , SIZE ( T % XT_ROAD , 1 ) ! ZB ( JJ , 1 ) = ZB ( JJ , 1 ) + ZIMPL * XCPD / PEXNS ( JJ ) * ZRHO_ACF_R ( JJ ) & + ZIMPL * XLVTT * ZRHO_ACF_R_WAT ( JJ ) * PDELT_ROAD ( JJ ) * ZDQSAT_ROAD ( JJ ) ! ZY ( JJ , 1 ) = ZY ( JJ , 1 ) & + XCPD / PEXNS ( JJ ) * ZRHO_ACF_R ( JJ ) * ( PT_LOWCAN ( JJ ) - ZEXPL * ZTS_ROAD ( JJ ) ) & + ZDF_ROAD ( JJ ) * PABS_SW_ROAD ( JJ ) + ZDN_ROAD ( JJ ) * PGSNOW_ROAD ( JJ ) & + XLVTT * ZRHO_ACF_R_WAT ( JJ ) * PDELT_ROAD ( JJ ) & * ( PQ_LOWCAN ( JJ ) - PQSAT_ROAD ( JJ ) + ZIMPL * ZDQSAT_ROAD ( JJ ) * ZTS_ROAD ( JJ ) ) ! ZB ( JJ , 1 ) = ZB ( JJ , 1 ) & + ZIMPL * ZDF_ROAD ( JJ ) * ( PLW_S_TO_R ( JJ ) + PLW_WA_TO_R ( JJ ) + & PLW_WB_TO_R ( JJ ) + PLW_WIN_TO_R ( JJ ) + & PRR ( JJ ) * XCL ) ! heat/cool rain ! ZY ( JJ , 1 ) = ZY ( JJ , 1 ) & + ZDF_ROAD ( JJ ) * ( & PLW_S_TO_R ( JJ ) * ( ZT_SKY ( JJ ) - ZEXPL * ZTS_ROAD ( JJ )) & + PLW_WIN_TO_R ( JJ ) * ( B % XT_WIN1 ( JJ ) - ZEXPL * ZTS_ROAD ( JJ )) & + PLW_WA_TO_R ( JJ ) * ( PTS_WALL_A ( JJ ) - ZEXPL * ZTS_ROAD ( JJ )) & + PLW_WB_TO_R ( JJ ) * ( PTS_WALL_B ( JJ ) - ZEXPL * ZTS_ROAD ( JJ )) & + PRR ( JJ ) * XCL * ( PT_LOWCAN ( JJ ) - ZEXPL * ZTS_ROAD ( JJ ) )) !heat/cool rain ! ENDDO ! ! CALL LAYER_E_BUDGET ( T % XT_ROAD , PTSTEP , ZIMPL , T % XHC_ROAD , T % XTC_ROAD , T % XD_ROAD , & ZA , ZB , ZC , ZY , PDQS_ROAD ) ! !------------------------------------------------------------------------------- ! !*     12.    Road and wall absorbed infra-red radiation on snow-free surfaces !             ---------------------------------------------------------------- ! !* absorbed LW DO JJ = 1 , SIZE ( T % XT_ROAD , 1 ) ! ! surface temperature used in energy balance ZTS_ROAD ( JJ ) = ZEXPL * ZTS_ROAD ( JJ ) + ZIMPL * T % XT_ROAD ( JJ , 1 ) PABS_LW_ROAD ( JJ ) = PLW_S_TO_R ( JJ ) * ( ZT_SKY ( JJ ) - ZTS_ROAD ( JJ )) + & PLW_WA_TO_R ( JJ ) * ( PTS_WALL_A ( JJ ) - ZTS_ROAD ( JJ )) + & PLW_WB_TO_R ( JJ ) * ( PTS_WALL_B ( JJ ) - ZTS_ROAD ( JJ )) + & PLW_WIN_TO_R ( JJ ) * ( B % XT_WIN1 ( JJ ) - ZTS_ROAD ( JJ )) ! !*     9.    Road emitted LW radiation on snow-free surfaces !            ----------------------------------------------- PEMIT_LW_ROAD ( JJ ) = XSTEFAN * T % XT_ROAD ( JJ , 1 ) ** 4 + & ( 1 - T % XEMIS_ROAD ( JJ )) / T % XEMIS_ROAD ( JJ ) * PABS_LW_ROAD ( JJ ) ! !*      10.     road and wall sensible heat flux !              -------------------------------- ! PHFREE_ROAD ( JJ ) = ZRHO_ACF_R ( JJ ) * XCPD / PEXNS ( JJ ) * & ( ZIMPL * T % XT_ROAD ( JJ , 1 ) + ZEXPL * ZTS_ROAD ( JJ ) - PT_LOWCAN ( JJ ) ) ! !*      11     road latent heat flux !              --------------------- ! PLEFREE_ROAD ( JJ ) = ZRHO_ACF_R_WAT ( JJ ) * XLVTT * PDELT_ROAD ( JJ ) * & ( PQSAT_ROAD ( JJ ) - PQ_LOWCAN ( JJ ) + & ZIMPL * ZDQSAT_ROAD ( JJ ) * ( T % XT_ROAD ( JJ , 1 ) - ZTS_ROAD ( JJ )) ) ZHEAT_RR ( JJ ) = PRR ( JJ ) * XCL * ( ZTS_ROAD ( JJ ) - PT_LOWCAN ( JJ )) ! !*      12     heat storage inside roads !              ------------------------- ! !*      13     road energy residual imbalance for verification !              ----------------------------------------------- ! PIMB_ROAD ( JJ ) = PABS_SW_ROAD ( JJ ) + PABS_LW_ROAD ( JJ ) - PDQS_ROAD ( JJ ) & - ZDF_ROAD ( JJ ) * ( PHFREE_ROAD ( JJ ) + PLEFREE_ROAD ( JJ )) & - ZDN_ROAD ( JJ ) * PGSNOW_ROAD ( JJ ) ! ENDDO ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'ROAD_LAYER_E_BUDGET' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE ROAD_LAYER_E_BUDGET","tags":"","loc":"proc/road_layer_e_budget.html"},{"title":"ALLOC_TEB_STRUCT – Town Energy Balance (TEB) model API docs","text":"subroutine ALLOC_TEB_STRUCT(KROOF_LAYER, KROAD_LAYER, KWALL_LAYER, KFLOOR_LAYER, DTCO, G, TOP, T, BOP, B, TPN, TIR, DMT, GDM, GRM) Uses MODD_DATA_COVER_n MODD_BEM_n MODD_BEM_OPTION_n MODD_DIAG_MISC_TEB_n MODD_TEB_IRRIG_n MODD_TEB_PANEL_n MODD_SFX_GRID_n MODD_TEB_n MODD_SURFEX_n MODD_TEB_OPTION_n Arguments Type Intent Optional Attributes Name integer, intent(in) :: KROOF_LAYER integer, intent(in) :: KROAD_LAYER integer, intent(in) :: KWALL_LAYER integer, intent(in) :: KFLOOR_LAYER type(DATA_COVER_t), intent(inout) :: DTCO type(GRID_t), intent(inout) :: G type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_OPTIONS_t), intent(inout) :: BOP type(BEM_t), intent(inout) :: B type(TEB_PANEL_t), intent(inout) :: TPN type(TEB_IRRIG_t), intent(inout) :: TIR type(DIAG_MISC_TEB_t), intent(inout) :: DMT type(TEB_GARDEN_MODEL_t), intent(inout) :: GDM type(TEB_GREENROOF_MODEL_t), intent(inout) :: GRM Contents Source Code ALLOC_TEB_STRUCT Source Code SUBROUTINE ALLOC_TEB_STRUCT ( KROOF_LAYER , KROAD_LAYER , KWALL_LAYER , KFLOOR_LAYER ,& DTCO , G , TOP , T , BOP , B , TPN , TIR , DMT , GDM , GRM ) !   ########################################################################## ! !!****  *ALLOC_TEB_STRUCT* !! !!    PURPOSE !!    ------- ! !       To allocate all the structures used in Teb_garden and subsequent routines. ! !!**  METHOD !     ------ ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!    Original    03/2018 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_DATA_COVER_n , ONLY : DATA_COVER_t , DATA_COVER_INIT USE MODD_SFX_GRID_n , ONLY : GRID_t , GRID_INIT USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t , TEB_OPTIONS_INIT USE MODD_TEB_n , ONLY : TEB_t , TEB_INIT USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t , BEM_OPTIONS_INIT USE MODD_BEM_n , ONLY : BEM_t , BEM_INIT USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t , TEB_PANEL_INIT USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t , TEB_IRRIG_INIT USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t , DIAG_MISC_TEB_INIT USE MODD_SURFEX_n , ONLY : TEB_GARDEN_MODEL_t USE MODD_SURFEX_n , ONLY : TEB_GREENROOF_MODEL_t ! ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! ! ! ! INTEGER , INTENT ( IN ) :: KROOF_LAYER ! number of roof layers INTEGER , INTENT ( IN ) :: KROAD_LAYER ! number of road layers INTEGER , INTENT ( IN ) :: KWALL_LAYER ! number of wall layers INTEGER , INTENT ( IN ) :: KFLOOR_LAYER ! number of floor layers TYPE ( DATA_COVER_t ), INTENT ( INOUT ) :: DTCO TYPE ( GRID_t ), INTENT ( INOUT ) :: G TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_OPTIONS_t ), INTENT ( INOUT ) :: BOP TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_PANEL_t ), INTENT ( INOUT ) :: TPN TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT TYPE ( TEB_GARDEN_MODEL_t ), INTENT ( INOUT ) :: GDM TYPE ( TEB_GREENROOF_MODEL_t ), INTENT ( INOUT ) :: GRM ! ! !*      0.2    Declarations of local variables ! ! !------------------------------------------------------------------------------- ! CALL GRID_INIT ( G ) CALL TEB_INIT ( T ) CALL TEB_PANEL_INIT ( TPN ) CALL TEB_OPTIONS_INIT ( TOP ) CALL TEB_IRRIG_INIT ( TIR ) CALL DIAG_MISC_TEB_INIT ( DMT ) CALL BEM_INIT ( B ) CALL BEM_OPTIONS_INIT ( BOP ) CALL DATA_COVER_INIT ( DTCO ) ! !------------------------------------------------------------------------------- ! ! BEM structure ! ! ! Floor parameters ! ALLOCATE ( B % XHC_FLOOR ( 1 , KFLOOR_LAYER )) ! floor layers heat capacity        (J/K/m3) ALLOCATE ( B % XTC_FLOOR ( 1 , KFLOOR_LAYER )) ! floor layers thermal conductivity (W/K/m) ALLOCATE ( B % XD_FLOOR ( 1 , KFLOOR_LAYER )) ! depth of floor layers             (m) ! ! HVAC parameters ! ALLOCATE ( B % XTCOOL_TARGET ( 1 )) ! cooling setpoint of indoor air ALLOCATE ( B % XTHEAT_TARGET ( 1 )) ! heating setpoint of indoor air ALLOCATE ( B % XF_WASTE_CAN ( 1 )) ! fraction of waste heat released into the canyon ALLOCATE ( B % XEFF_HEAT ( 1 )) ! efficiency of the heating system ! ! Indoor parameters ! ALLOCATE ( B % XTI_BLD ( 1 )) ! building interior temperature    (K) ALLOCATE ( B % XT_FLOOR ( 1 , KFLOOR_LAYER )) ! floor layer temperatures         (K) ALLOCATE ( B % XT_MASS ( 1 , KFLOOR_LAYER )) ! Air cooled building internal th. mass temperature (K) ! ALLOCATE ( B % XQIN ( 1 )) ! internal heat gains [W m-2(floor)] ALLOCATE ( B % XQIN_FRAD ( 1 )) ! radiant fraction of internal heat gains ALLOCATE ( B % XSHGC ( 1 )) ! solar heat gain coef. of windows ALLOCATE ( B % XSHGC_SH ( 1 )) ! solar heat gain coef. of windows + shading ALLOCATE ( B % XU_WIN ( 1 )) ! window U-factor [K m W-2] ALLOCATE ( B % XTRAN_WIN ( 1 )) ! window transmittance (-) ALLOCATE ( B % XGR ( 1 )) ! glazing ratio ALLOCATE ( B % XFLOOR_HEIGHT ( 1 )) ! building floor height [m] ALLOCATE ( B % XINF ( 1 )) ! infiltration/ventilation flow rate [AC/H] ! ! New parameters ! ALLOCATE ( B % XF_WATER_COND ( 1 )) ! fraction of evaporation for condensers (cooling system) ALLOCATE ( B % XAUX_MAX ( 1 )) ! Auxiliar variable for autosize calcs ALLOCATE ( B % XQIN_FLAT ( 1 )) ! Latent franction of internal heat gains ALLOCATE ( B % XHR_TARGET ( 1 )) ! Relative humidity setpoint ALLOCATE ( B % XT_WIN2 ( 1 )) ! Indoor window temperature [K] ALLOCATE ( B % XQI_BLD ( 1 )) ! Indoor air specific humidity [kg kg-1] ALLOCATE ( B % XV_VENT ( 1 )) ! Ventilation flow rate [AC/H] ALLOCATE ( B % XCAP_SYS_HEAT ( 1 )) ! Capacity of the heating system ! [W m-2(bld)] ALLOCATE ( B % XCAP_SYS_RAT ( 1 )) ! Rated capacity of the cooling system ! [W m-2(bld)] ALLOCATE ( B % XT_ADP ( 1 )) ! Apparatus dewpoint temperature of the ! cooling coil [K] ALLOCATE ( B % XM_SYS_RAT ( 1 )) ! Rated HVAC mass flow rate ! [kg s-1 m-2(bld)] ALLOCATE ( B % XCOP_RAT ( 1 )) ! Rated COP of the cooling system ALLOCATE ( B % XT_WIN1 ( 1 )) ! outdoor window temperature [K] ALLOCATE ( B % XALB_WIN ( 1 )) ! window albedo ALLOCATE ( B % XABS_WIN ( 1 )) ! window absortance ALLOCATE ( B % XT_SIZE_MAX ( 1 )) ! Maximum outdoor air temperature for ! HVAC sizing [K] ALLOCATE ( B % XT_SIZE_MIN ( 1 )) ! Minimum outdoor air temperature for ! HVAC sizing [K] ALLOCATE ( B % XUGG_WIN ( 1 )) ! Window glass-to-glass U-factor [K m W-2] ALLOCATE ( B % LSHADE ( 1 )) ! flag to activate shading devices -> LOGICAL in the code ALLOCATE ( B % XSHADE ( 1 )) ! flag to activate shading devices -> REAL for i/o 0. or 1. ALLOCATE ( B % CNATVENT ( 1 )) ! flag to activate natural ventilation 'NONE', 'MANU', 'AUTO' ALLOCATE ( B % XNATVENT ( 1 )) ! flag to describe surventilation system for i/o ! 0 for NONE, 1 for MANU and 2 for AUTO ALLOCATE ( B % LSHAD_DAY ( 1 )) !Has shading been necessary this day ? ALLOCATE ( B % LNATVENT_NIGHT ( 1 )) !Has nocturnal surventilation been necessary and possible this night ? ! !indoor relative surfaces and view factors ALLOCATE ( B % XN_FLOOR ( 1 )) ! Number of floors ALLOCATE ( B % XGLAZ_O_BLD ( 1 )) ! Window area [m2_win/m2_bld] ALLOCATE ( B % XMASS_O_BLD ( 1 )) ! Mass area [m2_mass/m2_bld] ALLOCATE ( B % XFLOOR_HW_RATIO ( 1 )) ! H/W ratio of 1 floor level ALLOCATE ( B % XF_FLOOR_MASS ( 1 )) ! View factor floor-mass ALLOCATE ( B % XF_FLOOR_WALL ( 1 )) ! View factor floor-wall ALLOCATE ( B % XF_FLOOR_WIN ( 1 )) ! View factor floor-window ALLOCATE ( B % XF_FLOOR_ROOF ( 1 )) ! View factor floor-roof ALLOCATE ( B % XF_WALL_FLOOR ( 1 )) ! View factor wall-floor ALLOCATE ( B % XF_WALL_MASS ( 1 )) ! View factor wall-mass ALLOCATE ( B % XF_WALL_WIN ( 1 )) ! View factor wall-win ALLOCATE ( B % XF_WIN_FLOOR ( 1 )) ! View factor win-floor ALLOCATE ( B % XF_WIN_MASS ( 1 )) ! View factor win-mass ALLOCATE ( B % XF_WIN_WALL ( 1 )) ! View factor win-wall ALLOCATE ( B % XF_WIN_WIN ( 1 )) ! indoor View factor win-win ALLOCATE ( B % XF_MASS_FLOOR ( 1 )) ! View factor mass-floor ALLOCATE ( B % XF_MASS_WALL ( 1 )) ! View factor mass-wall ALLOCATE ( B % XF_MASS_WIN ( 1 )) ! View factor mass-window ! !------------------------------------------------------------------------------- ! ! TEB structure ! ! Geometric Parameters: ! ALLOCATE ( T % XROAD_DIR ( 1 )) ! Road direction (deg from North, clockwise) ALLOCATE ( T % XGARDEN ( 1 )) ! fraction of veg in the streets   (-) ALLOCATE ( T % XGREENROOF ( 1 )) ! fraction of greenroofs on roofs  (-) ALLOCATE ( T % XBLD ( 1 )) ! fraction of buildings            (-) ALLOCATE ( T % XROAD ( 1 )) ! fraction of roads                (-) ALLOCATE ( T % XCAN_HW_RATIO ( 1 )) ! canyon    h/W                    (-) ALLOCATE ( T % XBLD_HEIGHT ( 1 )) ! buildings height 'h'             (m) ALLOCATE ( T % XWALL_O_HOR ( 1 )) ! wall surf. / hor. surf.          (-) ALLOCATE ( T % XROAD_O_GRND ( 1 )) ! road surf. / (road + garden surf.) (-) ALLOCATE ( T % XGARDEN_O_GRND ( 1 )) ! gard. surf. / (road + garden surf.)(-) ALLOCATE ( T % XWALL_O_GRND ( 1 )) ! wall surf. / (road + garden surf.) (-) ALLOCATE ( T % XWALL_O_BLD ( 1 )) ! wall surf. / bld surf. (-) ALLOCATE ( T % XZ0_TOWN ( 1 )) ! roughness length for momentum    (m) ALLOCATE ( T % XSVF_ROAD ( 1 )) ! road sky view factor             (-) ALLOCATE ( T % XSVF_GARDEN ( 1 )) ! green area sky view factor       (-) ALLOCATE ( T % XSVF_WALL ( 1 )) ! wall sky view factor             (-) ! ! Roof parameters ! ALLOCATE ( T % XALB_ROOF ( 1 )) ! roof albedo                      (-) ALLOCATE ( T % XEMIS_ROOF ( 1 )) ! roof emissivity                  (-) ALLOCATE ( T % XHC_ROOF ( 1 , KROOF_LAYER )) ! roof layers heat capacity        (J/K/m3) ALLOCATE ( T % XTC_ROOF ( 1 , KROOF_LAYER )) ! roof layers thermal conductivity (W/K/m) ALLOCATE ( T % XD_ROOF ( 1 , KROOF_LAYER )) ! depth of roof layers             (m) ALLOCATE ( T % XROUGH_ROOF ( 1 )) ! roof roughness coef ! ! ! Road parameters ! ALLOCATE ( T % XALB_ROAD ( 1 )) ! road albedo                      (-) ALLOCATE ( T % XEMIS_ROAD ( 1 )) ! road emissivity                  (-) ALLOCATE ( T % XHC_ROAD ( 1 , KROAD_LAYER )) ! road layers heat capacity        (J/K/m3) ALLOCATE ( T % XTC_ROAD ( 1 , KROAD_LAYER )) ! road layers thermal conductivity (W/K/m) ALLOCATE ( T % XD_ROAD ( 1 , KROAD_LAYER )) ! depth of road layers             (m) ! ! Wall parameters ! ALLOCATE ( T % XALB_WALL ( 1 )) ! wall albedo                      (-) ALLOCATE ( T % XEMIS_WALL ( 1 )) ! wall emissivity                  (-) ALLOCATE ( T % XHC_WALL ( 1 , KWALL_LAYER )) ! wall layers heat capacity        (J/K/m3) ALLOCATE ( T % XTC_WALL ( 1 , KWALL_LAYER )) ! wall layers thermal conductivity (W/K/m) ALLOCATE ( T % XD_WALL ( 1 , KWALL_LAYER )) ! depth of wall layers             (m) ALLOCATE ( T % XROUGH_WALL ( 1 )) ! wall roughness coef ! ! Building's use type ! ALLOCATE ( T % XRESIDENTIAL ( 1 )) ! fraction of Residential use      (-) ! ! anthropogenic fluxes ! ALLOCATE ( T % XH_TRAFFIC ( 1 )) ! anthropogenic sensible !                                                  ! heat fluxes due to traffic       (W/m2) ALLOCATE ( T % XLE_TRAFFIC ( 1 )) ! anthropogenic latent !                                                  ! heat fluxes due to traffic       (W/m2) ALLOCATE ( T % XH_INDUSTRY ( 1 )) ! anthropogenic sensible !                                                  ! heat fluxes due to factories     (W/m2) ALLOCATE ( T % XLE_INDUSTRY ( 1 )) ! anthropogenic latent !                                                  ! heat fluxes due to factories     (W/m2) ! ! temperatures for boundary conditions ! ALLOCATE ( T % XTI_ROAD ( 1 )) ! road interior temperature        (K) ! ! Prognostic variables: ! ALLOCATE ( T % XWS_ROOF ( 1 )) ! roof water reservoir             (kg/m2) ALLOCATE ( T % XWS_ROAD ( 1 )) ! road water reservoir             (kg/m2) ALLOCATE ( T % XT_ROOF ( 1 , KROOF_LAYER )) ! roof layer temperatures          (K) ALLOCATE ( T % XT_ROAD ( 1 , KROAD_LAYER )) ! road layer temperatures          (K) ALLOCATE ( T % XT_WALL_A ( 1 , KWALL_LAYER )) ! wall layer temperatures          (K) ALLOCATE ( T % XT_WALL_B ( 1 , KWALL_LAYER )) ! wall layer temperatures          (K) ! ALLOCATE ( T % XAC_ROOF ( 1 )) ! roof aerodynamic conductance     () ALLOCATE ( T % XAC_ROAD ( 1 )) ! road aerodynamic conductance     () ALLOCATE ( T % XAC_WALL ( 1 )) ! wall aerodynamic conductance     () ALLOCATE ( T % XAC_TOP ( 1 )) ! top  aerodynamic conductance     () ALLOCATE ( T % XAC_ROOF_WAT ( 1 )) ! water aerodynamic conductance    () ALLOCATE ( T % XAC_ROAD_WAT ( 1 )) ! water aerodynamic conductance    () ! ALLOCATE ( T % XQSAT_ROOF ( 1 )) ! humidity of saturation for roofs (kg/kg) ALLOCATE ( T % XQSAT_ROAD ( 1 )) ! humidity of saturation for roads (kg/kg) ! ALLOCATE ( T % XDELT_ROOF ( 1 )) ! humidity of saturation for roofs (-) ALLOCATE ( T % XDELT_ROAD ( 1 )) ! humidity of saturation for roads (-) ! ! Semi-prognostic variables: ! ALLOCATE ( T % XT_CANYON ( 1 )) ! canyon air temperature           (K) ALLOCATE ( T % XQ_CANYON ( 1 )) ! canyon air specific humidity     (kg/kg) ! ! ! Prognostic snow: ! ALLOCATE ( T % TSNOW_ROOF % WSNOW ( 1 , 1 )) ! snow (& liq. water) content      (kg/m2) ALLOCATE ( T % TSNOW_ROOF % T ( 1 , 1 )) ! temperature                      (K) ALLOCATE ( T % TSNOW_ROOF % RHO ( 1 , 1 )) ! density                          (kg m-3) ALLOCATE ( T % TSNOW_ROOF % ALB ( 1 )) ! albedo                           (-) ALLOCATE ( T % TSNOW_ROOF % EMIS ( 1 )) ! emissivity                       (-) ALLOCATE ( T % TSNOW_ROOF % TS ( 1 )) ! Surface temperature              (K) ALLOCATE ( T % TSNOW_ROAD % WSNOW ( 1 , 1 )) ! snow (& liq. water) content      (kg/m2) ALLOCATE ( T % TSNOW_ROAD % T ( 1 , 1 )) ! temperature                      (K) ALLOCATE ( T % TSNOW_ROAD % RHO ( 1 , 1 )) ! density                          (kg m-3) ALLOCATE ( T % TSNOW_ROAD % ALB ( 1 )) ! albedo                           (-) ALLOCATE ( T % TSNOW_ROAD % EMIS ( 1 )) ! emissivity                       (-) ALLOCATE ( T % TSNOW_ROAD % TS ( 1 )) ! Surface temperature              (K) !------------------------------------------------------------------------------- ! ! solar panels ! ALLOCATE ( TPN % XEMIS_PANEL ( 1 )) ! emissivity of solar panels               (-) ALLOCATE ( TPN % XALB_PANEL ( 1 )) ! albedo of soolar panels                  (-) ALLOCATE ( TPN % XEFF_PANEL ( 1 )) ! Efficiency coefficient of solar panels   (-) ALLOCATE ( TPN % XFRAC_PANEL ( 1 )) ! Fraction of SOLAR panels on roofs        (-) ALLOCATE ( TPN % XTHER_PRODC_DAY ( 1 )) ! Present day integrated thermal production of energy    (J/m2 panel) !------------------------------------------------------------------------------- ! ! Irrigation ! ALLOCATE ( TIR % XRD_START_MONTH ( 1 )) ! roads : start month for irrigation (included) ALLOCATE ( TIR % XRD_END_MONTH ( 1 )) ! roads : end   month for irrigation (included) ALLOCATE ( TIR % XRD_START_HOUR ( 1 )) ! roads : start solar hour for irrigation (included, hour) ALLOCATE ( TIR % XRD_END_HOUR ( 1 )) ! roads : end   solar hour for irrigation (excluded, hour) ALLOCATE ( TIR % XRD_24H_IRRIG ( 1 )) ! roads : total irrigation over 24 hours (kg/m2) ! !------------------------------------------------------------------------------- ! ! TEB diagnostics structure ! ALLOCATE ( DMT % XZ0_TOWN ( 1 )) ! town roughness length ALLOCATE ( DMT % XQF_BLD ( 1 )) ! domestic heating ALLOCATE ( DMT % XFLX_BLD ( 1 )) ! heat flux from bld ALLOCATE ( DMT % XQF_TOWN ( 1 )) ! total anthropogenic heat ALLOCATE ( DMT % XDQS_TOWN ( 1 )) ! storage inside building ! ALLOCATE ( DMT % XH_WALL_A ( 1 )) ! wall sensible heat flux          (W/m2) ALLOCATE ( DMT % XH_WALL_B ( 1 )) ! wall sensible heat flux          (W/m2) ALLOCATE ( DMT % XH_ROOF ( 1 )) ! roof sensible heat flux          (W/m2) ALLOCATE ( DMT % XH_ROAD ( 1 )) ! road sensible heat flux          (W/m2) ALLOCATE ( DMT % XH_STRLROOF ( 1 )) ! structural roof sens. heat flux  (W/m2) ALLOCATE ( DMT % XH_BLT ( 1 )) ! built surf sensible heat flux    (W/m2) ALLOCATE ( DMT % XRN_WALL_A ( 1 )) ! net radiation at wall            (W/m2) ALLOCATE ( DMT % XRN_WALL_B ( 1 )) ! net radiation at wall            (W/m2) ALLOCATE ( DMT % XRN_ROOF ( 1 )) ! net radiation at roof            (W/m2) ALLOCATE ( DMT % XRN_ROAD ( 1 )) ! net radiation at road            (W/m2) ALLOCATE ( DMT % XRN_STRLROOF ( 1 )) !net radiation at structural roofs(W/m2) ALLOCATE ( DMT % XRN_BLT ( 1 )) ! net radiation at built surf      (W/m2) ALLOCATE ( DMT % XGFLUX_WALL_A ( 1 )) !net wall conduction flux        (W/m2) ALLOCATE ( DMT % XGFLUX_WALL_B ( 1 )) !net wall conduction flux        (W/m2) ALLOCATE ( DMT % XGFLUX_ROOF ( 1 )) ! net roof conduction flux         (W/m2) ALLOCATE ( DMT % XGFLUX_ROAD ( 1 )) ! net road conduction flux         (W/m2) ALLOCATE ( DMT % XGFLUX_STRLROOF ( 1 )) !net structural roof cond flux (W/m2) ALLOCATE ( DMT % XGFLUX_BLT ( 1 )) ! net built surf conduction flux   (W/m2) ALLOCATE ( DMT % XLE_ROOF ( 1 )) ! roof latent heat flux            (W/m2) ALLOCATE ( DMT % XLE_ROAD ( 1 )) ! road latent heat flux            (W/m2) ALLOCATE ( DMT % XLE_STRLROOF ( 1 )) !structural roof latent heat flux (W/m2) ALLOCATE ( DMT % XLE_BLT ( 1 )) ! built surf latent heat flux      (W/m2) ! ALLOCATE ( DMT % XRUNOFF_TOWN ( 1 )) ! aggregated water runoff for town      (kg/m2/s) ALLOCATE ( DMT % XIRRIG_GARDEN ( 1 )) ! summer ground irrigation rate         (kg/m2/s) ALLOCATE ( DMT % XRUNOFF_ROAD ( 1 )) ! water runoff for roads                (kg/m2/s) ALLOCATE ( DMT % XIRRIG_ROAD ( 1 )) ! road man-made watering rate           (kg/m2/s) ALLOCATE ( DMT % XRUNOFF_ROOF ( 1 )) ! aggregated water runoff for roofs     (kg/m2/s) ALLOCATE ( DMT % XRUNOFF_STRLROOF ( 1 )) ! water runoff for structural roofs     (kg/m2/s) ALLOCATE ( DMT % XIRRIG_GREENROOF ( 1 )) ! summer ground irrigation rate         (kg/m2/s) ! ALLOCATE ( DMT % XABS_SW_ROOF ( 1 )) ! absorbed shortwave radiation over roofs ALLOCATE ( DMT % XABS_SW_SNOW_ROOF ( 1 )) ! absorbed longwave radiation over roofs ALLOCATE ( DMT % XABS_LW_ROOF ( 1 )) ! absorbed shortwave radiation over roofs ALLOCATE ( DMT % XABS_LW_SNOW_ROOF ( 1 )) ! absorbed longwave radiation over roofs ALLOCATE ( DMT % XABS_SW_ROAD ( 1 )) ! absorbed shortwave radiation over roads ALLOCATE ( DMT % XABS_SW_SNOW_ROAD ( 1 )) ! absorbed longwave radiation over roads ALLOCATE ( DMT % XABS_LW_ROAD ( 1 )) ! absorbed shortwave radiation over roads ALLOCATE ( DMT % XABS_LW_SNOW_ROAD ( 1 )) ! absorbed longwave radiation over roads ALLOCATE ( DMT % XABS_SW_WALL_A ( 1 )) ! absorbed shortwave radiation over walls ALLOCATE ( DMT % XABS_SW_WALL_B ( 1 )) ! absorbed shortwave radiation over walls ALLOCATE ( DMT % XABS_LW_WALL_A ( 1 )) ! absorbed shortwave radiation over walls ALLOCATE ( DMT % XABS_LW_WALL_B ( 1 )) ! absorbed shortwave radiation over walls ALLOCATE ( DMT % XABS_SW_GARDEN ( 1 )) ! absorbed shortwave radiation over green areas ALLOCATE ( DMT % XABS_LW_GARDEN ( 1 )) ! absorbed shortwave radiation over green areas ALLOCATE ( DMT % XABS_SW_GREENROOF ( 1 )) ! absorbed shortwave radiation over green roofs ALLOCATE ( DMT % XABS_LW_GREENROOF ( 1 )) ! absorbed shortwave radiation over green roofs ALLOCATE ( DMT % XG_GREENROOF_ROOF ( 1 )) ! Heat flux between green roof and structural roof ALLOCATE ( DMT % XABS_SW_PANEL ( 1 )) ! absorbed shortwave radiation over solar panels ALLOCATE ( DMT % XABS_LW_PANEL ( 1 )) ! absorbed longwave  radiation over solar panels ! ALLOCATE ( DMT % XRN_PANEL ( 1 )) ! net radiation           over solar panels (W/m2) ALLOCATE ( DMT % XH_PANEL ( 1 )) ! sensible heat flux      over solar panels (W/m2) ALLOCATE ( DMT % XTHER_PROD_PANEL ( 1 )) ! thermal      production of   solar panels (W/m2 thermal panel) ALLOCATE ( DMT % XPHOT_PROD_PANEL ( 1 )) ! photovoltaic production of   solar panels (W/m2 photovoltaic panel) ALLOCATE ( DMT % XPROD_PANEL ( 1 )) !              production of   solar panels (W/m2 panel) ALLOCATE ( DMT % XTHER_PROD_BLD ( 1 )) ! thermal      production of   solar panels (W/m2 bld) ALLOCATE ( DMT % XPHOT_PROD_BLD ( 1 )) ! photovoltaic production of   solar panels (W/m2 bld) ALLOCATE ( DMT % XH_BLD_COOL ( 1 )) ! Sensible cooling energy demand ! of the building [W m-2(bld)] ALLOCATE ( DMT % XT_BLD_COOL ( 1 )) ! Total cooling energy demand ! of the building [W m-2(bld)] ALLOCATE ( DMT % XH_BLD_HEAT ( 1 )) ! Heating energy demand ! of the building [W m-2(bld)] ALLOCATE ( DMT % XLE_BLD_COOL ( 1 )) ! Latent cooling energy demand ! of the building [W m-2(bld)] ALLOCATE ( DMT % XLE_BLD_HEAT ( 1 )) ! Latent heating energy demand ! of the building [W m-2(bld)] ALLOCATE ( DMT % XH_WASTE ( 1 )) ! Sensible waste heat from HVAC system ! [W m-2(tot)] ALLOCATE ( DMT % XLE_WASTE ( 1 )) ! Latent waste heat from HVAC system ! [W m-2(tot)] ALLOCATE ( DMT % XHVAC_COOL ( 1 )) ! Energy consumption of the cooling system ! [W m-2(bld)] ALLOCATE ( DMT % XHVAC_HEAT ( 1 )) ! Energy consumption of the heating system ! [W m-2(bld)] ALLOCATE ( DMT % XCAP_SYS ( 1 )) ! Actual capacity of the cooling system ! [W m-2(bld)] ALLOCATE ( DMT % XM_SYS ( 1 )) ! Actual HVAC mass flow rate ! [kg s-1 m-2(bld)] ALLOCATE ( DMT % XCOP ( 1 )) ! COP of the cooling system ALLOCATE ( DMT % XQ_SYS ( 1 )) ! Supply air specific humidity [kg kg-1] ALLOCATE ( DMT % XT_SYS ( 1 )) ! Supply air temperature [K] ALLOCATE ( DMT % XTR_SW_WIN ( 1 )) ! Solar radiation transmitted throught ! windows [W m-2(bld)] ALLOCATE ( DMT % XFAN_POWER ( 1 )) ! HVAC fan power ALLOCATE ( DMT % XABS_SW_WIN ( 1 )) ! window absorbed shortwave radiation [W m-2] ALLOCATE ( DMT % XABS_LW_WIN ( 1 )) ! absorbed infrared rad. [W m-2] ALLOCATE ( DMT % XEMIT_LW_FAC ( 1 )) ! LW flux emitted by the facade (W/m2 facade) ALLOCATE ( DMT % XEMIT_LW_GRND ( 1 )) ! LW flux emitted by the ground (W/m2 ground = road + garden) ALLOCATE ( DMT % XT_RAD_IND ( 1 )) !Indoor mean radiant temperature [K] ALLOCATE ( DMT % XREF_SW_GRND ( 1 )) ! total solar rad reflected by ground ALLOCATE ( DMT % XREF_SW_FAC ( 1 )) ! total solar rad reflected by facade ALLOCATE ( DMT % XHU_BLD ( 1 )) !Indoor relative humidity ! ALLOCATE ( DMT % XTCOOL_TARGET ( 1 )) ! current cooling setpoint of indoor air ALLOCATE ( DMT % XTHEAT_TARGET ( 1 )) ! current heating setpoint of indoor air ALLOCATE ( DMT % XQIN ( 1 )) ! current internal heat gains [W m-2(floor)] ! New fields ALLOCATE ( GDM % VD % ND % AL ( 1 )) ALLOCATE ( GDM % VD % NDE % AL ( 1 )) ALLOCATE ( GDM % VD % NDM % AL ( 1 )) ALLOCATE ( GDM % NPE % AL ( 1 )) ALLOCATE ( GRM % VD % ND % AL ( 1 )) ALLOCATE ( GRM % VD % NDE % AL ( 1 )) ALLOCATE ( GRM % VD % NDM % AL ( 1 )) ALLOCATE ( GRM % NPE % AL ( 1 )) !------------------------------------------------------------------------------- ! ! END SUBROUTINE ALLOC_TEB_STRUCT","tags":"","loc":"proc/alloc_teb_struct.html"},{"title":"BEM_MORPHO_STRUCT – Town Energy Balance (TEB) model API docs","text":"subroutine BEM_MORPHO_STRUCT(PBLD, PWALL_O_HOR, PBLD_HEIGHT, PFLOOR_HEIGHT, PGR, PN_FLOOR, PWALL_O_BLD, PGLAZ_O_BLD, PMASS_O_BLD, PFLOOR_HW_RATIO, PF_FLOOR_MASS, PF_FLOOR_WALL, PF_FLOOR_WIN, PF_FLOOR_ROOF, PF_WALL_FLOOR, PF_WALL_MASS, PF_WALL_WIN, PF_WIN_FLOOR, PF_WIN_MASS, PF_WIN_WALL, PF_MASS_FLOOR, PF_MASS_WALL, PF_MASS_WIN, PF_WASTE_CAN, PF_WIN_WIN) Uses MODD_BEM_n MODD_TEB_n MODI_BEM_MORPHO Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PBLD real, intent(in), DIMENSION(:) :: PWALL_O_HOR real, intent(in), DIMENSION(:) :: PBLD_HEIGHT real, intent(inout), DIMENSION(:) :: PFLOOR_HEIGHT real, intent(in), DIMENSION(:) :: PGR real, intent(out), DIMENSION(:) :: PN_FLOOR real, intent(out), DIMENSION(:) :: PWALL_O_BLD real, intent(out), DIMENSION(:) :: PGLAZ_O_BLD real, intent(out), DIMENSION(:) :: PMASS_O_BLD real, intent(out), DIMENSION(:) :: PFLOOR_HW_RATIO real, intent(out), DIMENSION(:) :: PF_FLOOR_MASS real, intent(out), DIMENSION(:) :: PF_FLOOR_WALL real, intent(out), DIMENSION(:) :: PF_FLOOR_WIN real, intent(out), DIMENSION(:) :: PF_FLOOR_ROOF real, intent(out), DIMENSION(:) :: PF_WALL_FLOOR real, intent(out), DIMENSION(:) :: PF_WALL_MASS real, intent(out), DIMENSION(:) :: PF_WALL_WIN real, intent(out), DIMENSION(:) :: PF_WIN_FLOOR real, intent(out), DIMENSION(:) :: PF_WIN_MASS real, intent(out), DIMENSION(:) :: PF_WIN_WALL real, intent(out), DIMENSION(:) :: PF_MASS_FLOOR real, intent(out), DIMENSION(:) :: PF_MASS_WALL real, intent(out), DIMENSION(:) :: PF_MASS_WIN real, intent(inout), DIMENSION(:) :: PF_WASTE_CAN real, intent(out), DIMENSION(:) :: PF_WIN_WIN Contents Source Code BEM_MORPHO_STRUCT Source Code SUBROUTINE BEM_MORPHO_STRUCT ( PBLD , PWALL_O_HOR , PBLD_HEIGHT , PFLOOR_HEIGHT , & PGR , PN_FLOOR , PWALL_O_BLD , PGLAZ_O_BLD , PMASS_O_BLD , & PFLOOR_HW_RATIO , & PF_FLOOR_MASS , PF_FLOOR_WALL , PF_FLOOR_WIN , & PF_FLOOR_ROOF , PF_WALL_FLOOR , PF_WALL_MASS , & PF_WALL_WIN , PF_WIN_FLOOR , PF_WIN_MASS , PF_WIN_WALL , & PF_MASS_FLOOR , PF_MASS_WALL , PF_MASS_WIN , PF_WASTE_CAN , & PF_WIN_WIN ) !##################################################################### ! !!**** *BEM_MORPHO !! !!    PURPOSE !!    ------- !! compute morphometric parameter of the building for BEM !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !!      G. Pigeon   *Meteo France* !! !!    MODIFICATIONS !!    ------------- !!      Original    10/2011 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODI_BEM_MORPHO ! USE MODD_BEM_n , ONLY : BEM_t USE MODD_TEB_n , ONLY : TEB_t ! IMPLICIT NONE ! !*       0.1   Declarations of arguments !              ------------------------- ! REAL , DIMENSION (:), INTENT ( IN ) :: PBLD ! Urban horizontal building density REAL , DIMENSION (:), INTENT ( IN ) :: PWALL_O_HOR ! Wall to horizontal surface ratio REAL , DIMENSION (:), INTENT ( IN ) :: PBLD_HEIGHT ! Average building height [m] REAL , DIMENSION (:), INTENT ( INOUT ) :: PFLOOR_HEIGHT ! Building floor height [m] REAL , DIMENSION (:), INTENT ( IN ) :: PGR ! Glazing ratio REAL , DIMENSION (:), INTENT ( OUT ) :: PN_FLOOR ! number of floor levels REAL , DIMENSION (:), INTENT ( OUT ) :: PWALL_O_BLD ! wall surface per ground building surface [m2(wall)/m2(bld)] REAL , DIMENSION (:), INTENT ( OUT ) :: PGLAZ_O_BLD ! glazing surface per ground building surface [m2(glazing)/m2(bld)] REAL , DIMENSION (:), INTENT ( OUT ) :: PMASS_O_BLD ! thermal mass surface per ground building surface [m2(mass)/m2(bld)] REAL , DIMENSION (:), INTENT ( OUT ) :: PFLOOR_HW_RATIO !Height to width ratio of the floor levels REAL , DIMENSION (:), INTENT ( OUT ) :: PF_FLOOR_MASS !view factor from floor to mass (how much floor seen by mass) REAL , DIMENSION (:), INTENT ( OUT ) :: PF_FLOOR_WALL REAL , DIMENSION (:), INTENT ( OUT ) :: PF_FLOOR_WIN REAL , DIMENSION (:), INTENT ( OUT ) :: PF_FLOOR_ROOF REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WALL_FLOOR REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WALL_MASS REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WALL_WIN REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WIN_FLOOR REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WIN_MASS REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WIN_WALL REAL , DIMENSION (:), INTENT ( OUT ) :: PF_WIN_WIN REAL , DIMENSION (:), INTENT ( OUT ) :: PF_MASS_FLOOR REAL , DIMENSION (:), INTENT ( OUT ) :: PF_MASS_WALL REAL , DIMENSION (:), INTENT ( OUT ) :: PF_MASS_WIN REAL , DIMENSION (:), INTENT ( INOUT ) :: PF_WASTE_CAN !fraction of waste heat released into the canyon ! !*      0.2    Declarations of local variables ! TYPE ( BEM_t ) :: B TYPE ( TEB_t ) :: T ! !------------------------------------------------------------------------------ ALLOCATE ( B % XFLOOR_HEIGHT ( 1 )) ALLOCATE ( B % XGR ( 1 )) ALLOCATE ( B % XF_WASTE_CAN ( 1 )) ALLOCATE ( B % XN_FLOOR ( 1 )) ALLOCATE ( T % XWALL_O_BLD ( 1 )) ALLOCATE ( B % XGLAZ_O_BLD ( 1 )) ALLOCATE ( B % XMASS_O_BLD ( 1 )) ALLOCATE ( B % XFLOOR_HW_RATIO ( 1 )) ALLOCATE ( B % XF_FLOOR_MASS ( 1 )) ALLOCATE ( B % XF_FLOOR_WALL ( 1 )) ALLOCATE ( B % XF_FLOOR_WIN ( 1 )) ALLOCATE ( B % XF_FLOOR_ROOF ( 1 )) ALLOCATE ( B % XF_WALL_FLOOR ( 1 )) ALLOCATE ( B % XF_WALL_MASS ( 1 )) ALLOCATE ( B % XF_WALL_WIN ( 1 )) ALLOCATE ( B % XF_WIN_FLOOR ( 1 )) ALLOCATE ( B % XF_WIN_MASS ( 1 )) ALLOCATE ( B % XF_WIN_WALL ( 1 )) ALLOCATE ( B % XF_WIN_WIN ( 1 )) ALLOCATE ( B % XF_MASS_FLOOR ( 1 )) ALLOCATE ( B % XF_MASS_WALL ( 1 )) ALLOCATE ( B % XF_MASS_WIN ( 1 )) !------------------------------------------------------------------------------ ! ! put input variables in structures ! B % XFLOOR_HEIGHT = PFLOOR_HEIGHT ! Building Floor height B % XGR = PGR ! Glazing ratio B % XF_WASTE_CAN = PF_WASTE_CAN !fraction of waste heat released into the canyon ! !------------------------------------------------------------------------------ ! CALL BEM_MORPHO ( PBLD , PWALL_O_HOR , PBLD_HEIGHT , PWALL_O_BLD , B ) ! !------------------------------------------------------------------------------ ! ! put computed variables in structures ! PN_FLOOR = B % XN_FLOOR ! number of floor levels PGLAZ_O_BLD = B % XGLAZ_O_BLD ! glazing surface per ground building surface [m2(glazing)/m2(bld)] PMASS_O_BLD = B % XMASS_O_BLD ! thermal mass surface per ground building surface [m2(mass)/m2(bld)] PFLOOR_HW_RATIO = B % XFLOOR_HW_RATIO !Height to width ratio of the floor levels PF_FLOOR_MASS = B % XF_FLOOR_MASS !view factor from floor to mass (how much floor seen by mass) PF_FLOOR_WALL = B % XF_FLOOR_WALL PF_FLOOR_WIN = B % XF_FLOOR_WIN PF_FLOOR_ROOF = B % XF_FLOOR_ROOF PF_WALL_FLOOR = B % XF_WALL_FLOOR PF_WALL_MASS = B % XF_WALL_MASS PF_WALL_WIN = B % XF_WALL_WIN PF_WIN_FLOOR = B % XF_WIN_FLOOR PF_WIN_MASS = B % XF_WIN_MASS PF_WIN_WALL = B % XF_WIN_WALL PF_WIN_WIN = B % XF_WIN_WIN PF_MASS_FLOOR = B % XF_MASS_FLOOR PF_MASS_WALL = B % XF_MASS_WALL PF_MASS_WIN = B % XF_MASS_WIN PF_WASTE_CAN = B % XF_WASTE_CAN !fraction of waste heat released into the canyon ! !------------------------------------------------------------------------------ DEALLOCATE ( B % XFLOOR_HEIGHT ) DEALLOCATE ( B % XGR ) DEALLOCATE ( B % XF_WASTE_CAN ) DEALLOCATE ( B % XN_FLOOR ) DEALLOCATE ( T % XWALL_O_BLD ) DEALLOCATE ( B % XGLAZ_O_BLD ) DEALLOCATE ( B % XMASS_O_BLD ) DEALLOCATE ( B % XFLOOR_HW_RATIO ) DEALLOCATE ( B % XF_FLOOR_MASS ) DEALLOCATE ( B % XF_FLOOR_WALL ) DEALLOCATE ( B % XF_FLOOR_WIN ) DEALLOCATE ( B % XF_FLOOR_ROOF ) DEALLOCATE ( B % XF_WALL_FLOOR ) DEALLOCATE ( B % XF_WALL_MASS ) DEALLOCATE ( B % XF_WALL_WIN ) DEALLOCATE ( B % XF_WIN_FLOOR ) DEALLOCATE ( B % XF_WIN_MASS ) DEALLOCATE ( B % XF_WIN_WALL ) DEALLOCATE ( B % XF_WIN_WIN ) DEALLOCATE ( B % XF_MASS_FLOOR ) DEALLOCATE ( B % XF_MASS_WALL ) DEALLOCATE ( B % XF_MASS_WIN ) !------------------------------------------------------------------------------ ! END SUBROUTINE BEM_MORPHO_STRUCT","tags":"","loc":"proc/bem_morpho_struct.html"},{"title":"DEALLOC_TEB_STRUCT – Town Energy Balance (TEB) model API docs","text":"subroutine DEALLOC_TEB_STRUCT(TOP, T, BOP, B, TPN, TIR, DMT, GDM, GRM) Uses MODD_BEM_n MODD_BEM_OPTION_n MODD_DIAG_MISC_TEB_n MODD_TEB_IRRIG_n MODD_TEB_PANEL_n MODD_TEB_n MODD_SURFEX_n MODD_TEB_OPTION_n Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_OPTIONS_t), intent(inout) :: BOP type(BEM_t), intent(inout) :: B type(TEB_PANEL_t), intent(inout) :: TPN type(TEB_IRRIG_t), intent(inout) :: TIR type(DIAG_MISC_TEB_t), intent(inout) :: DMT type(TEB_GARDEN_MODEL_t), intent(inout) :: GDM type(TEB_GREENROOF_MODEL_t), intent(inout) :: GRM Contents Source Code DEALLOC_TEB_STRUCT Source Code SUBROUTINE DEALLOC_TEB_STRUCT ( TOP , T , BOP , B , TPN , TIR , DMT , GDM , GRM ) !   ########################################################################## ! !!****  *DEALLOC_TEB_STRUCT* !! !!    PURPOSE !!    ------- ! !       To allocate all the structures used in Teb_garden and subsequent routines. ! !!**  METHOD !     ------ ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!    Original    03/2018 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t , TEB_OPTIONS_INIT USE MODD_TEB_n , ONLY : TEB_t , TEB_INIT USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t , BEM_OPTIONS_INIT USE MODD_BEM_n , ONLY : BEM_t , BEM_INIT USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t , TEB_PANEL_INIT USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t , TEB_IRRIG_INIT USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t , DIAG_MISC_TEB_INIT USE MODD_SURFEX_n , ONLY : TEB_GARDEN_MODEL_t USE MODD_SURFEX_n , ONLY : TEB_GREENROOF_MODEL_t ! ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! ! ! TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: TOP TYPE ( TEB_t ), INTENT ( INOUT ) :: T TYPE ( BEM_OPTIONS_t ), INTENT ( INOUT ) :: BOP TYPE ( BEM_t ), INTENT ( INOUT ) :: B TYPE ( TEB_PANEL_t ), INTENT ( INOUT ) :: TPN TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: TIR TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: DMT TYPE ( TEB_GARDEN_MODEL_t ), INTENT ( INOUT ) :: GDM TYPE ( TEB_GREENROOF_MODEL_t ), INTENT ( INOUT ) :: GRM ! ! !*      0.2    Declarations of local variables ! ! !------------------------------------------------------------------------------- ! ! BEM structure ! ! ! Floor parameters ! DEALLOCATE ( B % XHC_FLOOR ) ! floor layers heat capacity        (J/K/m3) DEALLOCATE ( B % XTC_FLOOR ) ! floor layers thermal conductivity (W/K/m) DEALLOCATE ( B % XD_FLOOR ) ! depth of floor layers             (m) ! ! HVAC parameters ! DEALLOCATE ( B % XTCOOL_TARGET ) ! cooling setpoint of indoor air DEALLOCATE ( B % XTHEAT_TARGET ) ! heating setpoint of indoor air DEALLOCATE ( B % XF_WASTE_CAN ) ! fraction of waste heat released into the canyon DEALLOCATE ( B % XEFF_HEAT ) ! efficiency of the heating system ! ! Indoor parameters ! DEALLOCATE ( B % XTI_BLD ) ! building interior temperature    (K) DEALLOCATE ( B % XT_FLOOR ) ! floor layer temperatures         (K) DEALLOCATE ( B % XT_MASS ) ! Air cooled building internal th. mass temperature (K) ! DEALLOCATE ( B % XQIN ) ! internal heat gains [W m-2(floor)] DEALLOCATE ( B % XQIN_FRAD ) ! radiant fraction of internal heat gains DEALLOCATE ( B % XSHGC ) ! solar heat gain coef. of windows DEALLOCATE ( B % XSHGC_SH ) ! solar heat gain coef. of windows + shading DEALLOCATE ( B % XU_WIN ) ! window U-factor [K m W-2] DEALLOCATE ( B % XTRAN_WIN ) ! window transmittance (-) DEALLOCATE ( B % XGR ) ! glazing ratio DEALLOCATE ( B % XFLOOR_HEIGHT ) ! building floor height [m] DEALLOCATE ( B % XINF ) ! infiltration/ventilation flow rate [AC/H] ! ! New parameters ! DEALLOCATE ( B % XF_WATER_COND ) ! fraction of evaporation for condensers (cooling system) DEALLOCATE ( B % XAUX_MAX ) ! Auxiliar variable for autosize calcs DEALLOCATE ( B % XQIN_FLAT ) ! Latent franction of internal heat gains DEALLOCATE ( B % XHR_TARGET ) ! Relative humidity setpoint DEALLOCATE ( B % XT_WIN2 ) ! Indoor window temperature [K] DEALLOCATE ( B % XQI_BLD ) ! Indoor air specific humidity [kg kg-1] DEALLOCATE ( B % XV_VENT ) ! Ventilation flow rate [AC/H] DEALLOCATE ( B % XCAP_SYS_HEAT ) ! Capacity of the heating system ! [W m-2(bld)] DEALLOCATE ( B % XCAP_SYS_RAT ) ! Rated capacity of the cooling system ! [W m-2(bld)] DEALLOCATE ( B % XT_ADP ) ! Apparatus dewpoint temperature of the ! cooling coil [K] DEALLOCATE ( B % XM_SYS_RAT ) ! Rated HVAC mass flow rate ! [kg s-1 m-2(bld)] DEALLOCATE ( B % XCOP_RAT ) ! Rated COP of the cooling system DEALLOCATE ( B % XT_WIN1 ) ! outdoor window temperature [K] DEALLOCATE ( B % XALB_WIN ) ! window albedo DEALLOCATE ( B % XABS_WIN ) ! window absortance DEALLOCATE ( B % XT_SIZE_MAX ) ! Maximum outdoor air temperature for ! HVAC sizing [K] DEALLOCATE ( B % XT_SIZE_MIN ) ! Minimum outdoor air temperature for ! HVAC sizing [K] DEALLOCATE ( B % XUGG_WIN ) ! Window glass-to-glass U-factor [K m W-2] DEALLOCATE ( B % LSHADE ) ! flag to activate shading devices -> LOGICAL in the code DEALLOCATE ( B % XSHADE ) ! flag to activate shading devices -> REAL for i/o 0. or 1. DEALLOCATE ( B % CNATVENT ) ! flag to activate natural ventilation 'NONE', 'MANU', 'AUTO' DEALLOCATE ( B % XNATVENT ) ! flag to describe surventilation system for i/o ! 0 for NONE, 1 for MANU and 2 for AUTO DEALLOCATE ( B % LSHAD_DAY ) !Has shading been necessary this day ? DEALLOCATE ( B % LNATVENT_NIGHT ) !Has nocturnal surventilation been necessary and possible this night ? ! !indoor relative surfaces and view factors DEALLOCATE ( B % XN_FLOOR ) ! Number of floors DEALLOCATE ( B % XGLAZ_O_BLD ) ! Window area [m2_win/m2_bld] DEALLOCATE ( B % XMASS_O_BLD ) ! Mass area [m2_mass/m2_bld] DEALLOCATE ( B % XFLOOR_HW_RATIO ) ! H/W ratio of 1 floor level DEALLOCATE ( B % XF_FLOOR_MASS ) ! View factor floor-mass DEALLOCATE ( B % XF_FLOOR_WALL ) ! View factor floor-wall DEALLOCATE ( B % XF_FLOOR_WIN ) ! View factor floor-window DEALLOCATE ( B % XF_FLOOR_ROOF ) ! View factor floor-roof DEALLOCATE ( B % XF_WALL_FLOOR ) ! View factor wall-floor DEALLOCATE ( B % XF_WALL_MASS ) ! View factor wall-mass DEALLOCATE ( B % XF_WALL_WIN ) ! View factor wall-win DEALLOCATE ( B % XF_WIN_FLOOR ) ! View factor win-floor DEALLOCATE ( B % XF_WIN_MASS ) ! View factor win-mass DEALLOCATE ( B % XF_WIN_WALL ) ! View factor win-wall DEALLOCATE ( B % XF_WIN_WIN ) ! indoor View factor win-win DEALLOCATE ( B % XF_MASS_FLOOR ) ! View factor mass-floor DEALLOCATE ( B % XF_MASS_WALL ) ! View factor mass-wall DEALLOCATE ( B % XF_MASS_WIN ) ! View factor mass-window ! !------------------------------------------------------------------------------- ! ! TEB structure ! ! Geometric Parameters: ! DEALLOCATE ( T % XROAD_DIR ) ! Road direction (deg from North, clockwise) DEALLOCATE ( T % XGARDEN ) ! fraction of veg in the streets   (-) DEALLOCATE ( T % XGREENROOF ) ! fraction of greenroofs on roofs  (-) DEALLOCATE ( T % XBLD ) ! fraction of buildings            (-) DEALLOCATE ( T % XROAD ) ! fraction of roads                (-) DEALLOCATE ( T % XCAN_HW_RATIO ) ! canyon    h/W                    (-) DEALLOCATE ( T % XBLD_HEIGHT ) ! buildings height 'h'             (m) DEALLOCATE ( T % XWALL_O_HOR ) ! wall surf. / hor. surf.          (-) DEALLOCATE ( T % XROAD_O_GRND ) ! road surf. / (road + garden surf.) (-) DEALLOCATE ( T % XGARDEN_O_GRND ) ! gard. surf. / (road + garden surf.)(-) DEALLOCATE ( T % XWALL_O_GRND ) ! wall surf. / (road + garden surf.) (-) DEALLOCATE ( T % XWALL_O_BLD ) ! wall surf. / bld surf. (-) DEALLOCATE ( T % XZ0_TOWN ) ! roughness length for momentum    (m) DEALLOCATE ( T % XSVF_ROAD ) ! road sky view factor             (-) DEALLOCATE ( T % XSVF_GARDEN ) ! green area sky view factor       (-) DEALLOCATE ( T % XSVF_WALL ) ! wall sky view factor             (-) ! ! Roof parameters ! DEALLOCATE ( T % XALB_ROOF ) ! roof albedo                      (-) DEALLOCATE ( T % XEMIS_ROOF ) ! roof emissivity                  (-) DEALLOCATE ( T % XHC_ROOF ) ! roof layers heat capacity        (J/K/m3) DEALLOCATE ( T % XTC_ROOF ) ! roof layers thermal conductivity (W/K/m) DEALLOCATE ( T % XD_ROOF ) ! depth of roof layers             (m) DEALLOCATE ( T % XROUGH_ROOF ) ! roof roughness coef ! ! ! Road parameters ! DEALLOCATE ( T % XALB_ROAD ) ! road albedo                      (-) DEALLOCATE ( T % XEMIS_ROAD ) ! road emissivity                  (-) DEALLOCATE ( T % XHC_ROAD ) ! road layers heat capacity        (J/K/m3) DEALLOCATE ( T % XTC_ROAD ) ! road layers thermal conductivity (W/K/m) DEALLOCATE ( T % XD_ROAD ) ! depth of road layers             (m) ! ! Wall parameters ! DEALLOCATE ( T % XALB_WALL ) ! wall albedo                      (-) DEALLOCATE ( T % XEMIS_WALL ) ! wall emissivity                  (-) DEALLOCATE ( T % XHC_WALL ) ! wall layers heat capacity        (J/K/m3) DEALLOCATE ( T % XTC_WALL ) ! wall layers thermal conductivity (W/K/m) DEALLOCATE ( T % XD_WALL ) ! depth of wall layers             (m) DEALLOCATE ( T % XROUGH_WALL ) ! wall roughness coef ! ! Building's use type ! DEALLOCATE ( T % XRESIDENTIAL ) ! fraction of Residential use      (-) ! ! anthropogenic fluxes ! DEALLOCATE ( T % XH_TRAFFIC ) ! anthropogenic sensible !                                                  ! heat fluxes due to traffic       (W/m2) DEALLOCATE ( T % XLE_TRAFFIC ) ! anthropogenic latent !                                                  ! heat fluxes due to traffic       (W/m2) DEALLOCATE ( T % XH_INDUSTRY ) ! anthropogenic sensible !                                                  ! heat fluxes due to factories     (W/m2) DEALLOCATE ( T % XLE_INDUSTRY ) ! anthropogenic latent !                                                  ! heat fluxes due to factories     (W/m2) ! ! temperatures for boundary conditions ! DEALLOCATE ( T % XTI_ROAD ) ! road interior temperature        (K) ! ! Prognostic variables: ! DEALLOCATE ( T % XWS_ROOF ) ! roof water reservoir             (kg/m2) DEALLOCATE ( T % XWS_ROAD ) ! road water reservoir             (kg/m2) DEALLOCATE ( T % XT_ROOF ) ! roof layer temperatures          (K) DEALLOCATE ( T % XT_ROAD ) ! road layer temperatures          (K) DEALLOCATE ( T % XT_WALL_A ) ! wall layer temperatures          (K) DEALLOCATE ( T % XT_WALL_B ) ! wall layer temperatures          (K) ! DEALLOCATE ( T % XAC_ROOF ) ! roof aerodynamic conductance     () DEALLOCATE ( T % XAC_ROAD ) ! road aerodynamic conductance     () DEALLOCATE ( T % XAC_WALL ) ! wall aerodynamic conductance     () DEALLOCATE ( T % XAC_TOP ) ! top  aerodynamic conductance     () DEALLOCATE ( T % XAC_ROOF_WAT ) ! water aerodynamic conductance    () DEALLOCATE ( T % XAC_ROAD_WAT ) ! water aerodynamic conductance    () ! DEALLOCATE ( T % XQSAT_ROOF ) ! humidity of saturation for roofs (kg/kg) DEALLOCATE ( T % XQSAT_ROAD ) ! humidity of saturation for roads (kg/kg) ! DEALLOCATE ( T % XDELT_ROOF ) ! humidity of saturation for roofs (-) DEALLOCATE ( T % XDELT_ROAD ) ! humidity of saturation for roads (-) ! ! Semi-prognostic variables: ! DEALLOCATE ( T % XT_CANYON ) ! canyon air temperature           (K) DEALLOCATE ( T % XQ_CANYON ) ! canyon air specific humidity     (kg/kg) ! ! ! Prognostic snow: ! DEALLOCATE ( T % TSNOW_ROOF % WSNOW ) ! snow (& liq. water) content      (kg/m2) DEALLOCATE ( T % TSNOW_ROOF % T ) ! temperature                      (K) DEALLOCATE ( T % TSNOW_ROOF % RHO ) ! density                          (kg m-3) DEALLOCATE ( T % TSNOW_ROOF % ALB ) ! albedo                           (-) DEALLOCATE ( T % TSNOW_ROOF % EMIS ) ! emissivity                       (-) DEALLOCATE ( T % TSNOW_ROOF % TS ) ! Surface temperature              (K) DEALLOCATE ( T % TSNOW_ROAD % WSNOW ) ! snow (& liq. water) content      (kg/m2) DEALLOCATE ( T % TSNOW_ROAD % T ) ! temperature                      (K) DEALLOCATE ( T % TSNOW_ROAD % RHO ) ! density                          (kg m-3) DEALLOCATE ( T % TSNOW_ROAD % ALB ) ! albedo                           (-) DEALLOCATE ( T % TSNOW_ROAD % EMIS ) ! emissivity                       (-) DEALLOCATE ( T % TSNOW_ROAD % TS ) ! Surface temperature              (K) !------------------------------------------------------------------------------- ! ! solar panels ! DEALLOCATE ( TPN % XEMIS_PANEL ) ! emissivity of solar panels               (-) DEALLOCATE ( TPN % XALB_PANEL ) ! albedo of soolar panels                  (-) DEALLOCATE ( TPN % XEFF_PANEL ) ! Efficiency coefficient of solar panels   (-) DEALLOCATE ( TPN % XFRAC_PANEL ) ! Fraction of SOLAR panels on roofs        (-) DEALLOCATE ( TPN % XTHER_PRODC_DAY ) ! Present day integrated thermal production of energy    (J/m2 panel) !------------------------------------------------------------------------------- ! ! Irrigation ! DEALLOCATE ( TIR % XRD_START_MONTH ) ! roads : start month for irrigation (included) DEALLOCATE ( TIR % XRD_END_MONTH ) ! roads : end   month for irrigation (included) DEALLOCATE ( TIR % XRD_START_HOUR ) ! roads : start solar hour for irrigation (included, hour) DEALLOCATE ( TIR % XRD_END_HOUR ) ! roads : end   solar hour for irrigation (excluded, hour) DEALLOCATE ( TIR % XRD_24H_IRRIG ) ! roads : total irrigation over 24 hours (kg/m2) ! !------------------------------------------------------------------------------- ! ! TEB diagnostics structure ! DEALLOCATE ( DMT % XZ0_TOWN ) ! town roughness length DEALLOCATE ( DMT % XQF_BLD ) ! domestic heating DEALLOCATE ( DMT % XFLX_BLD ) ! heat flux from bld DEALLOCATE ( DMT % XQF_TOWN ) ! total anthropogenic heat DEALLOCATE ( DMT % XDQS_TOWN ) ! storage inside building ! DEALLOCATE ( DMT % XH_WALL_A ) ! wall sensible heat flux          (W/m2) DEALLOCATE ( DMT % XH_WALL_B ) ! wall sensible heat flux          (W/m2) DEALLOCATE ( DMT % XH_ROOF ) ! roof sensible heat flux          (W/m2) DEALLOCATE ( DMT % XH_ROAD ) ! road sensible heat flux          (W/m2) DEALLOCATE ( DMT % XH_STRLROOF ) ! structural roof sens. heat flux  (W/m2) DEALLOCATE ( DMT % XH_BLT ) ! built surf sensible heat flux    (W/m2) DEALLOCATE ( DMT % XRN_WALL_A ) ! net radiation at wall            (W/m2) DEALLOCATE ( DMT % XRN_WALL_B ) ! net radiation at wall            (W/m2) DEALLOCATE ( DMT % XRN_ROOF ) ! net radiation at roof            (W/m2) DEALLOCATE ( DMT % XRN_ROAD ) ! net radiation at road            (W/m2) DEALLOCATE ( DMT % XRN_STRLROOF ) !net radiation at structural roofs(W/m2) DEALLOCATE ( DMT % XRN_BLT ) ! net radiation at built surf      (W/m2) DEALLOCATE ( DMT % XGFLUX_WALL_A ) !net wall conduction flux        (W/m2) DEALLOCATE ( DMT % XGFLUX_WALL_B ) !net wall conduction flux        (W/m2) DEALLOCATE ( DMT % XGFLUX_ROOF ) ! net roof conduction flux         (W/m2) DEALLOCATE ( DMT % XGFLUX_ROAD ) ! net road conduction flux         (W/m2) DEALLOCATE ( DMT % XGFLUX_STRLROOF ) !net structural roof cond flux (W/m2) DEALLOCATE ( DMT % XGFLUX_BLT ) ! net built surf conduction flux   (W/m2) DEALLOCATE ( DMT % XLE_ROOF ) ! roof latent heat flux            (W/m2) DEALLOCATE ( DMT % XLE_ROAD ) ! road latent heat flux            (W/m2) DEALLOCATE ( DMT % XLE_STRLROOF ) !structural roof latent heat flux (W/m2) DEALLOCATE ( DMT % XLE_BLT ) ! built surf latent heat flux      (W/m2) ! DEALLOCATE ( DMT % XRUNOFF_TOWN ) ! aggregated water runoff for town      (kg/m2/s) DEALLOCATE ( DMT % XIRRIG_GARDEN ) ! summer ground irrigation rate         (kg/m2/s) DEALLOCATE ( DMT % XRUNOFF_ROAD ) ! water runoff for roads                (kg/m2/s) DEALLOCATE ( DMT % XIRRIG_ROAD ) ! road man-made watering rate           (kg/m2/s) DEALLOCATE ( DMT % XRUNOFF_ROOF ) ! aggregated water runoff for roofs     (kg/m2/s) DEALLOCATE ( DMT % XRUNOFF_STRLROOF ) ! water runoff for structural roofs     (kg/m2/s) DEALLOCATE ( DMT % XIRRIG_GREENROOF ) ! summer ground irrigation rate         (kg/m2/s) ! DEALLOCATE ( DMT % XABS_SW_ROOF ) ! absorbed shortwave radiation over roofs DEALLOCATE ( DMT % XABS_SW_SNOW_ROOF ) ! absorbed longwave radiation over roofs DEALLOCATE ( DMT % XABS_LW_ROOF ) ! absorbed shortwave radiation over roofs DEALLOCATE ( DMT % XABS_LW_SNOW_ROOF ) ! absorbed longwave radiation over roofs DEALLOCATE ( DMT % XABS_SW_ROAD ) ! absorbed shortwave radiation over roads DEALLOCATE ( DMT % XABS_SW_SNOW_ROAD ) ! absorbed longwave radiation over roads DEALLOCATE ( DMT % XABS_LW_ROAD ) ! absorbed shortwave radiation over roads DEALLOCATE ( DMT % XABS_LW_SNOW_ROAD ) ! absorbed longwave radiation over roads DEALLOCATE ( DMT % XABS_SW_WALL_A ) ! absorbed shortwave radiation over walls DEALLOCATE ( DMT % XABS_SW_WALL_B ) ! absorbed shortwave radiation over walls DEALLOCATE ( DMT % XABS_LW_WALL_A ) ! absorbed shortwave radiation over walls DEALLOCATE ( DMT % XABS_LW_WALL_B ) ! absorbed shortwave radiation over walls DEALLOCATE ( DMT % XABS_SW_GARDEN ) ! absorbed shortwave radiation over green areas DEALLOCATE ( DMT % XABS_LW_GARDEN ) ! absorbed shortwave radiation over green areas DEALLOCATE ( DMT % XABS_SW_GREENROOF ) ! absorbed shortwave radiation over green roofs DEALLOCATE ( DMT % XABS_LW_GREENROOF ) ! absorbed shortwave radiation over green roofs DEALLOCATE ( DMT % XG_GREENROOF_ROOF ) ! Heat flux between green roof and structural roof DEALLOCATE ( DMT % XABS_SW_PANEL ) ! absorbed shortwave radiation over solar panels DEALLOCATE ( DMT % XABS_LW_PANEL ) ! absorbed longwave  radiation over solar panels ! DEALLOCATE ( DMT % XRN_PANEL ) ! net radiation           over solar panels (W/m2) DEALLOCATE ( DMT % XH_PANEL ) ! sensible heat flux      over solar panels (W/m2) DEALLOCATE ( DMT % XTHER_PROD_PANEL ) ! thermal      production of   solar panels (W/m2 thermal panel) DEALLOCATE ( DMT % XPHOT_PROD_PANEL ) ! photovoltaic production of   solar panels (W/m2 photovoltaic panel) DEALLOCATE ( DMT % XPROD_PANEL ) !              production of   solar panels (W/m2 panel) DEALLOCATE ( DMT % XTHER_PROD_BLD ) ! thermal      production of   solar panels (W/m2 bld) DEALLOCATE ( DMT % XPHOT_PROD_BLD ) ! photovoltaic production of   solar panels (W/m2 bld) DEALLOCATE ( DMT % XH_BLD_COOL ) ! Sensible cooling energy demand ! of the building [W m-2(bld)] DEALLOCATE ( DMT % XT_BLD_COOL ) ! Total cooling energy demand ! of the building [W m-2(bld)] DEALLOCATE ( DMT % XH_BLD_HEAT ) ! Heating energy demand ! of the building [W m-2(bld)] DEALLOCATE ( DMT % XLE_BLD_COOL ) ! Latent cooling energy demand ! of the building [W m-2(bld)] DEALLOCATE ( DMT % XLE_BLD_HEAT ) ! Latent heating energy demand ! of the building [W m-2(bld)] DEALLOCATE ( DMT % XH_WASTE ) ! Sensible waste heat from HVAC system ! [W m-2(tot)] DEALLOCATE ( DMT % XLE_WASTE ) ! Latent waste heat from HVAC system ! [W m-2(tot)] DEALLOCATE ( DMT % XHVAC_COOL ) ! Energy consumption of the cooling system ! [W m-2(bld)] DEALLOCATE ( DMT % XHVAC_HEAT ) ! Energy consumption of the heating system ! [W m-2(bld)] DEALLOCATE ( DMT % XCAP_SYS ) ! Actual capacity of the cooling system ! [W m-2(bld)] DEALLOCATE ( DMT % XM_SYS ) ! Actual HVAC mass flow rate ! [kg s-1 m-2(bld)] DEALLOCATE ( DMT % XCOP ) ! COP of the cooling system DEALLOCATE ( DMT % XQ_SYS ) ! Supply air specific humidity [kg kg-1] DEALLOCATE ( DMT % XT_SYS ) ! Supply air temperature [K] DEALLOCATE ( DMT % XTR_SW_WIN ) ! Solar radiation transmitted throught ! windows [W m-2(bld)] DEALLOCATE ( DMT % XFAN_POWER ) ! HVAC fan power DEALLOCATE ( DMT % XABS_SW_WIN ) ! window absorbed shortwave radiation [W m-2] DEALLOCATE ( DMT % XABS_LW_WIN ) ! absorbed infrared rad. [W m-2] DEALLOCATE ( DMT % XEMIT_LW_FAC ) ! LW flux emitted by the facade (W/m2 facade) DEALLOCATE ( DMT % XEMIT_LW_GRND ) ! LW flux emitted by the ground (W/m2 ground = road + garden) DEALLOCATE ( DMT % XT_RAD_IND ) !Indoor mean radiant temperature [K] DEALLOCATE ( DMT % XREF_SW_GRND ) ! total solar rad reflected by ground DEALLOCATE ( DMT % XREF_SW_FAC ) ! total solar rad reflected by facade DEALLOCATE ( DMT % XHU_BLD ) !Indoor relative humidity ! DEALLOCATE ( DMT % XTCOOL_TARGET ) ! current cooling setpoint of indoor air DEALLOCATE ( DMT % XTHEAT_TARGET ) ! current heating setpoint of indoor air DEALLOCATE ( DMT % XQIN ) ! current internal heat gains [W m-2(floor)] ! New fields DEALLOCATE ( GDM % VD % ND % AL ) DEALLOCATE ( GDM % VD % NDE % AL ) DEALLOCATE ( GDM % VD % NDM % AL ) DEALLOCATE ( GDM % NPE % AL ) DEALLOCATE ( GRM % VD % ND % AL ) DEALLOCATE ( GRM % VD % NDE % AL ) DEALLOCATE ( GRM % VD % NDM % AL ) DEALLOCATE ( GRM % NPE % AL ) !------------------------------------------------------------------------------- ! ! END SUBROUTINE DEALLOC_TEB_STRUCT","tags":"","loc":"proc/dealloc_teb_struct.html"},{"title":"WINDOW_DATA_STRUCT – Town Energy Balance (TEB) model API docs","text":"subroutine WINDOW_DATA_STRUCT(KI, PSHGC, PU_WIN, PALB_WIN, PABS_WIN, PUGG_WIN, PTRAN_WIN) Uses MODI_WINDOW_DATA MODD_BEM_n Arguments Type Intent Optional Attributes Name integer, intent(in) :: KI real, intent(in), DIMENSION(KI) :: PSHGC real, intent(in), DIMENSION(KI) :: PU_WIN real, intent(out), DIMENSION(KI) :: PALB_WIN real, intent(out), DIMENSION(KI) :: PABS_WIN real, intent(out), DIMENSION(KI) :: PUGG_WIN real, intent(out), DIMENSION(KI) :: PTRAN_WIN Contents Source Code WINDOW_DATA_STRUCT Source Code SUBROUTINE WINDOW_DATA_STRUCT ( KI , PSHGC , PU_WIN , PALB_WIN , PABS_WIN , PUGG_WIN , PTRAN_WIN ) !     ############################################################# ! ! !!****  *WINDOW_DATA* !! !!    PURPOSE !!    ------- ! !     Computes the radiative properties of the window ! ! !!**  METHOD !!     ------ !! uses U_WIN (window conductivity) and SHGC (window solar heat gain coef) !! to compute the normal incident transmittance/reflectance !! a factor to normal incident tran/ref is applied to take into account all !! possible incidence between 18deg and 72deg !! !! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    MODD_CST !! !! !!    REFERENCE !!    --------- !! !! Simple Window Model from EnergyPlus Engineering Reference V7, 2012, p. 217. !! !!    AUTHOR !!    ------ !! !!      B. Bueno           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!      Original    11/10 !!      G. Pigeon & J. Le Bras  09/12 apply new factor to normal incident tran/ref !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! ! ! USE MODI_WINDOW_DATA ! USE MODD_BEM_n , ONLY : BEM_t ! IMPLICIT NONE ! INTEGER , INTENT ( IN ) :: KI ! number of points REAL , DIMENSION ( KI ), INTENT ( IN ) :: PSHGC ! solar heat gain coef. of windows REAL , DIMENSION ( KI ), INTENT ( IN ) :: PU_WIN ! window U-factor [K m W-2] REAL , DIMENSION ( KI ), INTENT ( OUT ) :: PALB_WIN ! window albedo REAL , DIMENSION ( KI ), INTENT ( OUT ) :: PABS_WIN ! window absortance REAL , DIMENSION ( KI ), INTENT ( OUT ) :: PUGG_WIN ! window glass-to-glass U-factor [W m-2 K-1] REAL , DIMENSION ( KI ), INTENT ( OUT ) :: PTRAN_WIN ! window transmittance (-) ! ! !*      0.2    Declarations of local variables ! TYPE ( BEM_t ) :: B ! ! !------------------------------------------------------------------------------ ALLOCATE ( B % XSHGC ( 1 )) ALLOCATE ( B % XU_WIN ( 1 )) ALLOCATE ( B % XALB_WIN ( 1 )) ALLOCATE ( B % XABS_WIN ( 1 )) ALLOCATE ( B % XUGG_WIN ( 1 )) ALLOCATE ( B % XTRAN_WIN ( 1 )) !------------------------------------------------------------------------------ ! ! put input variables in structures B % XSHGC = PSHGC ! solar heat gain coef. of windows B % XU_WIN = PU_WIN ! window U-factor [K m W-2] !------------------------------------------------------------------------------ ! CALL WINDOW_DATA ( KI , B ) ! !------------------------------------------------------------------------------ ! ! put computed variables in output variables PALB_WIN = B % XALB_WIN ! window albedo PABS_WIN = B % XABS_WIN ! window absortance PUGG_WIN = B % XUGG_WIN ! window glass-to-glass U-factor [W m-2 K-1] PTRAN_WIN = B % XTRAN_WIN ! window transmittance (-)! !------------------------------------------------------------------------------ DEALLOCATE ( B % XSHGC ) DEALLOCATE ( B % XU_WIN ) DEALLOCATE ( B % XALB_WIN ) DEALLOCATE ( B % XABS_WIN ) DEALLOCATE ( B % XUGG_WIN ) DEALLOCATE ( B % XTRAN_WIN ) !------------------------------------------------------------------------------ ! END SUBROUTINE WINDOW_DATA_STRUCT","tags":"","loc":"proc/window_data_struct.html"},{"title":"TEB_GARDEN_STRUCT – Town Energy Balance (TEB) model API docs","text":"subroutine TEB_GARDEN_STRUCT(OGARDEN, OGREENROOF, OSOLAR_PANEL, HZ0H, HIMPLICIT_WIND, HROAD_DIR, HWALL_OPT, TPTIME, PTSUN, PT_CAN, PQ_CAN, PU_CAN, PT_LOWCAN, PQ_LOWCAN, PU_LOWCAN, PZ_LOWCAN, PTI_BLD, PT_ROOF, PT_ROAD, PT_WALL_A, PT_WALL_B, PWS_ROOF, PWS_ROAD, HSNOW_ROOF, PWSNOW_ROOF, PTSNOW_ROOF, PRSNOW_ROOF, PASNOW_ROOF, PTSSNOW_ROOF, PESNOW_ROOF, HSNOW_ROAD, PWSNOW_ROAD, PTSNOW_ROAD, PRSNOW_ROAD, PASNOW_ROAD, PTSSNOW_ROAD, PESNOW_ROAD, PPEW_A_COEF, PPEW_B_COEF, PPEW_A_COEF_LOWCAN, PPEW_B_COEF_LOWCAN, PPS, PPA, PEXNS, PEXNA, PTA, PQA, PRHOA, PCO2, PLW_RAD, PDIR_SW, PSCA_SW, PSW_BANDS, KSW, PZENITH, PAZIM, PRR, PSR, PZREF, PUREF, PVMOD, PH_TRAFFIC, PLE_TRAFFIC, PH_INDUSTRY, PLE_INDUSTRY, PTSTEP, PZ0_TOWN, PBLD, PGARDEN, PROAD_DIR, PROAD, PFRAC_GR, PBLD_HEIGHT, PWALL_O_HOR, PCAN_HW_RATIO, PROAD_O_GRND, PGARDEN_O_GRND, PWALL_O_GRND, PALB_ROOF, PEMIS_ROOF, PHC_ROOF, PTC_ROOF, PD_ROOF, PALB_ROAD, PEMIS_ROAD, PSVF_ROAD, PHC_ROAD, PTC_ROAD, PD_ROAD, PALB_WALL, PEMIS_WALL, PSVF_WALL, PSVF_GARDEN, PHC_WALL, PTC_WALL, PD_WALL, PRN_ROOF, PH_ROOF, PLE_ROOF, PLEW_ROOF, PGFLUX_ROOF, PRUNOFF_ROOF, PRN_ROAD, PH_ROAD, PLE_ROAD, PLEW_ROAD, PGFLUX_ROAD, PRUNOFF_ROAD, PRN_WALL_A, PH_WALL_A, PLE_WALL_A, PGFLUX_WALL_A, PRN_WALL_B, PH_WALL_B, PLE_WALL_B, PGFLUX_WALL_B, PRN_STRLROOF, PH_STRLROOF, PLE_STRLROOF, PGFLUX_STRLROOF, PRUNOFF_STRLROOF, PRN_BLT, PH_BLT, PLE_BLT, PGFLUX_BLT, PRNSNOW_ROOF, PHSNOW_ROOF, PLESNOW_ROOF, PGSNOW_ROOF, PMELT_ROOF, PRNSNOW_ROAD, PHSNOW_ROAD, PLESNOW_ROAD, PGSNOW_ROAD, PMELT_ROAD, PRN_GRND, PH_GRND, PLE_GRND, PGFLUX_GRND, PRN_TOWN, PH_TOWN, PLE_TOWN, PGFLUX_TOWN, PEVAP_TOWN, PRUNOFF_TOWN, PSFCO2, PUW_GRND, PUW_ROOF, PDUWDU_GRND, PDUWDU_ROOF, PUSTAR_TOWN, PCD, PCDN, PCH_TOWN, PRI_TOWN, PTS_TOWN, PEMIS_TOWN, PDIR_ALB_TOWN, PSCA_ALB_TOWN, PRESA_TOWN, PDQS_TOWN, PQF_TOWN, PQF_BLD, PFLX_BLD, PAC_ROAD, PAC_GARDEN, PAC_GREENROOF, PAC_ROAD_WAT, PAC_GARDEN_WAT, PAC_GREENROOF_WAT, PABS_SW_ROOF, PABS_LW_ROOF, PABS_SW_SNOW_ROOF, PABS_LW_SNOW_ROOF, PABS_SW_ROAD, PABS_LW_ROAD, PABS_SW_SNOW_ROAD, PABS_LW_SNOW_ROAD, PABS_SW_WALL_A, PABS_LW_WALL_A, PABS_SW_WALL_B, PABS_LW_WALL_B, PABS_SW_PANEL, PABS_LW_PANEL, PABS_SW_GARDEN, PABS_LW_GARDEN, PABS_SW_GREENROOF, PABS_LW_GREENROOF, PG_GREENROOF_ROOF, HCOOL_COIL, PF_WATER_COND, HHEAT_COIL, HNATVENT, PNATVENT, KDAY, PAUX_MAX, PT_FLOOR, PT_MASS, PH_BLD_COOL, PT_BLD_COOL, PH_BLD_HEAT, PLE_BLD_COOL, PLE_BLD_HEAT, PH_WASTE, PLE_WASTE, PF_WASTE_CAN, PHVAC_COOL, PHVAC_HEAT, PQIN, PQIN_FRAD, PQIN_FLAT, PGR, PEFF_HEAT, PINF, PTCOOL_TARGET, PTHEAT_TARGET, PHR_TARGET, PT_WIN2, PQI_BLD, PV_VENT, PCAP_SYS_HEAT, PCAP_SYS_RAT, PT_ADP, PM_SYS_RAT, PCOP_RAT, PCAP_SYS, PM_SYS, PCOP, PQ_SYS, PT_SYS, PTR_SW_WIN, PFAN_POWER, PHC_FLOOR, PTC_FLOOR, PD_FLOOR, PT_WIN1, PABS_SW_WIN, PABS_LW_WIN, PSHGC, PSHGC_SH, PUGG_WIN, PALB_WIN, PABS_WIN, PEMIT_LW_FAC, PEMIT_LW_GRND, PT_RAD_IND, PREF_SW_GRND, PREF_SW_FAC, PHU_BLD, PTIME, OSHADE, PSHADE, OSHAD_DAY, ONATVENT_NIGHT, HBEM, PN_FLOOR, PWALL_O_BLD, PGLAZ_O_BLD, PMASS_O_BLD, PFLOOR_HW_RATIO, PF_FLOOR_MASS, PF_FLOOR_WALL, PF_FLOOR_WIN, PF_FLOOR_ROOF, PF_WALL_FLOOR, PF_WALL_MASS, PF_WALL_WIN, PF_WIN_FLOOR, PF_WIN_MASS, PF_WIN_WALL, PF_MASS_FLOOR, PF_MASS_WALL, PF_MASS_WIN, OCANOPY, PTRAN_WIN, HCH_BEM, PROUGH_ROOF, PROUGH_WALL, PF_WIN_WIN, OPAR_RD_IRRIG, PRD_START_MONTH, PRD_END_MONTH, PRD_START_HOUR, PRD_END_HOUR, PRD_24H_IRRIG, PIRRIG_ROAD, PEMIS_PANEL, PALB_PANEL, PEFF_PANEL, PFRAC_PANEL, PRESIDENTIAL, PTHER_PROD_PANEL, PPHOT_PROD_PANEL, PPROD_PANEL, PTHER_PROD_BLD, PPHOT_PROD_BLD, PPROD_BLD, PTHER_PRODC_DAY, PH_PANEL, PRN_PANEL, PDT_RES, PDT_OFF, PCUR_TCOOL_TARGET, PCUR_THEAT_TARGET, PCUR_QIN) Uses MODD_DATA_COVER_n MODD_BEM_n MODD_BEM_OPTION_n MODD_DIAG_MISC_TEB_n MODI_ALLOC_TEB_STRUCT MODI_TEB_GARDEN MODD_TEB_IRRIG_n MODD_TEB_PANEL_n MODI_DEALLOC_TEB_STRUCT MODD_SFX_GRID_n MODD_SURF_PAR MODD_TEB_n MODD_SURFEX_n MODD_TEB_OPTION_n MODD_TYPE_DATE_SURF Arguments Type Intent Optional Attributes Name logical, intent(in) :: OGARDEN logical, intent(in) :: OGREENROOF logical, intent(in) :: OSOLAR_PANEL character(len=6), intent(in) :: HZ0H character(len=*), intent(in) :: HIMPLICIT_WIND character(len=4), intent(in) :: HROAD_DIR character(len=4), intent(in) :: HWALL_OPT type(DATE_TIME), intent(in) :: TPTIME real, intent(in), DIMENSION(:) :: PTSUN real, intent(inout), DIMENSION(:) :: PT_CAN real, intent(inout), DIMENSION(:) :: PQ_CAN real, intent(in), DIMENSION(:) :: PU_CAN real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PU_LOWCAN real, intent(in), DIMENSION(:) :: PZ_LOWCAN real, intent(inout), DIMENSION(:) :: PTI_BLD real, intent(inout), DIMENSION(:,:) :: PT_ROOF real, intent(inout), DIMENSION(:,:) :: PT_ROAD real, intent(inout), DIMENSION(:,:) :: PT_WALL_A real, intent(inout), DIMENSION(:,:) :: PT_WALL_B real, intent(inout), DIMENSION(:) :: PWS_ROOF real, intent(inout), DIMENSION(:) :: PWS_ROAD character(len=*), intent(in) :: HSNOW_ROOF real, intent(inout), DIMENSION(:,:) :: PWSNOW_ROOF real, intent(inout), DIMENSION(:,:) :: PTSNOW_ROOF real, intent(inout), DIMENSION(:,:) :: PRSNOW_ROOF real, intent(inout), DIMENSION(:) :: PASNOW_ROOF real, intent(inout), DIMENSION(:) :: PTSSNOW_ROOF real, intent(inout), DIMENSION(:) :: PESNOW_ROOF character(len=*), intent(in) :: HSNOW_ROAD real, intent(inout), DIMENSION(:,:) :: PWSNOW_ROAD real, intent(inout), DIMENSION(:,:) :: PTSNOW_ROAD real, intent(inout), DIMENSION(:,:) :: PRSNOW_ROAD real, intent(inout), DIMENSION(:) :: PASNOW_ROAD real, intent(inout), DIMENSION(:) :: PTSSNOW_ROAD real, intent(inout), DIMENSION(:) :: PESNOW_ROAD real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPEW_A_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_B_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PPA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PCO2 real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:,:) :: PDIR_SW real, intent(in), DIMENSION(:,:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PSW_BANDS integer, intent(in) :: KSW real, intent(in), DIMENSION(:) :: PZENITH real, intent(in), DIMENSION(:) :: PAZIM real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PH_TRAFFIC real, intent(in), DIMENSION(:) :: PLE_TRAFFIC real, intent(in), DIMENSION(:) :: PH_INDUSTRY real, intent(in), DIMENSION(:) :: PLE_INDUSTRY real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PZ0_TOWN real, intent(in), DIMENSION(:) :: PBLD real, intent(in), DIMENSION(:) :: PGARDEN real, intent(in), DIMENSION(:) :: PROAD_DIR real, intent(in), DIMENSION(:) :: PROAD real, intent(in), DIMENSION(:) :: PFRAC_GR real, intent(in), DIMENSION(:) :: PBLD_HEIGHT real, intent(in), DIMENSION(:) :: PWALL_O_HOR real, intent(in), DIMENSION(:) :: PCAN_HW_RATIO real, intent(in), DIMENSION(:) :: PROAD_O_GRND real, intent(in), DIMENSION(:) :: PGARDEN_O_GRND real, intent(in), DIMENSION(:) :: PWALL_O_GRND real, intent(in), DIMENSION(:) :: PALB_ROOF real, intent(in), DIMENSION(:) :: PEMIS_ROOF real, intent(in), DIMENSION(:,:) :: PHC_ROOF real, intent(in), DIMENSION(:,:) :: PTC_ROOF real, intent(in), DIMENSION(:,:) :: PD_ROOF real, intent(in), DIMENSION(:) :: PALB_ROAD real, intent(in), DIMENSION(:) :: PEMIS_ROAD real, intent(in), DIMENSION(:) :: PSVF_ROAD real, intent(in), DIMENSION(:,:) :: PHC_ROAD real, intent(in), DIMENSION(:,:) :: PTC_ROAD real, intent(in), DIMENSION(:,:) :: PD_ROAD real, intent(in), DIMENSION(:) :: PALB_WALL real, intent(in), DIMENSION(:) :: PEMIS_WALL real, intent(in), DIMENSION(:) :: PSVF_WALL real, intent(in), DIMENSION(:) :: PSVF_GARDEN real, intent(in), DIMENSION(:,:) :: PHC_WALL real, intent(in), DIMENSION(:,:) :: PTC_WALL real, intent(in), DIMENSION(:,:) :: PD_WALL real, intent(out), DIMENSION(:) :: PRN_ROOF real, intent(out), DIMENSION(:) :: PH_ROOF real, intent(out), DIMENSION(:) :: PLE_ROOF real, intent(out), DIMENSION(:) :: PLEW_ROOF real, intent(out), DIMENSION(:) :: PGFLUX_ROOF real, intent(out), DIMENSION(:) :: PRUNOFF_ROOF real, intent(out), DIMENSION(:) :: PRN_ROAD real, intent(out), DIMENSION(:) :: PH_ROAD real, intent(out), DIMENSION(:) :: PLE_ROAD real, intent(out), DIMENSION(:) :: PLEW_ROAD real, intent(out), DIMENSION(:) :: PGFLUX_ROAD real, intent(out), DIMENSION(:) :: PRUNOFF_ROAD real, intent(out), DIMENSION(:) :: PRN_WALL_A real, intent(out), DIMENSION(:) :: PH_WALL_A real, intent(out), DIMENSION(:) :: PLE_WALL_A real, intent(out), DIMENSION(:) :: PGFLUX_WALL_A real, intent(out), DIMENSION(:) :: PRN_WALL_B real, intent(out), DIMENSION(:) :: PH_WALL_B real, intent(out), DIMENSION(:) :: PLE_WALL_B real, intent(out), DIMENSION(:) :: PGFLUX_WALL_B real, intent(out), DIMENSION(:) :: PRN_STRLROOF real, intent(out), DIMENSION(:) :: PH_STRLROOF real, intent(out), DIMENSION(:) :: PLE_STRLROOF real, intent(out), DIMENSION(:) :: PGFLUX_STRLROOF real, intent(out), DIMENSION(:) :: PRUNOFF_STRLROOF real, intent(out), DIMENSION(:) :: PRN_BLT real, intent(out), DIMENSION(:) :: PH_BLT real, intent(out), DIMENSION(:) :: PLE_BLT real, intent(out), DIMENSION(:) :: PGFLUX_BLT real, intent(out), DIMENSION(:) :: PRNSNOW_ROOF real, intent(out), DIMENSION(:) :: PHSNOW_ROOF real, intent(out), DIMENSION(:) :: PLESNOW_ROOF real, intent(out), DIMENSION(:) :: PGSNOW_ROOF real, intent(out), DIMENSION(:) :: PMELT_ROOF real, intent(out), DIMENSION(:) :: PRNSNOW_ROAD real, intent(out), DIMENSION(:) :: PHSNOW_ROAD real, intent(out), DIMENSION(:) :: PLESNOW_ROAD real, intent(out), DIMENSION(:) :: PGSNOW_ROAD real, intent(out), DIMENSION(:) :: PMELT_ROAD real, intent(out), DIMENSION(:) :: PRN_GRND real, intent(out), DIMENSION(:) :: PH_GRND real, intent(out), DIMENSION(:) :: PLE_GRND real, intent(out), DIMENSION(:) :: PGFLUX_GRND real, intent(out), DIMENSION(:) :: PRN_TOWN real, intent(out), DIMENSION(:) :: PH_TOWN real, intent(out), DIMENSION(:) :: PLE_TOWN real, intent(out), DIMENSION(:) :: PGFLUX_TOWN real, intent(out), DIMENSION(:) :: PEVAP_TOWN real, intent(out), DIMENSION(:) :: PRUNOFF_TOWN real, intent(out), DIMENSION(:) :: PSFCO2 real, intent(out), DIMENSION(:) :: PUW_GRND real, intent(out), DIMENSION(:) :: PUW_ROOF real, intent(out), DIMENSION(:) :: PDUWDU_GRND real, intent(out), DIMENSION(:) :: PDUWDU_ROOF real, intent(out), DIMENSION(:) :: PUSTAR_TOWN real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN real, intent(out), DIMENSION(:) :: PCH_TOWN real, intent(out), DIMENSION(:) :: PRI_TOWN real, intent(out), DIMENSION(:) :: PTS_TOWN real, intent(out), DIMENSION(:) :: PEMIS_TOWN real, intent(out), DIMENSION(:) :: PDIR_ALB_TOWN real, intent(out), DIMENSION(:) :: PSCA_ALB_TOWN real, intent(out), DIMENSION(:) :: PRESA_TOWN real, intent(out), DIMENSION(:) :: PDQS_TOWN real, intent(out), DIMENSION(:) :: PQF_TOWN real, intent(out), DIMENSION(:) :: PQF_BLD real, intent(out), DIMENSION(:) :: PFLX_BLD real, intent(out), DIMENSION(:) :: PAC_ROAD real, intent(out), DIMENSION(:) :: PAC_GARDEN real, intent(out), DIMENSION(:) :: PAC_GREENROOF real, intent(out), DIMENSION(:) :: PAC_ROAD_WAT real, intent(out), DIMENSION(:) :: PAC_GARDEN_WAT real, intent(out), DIMENSION(:) :: PAC_GREENROOF_WAT real, intent(out), DIMENSION(:) :: PABS_SW_ROOF real, intent(out), DIMENSION(:) :: PABS_LW_ROOF real, intent(out), DIMENSION(:) :: PABS_SW_SNOW_ROOF real, intent(out), DIMENSION(:) :: PABS_LW_SNOW_ROOF real, intent(out), DIMENSION(:) :: PABS_SW_ROAD real, intent(out), DIMENSION(:) :: PABS_LW_ROAD real, intent(out), DIMENSION(:) :: PABS_SW_SNOW_ROAD real, intent(out), DIMENSION(:) :: PABS_LW_SNOW_ROAD real, intent(out), DIMENSION(:) :: PABS_SW_WALL_A real, intent(out), DIMENSION(:) :: PABS_LW_WALL_A real, intent(out), DIMENSION(:) :: PABS_SW_WALL_B real, intent(out), DIMENSION(:) :: PABS_LW_WALL_B real, intent(out), DIMENSION(:) :: PABS_SW_PANEL real, intent(out), DIMENSION(:) :: PABS_LW_PANEL real, intent(out), DIMENSION(:) :: PABS_SW_GARDEN real, intent(out), DIMENSION(:) :: PABS_LW_GARDEN real, intent(out), DIMENSION(:) :: PABS_SW_GREENROOF real, intent(out), DIMENSION(:) :: PABS_LW_GREENROOF real, intent(out), DIMENSION(:) :: PG_GREENROOF_ROOF character(len=12), intent(in) :: HCOOL_COIL real, intent(in), DIMENSION(:) :: PF_WATER_COND character(len=6), intent(in) :: HHEAT_COIL character(len=4), intent(in), DIMENSION(:) :: HNATVENT real, intent(in), DIMENSION(:) :: PNATVENT integer, intent(in) :: KDAY real, intent(inout), DIMENSION(:) :: PAUX_MAX real, intent(inout), DIMENSION(:,:) :: PT_FLOOR real, intent(inout), DIMENSION(:,:) :: PT_MASS real, intent(out), DIMENSION(:) :: PH_BLD_COOL real, intent(out), DIMENSION(:) :: PT_BLD_COOL real, intent(out), DIMENSION(:) :: PH_BLD_HEAT real, intent(out), DIMENSION(:  ) :: PLE_BLD_COOL real, intent(out), DIMENSION(:) :: PLE_BLD_HEAT real, intent(out), DIMENSION(:) :: PH_WASTE real, intent(out), DIMENSION(:) :: PLE_WASTE real, intent(in), DIMENSION(:) :: PF_WASTE_CAN real, intent(out), DIMENSION(:) :: PHVAC_COOL real, intent(out), DIMENSION(:) :: PHVAC_HEAT real, intent(in), DIMENSION(:) :: PQIN real, intent(in), DIMENSION(:) :: PQIN_FRAD real, intent(in), DIMENSION(:) :: PQIN_FLAT real, intent(in), DIMENSION(:) :: PGR real, intent(in), DIMENSION(:) :: PEFF_HEAT real, intent(in), DIMENSION(:) :: PINF real, intent(in), DIMENSION(:) :: PTCOOL_TARGET real, intent(in), DIMENSION(:) :: PTHEAT_TARGET real, intent(in), DIMENSION(:) :: PHR_TARGET real, intent(inout), DIMENSION(:) :: PT_WIN2 real, intent(inout), DIMENSION(:) :: PQI_BLD real, intent(in), DIMENSION(:) :: PV_VENT real, intent(in), DIMENSION(:) :: PCAP_SYS_HEAT real, intent(inout), DIMENSION(:) :: PCAP_SYS_RAT real, intent(in), DIMENSION(:) :: PT_ADP real, intent(inout), DIMENSION(:) :: PM_SYS_RAT real, intent(in), DIMENSION(:) :: PCOP_RAT real, intent(out), DIMENSION(:) :: PCAP_SYS real, intent(out), DIMENSION(:) :: PM_SYS real, intent(out), DIMENSION(:) :: PCOP real, intent(out), DIMENSION(:) :: PQ_SYS real, intent(out), DIMENSION(:) :: PT_SYS real, intent(out), DIMENSION(:) :: PTR_SW_WIN real, intent(out), DIMENSION(:) :: PFAN_POWER real, intent(in), DIMENSION(:,:) :: PHC_FLOOR real, intent(in), DIMENSION(:,:) :: PTC_FLOOR real, intent(in), DIMENSION(:,:) :: PD_FLOOR real, intent(inout), DIMENSION(:) :: PT_WIN1 real, intent(out), DIMENSION(:) :: PABS_SW_WIN real, intent(out), DIMENSION(:) :: PABS_LW_WIN real, intent(in), DIMENSION(:) :: PSHGC real, intent(in), DIMENSION(:) :: PSHGC_SH real, intent(in), DIMENSION(:) :: PUGG_WIN real, intent(out), DIMENSION(:) :: PALB_WIN real, intent(in), DIMENSION(:) :: PABS_WIN real, intent(out), DIMENSION(:) :: PEMIT_LW_FAC real, intent(out), DIMENSION(:) :: PEMIT_LW_GRND real, intent(out), DIMENSION(:) :: PT_RAD_IND real, intent(out), DIMENSION(:) :: PREF_SW_GRND real, intent(out), DIMENSION(:) :: PREF_SW_FAC real, intent(out), DIMENSION(:) :: PHU_BLD real, intent(in) :: PTIME logical, intent(in), DIMENSION(:) :: OSHADE real, intent(in), DIMENSION(:) :: PSHADE logical, intent(inout), DIMENSION(:) :: OSHAD_DAY logical, intent(inout), DIMENSION(:) :: ONATVENT_NIGHT character(len=3), intent(in) :: HBEM real, intent(in), DIMENSION(:) :: PN_FLOOR real, intent(in), DIMENSION(:) :: PWALL_O_BLD real, intent(in), DIMENSION(:) :: PGLAZ_O_BLD real, intent(in), DIMENSION(:) :: PMASS_O_BLD real, intent(in), DIMENSION(:) :: PFLOOR_HW_RATIO real, intent(in), DIMENSION(:) :: PF_FLOOR_MASS real, intent(in), DIMENSION(:) :: PF_FLOOR_WALL real, intent(in), DIMENSION(:) :: PF_FLOOR_WIN real, intent(in), DIMENSION(:) :: PF_FLOOR_ROOF real, intent(in), DIMENSION(:) :: PF_WALL_FLOOR real, intent(in), DIMENSION(:) :: PF_WALL_MASS real, intent(in), DIMENSION(:) :: PF_WALL_WIN real, intent(in), DIMENSION(:) :: PF_WIN_FLOOR real, intent(in), DIMENSION(:) :: PF_WIN_MASS real, intent(in), DIMENSION(:) :: PF_WIN_WALL real, intent(in), DIMENSION(:) :: PF_MASS_FLOOR real, intent(in), DIMENSION(:) :: PF_MASS_WALL real, intent(in), DIMENSION(:) :: PF_MASS_WIN logical, intent(in) :: OCANOPY real, intent(in), DIMENSION(:) :: PTRAN_WIN character(len=5), intent(in) :: HCH_BEM real, intent(in), DIMENSION(:) :: PROUGH_ROOF real, intent(in), DIMENSION(:) :: PROUGH_WALL real, intent(in), DIMENSION(:) :: PF_WIN_WIN logical, intent(in) :: OPAR_RD_IRRIG real, intent(in), DIMENSION(:) :: PRD_START_MONTH real, intent(in), DIMENSION(:) :: PRD_END_MONTH real, intent(in), DIMENSION(:) :: PRD_START_HOUR real, intent(in), DIMENSION(:) :: PRD_END_HOUR real, intent(in), DIMENSION(:) :: PRD_24H_IRRIG real, intent(out), DIMENSION(:) :: PIRRIG_ROAD real, intent(in), DIMENSION(:) :: PEMIS_PANEL real, intent(in), DIMENSION(:) :: PALB_PANEL real, intent(in), DIMENSION(:) :: PEFF_PANEL real, intent(in), DIMENSION(:) :: PFRAC_PANEL real, intent(in), DIMENSION(:) :: PRESIDENTIAL real, intent(out), DIMENSION(:) :: PTHER_PROD_PANEL real, intent(out), DIMENSION(:) :: PPHOT_PROD_PANEL real, intent(out), DIMENSION(:) :: PPROD_PANEL real, intent(out), DIMENSION(:) :: PTHER_PROD_BLD real, intent(out), DIMENSION(:) :: PPHOT_PROD_BLD real, intent(out), DIMENSION(:) :: PPROD_BLD real, intent(inout), DIMENSION(:) :: PTHER_PRODC_DAY real, intent(out), DIMENSION(:) :: PH_PANEL real, intent(out), DIMENSION(:) :: PRN_PANEL real, intent(in) :: PDT_RES real, intent(in) :: PDT_OFF real, intent(out), DIMENSION(:) :: PCUR_TCOOL_TARGET real, intent(out), DIMENSION(:) :: PCUR_THEAT_TARGET real, intent(out), DIMENSION(:) :: PCUR_QIN Contents Source Code TEB_GARDEN_STRUCT Source Code SUBROUTINE TEB_GARDEN_STRUCT ( OGARDEN , OGREENROOF , OSOLAR_PANEL , & HZ0H , HIMPLICIT_WIND , HROAD_DIR , HWALL_OPT , TPTIME , & PTSUN , PT_CAN , PQ_CAN , PU_CAN , & PT_LOWCAN , PQ_LOWCAN , PU_LOWCAN , PZ_LOWCAN , PTI_BLD , & PT_ROOF , PT_ROAD , PT_WALL_A , PT_WALL_B , & PWS_ROOF , PWS_ROAD , & HSNOW_ROOF , & PWSNOW_ROOF , PTSNOW_ROOF , PRSNOW_ROOF , PASNOW_ROOF , & PTSSNOW_ROOF , PESNOW_ROOF , & HSNOW_ROAD , & PWSNOW_ROAD , PTSNOW_ROAD , PRSNOW_ROAD , PASNOW_ROAD , & PTSSNOW_ROAD , PESNOW_ROAD , & PPEW_A_COEF , PPEW_B_COEF , & PPEW_A_COEF_LOWCAN , PPEW_B_COEF_LOWCAN , & PPS , PPA , PEXNS , PEXNA , & PTA , PQA , PRHOA , PCO2 , & PLW_RAD , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , & PZENITH , PAZIM , & PRR , PSR , & PZREF , PUREF , PVMOD , & PH_TRAFFIC , PLE_TRAFFIC , PH_INDUSTRY , PLE_INDUSTRY , & PTSTEP , PZ0_TOWN , PBLD , PGARDEN , PROAD_DIR , PROAD , & PFRAC_GR , & PBLD_HEIGHT , PWALL_O_HOR , PCAN_HW_RATIO , & PROAD_O_GRND , PGARDEN_O_GRND , PWALL_O_GRND , & PALB_ROOF , PEMIS_ROOF , & PHC_ROOF , PTC_ROOF , PD_ROOF , & PALB_ROAD , PEMIS_ROAD , PSVF_ROAD , & PHC_ROAD , PTC_ROAD , PD_ROAD , & PALB_WALL , PEMIS_WALL , PSVF_WALL , & PSVF_GARDEN , & PHC_WALL , PTC_WALL , PD_WALL , & PRN_ROOF , PH_ROOF , PLE_ROOF , PLEW_ROOF , PGFLUX_ROOF , & PRUNOFF_ROOF , & PRN_ROAD , PH_ROAD , PLE_ROAD , PLEW_ROAD , PGFLUX_ROAD , & PRUNOFF_ROAD , & PRN_WALL_A , PH_WALL_A , PLE_WALL_A , PGFLUX_WALL_A , & PRN_WALL_B , PH_WALL_B , PLE_WALL_B , PGFLUX_WALL_B , & PRN_STRLROOF , PH_STRLROOF , PLE_STRLROOF , PGFLUX_STRLROOF , & PRUNOFF_STRLROOF , & PRN_BLT , PH_BLT , PLE_BLT , PGFLUX_BLT , & PRNSNOW_ROOF , PHSNOW_ROOF , PLESNOW_ROOF , PGSNOW_ROOF , & PMELT_ROOF , & PRNSNOW_ROAD , PHSNOW_ROAD , PLESNOW_ROAD , PGSNOW_ROAD , & PMELT_ROAD , & PRN_GRND , PH_GRND , PLE_GRND , PGFLUX_GRND , & PRN_TOWN , PH_TOWN , PLE_TOWN , PGFLUX_TOWN , PEVAP_TOWN , & PRUNOFF_TOWN , PSFCO2 , & PUW_GRND , PUW_ROOF , PDUWDU_GRND , PDUWDU_ROOF , & PUSTAR_TOWN , PCD , PCDN , PCH_TOWN , PRI_TOWN , & PTS_TOWN , PEMIS_TOWN , PDIR_ALB_TOWN , PSCA_ALB_TOWN , & PRESA_TOWN , PDQS_TOWN , PQF_TOWN , PQF_BLD , & PFLX_BLD , PAC_ROAD , PAC_GARDEN , PAC_GREENROOF , & PAC_ROAD_WAT , PAC_GARDEN_WAT , PAC_GREENROOF_WAT , & PABS_SW_ROOF , PABS_LW_ROOF , & PABS_SW_SNOW_ROOF , PABS_LW_SNOW_ROOF , & PABS_SW_ROAD , PABS_LW_ROAD , & PABS_SW_SNOW_ROAD , PABS_LW_SNOW_ROAD , & PABS_SW_WALL_A , PABS_LW_WALL_A , & PABS_SW_WALL_B , PABS_LW_WALL_B , & PABS_SW_PANEL , PABS_LW_PANEL , & PABS_SW_GARDEN , PABS_LW_GARDEN , & PABS_SW_GREENROOF , PABS_LW_GREENROOF , & PG_GREENROOF_ROOF , & HCOOL_COIL , PF_WATER_COND , HHEAT_COIL , & HNATVENT , PNATVENT , KDAY , PAUX_MAX , PT_FLOOR , & PT_MASS , PH_BLD_COOL , PT_BLD_COOL , PH_BLD_HEAT , & PLE_BLD_COOL , PLE_BLD_HEAT , PH_WASTE , PLE_WASTE , & PF_WASTE_CAN , PHVAC_COOL , PHVAC_HEAT , PQIN , PQIN_FRAD , & PQIN_FLAT , PGR , PEFF_HEAT , PINF , & PTCOOL_TARGET , PTHEAT_TARGET , PHR_TARGET , PT_WIN2 , & PQI_BLD , PV_VENT , PCAP_SYS_HEAT , PCAP_SYS_RAT , PT_ADP , & PM_SYS_RAT , PCOP_RAT , PCAP_SYS , PM_SYS , PCOP , PQ_SYS , & PT_SYS , PTR_SW_WIN , PFAN_POWER , PHC_FLOOR , PTC_FLOOR , & PD_FLOOR , PT_WIN1 , PABS_SW_WIN , PABS_LW_WIN , PSHGC , & PSHGC_SH , PUGG_WIN , PALB_WIN , PABS_WIN , PEMIT_LW_FAC , & PEMIT_LW_GRND , PT_RAD_IND , PREF_SW_GRND , PREF_SW_FAC , & PHU_BLD , PTIME , OSHADE , PSHADE , OSHAD_DAY , ONATVENT_NIGHT , HBEM , & PN_FLOOR , PWALL_O_BLD , PGLAZ_O_BLD , PMASS_O_BLD , & PFLOOR_HW_RATIO , PF_FLOOR_MASS , PF_FLOOR_WALL , & PF_FLOOR_WIN , PF_FLOOR_ROOF , PF_WALL_FLOOR , PF_WALL_MASS ,& PF_WALL_WIN , PF_WIN_FLOOR , PF_WIN_MASS , PF_WIN_WALL , & PF_MASS_FLOOR , PF_MASS_WALL , PF_MASS_WIN , OCANOPY , & PTRAN_WIN , HCH_BEM , PROUGH_ROOF , PROUGH_WALL , PF_WIN_WIN ,& OPAR_RD_IRRIG , PRD_START_MONTH , PRD_END_MONTH , & PRD_START_HOUR , PRD_END_HOUR , PRD_24H_IRRIG , PIRRIG_ROAD ,& PEMIS_PANEL , PALB_PANEL , PEFF_PANEL , PFRAC_PANEL , & PRESIDENTIAL , & PTHER_PROD_PANEL , PPHOT_PROD_PANEL , PPROD_PANEL , & PTHER_PROD_BLD , PPHOT_PROD_BLD , PPROD_BLD , & PTHER_PRODC_DAY , PH_PANEL , PRN_PANEL , & PDT_RES , PDT_OFF , & PCUR_TCOOL_TARGET , PCUR_THEAT_TARGET , PCUR_QIN ) !   ########################################################################## ! !!****  *TEB_GARDEN_STRUCT* !! !!    PURPOSE !!    ------- ! ! To put all individual variables in the corresponding fortran structure ! for the call to TEB_GARDEN routine. ! !!**  METHOD !     ------ ! ! !!    EXTERNAL !!    -------- !! !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !! !!    REFERENCE !!    --------- !! !! !!    AUTHOR !!    ------ !! !!      V. Masson           * Meteo-France * !! !!    MODIFICATIONS !!    ------------- !!    Original    03/2018 !------------------------------------------------------------------------------- ! !*       0.     DECLARATIONS !               ------------ ! USE MODD_TYPE_DATE_SURF USE MODD_SURF_PAR , ONLY : XUNDEF ! USE MODD_DATA_COVER_n , ONLY : DATA_COVER_t USE MODD_SFX_GRID_n , ONLY : GRID_t USE MODD_TEB_OPTION_n , ONLY : TEB_OPTIONS_t USE MODD_TEB_n , ONLY : TEB_t USE MODD_BEM_OPTION_n , ONLY : BEM_OPTIONS_t USE MODD_BEM_n , ONLY : BEM_t USE MODD_TEB_PANEL_n , ONLY : TEB_PANEL_t USE MODD_TEB_IRRIG_n , ONLY : TEB_IRRIG_t USE MODD_DIAG_MISC_TEB_n , ONLY : DIAG_MISC_TEB_t USE MODD_SURFEX_n , ONLY : TEB_GARDEN_MODEL_t USE MODD_SURFEX_n , ONLY : TEB_GREENROOF_MODEL_t ! USE MODI_ALLOC_TEB_STRUCT USE MODI_DEALLOC_TEB_STRUCT USE MODI_TEB_GARDEN ! IMPLICIT NONE ! !*      0.1    Declarations of arguments ! ! ! ! LOGICAL , INTENT ( IN ) :: OGARDEN ! Flag to use a garden    model inside the canyon LOGICAL , INTENT ( IN ) :: OGREENROOF ! Flag to use a greenroof model on roofs LOGICAL , INTENT ( IN ) :: OSOLAR_PANEL ! Flag to use a Solar Panel model on roofs CHARACTER ( LEN = 6 ) , INTENT ( IN ) :: HZ0H ! TEB option for z0h roof & road !                                                         ! 'MASC95' : Mascart et al 1995 !                                                         ! 'BRUT82' : Brustaert     1982 !                                                         ! 'KAND07' : Kanda         2007 CHARACTER ( LEN =* ), INTENT ( IN ) :: HIMPLICIT_WIND ! wind implicitation option !                                                         ! 'OLD' = direct !                                                         ! 'NEW' = Taylor serie, order 1 CHARACTER ( LEN = 4 ) , INTENT ( IN ) :: HROAD_DIR ! TEB option for road direction ! 'UNIF' : uniform roads ! 'ORIE' : specified !   road orientation CHARACTER ( LEN = 4 ) , INTENT ( IN ) :: HWALL_OPT ! TEB option for walls representation ! 'UNIF' : uniform walls ! 'TWO ' : 2 opposite  walls TYPE ( DATE_TIME ) , INTENT ( IN ) :: TPTIME ! current date and time from teb REAL , DIMENSION (:), INTENT ( IN ) :: PTSUN ! solar time   (s from midnight) ! REAL , DIMENSION (:) , INTENT ( INOUT ) :: PT_CAN ! canyon air temperature REAL , DIMENSION (:) , INTENT ( INOUT ) :: PQ_CAN ! canyon air specific humidity REAL , DIMENSION (:) , INTENT ( IN ) :: PU_CAN ! canyon hor. wind REAL , DIMENSION (:) , INTENT ( IN ) :: PU_LOWCAN ! wind near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PT_LOWCAN ! temp. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PQ_LOWCAN ! hum. near the road REAL , DIMENSION (:) , INTENT ( IN ) :: PZ_LOWCAN ! height of atm. var. near the road REAL , DIMENSION (:) , INTENT ( INOUT ) :: PTI_BLD ! inside building temperature REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_ROOF ! roof layers temperatures REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_ROAD ! road layers temperatures REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_WALL_A ! wall layers temperatures REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_WALL_B ! wall layers temperatures REAL , DIMENSION (:) , INTENT ( INOUT ) :: PWS_ROOF ! roof water reservoir REAL , DIMENSION (:) , INTENT ( INOUT ) :: PWS_ROAD ! road water reservoir CHARACTER ( LEN =* ) , INTENT ( IN ) :: HSNOW_ROOF ! snow roof scheme 'NONE', 'D95 ', '1-L ' CHARACTER ( LEN =* ) , INTENT ( IN ) :: HSNOW_ROAD ! snow road scheme 'NONE', 'D95 ', '1-L ' REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PWSNOW_ROOF ! snow layers reservoir REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PTSNOW_ROOF ! snow layers temperature REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PRSNOW_ROOF ! snow layers density REAL , DIMENSION (:) , INTENT ( INOUT ) :: PASNOW_ROOF ! snow albedo REAL , DIMENSION (:) , INTENT ( INOUT ) :: PESNOW_ROOF ! snow emissivity REAL , DIMENSION (:) , INTENT ( INOUT ) :: PTSSNOW_ROOF ! snow surface temperature REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PWSNOW_ROAD ! snow layers reservoir REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PTSNOW_ROAD ! snow layers temperature REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PRSNOW_ROAD ! snow layers density REAL , DIMENSION (:) , INTENT ( INOUT ) :: PASNOW_ROAD ! snow albedo REAL , DIMENSION (:) , INTENT ( INOUT ) :: PESNOW_ROAD ! snow emissivity REAL , DIMENSION (:) , INTENT ( INOUT ) :: PTSSNOW_ROAD ! snow surface temperature REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF ! implicit coefficients REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF ! for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_A_COEF_LOWCAN ! implicit coefficients for wind coupling REAL , DIMENSION (:) , INTENT ( IN ) :: PPEW_B_COEF_LOWCAN ! between low canyon wind and road REAL , DIMENSION (:) , INTENT ( IN ) :: PPS ! pressure at the surface REAL , DIMENSION (:) , INTENT ( IN ) :: PPA ! pressure at the first atmospheric level REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNS ! surface exner function REAL , DIMENSION (:) , INTENT ( IN ) :: PTA ! temperature at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PQA ! specific humidity at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PVMOD ! module of the horizontal wind REAL , DIMENSION (:) , INTENT ( IN ) :: PEXNA ! exner function at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PRHOA ! air density at the lowest level REAL , DIMENSION (:) , INTENT ( IN ) :: PCO2 ! CO2 concentration in the air    (kg/m3) REAL , DIMENSION (:) , INTENT ( IN ) :: PLW_RAD ! atmospheric infrared radiation REAL , DIMENSION (:,:), INTENT ( IN ) :: PDIR_SW ! incoming direct solar rad on an horizontal surface REAL , DIMENSION (:,:), INTENT ( IN ) :: PSCA_SW ! scattered incoming solar rad. REAL , DIMENSION (:) , INTENT ( IN ) :: PSW_BANDS ! mean wavelength of each shortwave band (m) INTEGER , INTENT ( IN ) :: KSW ! number of short-wave spectral bands REAL , DIMENSION (:) , INTENT ( IN ) :: PZENITH ! solar zenithal angle REAL , DIMENSION (:) , INTENT ( IN ) :: PAZIM ! solar azimuthal angle ! (radian form N, clockwise) REAL , DIMENSION (:) , INTENT ( IN ) :: PRR ! rain rate REAL , DIMENSION (:) , INTENT ( IN ) :: PSR ! snow rate REAL , DIMENSION (:) , INTENT ( IN ) :: PH_TRAFFIC ! anthropogenic sensible heat fluxes due to traffic REAL , DIMENSION (:) , INTENT ( IN ) :: PLE_TRAFFIC ! anthropogenic latent heat fluxes due to traffic REAL , DIMENSION (:) , INTENT ( IN ) :: PH_INDUSTRY ! anthropogenic sensible heat fluxes due to factories REAL , DIMENSION (:) , INTENT ( IN ) :: PLE_INDUSTRY ! anthropogenic latent heat fluxes due to factories REAL , DIMENSION (:) , INTENT ( IN ) :: PZREF ! reference height of the first atm level (temperature) REAL , DIMENSION (:) , INTENT ( IN ) :: PUREF ! reference height of the first atm level (wind) REAL , INTENT ( IN ) :: PTSTEP ! time step REAL , DIMENSION (:) , INTENT ( IN ) :: PZ0_TOWN ! town roughness length for momentum REAL , DIMENSION (:) , INTENT ( IN ) :: PBLD ! fraction of buildings REAL , DIMENSION (:) , INTENT ( IN ) :: PGARDEN ! fraction of green areas REAL , DIMENSION (:) , INTENT ( IN ) :: PROAD_DIR ! road direction (deg from North, clockwise) REAL , DIMENSION (:) , INTENT ( IN ) :: PROAD ! fraction of roads REAL , DIMENSION (:) , INTENT ( IN ) :: PFRAC_GR ! fraction of green roofs REAL , DIMENSION (:) , INTENT ( IN ) :: PBLD_HEIGHT ! buildings h REAL , DIMENSION (:) , INTENT ( IN ) :: PWALL_O_HOR ! wall surf. / hor. surf. REAL , DIMENSION (:) , INTENT ( IN ) :: PCAN_HW_RATIO ! canyon    h/W REAL , DIMENSION (:) , INTENT ( IN ) :: PROAD_O_GRND ! road surf.   / (road+garden surf.) REAL , DIMENSION (:) , INTENT ( IN ) :: PGARDEN_O_GRND ! garden surf. / (road+garden surf.) REAL , DIMENSION (:) , INTENT ( IN ) :: PWALL_O_GRND ! wall surf.   / (road+garden surf.) REAL , DIMENSION (:) , INTENT ( IN ) :: PALB_ROOF ! roof albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PEMIS_ROOF ! roof emissivity REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC_ROOF ! heat capacity for roof layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC_ROOF ! thermal conductivity for roof layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PD_ROOF ! depth of roof layers REAL , DIMENSION (:) , INTENT ( IN ) :: PALB_ROAD ! road albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PEMIS_ROAD ! road emissivity REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC_ROAD ! heat capacity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC_ROAD ! thermal conductivity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PD_ROAD ! depth of road layers REAL , DIMENSION (:) , INTENT ( IN ) :: PSVF_ROAD ! road sky view factor REAL , DIMENSION (:) , INTENT ( IN ) :: PALB_WALL ! wall albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PEMIS_WALL ! wall emissivity REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC_WALL ! heat capacity for wall layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC_WALL ! thermal conductivity for wall layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PD_WALL ! depth of wall layers REAL , DIMENSION (:) , INTENT ( IN ) :: PSVF_WALL ! wall sky view factor REAL , DIMENSION (:) , INTENT ( IN ) :: PSVF_GARDEN ! green area sky view factor ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_ROOF ! net radiation over roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_ROOF ! sensible heat flux over roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_ROOF ! latent heat flux over roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PLEW_ROOF ! latent heat flux over roof (snow) REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_ROOF ! flux through the roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF_ROOF ! runoff over the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_ROAD ! net radiation over road REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_ROAD ! sensible heat flux over road REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_ROAD ! latent heat flux over road REAL , DIMENSION (:) , INTENT ( OUT ) :: PLEW_ROAD ! latent heat flux over road (snow) REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_ROAD ! flux through the road REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF_ROAD ! runoff over the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_WALL_A ! net radiation over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_WALL_A ! sensible heat flux over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_WALL_A ! latent heat flux over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_WALL_A ! flux through the wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_WALL_B ! net radiation over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_WALL_B ! sensible heat flux over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_WALL_B ! latent heat flux over wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_WALL_B ! flux through the wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_STRLROOF ! net radiation over structural roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_STRLROOF ! sensible heat flux over structural roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_STRLROOF ! latent heat flux over structural roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_STRLROOF ! flux through the structural roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF_STRLROOF ! runoff aver structural roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_BLT ! net radiation over built surf REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_BLT ! sensible heat flux over built surf REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_BLT ! latent heat flux over built surf REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_BLT ! flux through the built surf ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PRNSNOW_ROOF ! net radiation over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PHSNOW_ROOF ! sensible heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PLESNOW_ROOF ! latent heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PGSNOW_ROOF ! flux under the snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PMELT_ROOF ! snow melt REAL , DIMENSION (:) , INTENT ( OUT ) :: PRNSNOW_ROAD ! net radiation over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PHSNOW_ROAD ! sensible heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PLESNOW_ROAD ! latent heat flux over snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PGSNOW_ROAD ! flux under the snow REAL , DIMENSION (:) , INTENT ( OUT ) :: PMELT_ROAD ! snow melt ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_GRND ! net radiation over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_GRND ! sensible heat flux over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_GRND ! latent heat flux over ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_GRND ! flux through the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PRN_TOWN ! net radiation over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_TOWN ! sensible heat flux over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_TOWN ! latent heat flux over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PGFLUX_TOWN ! flux through the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PEVAP_TOWN ! evaporation flux (kg/m2/s) REAL , DIMENSION (:) , INTENT ( OUT ) :: PRUNOFF_TOWN ! runoff over the ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PSFCO2 ! flux of CO2       (m/s*kg_CO2/kg_air) REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW_GRND ! momentum flux for ground built surf REAL , DIMENSION (:) , INTENT ( OUT ) :: PUW_ROOF ! momentum flux for roofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PDUWDU_GRND ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PDUWDU_ROOF ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PUSTAR_TOWN ! friciton velocity over town REAL , DIMENSION (:) , INTENT ( OUT ) :: PCD ! town averaged drag coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PCDN ! town averaged neutral drag coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PCH_TOWN ! town averaged heat transfer coefficient REAL , DIMENSION (:) , INTENT ( OUT ) :: PRI_TOWN ! town averaged Richardson number REAL , DIMENSION (:) , INTENT ( OUT ) :: PTS_TOWN ! town surface temperature REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIS_TOWN ! town equivalent emissivity REAL , DIMENSION (:) , INTENT ( OUT ) :: PDIR_ALB_TOWN ! town equivalent direct albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PSCA_ALB_TOWN ! town equivalent diffuse albedo REAL , DIMENSION (:) , INTENT ( OUT ) :: PRESA_TOWN ! town aerodynamical resistance REAL , DIMENSION (:) , INTENT ( OUT ) :: PDQS_TOWN ! heat storage inside town REAL , DIMENSION (:) , INTENT ( OUT ) :: PQF_TOWN ! total anthropogenic heat REAL , DIMENSION (:) , INTENT ( OUT ) :: PQF_BLD ! anthropogenic heat flux of domestic heating REAL , DIMENSION (:) , INTENT ( OUT ) :: PFLX_BLD ! heat flx from inside bld through its structure REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_ROAD ! road conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GARDEN ! green area conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GREENROOF ! green roof conductance REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_ROAD_WAT ! road conductance for latent heat REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GARDEN_WAT ! green area conductance for latent heat REAL , DIMENSION (:) , INTENT ( OUT ) :: PAC_GREENROOF_WAT ! green roof conductance for latent heat ! REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_ROOF ! absorbed solar rad by roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_SNOW_ROOF ! absorbed solar rad by snow on roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_ROOF ! absorbed IR rad by roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_SNOW_ROOF ! absorbed IR rad by snow on roof REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_ROAD ! absorbed solar rad by road REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_SNOW_ROAD ! absorbed solar rad by snow on road REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_ROAD ! absorbed IR rad by road REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_SNOW_ROAD ! absorbed IR rad by snow on road REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_WALL_A ! absorbed solar rad by wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_WALL_A ! absorbed IR rad by wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_WALL_B ! absorbed solar rad by wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_WALL_B ! absorbed IR rad by wall REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_PANEL ! absorbed solar rad by solar panels REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_PANEL ! absorbed IR rad by solar panels REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_GARDEN ! absorbed solar rad by green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_GARDEN ! absorbed IR rad by green areas REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_GREENROOF ! absorbed solar rad by green roofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_GREENROOF ! absorbed IR rad by green roofs REAL , DIMENSION (:) , INTENT ( OUT ) :: PG_GREENROOF_ROOF ! heat flux between base of greenroof !                                                         !    and structural roof ! ! new arguments created after BEM ! CHARACTER ( LEN = 12 ) , INTENT ( IN ) :: HCOOL_COIL CHARACTER ( LEN = 6 ) , INTENT ( IN ) :: HHEAT_COIL REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WATER_COND ! fraction of evaporation for the condensers CHARACTER ( LEN = 4 ), DIMENSION (:), INTENT ( IN ) :: HNATVENT REAL , DIMENSION (:) , INTENT ( IN ) :: PNATVENT ! flag to describe surventilation system for i/o ! 0 for NONE, 1 for MANU and 2 for AUTO INTEGER , INTENT ( IN ) :: KDAY ! Simulation day REAL , DIMENSION (:) , INTENT ( INOUT ) :: PAUX_MAX ! Auxiliar variable for autosize calcs REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_FLOOR ! Floor layers temperatures [K] REAL , DIMENSION (:,:), INTENT ( INOUT ) :: PT_MASS ! Internal mass layers temperatures [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_BLD_COOL ! Sensible cooling energy demand ! of the building [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PT_BLD_COOL ! Total cooling energy demand ! of the building [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_BLD_HEAT ! Heating energy demand ! of the building [W m-2(bld)] REAL , DIMENSION (: ), INTENT ( OUT ) :: PLE_BLD_COOL ! Latent cooling energy demand ! of the building [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_BLD_HEAT ! Latent heating energy demand ! of the building [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PH_WASTE ! Sensible waste heat from HVAC system ! [W m-2(tot)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PLE_WASTE ! Latent waste heat from HVAC system ! [W m-2(tot)] REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WASTE_CAN ! fraction of waste heat released into the canyon REAL , DIMENSION (:) , INTENT ( OUT ) :: PHVAC_COOL ! Energy consumption of the cooling system ! [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PHVAC_HEAT ! Energy consumption of the heating system ! [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( IN ) :: PQIN ! Internal heat gains [W m-2(floor)] REAL , DIMENSION (:) , INTENT ( IN ) :: PQIN_FRAD ! Radiant fraction of internal heat gains REAL , DIMENSION (:) , INTENT ( IN ) :: PQIN_FLAT ! Latent franction of internal heat gains REAL , DIMENSION (:) , INTENT ( IN ) :: PGR ! Glazing ratio REAL , DIMENSION (:) , INTENT ( IN ) :: PEFF_HEAT ! Efficiency of the heating system REAL , DIMENSION (:) , INTENT ( IN ) :: PINF ! Infiltration flow rate [AC/H] REAL , DIMENSION (:) , INTENT ( IN ) :: PTCOOL_TARGET ! Cooling setpoint of HVAC system [K] REAL , DIMENSION (:) , INTENT ( IN ) :: PTHEAT_TARGET ! Heating setpoint of HVAC system [K] REAL , DIMENSION (:) , INTENT ( IN ) :: PHR_TARGET ! Relative humidity setpoint REAL , DIMENSION (:) , INTENT ( INOUT ) :: PT_WIN2 ! Indoor window temperature [K] REAL , DIMENSION (:) , INTENT ( INOUT ) :: PQI_BLD ! Indoor air specific humidity [kg kg-1] REAL , DIMENSION (:) , INTENT ( IN ) :: PV_VENT ! Ventilation flow rate [AC/H] REAL , DIMENSION (:) , INTENT ( IN ) :: PCAP_SYS_HEAT ! Capacity of the heating system ! [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( INOUT ) :: PCAP_SYS_RAT ! Rated capacity of the cooling system ! [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( IN ) :: PT_ADP ! Apparatus dewpoint temperature of the ! cooling coil [K] REAL , DIMENSION (:) , INTENT ( INOUT ) :: PM_SYS_RAT ! Rated HVAC mass flow rate ! [kg s-1 m-2(bld)] REAL , DIMENSION (:) , INTENT ( IN ) :: PCOP_RAT ! Rated COP of the cooling system REAL , DIMENSION (:) , INTENT ( OUT ) :: PCAP_SYS ! Actual capacity of the cooling system ! [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PM_SYS ! Actual HVAC mass flow rate ! [kg s-1 m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PCOP ! COP of the cooling system REAL , DIMENSION (:) , INTENT ( OUT ) :: PQ_SYS ! Supply air specific humidity [kg kg-1] REAL , DIMENSION (:) , INTENT ( OUT ) :: PT_SYS ! Supply air temperature [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PTR_SW_WIN ! Solar radiation transmitted throught ! windows [W m-2(bld)] REAL , DIMENSION (:) , INTENT ( OUT ) :: PFAN_POWER ! HVAC fan power REAL , DIMENSION (:,:), INTENT ( IN ) :: PHC_FLOOR ! heat capacity for road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PTC_FLOOR ! thermal conductivity for ! road layers REAL , DIMENSION (:,:), INTENT ( IN ) :: PD_FLOOR ! depth of road layers REAL , DIMENSION (:) , INTENT ( INOUT ) :: PT_WIN1 ! outdoor window temperature [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_SW_WIN ! window absorbed shortwave radiation [W m-2] REAL , DIMENSION (:) , INTENT ( OUT ) :: PABS_LW_WIN ! absorbed infrared rad. [W m-2] REAL , DIMENSION (:) , INTENT ( IN ) :: PSHGC ! window solar transmittance REAL , DIMENSION (:) , INTENT ( IN ) :: PSHGC_SH ! window + shading solar heat gain coef. REAL , DIMENSION (:) , INTENT ( IN ) :: PUGG_WIN ! window glass-to-glass U-factro [W m-2 K-1] REAL , DIMENSION (:) , INTENT ( OUT ) :: PALB_WIN ! window albedo REAL , DIMENSION (:) , INTENT ( IN ) :: PABS_WIN ! window absortance REAL , DIMENSION (:) , INTENT ( IN ) :: PTRAN_WIN ! window transmittance ! ! new argument for the UTCI calculation REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIT_LW_GRND ! LW flux emitted by the ground (W/m2 ground) REAL , DIMENSION (:) , INTENT ( OUT ) :: PEMIT_LW_FAC ! LW flux emitted by the facade (W/m2 ground) REAL , DIMENSION (:) , INTENT ( OUT ) :: PT_RAD_IND ! Indoor mean radiant temperature [K] REAL , DIMENSION (:) , INTENT ( OUT ) :: PREF_SW_GRND ! total solar rad reflected from ground REAL , DIMENSION (:) , INTENT ( OUT ) :: PREF_SW_FAC ! total solar rad reflected from facade REAL , DIMENSION (:) , INTENT ( OUT ) :: PHU_BLD ! Indoor relative humidity 0 < (-) < 1 ! ! new arguments for shading, schedule or natural ventilation REAL , INTENT ( IN ) :: PTIME ! current time since midnight (UTC, s) LOGICAL , DIMENSION (:), INTENT ( IN ) :: OSHADE REAL , DIMENSION (:) , INTENT ( IN ) :: PSHADE ! flag to activate shading devices -> REAL for i/o 0. or 1 LOGICAL , DIMENSION (:), INTENT ( INOUT ) :: OSHAD_DAY ! has shading been necessary this day ? LOGICAL , DIMENSION (:), INTENT ( INOUT ) :: ONATVENT_NIGHT ! has natural ventilation been necessary/possible this night ? CHARACTER ( LEN = 3 ) , INTENT ( IN ) :: HBEM ! Building Energy model 'DEF' or 'BEM' ! REAL , DIMENSION (:) , INTENT ( IN ) :: PN_FLOOR ! Number of floors REAL , DIMENSION (:) , INTENT ( IN ) :: PWALL_O_BLD ! Wall area [m2_wall/m2_bld] REAL , DIMENSION (:) , INTENT ( IN ) :: PGLAZ_O_BLD ! Window area [m2_win/m2_bld] REAL , DIMENSION (:) , INTENT ( IN ) :: PMASS_O_BLD ! Mass area [m2_mass/m2_bld] REAL , DIMENSION (:) , INTENT ( IN ) :: PFLOOR_HW_RATIO ! H/W ratio of 1 floor level REAL , DIMENSION (:) , INTENT ( IN ) :: PF_FLOOR_MASS ! View factor floor-mass REAL , DIMENSION (:) , INTENT ( IN ) :: PF_FLOOR_WALL ! View factor floor-wall REAL , DIMENSION (:) , INTENT ( IN ) :: PF_FLOOR_WIN ! View factor floor-window REAL , DIMENSION (:) , INTENT ( IN ) :: PF_FLOOR_ROOF ! View factor floor-roof REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WALL_FLOOR ! View factor wall-floor REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WALL_MASS ! View factor wall-mass REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WALL_WIN ! View factor wall-win REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WIN_FLOOR ! View factor win-floor REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WIN_MASS ! View factor win-mass REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WIN_WALL ! View factor win-wall REAL , DIMENSION (:) , INTENT ( IN ) :: PF_MASS_FLOOR ! View factor mass-floor REAL , DIMENSION (:) , INTENT ( IN ) :: PF_MASS_WALL ! View factor mass-wall REAL , DIMENSION (:) , INTENT ( IN ) :: PF_MASS_WIN ! View factor mass-window LOGICAL , INTENT ( IN ) :: OCANOPY ! is canopy active ? CHARACTER ( LEN = 5 ) , INTENT ( IN ) :: HCH_BEM ! TEB option for building outside conv. coef REAL , DIMENSION (:) , INTENT ( IN ) :: PROUGH_ROOF ! roof roughness coef. REAL , DIMENSION (:) , INTENT ( IN ) :: PROUGH_WALL ! wall roughness coef. REAL , DIMENSION (:) , INTENT ( IN ) :: PF_WIN_WIN ! indoor win to win view factor ! !* arguments for road watering ! LOGICAL , INTENT ( IN ) :: OPAR_RD_IRRIG ! True if there is potentially irrigation REAL , DIMENSION (:), INTENT ( IN ) :: PRD_START_MONTH ! First month of irrigation REAL , DIMENSION (:), INTENT ( IN ) :: PRD_END_MONTH ! Last month of irrigation REAL , DIMENSION (:), INTENT ( IN ) :: PRD_START_HOUR ! First hour of irrigation (included) REAL , DIMENSION (:), INTENT ( IN ) :: PRD_END_HOUR ! Last hour of irrigation  (excluded) REAL , DIMENSION (:), INTENT ( IN ) :: PRD_24H_IRRIG ! diurnal averaged irrigation flux (kg/m2/s) REAL , DIMENSION (:), INTENT ( OUT ) :: PIRRIG_ROAD ! man-made watering of roads (kg/m2/s) ! !* arguments for solar panels ! REAL , DIMENSION (:), INTENT ( IN ) :: PEMIS_PANEL ! Emissivity of solar panels (-) REAL , DIMENSION (:), INTENT ( IN ) :: PALB_PANEL ! Albedo     of solar panels (-) REAL , DIMENSION (:), INTENT ( IN ) :: PEFF_PANEL ! Efficiency of solar panel (-) REAL , DIMENSION (:), INTENT ( IN ) :: PFRAC_PANEL ! Fraction of solar panel on roofs (-) REAL , DIMENSION (:), INTENT ( OUT ) :: PTHER_PROD_PANEL ! Thermal      Energy production of solar panel on roofs (W/m2 panel) REAL , DIMENSION (:), INTENT ( OUT ) :: PPHOT_PROD_PANEL ! Photovoltaic Energy production of solar panel on roofs (W/m2 panel) REAL , DIMENSION (:), INTENT ( OUT ) :: PPROD_PANEL ! Averaged     Energy production of solar panel on roofs (W/m2 panel) REAL , DIMENSION (:), INTENT ( OUT ) :: PTHER_PROD_BLD ! Thermal      Energy production of solar panel on roofs (W/m2 bld  ) REAL , DIMENSION (:), INTENT ( OUT ) :: PPHOT_PROD_BLD ! Photovoltaic Energy production of solar panel on roofs (W/m2 bld  ) REAL , DIMENSION (:), INTENT ( OUT ) :: PPROD_BLD ! Averaged     Energy production of solar panel on roofs (W/m2 bld  ) REAL , DIMENSION (:), INTENT ( INOUT ) :: PTHER_PRODC_DAY ! Present day integrated thermal production of energy    (J/m2 panel) REAL , DIMENSION (:), INTENT ( OUT ) :: PH_PANEL ! Sensible heat flux from solar panels      (W/m2 panel) REAL , DIMENSION (:), INTENT ( OUT ) :: PRN_PANEL ! Net radiation        of solar panel       (W/m2 panel) ! !* arguments for building's use description ! REAL , DIMENSION (:), INTENT ( IN ) :: PRESIDENTIAL ! Fraction of residential use (-) REAL , INTENT ( IN ) :: PDT_RES ! target temperature change when unoccupied (K) (residential buildings) REAL , INTENT ( IN ) :: PDT_OFF ! target temperature change when unoccupied (K) (office buildings) REAL , DIMENSION (:), INTENT ( OUT ) :: PCUR_TCOOL_TARGET ! Cooling target temperature at current time (K) REAL , DIMENSION (:), INTENT ( OUT ) :: PCUR_THEAT_TARGET ! Heating target temperature at current time (K) REAL , DIMENSION (:), INTENT ( OUT ) :: PCUR_QIN ! Internal heat gains        at current time (W/m2 floor) LOGICAL :: debug = . FALSE . ! ! !*      0.2    Declarations of local variables ! TYPE ( DATA_COVER_t ) :: DTCO TYPE ( GRID_t ) :: G TYPE ( TEB_OPTIONS_t ) :: TOP TYPE ( TEB_t ) :: T TYPE ( BEM_OPTIONS_t ) :: BOP TYPE ( BEM_t ) :: B TYPE ( TEB_PANEL_t ) :: TPN TYPE ( TEB_IRRIG_t ) :: TIR TYPE ( DIAG_MISC_TEB_t ) :: DMT TYPE ( TEB_GARDEN_MODEL_t ) :: GDM TYPE ( TEB_GREENROOF_MODEL_t ) :: GRM ! INTEGER :: KTEB_P ! TEB current patch number logical :: exist ! TODO: testing remove ! !------------------------------------------------------------------------------- ! !* All OUT (not IN or INOUT) dummy arguments are set to value XUNDEF at the beginning of the routine. ! PRN_ROOF = XUNDEF ! net radiation over roof PH_ROOF = XUNDEF ! sensible heat flux over roof PLE_ROOF = XUNDEF ! latent heat flux over roof PLEW_ROOF = XUNDEF ! latent heat flux over roof (snow) PGFLUX_ROOF = XUNDEF ! flux through the roof PRUNOFF_ROOF = XUNDEF ! runoff over the ground PRN_ROAD = XUNDEF ! net radiation over road PH_ROAD = XUNDEF ! sensible heat flux over road PLE_ROAD = XUNDEF ! latent heat flux over road PLEW_ROAD = XUNDEF ! latent heat flux over road (snow) PGFLUX_ROAD = XUNDEF ! flux through the road PRUNOFF_ROAD = XUNDEF ! runoff over the ground PRN_WALL_A = XUNDEF ! net radiation over wall PH_WALL_A = XUNDEF ! sensible heat flux over wall PLE_WALL_A = XUNDEF ! latent heat flux over wall PGFLUX_WALL_A = XUNDEF ! flux through the wall PRN_WALL_B = XUNDEF ! net radiation over wall PH_WALL_B = XUNDEF ! sensible heat flux over wall PLE_WALL_B = XUNDEF ! latent heat flux over wall PGFLUX_WALL_B = XUNDEF ! flux through the wall PRN_STRLROOF = XUNDEF ! net radiation over structural roof PH_STRLROOF = XUNDEF ! sensible heat flux over structural roof PLE_STRLROOF = XUNDEF ! latent heat flux over structural roof PGFLUX_STRLROOF = XUNDEF ! flux through the structural roof PRUNOFF_STRLROOF = XUNDEF ! runoff aver structural roof PRN_BLT = XUNDEF ! net radiation over built surf PH_BLT = XUNDEF ! sensible heat flux over built surf PLE_BLT = XUNDEF ! latent heat flux over built surf PGFLUX_BLT = XUNDEF ! flux through the built surf ! PRNSNOW_ROOF = XUNDEF ! net radiation over snow PHSNOW_ROOF = XUNDEF ! sensible heat flux over snow PLESNOW_ROOF = XUNDEF ! latent heat flux over snow PGSNOW_ROOF = XUNDEF ! flux under the snow PMELT_ROOF = XUNDEF ! snow melt PRNSNOW_ROAD = XUNDEF ! net radiation over snow PHSNOW_ROAD = XUNDEF ! sensible heat flux over snow PLESNOW_ROAD = XUNDEF ! latent heat flux over snow PGSNOW_ROAD = XUNDEF ! flux under the snow PMELT_ROAD = XUNDEF ! snow melt ! PRN_GRND = XUNDEF ! net radiation over ground PH_GRND = XUNDEF ! sensible heat flux over ground PLE_GRND = XUNDEF ! latent heat flux over ground PGFLUX_GRND = XUNDEF ! flux through the ground PRN_TOWN = XUNDEF ! net radiation over town PH_TOWN = XUNDEF ! sensible heat flux over town PLE_TOWN = XUNDEF ! latent heat flux over town PGFLUX_TOWN = XUNDEF ! flux through the ground PEVAP_TOWN = XUNDEF ! evaporation flux (kg/m2/s) PRUNOFF_TOWN = XUNDEF ! runoff over the ground PSFCO2 = XUNDEF ! flux of CO2       (m/s*kg_CO2/kg_air) PUW_GRND = XUNDEF ! momentum flux for ground built surf PUW_ROOF = XUNDEF ! momentum flux for roofs PDUWDU_GRND = XUNDEF ! PDUWDU_ROOF = XUNDEF ! PUSTAR_TOWN = XUNDEF ! friciton velocity over town PCD = XUNDEF ! town averaged drag coefficient PCDN = XUNDEF ! town averaged neutral drag coefficient PCH_TOWN = XUNDEF ! town averaged heat transfer coefficient PRI_TOWN = XUNDEF ! town averaged Richardson number PTS_TOWN = XUNDEF ! town surface temperature PEMIS_TOWN = XUNDEF ! town equivalent emissivity PDIR_ALB_TOWN = XUNDEF ! town equivalent direct albedo PSCA_ALB_TOWN = XUNDEF ! town equivalent diffuse albedo PRESA_TOWN = XUNDEF ! town aerodynamical resistance PDQS_TOWN = XUNDEF ! heat storage inside town PQF_TOWN = XUNDEF ! total anthropogenic heat PQF_BLD = XUNDEF ! anthropogenic heat flux of domestic heating PFLX_BLD = XUNDEF ! heat flx from inside bld through its structure PAC_ROAD = XUNDEF ! road conductance PAC_GARDEN = XUNDEF ! green area conductance PAC_GREENROOF = XUNDEF ! green roof conductance PAC_ROAD_WAT = XUNDEF ! road conductance for latent heat PAC_GARDEN_WAT = XUNDEF ! green area conductance for latent heat PAC_GREENROOF_WAT = XUNDEF ! green roof conductance for latent heat ! PABS_SW_ROOF = XUNDEF ! absorbed solar rad by roof PABS_SW_SNOW_ROOF = XUNDEF ! absorbed solar rad by snow on roof PABS_LW_ROOF = XUNDEF ! absorbed IR rad by roof PABS_LW_SNOW_ROOF = XUNDEF ! absorbed IR rad by snow on roof PABS_SW_ROAD = XUNDEF ! absorbed solar rad by road PABS_SW_SNOW_ROAD = XUNDEF ! absorbed solar rad by snow on road PABS_LW_ROAD = XUNDEF ! absorbed IR rad by road PABS_LW_SNOW_ROAD = XUNDEF ! absorbed IR rad by snow on road PABS_SW_WALL_A = XUNDEF ! absorbed solar rad by wall PABS_LW_WALL_A = XUNDEF ! absorbed IR rad by wall PABS_SW_WALL_B = XUNDEF ! absorbed solar rad by wall PABS_LW_WALL_B = XUNDEF ! absorbed IR rad by wall PABS_SW_PANEL = XUNDEF ! absorbed solar rad by solar panels PABS_LW_PANEL = XUNDEF ! absorbed IR rad by solar panels PABS_SW_GARDEN = XUNDEF ! absorbed solar rad by green areas PABS_LW_GARDEN = XUNDEF ! absorbed IR rad by green areas PABS_SW_GREENROOF = XUNDEF ! absorbed solar rad by green roofs PABS_LW_GREENROOF = XUNDEF ! absorbed IR rad by green roofs PG_GREENROOF_ROOF = XUNDEF ! heat flux between base of greenroof !                                                         !    and structural roof PH_BLD_COOL = XUNDEF ! Sensible cooling energy demand ! of the building [W m-2(bld)] PT_BLD_COOL = XUNDEF ! Total cooling energy demand ! of the building [W m-2(bld)] PH_BLD_HEAT = XUNDEF ! Heating energy demand ! of the building [W m-2(bld)] PLE_BLD_COOL = XUNDEF ! Latent cooling energy demand ! of the building [W m-2(bld)] PLE_BLD_HEAT = XUNDEF ! Latent heating energy demand ! of the building [W m-2(bld)] PH_WASTE = XUNDEF ! Sensible waste heat from HVAC system ! [W m-2(tot)] PLE_WASTE = XUNDEF ! Latent waste heat from HVAC system ! [W m-2(tot)] PHVAC_COOL = XUNDEF ! Energy consumption of the cooling system ! [W m-2(bld)] PHVAC_HEAT = XUNDEF ! Energy consumption of the heating system ! [W m-2(bld)] PCAP_SYS = XUNDEF ! Actual capacity of the cooling system ! [W m-2(bld)] PM_SYS = XUNDEF ! Actual HVAC mass flow rate ! [kg s-1 m-2(bld)] PCOP = XUNDEF ! COP of the cooling system PQ_SYS = XUNDEF ! Supply air specific humidity [kg kg-1] PT_SYS = XUNDEF ! Supply air temperature [K] PTR_SW_WIN = XUNDEF ! Solar radiation transmitted throught ! windows [W m-2(bld)] PFAN_POWER = XUNDEF ! HVAC fan power PABS_SW_WIN = XUNDEF ! window absorbed shortwave radiation [W m-2] PABS_LW_WIN = XUNDEF ! absorbed infrared rad. [W m-2] PALB_WIN = XUNDEF ! window albedo ! ! new argument for the UTCI calculation PEMIT_LW_GRND = XUNDEF ! LW flux emitted by the ground (W/m2 ground) PEMIT_LW_FAC = XUNDEF ! LW flux emitted by the facade (W/m2 ground) PT_RAD_IND = XUNDEF ! Indoor mean radiant temperature [K] PREF_SW_GRND = XUNDEF ! total solar rad reflected from ground PREF_SW_FAC = XUNDEF ! total solar rad reflected from facade PHU_BLD = XUNDEF ! Indoor relative humidity 0 < (-) < 1 PIRRIG_ROAD = XUNDEF ! man-made watering of roads (kg/m2/s) ! !* arguments for solar panels ! PTHER_PROD_PANEL = XUNDEF ! Thermal      Energy production of solar panel on roofs (W/m2 panel) PPHOT_PROD_PANEL = XUNDEF ! Photovoltaic Energy production of solar panel on roofs (W/m2 panel) PPROD_PANEL = XUNDEF ! Averaged     Energy production of solar panel on roofs (W/m2 panel) PTHER_PROD_BLD = XUNDEF ! Thermal      Energy production of solar panel on roofs (W/m2 bld  ) PPHOT_PROD_BLD = XUNDEF ! Photovoltaic Energy production of solar panel on roofs (W/m2 bld  ) PPROD_BLD = XUNDEF ! Averaged     Energy production of solar panel on roofs (W/m2 bld  ) PH_PANEL = XUNDEF ! Sensible heat flux from solar panels      (W/m2 panel) PRN_PANEL = XUNDEF ! Net radiation        of solar panel       (W/m2 panel) ! !* arguments for building's use description ! PCUR_TCOOL_TARGET = XUNDEF ! Cooling target temperature at current time (K) PCUR_THEAT_TARGET = XUNDEF ! Heating target temperature at current time (K) PCUR_QIN = XUNDEF ! Internal heat gains        at current time (W/m2 floor) ! !------------------------------------------------------------------------------- ! !* Allocate all the local structure variables ! CALL ALLOC_TEB_STRUCT ( SIZE ( PT_ROOF , 2 ), SIZE ( PT_ROAD , 2 ), SIZE ( PT_WALL_A , 2 ), SIZE ( PT_FLOOR , 2 ), & DTCO , G , TOP , T , BOP , B , TPN , TIR , DMT , GDM , GRM ) ! ! This is of course not optimized here, because at each time step, the structures are allocated, set and deallocated at the end. !  This is done so only to show that the structures can be independant from the rest of the code above (here the driver.F90 program). ! The structures could be saved from one time-step to another by putting them in a dedicated module for example. ! !------------------------------------------------------------------------------- ! ! BEM OPTIONS structure ! BOP % NFLOOR_LAYER = SIZE ( PT_FLOOR , 2 ) BOP % CCOOL_COIL = HCOOL_COIL BOP % CHEAT_COIL = HHEAT_COIL ! Not supported as hvac_autosize.F90 is not included BOP % LAUTOSIZE = . FALSE . !------------------------------------------------------------------------------- ! ! BEM structure ! ! ! Floor parameters ! B % XHC_FLOOR ( 1 ,:) = PHC_FLOOR ( 1 ,:) ! floor layers heat capacity        (J/K/m3) B % XTC_FLOOR ( 1 ,:) = PTC_FLOOR ( 1 ,:) ! floor layers thermal conductivity (W/K/m) B % XD_FLOOR ( 1 ,:) = PD_FLOOR ( 1 ,:) ! depth of floor layers             (m) ! ! HVAC parameters ! B % XTCOOL_TARGET = PTCOOL_TARGET ! cooling setpoint of indoor air B % XTHEAT_TARGET = PTHEAT_TARGET ! heating setpoint of indoor air B % XF_WASTE_CAN = PF_WASTE_CAN ! fraction of waste heat released into the canyon B % XEFF_HEAT = PEFF_HEAT ! efficiency of the heating system ! ! Indoor parameters ! B % XTI_BLD = PTI_BLD ! building interior temperature    (K) B % XT_FLOOR ( 1 ,:) = PT_FLOOR ( 1 ,:) ! floor layer temperatures         (K) B % XT_MASS ( 1 ,:) = PT_MASS ( 1 ,:) ! Air cooled building internal th. mass temperature (K) ! B % XQIN = PQIN ! internal heat gains [W m-2(floor)] B % XQIN_FRAD = PQIN_FRAD ! radiant fraction of internal heat gains B % XSHGC = PSHGC ! solar heat gain coef. of windows B % XSHGC_SH = PSHGC_SH ! solar heat gain coef. of windows + shading B % XTRAN_WIN = PTRAN_WIN ! window transmittance (-) B % XGR = PGR ! glazing ratio B % XINF = PINF ! infiltration/ventilation flow rate [AC/H] ! ! New parameters ! B % XF_WATER_COND = PF_WATER_COND ! fraction of evaporation for condensers (cooling system) B % XAUX_MAX = PAUX_MAX ! Auxiliar variable for autosize calcs B % XQIN_FLAT = PQIN_FLAT ! Latent franction of internal heat gains B % XHR_TARGET = PHR_TARGET ! Relative humidity setpoint B % XT_WIN2 = PT_WIN2 ! Indoor window temperature [K] B % XQI_BLD = PQI_BLD ! Indoor air specific humidity [kg kg-1] B % XV_VENT = PV_VENT ! Ventilation flow rate [AC/H] B % XCAP_SYS_HEAT = PCAP_SYS_HEAT ! Capacity of the heating system ! [W m-2(bld)] B % XCAP_SYS_RAT = PCAP_SYS_RAT ! Rated capacity of the cooling system ! [W m-2(bld)] B % XT_ADP = PT_ADP ! Apparatus dewpoint temperature of the ! cooling coil [K] B % XM_SYS_RAT = PM_SYS_RAT ! Rated HVAC mass flow rate ! [kg s-1 m-2(bld)] B % XCOP_RAT = PCOP_RAT ! Rated COP of the cooling system B % XT_WIN1 = PT_WIN1 ! outdoor window temperature [K] B % XABS_WIN = PABS_WIN ! window absortance B % XUGG_WIN = PUGG_WIN ! Window glass-to-glass U-factor [K m W-2] B % LSHADE = OSHADE ! flag to activate shading devices -> LOGICAL in the code B % XSHADE = PSHADE ! flag to activate shading devices -> REAL for i/o 0. or 1. B % CNATVENT = HNATVENT ! flag to activate natural ventilation 'NONE', 'MANU', 'AUTO' B % XNATVENT = PNATVENT ! flag to describe surventilation system for i/o ! 0 for NONE, 1 for MANU and 2 for AUTO B % LSHAD_DAY = OSHAD_DAY !Has shading been necessary this day ? B % LNATVENT_NIGHT = ONATVENT_NIGHT !Has nocturnal surventilation been necessary and possible this night ? ! !indoor relative surfaces and view factors B % XN_FLOOR = PN_FLOOR ! Number of floors B % XGLAZ_O_BLD = PGLAZ_O_BLD ! Window area [m2_win/m2_bld] B % XMASS_O_BLD = PMASS_O_BLD ! Mass area [m2_mass/m2_bld] B % XFLOOR_HW_RATIO = PFLOOR_HW_RATIO ! H/W ratio of 1 floor level B % XF_FLOOR_MASS = PF_FLOOR_MASS ! View factor floor-mass B % XF_FLOOR_WALL = PF_FLOOR_WALL ! View factor floor-wall B % XF_FLOOR_WIN = PF_FLOOR_WIN ! View factor floor-window B % XF_FLOOR_ROOF = PF_FLOOR_ROOF ! View factor floor-roof B % XF_WALL_FLOOR = PF_WALL_FLOOR ! View factor wall-floor B % XF_WALL_MASS = PF_WALL_MASS ! View factor wall-mass B % XF_WALL_WIN = PF_WALL_WIN ! View factor wall-win B % XF_WIN_FLOOR = PF_WIN_FLOOR ! View factor win-floor B % XF_WIN_MASS = PF_WIN_MASS ! View factor win-mass B % XF_WIN_WALL = PF_WIN_WALL ! View factor win-wall B % XF_WIN_WIN = PF_WIN_WIN ! indoor View factor win-win B % XF_MASS_FLOOR = PF_MASS_FLOOR ! View factor mass-floor B % XF_MASS_WALL = PF_MASS_WALL ! View factor mass-wall B % XF_MASS_WIN = PF_MASS_WIN ! View factor mass-window !------------------------------------------------------------------------------- ! ! TEB OPTIONS structure ! TOP % LGARDEN = OGARDEN ! T: Urban green areas (call ISBA from TEB) ! F: No urban green areas TOP % CROAD_DIR = HROAD_DIR ! TEB option for road directions ! 'UNIF' : no specific direction ! 'ORIE' : many road ORIEntations ! ( one per TEB patch) TOP % CWALL_OPT = HWALL_OPT ! TEB option for walls ! 'UNIF' : uniform walls ! 'TWO ' : two separated walls TOP % CZ0H = HZ0H ! TEB option for z0h roof & road ! 'MASC95' : Mascart et al 1995 ! 'BRUT82' : Brustaert     1982 ! 'KAND07' : Kanda         2007 TOP % CCH_BEM = HCH_BEM ! BEM option for roof/wall outside convective coefficient ! 'DOE-2' : DOE-2 model from ! EnergyPlus Engineering reference, p65 TOP % CBEM = HBEM ! TEB option for the building energy model ! 'DEF':  DEFault version force-restore model from Masson et al. 2002 ! 'BEM':  Building Energy Model Bueno et al. 2011 TOP % LGREENROOF = OGREENROOF ! T: green roofs (call ISBA from TEB) TOP % LSOLAR_PANEL = OSOLAR_PANEL ! T: solar panels on roofs ! ! type of initialization of vegetation: from cover types (ecoclimap) or parameters prescribed ! ! ! Number of layers ! TOP % NROOF_LAYER = SIZE ( PT_ROOF , 2 ) ! number of layers in roofs TOP % NROAD_LAYER = SIZE ( PT_ROAD , 2 ) ! number of layers in roads TOP % NWALL_LAYER = SIZE ( PT_WALL_A , 2 ) ! number of layers in walls ! ! Date: ! TOP % TTIME = TPTIME ! current date and time ! ! Time-step: ! TOP % XTSTEP = PTSTEP ! time step for TEB ! !------------------------------------------------------------------------------- ! ! TEB structure ! ! Geometric Parameters: ! T % XROAD_DIR = PROAD_DIR ! Road direction (deg from North, clockwise) T % XGARDEN = PGARDEN ! fraction of veg in the streets   (-) T % XGREENROOF = PFRAC_GR ! fraction of greenroofs on roofs  (-) T % XBLD = PBLD ! fraction of buildings            (-) T % XROAD = PROAD ! fraction of roads                (-) T % XCAN_HW_RATIO = PCAN_HW_RATIO ! canyon    h/W                    (-) T % XBLD_HEIGHT = PBLD_HEIGHT ! buildings height 'h'             (m) T % XWALL_O_HOR = PWALL_O_HOR ! wall surf. / hor. surf.          (-) T % XROAD_O_GRND = PROAD_O_GRND ! road surf. / (road + garden surf.) (-) T % XGARDEN_O_GRND = PGARDEN_O_GRND ! gard. surf. / (road + garden surf.)(-) T % XWALL_O_GRND = PWALL_O_GRND ! wall surf. / (road + garden surf.) (-) T % XWALL_O_BLD = PWALL_O_BLD ! wall surf. / bld surf. (-) T % XZ0_TOWN = PZ0_TOWN ! roughness length for momentum    (m) T % XSVF_ROAD = PSVF_ROAD ! road sky view factor             (-) T % XSVF_GARDEN = PSVF_GARDEN ! green area sky view factor       (-) T % XSVF_WALL = PSVF_WALL ! wall sky view factor             (-) ! ! Roof parameters ! T % XALB_ROOF = PALB_ROOF ! roof albedo                      (-) T % XEMIS_ROOF = PEMIS_ROOF ! roof emissivity                  (-) T % XHC_ROOF = PHC_ROOF ! roof layers heat capacity        (J/K/m3) T % XTC_ROOF = PTC_ROOF ! roof layers thermal conductivity (W/K/m) T % XD_ROOF = PD_ROOF ! depth of roof layers             (m) T % XROUGH_ROOF = PROUGH_ROOF ! roof roughness coef ! ! ! Road parameters ! T % XALB_ROAD = PALB_ROAD ! road albedo                      (-) T % XEMIS_ROAD = PEMIS_ROAD ! road emissivity                  (-) T % XHC_ROAD = PHC_ROAD ! road layers heat capacity        (J/K/m3) T % XTC_ROAD = PTC_ROAD ! road layers thermal conductivity (W/K/m) T % XD_ROAD = PD_ROAD ! depth of road layers             (m) ! ! Wall parameters ! T % XALB_WALL = PALB_WALL ! wall albedo                      (-) T % XEMIS_WALL = PEMIS_WALL ! wall emissivity                  (-) T % XHC_WALL = PHC_WALL ! wall layers heat capacity        (J/K/m3) T % XTC_WALL = PTC_WALL ! wall layers thermal conductivity (W/K/m) T % XD_WALL = PD_WALL ! depth of wall layers             (m) T % XROUGH_WALL = PROUGH_WALL ! wall roughness coef ! ! Building's use type ! T % XRESIDENTIAL = PRESIDENTIAL ! fraction of Residential use      (-) T % XDT_RES = PDT_RES ! target temperature change when unoccupied (K) (residential buildings) T % XDT_OFF = PDT_OFF ! target temperature change when unoccupied (K) (offices buildings) ! ! anthropogenic fluxes ! T % XH_TRAFFIC = PH_TRAFFIC ! anthropogenic sensible !                             ! heat fluxes due to traffic       (W/m2) T % XLE_TRAFFIC = PLE_TRAFFIC ! anthropogenic latent !                             ! heat fluxes due to traffic       (W/m2) T % XH_INDUSTRY = PH_INDUSTRY ! anthropogenic sensible !                             ! heat fluxes due to factories     (W/m2) T % XLE_INDUSTRY = PLE_INDUSTRY ! anthropogenic latent !                             ! heat fluxes due to factories     (W/m2) ! ! Prognostic variables: ! T % XWS_ROOF = PWS_ROOF ! roof water reservoir             (kg/m2) T % XWS_ROAD = PWS_ROAD ! road water reservoir             (kg/m2) T % XT_ROOF = PT_ROOF ! roof layer temperatures          (K) T % XT_ROAD = PT_ROAD ! road layer temperatures          (K) T % XT_WALL_A = PT_WALL_A ! wall layer temperatures          (K) T % XT_WALL_B = PT_WALL_B ! wall layer temperatures          (K) ! ! ! ! Semi-prognostic variables: ! T % XT_CANYON = PT_CAN ! canyon air temperature           (K) T % XQ_CANYON = PQ_CAN ! canyon air specific humidity     (kg/kg) ! ! ! Prognostic snow on roofs: ! T % TSNOW_ROOF % SCHEME = HSNOW_ROOF ! snow scheme T % TSNOW_ROOF % WSNOW = PWSNOW_ROOF ! snow (& liq. water) content      (kg/m2) T % TSNOW_ROOF % T = PTSNOW_ROOF ! temperature                      (K) T % TSNOW_ROOF % RHO = PRSNOW_ROOF ! density                          (kg m-3) T % TSNOW_ROOF % ALB = PASNOW_ROOF ! albedo                           (-) T % TSNOW_ROOF % EMIS = PESNOW_ROOF ! emissivity                       (-) T % TSNOW_ROOF % TS = PTSSNOW_ROOF ! Surface temperature              (K) ! ! Prognostic snow on roads: ! T % TSNOW_ROAD % SCHEME = HSNOW_ROAD ! snow scheme T % TSNOW_ROAD % WSNOW = PWSNOW_ROAD ! snow (& liq. water) content      (kg/m2) T % TSNOW_ROAD % T = PTSNOW_ROAD ! temperature                      (K) T % TSNOW_ROAD % RHO = PRSNOW_ROAD ! density                          (kg m-3) T % TSNOW_ROAD % ALB = PASNOW_ROAD ! albedo                           (-) T % TSNOW_ROAD % EMIS = PESNOW_ROAD ! emissivity                       (-) T % TSNOW_ROAD % TS = PTSSNOW_ROAD ! Surface temperature              (K) !------------------------------------------------------------------------------- ! ! solar panels ! TPN % XEMIS_PANEL = PEMIS_PANEL ! emissivity of solar panels               (-) TPN % XALB_PANEL = PALB_PANEL ! albedo of soolar panels                  (-) TPN % XEFF_PANEL = PEFF_PANEL ! Efficiency coefficient of solar panels   (-) TPN % XFRAC_PANEL = PFRAC_PANEL ! Fraction of SOLAR panels on roofs        (-) TPN % XTHER_PRODC_DAY = PTHER_PRODC_DAY ! Present day integrated thermal production of energy    (J/m2 panel) !------------------------------------------------------------------------------- ! ! Irrigation ! TIR % LPAR_RD_IRRIG = OPAR_RD_IRRIG ! flag to use prescribed irrigation for roads TIR % XRD_START_MONTH = PRD_START_MONTH ! roads : start month for irrigation (included) TIR % XRD_END_MONTH = PRD_END_MONTH ! roads : end   month for irrigation (included) TIR % XRD_START_HOUR = PRD_START_HOUR ! roads : start solar hour for irrigation (included, hour) TIR % XRD_END_HOUR = PRD_END_HOUR ! roads : end   solar hour for irrigation (excluded, hour) TIR % XRD_24H_IRRIG = PRD_24H_IRRIG ! roads : total irrigation over 24 hours (kg/m2) ! !------------------------------------------------------------------------------- ! ! TEB diagnostics structure ! DMT % XZ0_TOWN = PZ0_TOWN ! town roughness length !------------------------------------------------------------------------------- ! if ( debug ) then ! TODO remove when not needed anymore inquire ( file = \"trace_before.csv\" , exist = exist ) if ( exist ) then open ( 12 , file = \"trace_before.csv\" , status = \"old\" , position = \"append\" , action = \"write\" ) else open ( 12 , file = \"trace_before.csv\" , status = \"new\" , action = \"write\" ) end if write ( 12 , * ) PTSUN , PT_CAN , PQ_CAN , PU_CAN , PT_LOWCAN , PQ_LOWCAN , & PU_LOWCAN , PZ_LOWCAN , PPEW_A_COEF , PPEW_B_COEF , PPEW_A_COEF_LOWCAN , & PPEW_B_COEF_LOWCAN , PPS , PPA , PEXNS , PEXNA , PTA , PQA , PRHOA , PCO2 , & PLW_RAD , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , PZENITH , PAZIM , PRR , PSR , & PZREF , PUREF , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , PTSTEP , PLEW_ROOF , PLEW_ROAD , & PLE_WALL_A , PLE_WALL_B , PRNSNOW_ROOF , PHSNOW_ROOF , PLESNOW_ROOF , PGSNOW_ROOF , PMELT_ROOF ,& PRNSNOW_ROAD , PHSNOW_ROAD , PLESNOW_ROAD , PGSNOW_ROAD , PMELT_ROAD , PRN_GRND , PH_GRND , & PLE_GRND , PGFLUX_GRND , PRN_TOWN , PH_TOWN , PLE_TOWN , PGFLUX_TOWN , PEVAP_TOWN , & PSFCO2 , PUW_GRND , PUW_ROOF , PDUWDU_GRND , PDUWDU_ROOF , & PUSTAR_TOWN , PCD , PCDN , PCH_TOWN , PRI_TOWN , PTS_TOWN , PEMIS_TOWN , & PDIR_ALB_TOWN , PSCA_ALB_TOWN , PRESA_TOWN , PAC_ROAD , PAC_GARDEN , PAC_GREENROOF , & PAC_ROAD_WAT , PAC_GARDEN_WAT , PAC_GREENROOF_WAT , KDAY , PEMIT_LW_FAC , PEMIT_LW_GRND , & PT_RAD_IND , PREF_SW_GRND , PREF_SW_FAC , PHU_BLD , PTIME , PPROD_BLD close ( 12 ) end if KTEB_P = 1 CALL TEB_GARDEN ( DTCO , G , TOP , T , BOP , B , TPN , TIR , DMT , GDM , GRM , KTEB_P , & HIMPLICIT_WIND , PTSUN , PT_CAN , PQ_CAN , PU_CAN , PT_LOWCAN , PQ_LOWCAN , & PU_LOWCAN , PZ_LOWCAN , PPEW_A_COEF , PPEW_B_COEF , PPEW_A_COEF_LOWCAN , & PPEW_B_COEF_LOWCAN , PPS , PPA , PEXNS , PEXNA , PTA , PQA , PRHOA , PCO2 , & PLW_RAD , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , PZENITH , PAZIM , PRR , PSR , & PZREF , PUREF , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , PTSTEP , PLEW_ROOF , PLEW_ROAD , & PLE_WALL_A , PLE_WALL_B , PRNSNOW_ROOF , PHSNOW_ROOF , PLESNOW_ROOF , PGSNOW_ROOF , PMELT_ROOF ,& PRNSNOW_ROAD , PHSNOW_ROAD , PLESNOW_ROAD , PGSNOW_ROAD , PMELT_ROAD , PRN_GRND , PH_GRND , & PLE_GRND , PGFLUX_GRND , PRN_TOWN , PH_TOWN , PLE_TOWN , PGFLUX_TOWN , PEVAP_TOWN , & PSFCO2 , PUW_GRND , PUW_ROOF , PDUWDU_GRND , PDUWDU_ROOF , & PUSTAR_TOWN , PCD , PCDN , PCH_TOWN , PRI_TOWN , PTS_TOWN , PEMIS_TOWN , & PDIR_ALB_TOWN , PSCA_ALB_TOWN , PRESA_TOWN , PAC_ROAD , PAC_GARDEN , PAC_GREENROOF , & PAC_ROAD_WAT , PAC_GARDEN_WAT , PAC_GREENROOF_WAT , KDAY , PEMIT_LW_FAC , PEMIT_LW_GRND , & PT_RAD_IND , PREF_SW_GRND , PREF_SW_FAC , PHU_BLD , PTIME , PPROD_BLD ) if ( debug ) then ! TODO remove when not needed anymore inquire ( file = \"trace_after.csv\" , exist = exist ) if ( exist ) then open ( 12 , file = \"trace_after.csv\" , status = \"old\" , position = \"append\" , action = \"write\" ) else open ( 12 , file = \"trace_after.csv\" , status = \"new\" , action = \"write\" ) end if write ( 12 , * ) PTSUN , PT_CAN , PQ_CAN , PU_CAN , PT_LOWCAN , PQ_LOWCAN , & PU_LOWCAN , PZ_LOWCAN , PPEW_A_COEF , PPEW_B_COEF , PPEW_A_COEF_LOWCAN , & PPEW_B_COEF_LOWCAN , PPS , PPA , PEXNS , PEXNA , PTA , PQA , PRHOA , PCO2 , & PLW_RAD , PDIR_SW , PSCA_SW , PSW_BANDS , KSW , PZENITH , PAZIM , PRR , PSR , & PZREF , PUREF , PVMOD , PH_TRAFFIC , PLE_TRAFFIC , PTSTEP , PLEW_ROOF , PLEW_ROAD , & PLE_WALL_A , PLE_WALL_B , PRNSNOW_ROOF , PHSNOW_ROOF , PLESNOW_ROOF , PGSNOW_ROOF , PMELT_ROOF ,& PRNSNOW_ROAD , PHSNOW_ROAD , PLESNOW_ROAD , PGSNOW_ROAD , PMELT_ROAD , PRN_GRND , PH_GRND , & PLE_GRND , PGFLUX_GRND , PRN_TOWN , PH_TOWN , PLE_TOWN , PGFLUX_TOWN , PEVAP_TOWN , & PSFCO2 , PUW_GRND , PUW_ROOF , PDUWDU_GRND , PDUWDU_ROOF , & PUSTAR_TOWN , PCD , PCDN , PCH_TOWN , PRI_TOWN , PTS_TOWN , PEMIS_TOWN , & PDIR_ALB_TOWN , PSCA_ALB_TOWN , PRESA_TOWN , PAC_ROAD , PAC_GARDEN , PAC_GREENROOF , & PAC_ROAD_WAT , PAC_GARDEN_WAT , PAC_GREENROOF_WAT , KDAY , PEMIT_LW_FAC , PEMIT_LW_GRND , & PT_RAD_IND , PREF_SW_GRND , PREF_SW_FAC , PHU_BLD , PTIME , PPROD_BLD close ( 12 ) end if ! !------------------------------------------------------------------------------- ! ! update of BEM prognostic variables ! PTI_BLD = B % XTI_BLD PQI_BLD = B % XQI_BLD PT_FLOOR = B % XT_FLOOR PT_MASS = B % XT_MASS PT_WIN1 = B % XT_WIN1 PT_WIN2 = B % XT_WIN2 ! PAUX_MAX = B % XAUX_MAX PCAP_SYS_RAT = B % XCAP_SYS_RAT PM_SYS_RAT = B % XM_SYS_RAT ! PALB_WIN = B % XALB_WIN ! window albedo ! OSHAD_DAY = B % LSHAD_DAY ONATVENT_NIGHT = B % LNATVENT_NIGHT ! ! update of TEB prognostic variables ! PT_ROOF = T % XT_ROOF PT_ROAD = T % XT_ROAD PT_WALL_A = T % XT_WALL_A PT_WALL_B = T % XT_WALL_B PWS_ROOF = T % XWS_ROOF PWS_ROAD = T % XWS_ROAD ! PWSNOW_ROOF = T % TSNOW_ROOF % WSNOW PTSNOW_ROOF = T % TSNOW_ROOF % T PRSNOW_ROOF = T % TSNOW_ROOF % RHO PASNOW_ROOF = T % TSNOW_ROOF % ALB PESNOW_ROOF = T % TSNOW_ROOF % EMIS PTSSNOW_ROOF = T % TSNOW_ROOF % TS ! PWSNOW_ROAD = T % TSNOW_ROAD % WSNOW PTSNOW_ROAD = T % TSNOW_ROAD % T PRSNOW_ROAD = T % TSNOW_ROAD % RHO PASNOW_ROAD = T % TSNOW_ROAD % ALB PESNOW_ROAD = T % TSNOW_ROAD % EMIS PTSSNOW_ROAD = T % TSNOW_ROAD % TS ! ! Warning: Can temperature and humidity, XT_CANYON and XQ_CANYON are present in the structure, but !          are not updated in teb_garden and routines called by it. This is the PT_CAN and PQ_CAN !          arguments of teb_garden routines that are physically updated. !          So we update the variables in the structure, but this has no consequences, because !          these variables are not used in teb_garden. ! T % XT_CANYON = PT_CAN T % XQ_CANYON = PQ_CAN ! !------------------------------------------------------------------------------- ! ! output diagnostics in TEB structure ! !------------------------------------------------------------------------------- ! ! solar panels ! PTHER_PRODC_DAY = TPN % XTHER_PRODC_DAY ! Present day integrated thermal production of energy    (J/m2 panel) ! !------------------------------------------------------------------------------- ! ! TEB diagnostics structure ! PQF_BLD = DMT % XQF_BLD ! domestic heating PFLX_BLD = DMT % XFLX_BLD ! heat flux from bld PQF_TOWN = DMT % XQF_TOWN ! total anthropogenic heat PDQS_TOWN = DMT % XDQS_TOWN ! storage inside building ! PH_WALL_A = DMT % XH_WALL_A ! wall sensible heat flux          (W/m2) PH_WALL_B = DMT % XH_WALL_B ! wall sensible heat flux          (W/m2) PH_ROOF = DMT % XH_ROOF ! roof sensible heat flux          (W/m2) PH_ROAD = DMT % XH_ROAD ! road sensible heat flux          (W/m2) PH_STRLROOF = DMT % XH_STRLROOF ! structural roof sens. heat flux  (W/m2) PH_BLT = DMT % XH_BLT ! built surf sensible heat flux    (W/m2) PRN_WALL_A = DMT % XRN_WALL_A ! net radiation at wall            (W/m2) PRN_WALL_B = DMT % XRN_WALL_B ! net radiation at wall            (W/m2) PRN_ROOF = DMT % XRN_ROOF ! net radiation at roof            (W/m2) PRN_ROAD = DMT % XRN_ROAD ! net radiation at road            (W/m2) PRN_STRLROOF = DMT % XRN_STRLROOF !net radiation at structural roofs(W/m2) PRN_BLT = DMT % XRN_BLT ! net radiation at built surf      (W/m2) PGFLUX_WALL_A = DMT % XGFLUX_WALL_A !net wall conduction flux        (W/m2) PGFLUX_WALL_B = DMT % XGFLUX_WALL_B !net wall conduction flux        (W/m2) PGFLUX_ROOF = DMT % XGFLUX_ROOF ! net roof conduction flux         (W/m2) PGFLUX_ROAD = DMT % XGFLUX_ROAD ! net road conduction flux         (W/m2) PGFLUX_STRLROOF = DMT % XGFLUX_STRLROOF !net structural roof cond flux (W/m2) PGFLUX_BLT = DMT % XGFLUX_BLT ! net built surf conduction flux   (W/m2) PLE_ROOF = DMT % XLE_ROOF ! roof latent heat flux            (W/m2) PLE_ROAD = DMT % XLE_ROAD ! road latent heat flux            (W/m2) PLE_STRLROOF = DMT % XLE_STRLROOF !structural roof latent heat flux (W/m2) PLE_BLT = DMT % XLE_BLT ! built surf latent heat flux      (W/m2) ! PRUNOFF_TOWN = DMT % XRUNOFF_TOWN ! aggregated water runoff for town      (kg/m2/s) PRUNOFF_ROAD = DMT % XRUNOFF_ROAD ! water runoff for roads                (kg/m2/s) PIRRIG_ROAD = DMT % XIRRIG_ROAD ! road man-made watering rate           (kg/m2/s) PRUNOFF_ROOF = DMT % XRUNOFF_ROOF ! aggregated water runoff for roofs     (kg/m2/s) PRUNOFF_STRLROOF = DMT % XRUNOFF_STRLROOF ! water runoff for structural roofs     (kg/m2/s) ! PABS_SW_ROOF = DMT % XABS_SW_ROOF ! absorbed shortwave radiation over roofs PABS_SW_SNOW_ROOF = DMT % XABS_SW_SNOW_ROOF ! absorbed longwave radiation over roofs PABS_LW_ROOF = DMT % XABS_LW_ROOF ! absorbed shortwave radiation over roofs PABS_LW_SNOW_ROOF = DMT % XABS_LW_SNOW_ROOF ! absorbed longwave radiation over roofs PABS_SW_ROAD = DMT % XABS_SW_ROAD ! absorbed shortwave radiation over roads PABS_SW_SNOW_ROAD = DMT % XABS_SW_SNOW_ROAD ! absorbed longwave radiation over roads PABS_LW_ROAD = DMT % XABS_LW_ROAD ! absorbed shortwave radiation over roads PABS_LW_SNOW_ROAD = DMT % XABS_LW_SNOW_ROAD ! absorbed longwave radiation over roads PABS_SW_WALL_A = DMT % XABS_SW_WALL_A ! absorbed shortwave radiation over walls PABS_SW_WALL_B = DMT % XABS_SW_WALL_B ! absorbed shortwave radiation over walls PABS_LW_WALL_A = DMT % XABS_LW_WALL_A ! absorbed shortwave radiation over walls PABS_LW_WALL_B = DMT % XABS_LW_WALL_B ! absorbed shortwave radiation over walls PABS_SW_GARDEN = DMT % XABS_SW_GARDEN ! absorbed shortwave radiation over green areas PABS_LW_GARDEN = DMT % XABS_LW_GARDEN ! absorbed shortwave radiation over green areas PABS_SW_GREENROOF = DMT % XABS_SW_GREENROOF ! absorbed shortwave radiation over green roofs PABS_LW_GREENROOF = DMT % XABS_LW_GREENROOF ! absorbed shortwave radiation over green roofs PG_GREENROOF_ROOF = DMT % XG_GREENROOF_ROOF ! Heat flux between green roof and structural roof PABS_SW_PANEL = DMT % XABS_SW_PANEL ! absorbed shortwave radiation over solar panels PABS_LW_PANEL = DMT % XABS_LW_PANEL ! absorbed longwave  radiation over solar panels ! PRN_PANEL = DMT % XRN_PANEL ! net radiation           over solar panels (W/m2) PH_PANEL = DMT % XH_PANEL ! sensible heat flux      over solar panels (W/m2) PTHER_PROD_PANEL = DMT % XTHER_PROD_PANEL ! thermal      production of   solar panels (W/m2 thermal panel) PPHOT_PROD_PANEL = DMT % XPHOT_PROD_PANEL ! photovoltaic production of   solar panels (W/m2 photovoltaic panel) PPROD_PANEL = DMT % XPROD_PANEL !              production of   solar panels (W/m2 panel) PTHER_PROD_BLD = DMT % XTHER_PROD_BLD ! thermal      production of   solar panels (W/m2 bld) PPHOT_PROD_BLD = DMT % XPHOT_PROD_BLD ! photovoltaic production of   solar panels (W/m2 bld) PH_BLD_COOL = DMT % XH_BLD_COOL ! Sensible cooling energy demand ! of the building [W m-2(bld)] PT_BLD_COOL = DMT % XT_BLD_COOL ! Total cooling energy demand ! of the building [W m-2(bld)] PH_BLD_HEAT = DMT % XH_BLD_HEAT ! Heating energy demand ! of the building [W m-2(bld)] PLE_BLD_COOL = DMT % XLE_BLD_COOL ! Latent cooling energy demand ! of the building [W m-2(bld)] PLE_BLD_HEAT = DMT % XLE_BLD_HEAT ! Latent heating energy demand ! of the building [W m-2(bld)] PH_WASTE = DMT % XH_WASTE ! Sensible waste heat from HVAC system ! [W m-2(tot)] PLE_WASTE = DMT % XLE_WASTE ! Latent waste heat from HVAC system ! [W m-2(tot)] PHVAC_COOL = DMT % XHVAC_COOL ! Energy consumption of the cooling system ! [W m-2(bld)] PHVAC_HEAT = DMT % XHVAC_HEAT ! Energy consumption of the heating system ! [W m-2(bld)] PCAP_SYS = DMT % XCAP_SYS ! Actual capacity of the cooling system ! [W m-2(bld)] PM_SYS = DMT % XM_SYS ! Actual HVAC mass flow rate ! [kg s-1 m-2(bld)] PCOP = DMT % XCOP ! COP of the cooling system PQ_SYS = DMT % XQ_SYS ! Supply air specific humidity [kg kg-1] PT_SYS = DMT % XT_SYS ! Supply air temperature [K] PTR_SW_WIN = DMT % XTR_SW_WIN ! Solar radiation transmitted throught ! windows [W m-2(bld)] PFAN_POWER = DMT % XFAN_POWER ! HVAC fan power PABS_SW_WIN = DMT % XABS_SW_WIN ! window absorbed shortwave radiation [W m-2] PABS_LW_WIN = DMT % XABS_LW_WIN ! absorbed infrared rad. [W m-2] PCUR_TCOOL_TARGET = DMT % XTCOOL_TARGET ! Cooling target temperature at current time (K) PCUR_THEAT_TARGET = DMT % XTHEAT_TARGET ! Heating target temperature at current time (K) PCUR_QIN = DMT % XQIN ! Internal heat gains        at current time (W/m2 floor) ! !------------------------------------------------------------------------------- ! CALL DEALLOC_TEB_STRUCT ( TOP , T , BOP , B , TPN , TIR , DMT , GDM , GRM ) ! !------------------------------------------------------------------------------- ! END SUBROUTINE TEB_GARDEN_STRUCT","tags":"","loc":"proc/teb_garden_struct.html"},{"title":"GREENROOF – Town Energy Balance (TEB) model API docs","text":"interface public subroutine GREENROOF(DTCO, G, T, TOP, TIR, DTV, GB, DK, DEK, DMK, GRO, S, K, P, PEK, HIMPLICIT_WIND, TPTIME, PTSUN, PPEW_A_COEF, PPEW_B_COEF, PPET_A_COEF, PPEQ_A_COEF, PPET_B_COEF, PPEQ_B_COEF, PTSTEP, PZREF, PUREF, PALB_GD, PTA, PQA, PEXNS, PEXNA, PRHOA, PCO2, PPS, PRR, PSR, PZENITH, PSW, PLW, PVMOD, PALBNIR_TVEG, PALBVIS_TVEG, PALBNIR_TSOIL, PALBVIS_TSOIL, PRN, PH, PLE, PGFLUX, PSFCO2, PEVAP, PUW, PRUNOFF, PDRAIN, PAC, PQSAT, PTSRAD, PAC_AGG, PHU_AGG, PDEEP_FLUX, PIRRIG) Arguments Type Intent Optional Attributes Name type(DATA_COVER_t), intent(inout) :: DTCO type(GRID_t), intent(inout) :: G type(TEB_t), intent(inout) :: T type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_IRRIG_t), intent(inout) :: TIR type(DATA_ISBA_t), intent(inout) :: DTV type(GR_BIOG_t), intent(inout) :: GB type(DIAG_t), intent(inout) :: DK type(DIAG_EVAP_ISBA_t), intent(inout) :: DEK type(DIAG_MISC_ISBA_t), intent(inout) :: DMK type(ISBA_OPTIONS_t), intent(inout) :: GRO type(ISBA_S_t), intent(inout) :: S type(ISBA_K_t), intent(inout) :: K type(ISBA_P_t), intent(inout) :: P type(ISBA_PE_t), intent(inout) :: PEK character(len=*), intent(in) :: HIMPLICIT_WIND type(DATE_TIME), intent(in) :: TPTIME real, intent(in), DIMENSION(:) :: PTSUN real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPET_A_COEF real, intent(in), DIMENSION(:) :: PPEQ_A_COEF real, intent(in), DIMENSION(:) :: PPET_B_COEF real, intent(in), DIMENSION(:) :: PPEQ_B_COEF real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PALB_GD real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PCO2 real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZENITH real, intent(in), DIMENSION(:) :: PSW real, intent(in), DIMENSION(:) :: PLW real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PALBNIR_TVEG real, intent(in), DIMENSION(:) :: PALBVIS_TVEG real, intent(in), DIMENSION(:) :: PALBNIR_TSOIL real, intent(in), DIMENSION(:) :: PALBVIS_TSOIL real, intent(out), DIMENSION(:) :: PRN real, intent(out), DIMENSION(:) :: PH real, intent(out), DIMENSION(:) :: PLE real, intent(out), DIMENSION(:) :: PGFLUX real, intent(out), DIMENSION(:) :: PSFCO2 real, intent(out), DIMENSION(:) :: PEVAP real, intent(out), DIMENSION(:) :: PUW real, intent(out), DIMENSION(:) :: PRUNOFF real, intent(out), DIMENSION(:) :: PDRAIN real, intent(out), DIMENSION(:) :: PAC real, intent(out), DIMENSION(:) :: PQSAT real, intent(out), DIMENSION(:) :: PTSRAD real, intent(out), DIMENSION(:) :: PAC_AGG real, intent(out), DIMENSION(:) :: PHU_AGG real, intent(out), DIMENSION(:) :: PDEEP_FLUX real, intent(out), DIMENSION(:) :: PIRRIG","tags":"","loc":"interface/greenroof.html"},{"title":"GARDEN – Town Energy Balance (TEB) model API docs","text":"interface public subroutine GARDEN(DTCO, G, T, TOP, TIR, DTV, GB, DK, DEK, DMK, GDO, S, K, P, PEK, HIMPLICIT_WIND, TPTIME, PTSUN, PPEW_A_COEF, PPEW_B_COEF, PPET_A_COEF, PPEQ_A_COEF, PPET_B_COEF, PPEQ_B_COEF, PTSTEP, PZREF, PALB_GD, PTA, PQA, PEXNS, PRHOA, PCO2, PPS, PRR, PSR, PZENITH, PSW, PLW, PVMOD, PALBNIR_TVEG, PALBVIS_TVEG, PALBNIR_TSOIL, PALBVIS_TSOIL, PRN, PH, PLE, PGFLUX, PSFCO2, PEVAP, PUW, PRUNOFF, PAC, PQSAT, PTSRAD, PAC_AGG, PHU_AGG, PIRRIG) Arguments Type Intent Optional Attributes Name type(DATA_COVER_t), intent(inout) :: DTCO type(GRID_t), intent(inout) :: G type(TEB_t), intent(inout) :: T type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_IRRIG_t), intent(inout) :: TIR type(DATA_ISBA_t), intent(inout) :: DTV type(GR_BIOG_t), intent(inout) :: GB type(DIAG_t), intent(inout) :: DK type(DIAG_EVAP_ISBA_t), intent(inout) :: DEK type(DIAG_MISC_ISBA_t), intent(inout) :: DMK type(ISBA_OPTIONS_t), intent(inout) :: GDO type(ISBA_S_t), intent(inout) :: S type(ISBA_K_t), intent(inout) :: K type(ISBA_P_t), intent(inout) :: P type(ISBA_PE_t), intent(inout) :: PEK character(len=*), intent(in) :: HIMPLICIT_WIND type(DATE_TIME), intent(in) :: TPTIME real, intent(in), DIMENSION(:) :: PTSUN real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPET_A_COEF real, intent(in), DIMENSION(:) :: PPEQ_A_COEF real, intent(in), DIMENSION(:) :: PPET_B_COEF real, intent(in), DIMENSION(:) :: PPEQ_B_COEF real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PALB_GD real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PCO2 real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZENITH real, intent(in), DIMENSION(:) :: PSW real, intent(in), DIMENSION(:) :: PLW real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PALBNIR_TVEG real, intent(in), DIMENSION(:) :: PALBVIS_TVEG real, intent(in), DIMENSION(:) :: PALBNIR_TSOIL real, intent(in), DIMENSION(:) :: PALBVIS_TSOIL real, intent(out), DIMENSION(:) :: PRN real, intent(out), DIMENSION(:) :: PH real, intent(out), DIMENSION(:) :: PLE real, intent(out), DIMENSION(:) :: PGFLUX real, intent(out), DIMENSION(:) :: PSFCO2 real, intent(out), DIMENSION(:) :: PEVAP real, intent(out), DIMENSION(:) :: PUW real, intent(out), DIMENSION(:) :: PRUNOFF real, intent(out), DIMENSION(:) :: PAC real, intent(out), DIMENSION(:) :: PQSAT real, intent(out), DIMENSION(:) :: PTSRAD real, intent(out), DIMENSION(:) :: PAC_AGG real, intent(out), DIMENSION(:) :: PHU_AGG real, intent(out), DIMENSION(:) :: PIRRIG","tags":"","loc":"interface/garden.html"},{"title":"TEB_VEG_PROPERTIES – Town Energy Balance (TEB) model API docs","text":"interface public subroutine TEB_VEG_PROPERTIES(PMASK, IO, PEK, PDIR_SW, PSCA_SW, PSW_BANDS, KSW, PTS, PEMIS, PALB, PTA, PALBNIR_TVEG, PALBVIS_TVEG, PALBNIR_TSOIL, PALBVIS_TSOIL) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PMASK type(ISBA_OPTIONS_t), intent(inout) :: IO type(ISBA_PE_t), intent(inout) :: PEK real, intent(in), DIMENSION(:,:) :: PDIR_SW real, intent(in), DIMENSION(:,:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PSW_BANDS integer, intent(in) :: KSW real, intent(out), DIMENSION(:) :: PTS real, intent(out), DIMENSION(:) :: PEMIS real, intent(out), DIMENSION(:) :: PALB real, intent(in), optional DIMENSION(:) :: PTA real, intent(out), optional DIMENSION(:) :: PALBNIR_TVEG real, intent(out), optional DIMENSION(:) :: PALBVIS_TVEG real, intent(out), optional DIMENSION(:) :: PALBNIR_TSOIL real, intent(out), optional DIMENSION(:) :: PALBVIS_TSOIL","tags":"","loc":"interface/teb_veg_properties.html"},{"title":"ABOR1_SFX – Town Energy Balance (TEB) model API docs","text":"interface public subroutine ABOR1_SFX(YTEXT) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: YTEXT","tags":"","loc":"interface/abor1_sfx.html"},{"title":"OL_READ_ATM – Town Energy Balance (TEB) model API docs","text":"interface public subroutine OL_READ_ATM(HSURF_FILETYPE, HFORCING_FILETYPE, KFORC_STEP, PTA, PQA, PWIND, PDIR_SW, PSCA_SW, PLW, PSNOW, PRAIN, PPS, PCO2, PDIR, OLIMIT_QAIR) Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HSURF_FILETYPE character(len=6), intent(in) :: HFORCING_FILETYPE integer, intent(in) :: KFORC_STEP real, intent(inout), DIMENSION(:,:) :: PTA real, intent(inout), DIMENSION(:,:) :: PQA real, intent(inout), DIMENSION(:,:) :: PWIND real, intent(inout), DIMENSION(:,:) :: PDIR_SW real, intent(inout), DIMENSION(:,:) :: PSCA_SW real, intent(inout), DIMENSION(:,:) :: PLW real, intent(inout), DIMENSION(:,:) :: PSNOW real, intent(inout), DIMENSION(:,:) :: PRAIN real, intent(inout), DIMENSION(:,:) :: PPS real, intent(inout), DIMENSION(:,:) :: PCO2 real, intent(inout), DIMENSION(:,:) :: PDIR logical, intent(in) :: OLIMIT_QAIR","tags":"","loc":"interface/ol_read_atm.html"},{"title":"OL_TIME_INTERP_ATM – Town Energy Balance (TEB) model API docs","text":"interface public subroutine OL_TIME_INTERP_ATM(KSURF_STEP, KNB_ATM, PTA1, PTA2, PQA1, PQA2, PWIND1, PWIND2, PDIR_SW1, PDIR_SW2, PSCA_SW1, PSCA_SW2, PLW1, PLW2, PSNOW2, PRAIN2, PPS1, PPS2, PCO21, PCO22, PDIR1, PDIR2, PZEN, PSUMZEN) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KSURF_STEP integer, intent(in) :: KNB_ATM real, intent(in), DIMENSION(:) :: PTA1 real, intent(in), DIMENSION(:) :: PTA2 real, intent(in), DIMENSION(:) :: PQA1 real, intent(in), DIMENSION(:) :: PQA2 real, intent(in), DIMENSION(:) :: PWIND1 real, intent(in), DIMENSION(:) :: PWIND2 real, intent(in), DIMENSION(:) :: PDIR_SW1 real, intent(in), DIMENSION(:) :: PDIR_SW2 real, intent(in), DIMENSION(:) :: PSCA_SW1 real, intent(in), DIMENSION(:) :: PSCA_SW2 real, intent(in), DIMENSION(:) :: PLW1 real, intent(in), DIMENSION(:) :: PLW2 real, intent(in), DIMENSION(:) :: PSNOW2 real, intent(in), DIMENSION(:) :: PRAIN2 real, intent(in), DIMENSION(:) :: PPS1 real, intent(in), DIMENSION(:) :: PPS2 real, intent(in), DIMENSION(:) :: PCO21 real, intent(in), DIMENSION(:) :: PCO22 real, intent(in), DIMENSION(:) :: PDIR1 real, intent(in), DIMENSION(:) :: PDIR2 real, intent(in), DIMENSION(:) :: PZEN real, intent(in), DIMENSION(:) :: PSUMZEN","tags":"","loc":"interface/ol_time_interp_atm.html"},{"title":"OL_ALLOC_ATM – Town Energy Balance (TEB) model API docs","text":"interface public subroutine OL_ALLOC_ATM(KNI, KBANDS, KSCAL) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KNI integer, intent(in) :: KBANDS integer, intent(in) :: KSCAL","tags":"","loc":"interface/ol_alloc_atm.html"},{"title":"TEB_DRIVER – Town Energy Balance (TEB) model API docs","text":"public subroutine TEB_DRIVER(num_roof_layers, num_wall_layers, num_road_layers, num_snow_layers, num_floor_layers, ZLON, ZLAT, IYEAR, IMONTH, IDAY, ZTIME_START, XTSTEP_SURF, XPS, XPA, XTA, ZQA_KGKG, XRHOA, XCO2, XLW, XRAIN, XSNOW, ZZREF, ZDIR_SW, ZSCA_SW, ZWIND, ZDIR, ZT_CANYON, ZQ_CANYON, ZTI_BLD, ZT_ROOF, ZT_ROAD, ZT_WALL_A, ZT_WALL_B, ZWS_ROOF, ZWS_ROAD, ZWSNOW_ROOF, ZTSNOW_ROOF, ZRSNOW_ROOF, ZASNOW_ROOF, ZTSSNOW_ROOF, ZESNOW_ROOF, ZWSNOW_ROAD, ZTSNOW_ROAD, ZRSNOW_ROAD, ZASNOW_ROAD, ZTSSNOW_ROAD, ZESNOW_ROAD, ZAUX_MAX, ZT_FLOOR, ZT_MASS, ZT_WIN1, ZT_WIN2, ZQI_BLD, ZTHER_PRODC_DAY, LGARDEN, LGREENROOF, LSOLAR_PANEL, HZ0H, HROAD_DIR, HWALL_OPT, HSNOW_ROAD, HSNOW_ROOF, ZH_TRAFFIC, ZLE_TRAFFIC, ZH_INDUSTRY, ZLE_INDUSTRY, ZZ0, ZBLD, ZGARDEN, ZROAD_DIR, ZFRAC_GR, ZBLD_HEIGHT, ZWALL_O_HOR, ZALB_ROOF, ZEMIS_ROOF, ZHC_ROOF, ZTC_ROOF, ZD_ROOF, ZALB_ROAD, ZEMIS_ROAD, ZHC_ROAD, ZTC_ROAD, ZD_ROAD, ZALB_WALL, ZEMIS_WALL, ZHC_WALL, ZTC_WALL, ZD_WALL, CCOOL_COIL, ZF_WATER_COND, CHEAT_COIL, ZNATVENT, XF_WASTE_CAN, ZQIN, ZQIN_FRAD, ZQIN_FLAT, ZGR, ZEFF_HEAT, ZINF, ZTCOOL_TARGET, ZTHEAT_TARGET, ZHR_TARGET, ZV_VENT, ZCAP_SYS_HEAT, XCAP_SYS_RAT, ZT_ADP, XM_SYS_RAT, ZCOP_RAT, ZHC_FLOOR, ZTC_FLOOR, ZD_FLOOR, ZSHGC, ZSHGC_SH, ZSHADE, CBEM, CCH_BEM, ZROUGH_ROOF, ZROUGH_WALL, LPAR_RD_IRRIG, ZRD_START_MONTH, ZRD_END_MONTH, ZRD_START_HOUR, ZRD_END_HOUR, ZRD_24H_IRRIG, ZEMIS_PANEL, ZALB_PANEL, ZEFF_PANEL, ZFRAC_PANEL, ZRESIDENTIAL, ZDT_RES, ZDT_OFF, ZFLOOR_HEIGHT, PU_WIN, ZHVAC_COOL_TOT, ZHVAC_HEAT_TOT, ZTHER_PROD_PANEL, ZPHOT_PROD_PANEL, XU_CANYON, ZRN_TOWN, ZH_TOWN, ZLE_TOWN, ZGFLUX_TOWN, ZEVAP_TOWN, ZUSTAR_TOWN, ZTS_TOWN, ZEMIS_TOWN, ZALB_TOWN, ZDIR_CANYON, ZQ_TOWN) Uses MODI_CIRCUMSOLAR_RAD MODE_THERMOS MODD_REPROD_OPER MODI_WINDOW_DATA_STRUCT MODI_BEM_MORPHO_STRUCT MODD_CSTS MODI_SUNPOS MODI_OL_READ_ATM MODI_OL_ALLOC_ATM MODD_SURF_PAR MODI_TEB_GARDEN_STRUCT MODI_OL_TIME_INTERP_ATM MODD_SURF_ATM MODD_TYPE_DATE_SURF Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_roof_layers integer, intent(in) :: num_wall_layers integer, intent(in) :: num_road_layers integer, intent(in) :: num_snow_layers integer, intent(in) :: num_floor_layers real, intent(in), DIMENSION(1) :: ZLON real, intent(in), DIMENSION(1) :: ZLAT integer, intent(in) :: IYEAR integer, intent(in) :: IMONTH integer, intent(in) :: IDAY real, intent(in) :: ZTIME_START real, intent(in) :: XTSTEP_SURF real, intent(in), DIMENSION(1) :: XPS real, intent(in), DIMENSION(1) :: XPA real, intent(in), DIMENSION(1) :: XTA real, intent(in), DIMENSION(1) :: ZQA_KGKG real, intent(in), DIMENSION(1) :: XRHOA real, intent(in), DIMENSION(1) :: XCO2 real, intent(in), DIMENSION(1) :: XLW real, intent(in), DIMENSION(1) :: XRAIN real, intent(in), DIMENSION(1) :: XSNOW real, intent(in), DIMENSION(1) :: ZZREF real, intent(in), DIMENSION(1,1) :: ZDIR_SW real, intent(in), DIMENSION(1,1) :: ZSCA_SW real, intent(in), DIMENSION(1) :: ZWIND real, intent(in), DIMENSION(1) :: ZDIR real, intent(inout), DIMENSION(1) :: ZT_CANYON real, intent(inout), DIMENSION(1) :: ZQ_CANYON real, intent(inout), DIMENSION(1) :: ZTI_BLD real, intent(inout), DIMENSION(1, num_roof_layers) :: ZT_ROOF real, intent(inout), DIMENSION(1, num_road_layers) :: ZT_ROAD real, intent(inout), DIMENSION(1, num_wall_layers) :: ZT_WALL_A real, intent(inout), DIMENSION(1, num_wall_layers) :: ZT_WALL_B real, intent(inout), DIMENSION(1) :: ZWS_ROOF real, intent(inout), DIMENSION(1) :: ZWS_ROAD real, intent(inout), DIMENSION(1, num_snow_layers) :: ZWSNOW_ROOF real, intent(inout), DIMENSION(1, num_snow_layers) :: ZTSNOW_ROOF real, intent(inout), DIMENSION(1, num_snow_layers) :: ZRSNOW_ROOF real, intent(inout), DIMENSION(1) :: ZASNOW_ROOF real, intent(inout), DIMENSION(1) :: ZTSSNOW_ROOF real, intent(inout), DIMENSION(1) :: ZESNOW_ROOF real, intent(inout), DIMENSION(1, num_snow_layers) :: ZWSNOW_ROAD real, intent(inout), DIMENSION(1, num_snow_layers) :: ZTSNOW_ROAD real, intent(inout), DIMENSION(1, num_snow_layers) :: ZRSNOW_ROAD real, intent(inout), DIMENSION(1) :: ZASNOW_ROAD real, intent(inout), DIMENSION(1) :: ZTSSNOW_ROAD real, intent(inout), DIMENSION(1) :: ZESNOW_ROAD real, intent(inout), DIMENSION(1) :: ZAUX_MAX real, intent(inout), DIMENSION(1, num_floor_layers) :: ZT_FLOOR real, intent(inout), DIMENSION(1, num_floor_layers) :: ZT_MASS real, intent(inout), DIMENSION(1) :: ZT_WIN1 real, intent(inout), DIMENSION(1) :: ZT_WIN2 real, intent(inout), DIMENSION(1) :: ZQI_BLD real, intent(inout), DIMENSION(1) :: ZTHER_PRODC_DAY logical, intent(in) :: LGARDEN logical, intent(in) :: LGREENROOF logical, intent(in) :: LSOLAR_PANEL character(len=6), intent(in) :: HZ0H character(len=4), intent(in) :: HROAD_DIR character(len=4), intent(in) :: HWALL_OPT character(len=4), intent(in) :: HSNOW_ROAD character(len=4), intent(in) :: HSNOW_ROOF real, intent(in), DIMENSION(1) :: ZH_TRAFFIC real, intent(in), DIMENSION(1) :: ZLE_TRAFFIC real, intent(in), DIMENSION(1) :: ZH_INDUSTRY real, intent(in), DIMENSION(1) :: ZLE_INDUSTRY real, intent(in), DIMENSION(1) :: ZZ0 real, intent(in), DIMENSION(1) :: ZBLD real, intent(in), DIMENSION(1) :: ZGARDEN real, intent(in), DIMENSION(1) :: ZROAD_DIR real, intent(in), DIMENSION(1) :: ZFRAC_GR real, intent(in), DIMENSION(1) :: ZBLD_HEIGHT real, intent(in), DIMENSION(1) :: ZWALL_O_HOR real, intent(in), DIMENSION(1) :: ZALB_ROOF real, intent(in), DIMENSION(1) :: ZEMIS_ROOF real, intent(in), DIMENSION(1, num_roof_layers) :: ZHC_ROOF real, intent(in), DIMENSION(1, num_roof_layers) :: ZTC_ROOF real, intent(in), DIMENSION(1, num_roof_layers) :: ZD_ROOF real, intent(in), DIMENSION(1) :: ZALB_ROAD real, intent(in), DIMENSION(1) :: ZEMIS_ROAD real, intent(in), DIMENSION(1, num_road_layers) :: ZHC_ROAD real, intent(in), DIMENSION(1, num_road_layers) :: ZTC_ROAD real, intent(in), DIMENSION(1, num_road_layers) :: ZD_ROAD real, intent(in), DIMENSION(1) :: ZALB_WALL real, intent(in), DIMENSION(1) :: ZEMIS_WALL real, intent(in), DIMENSION(1, num_wall_layers) :: ZHC_WALL real, intent(in), DIMENSION(1, num_wall_layers) :: ZTC_WALL real, intent(in), DIMENSION(1, num_wall_layers) :: ZD_WALL character(len=12), intent(in) :: CCOOL_COIL real, intent(in), DIMENSION(1) :: ZF_WATER_COND character(len=6), intent(in) :: CHEAT_COIL real, intent(in), DIMENSION(1) :: ZNATVENT real, intent(in), DIMENSION(1) :: XF_WASTE_CAN real, intent(in), DIMENSION(1) :: ZQIN real, intent(in), DIMENSION(1) :: ZQIN_FRAD real, intent(in), DIMENSION(1) :: ZQIN_FLAT real, intent(in), DIMENSION(1) :: ZGR real, intent(in), DIMENSION(1) :: ZEFF_HEAT real, intent(in), DIMENSION(1) :: ZINF real, intent(in), DIMENSION(1) :: ZTCOOL_TARGET real, intent(in), DIMENSION(1) :: ZTHEAT_TARGET real, intent(in), DIMENSION(1) :: ZHR_TARGET real, intent(in), DIMENSION(1) :: ZV_VENT real, intent(in), DIMENSION(1) :: ZCAP_SYS_HEAT real, intent(in), DIMENSION(1) :: XCAP_SYS_RAT real, intent(in), DIMENSION(1) :: ZT_ADP real, intent(in), DIMENSION(1) :: XM_SYS_RAT real, intent(in), DIMENSION(1) :: ZCOP_RAT real, intent(in), DIMENSION(1, num_floor_layers) :: ZHC_FLOOR real, intent(in), DIMENSION(1, num_floor_layers) :: ZTC_FLOOR real, intent(in), DIMENSION(1, num_floor_layers) :: ZD_FLOOR real, intent(in), DIMENSION(1) :: ZSHGC real, intent(in), DIMENSION(1) :: ZSHGC_SH real, intent(in), DIMENSION(1) :: ZSHADE character(len=3), intent(in) :: CBEM character(len=5), intent(in) :: CCH_BEM real, intent(in), DIMENSION(1) :: ZROUGH_ROOF real, intent(in), DIMENSION(1) :: ZROUGH_WALL logical, intent(in) :: LPAR_RD_IRRIG real, intent(in), DIMENSION(1) :: ZRD_START_MONTH real, intent(in), DIMENSION(1) :: ZRD_END_MONTH real, intent(in), DIMENSION(1) :: ZRD_START_HOUR real, intent(in), DIMENSION(1) :: ZRD_END_HOUR real, intent(in), DIMENSION(1) :: ZRD_24H_IRRIG real, intent(in), DIMENSION(1) :: ZEMIS_PANEL real, intent(in), DIMENSION(1) :: ZALB_PANEL real, intent(in), DIMENSION(1) :: ZEFF_PANEL real, intent(in), DIMENSION(1) :: ZFRAC_PANEL real, intent(in), DIMENSION(1) :: ZRESIDENTIAL real, intent(in) :: ZDT_RES real, intent(in) :: ZDT_OFF real, intent(in), DIMENSION(1) :: ZFLOOR_HEIGHT real, intent(in), DIMENSION(1) :: PU_WIN real, intent(out), DIMENSION(1) :: ZHVAC_COOL_TOT real, intent(out), DIMENSION(1) :: ZHVAC_HEAT_TOT real, intent(out), DIMENSION(1) :: ZTHER_PROD_PANEL real, intent(out), DIMENSION(1) :: ZPHOT_PROD_PANEL real, intent(out), DIMENSION(1) :: XU_CANYON real, intent(out), DIMENSION(1) :: ZRN_TOWN real, intent(out), DIMENSION(1) :: ZH_TOWN real, intent(out), DIMENSION(1) :: ZLE_TOWN real, intent(out), DIMENSION(1) :: ZGFLUX_TOWN real, intent(out), DIMENSION(1) :: ZEVAP_TOWN real, intent(out), DIMENSION(1) :: ZUSTAR_TOWN real, intent(out), DIMENSION(1) :: ZTS_TOWN real, intent(out), DIMENSION(1) :: ZEMIS_TOWN real, intent(out), DIMENSION(1) :: ZALB_TOWN real, intent(out), DIMENSION(1) :: ZDIR_CANYON real, intent(out), DIMENSION(1) :: ZQ_TOWN Contents Source Code TEB_DRIVER Source Code SUBROUTINE TEB_DRIVER ( & ! inputs num_roof_layers , num_wall_layers , num_road_layers , & num_snow_layers , num_floor_layers , & ZLON , ZLAT , & IYEAR , IMONTH , IDAY , ZTIME_START , XTSTEP_SURF , & XPS , XPA , & XTA , ZQA_KGKG , XRHOA , XCO2 , & XLW , & XRAIN , XSNOW , & ZZREF , & ZDIR_SW , ZSCA_SW , ZWIND , ZDIR , & ! inputs / outputs ZT_CANYON , ZQ_CANYON , & ZTI_BLD , & ZT_ROOF , ZT_ROAD , ZT_WALL_A , ZT_WALL_B , & ZWS_ROOF , ZWS_ROAD , & ZWSNOW_ROOF , ZTSNOW_ROOF , ZRSNOW_ROOF , ZASNOW_ROOF , & ZTSSNOW_ROOF , ZESNOW_ROOF , & ZWSNOW_ROAD , ZTSNOW_ROAD , ZRSNOW_ROAD , ZASNOW_ROAD , & ZTSSNOW_ROAD , ZESNOW_ROAD , & ZAUX_MAX , ZT_FLOOR , & ZT_MASS , & ZT_WIN1 , ZT_WIN2 , ZQI_BLD , & ZTHER_PRODC_DAY , & ! parameters LGARDEN , LGREENROOF , LSOLAR_PANEL , & HZ0H , HROAD_DIR , HWALL_OPT , & HSNOW_ROAD , & HSNOW_ROOF , & ZH_TRAFFIC , ZLE_TRAFFIC , ZH_INDUSTRY , ZLE_INDUSTRY , & ZZ0 , & ZBLD , ZGARDEN , ZROAD_DIR , ZFRAC_GR , & ZBLD_HEIGHT , ZWALL_O_HOR , & ZALB_ROOF , ZEMIS_ROOF , & ZHC_ROOF , ZTC_ROOF , ZD_ROOF , & ZALB_ROAD , ZEMIS_ROAD , & ZHC_ROAD , ZTC_ROAD , ZD_ROAD , & ZALB_WALL , ZEMIS_WALL , & ZHC_WALL , ZTC_WALL , ZD_WALL , & CCOOL_COIL , ZF_WATER_COND , CHEAT_COIL , & ZNATVENT , & XF_WASTE_CAN , ZQIN , ZQIN_FRAD , & ZQIN_FLAT , ZGR , ZEFF_HEAT , ZINF , & ZTCOOL_TARGET , ZTHEAT_TARGET , ZHR_TARGET , & ZV_VENT , ZCAP_SYS_HEAT , XCAP_SYS_RAT , ZT_ADP , & XM_SYS_RAT , ZCOP_RAT , ZHC_FLOOR , ZTC_FLOOR , & ZD_FLOOR , ZSHGC , & ZSHGC_SH , & ZSHADE , & CBEM , & CCH_BEM , ZROUGH_ROOF , ZROUGH_WALL , & LPAR_RD_IRRIG , ZRD_START_MONTH , ZRD_END_MONTH , & ZRD_START_HOUR , ZRD_END_HOUR , ZRD_24H_IRRIG , & ZEMIS_PANEL , ZALB_PANEL , ZEFF_PANEL , ZFRAC_PANEL , & ZRESIDENTIAL , & ZDT_RES , ZDT_OFF , & ZFLOOR_HEIGHT , PU_WIN , & ! outputs ZHVAC_COOL_TOT , ZHVAC_HEAT_TOT , & ZTHER_PROD_PANEL , ZPHOT_PROD_PANEL , & XU_CANYON , & ZRN_TOWN , ZH_TOWN , ZLE_TOWN , ZGFLUX_TOWN , ZEVAP_TOWN , & ZUSTAR_TOWN , & ZTS_TOWN , ZEMIS_TOWN , & ZALB_TOWN , ZDIR_CANYON , ZQ_TOWN & ) ! TEB imports USE MODD_CSTS , ONLY : XCPD , XPI , & XRD , XP00 USE MODD_SURF_ATM , ONLY : XCISMIN , XVMODMIN , LALDTHRES , XRIMAX USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_TYPE_DATE_SURF USE MODE_THERMOS USE MODD_REPROD_OPER , ONLY : CQSAT ! USE MODI_SUNPOS USE MODI_OL_READ_ATM USE MODI_OL_ALLOC_ATM USE MODI_OL_TIME_INTERP_ATM USE MODI_TEB_GARDEN_STRUCT USE MODI_WINDOW_DATA_STRUCT USE MODI_BEM_MORPHO_STRUCT USE MODI_CIRCUMSOLAR_RAD IMPLICIT NONE INTEGER , INTENT ( IN ) :: num_roof_layers , & num_wall_layers , & num_road_layers , & num_snow_layers , & num_floor_layers ! Coordinates REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZLON ! Longitude (deg) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZLAT ! Latitude (deg) REAL , INTENT ( IN ) :: XTSTEP_SURF ! length of timestep in seconds INTEGER , INTENT ( IN ) :: IYEAR , IMONTH , IDAY ! date at current time step REAL , INTENT ( IN ) :: ZTIME_START ! time at beginning of time step, since midnight (UTC, s) ! End coordinates ! Parameters LOGICAL , INTENT ( IN ) :: LSOLAR_PANEL ! Flag to use a solar panels on roofs LOGICAL , INTENT ( IN ) :: LGARDEN ! Flag to use a vegetation scheme in gardens LOGICAL , INTENT ( IN ) :: LGREENROOF ! Flag to use a green roofs scheme CHARACTER ( LEN = 4 ), INTENT ( IN ) :: HROAD_DIR ! road direction option : ! 'UNIF' : uniform roads ! 'ORIE' : specified road orientation CHARACTER ( LEN = 4 ), INTENT ( IN ) :: HWALL_OPT ! Wall option ! 'UNIF' : uniform walls ! 'TWO ' : 2 opposite  walls REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZGARDEN ! fraction of GARDEN areas REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZROAD_DIR ! road direction (° from North, clockwise) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZFRAC_GR ! fraction of greenroofs on roofs CHARACTER ( LEN = 12 ), INTENT ( IN ) :: CCOOL_COIL ! option for cooling device type CHARACTER ( LEN = 6 ), INTENT ( IN ) :: CHEAT_COIL ! option for heating device type REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZF_WATER_COND ! fraction of evaporation for the condensers REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZNATVENT ! flag to describe surventilation system for ! i/o 0 for NONE, 1 for MANU and 2 for AUTO REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XF_WASTE_CAN ! fraction of waste heat released into the canyon REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZQIN ! Internal heat gains [W m-2(floor)] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZQIN_FRAD ! Radiant fraction of internal heat gains REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZQIN_FLAT ! Latent franction of internal heat gains REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZGR ! Glazing ratio REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZEFF_HEAT ! Efficiency of the heating system REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZINF ! Infiltration flow rate [AC/H] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZTCOOL_TARGET ! Cooling setpoint of HVAC system [K] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZTHEAT_TARGET ! Heating setpoint of HVAC system [K] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZHR_TARGET ! Relative humidity setpoint REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZV_VENT ! Ventilation flow rate [AC/H] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZCAP_SYS_HEAT ! Capacity of the heating system [W m-2(bld)] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XCAP_SYS_RAT ! Rated capacity of the cooling system [W m-2(bld)] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZT_ADP ! Apparatus dewpoint temperature of the cooling coil [K] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XM_SYS_RAT ! Rated HVAC mass flow rate [kg s-1 m-2(bld)] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZCOP_RAT ! Rated COP of the cooling system REAL , DIMENSION ( 1 , num_floor_layers ), INTENT ( IN ) :: ZHC_FLOOR ! heat capacity for floor layers REAL , DIMENSION ( 1 , num_floor_layers ), INTENT ( IN ) :: ZTC_FLOOR ! thermal conductivity for floor layers REAL , DIMENSION ( 1 , num_floor_layers ), INTENT ( IN ) :: ZD_FLOOR ! depth of floor layers REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZSHGC ! window solar transmittance REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZSHGC_SH ! window + shading solar heat gain coef. REAL , DIMENSION ( 1 ), INTENT ( IN ) :: PU_WIN ! window U-factor [K m W-2] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZSHADE ! flag to activate shading devices -> REAL for i/o 0. or 1 REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZFLOOR_HEIGHT ! Floor height (m) CHARACTER ( LEN = 5 ), INTENT ( IN ) :: CCH_BEM ! TEB option for building outside conv. coef CHARACTER ( LEN = 3 ), INTENT ( IN ) :: CBEM ! Building Energy model 'DEF' or 'BEM' REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZROUGH_ROOF ! roof roughness coef. REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZROUGH_WALL ! wall roughness coef. LOGICAL , INTENT ( IN ) :: LPAR_RD_IRRIG ! Flag for road watering REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZRD_START_MONTH ! start month for watering of roads(included) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZRD_END_MONTH ! end   month for watering of roads(included) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZRD_START_HOUR ! start hour  for watering of roads(included) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZRD_END_HOUR ! end   hour  for watering of roads(excluded) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZRD_24H_IRRIG ! 24h quantity of water used for road watering (liter/m2) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZEMIS_PANEL ! Emissivity of solar panel [-] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZALB_PANEL ! albedo of solar panel  [-] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZEFF_PANEL ! Efficiency of solar panel [-] REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZFRAC_PANEL ! fraction of solar panels on roofs REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZRESIDENTIAL ! Fraction of residential use in buildings REAL , INTENT ( IN ) :: ZDT_RES ! target temperature change when unoccupied ! (K) (residential buildings) REAL , INTENT ( IN ) :: ZDT_OFF ! target temperature change when unoccupied ! (K) (office buildings) ! End parameters ! Variable inputs REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XCO2 ! CO2 concentration in the air    (kg/m3) CHARACTER ( LEN = 6 ), INTENT ( IN ) :: HZ0H ! TEB option for z0h roof & road ! 'MASC95' : Mascart et al 1995 ! 'BRUT82' : Brustaert     1982 ! 'KAND07' : Kanda         2007 REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZWIND ! module of the horizontal wind CHARACTER ( LEN = 4 ), INTENT ( IN ) :: HSNOW_ROOF ! snow roof scheme ! 'NONE' ! 'D95 ' ! '1-L ' CHARACTER ( LEN = 4 ), INTENT ( IN ) :: HSNOW_ROAD ! snow road scheme ! 'NONE' ! 'D95 ' ! '1-L ' REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XTA ! air temperature forcing (K) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XPS ! pressure at the surface REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XPA ! pressure at the first atmospheric level REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XRHOA ! air density at the lowest level REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZDIR ! wind direction REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XLW ! atmospheric infrared radiation REAL , DIMENSION ( 1 , 1 ), INTENT ( IN ) :: ZDIR_SW ! incoming direct solar radiation on an horizontal surface REAL , DIMENSION ( 1 , 1 ), INTENT ( IN ) :: ZSCA_SW ! scattered incoming solar rad. REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XRAIN ! rain rate (kg/m2/s) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: XSNOW ! snow rate (kg/s/m2 of snow) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZH_TRAFFIC ! anthropogenic sensible heat fluxes due to traffic REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZLE_TRAFFIC ! anthropogenic latent heat fluxes due to traffic REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZH_INDUSTRY ! anthropogenic sensible heat fluxes due to factories REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZLE_INDUSTRY ! anthropogenic latent heat fluxes due to factories REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZZREF ! reference height of the first atmospheric level (temperature) REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZZ0 ! town roughness length for momentum REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZBLD ! fraction of buildings REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZBLD_HEIGHT ! buildings h REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZWALL_O_HOR ! wall surf. / hor. surf. REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZALB_ROOF ! roof albedo REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZEMIS_ROOF ! roof emissivity REAL , DIMENSION ( 1 , num_roof_layers ), INTENT ( IN ) :: ZHC_ROOF ! heat capacity for roof layers (J/m3/K) REAL , DIMENSION ( 1 , num_roof_layers ), INTENT ( IN ) :: ZTC_ROOF ! thermal conductivity for roof layers (w/m/K) REAL , DIMENSION ( 1 , num_roof_layers ), INTENT ( IN ) :: ZD_ROOF ! depth of roof layers REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZALB_ROAD ! road albedo REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZEMIS_ROAD ! road emissivity REAL , DIMENSION ( 1 , num_road_layers ), INTENT ( IN ) :: ZHC_ROAD ! heat capacity for road layers (J/m3/K) REAL , DIMENSION ( 1 , num_road_layers ), INTENT ( IN ) :: ZTC_ROAD ! thermal conductivity for road layers (w/m/K) REAL , DIMENSION ( 1 , num_road_layers ), INTENT ( IN ) :: ZD_ROAD ! depth of road layers REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZALB_WALL ! wall albedo REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZEMIS_WALL ! wall emissivity REAL , DIMENSION ( 1 , num_wall_layers ), INTENT ( IN ) :: ZHC_WALL ! heat capacity for wall layers (J/m3/K) REAL , DIMENSION ( 1 , num_wall_layers ), INTENT ( IN ) :: ZTC_WALL ! thermal conductivity for wall layers REAL , DIMENSION ( 1 , num_wall_layers ), INTENT ( IN ) :: ZD_WALL ! depth of wall layers REAL , DIMENSION ( 1 ), INTENT ( IN ) :: ZQA_KGKG ! air humidity at forcing level (kg/kg) ! End variable inputs ! State REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZT_WIN1 ! outdoor window temperature [K] REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZT_WIN2 ! Indoor window temperature [K] REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZAUX_MAX ! Auxiliar variable for autosize calcs (not used) REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZTHER_PRODC_DAY ! Present day integrated thermal production of energy (J/m2 panel) REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZQI_BLD ! Indoor air specific humidity [kg kg-1] REAL , DIMENSION ( 1 , num_floor_layers ), INTENT ( INOUT ) :: ZT_FLOOR ! Floor layers temperatures [K] REAL , DIMENSION ( 1 , num_floor_layers ), INTENT ( INOUT ) :: ZT_MASS ! Internal mass layers temperatures [K] REAL , DIMENSION ( 1 , num_road_layers ), INTENT ( INOUT ) :: ZT_ROAD ! road layers temperatures REAL , DIMENSION ( 1 , num_roof_layers ), INTENT ( INOUT ) :: ZT_ROOF ! roof layers temperatures REAL , DIMENSION ( 1 , num_wall_layers ), INTENT ( INOUT ) :: ZT_WALL_A ! wall layers temperatures (wall 'A') REAL , DIMENSION ( 1 , num_wall_layers ), INTENT ( INOUT ) :: ZT_WALL_B ! wall layers temperatures (wall 'B') REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZT_CANYON ! canyon air temperature REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZQ_CANYON ! canyon air specific humidity REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZTI_BLD ! inside building temperature REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZWS_ROOF ! roof water reservoir(kg/m2) REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZWS_ROAD ! road water reservoir(kg/m2) REAL , DIMENSION ( 1 , num_snow_layers ), INTENT ( INOUT ) :: ZWSNOW_ROOF ! snow layers reservoir REAL , DIMENSION ( 1 , num_snow_layers ), INTENT ( INOUT ) :: ZTSNOW_ROOF ! snow layers temperature REAL , DIMENSION ( 1 , num_snow_layers ), INTENT ( INOUT ) :: ZRSNOW_ROOF ! snow layers density REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZASNOW_ROOF ! snow albedo REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZESNOW_ROOF ! snow emissivity REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZTSSNOW_ROOF ! snow surface temperature REAL , DIMENSION ( 1 , num_snow_layers ), INTENT ( INOUT ) :: ZWSNOW_ROAD ! snow layers reservoir REAL , DIMENSION ( 1 , num_snow_layers ), INTENT ( INOUT ) :: ZTSNOW_ROAD ! snow layers temperature REAL , DIMENSION ( 1 , num_snow_layers ), INTENT ( INOUT ) :: ZRSNOW_ROAD ! snow layers density REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZASNOW_ROAD ! snow albedo REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZESNOW_ROAD ! snow emissivity REAL , DIMENSION ( 1 ), INTENT ( INOUT ) :: ZTSSNOW_ROAD ! snow surface temperature ! End state ! Diagnostics REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZHVAC_COOL_TOT ! Energy consumption of the cooling system [W m-2(tot)] REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZHVAC_HEAT_TOT ! Energy consumption of the heating system [W m-2(tot)] REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZTHER_PROD_PANEL ! Thermal energy production of solar panel on roofs (W/m2 panel) REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZPHOT_PROD_PANEL ! Photovoltaic Energy production of solar panel on roofs (W/m2 panel) REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZRN_TOWN ! net radiation over town REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZH_TOWN ! sensible heat flux over town REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZLE_TOWN ! latent heat flux over town REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZGFLUX_TOWN ! flux through the ground REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZEVAP_TOWN ! evaporation flux (kg/m2/s) REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZUSTAR_TOWN ! friction velocity over town REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZTS_TOWN ! town surface temperature REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZEMIS_TOWN ! town equivalent emissivity REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZALB_TOWN ! town equivalent albedo REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: XU_CANYON ! canyon hor. wind REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZDIR_CANYON ! canyon wind direction REAL , DIMENSION ( 1 ), INTENT ( OUT ) :: ZQ_TOWN ! Town humidity ! End diagnostics ! Constants CHARACTER ( LEN = 3 ) :: HIMPLICIT_WIND = 'NEW' ! Implicitation option for wind fluxes INTEGER :: KSW = 1 ! number of spectral bands in SW forcing LOGICAL :: LCANOPY = . FALSE . ! is canopy active ? REAL , DIMENSION ( 1 ) :: XSW_BANDS = XUNDEF ! mean wavelength of each shortwave band (m) ! (unused in TEB, but needed as argument) ! End constants ! Local variables REAL :: ZTIME_BEG ! Time at beginning of time step REAL :: ZTIME ! Time at end       of time step INTEGER :: IYEAR2 ! current year at end of timestep(UTC) INTEGER :: IMONTH2 ! current month at end of timestep(UTC) INTEGER :: IDAY2 ! current day at end of timestep(UTC) REAL :: ZTIME2 ! current time since start of the day at end of timestep (s) TYPE ( DATE_TIME ) :: TPTIME REAL , DIMENSION ( 1 ) :: ZSW REAL :: ZBEGIN_TRAFFIC_TIME ! start traffic time (solar time, s) REAL :: ZEND_TRAFFIC_TIME ! end traffic time   (solar time, s) REAL , DIMENSION ( 1 ) :: XH_TRAFFIC ! heat fluxes due to traffic                   !   \\\\/ REAL , DIMENSION ( 1 ) :: XLE_TRAFFIC ! heat fluxes due to traffic REAL , DIMENSION ( 1 ) :: ZU_CANYON ! canyon hor. wind REAL , DIMENSION ( 1 ) :: ZU_LOWCAN ! wind near the road REAL , DIMENSION ( 1 ) :: ZT_LOWCAN ! temp. near the road REAL , DIMENSION ( 1 ) :: ZQ_LOWCAN ! hum. near the road REAL , DIMENSION ( 1 ) :: ZZ_LOWCAN ! height of atm. var. near the road REAL , DIMENSION ( 1 ) :: ZVMOD ! module of the horizontal wind REAL , DIMENSION ( 1 ) :: ZEXNA ! exner function at the lowest level REAL , DIMENSION ( 1 ) :: ZEXNS ! surface exner function REAL , DIMENSION ( 1 ) :: ZF1_o_B ! Coefficient for sky model REAL , DIMENSION ( 1 ) :: ZCOEF ! work array REAL , DIMENSION ( 1 ) :: XZENITH ! solar zenithal angle (radian) REAL , DIMENSION ( 1 ) :: XZENITH2 ! solar zenithal angle (radian) REAL , DIMENSION ( 1 ) :: XTSUN ! solar time (s from midnight) REAL , DIMENSION ( 1 ) :: XAZIM ! azimuthal angle (radian from North, clockwise) REAL , DIMENSION ( 1 ) :: ZPEW_A_COEF_LOWCAN REAL , DIMENSION ( 1 ) :: ZPEW_B_COEF_LOWCAN REAL , DIMENSION ( 1 ) :: ZPEW_A_COEF ! implicit coefficients REAL , DIMENSION ( 1 ) :: ZPEW_B_COEF ! for wind coupling ! V = ZPEW_A_COEF * v'w'  +   ZPEW_B_COEF ! IF explicit: ZPEW_A_COEF = 0 and  ZPEW_B_COEF REAL , DIMENSION ( 1 ) :: ZWAKE ! reduction of average wind speed REAL , DIMENSION ( 1 ) :: ZSVF_WALL ! wall sky view factor REAL , DIMENSION ( 1 ) :: ZCAN_HW_RATIO ! canyon    h/W REAL , DIMENSION ( 1 ) :: ZSVF_ROAD ! road sky view factor REAL , DIMENSION ( 1 ) :: ZROAD ! fraction of roads REAL , DIMENSION ( 1 ) :: ZROAD_O_GRND ! Road to ground surface ratio REAL , DIMENSION ( 1 ) :: ZGARDEN_O_GRND ! Garden to ground surface ratio REAL , DIMENSION ( 1 ) :: ZWALL_O_GRND ! Wall to ground surface ratio REAL , DIMENSION ( 1 ) :: ZSVF_GARDEN ! garden sky view factor REAL , DIMENSION ( 1 ) :: ZTOTS_O_HORS ! total canyon+roof surf over horizontal surf REAL , DIMENSION ( 1 ) :: ZROOF_FRAC ! roof area fraction REAL , DIMENSION ( 1 ) :: ZWALL_FRAC ! wall area fraction REAL , DIMENSION ( 1 ) :: ZROAD_FRAC ! road area fraction REAL , DIMENSION ( 1 ) :: ZGARDEN_FRAC ! garden area fraction REAL , DIMENSION ( 1 ) :: ZUGG_WIN ! window glass-to-glass U-factro [W m-2 K-1] REAL , DIMENSION ( 1 ) :: ZALB_WIN ! window albedo REAL , DIMENSION ( 1 ) :: ZABS_WIN ! window absortance REAL , DIMENSION ( 1 ) :: ZTRAN_WIN ! window transmittance REAL , DIMENSION ( 1 ) :: ZN_FLOOR ! Number of floors REAL , DIMENSION ( 1 ) :: ZWALL_O_BLD ! Wall area [m2_wall/m2_bld] REAL , DIMENSION ( 1 ) :: ZGLAZ_O_BLD ! Window area [m2_win/m2_bld] REAL , DIMENSION ( 1 ) :: ZMASS_O_BLD ! Mass area [m2_mass/m2_bld] REAL , DIMENSION ( 1 ) :: ZFLOOR_HW_RATIO ! H/W ratio of 1 floor level REAL , DIMENSION ( 1 ) :: ZF_FLOOR_MASS ! View factor floor-mass REAL , DIMENSION ( 1 ) :: ZF_FLOOR_WALL ! View factor floor-wall REAL , DIMENSION ( 1 ) :: ZF_FLOOR_WIN ! View factor floor-window REAL , DIMENSION ( 1 ) :: ZF_FLOOR_ROOF ! View factor floor-roof REAL , DIMENSION ( 1 ) :: ZF_WALL_FLOOR ! View factor wall-floor REAL , DIMENSION ( 1 ) :: ZF_WALL_MASS ! View factor wall-mass REAL , DIMENSION ( 1 ) :: ZF_WALL_WIN ! View factor wall-win REAL , DIMENSION ( 1 ) :: ZF_WIN_FLOOR ! View factor win-floor REAL , DIMENSION ( 1 ) :: ZF_WIN_MASS ! View factor win-mass REAL , DIMENSION ( 1 ) :: ZF_WIN_WALL ! View factor win-wall REAL , DIMENSION ( 1 ) :: ZF_MASS_FLOOR ! View factor mass-floor REAL , DIMENSION ( 1 ) :: ZF_MASS_WALL ! View factor mass-wall REAL , DIMENSION ( 1 ) :: ZF_MASS_WIN ! View factor mass-window REAL , DIMENSION ( 1 ) :: ZF_WIN_WIN ! indoor win to win view factor REAL , DIMENSION ( 1 ) :: ZDIR_ALB_TOWN ! town equivalent direct albedo REAL , DIMENSION ( 1 ) :: ZSCA_ALB_TOWN ! town equivalent diffuse albedo REAL , DIMENSION ( 1 , 1 ) :: ZTDIR_SW ! total direct SW REAL , DIMENSION ( 1 , 1 ) :: ZTSCA_SW ! total diffuse SW ! TODO: what about these? make into state variables? ! For now set to off state as they are not considered in the eval. LOGICAL , DIMENSION ( 1 ) :: GSHAD_DAY ! has shading been necessary this day ? LOGICAL , DIMENSION ( 1 ) :: GNATVENT_NIGHT ! has natural ventilation been necessary/possible this night ? REAL , DIMENSION ( 1 , 1 ) :: XDIR_SW ! incoming direct solar radiation on an horizontal surface REAL , DIMENSION ( 1 , 1 ) :: XSCA_SW ! scattered incoming solar rad. REAL , DIMENSION ( 1 ) :: PFLOOR_HEIGHT ! Floor height (m) REAL , DIMENSION ( 1 ) :: ZF_WASTE_CAN ! fraction of waste heat released into the canyon REAL , DIMENSION ( 1 ) :: ZCAP_SYS_RAT ! Rated capacity of the cooling system [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZM_SYS_RAT ! Rated HVAC mass flow rate [kg s-1 m-2(bld)] LOGICAL , DIMENSION ( 1 ) :: LSHADE ! Flag to use shading devices CHARACTER ( LEN = 4 ), DIMENSION ( 1 ) :: HNATVENT ! End local variables ! Unused model outputs REAL , DIMENSION ( 1 ) :: ZRN_STRLROOF ! net radiation over structural roof REAL , DIMENSION ( 1 ) :: ZH_STRLROOF ! sensible heat flux over structural roof REAL , DIMENSION ( 1 ) :: ZLE_STRLROOF ! latent heat flux over structural roof REAL , DIMENSION ( 1 ) :: ZGFLUX_STRLROOF ! flux through the structural roof REAL , DIMENSION ( 1 ) :: ZRUNOFF_STRLROOF ! water runoff on the structural roof REAL , DIMENSION ( 1 ) :: ZRN_BLT ! net radiation over built covers REAL , DIMENSION ( 1 ) :: ZH_BLT ! sensible heat flux over built covers REAL , DIMENSION ( 1 ) :: ZLE_BLT ! latent heat flux over built covers REAL , DIMENSION ( 1 ) :: ZGFLUX_BLT ! flux through the built covers REAL , DIMENSION ( 1 ) :: ZSFCO2 ! Surface Flux of CO2 REAL , DIMENSION ( 1 ) :: ZUW_GRND ! friction flux over ground REAL , DIMENSION ( 1 ) :: ZUW_ROOF ! Momentum flux for roofs REAL , DIMENSION ( 1 ) :: ZDUWDU_GRND ! d(u'w')/du for ground REAL , DIMENSION ( 1 ) :: ZDUWDU_ROOF ! d(u'w')/du for roof REAL , DIMENSION ( 1 ) :: ZAC_GARDEN ! garden aerodynamical conductance REAL , DIMENSION ( 1 ) :: ZAC_GREENROOF ! green roofs aerodynamical conductance REAL , DIMENSION ( 1 ) :: ZAC_ROAD_WAT ! road aerodynamical conductance (for water) REAL , DIMENSION ( 1 ) :: ZAC_GARDEN_WAT ! garden aerodynamical conductance for vapor REAL , DIMENSION ( 1 ) :: ZAC_GREENROOF_WAT ! green roofs aerodynamical conductance for vapor REAL , DIMENSION ( 1 ) :: ZABS_SW_ROOF ! Shortwave radiation absorbed by roofs REAL , DIMENSION ( 1 ) :: ZABS_LW_ROOF ! Longwave  radiation absorbed by roofs REAL , DIMENSION ( 1 ) :: ZABS_SW_SNOW_ROOF ! Shortwave radiation absorbed by roof snow REAL , DIMENSION ( 1 ) :: ZABS_LW_SNOW_ROOF ! abs. LW rad. by snow REAL , DIMENSION ( 1 ) :: ZABS_SW_ROAD ! Shortwave radiation absorbed by roads REAL , DIMENSION ( 1 ) :: ZABS_LW_ROAD ! Longwave  radiation absorbed by roads REAL , DIMENSION ( 1 ) :: ZABS_SW_SNOW_ROAD ! Shortwave radiation absorbed by road snow REAL , DIMENSION ( 1 ) :: ZABS_LW_SNOW_ROAD ! abs. LW rad. by snow REAL , DIMENSION ( 1 ) :: ZABS_SW_WALL_A ! Shortwave radiation absorbed by wall A REAL , DIMENSION ( 1 ) :: ZABS_LW_WALL_A ! Longwave  radiation absorbed by wall A REAL , DIMENSION ( 1 ) :: ZABS_SW_WALL_B ! Shortwave radiation absorbed by wall B REAL , DIMENSION ( 1 ) :: ZABS_LW_WALL_B ! Longwave  radiation absorbed by wall B REAL , DIMENSION ( 1 ) :: ZABS_SW_PANEL ! Shortwave radiation absorbed by solar panels REAL , DIMENSION ( 1 ) :: ZABS_LW_PANEL ! Longwave  radiation absorbed by solar panels REAL , DIMENSION ( 1 ) :: ZABS_SW_GARDEN ! Shortwave radiation absorbed by gardens REAL , DIMENSION ( 1 ) :: ZABS_LW_GARDEN ! Longwave  radiation absorbed by gardens REAL , DIMENSION ( 1 ) :: ZABS_SW_GREENROOF ! Shortwave radiation absorbed by greenroofs REAL , DIMENSION ( 1 ) :: ZABS_LW_GREENROOF ! Longwave  radiation absorbed by greenroofs REAL , DIMENSION ( 1 ) :: ZG_GREENROOF_ROOF ! heat flux between base of greenroof and structural roof REAL , DIMENSION ( 1 ) :: ZH_BLD_COOL ! Sensible cooling energy demand of the building [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZT_BLD_COOL ! Total cooling energy demand of the building [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZH_BLD_HEAT ! Heating energy demand of the building [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZLE_BLD_COOL ! Latent cooling energy demand of the building [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZLE_BLD_HEAT ! Latent heating energy demand of the building [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZH_WASTE ! Sensible waste heat from HVAC system [W m-2(tot)] REAL , DIMENSION ( 1 ) :: ZLE_WASTE ! Latent waste heat from HVAC system [W m-2(tot)] REAL , DIMENSION ( 1 ) :: ZCAP_SYS ! Actual capacity of the cooling system [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZM_SYS ! Actual HVAC mass flow rate [kg s-1 m-2(bld)] REAL , DIMENSION ( 1 ) :: ZCOP ! COP of the cooling system REAL , DIMENSION ( 1 ) :: ZQ_SYS ! Supply air specific humidity [kg kg-1] REAL , DIMENSION ( 1 ) :: ZT_SYS ! Supply air temperature [K] REAL , DIMENSION ( 1 ) :: ZTR_SW_WIN ! Solar radiation transmitted throught windows [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZFAN_POWER ! HVAC fan power REAL , DIMENSION ( 1 ) :: ZABS_SW_WIN ! window absorbed shortwave radiation [W m-2] REAL , DIMENSION ( 1 ) :: ZABS_LW_WIN ! absorbed infrared rad. [W m-2] REAL , DIMENSION ( 1 ) :: ZEMIT_LW_FAC ! LW flux emitted by the facade (W/m² ground) REAL , DIMENSION ( 1 ) :: ZEMIT_LW_GRND ! LW flux emitted by the ground (W/m² ground) REAL , DIMENSION ( 1 ) :: ZT_RAD_IND ! Indoor mean radiant temperature [K] REAL , DIMENSION ( 1 ) :: ZREF_SW_GRND ! total solar rad reflected from ground REAL , DIMENSION ( 1 ) :: ZREF_SW_FAC ! total solar rad reflected from facade REAL , DIMENSION ( 1 ) :: ZHU_BLD ! Indoor relative humidity 0 < (-) < 1 REAL , DIMENSION ( 1 ) :: ZIRRIG_ROAD ! road irrigation during current time-step REAL , DIMENSION ( 1 ) :: ZPROD_PANEL ! Averaged energy production of solar panel on roofs (W/m2 panel) REAL , DIMENSION ( 1 ) :: ZTHER_PROD_BLD ! Thermal energy production of solar panel on roofs (W/m2 bld) REAL , DIMENSION ( 1 ) :: ZPHOT_PROD_BLD ! Photovoltaic energy production of solar panel on roofs (W/m2 bld) REAL , DIMENSION ( 1 ) :: ZPROD_BLD ! Averaged energy production of solar panel on roofs (W/m2 bld) REAL , DIMENSION ( 1 ) :: ZH_PANEL ! Sensible heat flux from solar panels (W/m2 panel) REAL , DIMENSION ( 1 ) :: ZRN_PANEL ! Net radiation of solar panel (W/m2 panel) REAL , DIMENSION ( 1 ) :: ZCUR_QIN ! Internal heat gains [W m-2(floor)] REAL , DIMENSION ( 1 ) :: ZCUR_TCOOL_TARGET ! Cooling setpoint of HVAC system [K] REAL , DIMENSION ( 1 ) :: ZCUR_THEAT_TARGET ! Heating setpoint of HVAC system [K] REAL , DIMENSION ( 1 ) :: ZRN_ROOF ! net radiation over roof REAL , DIMENSION ( 1 ) :: ZH_ROOF ! sensible heat flux over roof REAL , DIMENSION ( 1 ) :: ZLE_ROOF ! latent heat flux over roof REAL , DIMENSION ( 1 ) :: ZLEW_ROOF ! latent heat flux over roof (snow) REAL , DIMENSION ( 1 ) :: ZGFLUX_ROOF ! flux through the roof REAL , DIMENSION ( 1 ) :: ZRUNOFF_ROOF ! runoff over the ground REAL , DIMENSION ( 1 ) :: ZRN_ROAD ! net radiation over road REAL , DIMENSION ( 1 ) :: ZH_ROAD ! sensible heat flux over road REAL , DIMENSION ( 1 ) :: ZLE_ROAD ! latent heat flux over road REAL , DIMENSION ( 1 ) :: ZLEW_ROAD ! latent heat flux over road (snow)  (sublimation) REAL , DIMENSION ( 1 ) :: ZGFLUX_ROAD ! flux through the road REAL , DIMENSION ( 1 ) :: ZRUNOFF_ROAD ! runoff over the ground REAL , DIMENSION ( 1 ) :: ZRN_WALL_A ! net radiation over wall REAL , DIMENSION ( 1 ) :: ZH_WALL_A ! sensible heat flux over wall REAL , DIMENSION ( 1 ) :: ZLE_WALL_A ! latent heat flux over wall REAL , DIMENSION ( 1 ) :: ZGFLUX_WALL_A ! flux through the wall REAL , DIMENSION ( 1 ) :: ZRN_WALL_B ! net radiation over wall REAL , DIMENSION ( 1 ) :: ZH_WALL_B ! sensible heat flux over wall REAL , DIMENSION ( 1 ) :: ZLE_WALL_B ! latent heat flux over wall REAL , DIMENSION ( 1 ) :: ZGFLUX_WALL_B ! flux through the wall REAL , DIMENSION ( 1 ) :: ZRNSNOW_ROOF ! net radiation over snow REAL , DIMENSION ( 1 ) :: ZHSNOW_ROOF ! sensible heat flux over snow REAL , DIMENSION ( 1 ) :: ZLESNOW_ROOF ! latent heat flux over snow REAL , DIMENSION ( 1 ) :: ZGSNOW_ROOF ! flux under the snow REAL , DIMENSION ( 1 ) :: ZMELT_ROOF ! snow melt REAL , DIMENSION ( 1 ) :: ZRNSNOW_ROAD ! net radiation over snow REAL , DIMENSION ( 1 ) :: ZHSNOW_ROAD ! sensible heat flux over snow REAL , DIMENSION ( 1 ) :: ZLESNOW_ROAD ! latent heat flux over snow REAL , DIMENSION ( 1 ) :: ZGSNOW_ROAD ! flux under the snow REAL , DIMENSION ( 1 ) :: ZMELT_ROAD ! snow melt REAL , DIMENSION ( 1 ) :: ZRN_GRND ! net radiation over ground REAL , DIMENSION ( 1 ) :: ZH_GRND ! sensible heat flux over ground REAL , DIMENSION ( 1 ) :: ZLE_GRND ! latent heat flux over ground REAL , DIMENSION ( 1 ) :: ZGFLUX_GRND ! flux through the ground REAL , DIMENSION ( 1 ) :: ZRUNOFF_TOWN ! runoff over the ground REAL , DIMENSION ( 1 ) :: ZCD ! town averaged drag coefficient REAL , DIMENSION ( 1 ) :: ZCDN ! town averaged neutral drag coefficient REAL , DIMENSION ( 1 ) :: ZCH_TOWN ! town averaged heat transfer coefficient REAL , DIMENSION ( 1 ) :: ZRI_TOWN ! town averaged Richardson number REAL , DIMENSION ( 1 ) :: ZRESA_TOWN ! town aerodynamical resistance REAL , DIMENSION ( 1 ) :: ZDQS_TOWN ! heat storage inside town REAL , DIMENSION ( 1 ) :: ZQF_TOWN ! total anthropogenic heat REAL , DIMENSION ( 1 ) :: ZQF_BLD ! anthropogenic heat flux of domestic heating REAL , DIMENSION ( 1 ) :: ZFLX_BLD ! heat flux between inside of the bld and its structure REAL , DIMENSION ( 1 ) :: ZAC_ROAD ! road conductance REAL , DIMENSION ( 1 ) :: ZHVAC_COOL ! Energy consumption of the cooling system [W m-2(bld)] REAL , DIMENSION ( 1 ) :: ZHVAC_HEAT ! Energy consumption of the heating system [W m-2(bld)] ! End unused model outputs INTEGER :: JLOOP ! loop counter ! The following are IN arguments to this subroutine but are further modified, ! hence need to be copied to a local variable first. ZTIME = ZTIME_START XDIR_SW = ZDIR_SW XSCA_SW = ZSCA_SW PFLOOR_HEIGHT = ZFLOOR_HEIGHT ZF_WASTE_CAN = XF_WASTE_CAN ZCAP_SYS_RAT = XCAP_SYS_RAT ZM_SYS_RAT = XM_SYS_RAT ! ========================================================================= ! ! We try to keep the following module as close as possible to the TEB driver program ! to allow to easily update between future versions of TEB. ! Any changes to the following code should be requested and made directly into the ! TEB driver first and moved here. ! ----------------------------------------------------------- ! Initializations (SYSTEM) ! ----------------------------------------------------------- ! GSHAD_DAY = . FALSE . ! has shading been necessary this day ? GNATVENT_NIGHT = . FALSE . ! has natural ventilation been necessary/possible this night ? IF ( ZNATVENT ( 1 ) >= 0.0 . AND . ZNATVENT ( 1 ) < 0.5 ) THEN HNATVENT = 'NONE' ELSEIF ( ZNATVENT ( 1 ) >= 0.5 . AND . ZNATVENT ( 1 ) < 1.5 ) THEN HNATVENT = 'MANU' ELSEIF ( ZNATVENT ( 1 ) >= 1.5 . AND . ZNATVENT ( 1 ) <= 2.5 ) THEN HNATVENT = 'AUTO' ELSEIF ( ZNATVENT ( 1 ) >= 2.5 . AND . ZNATVENT ( 1 ) <= 3.5 ) THEN HNATVENT = 'MECH' ELSE HNATVENT = 'NONE' ENDIF IF ( ZSHADE ( 1 ) >= 0.0 . AND . ZSHADE ( 1 ) < 0.5 ) THEN LSHADE = . FALSE . ELSEIF ( ZSHADE ( 1 ) >= 0.5 . AND . ZSHADE ( 1 ) <= 1.0 ) THEN LSHADE = . TRUE . ELSE LSHADE = . FALSE . ENDIF ! ! coherence check IF ( (. NOT . LGREENROOF ) . AND . ZFRAC_GR ( 1 ) > 0. ) THEN print * , 'Greenroofs option   is not activated but a non-zero greenroof fraction is given' STOP END IF IF ( (. NOT . LGARDEN ) . AND . ZGARDEN ( 1 ) > 0. ) THEN print * , 'Garden     option   is not activated but a non-zero garden    fraction is given' STOP END IF IF ( ZBLD ( 1 ) + ZGARDEN ( 1 ) >= 1. ) THEN print * , 'The sum of garden and building fraction is larger than one, so road fraction is' , & 'negative. Please check their values.' STOP END IF IF ( (. NOT . LSOLAR_PANEL ) . AND . ZFRAC_PANEL ( 1 ) > 0. ) THEN print * , 'Solar panels option is not activated but a non-zero solar panels fraction is given' STOP END IF IF ( (. NOT . CBEM == 'BEM' ) . AND . ZGR ( 1 ) > 0. ) THEN print * , 'Building Energy Module (BEM) is not activated but a non-zero glazing ratio is given' STOP END IF ! ! Multi layer option LCANOPY = . FALSE . ! DO NOT CHANGE: whether multi-layer canopy is active. ! CQSAT = 'NEW' ! saturation is computed relative to water above 0°C, and relative to ice below 0°C ! ! Thresholds XCISMIN = 0.5 ! Minimum wind shear XVMODMIN = 0.5 ! Minimum wind speed LALDTHRES = . FALSE . ! DO NOT CHANGE: whether to activate Aladin threshold for wind XRIMAX = 0.2 ! Maximum Richardson number for exchange coefficients computations ! ! ZTIME = ZTIME_START ! ! Geometric parameters ZROAD = ( 1. - ZBLD - ZGARDEN ) ZCAN_HW_RATIO = 0.5 * ZWALL_O_HOR / ( 1. - ZBLD ) ZSVF_ROAD = ( SQRT ( ZCAN_HW_RATIO ** 2 + 1. ) - ZCAN_HW_RATIO ) ZSVF_GARDEN = ZSVF_ROAD ZSVF_WALL = 0.5 * ( ZCAN_HW_RATIO + 1. - SQRT ( ZCAN_HW_RATIO ** 2 + 1. )) / ZCAN_HW_RATIO ZZ_LOWCAN = ZBLD_HEIGHT / 2 ZTOTS_O_HORS = 1. + ZWALL_O_HOR ZROOF_FRAC = ZBLD / ZTOTS_O_HORS ZWALL_FRAC = ZWALL_O_HOR / ZTOTS_O_HORS ZROAD_FRAC = ZROAD / ZTOTS_O_HORS ZGARDEN_FRAC = ZGARDEN / ZTOTS_O_HORS ZWALL_O_GRND = ZWALL_FRAC / ( ZROAD_FRAC + ZGARDEN_FRAC ) ZROAD_O_GRND = ZROAD / ( ZROAD + ZGARDEN ) ZGARDEN_O_GRND = ZGARDEN / ( ZROAD + ZGARDEN ) ! CALL BEM_MORPHO_STRUCT ( ZBLD , ZWALL_O_HOR , ZBLD_HEIGHT , PFLOOR_HEIGHT , & ZGR , ZN_FLOOR , ZWALL_O_BLD , ZGLAZ_O_BLD , ZMASS_O_BLD , & ZFLOOR_HW_RATIO , & ZF_FLOOR_MASS , ZF_FLOOR_WALL , ZF_FLOOR_WIN , & ZF_FLOOR_ROOF , ZF_WALL_FLOOR , ZF_WALL_MASS , & ZF_WALL_WIN , ZF_WIN_FLOOR , ZF_WIN_MASS , ZF_WIN_WALL , & ZF_MASS_FLOOR , ZF_MASS_WALL , ZF_MASS_WIN , ZF_WASTE_CAN , & ZF_WIN_WIN ) ! ! Window characteristics CALL WINDOW_DATA_STRUCT ( 1 , ZSHGC , PU_WIN , ZALB_WIN , ZABS_WIN , ZUGG_WIN , ZTRAN_WIN ) ! ! CALL SUNPOS ( IYEAR , IMONTH , IDAY , ZTIME , ZLON , ZLAT , XTSUN , XZENITH , XAZIM ) IYEAR2 = IYEAR IMONTH2 = IMONTH IDAY2 = IDAY ZTIME2 = ZTIME + XTSTEP_SURF CALL ADD_FORECAST_TO_DATE_SURF ( IYEAR2 , IMONTH2 , IDAY2 , ZTIME2 ) CALL SUNPOS ( IYEAR2 , IMONTH2 , IDAY2 , ZTIME2 , ZLON , ZLAT , XTSUN , XZENITH2 , XAZIM ) ! TPTIME % TIME = ZTIME TPTIME % TDATE % YEAR = IYEAR TPTIME % TDATE % MONTH = IMONTH TPTIME % TDATE % DAY = IDAY ZSW (:) = 0. DO JLOOP = 1 , SIZE ( XDIR_SW , 2 ) ZSW (:) = ZSW (:) + XDIR_SW (:, JLOOP ) + XSCA_SW (:, JLOOP ) END DO WHERE ( ZSW (:) > 0. ) XZENITH = MIN ( XZENITH , XPI / 2. - 0.01 ) XZENITH2 = MIN ( XZENITH2 , XPI / 2. - 0.01 ) ELSEWHERE XZENITH = MAX ( XZENITH , XPI / 2. ) XZENITH2 = MAX ( XZENITH2 , XPI / 2. ) END WHERE ! ! Exner functions ZEXNS = ( XPS / XP00 ) ** ( XRD / XCPD ) ZEXNA = ( XPA / XP00 ) ** ( XRD / XCPD ) ZTDIR_SW = XDIR_SW ( 1 , 1 ) ZTSCA_SW = XSCA_SW ( 1 , 1 ) KSW = 1 ! Only one spectral band here ! ! Sky model for diffuse radiation ! Add directionnal contrib from scattered radiation CALL CIRCUMSOLAR_RAD ( XDIR_SW (:, 1 ), XSCA_SW (:, 1 ), XZENITH , ZF1_o_B ) ZTDIR_SW (:, 1 ) = XDIR_SW (:, 1 ) + XSCA_SW (:, 1 ) * ZF1_o_B ZTSCA_SW (:, 1 ) = XSCA_SW (:, 1 ) * ( 1. - ZF1_o_B ) ZBEGIN_TRAFFIC_TIME = 2160 0. ZEND_TRAFFIC_TIME = 6480 0. ! WHERE ( XTSUN > ZBEGIN_TRAFFIC_TIME . AND . XTSUN < ZEND_TRAFFIC_TIME ) XH_TRAFFIC (:) = ZH_TRAFFIC (:) XLE_TRAFFIC (:) = ZLE_TRAFFIC (:) ELSEWHERE XH_TRAFFIC (:) = 0. XLE_TRAFFIC (:) = 0. END WHERE ! ! Wind speed ZVMOD = ZWIND ( 1 ) ZWAKE = 1. + ( 2. / XPI - 1. ) * 2. * ( ZCAN_HW_RATIO - 0.5 ) ZWAKE = MAX ( MIN ( ZWAKE , 1. ), 2. / XPI ) ZU_CANYON = ZWAKE * EXP ( - ZCAN_HW_RATIO / 4. ) * ZVMOD & * LOG ( ( 2. * ZBLD_HEIGHT / 3. ) / ZZ0 ) & / LOG ( ( ZZREF + 2. * ZBLD_HEIGHT / 3. ) / ZZ0 ) ZU_LOWCAN = ZU_CANYON ZT_LOWCAN = ZT_CANYON ZQ_LOWCAN = ZQ_CANYON ! ZPEW_A_COEF = 0. ZPEW_A_COEF_LOWCAN = 0. ZPEW_B_COEF = ZVMOD ZPEW_B_COEF_LOWCAN = ZU_LOWCAN ! CALL TEB_GARDEN_STRUCT ( LGARDEN , LGREENROOF , LSOLAR_PANEL , & HZ0H , HIMPLICIT_WIND , HROAD_DIR , HWALL_OPT , TPTIME , & XTSUN , ZT_CANYON , ZQ_CANYON , ZU_CANYON , & ZT_LOWCAN , ZQ_LOWCAN , ZU_LOWCAN , ZZ_LOWCAN , & ZTI_BLD , & ZT_ROOF , ZT_ROAD , ZT_WALL_A , ZT_WALL_B , & ZWS_ROOF , ZWS_ROAD , & HSNOW_ROOF , & ZWSNOW_ROOF , ZTSNOW_ROOF , ZRSNOW_ROOF , ZASNOW_ROOF , & ZTSSNOW_ROOF , ZESNOW_ROOF , & HSNOW_ROAD , & ZWSNOW_ROAD , ZTSNOW_ROAD , ZRSNOW_ROAD , ZASNOW_ROAD , & ZTSSNOW_ROAD , ZESNOW_ROAD , & ZPEW_A_COEF , ZPEW_B_COEF , & ZPEW_A_COEF_LOWCAN , ZPEW_B_COEF_LOWCAN , & XPS , XPA , ZEXNS , ZEXNA , & XTA , ZQA_KGKG , XRHOA , XCO2 , & XLW , ZTDIR_SW , ZTSCA_SW , XSW_BANDS , KSW , & XZENITH , XAZIM , & XRAIN , XSNOW , & ZZREF , ZZREF , ZVMOD , & XH_TRAFFIC , XLE_TRAFFIC , ZH_INDUSTRY , ZLE_INDUSTRY , & XTSTEP_SURF , & ZZ0 , & ZBLD , ZGARDEN , ZROAD_DIR , ZROAD , ZFRAC_GR , & ZBLD_HEIGHT , ZWALL_O_HOR , ZCAN_HW_RATIO , & ZROAD_O_GRND , ZGARDEN_O_GRND , ZWALL_O_GRND , & ZALB_ROOF , ZEMIS_ROOF , & ZHC_ROOF , ZTC_ROOF , ZD_ROOF , & ZALB_ROAD , ZEMIS_ROAD , ZSVF_ROAD , & ZHC_ROAD , ZTC_ROAD , ZD_ROAD , & ZALB_WALL , ZEMIS_WALL , ZSVF_WALL , & ZSVF_GARDEN , & ZHC_WALL , ZTC_WALL , ZD_WALL , & ZRN_ROOF , ZH_ROOF , ZLE_ROOF , ZLEW_ROOF , ZGFLUX_ROOF , & ZRUNOFF_ROOF , & ZRN_ROAD , ZH_ROAD , ZLE_ROAD , ZLEW_ROAD , ZGFLUX_ROAD , & ZRUNOFF_ROAD , & ZRN_WALL_A , ZH_WALL_A , ZLE_WALL_A , ZGFLUX_WALL_A , & ZRN_WALL_B , ZH_WALL_B , ZLE_WALL_B , ZGFLUX_WALL_B , & ZRN_STRLROOF , ZH_STRLROOF , ZLE_STRLROOF , ZGFLUX_STRLROOF , & ZRUNOFF_STRLROOF , & ZRN_BLT , ZH_BLT , ZLE_BLT , ZGFLUX_BLT , & ZRNSNOW_ROOF , ZHSNOW_ROOF , ZLESNOW_ROOF , ZGSNOW_ROOF , & ZMELT_ROOF , & ZRNSNOW_ROAD , ZHSNOW_ROAD , ZLESNOW_ROAD , ZGSNOW_ROAD , & ZMELT_ROAD , & ZRN_GRND , ZH_GRND , ZLE_GRND , ZGFLUX_GRND , & ZRN_TOWN , ZH_TOWN , ZLE_TOWN , ZGFLUX_TOWN , ZEVAP_TOWN , & ZRUNOFF_TOWN , ZSFCO2 , & ZUW_GRND , ZUW_ROOF , ZDUWDU_GRND , ZDUWDU_ROOF , & ZUSTAR_TOWN , ZCD , ZCDN , ZCH_TOWN , ZRI_TOWN , & ZTS_TOWN , ZEMIS_TOWN , ZDIR_ALB_TOWN , ZSCA_ALB_TOWN , & ZRESA_TOWN , ZDQS_TOWN , ZQF_TOWN , ZQF_BLD , & ZFLX_BLD , ZAC_ROAD , ZAC_GARDEN , ZAC_GREENROOF , & ZAC_ROAD_WAT , ZAC_GARDEN_WAT , ZAC_GREENROOF_WAT , & ZABS_SW_ROOF , ZABS_LW_ROOF , & ZABS_SW_SNOW_ROOF , ZABS_LW_SNOW_ROOF , & ZABS_SW_ROAD , ZABS_LW_ROAD , & ZABS_SW_SNOW_ROAD , ZABS_LW_SNOW_ROAD , & ZABS_SW_WALL_A , ZABS_LW_WALL_A , & ZABS_SW_WALL_B , ZABS_LW_WALL_B , & ZABS_SW_PANEL , ZABS_LW_PANEL , & ZABS_SW_GARDEN , ZABS_LW_GARDEN , & ZABS_SW_GREENROOF , ZABS_LW_GREENROOF , & ZG_GREENROOF_ROOF , & CCOOL_COIL , ZF_WATER_COND , CHEAT_COIL , & HNATVENT , ZNATVENT , IDAY , ZAUX_MAX , ZT_FLOOR , & ZT_MASS , ZH_BLD_COOL , ZT_BLD_COOL , ZH_BLD_HEAT , & ZLE_BLD_COOL , ZLE_BLD_HEAT , ZH_WASTE , ZLE_WASTE , & ZF_WASTE_CAN , ZHVAC_COOL , ZHVAC_HEAT , ZQIN , ZQIN_FRAD , & ZQIN_FLAT , ZGR , ZEFF_HEAT , ZINF , & ZTCOOL_TARGET , ZTHEAT_TARGET , ZHR_TARGET , ZT_WIN2 , & ZQI_BLD , ZV_VENT , ZCAP_SYS_HEAT , ZCAP_SYS_RAT , ZT_ADP , & ZM_SYS_RAT , ZCOP_RAT , ZCAP_SYS , ZM_SYS , ZCOP , ZQ_SYS , & ZT_SYS , ZTR_SW_WIN , ZFAN_POWER , ZHC_FLOOR , ZTC_FLOOR , & ZD_FLOOR , ZT_WIN1 , ZABS_SW_WIN , ZABS_LW_WIN , ZSHGC , & ZSHGC_SH , ZUGG_WIN , ZALB_WIN , ZABS_WIN , ZEMIT_LW_FAC , & ZEMIT_LW_GRND , ZT_RAD_IND , ZREF_SW_GRND , ZREF_SW_FAC , & ZHU_BLD , ZTIME , LSHADE , ZSHADE , GSHAD_DAY , & GNATVENT_NIGHT , & CBEM , & ZN_FLOOR , ZWALL_O_BLD , ZGLAZ_O_BLD , ZMASS_O_BLD , & ZFLOOR_HW_RATIO , ZF_FLOOR_MASS , ZF_FLOOR_WALL , & ZF_FLOOR_WIN , ZF_FLOOR_ROOF , ZF_WALL_FLOOR , ZF_WALL_MASS ,& ZF_WALL_WIN , ZF_WIN_FLOOR , ZF_WIN_MASS , ZF_WIN_WALL , & ZF_MASS_FLOOR , ZF_MASS_WALL , ZF_MASS_WIN , LCANOPY , & ZTRAN_WIN , CCH_BEM , ZROUGH_ROOF , ZROUGH_WALL , ZF_WIN_WIN ,& LPAR_RD_IRRIG , ZRD_START_MONTH , ZRD_END_MONTH , & ZRD_START_HOUR , ZRD_END_HOUR , ZRD_24H_IRRIG , ZIRRIG_ROAD ,& ZEMIS_PANEL , ZALB_PANEL , ZEFF_PANEL , ZFRAC_PANEL , & ZRESIDENTIAL , & ZTHER_PROD_PANEL , ZPHOT_PROD_PANEL , ZPROD_PANEL , & ZTHER_PROD_BLD , ZPHOT_PROD_BLD , ZPROD_BLD , & ZTHER_PRODC_DAY , ZH_PANEL , ZRN_PANEL , & ZDT_RES , ZDT_OFF , & ZCUR_TCOOL_TARGET , ZCUR_THEAT_TARGET , ZCUR_QIN ) ! Calculate the total (direct + diffuse radiations) town albedo IF ( ZTDIR_SW ( 1 , 1 ) == 0. ) THEN ZALB_TOWN = 0. ELSE ZALB_TOWN = ( ZDIR_ALB_TOWN * ZTDIR_SW ( 1 , 1 ) + ZSCA_ALB_TOWN * ZTSCA_SW ( 1 , 1 )) / ( ZTDIR_SW ( 1 , 1 ) + ZTSCA_SW ( 1 , 1 )) END IF ! TEB does not modify the wind direction ZDIR_CANYON = ZDIR ( 1 ) ! Town specific humidity assumed to be same as canyon humidity ZQ_TOWN = ZQ_CANYON XU_CANYON = ZU_CANYON ! The heating and cooling energy demand are converted ! from W/m²(bld) to W/m²(tot). ZHVAC_COOL_TOT = ZBLD * ZHVAC_COOL ZHVAC_HEAT_TOT = ZBLD * ZHVAC_HEAT END SUBROUTINE TEB_DRIVER","tags":"","loc":"proc/teb_driver.html"},{"title":"OL_READ_ATM_ASCII – Town Energy Balance (TEB) model API docs","text":"interface public subroutine OL_READ_ATM_ASCII(KFORC_STEP, PTA, PQA, PWIND, PDIR_SW, PSCA_SW, PLW, PSNOW, PRAIN, PPS, PCO2, PDIR) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KFORC_STEP real, intent(out), DIMENSION(:,:) :: PTA real, intent(out), DIMENSION(:,:) :: PQA real, intent(out), DIMENSION(:,:) :: PWIND real, intent(out), DIMENSION(:,:) :: PDIR_SW real, intent(out), DIMENSION(:,:) :: PSCA_SW real, intent(out), DIMENSION(:,:) :: PLW real, intent(out), DIMENSION(:,:) :: PSNOW real, intent(out), DIMENSION(:,:) :: PRAIN real, intent(out), DIMENSION(:,:) :: PPS real, intent(out), DIMENSION(:,:) :: PCO2 real, intent(out), DIMENSION(:,:) :: PDIR","tags":"","loc":"interface/ol_read_atm_ascii.html"},{"title":"CLOSE_FILE – Town Energy Balance (TEB) model API docs","text":"interface public subroutine CLOSE_FILE(HPROGRAM, KUNIT) Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HPROGRAM integer, intent(in) :: KUNIT","tags":"","loc":"interface/close_file.html"},{"title":"OPEN_CLOSE_BIN_ASC_FORC – Town Energy Balance (TEB) model API docs","text":"interface public subroutine OPEN_CLOSE_BIN_ASC_FORC(HACTION, HFORCING, HACTION2) Arguments Type Intent Optional Attributes Name character(len=5), intent(in) :: HACTION character(len=6), intent(in) :: HFORCING character(len=1), intent(in) :: HACTION2","tags":"","loc":"interface/open_close_bin_asc_forc.html"},{"title":"READ_SURF_ATM – Town Energy Balance (TEB) model API docs","text":"interface public subroutine READ_SURF_ATM(HPROGRAM, PFIELD, KFORC_STEP, KNB, KINIT) Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HPROGRAM real, intent(out), DIMENSION(:,:) :: PFIELD integer, intent(in) :: KFORC_STEP integer, intent(in) :: KNB integer, intent(in) :: KINIT","tags":"","loc":"interface/read_surf_atm.html"},{"title":"CHAR_TO_REAL – Town Energy Balance (TEB) model API docs","text":"public subroutine CHAR_TO_REAL(KOUT, HSTR) Uses MODD_ARCH Arguments Type Intent Optional Attributes Name real, intent(out), DIMENSION(SIZE(HSTR)) :: KOUT character(len=*), intent(in), DIMENSION(:) :: HSTR Contents Source Code CHAR_TO_REAL Source Code SUBROUTINE CHAR_TO_REAL ( KOUT , HSTR ) USE MODD_ARCH , ONLY : LITTLE_ENDIAN_ARCH IMPLICIT NONE CHARACTER ( LEN =* ), DIMENSION (:), INTENT ( IN ) :: HSTR REAL , DIMENSION ( SIZE ( HSTR )), INTENT ( OUT ) :: KOUT INTEGER :: ISIZE , JI CHARACTER ( LEN = 8 ), DIMENSION (:), ALLOCATABLE :: YTEMP CHARACTER ( LEN = 4 ), DIMENSION (:), ALLOCATABLE :: YTEMP2 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CHAR2REAL:CHAR_TO_REAL' , 0 , ZHOOK_HANDLE ) SELECT CASE ( LEN ( HSTR ( 1 ))) CASE ( 8 ) ISIZE = SIZE ( HSTR ) IF ( LITTLE_ENDIAN_ARCH ) THEN ! must swap 8 bytes ALLOCATE ( YTEMP ( ISIZE )) DO JI = 1 , ISIZE YTEMP ( JI )( 1 : 1 ) = HSTR ( JI )( 8 : 8 ) YTEMP ( JI )( 2 : 2 ) = HSTR ( JI )( 7 : 7 ) YTEMP ( JI )( 3 : 3 ) = HSTR ( JI )( 6 : 6 ) YTEMP ( JI )( 4 : 4 ) = HSTR ( JI )( 5 : 5 ) YTEMP ( JI )( 5 : 5 ) = HSTR ( JI )( 4 : 4 ) YTEMP ( JI )( 6 : 6 ) = HSTR ( JI )( 3 : 3 ) YTEMP ( JI )( 7 : 7 ) = HSTR ( JI )( 2 : 2 ) YTEMP ( JI )( 8 : 8 ) = HSTR ( JI )( 1 : 1 ) END DO KOUT = TRANSFER ( YTEMP , 1.0_8 , ISIZE ) DEALLOCATE ( YTEMP ) ELSE KOUT = TRANSFER ( HSTR , 1.0_8 , ISIZE ) END IF CASE ( 4 ) ! EMULATE a 32 bits REAL ISIZE = SIZE ( HSTR ) IF ( LITTLE_ENDIAN_ARCH ) THEN ALLOCATE ( YTEMP2 ( ISIZE )) DO JI = 1 , ISIZE YTEMP2 ( JI )( 1 : 1 ) = HSTR ( JI )( 4 : 4 ) YTEMP2 ( JI )( 2 : 2 ) = HSTR ( JI )( 3 : 3 ) YTEMP2 ( JI )( 3 : 3 ) = HSTR ( JI )( 2 : 2 ) YTEMP2 ( JI )( 4 : 4 ) = HSTR ( JI )( 1 : 1 ) END DO KOUT = TRANSFER ( YTEMP2 , 1.0_4 , ISIZE ) DEALLOCATE ( YTEMP2 ) ELSE KOUT = TRANSFER ( HSTR , 1.0_4 , ISIZE ) END IF CASE ( 2 ) ! EMULATE a 16 bits signed INTEGER IF ( LITTLE_ENDIAN_ARCH ) THEN ! must swap 2 bytes KOUT = ICHAR ( HSTR (:)( 2 : 2 )) + 256 * ICHAR ( HSTR (:)( 1 : 1 )) ELSE KOUT = ICHAR ( HSTR (:)( 1 : 1 )) + 256 * ICHAR ( HSTR (:)( 2 : 2 )) END IF WHERE ( KOUT > 32767 ) KOUT = KOUT - 6553 6. END WHERE CASE ( 1 ) ! EMULATE an 8 bits signed INTEGER KOUT (:) = ICHAR ( HSTR (:)) WHERE ( KOUT > 127 ) KOUT = KOUT - 25 6. END WHERE CASE default CALL ABOR1_SFX ( 'MODE_CHAR2REAL: CONVERSION ERROR IN READ_DIRECT SUBROUTINE' ) END SELECT IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CHAR2REAL:CHAR_TO_REAL' , 1 , ZHOOK_HANDLE ) END SUBROUTINE CHAR_TO_REAL","tags":"","loc":"proc/char_to_real.html"},{"title":"ASSIGNMENT (=) – Town Energy Balance (TEB) model API docs","text":"public interface ASSIGNMENT (=) Contents Module Procedures CHAR_TO_REAL Module Procedures public subroutine CHAR_TO_REAL (KOUT, HSTR) Arguments Type Intent Optional Attributes Name real, intent(out), DIMENSION(SIZE(HSTR)) :: KOUT character(len=*), intent(in), DIMENSION(:) :: HSTR","tags":"","loc":"interface/assignment (=).html"},{"title":"SUNPOS – Town Energy Balance (TEB) model API docs","text":"interface public subroutine SUNPOS(KYEAR, KMONTH, KDAY, PTIME, PLON, PLAT, PTSUN, PZENITH, PAZIMSOL) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KYEAR integer, intent(in) :: KMONTH integer, intent(in) :: KDAY real, intent(in) :: PTIME real, intent(in), DIMENSION(:) :: PLON real, intent(in), DIMENSION(:) :: PLAT real, intent(out), DIMENSION(:) :: PTSUN real, intent(out), DIMENSION(:) :: PZENITH real, intent(out), DIMENSION(:) :: PAZIMSOL","tags":"","loc":"interface/sunpos.html"},{"title":"CIRCUMSOLAR_RAD – Town Energy Balance (TEB) model API docs","text":"interface public subroutine CIRCUMSOLAR_RAD(PDIR_SW, PSCA_SW, PZENITH, PF1_o_B) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PDIR_SW real, intent(in), DIMENSION(:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PZENITH real, intent(out), DIMENSION(:) :: PF1_o_B","tags":"","loc":"interface/circumsolar_rad.html"},{"title":"CH_TEB_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine CH_TEB_INIT(YCH_TEB) Arguments Type Intent Optional Attributes Name type( CH_TEB_t ), intent(inout) :: YCH_TEB Contents Source Code CH_TEB_INIT Source Code SUBROUTINE CH_TEB_INIT ( YCH_TEB ) TYPE ( CH_TEB_t ), INTENT ( INOUT ) :: YCH_TEB REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_TEB_N:CH_TEB_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YCH_TEB % XDEP ) NULLIFY ( YCH_TEB % XSOILRC_SO2 ) NULLIFY ( YCH_TEB % XSOILRC_O3 ) NULLIFY ( YCH_TEB % CCH_NAMES ) NULLIFY ( YCH_TEB % CAER_NAMES ) NULLIFY ( YCH_TEB % CDSTNAMES ) NULLIFY ( YCH_TEB % CSLTNAMES ) YCH_TEB % CCHEM_SURF_FILE = ' ' YCH_TEB % CCH_DRY_DEP = ' ' YCH_TEB % LCH_BIO_FLUX = . FALSE . YCH_TEB % LCH_NO_FLUX = . FALSE . CALL SV_INIT ( YCH_TEB % SVT ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_TEB_N:CH_TEB_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_TEB_INIT","tags":"","loc":"proc/ch_teb_init.html"},{"title":"DUMMY_SURF_FIELDS_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DUMMY_SURF_FIELDS_INIT(YDUMMY_SURF_FIELDS) Arguments Type Intent Optional Attributes Name type( DUMMY_SURF_FIELDS_t ), intent(inout) :: YDUMMY_SURF_FIELDS Contents Source Code DUMMY_SURF_FIELDS_INIT Source Code SUBROUTINE DUMMY_SURF_FIELDS_INIT ( YDUMMY_SURF_FIELDS ) TYPE ( DUMMY_SURF_FIELDS_t ), INTENT ( INOUT ) :: YDUMMY_SURF_FIELDS REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DUMMY_SURF_FIELDS_N:DUMMY_SURF_FIELDS_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDUMMY_SURF_FIELDS % CDUMMY_NAME ) NULLIFY ( YDUMMY_SURF_FIELDS % CDUMMY_AREA ) NULLIFY ( YDUMMY_SURF_FIELDS % XDUMMY_FIELDS ) YDUMMY_SURF_FIELDS % NDUMMY_NBR = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DUMMY_SURF_FIELDS_N:DUMMY_SURF_FIELDS_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DUMMY_SURF_FIELDS_INIT","tags":"","loc":"proc/dummy_surf_fields_init.html"},{"title":"CLOSE_NAMELIST – Town Energy Balance (TEB) model API docs","text":"interface public subroutine CLOSE_NAMELIST(HPROGRAM, KLUNAM) Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HPROGRAM integer, intent(in) :: KLUNAM","tags":"","loc":"interface/close_namelist.html"},{"title":"TEB – Town Energy Balance (TEB) model API docs","text":"interface public subroutine TEB(TOP, T, BOP, B, TIR, DMT, HIMPLICIT_WIND, PTSUN, PT_CANYON, PQ_CANYON, PU_CANYON, PT_LOWCAN, PQ_LOWCAN, PU_LOWCAN, PZ_LOWCAN, PPEW_A_COEF, PPEW_B_COEF, PPEW_A_COEF_LOWCAN, PPEW_B_COEF_LOWCAN, PPS, PPA, PEXNS, PEXNA, PTA, PQA, PRHOA, PLW_RAD, PRR, PSR, PZREF, PUREF, PVMOD, PH_TRAFFIC, PLE_TRAFFIC, PTSTEP, PDF_RF, PDN_RF, PDF_RD, PDN_RD, PQSAT_RF, PQSAT_RD, PDELT_RF, PDELT_RD, PTS_GARDEN, PLEW_RF, PUW_GR, PLEW_RD, PLE_WL_A, PLE_WL_B, PRNSN_RF, PHSN_RF, PLESN_RF, PGSN_RF, PMELT_RF, PRN_GR, PH_GR, PLE_GR, PGFLUX_GR, PDRAIN_GR, PRUNOFF_GR, PRNSN_RD, PHSN_RD, PLESN_RD, PGSN_RD, PMELT_RD, PUW_RD, PUW_RF, PDUWDU_RD, PDUWDU_RF, PUSTAR_TWN, PCD, PCDN, PCH_TWN, PRI_TWN, PRESA_TWN, PAC_RF, PAC_RD, PAC_WL, PAC_TOP, PAC_GARDEN, PAC_RF_WAT, PAC_RD_WAT, PLW_WA_TO_WB, PLW_WA_TO_R, PLW_WB_TO_R, PLW_WA_TO_NR, PLW_WB_TO_NR, PLW_R_TO_WA, PLW_R_TO_WB, PLW_G_TO_WA, PLW_G_TO_WB, PLW_S_TO_WA, PLW_S_TO_WB, PLW_S_TO_R, PLW_S_TO_NR, PLW_NR_TO_WA, PLW_NR_TO_WB, PLW_NR_TO_WIN, PLW_WA_TO_WIN, PLW_WB_TO_WIN, PLW_G_TO_WIN, PLW_R_TO_WIN, PLW_S_TO_WIN, PLW_WIN_TO_WA, PLW_WIN_TO_WB, PLW_WIN_TO_R, PLW_WIN_TO_NR, KDAY, PEMIT_LW_FAC, PEMIT_LW_RD, PT_RAD_IND, PHU_BLD, PTIME, PE_SHADING) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_OPTIONS_t), intent(inout) :: BOP type(BEM_t), intent(inout) :: B type(TEB_IRRIG_t), intent(inout) :: TIR type(DIAG_MISC_TEB_t), intent(inout) :: DMT character(len=*), intent(in) :: HIMPLICIT_WIND real, intent(in), DIMENSION(:) :: PTSUN real, intent(inout), DIMENSION(:) :: PT_CANYON real, intent(inout), DIMENSION(:) :: PQ_CANYON real, intent(in), DIMENSION(:) :: PU_CANYON real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PU_LOWCAN real, intent(in), DIMENSION(:) :: PZ_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPEW_A_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_B_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PPA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PH_TRAFFIC real, intent(in), DIMENSION(:) :: PLE_TRAFFIC real, intent(in) :: PTSTEP real, intent(inout), DIMENSION(:) :: PDF_RF real, intent(inout), DIMENSION(:) :: PDN_RF real, intent(inout), DIMENSION(:) :: PDF_RD real, intent(inout), DIMENSION(:) :: PDN_RD real, intent(out), DIMENSION(:) :: PQSAT_RF real, intent(out), DIMENSION(:) :: PQSAT_RD real, intent(out), DIMENSION(:) :: PDELT_RF real, intent(out), DIMENSION(:) :: PDELT_RD real, intent(in), DIMENSION(:) :: PTS_GARDEN real, intent(out), DIMENSION(:) :: PLEW_RF real, intent(in), DIMENSION(:) :: PUW_GR real, intent(out), DIMENSION(:) :: PLEW_RD real, intent(out), DIMENSION(:) :: PLE_WL_A real, intent(out), DIMENSION(:) :: PLE_WL_B real, intent(out), DIMENSION(:) :: PRNSN_RF real, intent(out), DIMENSION(:) :: PHSN_RF real, intent(out), DIMENSION(:) :: PLESN_RF real, intent(out), DIMENSION(:) :: PGSN_RF real, intent(out), DIMENSION(:) :: PMELT_RF real, intent(in), DIMENSION(:) :: PRN_GR real, intent(in), DIMENSION(:) :: PH_GR real, intent(in), DIMENSION(:) :: PLE_GR real, intent(in), DIMENSION(:) :: PGFLUX_GR real, intent(in), DIMENSION(:) :: PDRAIN_GR real, intent(in), DIMENSION(:) :: PRUNOFF_GR real, intent(out), DIMENSION(:) :: PRNSN_RD real, intent(out), DIMENSION(:) :: PHSN_RD real, intent(out), DIMENSION(:) :: PLESN_RD real, intent(out), DIMENSION(:) :: PGSN_RD real, intent(out), DIMENSION(:) :: PMELT_RD real, intent(out), DIMENSION(:) :: PUW_RD real, intent(out), DIMENSION(:) :: PUW_RF real, intent(out), DIMENSION(:) :: PDUWDU_RD real, intent(out), DIMENSION(:) :: PDUWDU_RF real, intent(out), DIMENSION(:) :: PUSTAR_TWN real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN real, intent(out), DIMENSION(:) :: PCH_TWN real, intent(out), DIMENSION(:) :: PRI_TWN real, intent(out), DIMENSION(:) :: PRESA_TWN real, intent(out), DIMENSION(:) :: PAC_RF real, intent(inout), DIMENSION(:) :: PAC_RD real, intent(out), DIMENSION(:) :: PAC_WL real, intent(out), DIMENSION(:) :: PAC_TOP real, intent(in), DIMENSION(:) :: PAC_GARDEN real, intent(out), DIMENSION(:) :: PAC_RF_WAT real, intent(out), DIMENSION(:) :: PAC_RD_WAT real, intent(in), DIMENSION(:) :: PLW_WA_TO_WB real, intent(in), DIMENSION(:) :: PLW_WA_TO_R real, intent(in), DIMENSION(:) :: PLW_WB_TO_R real, intent(in), DIMENSION(:) :: PLW_WA_TO_NR real, intent(in), DIMENSION(:) :: PLW_WB_TO_NR real, intent(in), DIMENSION(:) :: PLW_R_TO_WA real, intent(in), DIMENSION(:) :: PLW_R_TO_WB real, intent(in), DIMENSION(:) :: PLW_G_TO_WA real, intent(in), DIMENSION(:) :: PLW_G_TO_WB real, intent(in), DIMENSION(:) :: PLW_S_TO_WA real, intent(in), DIMENSION(:) :: PLW_S_TO_WB real, intent(in), DIMENSION(:) :: PLW_S_TO_R real, intent(in), DIMENSION(:) :: PLW_S_TO_NR real, intent(in), DIMENSION(:) :: PLW_NR_TO_WA real, intent(in), DIMENSION(:) :: PLW_NR_TO_WB real, intent(in), DIMENSION(:) :: PLW_NR_TO_WIN real, intent(in), DIMENSION(:) :: PLW_WA_TO_WIN real, intent(in), DIMENSION(:) :: PLW_WB_TO_WIN real, intent(in), DIMENSION(:) :: PLW_G_TO_WIN real, intent(in), DIMENSION(:) :: PLW_R_TO_WIN real, intent(in), DIMENSION(:) :: PLW_S_TO_WIN real, intent(in), DIMENSION(:) :: PLW_WIN_TO_WA real, intent(in), DIMENSION(:) :: PLW_WIN_TO_WB real, intent(in), DIMENSION(:) :: PLW_WIN_TO_R real, intent(in), DIMENSION(:) :: PLW_WIN_TO_NR integer, intent(in) :: KDAY real, intent(out), DIMENSION(:) :: PEMIT_LW_FAC real, intent(out), DIMENSION(:) :: PEMIT_LW_RD real, intent(out), DIMENSION(:) :: PT_RAD_IND real, intent(out), DIMENSION(:) :: PHU_BLD real, intent(in) :: PTIME real, intent(in), DIMENSION(:) :: PE_SHADING","tags":"","loc":"interface/teb.html"},{"title":"BUSINGER_PHIM_3D – Town Energy Balance (TEB) model API docs","text":"public function BUSINGER_PHIM_3D(PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3)) Contents Source Code BUSINGER_PHIM_3D Source Code FUNCTION BUSINGER_PHIM_3D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:,:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), & SIZE ( PZ_O_LMO , 2 ), SIZE ( PZ_O_LMO , 3 )) :: BUSINGER_PHIM_3D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIM_3D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:,:,:) < 0. ) BUSINGER_PHIM_3D (:,:,:) = ( 1. - 1 5. * PZ_O_LMO ) ** ( - 0.25 ) ELSEWHERE BUSINGER_PHIM_3D (:,:,:) = 1. + 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIM_3D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIM_3D","tags":"","loc":"proc/businger_phim_3d.html"},{"title":"BUSINGER_PHIM_2D – Town Energy Balance (TEB) model API docs","text":"public function BUSINGER_PHIM_2D(PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) Contents Source Code BUSINGER_PHIM_2D Source Code FUNCTION BUSINGER_PHIM_2D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), SIZE ( PZ_O_LMO , 2 )) :: BUSINGER_PHIM_2D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIM_2D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:,:) < 0. ) BUSINGER_PHIM_2D (:,:) = ( 1. - 1 5. * PZ_O_LMO ) ** ( - 0.25 ) ELSEWHERE BUSINGER_PHIM_2D (:,:) = 1. + 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIM_2D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIM_2D","tags":"","loc":"proc/businger_phim_2d.html"},{"title":"BUSINGER_PHIM_1D – Town Energy Balance (TEB) model API docs","text":"public function BUSINGER_PHIM_1D(PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO)) Contents Source Code BUSINGER_PHIM_1D Source Code FUNCTION BUSINGER_PHIM_1D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO )) :: BUSINGER_PHIM_1D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIM_1D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:) < 0. ) BUSINGER_PHIM_1D (:) = ( 1. - 1 5. * PZ_O_LMO ) ** ( - 0.25 ) ELSEWHERE BUSINGER_PHIM_1D (:) = 1. + 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIM_1D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIM_1D","tags":"","loc":"proc/businger_phim_1d.html"},{"title":"BUSINGER_PHIM_0D – Town Energy Balance (TEB) model API docs","text":"public function BUSINGER_PHIM_0D(PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real Contents Source Code BUSINGER_PHIM_0D Source Code FUNCTION BUSINGER_PHIM_0D ( PZ_O_LMO ) IMPLICIT NONE REAL , INTENT ( IN ) :: PZ_O_LMO REAL :: BUSINGER_PHIM_0D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIM_0D' , 0 , ZHOOK_HANDLE ) IF ( PZ_O_LMO < 0. ) THEN BUSINGER_PHIM_0D = ( 1. - 1 5. * PZ_O_LMO ) ** ( - 0.25 ) ELSE BUSINGER_PHIM_0D = 1. + 4.7 * PZ_O_LMO END IF IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIM_0D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIM_0D","tags":"","loc":"proc/businger_phim_0d.html"},{"title":"BUSINGER_PHIH_3D – Town Energy Balance (TEB) model API docs","text":"public function BUSINGER_PHIH_3D(PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3)) Contents Source Code BUSINGER_PHIH_3D Source Code FUNCTION BUSINGER_PHIH_3D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:,:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), & SIZE ( PZ_O_LMO , 2 ), SIZE ( PZ_O_LMO , 3 )) :: BUSINGER_PHIH_3D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIH_3D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:,:,:) < 0. ) BUSINGER_PHIH_3D (:,:,:) = 0.74 * ( 1. - 9. * PZ_O_LMO ) ** ( - 0.5 ) ELSEWHERE BUSINGER_PHIH_3D (:,:,:) = 0.74 + 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIH_3D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIH_3D","tags":"","loc":"proc/businger_phih_3d.html"},{"title":"BUSINGER_PHIH_2D – Town Energy Balance (TEB) model API docs","text":"public function BUSINGER_PHIH_2D(PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) Contents Source Code BUSINGER_PHIH_2D Source Code FUNCTION BUSINGER_PHIH_2D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), SIZE ( PZ_O_LMO , 2 )) :: BUSINGER_PHIH_2D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIH_2D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:,:) < 0. ) BUSINGER_PHIH_2D (:,:) = 0.74 * ( 1. - 9. * PZ_O_LMO ) ** ( - 0.5 ) ELSEWHERE BUSINGER_PHIH_2D (:,:) = 0.74 + 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIH_2D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIH_2D","tags":"","loc":"proc/businger_phih_2d.html"},{"title":"BUSINGER_PHIH_1D – Town Energy Balance (TEB) model API docs","text":"public function BUSINGER_PHIH_1D(PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO)) Contents Source Code BUSINGER_PHIH_1D Source Code FUNCTION BUSINGER_PHIH_1D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO )) :: BUSINGER_PHIH_1D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIH_1D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:) < 0. ) BUSINGER_PHIH_1D (:) = 0.74 * ( 1. - 9. * PZ_O_LMO ) ** ( - 0.5 ) ELSEWHERE BUSINGER_PHIH_1D (:) = 0.74 + 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIH_1D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIH_1D","tags":"","loc":"proc/businger_phih_1d.html"},{"title":"BUSINGER_PHIH_0D – Town Energy Balance (TEB) model API docs","text":"public function BUSINGER_PHIH_0D(PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real Contents Source Code BUSINGER_PHIH_0D Source Code FUNCTION BUSINGER_PHIH_0D ( PZ_O_LMO ) IMPLICIT NONE REAL , INTENT ( IN ) :: PZ_O_LMO REAL :: BUSINGER_PHIH_0D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIH_0D' , 0 , ZHOOK_HANDLE ) IF ( PZ_O_LMO < 0. ) THEN BUSINGER_PHIH_0D = 0.74 * ( 1. - 9. * PZ_O_LMO ) ** ( - 0.5 ) ELSE BUSINGER_PHIH_0D = 0.74 + 4.7 * PZ_O_LMO END IF IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIH_0D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIH_0D","tags":"","loc":"proc/businger_phih_0d.html"},{"title":"BUSINGER_PHIE_3D – Town Energy Balance (TEB) model API docs","text":"public function BUSINGER_PHIE_3D(PZ_O_LMO) Uses MODD_CANOPY_TURB Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3)) Contents Source Code BUSINGER_PHIE_3D Source Code FUNCTION BUSINGER_PHIE_3D ( PZ_O_LMO ) USE MODD_CANOPY_TURB , ONLY : XALPSBL IMPLICIT NONE REAL , DIMENSION (:,:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), & SIZE ( PZ_O_LMO , 2 ), SIZE ( PZ_O_LMO , 3 )) :: BUSINGER_PHIE_3D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIE_3D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:,:,:) < 0. ) BUSINGER_PHIE_3D (:,:,:) = ( 1. + ( - PZ_O_LMO ) ** ( 2. / 3. ) / XALPSBL ) & * ( 1. - 1 5. * PZ_O_LMO ) ** ( 0.5 ) ELSEWHERE BUSINGER_PHIE_3D (:,:,:) = 1. / ( 1. + 4.7 * PZ_O_LMO ) ** 2 END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIE_3D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIE_3D","tags":"","loc":"proc/businger_phie_3d.html"},{"title":"BUSINGER_PHIE_2D – Town Energy Balance (TEB) model API docs","text":"public function BUSINGER_PHIE_2D(PZ_O_LMO) Uses MODD_CANOPY_TURB Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) Contents Source Code BUSINGER_PHIE_2D Source Code FUNCTION BUSINGER_PHIE_2D ( PZ_O_LMO ) USE MODD_CANOPY_TURB , ONLY : XALPSBL IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), SIZE ( PZ_O_LMO , 2 )) :: BUSINGER_PHIE_2D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIE_2D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:,:) < 0. ) BUSINGER_PHIE_2D (:,:) = ( 1. + ( - PZ_O_LMO ) ** ( 2. / 3. ) / XALPSBL ) & * ( 1. - 1 5. * PZ_O_LMO ) ** ( 0.5 ) ELSEWHERE BUSINGER_PHIE_2D (:,:) = 1. / ( 1. + 4.7 * PZ_O_LMO ) ** 2 END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIE_2D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIE_2D","tags":"","loc":"proc/businger_phie_2d.html"},{"title":"BUSINGER_PHIE_1D – Town Energy Balance (TEB) model API docs","text":"public function BUSINGER_PHIE_1D(PZ_O_LMO) Uses MODD_CANOPY_TURB Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1)) Contents Source Code BUSINGER_PHIE_1D Source Code FUNCTION BUSINGER_PHIE_1D ( PZ_O_LMO ) USE MODD_CANOPY_TURB , ONLY : XALPSBL IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 )) :: BUSINGER_PHIE_1D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIE_1D' , 0 , ZHOOK_HANDLE ) WHERE ( PZ_O_LMO (:) < 0. ) BUSINGER_PHIE_1D (:) = ( 1. + ( - PZ_O_LMO ) ** ( 2. / 3. ) / XALPSBL ) & * ( 1. - 1 5. * PZ_O_LMO ) ** ( 0.5 ) ELSEWHERE BUSINGER_PHIE_1D (:) = 1. / ( 1. + 4.7 * PZ_O_LMO ) ** 2 END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIE_1D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIE_1D","tags":"","loc":"proc/businger_phie_1d.html"},{"title":"BUSINGER_PHIE_0D – Town Energy Balance (TEB) model API docs","text":"public function BUSINGER_PHIE_0D(PZ_O_LMO) Uses MODD_CANOPY_TURB Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real Contents Source Code BUSINGER_PHIE_0D Source Code FUNCTION BUSINGER_PHIE_0D ( PZ_O_LMO ) USE MODD_CANOPY_TURB , ONLY : XALPSBL IMPLICIT NONE REAL , INTENT ( IN ) :: PZ_O_LMO REAL :: BUSINGER_PHIE_0D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIE_0D' , 0 , ZHOOK_HANDLE ) IF ( PZ_O_LMO < 0. ) THEN BUSINGER_PHIE_0D = ( 1. + ( - PZ_O_LMO ) ** ( 2. / 3. ) / XALPSBL ) & * ( 1. - 1 5. * PZ_O_LMO ) ** ( 0.5 ) ELSE BUSINGER_PHIE_0D = 1. / ( 1. + 4.7 * PZ_O_LMO ) ** 2 END IF IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:BUSINGER_PHIE_0D' , 1 , ZHOOK_HANDLE ) END FUNCTION BUSINGER_PHIE_0D","tags":"","loc":"proc/businger_phie_0d.html"},{"title":"PAULSON_PSIM_3D – Town Energy Balance (TEB) model API docs","text":"public function PAULSON_PSIM_3D(PZ_O_LMO) Uses MODD_CSTS Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3)) Contents Source Code PAULSON_PSIM_3D Source Code FUNCTION PAULSON_PSIM_3D ( PZ_O_LMO ) USE MODD_CSTS IMPLICIT NONE REAL , DIMENSION (:,:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), & SIZE ( PZ_O_LMO , 2 ), SIZE ( PZ_O_LMO , 3 )) :: PAULSON_PSIM_3D ! REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), & SIZE ( PZ_O_LMO , 2 ), SIZE ( PZ_O_LMO , 3 )) :: ZX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIM_3D' , 0 , ZHOOK_HANDLE ) ZX = 1. WHERE ( PZ_O_LMO (:,:,:) < 0. ) ZX = ( 1. - 1 5. * PZ_O_LMO ) ** ( 0.25 ) PAULSON_PSIM_3D (:,:,:) = LOG ( ( 1. + ZX ** 2 ) * ( 1 + ZX ) ** 2 / 8. ) - 2. * ATAN ( ZX ) + XPI / 2. ELSEWHERE PAULSON_PSIM_3D (:,:,:) = - 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIM_3D' , 1 , ZHOOK_HANDLE ) END FUNCTION PAULSON_PSIM_3D","tags":"","loc":"proc/paulson_psim_3d.html"},{"title":"PAULSON_PSIM_2D – Town Energy Balance (TEB) model API docs","text":"public function PAULSON_PSIM_2D(PZ_O_LMO) Uses MODD_CSTS Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) Contents Source Code PAULSON_PSIM_2D Source Code FUNCTION PAULSON_PSIM_2D ( PZ_O_LMO ) USE MODD_CSTS IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), SIZE ( PZ_O_LMO , 2 )) :: PAULSON_PSIM_2D ! REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), SIZE ( PZ_O_LMO , 2 )) :: ZX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIM_2D' , 0 , ZHOOK_HANDLE ) ZX = 1. WHERE ( PZ_O_LMO (:,:) < 0. ) ZX = ( 1. - 1 5. * PZ_O_LMO ) ** ( 0.25 ) PAULSON_PSIM_2D (:,:) = LOG ( ( 1. + ZX ** 2 ) * ( 1 + ZX ) ** 2 / 8. ) - 2. * ATAN ( ZX ) + XPI / 2. ELSEWHERE PAULSON_PSIM_2D (:,:) = - 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIM_2D' , 1 , ZHOOK_HANDLE ) END FUNCTION PAULSON_PSIM_2D","tags":"","loc":"proc/paulson_psim_2d.html"},{"title":"PAULSON_PSIM_1D – Town Energy Balance (TEB) model API docs","text":"public function PAULSON_PSIM_1D(PZ_O_LMO) Uses MODD_CSTS Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1)) Contents Source Code PAULSON_PSIM_1D Source Code FUNCTION PAULSON_PSIM_1D ( PZ_O_LMO ) USE MODD_CSTS IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 )) :: PAULSON_PSIM_1D ! REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 )) :: ZX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIM_1D' , 0 , ZHOOK_HANDLE ) ZX = 1. WHERE ( PZ_O_LMO (:) < 0. ) ZX = ( 1. - 1 5. * PZ_O_LMO ) ** ( 0.25 ) PAULSON_PSIM_1D (:) = LOG ( ( 1. + ZX ** 2 ) * ( 1 + ZX ) ** 2 / 8. ) - 2. * ATAN ( ZX ) + XPI / 2. ELSEWHERE PAULSON_PSIM_1D (:) = - 4.7 * PZ_O_LMO END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIM_1D' , 1 , ZHOOK_HANDLE ) END FUNCTION PAULSON_PSIM_1D","tags":"","loc":"proc/paulson_psim_1d.html"},{"title":"PAULSON_PSIM_0D – Town Energy Balance (TEB) model API docs","text":"public function PAULSON_PSIM_0D(PZ_O_LMO) Uses MODD_CSTS Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real Contents Source Code PAULSON_PSIM_0D Source Code FUNCTION PAULSON_PSIM_0D ( PZ_O_LMO ) USE MODD_CSTS IMPLICIT NONE REAL , INTENT ( IN ) :: PZ_O_LMO REAL :: PAULSON_PSIM_0D ! REAL :: ZX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIM_0D' , 0 , ZHOOK_HANDLE ) ZX = 1. IF ( PZ_O_LMO < 0. ) THEN ZX = ( 1. - 1 5. * PZ_O_LMO ) ** ( 0.25 ) PAULSON_PSIM_0D = LOG ( ( 1. + ZX ** 2 ) * ( 1 + ZX ) ** 2 / 8. ) - 2. * ATAN ( ZX ) + XPI / 2. ELSE PAULSON_PSIM_0D = - 4.7 * PZ_O_LMO END IF IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIM_0D' , 1 , ZHOOK_HANDLE ) END FUNCTION PAULSON_PSIM_0D","tags":"","loc":"proc/paulson_psim_0d.html"},{"title":"PAULSON_PSIH_3D – Town Energy Balance (TEB) model API docs","text":"public function PAULSON_PSIH_3D(PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3)) Contents Source Code PAULSON_PSIH_3D Source Code FUNCTION PAULSON_PSIH_3D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:,:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), & SIZE ( PZ_O_LMO , 2 ), SIZE ( PZ_O_LMO , 3 )) :: PAULSON_PSIH_3D ! REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), & SIZE ( PZ_O_LMO , 2 ), SIZE ( PZ_O_LMO , 3 )) :: ZY REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIH_3D' , 0 , ZHOOK_HANDLE ) ZY = 1. WHERE ( PZ_O_LMO (:,:,:) < 0. ) ZY = ( 1. - 9. * PZ_O_LMO ) ** ( 0.5 ) PAULSON_PSIH_3D (:,:,:) = LOG ( ( 1. + ZY ) / 2. ) ELSEWHERE PAULSON_PSIH_3D (:,:,:) = - 4.7 * PZ_O_LMO / 0.74 END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIH_3D' , 1 , ZHOOK_HANDLE ) END FUNCTION PAULSON_PSIH_3D","tags":"","loc":"proc/paulson_psih_3d.html"},{"title":"PAULSON_PSIH_2D – Town Energy Balance (TEB) model API docs","text":"public function PAULSON_PSIH_2D(PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) Contents Source Code PAULSON_PSIH_2D Source Code FUNCTION PAULSON_PSIH_2D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), SIZE ( PZ_O_LMO , 2 )) :: PAULSON_PSIH_2D ! REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 ), SIZE ( PZ_O_LMO , 2 )) :: ZY REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIH_2D' , 0 , ZHOOK_HANDLE ) ZY = 1. WHERE ( PZ_O_LMO (:,:) < 0. ) ZY = ( 1. - 9. * PZ_O_LMO ) ** ( 0.5 ) PAULSON_PSIH_2D (:,:) = LOG ( ( 1. + ZY ) / 2. ) ELSEWHERE PAULSON_PSIH_2D (:,:) = - 4.7 * PZ_O_LMO / 0.74 END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIH_2D' , 1 , ZHOOK_HANDLE ) END FUNCTION PAULSON_PSIH_2D","tags":"","loc":"proc/paulson_psih_2d.html"},{"title":"PAULSON_PSIH_1D – Town Energy Balance (TEB) model API docs","text":"public function PAULSON_PSIH_1D(PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1)) Contents Source Code PAULSON_PSIH_1D Source Code FUNCTION PAULSON_PSIH_1D ( PZ_O_LMO ) IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PZ_O_LMO REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 )) :: PAULSON_PSIH_1D ! REAL , DIMENSION ( SIZE ( PZ_O_LMO , 1 )) :: ZY REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIH_1D' , 0 , ZHOOK_HANDLE ) ZY = 1. WHERE ( PZ_O_LMO (:) < 0. ) ZY = ( 1. - 9. * PZ_O_LMO ) ** ( 0.5 ) PAULSON_PSIH_1D (:) = LOG ( ( 1. + ZY ) / 2. ) ELSEWHERE PAULSON_PSIH_1D (:) = - 4.7 * PZ_O_LMO / 0.74 END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIH_1D' , 1 , ZHOOK_HANDLE ) END FUNCTION PAULSON_PSIH_1D","tags":"","loc":"proc/paulson_psih_1d.html"},{"title":"PAULSON_PSIH_0D – Town Energy Balance (TEB) model API docs","text":"public function PAULSON_PSIH_0D(PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real Contents Source Code PAULSON_PSIH_0D Source Code FUNCTION PAULSON_PSIH_0D ( PZ_O_LMO ) IMPLICIT NONE REAL , INTENT ( IN ) :: PZ_O_LMO REAL :: PAULSON_PSIH_0D ! REAL :: ZY REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIH_0D' , 0 , ZHOOK_HANDLE ) ZY = 1. IF ( PZ_O_LMO < 0. ) THEN ZY = ( 1. - 9. * PZ_O_LMO ) ** ( 0.5 ) PAULSON_PSIH_0D = LOG ( ( 1. + ZY ) / 2. ) ELSE PAULSON_PSIH_0D = - 4.7 * PZ_O_LMO / 0.74 END IF IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:PAULSON_PSIH_0D' , 1 , ZHOOK_HANDLE ) END FUNCTION PAULSON_PSIH_0D","tags":"","loc":"proc/paulson_psih_0d.html"},{"title":"LMO_2D – Town Energy Balance (TEB) model API docs","text":"public function LMO_2D(PUSTAR, PTHETA, PRV, PSFTH, PSFRV) Uses MODD_CSTS MODD_SURF_PAR Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PUSTAR real, intent(in), DIMENSION(:,:) :: PTHETA real, intent(in), DIMENSION(:,:) :: PRV real, intent(in), DIMENSION(:,:) :: PSFTH real, intent(in), DIMENSION(:,:) :: PSFRV Return Value real,\n  DIMENSION(SIZE(PUSTAR,1),SIZE(PUSTAR,2)) Contents Source Code LMO_2D Source Code FUNCTION LMO_2D ( PUSTAR , PTHETA , PRV , PSFTH , PSFRV ) USE MODD_CSTS USE MODD_SURF_PAR , ONLY : XUNDEF IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( IN ) :: PUSTAR REAL , DIMENSION (:,:), INTENT ( IN ) :: PTHETA REAL , DIMENSION (:,:), INTENT ( IN ) :: PRV REAL , DIMENSION (:,:), INTENT ( IN ) :: PSFTH REAL , DIMENSION (:,:), INTENT ( IN ) :: PSFRV REAL , DIMENSION ( SIZE ( PUSTAR , 1 ), SIZE ( PUSTAR , 2 )) :: LMO_2D ! REAL , DIMENSION ( SIZE ( PUSTAR , 1 ), SIZE ( PUSTAR , 2 )) :: ZTHETAV REAL , DIMENSION ( SIZE ( PUSTAR , 1 ), SIZE ( PUSTAR , 2 )) :: ZQ0 REAL :: ZEPS REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:LMO_2D' , 0 , ZHOOK_HANDLE ) ZEPS = ( XRV - XRD ) / XRD ZTHETAV (:,:) = PTHETA (:,:) * ( 1. + ZEPS * PRV (:,:)) ZQ0 (:,:) = PSFTH (:,:) + ZTHETAV (:,:) * ZEPS * PSFRV (:,:) ! LMO_2D (:,:) = XUNDEF WHERE ( ZQ0 (:,:) /= 0. ) & LMO_2D (:,:) = - MAX ( PUSTAR (:,:), 1.E-6 ) ** 3 & / ( XKARMAN * XG / ZTHETAV (:,:) * ZQ0 (:,:) ) ! WHERE ( ABS ( LMO_2D ) > 1000 0. ) LMO_2D = XUNDEF IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:LMO_2D' , 1 , ZHOOK_HANDLE ) END FUNCTION LMO_2D","tags":"","loc":"proc/lmo_2d.html"},{"title":"LMO_1D – Town Energy Balance (TEB) model API docs","text":"public function LMO_1D(PUSTAR, PTHETA, PRV, PSFTH, PSFRV) Uses MODD_CSTS MODD_SURF_PAR Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PUSTAR real, intent(in), DIMENSION(:) :: PTHETA real, intent(in), DIMENSION(:) :: PRV real, intent(in), DIMENSION(:) :: PSFTH real, intent(in), DIMENSION(:) :: PSFRV Return Value real,\n  DIMENSION(SIZE(PUSTAR)) Contents Source Code LMO_1D Source Code FUNCTION LMO_1D ( PUSTAR , PTHETA , PRV , PSFTH , PSFRV ) USE MODD_CSTS USE MODD_SURF_PAR , ONLY : XUNDEF IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PUSTAR REAL , DIMENSION (:), INTENT ( IN ) :: PTHETA REAL , DIMENSION (:), INTENT ( IN ) :: PRV REAL , DIMENSION (:), INTENT ( IN ) :: PSFTH REAL , DIMENSION (:), INTENT ( IN ) :: PSFRV REAL , DIMENSION ( SIZE ( PUSTAR )) :: LMO_1D ! REAL , DIMENSION ( SIZE ( PUSTAR )) :: ZTHETAV REAL :: ZEPS REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:LMO_1D' , 0 , ZHOOK_HANDLE ) ZEPS = ( XRV - XRD ) / XRD ! ZTHETAV (:) = PTHETA (:) * ( 1. + ZEPS * PRV (:)) ! LMO_1D (:) = XUNDEF WHERE ( PSFTH (:) / ZTHETAV (:) + ZEPS * PSFRV (:) /= 0. ) & LMO_1D (:) = - MAX ( PUSTAR (:), 1.E-6 ) ** 3 & / ( XKARMAN * XG & * ( PSFTH (:) / ZTHETAV (:) + ZEPS * PSFRV (:) ) ) WHERE ( ABS ( LMO_1D ) > 1000 0. ) LMO_1D = XUNDEF IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:LMO_1D' , 1 , ZHOOK_HANDLE ) END FUNCTION LMO_1D","tags":"","loc":"proc/lmo_1d.html"},{"title":"LMO_0D – Town Energy Balance (TEB) model API docs","text":"public function LMO_0D(PUSTAR, PTHETA, PRV, PSFTH, PSFRV) Uses MODD_CSTS MODD_SURF_PAR Arguments Type Intent Optional Attributes Name real, intent(in) :: PUSTAR real, intent(in) :: PTHETA real, intent(in) :: PRV real, intent(in) :: PSFTH real, intent(in) :: PSFRV Return Value real Contents Source Code LMO_0D Source Code FUNCTION LMO_0D ( PUSTAR , PTHETA , PRV , PSFTH , PSFRV ) USE MODD_CSTS USE MODD_SURF_PAR , ONLY : XUNDEF IMPLICIT NONE REAL , INTENT ( IN ) :: PUSTAR REAL , INTENT ( IN ) :: PTHETA REAL , INTENT ( IN ) :: PRV REAL , INTENT ( IN ) :: PSFTH REAL , INTENT ( IN ) :: PSFRV REAL :: LMO_0D ! REAL :: ZTHETAV REAL :: ZEPS REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:LMO_0D' , 0 , ZHOOK_HANDLE ) ZEPS = ( XRV - XRD ) / XRD ! ! ZTHETAV = PTHETA * ( 1. + ZEPS * PRV ) ! LMO_0D = XUNDEF IF ( PSFTH / ZTHETAV + ZEPS * PSFRV /= 0. ) & LMO_0D = - MAX ( PUSTAR , 1.E-6 ) ** 3 & / ( XKARMAN * ( XG / ZTHETAV * PSFTH & + XG * ZEPS * PSFRV ) ) IF ( ABS ( LMO_0D ) > 1000 0. ) LMO_0D = XUNDEF IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:LMO_0D' , 1 , ZHOOK_HANDLE ) END FUNCTION LMO_0D","tags":"","loc":"proc/lmo_0d.html"},{"title":"USTAR_2D – Town Energy Balance (TEB) model API docs","text":"public function USTAR_2D(PWIND, PZ, PZ0, PLMO) Uses MODD_CSTS MODD_SURF_PAR Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PWIND real, intent(in), DIMENSION(:,:) :: PZ real, intent(in), DIMENSION(:,:) :: PZ0 real, intent(in), DIMENSION(:,:) :: PLMO Return Value real,\n  DIMENSION(SIZE(PZ,1),SIZE(PZ,2)) Contents Source Code USTAR_2D Source Code FUNCTION USTAR_2D ( PWIND , PZ , PZ0 , PLMO ) USE MODD_CSTS USE MODD_SURF_PAR , ONLY : XUNDEF IMPLICIT NONE REAL , DIMENSION (:,:), INTENT ( IN ) :: PWIND REAL , DIMENSION (:,:), INTENT ( IN ) :: PZ REAL , DIMENSION (:,:), INTENT ( IN ) :: PZ0 REAL , DIMENSION (:,:), INTENT ( IN ) :: PLMO REAL , DIMENSION ( SIZE ( PZ , 1 ), SIZE ( PZ , 2 )) :: USTAR_2D REAL , DIMENSION ( SIZE ( PZ , 1 ), SIZE ( PZ , 2 )) :: ZZ_O_LMO REAL , DIMENSION ( SIZE ( PZ , 1 ), SIZE ( PZ , 2 )) :: ZZ0_O_LMO REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !* purely unstable case IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:USTAR_2D' , 0 , ZHOOK_HANDLE ) USTAR_2D (:,:) = 0. ZZ_O_LMO (:,:) = XUNDEF ZZ0_O_LMO (:,:) = XUNDEF ! !* general case WHERE ( ABS ( PLMO ) > 1.E-20 . AND . PLMO /= XUNDEF ) ZZ_O_LMO = PZ (:,:) / PLMO (:,:) ZZ0_O_LMO = PZ0 (:,:) / PLMO (:,:) USTAR_2D (:,:) = PWIND (:,:) & * XKARMAN / ( LOG ( PZ (:,:) / PZ0 (:,:)) & - PAULSON_PSIM ( ZZ_O_LMO (:,:)) & + PAULSON_PSIM ( ZZ0_O_LMO (:,:)) ) END WHERE ! !* purely neutral case WHERE ( PLMO == XUNDEF ) ZZ_O_LMO = 0. USTAR_2D (:,:) = PWIND (:,:) & * XKARMAN / LOG ( PZ (:,:) / PZ0 (:,:)) END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:USTAR_2D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION USTAR_2D","tags":"","loc":"proc/ustar_2d.html"},{"title":"USTAR_1D – Town Energy Balance (TEB) model API docs","text":"public function USTAR_1D(PWIND, PZ, PZ0, PLMO) Uses MODD_CSTS MODD_SURF_PAR Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWIND real, intent(in), DIMENSION(:) :: PZ real, intent(in), DIMENSION(:) :: PZ0 real, intent(in), DIMENSION(:) :: PLMO Return Value real,\n  DIMENSION(SIZE(PZ)) Contents Source Code USTAR_1D Source Code FUNCTION USTAR_1D ( PWIND , PZ , PZ0 , PLMO ) USE MODD_CSTS USE MODD_SURF_PAR , ONLY : XUNDEF IMPLICIT NONE REAL , DIMENSION (:), INTENT ( IN ) :: PWIND REAL , DIMENSION (:), INTENT ( IN ) :: PZ REAL , DIMENSION (:), INTENT ( IN ) :: PZ0 REAL , DIMENSION (:), INTENT ( IN ) :: PLMO REAL , DIMENSION ( SIZE ( PZ )) :: USTAR_1D REAL , DIMENSION ( SIZE ( PZ )) :: ZZ_O_LMO REAL , DIMENSION ( SIZE ( PZ )) :: ZZ0_O_LMO REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !* purely unstable case IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:USTAR_1D' , 0 , ZHOOK_HANDLE ) USTAR_1D (:) = 0. ZZ_O_LMO (:) = XUNDEF ZZ0_O_LMO (:) = XUNDEF ! !* general case WHERE ( ABS ( PLMO ) > 1.E-20 . AND . PLMO /= XUNDEF ) ZZ_O_LMO = PZ (:) / PLMO (:) ZZ0_O_LMO = PZ0 (:) / PLMO (:) USTAR_1D (:) = PWIND & * XKARMAN / ( LOG ( PZ (:) / PZ0 (:)) & - PAULSON_PSIM ( ZZ_O_LMO (:)) & + PAULSON_PSIM ( ZZ0_O_LMO (:)) ) END WHERE ! !* purely neutral case WHERE ( PLMO == XUNDEF ) ZZ_O_LMO = 0. USTAR_1D (:) = PWIND & * XKARMAN / LOG ( PZ (:) / PZ0 (:)) END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:USTAR_1D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION USTAR_1D","tags":"","loc":"proc/ustar_1d.html"},{"title":"USTAR_0D – Town Energy Balance (TEB) model API docs","text":"public function USTAR_0D(PWIND, PZ, PZ0, PLMO) Uses MODD_CSTS MODD_SURF_PAR Arguments Type Intent Optional Attributes Name real, intent(in) :: PWIND real, intent(in) :: PZ real, intent(in) :: PZ0 real, intent(in) :: PLMO Return Value real Contents Source Code USTAR_0D Source Code FUNCTION USTAR_0D ( PWIND , PZ , PZ0 , PLMO ) USE MODD_CSTS USE MODD_SURF_PAR , ONLY : XUNDEF IMPLICIT NONE REAL , INTENT ( IN ) :: PWIND REAL , INTENT ( IN ) :: PZ REAL , INTENT ( IN ) :: PZ0 REAL , INTENT ( IN ) :: PLMO REAL :: USTAR_0D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !* purely unstable case IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:USTAR_0D' , 0 , ZHOOK_HANDLE ) USTAR_0D = 0. ! !* general case IF ( ABS ( PLMO ) >= 1.E-20 . AND . PLMO /= XUNDEF ) & USTAR_0D = PWIND * XKARMAN / ( LOG ( PZ / PZ0 ) - PAULSON_PSIM ( PZ / PLMO ) + PAULSON_PSIM ( PZ0 / PLMO ) ) ! !* purely neutral case IF ( PLMO == XUNDEF ) & USTAR_0D = PWIND * XKARMAN / LOG ( PZ / PZ0 ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SBLS:USTAR_0D' , 1 , ZHOOK_HANDLE ) END FUNCTION USTAR_0D","tags":"","loc":"proc/ustar_0d.html"},{"title":"BUSINGER_PHIM – Town Energy Balance (TEB) model API docs","text":"public interface BUSINGER_PHIM Contents Module Procedures BUSINGER_PHIM_0D BUSINGER_PHIM_1D BUSINGER_PHIM_2D BUSINGER_PHIM_3D Module Procedures public function BUSINGER_PHIM_0D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real public function BUSINGER_PHIM_1D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO)) public function BUSINGER_PHIM_2D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) public function BUSINGER_PHIM_3D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3))","tags":"","loc":"interface/businger_phim.html"},{"title":"BUSINGER_PHIH – Town Energy Balance (TEB) model API docs","text":"public interface BUSINGER_PHIH Contents Module Procedures BUSINGER_PHIH_0D BUSINGER_PHIH_1D BUSINGER_PHIH_2D BUSINGER_PHIH_3D Module Procedures public function BUSINGER_PHIH_0D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real public function BUSINGER_PHIH_1D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO)) public function BUSINGER_PHIH_2D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) public function BUSINGER_PHIH_3D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3))","tags":"","loc":"interface/businger_phih.html"},{"title":"BUSINGER_PHIE – Town Energy Balance (TEB) model API docs","text":"public interface BUSINGER_PHIE Contents Module Procedures BUSINGER_PHIE_0D BUSINGER_PHIE_1D BUSINGER_PHIE_2D BUSINGER_PHIE_3D Module Procedures public function BUSINGER_PHIE_0D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real public function BUSINGER_PHIE_1D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1)) public function BUSINGER_PHIE_2D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) public function BUSINGER_PHIE_3D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3))","tags":"","loc":"interface/businger_phie.html"},{"title":"PAULSON_PSIM – Town Energy Balance (TEB) model API docs","text":"public interface PAULSON_PSIM Contents Module Procedures PAULSON_PSIM_0D PAULSON_PSIM_1D PAULSON_PSIM_2D PAULSON_PSIM_3D Module Procedures public function PAULSON_PSIM_0D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real public function PAULSON_PSIM_1D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1)) public function PAULSON_PSIM_2D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) public function PAULSON_PSIM_3D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3))","tags":"","loc":"interface/paulson_psim.html"},{"title":"PAULSON_PSIH – Town Energy Balance (TEB) model API docs","text":"public interface PAULSON_PSIH Contents Module Procedures PAULSON_PSIH_0D PAULSON_PSIH_1D PAULSON_PSIH_2D PAULSON_PSIH_3D Module Procedures public function PAULSON_PSIH_0D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real public function PAULSON_PSIH_1D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1)) public function PAULSON_PSIH_2D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) public function PAULSON_PSIH_3D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3))","tags":"","loc":"interface/paulson_psih.html"},{"title":"LMO – Town Energy Balance (TEB) model API docs","text":"public interface LMO Contents Module Procedures LMO_0D LMO_1D LMO_2D Module Procedures public function LMO_0D (PUSTAR, PTHETA, PRV, PSFTH, PSFRV) Arguments Type Intent Optional Attributes Name real, intent(in) :: PUSTAR real, intent(in) :: PTHETA real, intent(in) :: PRV real, intent(in) :: PSFTH real, intent(in) :: PSFRV Return Value real public function LMO_1D (PUSTAR, PTHETA, PRV, PSFTH, PSFRV) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PUSTAR real, intent(in), DIMENSION(:) :: PTHETA real, intent(in), DIMENSION(:) :: PRV real, intent(in), DIMENSION(:) :: PSFTH real, intent(in), DIMENSION(:) :: PSFRV Return Value real,\n  DIMENSION(SIZE(PUSTAR)) public function LMO_2D (PUSTAR, PTHETA, PRV, PSFTH, PSFRV) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PUSTAR real, intent(in), DIMENSION(:,:) :: PTHETA real, intent(in), DIMENSION(:,:) :: PRV real, intent(in), DIMENSION(:,:) :: PSFTH real, intent(in), DIMENSION(:,:) :: PSFRV Return Value real,\n  DIMENSION(SIZE(PUSTAR,1),SIZE(PUSTAR,2))","tags":"","loc":"interface/lmo.html"},{"title":"USTAR – Town Energy Balance (TEB) model API docs","text":"public interface USTAR Contents Module Procedures USTAR_0D USTAR_1D USTAR_2D Module Procedures public function USTAR_0D (PWIND, PZ, PZ0, PLMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PWIND real, intent(in) :: PZ real, intent(in) :: PZ0 real, intent(in) :: PLMO Return Value real public function USTAR_1D (PWIND, PZ, PZ0, PLMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWIND real, intent(in), DIMENSION(:) :: PZ real, intent(in), DIMENSION(:) :: PZ0 real, intent(in), DIMENSION(:) :: PLMO Return Value real,\n  DIMENSION(SIZE(PZ)) public function USTAR_2D (PWIND, PZ, PZ0, PLMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PWIND real, intent(in), DIMENSION(:,:) :: PZ real, intent(in), DIMENSION(:,:) :: PZ0 real, intent(in), DIMENSION(:,:) :: PLMO Return Value real,\n  DIMENSION(SIZE(PZ,1),SIZE(PZ,2))","tags":"","loc":"interface/ustar.html"},{"title":"FACADE_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"interface public subroutine FACADE_E_BUDGET(TOP, T, B, DMT, PTSTEP, PDN_RD, PRHOA, PAC_WL, PAC_BLD, PLW_RAD, PPS, PEXNS, PT_CANYON, PTS_RD, PTSN_RD, PTS_GD, PTS_FL, PLW_WA_TO_WB, PLW_R_TO_WA, PLW_R_TO_WB, PLW_G_TO_WA, PLW_G_TO_WB, PLW_S_TO_WA, PLW_S_TO_WB, PLW_NR_TO_WA, PLW_NR_TO_WB, PLW_WIN_TO_WA, PLW_WIN_TO_WB, PLW_S_TO_WIN, PLW_WA_TO_WIN, PLW_WB_TO_WIN, PLW_R_TO_WIN, PLW_G_TO_WIN, PLW_NR_TO_WIN, PFLX_BLD_WL_A, PDQS_WL_A, PFLX_BLD_WL_B, PDQS_WL_B, PEMIT_LW_FAC, PIMB_WL, PRADHT_IN, PRAD_RF_WL, PRAD_RF_WIN, PRAD_WL_FL, PRAD_WL_MA, PRAD_WIN_FL, PRAD_WIN_MA, PCONV_WL_BLD, PCONV_WIN_BLD, PAC_WIN, PLOAD_IN_WL, PLOAD_IN_WIN) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B type(DIAG_MISC_TEB_t), intent(inout) :: DMT real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PAC_WL real, intent(in), DIMENSION(:) :: PAC_BLD real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PT_CANYON real, intent(in), DIMENSION(:) :: PTS_RD real, intent(in), DIMENSION(:) :: PTSN_RD real, intent(in), DIMENSION(:) :: PTS_GD real, intent(in), DIMENSION(:) :: PTS_FL real, intent(in), DIMENSION(:) :: PLW_WA_TO_WB real, intent(in), DIMENSION(:) :: PLW_R_TO_WA real, intent(in), DIMENSION(:) :: PLW_R_TO_WB real, intent(in), DIMENSION(:) :: PLW_G_TO_WA real, intent(in), DIMENSION(:) :: PLW_G_TO_WB real, intent(in), DIMENSION(:) :: PLW_S_TO_WA real, intent(in), DIMENSION(:) :: PLW_S_TO_WB real, intent(in), DIMENSION(:) :: PLW_NR_TO_WA real, intent(in), DIMENSION(:) :: PLW_NR_TO_WB real, intent(in), DIMENSION(:) :: PLW_WIN_TO_WA real, intent(in), DIMENSION(:) :: PLW_WIN_TO_WB real, intent(in), DIMENSION(:) :: PLW_S_TO_WIN real, intent(in), DIMENSION(:) :: PLW_WA_TO_WIN real, intent(in), DIMENSION(:) :: PLW_WB_TO_WIN real, intent(in), DIMENSION(:) :: PLW_R_TO_WIN real, intent(in), DIMENSION(:) :: PLW_G_TO_WIN real, intent(in), DIMENSION(:) :: PLW_NR_TO_WIN real, intent(out), DIMENSION(:) :: PFLX_BLD_WL_A real, intent(inout), DIMENSION(:) :: PDQS_WL_A real, intent(out), DIMENSION(:) :: PFLX_BLD_WL_B real, intent(inout), DIMENSION(:) :: PDQS_WL_B real, intent(out), DIMENSION(:) :: PEMIT_LW_FAC real, intent(out), DIMENSION(:) :: PIMB_WL real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PRAD_RF_WL real, intent(in), DIMENSION(:) :: PRAD_RF_WIN real, intent(out), DIMENSION(:) :: PRAD_WL_FL real, intent(out), DIMENSION(:) :: PRAD_WL_MA real, intent(out), DIMENSION(:) :: PRAD_WIN_FL real, intent(out), DIMENSION(:) :: PRAD_WIN_MA real, intent(out), DIMENSION(:) :: PCONV_WL_BLD real, intent(out), DIMENSION(:) :: PCONV_WIN_BLD real, intent(in), DIMENSION(:) :: PAC_WIN real, intent(in), DIMENSION(:) :: PLOAD_IN_WL real, intent(in), DIMENSION(:) :: PLOAD_IN_WIN","tags":"","loc":"interface/facade_e_budget.html"},{"title":"PSAT_0D – Town Energy Balance (TEB) model API docs","text":"public function PSAT_0D(PT) result(PPSAT) Uses MODD_CSTS MODD_REPROD_OPER Arguments Type Intent Optional Attributes Name real, intent(in) :: PT Return Value real Contents Source Code PSAT_0D Source Code FUNCTION PSAT_0D ( PT ) RESULT ( PPSAT ) !     ###################################### !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS USE MODD_REPROD_OPER , ONLY : CQSAT ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , INTENT ( IN ) :: PT ! Temperature (Kelvin) REAL :: PPSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg) ! REAL :: ZALP , ZBETA , ZGAM ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:PSAT_0D' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZALP = XALPW ZBETA = XBETAW ZGAM = XGAMW ! IF ( CQSAT == 'NEW' . AND . PT <= XTT ) THEN ZALP = XALPI ZBETA = XBETAI ZGAM = XGAMI ENDIF ! PPSAT = EXP ( ZALP - ZBETA / PT - ZGAM * LOG ( PT ) ) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:PSAT_0D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION PSAT_0D","tags":"","loc":"proc/psat_0d.html"},{"title":"PSAT_1D – Town Energy Balance (TEB) model API docs","text":"public function PSAT_1D(PT) result(PPSAT) Uses MODD_CSTS MODD_REPROD_OPER Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT Return Value real,\n  DIMENSION(SIZE(PT)) Contents Source Code PSAT_1D Source Code FUNCTION PSAT_1D ( PT ) RESULT ( PPSAT ) !     ###################################### !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS USE MODD_REPROD_OPER , ONLY : CQSAT ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PT ! Temperature (Kelvin) REAL , DIMENSION ( SIZE ( PT )) :: PPSAT ! saturation vapor pressure (Pa) ! REAL , DIMENSION ( SIZE ( PT )) :: ZALP , ZBETA , ZGAM ! INTEGER :: JJ !loop index REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:PSAT_1D' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZALP (:) = XALPW ZBETA (:) = XBETAW ZGAM (:) = XGAMW ! IF ( CQSAT == 'NEW' ) THEN WHERE ( PT <= XTT ) ZALP (:) = XALPI ZBETA (:) = XBETAI ZGAM (:) = XGAMI ENDWHERE ENDIF ! !cdir nodep DO JJ = 1 , SIZE ( PT ) PPSAT ( JJ ) = EXP ( ZALP ( JJ ) - ZBETA ( JJ ) / PT ( JJ ) - ZGAM ( JJ ) * LOG ( PT ( JJ )) ) ENDDO ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:PSAT_1D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION PSAT_1D","tags":"","loc":"proc/psat_1d.html"},{"title":"PSAT_2D – Town Energy Balance (TEB) model API docs","text":"public function PSAT_2D(PT, KMASK) result(PPSAT) Uses MODD_CSTS MODD_REPROD_OPER Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PT integer, intent(in), DIMENSION(:) :: KMASK Return Value real,\n  DIMENSION(SIZE(PT,1),SIZE(PT,2)) Contents Source Code PSAT_2D Source Code FUNCTION PSAT_2D ( PT , KMASK ) RESULT ( PPSAT ) !     ###################################### !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS USE MODD_REPROD_OPER , ONLY : CQSAT ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PT ! Temperature (Kelvin) INTEGER , DIMENSION (:), INTENT ( IN ) :: KMASK ! REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: PPSAT ! saturation vapor pressure (Pa) ! REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: ZALP , ZBETA , ZGAM ! INTEGER :: JJ , JL , INI , INL , IWORK !loop index REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:PSAT_2D' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! INI = SIZE ( PT , 1 ) INL = SIZE ( PT , 2 ) ! PPSAT (:,:) = 0.0 ! ZALP (:,:) = XALPW ZBETA (:,:) = XBETAW ZGAM (:,:) = XGAMW ! IF ( CQSAT == 'NEW' ) THEN WHERE ( PT (:,:) <= XTT ) ZALP (:,:) = XALPI ZBETA (:,:) = XBETAI ZGAM (:,:) = XGAMI ENDWHERE ENDIF ! DO JL = 1 , INL DO JJ = 1 , INI IWORK = KMASK ( JJ ) IF ( JL <= IWORK ) THEN PPSAT ( JJ , JL ) = EXP ( ZALP ( JJ , JL ) - ZBETA ( JJ , JL ) / PT ( JJ , JL ) - ZGAM ( JJ , JL ) * LOG ( PT ( JJ , JL )) ) ENDIF ENDDO ENDDO ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:PSAT_2D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION PSAT_2D","tags":"","loc":"proc/psat_2d.html"},{"title":"DPSAT_1D – Town Energy Balance (TEB) model API docs","text":"public function DPSAT_1D(PT) result(PDPSAT) Uses MODD_CSTS MODD_REPROD_OPER Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT Return Value real,\n  DIMENSION(SIZE(PT)) Contents Source Code DPSAT_1D Source Code FUNCTION DPSAT_1D ( PT ) RESULT ( PDPSAT ) !     ###################################### !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS USE MODD_REPROD_OPER , ONLY : CQSAT ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PT ! Temperature (Kelvin) ! REAL , DIMENSION ( SIZE ( PT )) :: PDPSAT ! REAL , DIMENSION ( SIZE ( PT )) :: ZBETA , ZGAM ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:DPSAT_1D' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZBETA (:) = XBETAW ZGAM (:) = XGAMW ! IF ( CQSAT == 'NEW' ) THEN WHERE ( PT <= XTT ) ZBETA (:) = XBETAI ZGAM (:) = XGAMI ENDWHERE ENDIF ! PDPSAT (:) = ZBETA (:) / PT (:) ** 2 - ZGAM (:) / PT (:) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:DPSAT_1D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION DPSAT_1D","tags":"","loc":"proc/dpsat_1d.html"},{"title":"QSATW_0D – Town Energy Balance (TEB) model API docs","text":"public function QSATW_0D(PT, PP) result(PQSAT) Uses MODD_CSTS Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PP Return Value real Contents Source Code QSATW_0D Source Code FUNCTION QSATW_0D ( PT , PP ) RESULT ( PQSAT ) !     ###################################### ! !!****  *QSATW * - function to compute saturation vapor humidity from !!                 temperature !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT), the saturation vapor pressure es(T) !!    (FOES(PT)) is computed by integration of the Clapeyron equation !!    from the triple point temperature Tt (XTT) and the saturation vapor !!    pressure of the triple point es(Tt) (XESTT), i.e !! !!         es(T)= EXP( alphaw - betaw /T - gammaw Log(T) ) !! !!     with : !!       alphaw (XALPW) = LOG(es(Tt))+ betaw/Tt + gammaw Log(Tt) !!       betaw (XBETAW) = Lv(Tt)/Rv + gammaw Tt !!       gammaw (XGAMW) = (Cl -Cpv) /Rv !! !!      Then, the specific humidity at saturation is deduced. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : comtains physical constants !!        XALPW   : Constant for saturation vapor pressure function !!        XBETAW  : Constant for saturation vapor pressure function !!        XGAMW   : Constant for saturation vapor pressure function !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    21/09/98 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , INTENT ( IN ) :: PT ! Temperature (Kelvin) REAL , INTENT ( IN ) :: PP ! Pressure (Pa) REAL :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg) ! !*       0.2   Declarations of local variables ! REAL :: ZFOES ! saturation vapor ! pressure ! (Pascal) ! REAL :: ZWORK1 REAL :: ZWORK2 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATW_0D' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZFOES = PSAT ( PT ) ZWORK1 = ZFOES / PP ZWORK2 = XRD / XRV ! !*       2.    COMPUTE SATURATION HUMIDITY !              --------------------------- ! PQSAT = ZWORK2 * ZWORK1 / ( 1. + ( ZWORK2 - 1. ) * ZWORK1 ) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATW_0D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION QSATW_0D","tags":"","loc":"proc/qsatw_0d.html"},{"title":"QSATW_1D – Town Energy Balance (TEB) model API docs","text":"public function QSATW_1D(PT, PP) result(PQSAT) Uses MODD_CSTS Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP Return Value real,\n  DIMENSION(SIZE(PT)) Contents Source Code QSATW_1D Source Code FUNCTION QSATW_1D ( PT , PP ) RESULT ( PQSAT ) !     ###################################### ! !!****  *QSATW * - function to compute saturation vapor humidity from !!                 temperature !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT), the saturation vapor pressure es(T) !!    (FOES(PT)) is computed by integration of the Clapeyron equation !!    from the triple point temperature Tt (XTT) and the saturation vapor !!    pressure of the triple point es(Tt) (XESTT), i.e !! !!         es(T)= EXP( alphaw - betaw /T - gammaw Log(T) ) !! !!     with : !!       alphaw (XALPW) = LOG(es(Tt))+ betaw/Tt + gammaw Log(Tt) !!       betaw (XBETAW) = Lv(Tt)/Rv + gammaw Tt !!       gammaw (XGAMW) = (Cl -Cpv) /Rv !! !!      Then, the specific humidity at saturation is deduced. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : comtains physical constants !!        XALPW   : Constant for saturation vapor pressure function !!        XBETAW  : Constant for saturation vapor pressure function !!        XGAMW   : Constant for saturation vapor pressure function !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    21/09/98 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PT ! Temperature ! (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PP ! Pressure ! (Pa) REAL , DIMENSION ( SIZE ( PT )) :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg) ! !*       0.2   Declarations of local variables ! REAL , DIMENSION ( SIZE ( PT )) :: ZFOES ! saturation vapor ! pressure ! (Pascal) ! REAL , DIMENSION ( SIZE ( PT )) :: ZWORK1 REAL :: ZWORK2 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATW_1D' , 0 , ZHOOK_HANDLE ) ! ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZFOES (:) = PSAT ( PT (:)) ZWORK1 (:) = ZFOES (:) / PP (:) ZWORK2 = XRD / XRV ! !*       2.    COMPUTE SATURATION HUMIDITY !              --------------------------- ! PQSAT (:) = ZWORK2 * ZWORK1 (:) / ( 1. + ( ZWORK2 - 1. ) * ZWORK1 (:)) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATW_1D' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END FUNCTION QSATW_1D","tags":"","loc":"proc/qsatw_1d.html"},{"title":"QSATW_2D – Town Energy Balance (TEB) model API docs","text":"public function QSATW_2D(PT, PP, KMASK, KL) result(PQSAT) Uses MODD_CSTS MODD_SURF_PAR Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PT real, intent(in), DIMENSION(:,:) :: PP integer, intent(in), optional DIMENSION(:) :: KMASK integer, intent(in), optional :: KL Return Value real,\n  DIMENSION(SIZE(PT,1),SIZE(PT,2)) Contents Source Code QSATW_2D Source Code FUNCTION QSATW_2D ( PT , PP , KMASK , KL ) RESULT ( PQSAT ) !     ###################################### ! !!****  *QSATW * - function to compute saturation vapor humidity from !!                 temperature !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT), the saturation vapor pressure es(T) !!    (FOES(PT)) is computed by integration of the Clapeyron equation !!    from the triple point temperature Tt (XTT) and the saturation vapor !!    pressure of the triple point es(Tt) (XESTT), i.e !! !!         es(T)= EXP( alphaw - betaw /T - gammaw Log(T) ) !! !!     with : !!       alphaw (XALPW) = LOG(es(Tt))+ betaw/Tt + gammaw Log(Tt) !!       betaw (XBETAW) = Lv(Tt)/Rv + gammaw Tt !!       gammaw (XGAMW) = (Cl -Cpv) /Rv !! !!      Then, the specific humidity at saturation is deduced. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : comtains physical constants !!        XALPW   : Constant for saturation vapor pressure function !!        XBETAW  : Constant for saturation vapor pressure function !!        XGAMW   : Constant for saturation vapor pressure function !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    21/09/98 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PT ! Temperature ! (Kelvin) REAL , DIMENSION (:,:), INTENT ( IN ) :: PP ! Pressure ! (Pa) ! INTEGER , DIMENSION (:), INTENT ( IN ), OPTIONAL :: KMASK !                                                KMASK = Number of soil moisture layers (DIF option) INTEGER , INTENT ( IN ), OPTIONAL :: KL !                                                KL = Max number of soil moisture layers (DIF option) ! REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg) ! !*       0.2   Declarations of local variables ! REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: ZFOES ! INTEGER , DIMENSION ( SIZE ( PT , 1 )) :: IMASK ! INTEGER :: INL REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATW_2D' , 0 , ZHOOK_HANDLE ) ! IF ( PRESENT ( KMASK ). AND . PRESENT ( KL )) THEN IMASK (:) = KMASK (:) INL = KL ELSE IMASK (:) = SIZE ( PT , 2 ) INL = SIZE ( PT , 2 ) ENDIF ! PQSAT (:,:) = XUNDEF ZFOES (:,:) = 0.0 ! ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZFOES (:, 1 : INL ) = PSAT ( PT (:, 1 : INL ), IMASK (:)) ! !*       2.    COMPUTE SATURATION HUMIDITY !              --------------------------- ! PQSAT (:,:) = XRD / XRV * ZFOES (:,:) / PP (:,:) / ( 1. + ( XRD / XRV - 1. ) * ZFOES (:,:) / PP (:,:)) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATW_2D' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END FUNCTION QSATW_2D","tags":"","loc":"proc/qsatw_2d.html"},{"title":"QSATSEAW_1D – Town Energy Balance (TEB) model API docs","text":"public function QSATSEAW_1D(PT, PP) result(PQSAT) Uses MODD_CSTS Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP Return Value real,\n  DIMENSION(SIZE(PT)) Contents Source Code QSATSEAW_1D Source Code FUNCTION QSATSEAW_1D ( PT , PP ) RESULT ( PQSAT ) !     ###################################### ! !!****  *QSATW * - function to compute saturation vapor humidity from !!                 temperature !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature over saline seawater ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT), the saturation vapor pressure es(T) !!    (FOES(PT)) is computed by integration of the Clapeyron equation !!    from the triple point temperature Tt (XTT) and the saturation vapor !!    pressure of the triple point es(Tt) (XESTT), i.e !!    The reduction due to salinity is compute with the factor 0.98 (reduction of 2%) !! !!         es(T)= 0.98*EXP( alphaw - betaw /T - gammaw Log(T) ) !! !!     with : !!       alphaw (XALPW) = LOG(es(Tt))+ betaw/Tt + gammaw Log(Tt) !!       betaw (XBETAW) = Lv(Tt)/Rv + gammaw Tt !!       gammaw (XGAMW) = (Cl -Cpv) /Rv !! !!      Then, the specific humidity at saturation is deduced. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : comtains physical constants !!        XALPW   : Constant for saturation vapor pressure function !!        XBETAW  : Constant for saturation vapor pressure function !!        XGAMW   : Constant for saturation vapor pressure function !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH !!      Zeng, X., Zhao, M., and Dickinson, R. E., 1998 : Intercomparaison of bulk !!      aerodynamic algorithm for the computation of sea surface fluxes using !!      TOGA COARE and TAO data. Journal of Climate, vol 11, n�10, pp 2628--2644 !! !! !!    AUTHOR !!    ------ !!      C. Lebeaupin    * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    6/04/2005 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PT ! Temperature ! (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PP ! Pressure ! (Pa) REAL , DIMENSION ( SIZE ( PT )) :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg) ! !*       0.2   Declarations of local variables ! REAL , DIMENSION ( SIZE ( PT )) :: ZFOES ! saturation vapor ! pressure ! (Pascal) ! REAL , DIMENSION ( SIZE ( PT )) :: ZWORK1 REAL :: ZWORK2 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATSEAW_1D' , 0 , ZHOOK_HANDLE ) ! ZFOES (:) = PSAT ( PT (:)) ZFOES (:) = 0.98 * ZFOES (:) ! vapor pressure reduction of 2% over saline seawater could have a significant ! impact on the computation of surface latent heat flux under strong wind ! conditions (Zeng et al, 1998). ! ZWORK1 (:) = ZFOES (:) / PP (:) ZWORK2 = XRD / XRV ! !*       2.    COMPUTE SATURATION HUMIDITY !              --------------------------- ! PQSAT (:) = ZWORK2 * ZWORK1 (:) / ( 1. + ( ZWORK2 - 1. ) * ZWORK1 (:)) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATSEAW_1D' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END FUNCTION QSATSEAW_1D","tags":"","loc":"proc/qsatseaw_1d.html"},{"title":"QSATSEAW2_1D – Town Energy Balance (TEB) model API docs","text":"public function QSATSEAW2_1D(PT, PP, PSSS) result(PQSAT) Uses MODD_CSTS Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PSSS Return Value real,\n  DIMENSION(SIZE(PT)) Contents Source Code QSATSEAW2_1D Source Code FUNCTION QSATSEAW2_1D ( PT , PP , PSSS ) RESULT ( PQSAT ) !     ###################################### ! !!****  *QSATW * - function to compute saturation vapor humidity from !!                 temperature !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature over saline seawater ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT) and salinity S (PSSS), the saturation vapor !!    pressure es(T,S) (FOES(PT,PSSS)) is computed following Weiss and Price !!    (1980). !! !!      Then, the specific humidity at saturation is deduced. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : contains physical constants !! !!    REFERENCE !!    --------- !!      Weiss, R.F., and Price, B.A., 1980 : Nitrous oxide solubility in water !!      and seawater. Marine Chemistry, n�8, pp 347-359. !! !! !!    AUTHOR !!    ------ !!      S. Belamari     * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    19/03/2014 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS , ONLY : XRD , XRV ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PT ! Temperature ! (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PP ! Pressure ! (Pascal) REAL , DIMENSION (:), INTENT ( IN ) :: PSSS ! Salinity ! (g/kg) REAL , DIMENSION ( SIZE ( PT )) :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg) ! !*       0.2   Declarations of local variables ! REAL , DIMENSION ( SIZE ( PT )) :: ZFOES ! saturation vapor ! pressure ! (Pascal) ! REAL , DIMENSION ( SIZE ( PT )) :: ZWORK1 REAL :: ZWORK2 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATSEAW2_1D' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZFOES (:) = EXP ( 2 4.4543 - 6 7.4509 * ( 10 0.0 / PT (:)) - 4.8489 * LOG ( PT (:) / 10 0.0 ) & - 5.44E-04 * ( PSSS (:) / 1.00472 ) ) !see Sharqawy et al (2010) Eq32 p368 ZFOES (:) = ZFOES (:) * 101 3.25E+02 !convert from atm to Pa ! ZWORK1 (:) = ZFOES (:) / PP (:) ZWORK2 = XRD / XRV ! !*       2.    COMPUTE SATURATION SPECIFIC HUMIDITY !              ------------------------------------ ! PQSAT (:) = ZWORK2 * ZWORK1 (:) / ( 1.0 + ( ZWORK2 - 1.0 ) * ZWORK1 (:)) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATSEAW2_1D' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END FUNCTION QSATSEAW2_1D","tags":"","loc":"proc/qsatseaw2_1d.html"},{"title":"DQSATW_O_DT_1D – Town Energy Balance (TEB) model API docs","text":"public function DQSATW_O_DT_1D(PT, PP, PQSAT) result(PDQSAT) Uses MODD_CSTS Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PQSAT Return Value real,\n  DIMENSION(SIZE(PT)) Contents Source Code DQSATW_O_DT_1D Source Code FUNCTION DQSATW_O_DT_1D ( PT , PP , PQSAT ) RESULT ( PDQSAT ) !     ############################################################## ! !!****  *QSATW * - function to compute saturation vapor humidity from !!                 temperature !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT), the saturation vapor pressure es(T) !!    (FOES(PT)) is computed by integration of the Clapeyron equation !!    from the triple point temperature Tt (XTT) and the saturation vapor !!    pressure of the triple point es(Tt) (XESTT), i.e !! !!         es(T)= EXP( alphaw - betaw /T - gammaw Log(T) ) !! !!     with : !!       alphaw (XALPW) = LOG(es(Tt))+ betaw/Tt + gammaw Log(Tt) !!       betaw (XBETAW) = Lv(Tt)/Rv + gammaw Tt !!       gammaw (XGAMW) = (Cl -Cpv) /Rv !! !!      Then, the specific humidity at saturation is deduced. !! !!      Finally, dqsat / dT  (T) is computed. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : comtains physical constants !!        XALPW   : Constant for saturation vapor pressure function !!        XBETAW  : Constant for saturation vapor pressure function !!        XGAMW   : Constant for saturation vapor pressure function !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    21/09/98 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PT ! Temperature ! (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PP ! Pressure ! (Pa) REAL , DIMENSION (:), INTENT ( IN ) :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg)) REAL , DIMENSION ( SIZE ( PT )) :: PDQSAT ! derivative according ! to temperature of ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg)) ! !*       0.2   Declarations of local variables ! REAL , DIMENSION ( SIZE ( PT )) :: ZFOES ! saturation vapor ! pressure ! (Pascal) ! REAL :: ZWORK1 REAL , DIMENSION ( SIZE ( PT )) :: ZWORK2 ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:DQSATW_O_DT_1D' , 0 , ZHOOK_HANDLE ) ! ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZWORK1 = XRD / XRV ZFOES (:) = PP (:) / ( 1. + ZWORK1 * ( 1. / PQSAT (:) - 1. )) ZWORK2 (:) = DPSAT ( PT (:)) ! !*       2.    DERIVATION ACCORDING TO TEMPERATURE !              ----------------------------------- ! PDQSAT (:) = ZWORK2 (:) * PQSAT (:) / ( 1. + ( ZWORK1 - 1. ) * ZFOES (:) / PP (:) ) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:DQSATW_O_DT_1D' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END FUNCTION DQSATW_O_DT_1D","tags":"","loc":"proc/dqsatw_o_dt_1d.html"},{"title":"DQSATI_O_DT_1D – Town Energy Balance (TEB) model API docs","text":"public function DQSATI_O_DT_1D(PT, PP, PQSAT) result(PDQSAT) Uses MODD_CSTS Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PQSAT Return Value real,\n  DIMENSION(SIZE(PT)) Contents Source Code DQSATI_O_DT_1D Source Code FUNCTION DQSATI_O_DT_1D ( PT , PP , PQSAT ) RESULT ( PDQSAT ) !     ############################################################## ! !!****  *QSATW * - function to compute saturation vapor humidity from !!                 temperature (with respect to ice) !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT), the saturation vapor pressure es(T) !!    (FOES(PT)) is computed by integration of the Clapeyron equation !!    from the triple point temperature Tt (XTT) and the saturation vapor !!    pressure of the triple point es(Tt) (XESTT), i.e !! !!         es(T)= EXP( alphaw - betaw /T - gammaw Log(T) ) !! !!     with : !!       alphaw (XALPW) = LOG(es(Tt))+ betaw/Tt + gammaw Log(Tt) !!       betaw (XBETAW) = Lv(Tt)/Rv + gammaw Tt !!       gammaw (XGAMW) = (Cl -Cpv) /Rv !! !!      Then, the specific humidity at saturation is deduced. !! !!      Finally, dqsat / dT  (T) is computed. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : comtains physical constants !!        XALPW   : Constant for saturation vapor pressure function !!        XBETAW  : Constant for saturation vapor pressure function !!        XGAMW   : Constant for saturation vapor pressure function !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    21/09/98 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PT ! Temperature ! (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PP ! Pressure ! (Pa) REAL , DIMENSION (:), INTENT ( IN ) :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg)) REAL , DIMENSION ( SIZE ( PT )) :: PDQSAT ! derivative according ! to temperature of ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg)) ! !*       0.2   Declarations of local variables ! REAL , DIMENSION ( SIZE ( PT )) :: ZFOES ! saturation vapor ! pressure ! (Pascal) ! REAL :: ZWORK1 REAL , DIMENSION ( SIZE ( PT )) :: ZWORK2 ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:DQSATI_O_DT_1D' , 0 , ZHOOK_HANDLE ) ! ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZWORK1 = XRD / XRV ZFOES (:) = PP (:) / ( 1. + ZWORK1 * ( 1. / PQSAT (:) - 1. )) ZWORK2 (:) = DPSAT ( PT (:)) ! !*       2.    DERIVATION ACCORDING TO TEMPERATURE !              ----------------------------------- ! PDQSAT (:) = ZWORK2 (:) * PQSAT (:) / ( 1. + ( ZWORK1 - 1. ) * ZFOES (:) / PP (:) ) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:DQSATI_O_DT_1D' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END FUNCTION DQSATI_O_DT_1D","tags":"","loc":"proc/dqsati_o_dt_1d.html"},{"title":"QSATI_1D – Town Energy Balance (TEB) model API docs","text":"public function QSATI_1D(PT, PP) result(PQSAT) Uses MODD_CSTS Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP Return Value real,\n  DIMENSION(SIZE(PT)) Contents Source Code QSATI_1D Source Code FUNCTION QSATI_1D ( PT , PP ) RESULT ( PQSAT ) !     ###################################### ! !!****  *QSATI * - function to compute saturation vapor humidity from !!                 temperature !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT), the saturation vapor pressure es(T) !!    (FOES(PT)) is computed by integration of the Clapeyron equation !!    from the triple point temperature Tt (XTT) and the saturation vapor !!    pressure of the triple point es(Tt) (XESTT), i.e !! !!         es(T)= EXP( alphaw - betaw /T - gammaw Log(T) ) !! !!     with : !!       alphaw (XALPI) = LOG(es(Tt))+ betaw/Tt + gammaw Log(Tt) !!       betaw (XBETAI) = Lv(Tt)/Rv + gammaw Tt !!       gammaw (XGAMI) = (Cl -Cpv) /Rv !! !!      Then, the specific humidity at saturation is deduced. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : comtains physical constants !!        XALPI   : Constant for saturation vapor pressure function !!        XBETAI  : Constant for saturation vapor pressure function !!        XGAMI   : Constant for saturation vapor pressure function !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    21/09/98 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PT ! Temperature ! (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PP ! Pressure ! (Pa) REAL , DIMENSION ( SIZE ( PT )) :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg) ! !*       0.2   Declarations of local variables ! REAL , DIMENSION ( SIZE ( PT )) :: ZFOES ! saturation vapor ! pressure ! (Pascal) ! REAL , DIMENSION ( SIZE ( PT )) :: ZWORK1 REAL :: ZWORK2 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATI_1D' , 0 , ZHOOK_HANDLE ) ! ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZFOES (:) = PSAT ( PT (:)) ZWORK1 (:) = ZFOES (:) / PP (:) ZWORK2 = XRD / XRV ! !*       2.    COMPUTE SATURATION HUMIDITY !              --------------------------- ! PQSAT (:) = ZWORK2 * ZWORK1 (:) / ( 1. + ( ZWORK2 - 1. ) * ZWORK1 (:)) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATI_1D' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END FUNCTION QSATI_1D","tags":"","loc":"proc/qsati_1d.html"},{"title":"QSATI_2D – Town Energy Balance (TEB) model API docs","text":"public function QSATI_2D(PT, PP, KMASK, KL) result(PQSAT) Uses MODD_CSTS MODD_SURF_PAR Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PT real, intent(in), DIMENSION(:,:) :: PP integer, intent(in), optional DIMENSION(:) :: KMASK integer, intent(in), optional :: KL Return Value real,\n  DIMENSION(SIZE(PT,1),SIZE(PT,2)) Contents Source Code QSATI_2D Source Code FUNCTION QSATI_2D ( PT , PP , KMASK , KL ) RESULT ( PQSAT ) !     ###################################### ! !!****  *QSATI * - function to compute saturation vapor humidity from !!                 temperature !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the saturation vapor !     pressure from temperature ! ! !!**  METHOD !!    ------ !!       Given temperature T (PT), the saturation vapor pressure es(T) !!    (FOES(PT)) is computed by integration of the Clapeyron equation !!    from the triple point temperature Tt (XTT) and the saturation vapor !!    pressure of the triple point es(Tt) (XESTT), i.e !! !!         es(T)= EXP( alphaw - betaw /T - gammaw Log(T) ) !! !!     with : !!       alphaw (XALPI) = LOG(es(Tt))+ betaw/Tt + gammaw Log(Tt) !!       betaw (XBETAI) = Lv(Tt)/Rv + gammaw Tt !!       gammaw (XGAMI) = (Cl -Cpv) /Rv !! !!      Then, the specific humidity at saturation is deduced. !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !!      Module MODD_CST : comtains physical constants !!        XALPI   : Constant for saturation vapor pressure function !!        XBETAI  : Constant for saturation vapor pressure function !!        XGAMI   : Constant for saturation vapor pressure function !! !!    REFERENCE !!    --------- !!      Book2 of documentation of Meso-NH !! !! !!    AUTHOR !!    ------ !!      V. Masson       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    21/09/98 !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_CSTS ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:,:), INTENT ( IN ) :: PT ! Temperature ! (Kelvin) REAL , DIMENSION (:,:), INTENT ( IN ) :: PP ! Pressure ! (Pa) ! INTEGER , DIMENSION (:), INTENT ( IN ), OPTIONAL :: KMASK !                                                KMASK = Number of soil moisture layers (DIF option) INTEGER , INTENT ( IN ), OPTIONAL :: KL !                                                KL = Max number of soil moisture layers (DIF option) ! REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: PQSAT ! saturation vapor ! specific humidity ! with respect to ! water (kg/kg) ! !*       0.2   Declarations of local variables ! REAL , DIMENSION ( SIZE ( PT , 1 ), SIZE ( PT , 2 )) :: ZFOES ! saturation vapor pressure (Pascal) ! INTEGER , DIMENSION ( SIZE ( PT , 1 )) :: IMASK ! INTEGER :: INL REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATI_2D' , 0 , ZHOOK_HANDLE ) ! IF ( PRESENT ( KMASK )) THEN IMASK (:) = KMASK (:) INL = KL ELSE IMASK (:) = SIZE ( PT , 2 ) INL = SIZE ( PT , 2 ) ENDIF ! PQSAT (:,:) = XUNDEF ZFOES (:,:) = 0.0 ! ! !*       1.    COMPUTE SATURATION VAPOR PRESSURE !              --------------------------------- ! ZFOES (:, 1 : INL ) = PSAT ( PT (:, 1 : INL ), IMASK (:)) ! !*       2.    COMPUTE SATURATION HUMIDITY !              --------------------------- ! PQSAT (:,:) = XRD / XRV * ZFOES (:,:) / PP (:,:) / ( 1. + ( XRD / XRV - 1. ) * ZFOES (:,:) / PP (:,:)) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_THERMOS:QSATI_2D' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END FUNCTION QSATI_2D","tags":"","loc":"proc/qsati_2d.html"},{"title":"PSAT – Town Energy Balance (TEB) model API docs","text":"public interface PSAT Contents Module Procedures PSAT_0D PSAT_1D PSAT_2D Module Procedures public function PSAT_0D (PT) result(PPSAT) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT Return Value real public function PSAT_1D (PT) result(PPSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT Return Value real,\n  DIMENSION(SIZE(PT)) public function PSAT_2D (PT, KMASK) result(PPSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PT integer, intent(in), DIMENSION(:) :: KMASK Return Value real,\n  DIMENSION(SIZE(PT,1),SIZE(PT,2))","tags":"","loc":"interface/psat.html"},{"title":"DPSAT – Town Energy Balance (TEB) model API docs","text":"public interface DPSAT Contents Module Procedures DPSAT_1D Module Procedures public function DPSAT_1D (PT) result(PDPSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT Return Value real,\n  DIMENSION(SIZE(PT))","tags":"","loc":"interface/dpsat.html"},{"title":"QSAT – Town Energy Balance (TEB) model API docs","text":"public interface QSAT Contents Module Procedures QSATW_0D QSATW_1D QSATW_2D Module Procedures public function QSATW_0D (PT, PP) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PP Return Value real public function QSATW_1D (PT, PP) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP Return Value real,\n  DIMENSION(SIZE(PT)) public function QSATW_2D (PT, PP, KMASK, KL) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PT real, intent(in), DIMENSION(:,:) :: PP integer, intent(in), optional DIMENSION(:) :: KMASK integer, intent(in), optional :: KL Return Value real,\n  DIMENSION(SIZE(PT,1),SIZE(PT,2))","tags":"","loc":"interface/qsat.html"},{"title":"QSAT_SEAWATER – Town Energy Balance (TEB) model API docs","text":"public interface QSAT_SEAWATER Contents Module Procedures QSATSEAW_1D Module Procedures public function QSATSEAW_1D (PT, PP) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP Return Value real,\n  DIMENSION(SIZE(PT))","tags":"","loc":"interface/qsat_seawater.html"},{"title":"QSAT_SEAWATER2 – Town Energy Balance (TEB) model API docs","text":"public interface QSAT_SEAWATER2 Contents Module Procedures QSATSEAW2_1D Module Procedures public function QSATSEAW2_1D (PT, PP, PSSS) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PSSS Return Value real,\n  DIMENSION(SIZE(PT))","tags":"","loc":"interface/qsat_seawater2.html"},{"title":"DQSAT – Town Energy Balance (TEB) model API docs","text":"public interface DQSAT Contents Module Procedures DQSATW_O_DT_1D Module Procedures public function DQSATW_O_DT_1D (PT, PP, PQSAT) result(PDQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PQSAT Return Value real,\n  DIMENSION(SIZE(PT))","tags":"","loc":"interface/dqsat.html"},{"title":"QSATI – Town Energy Balance (TEB) model API docs","text":"public interface QSATI Contents Module Procedures QSATI_1D QSATI_2D Module Procedures public function QSATI_1D (PT, PP) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP Return Value real,\n  DIMENSION(SIZE(PT)) public function QSATI_2D (PT, PP, KMASK, KL) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PT real, intent(in), DIMENSION(:,:) :: PP integer, intent(in), optional DIMENSION(:) :: KMASK integer, intent(in), optional :: KL Return Value real,\n  DIMENSION(SIZE(PT,1),SIZE(PT,2))","tags":"","loc":"interface/qsati.html"},{"title":"DQSATI – Town Energy Balance (TEB) model API docs","text":"public interface DQSATI Contents Module Procedures DQSATI_O_DT_1D Module Procedures public function DQSATI_O_DT_1D (PT, PP, PQSAT) result(PDQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PQSAT Return Value real,\n  DIMENSION(SIZE(PT))","tags":"","loc":"interface/dqsati.html"},{"title":"DIAG_MISC_TEB_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DIAG_MISC_TEB_INIT(YDIAG_MISC_TEB) Arguments Type Intent Optional Attributes Name type( DIAG_MISC_TEB_t ), intent(inout) :: YDIAG_MISC_TEB Contents Source Code DIAG_MISC_TEB_INIT Source Code SUBROUTINE DIAG_MISC_TEB_INIT ( YDIAG_MISC_TEB ) TYPE ( DIAG_MISC_TEB_t ), INTENT ( INOUT ) :: YDIAG_MISC_TEB REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_TEB_N:DIAG_MISC_TEB_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDIAG_MISC_TEB % XZ0_TOWN ) NULLIFY ( YDIAG_MISC_TEB % XQF_BLD ) NULLIFY ( YDIAG_MISC_TEB % XFLX_BLD ) NULLIFY ( YDIAG_MISC_TEB % XQF_TOWN ) NULLIFY ( YDIAG_MISC_TEB % XDQS_TOWN ) NULLIFY ( YDIAG_MISC_TEB % XH_WALL_A ) NULLIFY ( YDIAG_MISC_TEB % XH_WALL_B ) NULLIFY ( YDIAG_MISC_TEB % XH_ROOF ) NULLIFY ( YDIAG_MISC_TEB % XH_ROAD ) NULLIFY ( YDIAG_MISC_TEB % XH_STRLROOF ) NULLIFY ( YDIAG_MISC_TEB % XH_BLT ) NULLIFY ( YDIAG_MISC_TEB % XRN_WALL_A ) NULLIFY ( YDIAG_MISC_TEB % XRN_WALL_B ) NULLIFY ( YDIAG_MISC_TEB % XRN_ROOF ) NULLIFY ( YDIAG_MISC_TEB % XRN_ROAD ) NULLIFY ( YDIAG_MISC_TEB % XRN_STRLROOF ) NULLIFY ( YDIAG_MISC_TEB % XRN_BLT ) NULLIFY ( YDIAG_MISC_TEB % XGFLUX_WALL_A ) NULLIFY ( YDIAG_MISC_TEB % XGFLUX_WALL_B ) NULLIFY ( YDIAG_MISC_TEB % XGFLUX_ROOF ) NULLIFY ( YDIAG_MISC_TEB % XGFLUX_ROAD ) NULLIFY ( YDIAG_MISC_TEB % XGFLUX_STRLROOF ) NULLIFY ( YDIAG_MISC_TEB % XGFLUX_BLT ) NULLIFY ( YDIAG_MISC_TEB % XLE_ROOF ) NULLIFY ( YDIAG_MISC_TEB % XLE_ROAD ) NULLIFY ( YDIAG_MISC_TEB % XLE_STRLROOF ) NULLIFY ( YDIAG_MISC_TEB % XLE_BLT ) NULLIFY ( YDIAG_MISC_TEB % XRUNOFF_TOWN ) NULLIFY ( YDIAG_MISC_TEB % XIRRIG_GARDEN ) NULLIFY ( YDIAG_MISC_TEB % XRUNOFF_ROAD ) NULLIFY ( YDIAG_MISC_TEB % XIRRIG_ROAD ) NULLIFY ( YDIAG_MISC_TEB % XRUNOFF_ROOF ) NULLIFY ( YDIAG_MISC_TEB % XRUNOFF_STRLROOF ) NULLIFY ( YDIAG_MISC_TEB % XIRRIG_GREENROOF ) NULLIFY ( YDIAG_MISC_TEB % XABS_LW_GREENROOF ) NULLIFY ( YDIAG_MISC_TEB % XG_GREENROOF_ROOF ) NULLIFY ( YDIAG_MISC_TEB % XABS_SW_PANEL ) NULLIFY ( YDIAG_MISC_TEB % XABS_LW_PANEL ) NULLIFY ( YDIAG_MISC_TEB % XRN_PANEL ) NULLIFY ( YDIAG_MISC_TEB % XH_PANEL ) NULLIFY ( YDIAG_MISC_TEB % XTHER_PROD_PANEL ) NULLIFY ( YDIAG_MISC_TEB % XPHOT_PROD_PANEL ) NULLIFY ( YDIAG_MISC_TEB % XPROD_PANEL ) NULLIFY ( YDIAG_MISC_TEB % XTHER_PROD_BLD ) NULLIFY ( YDIAG_MISC_TEB % XPHOT_PROD_BLD ) NULLIFY ( YDIAG_MISC_TEB % XT_BLD_COOL ) NULLIFY ( YDIAG_MISC_TEB % XH_BLD_COOL ) NULLIFY ( YDIAG_MISC_TEB % XH_BLD_HEAT ) NULLIFY ( YDIAG_MISC_TEB % XLE_BLD_COOL ) NULLIFY ( YDIAG_MISC_TEB % XLE_BLD_HEAT ) NULLIFY ( YDIAG_MISC_TEB % XHVAC_COOL ) NULLIFY ( YDIAG_MISC_TEB % XHVAC_HEAT ) NULLIFY ( YDIAG_MISC_TEB % XH_WASTE ) NULLIFY ( YDIAG_MISC_TEB % XLE_WASTE ) NULLIFY ( YDIAG_MISC_TEB % XCAP_SYS ) NULLIFY ( YDIAG_MISC_TEB % XM_SYS ) NULLIFY ( YDIAG_MISC_TEB % XCOP ) NULLIFY ( YDIAG_MISC_TEB % XQ_SYS ) NULLIFY ( YDIAG_MISC_TEB % XT_SYS ) NULLIFY ( YDIAG_MISC_TEB % XTR_SW_WIN ) NULLIFY ( YDIAG_MISC_TEB % XFAN_POWER ) NULLIFY ( YDIAG_MISC_TEB % XABS_SW_WIN ) NULLIFY ( YDIAG_MISC_TEB % XABS_LW_WIN ) NULLIFY ( YDIAG_MISC_TEB % XEMIT_LW_GRND ) NULLIFY ( YDIAG_MISC_TEB % XEMIT_LW_FAC ) NULLIFY ( YDIAG_MISC_TEB % XT_RAD_IND ) NULLIFY ( YDIAG_MISC_TEB % XREF_SW_GRND ) NULLIFY ( YDIAG_MISC_TEB % XREF_SW_FAC ) NULLIFY ( YDIAG_MISC_TEB % XHU_BLD ) NULLIFY ( YDIAG_MISC_TEB % XTCOOL_TARGET ) NULLIFY ( YDIAG_MISC_TEB % XTHEAT_TARGET ) NULLIFY ( YDIAG_MISC_TEB % XQIN ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_TEB_N:DIAG_MISC_TEB_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_MISC_TEB_INIT","tags":"","loc":"proc/diag_misc_teb_init.html"},{"title":"DIAG_MISC_TEB_NP_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DIAG_MISC_TEB_NP_INIT(YNDIAG_MISC_TEB, KPATCH) Arguments Type Intent Optional Attributes Name type( DIAG_MISC_TEB_NP_t ), intent(inout) :: YNDIAG_MISC_TEB integer, intent(in) :: KPATCH Contents Source Code DIAG_MISC_TEB_NP_INIT Source Code SUBROUTINE DIAG_MISC_TEB_NP_INIT ( YNDIAG_MISC_TEB , KPATCH ) TYPE ( DIAG_MISC_TEB_NP_t ), INTENT ( INOUT ) :: YNDIAG_MISC_TEB INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_TEB_N:DIAG_MISC_TEB_NP_INIT\" , 0 , ZHOOK_HANDLE ) IF (. NOT . ASSOCIATED ( YNDIAG_MISC_TEB % AL )) THEN ALLOCATE ( YNDIAG_MISC_TEB % AL ( KPATCH )) DO JP = 1 , KPATCH CALL DIAG_MISC_TEB_INIT ( YNDIAG_MISC_TEB % AL ( JP )) ENDDO ELSE DO JP = 1 , KPATCH CALL DIAG_MISC_TEB_INIT ( YNDIAG_MISC_TEB % AL ( JP )) ENDDO DEALLOCATE ( YNDIAG_MISC_TEB % AL ) ENDIF IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_TEB_N:DIAG_MISC_TEB_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_MISC_TEB_NP_INIT","tags":"","loc":"proc/diag_misc_teb_np_init.html"},{"title":"DIAG_OPTIONS_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DIAG_OPTIONS_INIT(DGO) Arguments Type Intent Optional Attributes Name type( DIAG_OPTIONS_t ), intent(inout) :: DGO Contents Source Code DIAG_OPTIONS_INIT Source Code SUBROUTINE DIAG_OPTIONS_INIT ( DGO ) TYPE ( DIAG_OPTIONS_t ), INTENT ( INOUT ) :: DGO REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_N:DIAG_OPTIONS_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( DGO % CSELECT ) DGO % XDIAG_TSTEP = 0. DGO % N2M = 0 DGO % LT2MMW = . FALSE . DGO % L2M_MIN_ZS = . FALSE . DGO % LSURF_BUDGET = . FALSE . DGO % LRAD_BUDGET = . FALSE . DGO % LCOEF = . FALSE . DGO % LSURF_VARS = . FALSE . DGO % LFRAC = . FALSE . DGO % LDIAG_GRID = . FALSE . DGO % LPGD = . FALSE . DGO % LPATCH_BUDGET = . FALSE . DGO % LSURF_BUDGETC = . FALSE . DGO % LRESET_BUDGETC = . FALSE . DGO % LREAD_BUDGETC = . FALSE . DGO % LPROVAR_TO_DIAG = . FALSE . DGO % LSNOWDIMNC = . FALSE . DGO % LRESETCUMUL = . FALSE . DGO % LSELECT = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_N:DIAG_OPTIONS_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_OPTIONS_INIT","tags":"","loc":"proc/diag_options_init.html"},{"title":"DIAG_NP_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DIAG_NP_INIT(ND, KPATCH) Arguments Type Intent Optional Attributes Name type( DIAG_NP_t ), intent(inout) :: ND integer, intent(in) :: KPATCH Contents Source Code DIAG_NP_INIT Source Code SUBROUTINE DIAG_NP_INIT ( ND , KPATCH ) TYPE ( DIAG_NP_t ), INTENT ( INOUT ) :: ND INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_N:DIAG_NP_INIT\" , 0 , ZHOOK_HANDLE ) IF (. NOT . ASSOCIATED ( ND % AL )) THEN ALLOCATE ( ND % AL ( KPATCH )) DO JP = 1 , KPATCH CALL DIAG_INIT ( ND % AL ( JP )) ENDDO ELSE DO JP = 1 , KPATCH CALL DIAG_INIT ( ND % AL ( JP )) ENDDO DEALLOCATE ( ND % AL ) ENDIF IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_N:DIAG_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_NP_INIT","tags":"","loc":"proc/diag_np_init.html"},{"title":"DIAG_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DIAG_INIT(D) Arguments Type Intent Optional Attributes Name type( DIAG_t ), intent(inout) :: D Contents Source Code DIAG_INIT Source Code SUBROUTINE DIAG_INIT ( D ) TYPE ( DIAG_t ), INTENT ( INOUT ) :: D REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_N:DIAG_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( D % XRI ) NULLIFY ( D % XCD ) NULLIFY ( D % XCDN ) NULLIFY ( D % XCH ) NULLIFY ( D % XCE ) NULLIFY ( D % XHU ) NULLIFY ( D % XHUG ) NULLIFY ( D % XHV ) NULLIFY ( D % XRN ) NULLIFY ( D % XH ) NULLIFY ( D % XLE ) NULLIFY ( D % XLEI ) NULLIFY ( D % XGFLUX ) NULLIFY ( D % XEVAP ) NULLIFY ( D % XSUBL ) NULLIFY ( D % XTS ) NULLIFY ( D % XTSRAD ) NULLIFY ( D % XALBT ) NULLIFY ( D % XSWE ) NULLIFY ( D % XT2M ) NULLIFY ( D % XT2M_MIN ) NULLIFY ( D % XT2M_MAX ) NULLIFY ( D % XQ2M ) NULLIFY ( D % XHU2M ) NULLIFY ( D % XQS ) NULLIFY ( D % XZON10M ) NULLIFY ( D % XMER10M ) NULLIFY ( D % XWIND10M ) NULLIFY ( D % XWIND10M_MAX ) NULLIFY ( D % XLWD ) NULLIFY ( D % XLWU ) NULLIFY ( D % XSWD ) NULLIFY ( D % XSWU ) NULLIFY ( D % XSWBD ) NULLIFY ( D % XSWBU ) NULLIFY ( D % XFMU ) NULLIFY ( D % XFMV ) NULLIFY ( D % XZ0 ) NULLIFY ( D % XZ0H ) NULLIFY ( D % XZ0EFF ) NULLIFY ( D % XT2M_MIN_ZS ) NULLIFY ( D % XQ2M_MIN_ZS ) NULLIFY ( D % XHU2M_MIN_ZS ) NULLIFY ( D % XPS ) NULLIFY ( D % XRHOA ) NULLIFY ( D % XSSO_FMU ) NULLIFY ( D % XSSO_FMV ) NULLIFY ( D % XUREF ) NULLIFY ( D % XZREF ) NULLIFY ( D % XTRAD ) NULLIFY ( D % XEMIS ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_N:DIAG_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_INIT","tags":"","loc":"proc/diag_init.html"},{"title":"INI_CTURBS – Town Energy Balance (TEB) model API docs","text":"interface public subroutine INI_CTURBS() Arguments None","tags":"","loc":"interface/ini_cturbs.html"},{"title":"TEB_IRRIG_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine TEB_IRRIG_INIT(YTEB_IRRIG) Arguments Type Intent Optional Attributes Name type( TEB_IRRIG_t ), intent(inout) :: YTEB_IRRIG Contents Source Code TEB_IRRIG_INIT Source Code SUBROUTINE TEB_IRRIG_INIT ( YTEB_IRRIG ) TYPE ( TEB_IRRIG_t ), INTENT ( INOUT ) :: YTEB_IRRIG REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_IRRIG_N:TEB_IRRIG_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YTEB_IRRIG % XGD_START_MONTH ) NULLIFY ( YTEB_IRRIG % XGD_END_MONTH ) NULLIFY ( YTEB_IRRIG % XGD_START_HOUR ) NULLIFY ( YTEB_IRRIG % XGD_END_HOUR ) NULLIFY ( YTEB_IRRIG % XGD_24H_IRRIG ) NULLIFY ( YTEB_IRRIG % XGR_START_MONTH ) NULLIFY ( YTEB_IRRIG % XGR_END_MONTH ) NULLIFY ( YTEB_IRRIG % XGR_START_HOUR ) NULLIFY ( YTEB_IRRIG % XGR_END_HOUR ) NULLIFY ( YTEB_IRRIG % XGR_24H_IRRIG ) NULLIFY ( YTEB_IRRIG % XRD_START_MONTH ) NULLIFY ( YTEB_IRRIG % XRD_END_MONTH ) NULLIFY ( YTEB_IRRIG % XRD_START_HOUR ) NULLIFY ( YTEB_IRRIG % XRD_END_HOUR ) NULLIFY ( YTEB_IRRIG % XRD_24H_IRRIG ) YTEB_IRRIG % LTEB_IRRIG = . FALSE . YTEB_IRRIG % LPAR_GD_IRRIG = . FALSE . YTEB_IRRIG % LPAR_GR_IRRIG = . FALSE . YTEB_IRRIG % LPAR_RD_IRRIG = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_IRRIG_N:TEB_IRRIG_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE TEB_IRRIG_INIT","tags":"","loc":"proc/teb_irrig_init.html"},{"title":"FLAKE_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine FLAKE_INIT(YFLAKE) Arguments Type Intent Optional Attributes Name type( FLAKE_t ), intent(inout) :: YFLAKE Contents Source Code FLAKE_INIT Source Code SUBROUTINE FLAKE_INIT ( YFLAKE ) TYPE ( FLAKE_t ), INTENT ( INOUT ) :: YFLAKE REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_FLAKE_N:FLAKE_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YFLAKE % XZS ) NULLIFY ( YFLAKE % XZ0 ) NULLIFY ( YFLAKE % XUSTAR ) NULLIFY ( YFLAKE % XCOVER ) NULLIFY ( YFLAKE % LCOVER ) NULLIFY ( YFLAKE % XEMIS ) NULLIFY ( YFLAKE % XWATER_DEPTH ) NULLIFY ( YFLAKE % XWATER_FETCH ) NULLIFY ( YFLAKE % XT_BS ) NULLIFY ( YFLAKE % XDEPTH_BS ) NULLIFY ( YFLAKE % XCORIO ) NULLIFY ( YFLAKE % XDIR_ALB ) NULLIFY ( YFLAKE % XSCA_ALB ) NULLIFY ( YFLAKE % XICE_ALB ) NULLIFY ( YFLAKE % XSNOW_ALB ) NULLIFY ( YFLAKE % XEXTCOEF_WATER ) NULLIFY ( YFLAKE % XEXTCOEF_ICE ) NULLIFY ( YFLAKE % XEXTCOEF_SNOW ) NULLIFY ( YFLAKE % XT_SNOW ) NULLIFY ( YFLAKE % XT_ICE ) NULLIFY ( YFLAKE % XT_MNW ) NULLIFY ( YFLAKE % XT_WML ) NULLIFY ( YFLAKE % XT_BOT ) NULLIFY ( YFLAKE % XT_B1 ) NULLIFY ( YFLAKE % XCT ) NULLIFY ( YFLAKE % XH_SNOW ) NULLIFY ( YFLAKE % XH_ICE ) NULLIFY ( YFLAKE % XH_ML ) NULLIFY ( YFLAKE % XH_B1 ) NULLIFY ( YFLAKE % XTS ) NULLIFY ( YFLAKE % XCPL_FLAKE_EVAP ) NULLIFY ( YFLAKE % XCPL_FLAKE_RAIN ) NULLIFY ( YFLAKE % XCPL_FLAKE_SNOW ) YFLAKE % LSBL = . FALSE . YFLAKE % XTSTEP = 0. YFLAKE % XOUT_TSTEP = 0. YFLAKE % LSEDIMENTS = . FALSE . YFLAKE % LSKINTEMP = . FALSE . YFLAKE % CSNOW_FLK = '   ' YFLAKE % CFLK_ALB = '    ' YFLAKE % CFLK_FLUX = '     ' IF ( LHOOK ) CALL DR_HOOK ( \"MODD_FLAKE_N:FLAKE_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE FLAKE_INIT","tags":"","loc":"proc/flake_init.html"},{"title":"EMIS_GR_FIELD_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine EMIS_GR_FIELD_INIT(YEMIS_GR_FIELD) Arguments Type Intent Optional Attributes Name type( EMIS_GR_FIELD_t ), intent(inout) :: YEMIS_GR_FIELD Contents Source Code EMIS_GR_FIELD_INIT Source Code SUBROUTINE EMIS_GR_FIELD_INIT ( YEMIS_GR_FIELD ) TYPE ( EMIS_GR_FIELD_t ), INTENT ( INOUT ) :: YEMIS_GR_FIELD REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_EMIS_GR_FIELD_N:EMIS_GR_FIELD_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YEMIS_GR_FIELD % CEMIS_GR_AREA ) NULLIFY ( YEMIS_GR_FIELD % CEMIS_GR_NAME ) NULLIFY ( YEMIS_GR_FIELD % NEMIS_GR_TIME ) NULLIFY ( YEMIS_GR_FIELD % XEMIS_GR_FIELDS ) YEMIS_GR_FIELD % NEMIS_GR_NBR = 0 YEMIS_GR_FIELD % NEMISPEC_NBR = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_EMIS_GR_FIELD_N:EMIS_GR_FIELD_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE EMIS_GR_FIELD_INIT","tags":"","loc":"proc/emis_gr_field_init.html"},{"title":"SURFACE_CD – Town Energy Balance (TEB) model API docs","text":"interface public subroutine SURFACE_CD(PRI, PZREF, PUREF, PZ0EFF, PZ0H, PCD, PCDN) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PRI real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PZ0EFF real, intent(in), DIMENSION(:) :: PZ0H real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN","tags":"","loc":"interface/surface_cd.html"},{"title":"SSO_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine SSO_INIT(YSSO) Arguments Type Intent Optional Attributes Name type( SSO_t ), intent(inout) :: YSSO Contents Source Code SSO_INIT Source Code SUBROUTINE SSO_INIT ( YSSO ) TYPE ( SSO_t ), INTENT ( INOUT ) :: YSSO REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SSO_N:SSO_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YSSO % XZ0EFFJPDIR ) NULLIFY ( YSSO % XSSO_SLOPE ) NULLIFY ( YSSO % XSSO_ANIS ) NULLIFY ( YSSO % XSSO_DIR ) NULLIFY ( YSSO % XSSO_STDEV ) NULLIFY ( YSSO % XAVG_ZS ) NULLIFY ( YSSO % XSIL_ZS ) NULLIFY ( YSSO % XMAX_ZS ) NULLIFY ( YSSO % XMIN_ZS ) NULLIFY ( YSSO % XAOSIP ) NULLIFY ( YSSO % XAOSIM ) NULLIFY ( YSSO % XAOSJP ) NULLIFY ( YSSO % XAOSJM ) NULLIFY ( YSSO % XHO2IP ) NULLIFY ( YSSO % XHO2IM ) NULLIFY ( YSSO % XHO2JP ) NULLIFY ( YSSO % XHO2JM ) NULLIFY ( YSSO % XZ0REL ) NULLIFY ( YSSO % XZ0EFFIP ) NULLIFY ( YSSO % XZ0EFFIM ) NULLIFY ( YSSO % XZ0EFFJP ) NULLIFY ( YSSO % XZ0EFFJM ) YSSO % CROUGH = ' ' YSSO % XFRACZ0 = 2. YSSO % XCOEFBE = 2. IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SSO_N:SSO_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE SSO_INIT","tags":"","loc":"proc/sso_init.html"},{"title":"SSO_NP_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine SSO_NP_INIT(YSSO_NP, KPATCH) Arguments Type Intent Optional Attributes Name type( SSO_NP_t ), intent(inout) :: YSSO_NP integer, intent(in) :: KPATCH Contents Source Code SSO_NP_INIT Source Code SUBROUTINE SSO_NP_INIT ( YSSO_NP , KPATCH ) TYPE ( SSO_NP_t ), INTENT ( INOUT ) :: YSSO_NP INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SSO_N:SSO_NP_INIT\" , 0 , ZHOOK_HANDLE ) ! IF ( ASSOCIATED ( YSSO_NP % AL )) THEN DO JP = 1 , KPATCH CALL SSO_INIT ( YSSO_NP % AL ( JP )) ENDDO DEALLOCATE ( YSSO_NP % AL ) ELSE ALLOCATE ( YSSO_NP % AL ( KPATCH )) DO JP = 1 , KPATCH CALL SSO_INIT ( YSSO_NP % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SSO_N:SSO_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE SSO_NP_INIT","tags":"","loc":"proc/sso_np_init.html"},{"title":"WINDOW_SHADING_AVAILABILITY – Town Energy Balance (TEB) model API docs","text":"interface public subroutine WINDOW_SHADING_AVAILABILITY(OSHADE, PTI_BLD, PTCOOL_TARGET, OSHADE_POSSIBLE) Arguments Type Intent Optional Attributes Name logical, intent(in), DIMENSION(:) :: OSHADE real, intent(in), DIMENSION(:) :: PTI_BLD real, intent(in), DIMENSION(:) :: PTCOOL_TARGET logical, intent(out), DIMENSION(:) :: OSHADE_POSSIBLE","tags":"","loc":"interface/window_shading_availability.html"},{"title":"TYPE_SNOW_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine TYPE_SNOW_INIT(YSURF_SNOW) Arguments Type Intent Optional Attributes Name type( SURF_SNOW ), intent(inout) :: YSURF_SNOW Contents Source Code TYPE_SNOW_INIT Source Code SUBROUTINE TYPE_SNOW_INIT ( YSURF_SNOW ) ! TYPE ( SURF_SNOW ), INTENT ( INOUT ) :: YSURF_SNOW ! YSURF_SNOW % DEPTH => NULL () YSURF_SNOW % WSNOW => NULL () YSURF_SNOW % HEAT => NULL () YSURF_SNOW % T => NULL () YSURF_SNOW % TEMP => NULL () YSURF_SNOW % RHO => NULL () YSURF_SNOW % ALB => NULL () YSURF_SNOW % ALBVIS => NULL () YSURF_SNOW % ALBNIR => NULL () YSURF_SNOW % ALBFIR => NULL () YSURF_SNOW % EMIS => NULL () YSURF_SNOW % TS => NULL () YSURF_SNOW % GRAN1 => NULL () YSURF_SNOW % GRAN2 => NULL () YSURF_SNOW % HIST => NULL () YSURF_SNOW % AGE => NULL () ! END SUBROUTINE TYPE_SNOW_INIT","tags":"","loc":"proc/type_snow_init.html"},{"title":"ISBA_ALBEDO – Town Energy Balance (TEB) model API docs","text":"interface public subroutine ISBA_ALBEDO(PEK, OTR_ML, OMEB, PDIR_SW, PSCA_SW, PSW_BANDS, KSW, PFALB, PFFV, PFFG, PGLOBAL_SW, PMEB_SCA_SW, PALBNIR_TVEG, PALBVIS_TVEG, PALBNIR_TSOIL, PALBVIS_TSOIL) Arguments Type Intent Optional Attributes Name type(ISBA_PE_t), intent(inout) :: PEK logical, intent(in) :: OTR_ML logical, intent(in) :: OMEB real, intent(in), DIMENSION(:,:) :: PDIR_SW real, intent(in), DIMENSION(:,:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PSW_BANDS integer, intent(in) :: KSW real, intent(in), DIMENSION(:) :: PFALB real, intent(in), DIMENSION(:) :: PFFV real, intent(in), DIMENSION(:) :: PFFG real, intent(out), DIMENSION(:) :: PGLOBAL_SW real, intent(out), DIMENSION(:) :: PMEB_SCA_SW real, intent(out), DIMENSION(:) :: PALBNIR_TVEG real, intent(out), DIMENSION(:) :: PALBVIS_TVEG real, intent(out), DIMENSION(:) :: PALBNIR_TSOIL real, intent(out), DIMENSION(:) :: PALBVIS_TSOIL","tags":"","loc":"interface/isba_albedo.html"},{"title":"ADD_FORECAST_TO_DATE_SURF – Town Energy Balance (TEB) model API docs","text":"interface public subroutine ADD_FORECAST_TO_DATE_SURF(KYEAR, KMONTH, KDAY, PSEC) Arguments Type Intent Optional Attributes Name integer, intent(inout) :: KYEAR integer, intent(inout) :: KMONTH integer, intent(inout) :: KDAY real, intent(inout) :: PSEC","tags":"","loc":"interface/add_forecast_to_date_surf.html"},{"title":"PE_FROM_PQ_0D – Town Energy Balance (TEB) model API docs","text":"public function PE_FROM_PQ_0D(PP, PQ) result(PE) Arguments Type Intent Optional Attributes Name real, intent(in) :: PP real, intent(in) :: PQ Return Value real Contents Source Code PE_FROM_PQ_0D Source Code function PE_FROM_PQ_0D ( PP , PQ ) RESULT ( PE ) !arguments and result REAL , INTENT ( IN ) :: PP !atmos. pressure (Pa) REAL , INTENT ( IN ) :: PQ !specific humidity (kg/kg) REAL :: PE !water vapour pressure (Pa) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:PE_FROM_PQ_0D' , 0 , ZHOOK_HANDLE ) PE = PQ * PP / ( 0.622 + 0.378 * PQ ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:PE_FROM_PQ_0D' , 1 , ZHOOK_HANDLE ) end function PE_FROM_PQ_0D","tags":"","loc":"proc/pe_from_pq_0d.html"},{"title":"PE_FROM_PQ_1D – Town Energy Balance (TEB) model API docs","text":"public function PE_FROM_PQ_1D(PP, PQ) result(PE) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PQ Return Value real,\n  DIMENSION(SIZE(PQ)) Contents Source Code PE_FROM_PQ_1D Source Code function PE_FROM_PQ_1D ( PP , PQ ) RESULT ( PE ) !arguments and result REAL , DIMENSION (:), INTENT ( IN ) :: PP !atmos. pressure (Pa) REAL , DIMENSION (:), INTENT ( IN ) :: PQ !specific humidity (kg/kg) REAL , DIMENSION ( SIZE ( PQ )) :: PE !water vapour pressure (Pa) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:PE_FROM_PQ_1D' , 0 , ZHOOK_HANDLE ) PE (:) = PQ (:) * PP (:) / ( 0.622 + 0.378 * PQ (:)) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:PE_FROM_PQ_1D' , 1 , ZHOOK_HANDLE ) end function PE_FROM_PQ_1D","tags":"","loc":"proc/pe_from_pq_1d.html"},{"title":"TD_FROM_TQ_0D – Town Energy Balance (TEB) model API docs","text":"public function TD_FROM_TQ_0D(PT, PQ, PP) result(PTD) Uses MODD_CSTS MODD_SURF_PAR Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PQ real, intent(in) :: PP Return Value real Contents Source Code TD_FROM_TQ_0D Source Code function TD_FROM_TQ_0D ( PT , PQ , PP ) RESULT ( PTD ) !!    MODIFICATIONS !!    ------------- !!       D.Meyer and R. Schoetter 2018: see a9c4c46889dca998ea9ca40e5e0edc62ecc75715 USE MODD_CSTS USE MODD_SURF_PAR , ONLY : XUNDEF !arguments and result REAL , INTENT ( IN ) :: PT ! Air Temp. (K) REAL , INTENT ( IN ) :: PQ ! Specific humidity (kg/kg) REAL , INTENT ( IN ) :: PP ! Atmospheric pressure (Pa) REAL :: PTD !Dew Point Air Temp. (K) !local variables REAL :: ALPHA REAL :: ZPE !water vapour pressure REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:TD_FROM_TQ_0D' , 0 , ZHOOK_HANDLE ) ZPE = PE_FROM_PQ ( PP , PQ ) ALPHA = LOG ( ZPE / 100 0. ) IF ( ( PT . GE . XTT ). AND .( PT . LE .( 9 3. + XTT )) ) THEN PTD = XTT + 6.54 + 1 4.526 * ALPHA + 0.7389 * ALPHA * ALPHA + 0.09486 * ALPHA ** 3 & + 0.4569 * ( ZPE / 100 0. ) ** 0.1984 ELSE IF ( PT . LT . XTT ) THEN PTD = XTT + 6.09 + 1 2.608 * ALPHA + 0.4959 * ALPHA * ALPHA ELSE PTD = XUNDEF ENDIF PTD = MIN ( PTD , PT ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:TD_FROM_TQ_0D' , 1 , ZHOOK_HANDLE ) end function TD_FROM_TQ_0D","tags":"","loc":"proc/td_from_tq_0d.html"},{"title":"TD_FROM_TQ_1D – Town Energy Balance (TEB) model API docs","text":"public function TD_FROM_TQ_1D(PT, PQ, PP) result(PTD) Uses MODD_CSTS MODD_SURF_PAR Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PQ real, intent(in), DIMENSION(:) :: PP Return Value real,\n  DIMENSION(SIZE(PQ)) Contents Source Code TD_FROM_TQ_1D Source Code function TD_FROM_TQ_1D ( PT , PQ , PP ) RESULT ( PTD ) !!    MODIFICATIONS !!    ------------- !!       D.Meyer and R. Schoetter 2018: see a9c4c46889dca998ea9ca40e5e0edc62ecc75715 USE MODD_CSTS USE MODD_SURF_PAR , ONLY : XUNDEF !arguments and result REAL , DIMENSION (:), INTENT ( IN ) :: PT !Air Temp. (K) REAL , DIMENSION (:), INTENT ( IN ) :: PQ !Specific humidity (kg/kg) REAL , DIMENSION (:), INTENT ( IN ) :: PP ! Atmospheric pressure (Pa) REAL , DIMENSION ( SIZE ( PQ )) :: PTD !Dew Point Air Temp. (K) !local variables REAL , DIMENSION ( SIZE ( PQ )) :: ALPHA REAL , DIMENSION ( SIZE ( PQ )) :: ZPE !water vapour pressure REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:TD_FROM_TQ_1D' , 0 , ZHOOK_HANDLE ) ZPE (:) = PE_FROM_PQ ( PP (:), PQ (:)) ALPHA (:) = LOG ( ZPE (:) / 100 0. ) WHERE ( ( PT (:). GE . XTT ) . AND . ( PT (:). LE .( 9 3. + XTT )) ) PTD = XTT + 6.54 + 1 4.526 * ALPHA + 0.7389 * ALPHA * ALPHA + 0.09486 * ALPHA ** 3 & + 0.4569 * ( ZPE / 100 0. ) ** 0.1984 ELSEWHERE ( PT . LT . XTT ) PTD = XTT + 6.09 + 1 2.608 * ALPHA + 0.4959 * ALPHA * ALPHA ELSEWHERE PTD = XUNDEF END WHERE WHERE ( PTD (:). GT . PT (:)) PTD (:) = PT (:) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:TD_FROM_TQ_1D' , 1 , ZHOOK_HANDLE ) end function TD_FROM_TQ_1D","tags":"","loc":"proc/td_from_tq_1d.html"},{"title":"RV_FROM_TPTWB_0D – Town Energy Balance (TEB) model API docs","text":"public function RV_FROM_TPTWB_0D(PT, PP, PTWB) result(PRV) Uses MODD_CSTS MODE_THERMOS Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PP real, intent(in) :: PTWB Return Value real Contents Source Code RV_FROM_TPTWB_0D Source Code function RV_FROM_TPTWB_0D ( PT , PP , PTWB ) RESULT ( PRV ) !!    MODIFICATIONS !!    ------------- !!       D.Meyer and R. Schoetter 2018: see a9c4c46889dca998ea9ca40e5e0edc62ecc75715 USE MODE_THERMOS USE MODD_CSTS !arguments and result REAL , INTENT ( IN ) :: PT !Air temperature (K) REAL , INTENT ( IN ) :: PP !Atmos. Pressure (Pa) REAL , INTENT ( IN ) :: PTWB !Wet Bulb Temp. (K) REAL :: PRV !water vapor mixing ratio (kg/kg) REAL :: ZRVSAT !saturation water vapor mixing ratio REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:RV_FROM_TPTWB_0D' , 0 , ZHOOK_HANDLE ) ZRVSAT = QSAT ( PT , PP ) / ( 1. - QSAT ( PT , PP )) PRV = (( 250 1. - 2.326 * ( PTWB - XTT )) * ZRVSAT - 1.006 * ( PT - PTWB )) & / ( 250 1. + 1.86 * ( PT - XTT ) - 4.186 * ( PTWB - XTT )) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:RV_FROM_TPTWB_0D' , 1 , ZHOOK_HANDLE ) end function RV_FROM_TPTWB_0D","tags":"","loc":"proc/rv_from_tptwb_0d.html"},{"title":"RV_FROM_TPTWB_1D – Town Energy Balance (TEB) model API docs","text":"public function RV_FROM_TPTWB_1D(PT, PP, PTWB) result(PRV) Uses MODD_CSTS MODE_THERMOS Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PTWB Return Value real,\n  DIMENSION(SIZE(PT)) Contents Source Code RV_FROM_TPTWB_1D Source Code function RV_FROM_TPTWB_1D ( PT , PP , PTWB ) RESULT ( PRV ) USE MODE_THERMOS USE MODD_CSTS !arguments and result REAL , DIMENSION (:), INTENT ( IN ) :: PT !Air temperature (K) REAL , DIMENSION (:), INTENT ( IN ) :: PP !Atmos. Pressure (Pa) REAL , DIMENSION (:), INTENT ( IN ) :: PTWB !Wet Bulb Temp. (K) REAL , DIMENSION ( SIZE ( PT )) :: PRV !water vapor mixing ratio (kg/kg) REAL , DIMENSION ( SIZE ( PT )) :: ZRVSAT !saturation water vapor mixing ratio REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:RV_FROM_TPTWB_1D' , 0 , ZHOOK_HANDLE ) ZRVSAT = QSAT ( PT (:), PP (:)) / ( 1 - QSAT ( PT (:), PP (:))) PRV (:) = (( 250 1. - 2.326 * ( PTWB (:) - XTT )) * ZRVSAT (:) - 1.006 * ( PT (:) - PTWB (:))) & / ( 250 1. + 1.86 * ( PT (:) - XTT ) - 4.186 * ( PTWB (:) - XTT )) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:RV_FROM_TPTWB_1D' , 1 , ZHOOK_HANDLE ) end function RV_FROM_TPTWB_1D","tags":"","loc":"proc/rv_from_tptwb_1d.html"},{"title":"TWB_FROM_TPQ_0D – Town Energy Balance (TEB) model API docs","text":"public function TWB_FROM_TPQ_0D(PT, PP, PQ) result(PTWB) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PP real, intent(in) :: PQ Return Value real Contents Source Code TWB_FROM_TPQ_0D Source Code function TWB_FROM_TPQ_0D ( PT , PP , PQ ) RESULT ( PTWB ) !!    MODIFICATIONS !!    ------------- !!       D.Meyer and R. Schoetter 2018: see a9c4c46889dca998ea9ca40e5e0edc62ecc75715 !arguments and results REAL , INTENT ( IN ) :: PT !air temperature (K) REAL , INTENT ( IN ) :: PQ !mixing ratio (kg/kg) REAL , INTENT ( IN ) :: PP !atmos. pressure (Pa) REAL :: PTWB !Wet Bulb Temp. (K) !local variable REAL :: ZTD !Dew Point Temp. (K) REAL :: ZTWBINF , ZTWBSUP , ZRV INTEGER :: JITER REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:TWB_FROM_TPQ_0D' , 0 , ZHOOK_HANDLE ) JITER = 1 ZTD = TD_FROM_TQ ( PT , PQ , PP ) !initial guess ZTWBSUP = PT ZTWBINF = ZTD PTWB = 0.5 * ( ZTWBSUP + ZTWBINF ) DO WHILE ( ( ABS ( ZTWBSUP - ZTWBINF ). GT . 0.01 ) . AND . ( JITER . LE . 50 ) ) ZRV = RV_FROM_TPTWB ( PT , PP , PTWB ) IF ( ZRV . GT . PQ / ( 1 - PQ )) THEN ZTWBSUP = PTWB ELSE ZTWBINF = PTWB ENDIF PTWB = 0.5 * ( ZTWBINF + ZTWBSUP ) JITER = JITER + 1 END DO IF ( JITER . GE . 49 ) STOP ( \"Maximum number of iterations exceeded in twb_from_tpq_0d\" ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:TWB_FROM_TPQ_0D' , 1 , ZHOOK_HANDLE ) end function TWB_FROM_TPQ_0D","tags":"","loc":"proc/twb_from_tpq_0d.html"},{"title":"TWB_FROM_TPQ_1D – Town Energy Balance (TEB) model API docs","text":"public function TWB_FROM_TPQ_1D(PT, PP, PQ) result(PTWB) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PQ Return Value real,\n  DIMENSION(SIZE(PT)) Contents Source Code TWB_FROM_TPQ_1D Source Code function TWB_FROM_TPQ_1D ( PT , PP , PQ ) RESULT ( PTWB ) !!    MODIFICATIONS !!    ------------- !!       D.Meyer and R. Schoetter 2018: see a9c4c46889dca998ea9ca40e5e0edc62ecc75715 !arguments and results REAL , DIMENSION (:), INTENT ( IN ) :: PT !air temperature (K) REAL , DIMENSION (:), INTENT ( IN ) :: PQ !humidity content (kg/kg) REAL , DIMENSION (:), INTENT ( IN ) :: PP !atmos. pressure (Pa) REAL , DIMENSION ( SIZE ( PT )) :: PTWB !Wet Bulb Temp. (K) !local variable REAL , DIMENSION ( SIZE ( PT )) :: ZTD !Dew Point Temp. (K) REAL , DIMENSION ( SIZE ( PT )) :: ZTWBINF , ZTWBSUP , ZRV INTEGER :: JITER , JI REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:TWB_FROM_TPQ_1D' , 0 , ZHOOK_HANDLE ) ZTD = TD_FROM_TQ ( PT , PQ , PP ) !initial guess ZTWBSUP = PT ZTWBINF = ZTD PTWB = 0.5 * ( ZTWBSUP + ZTWBINF ) DO JI = 1 , SIZE ( PT ) JITER = 1 DO WHILE ( ( ABS ( ZTWBSUP ( JI ) - ZTWBINF ( JI )) . GT . 0.01 ) . AND . ( JITER . LE . 50 )) ZRV ( JI ) = RV_FROM_TPTWB ( PT ( JI ), PP ( JI ), PTWB ( JI )) IF ( ZRV ( JI ) . GT . PQ ( JI ) / ( 1 - PQ ( JI ))) THEN ZTWBSUP ( JI ) = PTWB ( JI ) ELSE ZTWBINF ( JI ) = PTWB ( JI ) ENDIF PTWB ( JI ) = 0.5 * ( ZTWBINF ( JI ) + ZTWBSUP ( JI )) END DO IF ( JITER . GE . 49 ) STOP ( \"Maximum number of iterations exceeded in twb_from_tpq_1d\" ) END DO IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:TWB_FROM_TPQ_1D' , 1 , ZHOOK_HANDLE ) end function TWB_FROM_TPQ_1D","tags":"","loc":"proc/twb_from_tpq_1d.html"},{"title":"ENTH_FN_T_Q – Town Energy Balance (TEB) model API docs","text":"public function ENTH_FN_T_Q(PT, PQ) result(PENTH) Uses MODD_CSTS Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PQ Return Value real Contents Source Code ENTH_FN_T_Q Source Code FUNCTION ENTH_FN_T_Q ( PT , PQ ) RESULT ( PENTH ) !     ###################################### ! !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the enthalpy function !       of temperature and humidity content ! ! !!**  METHOD !!    ------ !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !! !!    AUTHOR !!    ------ !! !! !!    MODIFICATIONS !!    ------------- !!      Original    12/04/11 !!      A. Alias    01/2013   compi. on Bull : must be 1.0E-5 instead of 1.0D-5 !!      D.Meyer and R. Schoetter 2018: see a9c4c46889dca998ea9ca40e5e0edc62ecc75715 ! !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS , ONLY : XTT ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , INTENT ( IN ) :: PT ! Temperature (K) REAL , INTENT ( IN ) :: PQ ! Humidity content (kg/kg) REAL :: PENTH ! Enthalpy (J/kg) ! !*       0.2   Declarations of local variables ! REAL :: ZT ! Temperature (C) REAL :: ZRV ! Mixing ratio (kg/kg_da) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:ENTH_FN_T_Q' , 0 , ZHOOK_HANDLE ) ! ZT = PT - XTT ZRV = PQ / ( 1.0 - PQ ) ! IF ( ZRV . LT . 1.0E-5 ) ZRV = 1.0E-5 ! PENTH = 1.00484E3 * ZT + ZRV * ( 2.50094E6 + 1.85895E3 * ZT ) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:ENTH_FN_T_Q' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------------------- ! END FUNCTION ENTH_FN_T_Q","tags":"","loc":"proc/enth_fn_t_q.html"},{"title":"Q_FN_T_ENTH – Town Energy Balance (TEB) model API docs","text":"public function Q_FN_T_ENTH(PT, PENTH) result(PQ) Uses MODD_CSTS Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PENTH Return Value real Contents Source Code Q_FN_T_ENTH Source Code FUNCTION Q_FN_T_ENTH ( PT , PENTH ) RESULT ( PQ ) !     ###################################### ! !! !!    PURPOSE !!    ------- !       The purpose of this function is to compute the humidity content !       as a function of temperature and enthalpy ! ! !!**  METHOD !!    ------ !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !! !! !! !!    AUTHOR !!    ------ !! !! !!    MODIFICATIONS !!    ------------- !!      Original    12/04/11 !!      D.Meyer and R. Schoetter 2018: see a9c4c46889dca998ea9ca40e5e0edc62ecc75715 ! !------------------------------------------------------------------------------- ! !*       0.    DECLARATIONS !              ------------ ! USE MODD_CSTS , ONLY : XTT ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , INTENT ( IN ) :: PT ! Temperature (K) REAL , INTENT ( IN ) :: PENTH ! Enthalpy (J/kg) REAL :: PQ ! Humidity content (kg/kg) ! !*       0.2   Declarations of local variables ! REAL :: ZT ! Temperature (C) REAL :: ZRV ! Mixing ratio (kg/kg_da) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:Q_FN_T_ENTH' , 0 , ZHOOK_HANDLE ) ! ZT = PT - XTT ! !    calculate mixing ratio ZRV = ( PENTH - 1.00484E3 * ZT ) / ( 2.50094E6 + 1.85895E3 * ZT ) ! !    validity test IF ( ZRV . LT . 0.0 ) ZRV = 1.E-5 ! !    calculate humidity content PQ = ZRV / ( 1.0 + ZRV ) ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_PSYCHRO:Q_FN_T_ENTH' , 1 , ZHOOK_HANDLE ) ! !------------------------------------------------------------------------------- ! END FUNCTION Q_FN_T_ENTH","tags":"","loc":"proc/q_fn_t_enth.html"},{"title":"PE_FROM_PQ – Town Energy Balance (TEB) model API docs","text":"public interface PE_FROM_PQ Contents Module Procedures PE_FROM_PQ_0D PE_FROM_PQ_1D Module Procedures public function PE_FROM_PQ_0D (PP, PQ) result(PE) Arguments Type Intent Optional Attributes Name real, intent(in) :: PP real, intent(in) :: PQ Return Value real public function PE_FROM_PQ_1D (PP, PQ) result(PE) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PQ Return Value real,\n  DIMENSION(SIZE(PQ))","tags":"","loc":"interface/pe_from_pq.html"},{"title":"TD_FROM_TQ – Town Energy Balance (TEB) model API docs","text":"public interface TD_FROM_TQ Contents Module Procedures TD_FROM_TQ_0D TD_FROM_TQ_1D Module Procedures public function TD_FROM_TQ_0D (PT, PQ, PP) result(PTD) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PQ real, intent(in) :: PP Return Value real public function TD_FROM_TQ_1D (PT, PQ, PP) result(PTD) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PQ real, intent(in), DIMENSION(:) :: PP Return Value real,\n  DIMENSION(SIZE(PQ))","tags":"","loc":"interface/td_from_tq.html"},{"title":"RV_FROM_TPTWB – Town Energy Balance (TEB) model API docs","text":"public interface RV_FROM_TPTWB Contents Module Procedures RV_FROM_TPTWB_0D RV_FROM_TPTWB_1D Module Procedures public function RV_FROM_TPTWB_0D (PT, PP, PTWB) result(PRV) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PP real, intent(in) :: PTWB Return Value real public function RV_FROM_TPTWB_1D (PT, PP, PTWB) result(PRV) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PTWB Return Value real,\n  DIMENSION(SIZE(PT))","tags":"","loc":"interface/rv_from_tptwb.html"},{"title":"TWB_FROM_TPQ – Town Energy Balance (TEB) model API docs","text":"public interface TWB_FROM_TPQ Contents Module Procedures TWB_FROM_TPQ_0D TWB_FROM_TPQ_1D Module Procedures public function TWB_FROM_TPQ_0D (PT, PP, PQ) result(PTWB) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PP real, intent(in) :: PQ Return Value real public function TWB_FROM_TPQ_1D (PT, PP, PQ) result(PTWB) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PQ Return Value real,\n  DIMENSION(SIZE(PT))","tags":"","loc":"interface/twb_from_tpq.html"},{"title":"ENTH_FN_T_Q – Town Energy Balance (TEB) model API docs","text":"public interface ENTH_FN_T_Q Contents Module Procedures ENTH_FN_T_Q Module Procedures public interface ENTH_FN_T_Q () Arguments None","tags":"","loc":"interface/enth_fn_t_q.html"},{"title":"Q_FN_T_ENTH – Town Energy Balance (TEB) model API docs","text":"public interface Q_FN_T_ENTH Contents Module Procedures Q_FN_T_ENTH Module Procedures public interface Q_FN_T_ENTH () Arguments None","tags":"","loc":"interface/q_fn_t_enth.html"},{"title":"IDEAL_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine IDEAL_INIT(YIDEAL) Arguments Type Intent Optional Attributes Name type( IDEAL_t ), intent(inout) :: YIDEAL Contents Source Code IDEAL_INIT Source Code SUBROUTINE IDEAL_INIT ( YIDEAL ) TYPE ( IDEAL_t ), INTENT ( INOUT ) :: YIDEAL REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_IDEAL_N:IDEAL_INIT\" , 0 , ZHOOK_HANDLE ) YIDEAL % XTSTEP = 0. YIDEAL % XOUT_TSTEP = 0. IF ( LHOOK ) CALL DR_HOOK ( \"MODD_IDEAL_N:IDEAL_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE IDEAL_INIT","tags":"","loc":"proc/ideal_init.html"},{"title":"WINDOW_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"interface public subroutine WINDOW_E_BUDGET(B, PEMIS_WIN, PLW_W_TO_WIN, PLW_R_TO_WIN, PLW_G_TO_WIN, PLW_NR_TO_WIN, PLW_S_TO_WIN, PRAD_RF_WIN, PRAD_WL_WIN, PABS_SW_WIN, PLW_RAD, PAC_WL, PRADHT_IN, PTS_FL, PRHOA, PDN_RD, PT_CANYON, PTS_WL, PTS_RD, PTSN_RD, PTS_GD, PRAD_WIN_FL, PRAD_WIN_MA, PCONV_WIN_BLD, PEMIT_LW_WIN, PABS_LW_WIN, PLOAD_IN_WIN) Arguments Type Intent Optional Attributes Name type(BEM_t), intent(inout) :: B real, intent(in), DIMENSION(:) :: PEMIS_WIN real, intent(in), DIMENSION(:) :: PLW_W_TO_WIN real, intent(in), DIMENSION(:) :: PLW_R_TO_WIN real, intent(in), DIMENSION(:) :: PLW_G_TO_WIN real, intent(in), DIMENSION(:) :: PLW_NR_TO_WIN real, intent(in), DIMENSION(:) :: PLW_S_TO_WIN real, intent(in), DIMENSION(:) :: PRAD_RF_WIN real, intent(in), DIMENSION(:) :: PRAD_WL_WIN real, intent(in), DIMENSION(:) :: PABS_SW_WIN real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PAC_WL real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PTS_FL real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PT_CANYON real, intent(in), DIMENSION(:) :: PTS_WL real, intent(in), DIMENSION(:) :: PTS_RD real, intent(in), DIMENSION(:) :: PTSN_RD real, intent(in), DIMENSION(:) :: PTS_GD real, intent(out), DIMENSION(:) :: PRAD_WIN_FL real, intent(out), DIMENSION(:) :: PRAD_WIN_MA real, intent(out), DIMENSION(:) :: PCONV_WIN_BLD real, intent(out), DIMENSION(:) :: PEMIT_LW_WIN real, intent(out), DIMENSION(:) :: PABS_LW_WIN real, intent(in), DIMENSION(:) :: PLOAD_IN_WIN","tags":"","loc":"interface/window_e_budget.html"},{"title":"GET_LUOUT – Town Energy Balance (TEB) model API docs","text":"interface public subroutine GET_LUOUT(HPROGRAM, KLUOUT) Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HPROGRAM integer, intent(out) :: KLUOUT","tags":"","loc":"interface/get_luout.html"},{"title":"DIAG_MISC_FLAKE_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DIAG_MISC_FLAKE_INIT(DMF) Arguments Type Intent Optional Attributes Name type( DIAG_MISC_FLAKE_t ), intent(inout) :: DMF Contents Source Code DIAG_MISC_FLAKE_INIT Source Code SUBROUTINE DIAG_MISC_FLAKE_INIT ( DMF ) TYPE ( DIAG_MISC_FLAKE_t ), INTENT ( INOUT ) :: DMF REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_FLAKE_N:DIAG_MISC_FLAKE_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( DMF % XZWAT_PROFILE ) NULLIFY ( DMF % XZW_PROFILE ) NULLIFY ( DMF % XTW_PROFILE ) DMF % LWATER_PROFILE = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_FLAKE_N:DIAG_MISC_FLAKE_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_MISC_FLAKE_INIT","tags":"","loc":"proc/diag_misc_flake_init.html"},{"title":"SNOW_FRAC_GROUND – Town Energy Balance (TEB) model API docs","text":"public function SNOW_FRAC_GROUND(PWSNOW) result(PPSNG) Uses MODD_SNOW_PAR Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW Return Value real,\n  DIMENSION(SIZE(PWSNOW)) Contents Source Code SNOW_FRAC_GROUND Source Code FUNCTION SNOW_FRAC_GROUND ( PWSNOW ) RESULT ( PPSNG ) !     ############################################### ! USE MODD_SNOW_PAR , ONLY : XWCRN IMPLICIT NONE ! REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL , DIMENSION ( SIZE ( PWSNOW )) :: PPSNG ! snow fraction over bare ground REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_GROUND' , 0 , ZHOOK_HANDLE ) PPSNG (:) = PWSNOW (:) / ( PWSNOW (:) + XWCRN ) ! fraction of ground covered IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_GROUND' , 1 , ZHOOK_HANDLE ) ! END FUNCTION SNOW_FRAC_GROUND","tags":"","loc":"proc/snow_frac_ground.html"},{"title":"WSNOW_FROM_SNOW_FRAC_GROUND – Town Energy Balance (TEB) model API docs","text":"public function WSNOW_FROM_SNOW_FRAC_GROUND(PPSNG) result(PWSNOW) Uses MODD_SNOW_PAR Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PPSNG Return Value real,\n  DIMENSION(SIZE(PPSNG)) Contents Source Code WSNOW_FROM_SNOW_FRAC_GROUND Source Code FUNCTION WSNOW_FROM_SNOW_FRAC_GROUND ( PPSNG ) RESULT ( PWSNOW ) !     ########################################################## ! USE MODD_SNOW_PAR , ONLY : XWCRN IMPLICIT NONE ! REAL , DIMENSION (:), INTENT ( IN ) :: PPSNG ! snow fraction over bare ground REAL , DIMENSION ( SIZE ( PPSNG )) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:WSNOW_FROM_SNOW_FRAC_GROUND' , 0 , ZHOOK_HANDLE ) PWSNOW (:) = XWCRN * PPSNG (:) / ( 1. - PPSNG (:)) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:WSNOW_FROM_SNOW_FRAC_GROUND' , 1 , ZHOOK_HANDLE ) ! END FUNCTION WSNOW_FROM_SNOW_FRAC_GROUND","tags":"","loc":"proc/wsnow_from_snow_frac_ground.html"},{"title":"SNOW_FRAC_VEG – Town Energy Balance (TEB) model API docs","text":"public function SNOW_FRAC_VEG(PPSNG, PWSNOW, PZ0VEG, PRHOS) result(PPSNV) Uses MODD_SNOW_PAR Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PPSNG real, intent(in), DIMENSION(:) :: PWSNOW real, intent(in), DIMENSION(:) :: PZ0VEG real, intent(in), DIMENSION(:) :: PRHOS Return Value real,\n  DIMENSION(SIZE(PWSNOW)) Contents Source Code SNOW_FRAC_VEG Source Code FUNCTION SNOW_FRAC_VEG ( PPSNG , PWSNOW , PZ0VEG , PRHOS ) RESULT ( PPSNV ) !     ######################################################### ! USE MODD_SNOW_PAR , ONLY : XWSNV IMPLICIT NONE ! REAL , DIMENSION (:), INTENT ( IN ) :: PPSNG ! snow fraction over bare ground REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL , DIMENSION (:), INTENT ( IN ) :: PZ0VEG ! vegetation roughness length for momentum REAL , DIMENSION (:), INTENT ( IN ) :: PRHOS ! snow density (kg/m3) REAL , DIMENSION ( SIZE ( PWSNOW )) :: PPSNV ! snow fraction over vegetation REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_VEG' , 0 , ZHOOK_HANDLE ) PPSNV (:) = PWSNOW (:) / ( PWSNOW (:) + PRHOS (:) * XWSNV * PZ0VEG (:)) ! Make sure PPSNV <= PPSNG PPSNV (:) = MIN ( PPSNV (:), PPSNG (:)) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_VEG' , 1 , ZHOOK_HANDLE ) ! END FUNCTION SNOW_FRAC_VEG","tags":"","loc":"proc/snow_frac_veg.html"},{"title":"SNOW_FRAC_VEG_A – Town Energy Balance (TEB) model API docs","text":"public function SNOW_FRAC_VEG_A(P_PSNG, P_LAI, P_SNOWALB) result(PPSNV) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: P_PSNG real, intent(in), DIMENSION(:) :: P_LAI real, intent(in), DIMENSION(:) :: P_SNOWALB Return Value real,\n  DIMENSION(SIZE(P_LAI)) Contents Source Code SNOW_FRAC_VEG_A Source Code FUNCTION SNOW_FRAC_VEG_A ( P_PSNG , P_LAI , P_SNOWALB ) RESULT ( PPSNV ) !     ********************************************************** ! IMPLICIT NONE ! REAL , DIMENSION (:), INTENT ( IN ) :: P_LAI ! leaf area index REAL , DIMENSION (:), INTENT ( IN ) :: P_SNOWALB ! snow albedo REAL , DIMENSION (:), INTENT ( IN ) :: P_PSNG ! snow fraction over bare ground REAL , DIMENSION ( SIZE ( P_LAI )) :: PPSNV ! snow fraction over vegetation ! ! ! ! Definition of local variables REAL , DIMENSION ( SIZE ( P_LAI )) :: FLAI ! snow fraction over vegetation REAL RLAIMAX , RLAI , A1 , A2 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_VEG_A' , 0 , ZHOOK_HANDLE ) RLAIMAX = 7. RLAI = 3. A1 = 0.87 A2 = 0.84 FLAI (:) = 1. WHERE ( P_LAI (:) > RLAI ) FLAI (:) = 1. - ( P_LAI (:) / RLAIMAX ) * ( MAX ( 0.0 ,( A1 - MAX ( A2 , P_SNOWALB (:)))) / ( A1 - A2 )) END WHERE PPSNV (:) = P_PSNG (:) * FLAI (:) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_VEG_A' , 1 , ZHOOK_HANDLE ) ! END FUNCTION SNOW_FRAC_VEG_A","tags":"","loc":"proc/snow_frac_veg_a.html"},{"title":"SNOW_FRAC_NAT – Town Energy Balance (TEB) model API docs","text":"public function SNOW_FRAC_NAT(PWSNOW, PPSNG, PPSNV, PVEG) result(PPSN) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW real, intent(in), DIMENSION(:) :: PPSNG real, intent(in), DIMENSION(:) :: PPSNV real, intent(in), DIMENSION(:) :: PVEG Return Value real,\n  DIMENSION(SIZE(PWSNOW)) Contents Source Code SNOW_FRAC_NAT Source Code FUNCTION SNOW_FRAC_NAT ( PWSNOW , PPSNG , PPSNV , PVEG ) RESULT ( PPSN ) !     ############################################################ ! IMPLICIT NONE ! REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL , DIMENSION (:), INTENT ( IN ) :: PPSNG ! snow fraction over bare ground REAL , DIMENSION (:), INTENT ( IN ) :: PPSNV ! snow fraction over vegetation REAL , DIMENSION (:), INTENT ( IN ) :: PVEG ! vegetation fraction REAL , DIMENSION ( SIZE ( PWSNOW )) :: PPSN ! snow fraction over natural areas REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_NAT' , 0 , ZHOOK_HANDLE ) PPSN (:) = ( 1 - PVEG (:)) * PPSNG (:) + PVEG (:) * PPSNV (:) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_NAT' , 1 , ZHOOK_HANDLE ) ! END FUNCTION SNOW_FRAC_NAT","tags":"","loc":"proc/snow_frac_nat.html"},{"title":"SNOW_FRAC_NAT_1D – Town Energy Balance (TEB) model API docs","text":"public function SNOW_FRAC_NAT_1D(PWSNOW) result(BIDON) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW Return Value real Contents Source Code SNOW_FRAC_NAT_1D Source Code FUNCTION SNOW_FRAC_NAT_1D ( PWSNOW ) RESULT ( BIDON ) !     ######################################################## ! REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL :: BIDON REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_NAT_1D' , 0 , ZHOOK_HANDLE ) BIDON = PWSNOW ( 1 ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_NAT_1D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION SNOW_FRAC_NAT_1D","tags":"","loc":"proc/snow_frac_nat_1d.html"},{"title":"SNOW_FRAC_NAT_2D – Town Energy Balance (TEB) model API docs","text":"public function SNOW_FRAC_NAT_2D(PWSNOW) result(BIDON) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW Return Value real Contents Source Code SNOW_FRAC_NAT_2D Source Code FUNCTION SNOW_FRAC_NAT_2D ( PWSNOW ) RESULT ( BIDON ) !     ######################################################## REAL :: BIDON REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_NAT_2D' , 0 , ZHOOK_HANDLE ) BIDON = PWSNOW ( 1 ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_NAT_2D' , 1 , ZHOOK_HANDLE ) END FUNCTION SNOW_FRAC_NAT_2D","tags":"","loc":"proc/snow_frac_nat_2d.html"},{"title":"SNOW_FRAC_VEG_1D – Town Energy Balance (TEB) model API docs","text":"public function SNOW_FRAC_VEG_1D(PWSNOW) result(BIDON) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW Return Value real Contents Source Code SNOW_FRAC_VEG_1D Source Code FUNCTION SNOW_FRAC_VEG_1D ( PWSNOW ) RESULT ( BIDON ) !     ############################################################ REAL :: BIDON REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_VEG_1D' , 0 , ZHOOK_HANDLE ) BIDON = PWSNOW ( 1 ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_VEG_1D' , 1 , ZHOOK_HANDLE ) END FUNCTION SNOW_FRAC_VEG_1D","tags":"","loc":"proc/snow_frac_veg_1d.html"},{"title":"SNOW_FRAC_VEG_2D – Town Energy Balance (TEB) model API docs","text":"public function SNOW_FRAC_VEG_2D(PWSNOW) result(BIDON) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW Return Value real Contents Source Code SNOW_FRAC_VEG_2D Source Code FUNCTION SNOW_FRAC_VEG_2D ( PWSNOW ) RESULT ( BIDON ) !     ############################################################ REAL :: BIDON REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_VEG_2D' , 0 , ZHOOK_HANDLE ) BIDON = PWSNOW ( 1 ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_VEG_2D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION SNOW_FRAC_VEG_2D","tags":"","loc":"proc/snow_frac_veg_2d.html"},{"title":"SNOW_FRAC_GROUND_1D – Town Energy Balance (TEB) model API docs","text":"public function SNOW_FRAC_GROUND_1D(PWSNOW) result(BIDON) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW Return Value real Contents Source Code SNOW_FRAC_GROUND_1D Source Code FUNCTION SNOW_FRAC_GROUND_1D ( PWSNOW ) RESULT ( BIDON ) !     ################################################## ! REAL :: BIDON REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_GROUND_1D' , 0 , ZHOOK_HANDLE ) BIDON = PWSNOW ( 1 ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_GROUND_1D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION SNOW_FRAC_GROUND_1D","tags":"","loc":"proc/snow_frac_ground_1d.html"},{"title":"SNOW_FRAC_GROUND_2D – Town Energy Balance (TEB) model API docs","text":"public function SNOW_FRAC_GROUND_2D(PWSNOW) result(BIDON) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW Return Value real Contents Source Code SNOW_FRAC_GROUND_2D Source Code FUNCTION SNOW_FRAC_GROUND_2D ( PWSNOW ) RESULT ( BIDON ) !     ################################################## ! REAL :: BIDON REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW ! snow amount over natural areas (kg/m2) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_GROUND_2D' , 0 , ZHOOK_HANDLE ) BIDON = PWSNOW ( 1 ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_GROUND_2D' , 1 , ZHOOK_HANDLE ) ! END FUNCTION SNOW_FRAC_GROUND_2D","tags":"","loc":"proc/snow_frac_ground_2d.html"},{"title":"SNOW_FRAC_ROAD – Town Energy Balance (TEB) model API docs","text":"public subroutine SNOW_FRAC_ROAD(PWSNOW_ROAD, OSNOW, PDN_ROAD, PDF_ROAD) Uses MODD_SNOW_PAR Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW_ROAD logical, intent(in), DIMENSION(:) :: OSNOW real, intent(out), DIMENSION(:) :: PDN_ROAD real, intent(out), DIMENSION(:) :: PDF_ROAD Contents Source Code SNOW_FRAC_ROAD Source Code SUBROUTINE SNOW_FRAC_ROAD ( PWSNOW_ROAD , OSNOW , PDN_ROAD , PDF_ROAD ) !     ############################################################## ! USE MODD_SNOW_PAR , ONLY : XWCRN ! REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW_ROAD ! snow amount over roads (kg/m2) LOGICAL , DIMENSION (:), INTENT ( IN ) :: OSNOW ! T: snow-fall is occuring REAL , DIMENSION (:), INTENT ( OUT ) :: PDN_ROAD ! snow fraction over roads REAL , DIMENSION (:), INTENT ( OUT ) :: PDF_ROAD ! snow-free fraction over roads REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_ROAD' , 0 , ZHOOK_HANDLE ) PDF_ROAD (:) = 1. PDN_ROAD (:) = 0. ! ! due to the flatness of horizontal surfaces (compared to landscape and ! vegetation), the amount of snow necessary to cover the entire surface XWCRN ! is reduced (equal to 1kg/m2 instead of 10). ! WHERE ( PWSNOW_ROAD (:) > 0. . OR . OSNOW ) PDN_ROAD (:) = MAX ( MIN ( PWSNOW_ROAD (:) / ( PWSNOW_ROAD (:) + XWCRN * 0.1 ) , 0.7 ), 0.01 ) PDF_ROAD (:) = 1. - PDN_ROAD (:) END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_ROAD' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE SNOW_FRAC_ROAD","tags":"","loc":"proc/snow_frac_road.html"},{"title":"SNOW_FRAC_ROOF – Town Energy Balance (TEB) model API docs","text":"public subroutine SNOW_FRAC_ROOF(PWSNOW_ROOF, OSNOW, PDN_ROOF, PDF_ROOF) Uses MODD_SNOW_PAR Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW_ROOF logical, intent(in), DIMENSION(:) :: OSNOW real, intent(out), DIMENSION(:) :: PDN_ROOF real, intent(out), DIMENSION(:) :: PDF_ROOF Contents Source Code SNOW_FRAC_ROOF Source Code SUBROUTINE SNOW_FRAC_ROOF ( PWSNOW_ROOF , OSNOW , PDN_ROOF , PDF_ROOF ) !     ############################################################## ! USE MODD_SNOW_PAR , ONLY : XWCRN ! REAL , DIMENSION (:), INTENT ( IN ) :: PWSNOW_ROOF ! snow amount over roofs (kg/m2) LOGICAL , DIMENSION (:), INTENT ( IN ) :: OSNOW ! T: snow-fall is occuring REAL , DIMENSION (:), INTENT ( OUT ) :: PDN_ROOF ! snow fraction over roofs REAL , DIMENSION (:), INTENT ( OUT ) :: PDF_ROOF ! snow-free fraction over roofs REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_ROOF' , 0 , ZHOOK_HANDLE ) PDF_ROOF (:) = 1. PDN_ROOF (:) = 0. ! ! due to the flatness of horizontal surfaces (compared to landscape and ! vegetation), the amount of snow necessary to cover the entire surface XWCRN ! is reduced (equal to 1kg/m2 instead of 10). ! WHERE ( PWSNOW_ROOF (:) > 0. . OR . OSNOW ) PDN_ROOF (:) = MAX ( PWSNOW_ROOF (:) / ( PWSNOW_ROOF (:) + XWCRN * 0.1 ), 0.01 ) PDF_ROOF (:) = 1. - PDN_ROOF (:) END WHERE IF ( LHOOK ) CALL DR_HOOK ( 'MODE_SURF_SNOW_FRAC:SNOW_FRAC_ROOF' , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE SNOW_FRAC_ROOF","tags":"","loc":"proc/snow_frac_roof.html"},{"title":"CH_ISBA_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine CH_ISBA_INIT(YCH_ISBA) Arguments Type Intent Optional Attributes Name type( CH_ISBA_t ), intent(inout) :: YCH_ISBA Contents Source Code CH_ISBA_INIT Source Code SUBROUTINE CH_ISBA_INIT ( YCH_ISBA ) TYPE ( CH_ISBA_t ), INTENT ( INOUT ) :: YCH_ISBA REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_ISBA_N:CH_ISBA_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YCH_ISBA % XDEP ) NULLIFY ( YCH_ISBA % XSOILRC_SO2 ) NULLIFY ( YCH_ISBA % XSOILRC_O3 ) NULLIFY ( YCH_ISBA % CCH_NAMES ) NULLIFY ( YCH_ISBA % CAER_NAMES ) NULLIFY ( YCH_ISBA % CDSTNAMES ) NULLIFY ( YCH_ISBA % CSLTNAMES ) YCH_ISBA % CCHEM_SURF_FILE = ' ' YCH_ISBA % CCH_DRY_DEP = ' ' YCH_ISBA % LCH_BIO_FLUX = . FALSE . YCH_ISBA % LCH_NO_FLUX = . FALSE . CALL SV_INIT ( YCH_ISBA % SVI ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_ISBA_N:CH_ISBA_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_ISBA_INIT","tags":"","loc":"proc/ch_isba_init.html"},{"title":"CH_ISBA_NP_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine CH_ISBA_NP_INIT(YCH_ISBA_NP, KPATCH) Arguments Type Intent Optional Attributes Name type( CH_ISBA_NP_t ), intent(inout) :: YCH_ISBA_NP integer, intent(in) :: KPATCH Contents Source Code CH_ISBA_NP_INIT Source Code SUBROUTINE CH_ISBA_NP_INIT ( YCH_ISBA_NP , KPATCH ) TYPE ( CH_ISBA_NP_t ), INTENT ( INOUT ) :: YCH_ISBA_NP INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_ISBA_N:CH_ISBA_NP_INIT\" , 0 , ZHOOK_HANDLE ) ! IF ( ASSOCIATED ( YCH_ISBA_NP % AL )) THEN DO JP = 1 , KPATCH CALL CH_ISBA_INIT ( YCH_ISBA_NP % AL ( JP )) ENDDO DEALLOCATE ( YCH_ISBA_NP % AL ) ELSE ALLOCATE ( YCH_ISBA_NP % AL ( KPATCH )) DO JP = 1 , KPATCH CALL CH_ISBA_INIT ( YCH_ISBA_NP % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_ISBA_N:CH_ISBA_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_ISBA_NP_INIT","tags":"","loc":"proc/ch_isba_np_init.html"},{"title":"VEGETATION_EVOL – Town Energy Balance (TEB) model API docs","text":"interface public subroutine VEGETATION_EVOL(IO, DTI, PK, PEK, OAGRIP, PTSTEP, KMONTH, KDAY, PTIME, PLAT, PRHOA, P_CO2, ISSK, PRESP_BIOMASS_INST, PSWDIR) Arguments Type Intent Optional Attributes Name type(ISBA_OPTIONS_t), intent(inout) :: IO type(DATA_ISBA_t), intent(inout) :: DTI type(ISBA_P_t), intent(inout) :: PK type(ISBA_PE_t), intent(inout) :: PEK logical, intent(in) :: OAGRIP real, intent(in) :: PTSTEP integer, intent(in) :: KMONTH integer, intent(in) :: KDAY real, intent(in) :: PTIME real, intent(in), DIMENSION(:) :: PLAT real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: P_CO2 type(SSO_t), intent(inout) :: ISSK real, intent(inout), DIMENSION(:,:) :: PRESP_BIOMASS_INST real, intent(in), optional DIMENSION(:) :: PSWDIR","tags":"","loc":"interface/vegetation_evol.html"},{"title":"TEB_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine TEB_INIT(YTEB) Arguments Type Intent Optional Attributes Name type( TEB_t ), intent(inout) :: YTEB Contents Source Code TEB_INIT Source Code SUBROUTINE TEB_INIT ( YTEB ) TYPE ( TEB_t ), INTENT ( INOUT ) :: YTEB REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_N:TEB_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YTEB % XROAD_DIR ) NULLIFY ( YTEB % XGARDEN ) NULLIFY ( YTEB % XGREENROOF ) NULLIFY ( YTEB % XBLD ) NULLIFY ( YTEB % XROAD ) NULLIFY ( YTEB % XCAN_HW_RATIO ) NULLIFY ( YTEB % XBLD_HEIGHT ) NULLIFY ( YTEB % XWALL_O_HOR ) NULLIFY ( YTEB % XROAD_O_GRND ) NULLIFY ( YTEB % XGARDEN_O_GRND ) NULLIFY ( YTEB % XWALL_O_GRND ) NULLIFY ( YTEB % XWALL_O_BLD ) NULLIFY ( YTEB % XZ0_TOWN ) NULLIFY ( YTEB % XSVF_ROAD ) NULLIFY ( YTEB % XSVF_GARDEN ) NULLIFY ( YTEB % XSVF_WALL ) NULLIFY ( YTEB % XALB_ROOF ) NULLIFY ( YTEB % XEMIS_ROOF ) NULLIFY ( YTEB % XHC_ROOF ) NULLIFY ( YTEB % XTC_ROOF ) NULLIFY ( YTEB % XD_ROOF ) NULLIFY ( YTEB % XALB_ROAD ) NULLIFY ( YTEB % XEMIS_ROAD ) NULLIFY ( YTEB % XHC_ROAD ) NULLIFY ( YTEB % XTC_ROAD ) NULLIFY ( YTEB % XD_ROAD ) NULLIFY ( YTEB % XALB_WALL ) NULLIFY ( YTEB % XEMIS_WALL ) NULLIFY ( YTEB % XHC_WALL ) NULLIFY ( YTEB % XTC_WALL ) NULLIFY ( YTEB % XD_WALL ) NULLIFY ( YTEB % XH_TRAFFIC ) NULLIFY ( YTEB % XLE_TRAFFIC ) NULLIFY ( YTEB % XH_INDUSTRY ) NULLIFY ( YTEB % XLE_INDUSTRY ) NULLIFY ( YTEB % XTI_ROAD ) NULLIFY ( YTEB % XWS_ROOF ) NULLIFY ( YTEB % XWS_ROAD ) NULLIFY ( YTEB % XT_ROOF ) NULLIFY ( YTEB % XT_ROAD ) NULLIFY ( YTEB % XT_WALL_A ) NULLIFY ( YTEB % XT_WALL_B ) NULLIFY ( YTEB % XAC_ROOF ) NULLIFY ( YTEB % XAC_ROAD ) NULLIFY ( YTEB % XAC_WALL ) NULLIFY ( YTEB % XAC_TOP ) NULLIFY ( YTEB % XAC_ROOF_WAT ) NULLIFY ( YTEB % XAC_ROAD_WAT ) NULLIFY ( YTEB % XQSAT_ROOF ) NULLIFY ( YTEB % XQSAT_ROAD ) NULLIFY ( YTEB % XDELT_ROOF ) NULLIFY ( YTEB % XDELT_ROAD ) NULLIFY ( YTEB % XT_CANYON ) NULLIFY ( YTEB % XQ_CANYON ) NULLIFY ( YTEB % XROUGH_ROOF ) NULLIFY ( YTEB % XROUGH_WALL ) NULLIFY ( YTEB % XRESIDENTIAL ) YTEB % XDT_RES = 0. YTEB % XDT_OFF = 0. IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_N:TEB_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE TEB_INIT","tags":"","loc":"proc/teb_init.html"},{"title":"TEB_NP_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine TEB_NP_INIT(YNTEB, KPATCH) Arguments Type Intent Optional Attributes Name type( TEB_NP_t ), intent(inout) :: YNTEB integer, intent(in) :: KPATCH Contents Source Code TEB_NP_INIT Source Code SUBROUTINE TEB_NP_INIT ( YNTEB , KPATCH ) TYPE ( TEB_NP_t ), INTENT ( INOUT ) :: YNTEB INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_N:TEB_NP_INIT\" , 0 , ZHOOK_HANDLE ) IF (. NOT . ASSOCIATED ( YNTEB % AL )) THEN ALLOCATE ( YNTEB % AL ( KPATCH )) DO JP = 1 , KPATCH CALL TEB_INIT ( YNTEB % AL ( JP )) ENDDO ELSE DO JP = 1 , KPATCH CALL TEB_INIT ( YNTEB % AL ( JP )) ENDDO DEALLOCATE ( YNTEB % AL ) ENDIF IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_N:TEB_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE TEB_NP_INIT","tags":"","loc":"proc/teb_np_init.html"},{"title":"DATA_SEAFLUX_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DATA_SEAFLUX_INIT(YDATA_SEAFLUX) Arguments Type Intent Optional Attributes Name type( DATA_SEAFLUX_t ), intent(inout) :: YDATA_SEAFLUX Contents Source Code DATA_SEAFLUX_INIT Source Code SUBROUTINE DATA_SEAFLUX_INIT ( YDATA_SEAFLUX ) TYPE ( DATA_SEAFLUX_t ), INTENT ( INOUT ) :: YDATA_SEAFLUX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_SEAFLUX_N:DATA_SEAFLUX_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDATA_SEAFLUX % XDATA_SST ) YDATA_SEAFLUX % NTIME = 0 YDATA_SEAFLUX % LSST_DATA = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_SEAFLUX_N:DATA_SEAFLUX_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DATA_SEAFLUX_INIT","tags":"","loc":"proc/data_seaflux_init.html"},{"title":"FLOOR_LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"interface public subroutine FLOOR_LAYER_E_BUDGET(B, PTSTEP, PFLX_BLD_FL, PDQS_FL, PIMB_FL, PRADHT_IN, PRAD_WL_FL, PRAD_RF_FL, PRAD_WIN_FL, PLOAD_FL, PRAD_FL_MA, PCONV_FL_BLD) Arguments Type Intent Optional Attributes Name type(BEM_t), intent(inout) :: B real, intent(in) :: PTSTEP real, intent(out), DIMENSION(:) :: PFLX_BLD_FL real, intent(out), DIMENSION(:) :: PDQS_FL real, intent(out), DIMENSION(:) :: PIMB_FL real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PRAD_WL_FL real, intent(in), DIMENSION(:) :: PRAD_RF_FL real, intent(in), DIMENSION(:) :: PRAD_WIN_FL real, intent(in), DIMENSION(:) :: PLOAD_FL real, intent(out), DIMENSION(:) :: PRAD_FL_MA real, intent(out), DIMENSION(:) :: PCONV_FL_BLD","tags":"","loc":"interface/floor_layer_e_budget.html"},{"title":"DIAG_EVAP_ISBA_NP_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DIAG_EVAP_ISBA_NP_INIT(YNDIAG_EVAP_ISBA, KPATCH) Arguments Type Intent Optional Attributes Name type( DIAG_EVAP_ISBA_NP_t ), intent(inout) :: YNDIAG_EVAP_ISBA integer, intent(in) :: KPATCH Contents Source Code DIAG_EVAP_ISBA_NP_INIT Source Code SUBROUTINE DIAG_EVAP_ISBA_NP_INIT ( YNDIAG_EVAP_ISBA , KPATCH ) TYPE ( DIAG_EVAP_ISBA_NP_t ), INTENT ( INOUT ) :: YNDIAG_EVAP_ISBA INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_EVAP_ISBA_N:DIAG_EVAP_ISBA_NP_INIT\" , 0 , ZHOOK_HANDLE ) IF (. NOT . ASSOCIATED ( YNDIAG_EVAP_ISBA % AL )) THEN ALLOCATE ( YNDIAG_EVAP_ISBA % AL ( KPATCH )) DO JP = 1 , KPATCH CALL DIAG_EVAP_ISBA_INIT ( YNDIAG_EVAP_ISBA % AL ( JP )) ENDDO ELSE DO JP = 1 , KPATCH CALL DIAG_EVAP_ISBA_INIT ( YNDIAG_EVAP_ISBA % AL ( JP )) ENDDO DEALLOCATE ( YNDIAG_EVAP_ISBA % AL ) ENDIF IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_EVAP_ISBA_N:DIAG_EVAP_ISBA_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_EVAP_ISBA_NP_INIT","tags":"","loc":"proc/diag_evap_isba_np_init.html"},{"title":"DIAG_EVAP_ISBA_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DIAG_EVAP_ISBA_INIT(DE) Arguments Type Intent Optional Attributes Name type( DIAG_EVAP_ISBA_t ), intent(inout) :: DE Contents Source Code DIAG_EVAP_ISBA_INIT Source Code SUBROUTINE DIAG_EVAP_ISBA_INIT ( DE ) TYPE ( DIAG_EVAP_ISBA_t ), INTENT ( INOUT ) :: DE REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_EVAP_ISBA_N:DIAG_EVAP_ISBA_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( DE % XLEG ) NULLIFY ( DE % XLEGI ) NULLIFY ( DE % XLEV ) NULLIFY ( DE % XLES ) NULLIFY ( DE % XLESL ) NULLIFY ( DE % XLER ) NULLIFY ( DE % XLETR ) NULLIFY ( DE % XUSTAR ) NULLIFY ( DE % XSNDRIFT ) NULLIFY ( DE % XRESTORE ) NULLIFY ( DE % XDRAIN ) NULLIFY ( DE % XQSB ) NULLIFY ( DE % XRUNOFF ) NULLIFY ( DE % XHORT ) NULLIFY ( DE % XRRVEG ) NULLIFY ( DE % XMELT ) NULLIFY ( DE % XMELTADV ) NULLIFY ( DE % XIFLOOD ) NULLIFY ( DE % XPFLOOD ) NULLIFY ( DE % XLE_FLOOD ) NULLIFY ( DE % XLEI_FLOOD ) ! NULLIFY ( DE % XICEFLUX ) ! NULLIFY ( DE % XLELITTER ) NULLIFY ( DE % XLELITTERI ) NULLIFY ( DE % XDRIPLIT ) NULLIFY ( DE % XRRLIT ) NULLIFY ( DE % XLEV_CV ) NULLIFY ( DE % XLES_CV ) NULLIFY ( DE % XLETR_CV ) NULLIFY ( DE % XLER_CV ) NULLIFY ( DE % XLE_CV ) NULLIFY ( DE % XH_CV ) NULLIFY ( DE % XMELT_CV ) NULLIFY ( DE % XFRZ_CV ) NULLIFY ( DE % XLETR_GV ) NULLIFY ( DE % XLER_GV ) NULLIFY ( DE % XLE_GV ) NULLIFY ( DE % XH_GV ) NULLIFY ( DE % XLE_GN ) NULLIFY ( DE % XEVAP_GN ) NULLIFY ( DE % XH_GN ) NULLIFY ( DE % XSR_GN ) NULLIFY ( DE % XSWDOWN_GN ) NULLIFY ( DE % XLWDOWN_GN ) NULLIFY ( DE % XEVAP_G ) NULLIFY ( DE % XLE_CA ) NULLIFY ( DE % XH_CA ) NULLIFY ( DE % XSWUP ) NULLIFY ( DE % XLWUP ) NULLIFY ( DE % XSWNET_V ) NULLIFY ( DE % XSWNET_G ) NULLIFY ( DE % XSWNET_N ) NULLIFY ( DE % XSWNET_NS ) NULLIFY ( DE % XLWNET_V ) NULLIFY ( DE % XLWNET_G ) NULLIFY ( DE % XLWNET_N ) ! NULLIFY ( DE % XDRIP ) NULLIFY ( DE % XIRRIG_FLUX ) NULLIFY ( DE % XGPP ) NULLIFY ( DE % XRESP_AUTO ) NULLIFY ( DE % XRESP_ECO ) NULLIFY ( DE % XDWG ) NULLIFY ( DE % XDWGI ) NULLIFY ( DE % XDWR ) NULLIFY ( DE % XDSWE ) NULLIFY ( DE % XWATBUD ) ! NULLIFY ( DE % XRAINFALL ) NULLIFY ( DE % XSNOWFALL ) ! NULLIFY ( DE % XRN_SN_FR ) NULLIFY ( DE % XH_SN_FR ) NULLIFY ( DE % XLEI_SN_FR ) NULLIFY ( DE % XLE_SN_FR ) NULLIFY ( DE % XGFLUX_SN_FR ) NULLIFY ( DE % XLEG_SN_FR ) NULLIFY ( DE % XLEGI_SN_FR ) NULLIFY ( DE % XLEV_SN_FR ) NULLIFY ( DE % XLETR_SN_FR ) NULLIFY ( DE % XUSTAR_SN_FR ) NULLIFY ( DE % XLER_SN_FR ) DE % LSURF_EVAP_BUDGET = . FALSE . DE % LWATER_BUDGET = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_EVAP_ISBA_N:DIAG_EVAP_ISBA_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_EVAP_ISBA_INIT","tags":"","loc":"proc/diag_evap_isba_init.html"},{"title":"SLT_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine SLT_INIT(YSLT) Arguments Type Intent Optional Attributes Name type( SLT_t ), intent(inout) :: YSLT Contents Source Code SLT_INIT Source Code SUBROUTINE SLT_INIT ( YSLT ) TYPE ( SLT_t ), INTENT ( INOUT ) :: YSLT REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SLT_N:SLT_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YSLT % XEMISRADIUS_SLT ) NULLIFY ( YSLT % XEMISSIG_SLT ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SLT_N:SLT_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE SLT_INIT","tags":"","loc":"proc/slt_init.html"},{"title":"SURFACE_RI – Town Energy Balance (TEB) model API docs","text":"interface public subroutine SURFACE_RI(PTG, PQS, PEXNS, PEXNA, PTA, PQA, PZREF, PUREF, PDIRCOSZW, PVMOD, PRI) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PTG real, intent(in), DIMENSION(:) :: PQS real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PDIRCOSZW real, intent(in), DIMENSION(:) :: PVMOD real, intent(out), DIMENSION(:) :: PRI","tags":"","loc":"interface/surface_ri.html"},{"title":"BEM_OPTIONS_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine BEM_OPTIONS_INIT(YBEM_OPTIONS) Arguments Type Intent Optional Attributes Name type( BEM_OPTIONS_t ), intent(inout) :: YBEM_OPTIONS Contents Source Code BEM_OPTIONS_INIT Source Code SUBROUTINE BEM_OPTIONS_INIT ( YBEM_OPTIONS ) TYPE ( BEM_OPTIONS_t ), INTENT ( INOUT ) :: YBEM_OPTIONS REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_BEM_N:BEM_OPTIONS_INIT\" , 0 , ZHOOK_HANDLE ) YBEM_OPTIONS % NFLOOR_LAYER = 0 YBEM_OPTIONS % CCOOL_COIL = '      ' YBEM_OPTIONS % CHEAT_COIL = '      ' YBEM_OPTIONS % LAUTOSIZE = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_BEM_N:BEM_OPTIONS_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE BEM_OPTIONS_INIT","tags":"","loc":"proc/bem_options_init.html"},{"title":"OCEAN_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine OCEAN_INIT(YOCEAN) Arguments Type Intent Optional Attributes Name type( OCEAN_t ), intent(inout) :: YOCEAN Contents Source Code OCEAN_INIT Source Code SUBROUTINE OCEAN_INIT ( YOCEAN ) TYPE ( OCEAN_t ), INTENT ( INOUT ) :: YOCEAN REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_OCEAN_N:OCEAN_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YOCEAN % XSEAT ) NULLIFY ( YOCEAN % XSEAS ) NULLIFY ( YOCEAN % XSEAU ) NULLIFY ( YOCEAN % XSEAV ) NULLIFY ( YOCEAN % XSEAE ) NULLIFY ( YOCEAN % XSEABATH ) NULLIFY ( YOCEAN % XSEAHMO ) NULLIFY ( YOCEAN % XLE ) NULLIFY ( YOCEAN % XLK ) NULLIFY ( YOCEAN % XKMEL ) NULLIFY ( YOCEAN % XKMELM ) NULLIFY ( YOCEAN % XSEATEND ) NULLIFY ( YOCEAN % XDTFNSOL ) NULLIFY ( YOCEAN % XDTFSOL ) YOCEAN % LMERCATOR = . FALSE . YOCEAN % LCURRENT = . FALSE . YOCEAN % LPROGSST = . FALSE . YOCEAN % NTIME_COUPLING = 0 YOCEAN % NOCTCOUNT = 0 YOCEAN % XOCEAN_TSTEP = 5 * 6 0. IF ( LHOOK ) CALL DR_HOOK ( \"MODD_OCEAN_N:OCEAN_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE OCEAN_INIT","tags":"","loc":"proc/ocean_init.html"},{"title":"INI_SURF_CSTS – Town Energy Balance (TEB) model API docs","text":"interface public subroutine INI_SURF_CSTS() Arguments None","tags":"","loc":"interface/ini_surf_csts.html"},{"title":"SOLAR_PANEL – Town Energy Balance (TEB) model API docs","text":"interface public subroutine SOLAR_PANEL(TPN, DMT, PTSTEP, PTSUN, PRESIDENTIAL, PEMIT_LW_ROOF, PEMIT_LWDN_PANEL, PLW_RAD, PTA, PN_FLOOR, PPROD_BLD) Arguments Type Intent Optional Attributes Name type(TEB_PANEL_t), intent(inout) :: TPN type(DIAG_MISC_TEB_t), intent(inout) :: DMT real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PTSUN real, intent(in), DIMENSION(:) :: PRESIDENTIAL real, intent(in), DIMENSION(:) :: PEMIT_LW_ROOF real, intent(in), DIMENSION(:) :: PEMIT_LWDN_PANEL real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PN_FLOOR real, intent(out), DIMENSION(:) :: PPROD_BLD","tags":"","loc":"interface/solar_panel.html"},{"title":"POSNAM – Town Energy Balance (TEB) model API docs","text":"public subroutine POSNAM(KULNAM, HDNAML, OFOUND, KLUOUT) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KULNAM character(len=*), intent(in) :: HDNAML logical, intent(out) :: OFOUND integer, intent(in), optional :: KLUOUT Contents Source Code POSNAM Source Code SUBROUTINE POSNAM ( KULNAM , HDNAML , OFOUND , KLUOUT ) !!    ############################################## !! !!*** *POSNAM* !! !!    PURPOSE !!    ------- !     To position namelist file at correct place for reading !     namelist CDNAML. !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !!    IMPLICIT ARGUMENT !!    ----------------- !! !!    REFERENCE !!    ---------- !!       ECMWF Research Department documentation of the IFS (Hamrud) !! !!    AUTHOR !!    ------- !!    I. Mallet  15/10/01 !! !!    MODIFICATIONS !!    -------------- !!       I. Mallet  15/10/01     adaptation to MesoNH (F90 norm) !------------------------------------------------------------------------------ ! IMPLICIT NONE ! !*       0.    DECLARATIONS !              ------------ ! !*       0.1   Declarations of arguments ! INTEGER , INTENT ( IN ) :: KULNAM CHARACTER ( LEN =* ), INTENT ( IN ) :: HDNAML LOGICAL , INTENT ( OUT ) :: OFOUND INTEGER , OPTIONAL , INTENT ( IN ) :: KLUOUT ! !*       0.2   Declarations of local variables ! CHARACTER ( LEN = 120 ) :: YLINE CHARACTER ( LEN = 1 ) :: YLTEST INTEGER :: ILEN , ILEY , INDL , IND1 , IRET INTEGER :: J , JA , JFILE LOGICAL :: LLOPENED ! CHARACTER ( LEN = 1 ), DIMENSION ( 26 ) :: YLO = ( / 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , & 'i' , 'j' , 'k' , 'l' , 'm' , 'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' / ) CHARACTER ( LEN = 1 ), DIMENSION ( 26 ) :: YUP = ( / 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , & 'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' , 'P' , 'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'W' , 'X' , 'Y' , 'Z' / ) REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*       1.    POSITION FILE !              ------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_POS_SURF:POSNAM' , 0 , ZHOOK_HANDLE ) OFOUND = . FALSE . ILEN = LEN ( HDNAML ) ! !      CONTINUE READING THE FILE, THEN REWIND IF NOT FOUND DO JFILE = 1 , 2 search_nam : DO YLINE = ' ' READ ( UNIT = KULNAM , FMT = '(A)' , IOSTAT = IRET , END = 100 ) YLINE !   If file does not exist, most compilers would just create it and jump !   to the END label ; but a few of them would report an error: IF ( IRET /= 0 ) THEN INQUIRE ( KULNAM , OPENED = LLOPENED ) IF ( LLOPENED ) THEN IF ( PRESENT ( KLUOUT )) THEN WRITE ( KLUOUT , FMT =* ) 'MODE_POS_SURF : error reading from unit ' ,& KULNAM , ' file ' , HDNAML , ' line ' , YLINE CALL FLUSH ( KLUOUT ) ENDIF CALL ABOR1_SFX ( 'MODE_POS_SURF: read error in namelist file' ) ELSE EXIT search_nam END IF ELSE !     FIRST SEARCH for \"&\" IN THE LINE, THEN CORRECT LINE AND TEST : INDL = INDEX ( YLINE , '&' ) IF ( INDL . NE . 0 ) THEN ILEY = LEN ( YLINE ) DO J = 1 , ILEY DO JA = 1 , 26 IF ( YLINE ( J : J ) == YLO ( JA )) YLINE ( J : J ) = YUP ( JA ) END DO END DO IND1 = INDEX ( YLINE , '&' // HDNAML ) IF ( IND1 . NE . 0 ) THEN YLTEST = YLINE ( IND1 + ILEN + 1 : IND1 + ILEN + 1 ) IF ( YLTEST == ' ' ) THEN !           NAMELIST FOUND : RETURN BACKSPACE ( KULNAM ) OFOUND = . TRUE . IF ( PRESENT ( KLUOUT )) WRITE ( KLUOUT , FMT =* ) '-- namelist ' , HDNAML , ' read' IF ( LHOOK ) CALL DR_HOOK ( 'MODE_POS_SURF:POSNAM' , 1 , ZHOOK_HANDLE ) RETURN ENDIF ENDIF ENDIF ENDIF ENDDO search_nam 100 CONTINUE IF ( JFILE == 1 ) REWIND ( KULNAM ) ENDDO BACKSPACE ( KULNAM ) ! end of file: namelist name not found IF ( PRESENT ( KLUOUT )) & WRITE ( KLUOUT , FMT =* ) & '-- namelist ' , HDNAML , ' not found: default values used if required' IF ( LHOOK ) CALL DR_HOOK ( 'MODE_POS_SURF:POSNAM' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------ END SUBROUTINE POSNAM","tags":"","loc":"proc/posnam.html"},{"title":"POSKEY – Town Energy Balance (TEB) model API docs","text":"public subroutine POSKEY(KULNAM, KLUOUT, HKEYWD1, HKEYWD2) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KULNAM integer, intent(in) :: KLUOUT character(len=*), intent(in) :: HKEYWD1 character(len=*), intent(in), optional :: HKEYWD2 Contents Source Code POSKEY Source Code SUBROUTINE POSKEY ( KULNAM , KLUOUT , HKEYWD1 , HKEYWD2 ) !!    ################################################ !! !!*** *POSKEY* !! !!    PURPOSE !!    ------- !     To position namelist file at correct place after reading !     keyword HKEYWD !! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !! !!    IMPLICIT ARGUMENT !!    ----------------- !! !!    REFERENCE !!    ---------- !! !!    AUTHOR !!    ------- !!       I. Mallet *Meteo-France* !! !!    MODIFICATIONS !!    -------------- !!       Original : 15/10/01 !------------------------------------------------------------------------------ ! IMPLICIT NONE ! !*       0.    DECLARATIONS !              ------------ ! !*       0.1   Declarations of arguments ! INTEGER , INTENT ( IN ) :: KULNAM INTEGER , INTENT ( IN ) :: KLUOUT CHARACTER ( LEN =* ), INTENT ( IN ) :: HKEYWD1 CHARACTER ( LEN =* ), OPTIONAL , INTENT ( IN ) :: HKEYWD2 ! !*       0.2   Declarations of local variables ! CHARACTER ( LEN = 120 ) :: YLINE INTEGER :: ILEN1 , ILEN2 , IRET REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! !*       1.    POSITION FILE !              ------------- ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_POS_SURF:POSKEY' , 0 , ZHOOK_HANDLE ) REWIND ( KULNAM ) ILEN1 = LEN ( HKEYWD1 ) IF ( PRESENT ( HKEYWD2 )) ILEN2 = LEN ( HKEYWD2 ) ! search_key : DO YLINE = ' ' READ ( UNIT = KULNAM , FMT = '(A)' , IOSTAT = IRET , END = 100 ) YLINE IF ( IRET /= 0 ) THEN WRITE ( KLUOUT , FMT =* ) '-> error when reading line from unit ' , KULNAM ELSE YLINE = ADJUSTL ( YLINE ) IF ( YLINE ( 1 : ILEN1 ) . EQ . HKEYWD1 ( 1 : ILEN1 )) EXIT search_key ENDIF ENDDO search_key ! WRITE ( KLUOUT , FMT =* ) '-- keyword ' , HKEYWD1 , ' found' ! IF ( LHOOK ) CALL DR_HOOK ( 'MODE_POS_SURF:POSKEY' , 1 , ZHOOK_HANDLE ) RETURN ! ! end of file: keyword not found 100 CONTINUE IF (. NOT . PRESENT ( HKEYWD2 )) THEN CALL ABOR1_SFX ( 'MODE_POS_SURF: KEYWORD NOT FOUND: ' // HKEYWD1 ) ELSE ! !*       2.    SECOND KEYWORD: POSITION FILE !              ----------------------------- ! REWIND ( KULNAM ) search_key2 : DO YLINE = ' ' READ ( UNIT = KULNAM , FMT = '(A)' , IOSTAT = IRET , END = 101 ) YLINE IF ( IRET /= 0 ) THEN WRITE ( KLUOUT , FMT =* ) '-> error when reading line from unit ' , KULNAM ELSE YLINE = ADJUSTL ( YLINE ) IF ( YLINE ( 1 : ILEN2 ) . EQ . HKEYWD2 ( 1 : ILEN2 )) EXIT search_key2 ENDIF ENDDO search_key2 WRITE ( KLUOUT , FMT =* ) '-- keyword ' , HKEYWD2 , ' found' IF ( LHOOK ) CALL DR_HOOK ( 'MODE_POS_SURF:POSKEY' , 1 , ZHOOK_HANDLE ) RETURN END IF ! end of file: scd keyword not found 101 CONTINUE CALL ABOR1_SFX ( 'MODE_POS_SURF: KEYWORD NOT FOUND: ' // HKEYWD2 ) IF ( LHOOK ) CALL DR_HOOK ( 'MODE_POS_SURF:POSKEY' , 1 , ZHOOK_HANDLE ) !------------------------------------------------------------------ END SUBROUTINE POSKEY","tags":"","loc":"proc/poskey.html"},{"title":"POS – Town Energy Balance (TEB) model API docs","text":"public interface POS Contents Module Procedures POSNAM POSKEY Module Procedures public subroutine POSNAM (KULNAM, HDNAML, OFOUND, KLUOUT) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KULNAM character(len=*), intent(in) :: HDNAML logical, intent(out) :: OFOUND integer, intent(in), optional :: KLUOUT public subroutine POSKEY (KULNAM, KLUOUT, HKEYWD1, HKEYWD2) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KULNAM integer, intent(in) :: KLUOUT character(len=*), intent(in) :: HKEYWD1 character(len=*), intent(in), optional :: HKEYWD2","tags":"","loc":"interface/pos.html"},{"title":"MASS_LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"interface public subroutine MASS_LAYER_E_BUDGET(B, PTSTEP, PFLX_BLD_MA, PDQS_MA, PIMB_MA, PRADHT_IN, PRAD_WL_MA, PRAD_RF_MA, PRAD_WIN_MA, PLOAD_MA, PRAD_FL_MA, PCONV_MA_BLD) Arguments Type Intent Optional Attributes Name type(BEM_t), intent(inout) :: B real, intent(in) :: PTSTEP real, intent(out), DIMENSION(:) :: PFLX_BLD_MA real, intent(out), DIMENSION(:) :: PDQS_MA real, intent(out), DIMENSION(:) :: PIMB_MA real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PRAD_WL_MA real, intent(in), DIMENSION(:) :: PRAD_RF_MA real, intent(in), DIMENSION(:) :: PRAD_WIN_MA real, intent(in), DIMENSION(:) :: PLOAD_MA real, intent(in), DIMENSION(:) :: PRAD_FL_MA real, intent(out), DIMENSION(:) :: PCONV_MA_BLD","tags":"","loc":"interface/mass_layer_e_budget.html"},{"title":"OCEAN_REL_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine OCEAN_REL_INIT(YOCEAN_REL) Arguments Type Intent Optional Attributes Name type( OCEAN_REL_t ), intent(inout) :: YOCEAN_REL Contents Source Code OCEAN_REL_INIT Source Code SUBROUTINE OCEAN_REL_INIT ( YOCEAN_REL ) TYPE ( OCEAN_REL_t ), INTENT ( INOUT ) :: YOCEAN_REL REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_OCEAN_REL_N:OCEAN_REL_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YOCEAN_REL % XSEAT_REL ) NULLIFY ( YOCEAN_REL % XSEAS_REL ) NULLIFY ( YOCEAN_REL % XSEAU_REL ) NULLIFY ( YOCEAN_REL % XSEAV_REL ) YOCEAN_REL % XTAU_REL = 0. YOCEAN_REL % XQCORR = 0. YOCEAN_REL % LREL_CUR = . FALSE . YOCEAN_REL % LREL_TS = . FALSE . YOCEAN_REL % LFLUX_NULL = . FALSE . YOCEAN_REL % LFLX_CORR = . FALSE . YOCEAN_REL % LDIAPYCNAL = . FALSE . ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_OCEAN_REL_N:OCEAN_REL_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE OCEAN_REL_INIT","tags":"","loc":"proc/ocean_rel_init.html"},{"title":"URBAN_SNOW_EVOL – Town Energy Balance (TEB) model API docs","text":"interface public subroutine URBAN_SNOW_EVOL(T, B, PT_LWCN, PQ_LWCN, PU_LWCN, PTS_RF, PTS_RD, PTS_WL_A, PTS_WL_B, PPS, PTA, PQA, PRHOA, PLW_RAD, PSR, PZREF, PUREF, PVMOD, PTSTEP, PZ_LWCN, PDN_RF, PABS_SW_SN_RF, PABS_LW_SN_RF, PDN_RD, PABS_SW_SN_RD, PABS_LW_SN_RD, PRNSN_RF, PHSN_RF, PLESN_RF, PGSN_RF, PMELT_RF, PRNSN_RD, PHSN_RD, PLESN_RD, PGSN_RD, PMELT_RD, PLW_WA_TO_NR, PLW_WB_TO_NR, PLW_S_TO_NR, PLW_WIN_TO_NR, PDQS_SN_RF, PDQS_SN_RD) Arguments Type Intent Optional Attributes Name type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B real, intent(in), DIMENSION(:) :: PT_LWCN real, intent(in), DIMENSION(:) :: PQ_LWCN real, intent(in), DIMENSION(:) :: PU_LWCN real, intent(in), DIMENSION(:) :: PTS_RF real, intent(in), DIMENSION(:) :: PTS_RD real, intent(in), DIMENSION(:) :: PTS_WL_A real, intent(in), DIMENSION(:) :: PTS_WL_B real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PZ_LWCN real, intent(in), DIMENSION(:) :: PDN_RF real, intent(in), DIMENSION(:) :: PABS_SW_SN_RF real, intent(out), DIMENSION(:) :: PABS_LW_SN_RF real, intent(inout), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PABS_SW_SN_RD real, intent(out), DIMENSION(:) :: PABS_LW_SN_RD real, intent(out), DIMENSION(:) :: PRNSN_RF real, intent(out), DIMENSION(:) :: PHSN_RF real, intent(out), DIMENSION(:) :: PLESN_RF real, intent(out), DIMENSION(:) :: PGSN_RF real, intent(out), DIMENSION(:) :: PMELT_RF real, intent(out), DIMENSION(:) :: PRNSN_RD real, intent(out), DIMENSION(:) :: PHSN_RD real, intent(out), DIMENSION(:) :: PLESN_RD real, intent(out), DIMENSION(:) :: PGSN_RD real, intent(out), DIMENSION(:) :: PMELT_RD real, intent(in), DIMENSION(:) :: PLW_WA_TO_NR real, intent(in), DIMENSION(:) :: PLW_WB_TO_NR real, intent(in), DIMENSION(:) :: PLW_S_TO_NR real, intent(in), DIMENSION(:) :: PLW_WIN_TO_NR real, intent(out), DIMENSION(:) :: PDQS_SN_RF real, intent(out), DIMENSION(:) :: PDQS_SN_RD","tags":"","loc":"interface/urban_snow_evol.html"},{"title":"FLAG_GR_SNOW – Town Energy Balance (TEB) model API docs","text":"interface public subroutine FLAG_GR_SNOW(KFLAG, OMASK, TPSNOW) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KFLAG logical, intent(in), DIMENSION(:) :: OMASK type(SURF_SNOW), intent(inout) :: TPSNOW","tags":"","loc":"interface/flag_gr_snow.html"},{"title":"DATA_TEB_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DATA_TEB_INIT(YDATA_TEB) Arguments Type Intent Optional Attributes Name type( DATA_TEB_t ), intent(inout) :: YDATA_TEB Contents Source Code DATA_TEB_INIT Source Code SUBROUTINE DATA_TEB_INIT ( YDATA_TEB ) TYPE ( DATA_TEB_t ), INTENT ( INOUT ) :: YDATA_TEB REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_TEB_N:DATA_TEB_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDATA_TEB % NPAR_BLDTYPE ) NULLIFY ( YDATA_TEB % NPAR_BLD_AGE ) NULLIFY ( YDATA_TEB % NPAR_BLDCODE ) NULLIFY ( YDATA_TEB % NPAR_USETYPE ) NULLIFY ( YDATA_TEB % XPAR_GARDEN ) NULLIFY ( YDATA_TEB % XPAR_GREENROOF ) NULLIFY ( YDATA_TEB % XPAR_ROAD_DIR ) NULLIFY ( YDATA_TEB % XPAR_BLD ) NULLIFY ( YDATA_TEB % XPAR_BLD_HEIGHT ) NULLIFY ( YDATA_TEB % XPAR_WALL_O_HOR ) NULLIFY ( YDATA_TEB % XPAR_Z0_TOWN ) NULLIFY ( YDATA_TEB % XPAR_ALB_ROOF ) NULLIFY ( YDATA_TEB % XPAR_EMIS_ROOF ) NULLIFY ( YDATA_TEB % XPAR_HC_ROOF ) NULLIFY ( YDATA_TEB % XPAR_TC_ROOF ) NULLIFY ( YDATA_TEB % XPAR_D_ROOF ) NULLIFY ( YDATA_TEB % XPAR_ALB_ROAD ) NULLIFY ( YDATA_TEB % XPAR_EMIS_ROAD ) NULLIFY ( YDATA_TEB % XPAR_HC_ROAD ) NULLIFY ( YDATA_TEB % XPAR_TC_ROAD ) NULLIFY ( YDATA_TEB % XPAR_D_ROAD ) NULLIFY ( YDATA_TEB % XPAR_ALB_WALL ) NULLIFY ( YDATA_TEB % XPAR_EMIS_WALL ) NULLIFY ( YDATA_TEB % XPAR_HC_WALL ) NULLIFY ( YDATA_TEB % XPAR_TC_WALL ) NULLIFY ( YDATA_TEB % XPAR_D_WALL ) NULLIFY ( YDATA_TEB % XPAR_H_TRAFFIC ) NULLIFY ( YDATA_TEB % XPAR_LE_TRAFFIC ) NULLIFY ( YDATA_TEB % XPAR_H_INDUSTRY ) NULLIFY ( YDATA_TEB % XPAR_LE_INDUSTRY ) NULLIFY ( YDATA_TEB % XPAR_ROUGH_ROOF ) NULLIFY ( YDATA_TEB % XPAR_ROUGH_WALL ) NULLIFY ( YDATA_TEB % XPAR_RESIDENTIAL ) NULLIFY ( YDATA_TEB % XPAR_EMIS_PANEL ) NULLIFY ( YDATA_TEB % XPAR_ALB_PANEL ) NULLIFY ( YDATA_TEB % XPAR_EFF_PANEL ) NULLIFY ( YDATA_TEB % XPAR_EMIS_PANEL ) YDATA_TEB % LDATA_BLDTYPE = . FALSE . YDATA_TEB % LDATA_BLD_AGE = . FALSE . YDATA_TEB % LDATA_USETYPE = . FALSE . YDATA_TEB % LDATA_GARDEN = . FALSE . YDATA_TEB % LDATA_GREENROOF = . FALSE . YDATA_TEB % LDATA_ROAD_DIR = . FALSE . YDATA_TEB % LDATA_BLD = . FALSE . YDATA_TEB % LDATA_BLD_HEIGHT = . FALSE . YDATA_TEB % LDATA_WALL_O_HOR = . FALSE . YDATA_TEB % LDATA_Z0_TOWN = . FALSE . YDATA_TEB % LDATA_ALB_ROOF = . FALSE . YDATA_TEB % LDATA_EMIS_ROOF = . FALSE . YDATA_TEB % LDATA_HC_ROOF = . FALSE . YDATA_TEB % LDATA_TC_ROOF = . FALSE . YDATA_TEB % LDATA_D_ROOF = . FALSE . YDATA_TEB % LDATA_ALB_ROAD = . FALSE . YDATA_TEB % LDATA_EMIS_ROAD = . FALSE . YDATA_TEB % LDATA_HC_ROAD = . FALSE . YDATA_TEB % LDATA_TC_ROAD = . FALSE . YDATA_TEB % LDATA_D_ROAD = . FALSE . YDATA_TEB % LDATA_ALB_WALL = . FALSE . YDATA_TEB % LDATA_EMIS_WALL = . FALSE . YDATA_TEB % LDATA_HC_WALL = . FALSE . YDATA_TEB % LDATA_TC_WALL = . FALSE . YDATA_TEB % LDATA_D_WALL = . FALSE . YDATA_TEB % LDATA_H_TRAFFIC = . FALSE . YDATA_TEB % LDATA_LE_TRAFFIC = . FALSE . YDATA_TEB % LDATA_H_INDUSTRY = . FALSE . YDATA_TEB % LDATA_LE_INDUSTRY = . FALSE . YDATA_TEB % LDATA_ROUGH_ROOF = . FALSE . YDATA_TEB % LDATA_ROUGH_WALL = . FALSE . YDATA_TEB % LDATA_RESIDENTIAL = . FALSE . YDATA_TEB % LDATA_EMIS_PANEL = . FALSE . YDATA_TEB % LDATA_ALB_PANEL = . FALSE . YDATA_TEB % LDATA_EFF_PANEL = . FALSE . YDATA_TEB % LDATA_FRAC_PANEL = . FALSE . YDATA_TEB % NPAR_ROOF_LAYER = 0 YDATA_TEB % NPAR_ROAD_LAYER = 0 YDATA_TEB % NPAR_WALL_LAYER = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_TEB_N:DATA_TEB_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DATA_TEB_INIT","tags":"","loc":"proc/data_teb_init.html"},{"title":"ISBA_SNOW_FRAC – Town Energy Balance (TEB) model API docs","text":"interface public subroutine ISBA_SNOW_FRAC(HSNOW, PWSNOW, PRSNOW, PASNOW, PVEG, PLAI, PZ0, PPSN, PPSNV_A, PPSNG, PPSNV) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: HSNOW real, intent(in), DIMENSION(:,:) :: PWSNOW real, intent(in), DIMENSION(:,:) :: PRSNOW real, intent(in), DIMENSION(:) :: PASNOW real, intent(in), DIMENSION(:) :: PVEG real, intent(in), DIMENSION(:) :: PLAI real, intent(in), DIMENSION(:) :: PZ0 real, intent(inout), DIMENSION(:) :: PPSN real, intent(inout), DIMENSION(:) :: PPSNV_A real, intent(inout), DIMENSION(:) :: PPSNG real, intent(inout), DIMENSION(:) :: PPSNV","tags":"","loc":"interface/isba_snow_frac.html"},{"title":"TEB_PANEL_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine TEB_PANEL_INIT(YTEB_PANEL) Arguments Type Intent Optional Attributes Name type( TEB_PANEL_t ), intent(inout) :: YTEB_PANEL Contents Source Code TEB_PANEL_INIT Source Code SUBROUTINE TEB_PANEL_INIT ( YTEB_PANEL ) TYPE ( TEB_PANEL_t ), INTENT ( INOUT ) :: YTEB_PANEL REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_PANEL_N:TEB_PANEL_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YTEB_PANEL % XEMIS_PANEL ) NULLIFY ( YTEB_PANEL % XALB_PANEL ) NULLIFY ( YTEB_PANEL % XEFF_PANEL ) NULLIFY ( YTEB_PANEL % XFRAC_PANEL ) NULLIFY ( YTEB_PANEL % XTHER_PRODC_DAY ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_PANEL_N:TEB_PANEL_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE TEB_PANEL_INIT","tags":"","loc":"proc/teb_panel_init.html"},{"title":"CH_EMIS_SNAP_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine CH_EMIS_SNAP_INIT(YCH_EMIS_SNAP) Arguments Type Intent Optional Attributes Name type( CH_EMIS_SNAP_t ), intent(inout) :: YCH_EMIS_SNAP Contents Source Code CH_EMIS_SNAP_INIT Source Code SUBROUTINE CH_EMIS_SNAP_INIT ( YCH_EMIS_SNAP ) TYPE ( CH_EMIS_SNAP_t ), INTENT ( INOUT ) :: YCH_EMIS_SNAP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_SNAP_n:CH_EMIS_FIELD_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YCH_EMIS_SNAP % CEMIS_COMMENT ) NULLIFY ( YCH_EMIS_SNAP % CEMIS_NAME ) NULLIFY ( YCH_EMIS_SNAP % XDELTA_LEGAL_TIME ) NULLIFY ( YCH_EMIS_SNAP % XEMIS_FIELDS ) NULLIFY ( YCH_EMIS_SNAP % XEMIS_FIELDS_SNAP ) NULLIFY ( YCH_EMIS_SNAP % XSNAP_DAILY ) NULLIFY ( YCH_EMIS_SNAP % XSNAP_HOURLY ) NULLIFY ( YCH_EMIS_SNAP % XSNAP_MONTHLY ) NULLIFY ( YCH_EMIS_SNAP % XCONVERSION ) YCH_EMIS_SNAP % CCONVERSION = ' ' YCH_EMIS_SNAP % CSNAP_TIME_REF = ' ' YCH_EMIS_SNAP % NEMIS_NBR = 0 YCH_EMIS_SNAP % NEMIS_SNAP = 0 YCH_EMIS_SNAP % NSNAP_M = 0 YCH_EMIS_SNAP % NSNAP_D = 0 YCH_EMIS_SNAP % NSNAP_H = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_SNAP_n:CH_EMIS_FIELD_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_EMIS_SNAP_INIT","tags":"","loc":"proc/ch_emis_snap_init.html"},{"title":"WALL_LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"interface public subroutine WALL_LAYER_E_BUDGET(TOP, T, B, PT_WL, PTS_WL_B, PTI_WL_B, PTSTEP, PDN_RD, PRHOA, PAC_WL, PAC_BLD, PLW_RAD, PPS, PEXNS, PABS_SW_WL, PT_CANYON, PTS_RD, PTSNOW_RD, PTS_GD, PTS_FL, PLW_WA_TO_WB, PLW_R_TO_W, PLW_G_TO_W, PLW_NR_TO_W, PLW_WIN_TO_W, PLW_S_TO_W, PFLX_BLD_WL, PDQS_WL, PABS_LW_WL, PEMIT_LW_WL, PH_WL, PIMB_WL, PRADHT_IN, PRAD_RF_WL, PRAD_WL_WIN, PRAD_WL_FL, PRAD_WL_MA, PCONV_WL_BLD, PLOAD_IN_WL) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B real, intent(inout), DIMENSION(:,:) :: PT_WL real, intent(in), DIMENSION(:) :: PTS_WL_B real, intent(in), DIMENSION(:) :: PTI_WL_B real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PAC_WL real, intent(in), DIMENSION(:) :: PAC_BLD real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PABS_SW_WL real, intent(in), DIMENSION(:) :: PT_CANYON real, intent(in), DIMENSION(:) :: PTS_RD real, intent(in), DIMENSION(:) :: PTSNOW_RD real, intent(in), DIMENSION(:) :: PTS_GD real, intent(in), DIMENSION(:) :: PTS_FL real, intent(in), DIMENSION(:) :: PLW_WA_TO_WB real, intent(in), DIMENSION(:) :: PLW_R_TO_W real, intent(in), DIMENSION(:) :: PLW_G_TO_W real, intent(in), DIMENSION(:) :: PLW_NR_TO_W real, intent(in), DIMENSION(:) :: PLW_WIN_TO_W real, intent(in), DIMENSION(:) :: PLW_S_TO_W real, intent(out), DIMENSION(:) :: PFLX_BLD_WL real, intent(inout), DIMENSION(:) :: PDQS_WL real, intent(out), DIMENSION(:) :: PABS_LW_WL real, intent(out), DIMENSION(:) :: PEMIT_LW_WL real, intent(out), DIMENSION(:) :: PH_WL real, intent(out), DIMENSION(:) :: PIMB_WL real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PRAD_RF_WL real, intent(out), DIMENSION(:) :: PRAD_WL_WIN real, intent(out), DIMENSION(:) :: PRAD_WL_FL real, intent(out), DIMENSION(:) :: PRAD_WL_MA real, intent(out), DIMENSION(:) :: PCONV_WL_BLD real, intent(in), DIMENSION(:) :: PLOAD_IN_WL","tags":"","loc":"interface/wall_layer_e_budget.html"},{"title":"DATA_TSZ0_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DATA_TSZ0_INIT(YDATA_TSZ0) Arguments Type Intent Optional Attributes Name type( DATA_TSZ0_t ), intent(inout) :: YDATA_TSZ0 Contents Source Code DATA_TSZ0_INIT Source Code SUBROUTINE DATA_TSZ0_INIT ( YDATA_TSZ0 ) TYPE ( DATA_TSZ0_t ), INTENT ( INOUT ) :: YDATA_TSZ0 REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_TSZ0_N:DATA_TSZ0_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDATA_TSZ0 % XDATA_DTS ) NULLIFY ( YDATA_TSZ0 % XDATA_DHUGRD ) YDATA_TSZ0 % NTIME = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_TSZ0_N:DATA_TSZ0_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DATA_TSZ0_INIT","tags":"","loc":"proc/data_tsz0_init.html"},{"title":"DATA_COVER_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DATA_COVER_INIT(YDATA_COVER) Arguments Type Intent Optional Attributes Name type( DATA_COVER_t ), intent(inout) :: YDATA_COVER Contents Source Code DATA_COVER_INIT Source Code SUBROUTINE DATA_COVER_INIT ( YDATA_COVER ) TYPE ( DATA_COVER_t ), INTENT ( INOUT ) :: YDATA_COVER REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_COVER_N:DATA_COVER_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDATA_COVER % XDATA_WEIGHT ) NULLIFY ( YDATA_COVER % XDATA_TOWN ) NULLIFY ( YDATA_COVER % XDATA_NATURE ) NULLIFY ( YDATA_COVER % XDATA_SEA ) NULLIFY ( YDATA_COVER % XDATA_WATER ) NULLIFY ( YDATA_COVER % XDATA_VEGTYPE ) NULLIFY ( YDATA_COVER % XDATA_GARDEN ) NULLIFY ( YDATA_COVER % XDATA_BLD ) NULLIFY ( YDATA_COVER % XDATA_WALL_O_HOR ) YDATA_COVER % LGARDEN = . FALSE . YDATA_COVER % NYEAR = 9999 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_COVER_N:DATA_COVER_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DATA_COVER_INIT","tags":"","loc":"proc/data_cover_init.html"},{"title":"URBAN_EXCH_COEF – Town Energy Balance (TEB) model API docs","text":"interface public subroutine URBAN_EXCH_COEF(HZ0H, PZ0_O_Z0H, PTG, PQS, PEXNS, PEXNA, PTA, PQA, PZREF, PUREF, PVMOD, PZ0, PRI, PCD, PCDN, PAC, PRA, PCH) Arguments Type Intent Optional Attributes Name character(len=6) :: HZ0H real, intent(in) :: PZ0_O_Z0H real, intent(in), DIMENSION(:) :: PTG real, intent(in), DIMENSION(:) :: PQS real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PZ0 real, intent(out), DIMENSION(:) :: PRI real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN real, intent(out), DIMENSION(:) :: PAC real, intent(out), DIMENSION(:) :: PRA real, intent(out), DIMENSION(:) :: PCH","tags":"","loc":"interface/urban_exch_coef.html"},{"title":"DX_AIR_COOLING_COIL_CV – Town Energy Balance (TEB) model API docs","text":"interface public subroutine DX_AIR_COOLING_COIL_CV(PT_CANYON, PQ_CANYON, PPS, PRHOA, PT_IN, PQ_IN, PCOP_RAT, PCAP_SYS_RAT, PT_ADP, PF_WATER_COND, PM_SYS, PH_BLD_COOL, PH_WASTE, PLE_WASTE, PCOP, PCAP_SYS, PT_OUT, PQ_OUT, PDX_POWER, PT_BLD_COOL) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT_CANYON real, intent(in) :: PQ_CANYON real, intent(in) :: PPS real, intent(in) :: PRHOA real, intent(in) :: PT_IN real, intent(in) :: PQ_IN real, intent(in) :: PCOP_RAT real, intent(in) :: PCAP_SYS_RAT real, intent(in) :: PT_ADP real, intent(in) :: PF_WATER_COND real, intent(inout) :: PM_SYS real, intent(inout) :: PH_BLD_COOL real, intent(out) :: PH_WASTE real, intent(out) :: PLE_WASTE real, intent(out) :: PCOP real, intent(out) :: PCAP_SYS real, intent(out) :: PT_OUT real, intent(out) :: PQ_OUT real, intent(out) :: PDX_POWER real, intent(out) :: PT_BLD_COOL","tags":"","loc":"interface/dx_air_cooling_coil_cv.html"},{"title":"DIAG_MISC_SEAICE_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DIAG_MISC_SEAICE_INIT(YDIAG_MISC_SEAICE) Arguments Type Intent Optional Attributes Name type( DIAG_MISC_SEAICE_t ), intent(inout) :: YDIAG_MISC_SEAICE Contents Source Code DIAG_MISC_SEAICE_INIT Source Code SUBROUTINE DIAG_MISC_SEAICE_INIT ( YDIAG_MISC_SEAICE ) TYPE ( DIAG_MISC_SEAICE_t ), INTENT ( INOUT ) :: YDIAG_MISC_SEAICE REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_SEAICE_N:DIAG_MISC_SEAICE_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDIAG_MISC_SEAICE % XSIT ) NULLIFY ( YDIAG_MISC_SEAICE % XSND ) NULLIFY ( YDIAG_MISC_SEAICE % XMLT ) YDIAG_MISC_SEAICE % LDIAG_MISC_SEAICE = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_SEAICE_N:DIAG_MISC_SEAICE_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_MISC_SEAICE_INIT","tags":"","loc":"proc/diag_misc_seaice_init.html"},{"title":"WIND_THRESHOLD – Town Energy Balance (TEB) model API docs","text":"interface public function WIND_THRESHOLD(PWIND, PUREF) result(PWIND_NEW) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWIND real, intent(in), DIMENSION(:) :: PUREF Return Value real,\n  DIMENSION(SIZE(PWIND))","tags":"","loc":"interface/wind_threshold.html"},{"title":"ROAD_LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"interface public subroutine ROAD_LAYER_E_BUDGET(T, B, PTSTEP, PDN_ROAD, PRHOA, PAC_ROAD, PAC_ROAD_WAT, PLW_RAD, PPS, PQSAT_ROAD, PDELT_ROAD, PEXNS, PABS_SW_ROAD, PGSNOW_ROAD, PQ_LOWCAN, PT_LOWCAN, PTS_WALL_A, PTS_WALL_B, PTSNOW_ROAD, PTS_GARDEN, PLW_WA_TO_R, PLW_WB_TO_R, PLW_S_TO_R, PLW_WIN_TO_R, PEMIT_LW_ROAD, PDQS_ROAD, PABS_LW_ROAD, PHFREE_ROAD, PLEFREE_ROAD, PIMB_ROAD, PRR) Arguments Type Intent Optional Attributes Name type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PDN_ROAD real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PAC_ROAD real, intent(in), DIMENSION(:) :: PAC_ROAD_WAT real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PQSAT_ROAD real, intent(in), DIMENSION(:) :: PDELT_ROAD real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PABS_SW_ROAD real, intent(in), DIMENSION(:) :: PGSNOW_ROAD real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PTS_WALL_A real, intent(in), DIMENSION(:) :: PTS_WALL_B real, intent(in), DIMENSION(:) :: PTSNOW_ROAD real, intent(in), DIMENSION(:) :: PTS_GARDEN real, intent(in), DIMENSION(:) :: PLW_WA_TO_R real, intent(in), DIMENSION(:) :: PLW_WB_TO_R real, intent(in), DIMENSION(:) :: PLW_S_TO_R real, intent(in), DIMENSION(:) :: PLW_WIN_TO_R real, intent(out), DIMENSION(:) :: PEMIT_LW_ROAD real, intent(out), DIMENSION(:) :: PDQS_ROAD real, intent(out), DIMENSION(:) :: PABS_LW_ROAD real, intent(out), DIMENSION(:) :: PHFREE_ROAD real, intent(out), DIMENSION(:) :: PLEFREE_ROAD real, intent(out), DIMENSION(:) :: PIMB_ROAD real, intent(in), DIMENSION(:) :: PRR","tags":"","loc":"interface/road_layer_e_budget.html"},{"title":"TEB_OPTIONS_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine TEB_OPTIONS_INIT(YTEB_OPTIONS) Arguments Type Intent Optional Attributes Name type( TEB_OPTIONS_t ), intent(inout) :: YTEB_OPTIONS Contents Source Code TEB_OPTIONS_INIT Source Code SUBROUTINE TEB_OPTIONS_INIT ( YTEB_OPTIONS ) TYPE ( TEB_OPTIONS_t ), INTENT ( INOUT ) :: YTEB_OPTIONS REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_N:TEB_OPTIONS_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YTEB_OPTIONS % XZS ) NULLIFY ( YTEB_OPTIONS % XCOVER ) NULLIFY ( YTEB_OPTIONS % LCOVER ) NULLIFY ( YTEB_OPTIONS % XTEB_PATCH ) YTEB_OPTIONS % LCANOPY = . FALSE . YTEB_OPTIONS % LGARDEN = . FALSE . YTEB_OPTIONS % CROAD_DIR = ' ' YTEB_OPTIONS % CWALL_OPT = ' ' YTEB_OPTIONS % CBLD_ATYPE = ' ' YTEB_OPTIONS % CZ0H = ' ' YTEB_OPTIONS % CCH_BEM = ' ' YTEB_OPTIONS % CBEM = ' ' YTEB_OPTIONS % CTREE = ' ' YTEB_OPTIONS % LGREENROOF = . FALSE . YTEB_OPTIONS % LHYDRO = . FALSE . YTEB_OPTIONS % LSOLAR_PANEL = . FALSE . YTEB_OPTIONS % LECOCLIMAP = . FALSE . YTEB_OPTIONS % NTEB_PATCH = 0 YTEB_OPTIONS % NROOF_LAYER = 0 YTEB_OPTIONS % NROAD_LAYER = 0 YTEB_OPTIONS % NWALL_LAYER = 0 YTEB_OPTIONS % XTSTEP = 0. YTEB_OPTIONS % XOUT_TSTEP = 0. IF ( LHOOK ) CALL DR_HOOK ( \"MODD_TEB_N:TEB_OPTIONS_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE TEB_OPTIONS_INIT","tags":"","loc":"proc/teb_options_init.html"},{"title":"SURF_ATM_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine SURF_ATM_INIT(YSURF_ATM) Arguments Type Intent Optional Attributes Name type( SURF_ATM_t ), intent(inout) :: YSURF_ATM Contents Source Code SURF_ATM_INIT Source Code SUBROUTINE SURF_ATM_INIT ( YSURF_ATM ) TYPE ( SURF_ATM_t ), INTENT ( INOUT ) :: YSURF_ATM REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SURF_ATM_N:SURF_ATM_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YSURF_ATM % XTOWN ) NULLIFY ( YSURF_ATM % XNATURE ) NULLIFY ( YSURF_ATM % XWATER ) NULLIFY ( YSURF_ATM % XSEA ) NULLIFY ( YSURF_ATM % NR_SEA ) NULLIFY ( YSURF_ATM % NR_WATER ) NULLIFY ( YSURF_ATM % NR_TOWN ) NULLIFY ( YSURF_ATM % NR_NATURE ) NULLIFY ( YSURF_ATM % XCOVER ) NULLIFY ( YSURF_ATM % LCOVER ) NULLIFY ( YSURF_ATM % XZS ) NULLIFY ( YSURF_ATM % XRAIN ) NULLIFY ( YSURF_ATM % XSNOW ) NULLIFY ( YSURF_ATM % XZ0 ) NULLIFY ( YSURF_ATM % XZ0H ) NULLIFY ( YSURF_ATM % XQSURF ) YSURF_ATM % CTOWN = ' ' YSURF_ATM % CNATURE = ' ' YSURF_ATM % CWATER = ' ' YSURF_ATM % CSEA = ' ' YSURF_ATM % LECOCLIMAP = . FALSE . YSURF_ATM % LECOSG = . FALSE . YSURF_ATM % LWATER_TO_NATURE = . FALSE . YSURF_ATM % LTOWN_TO_ROCK = . FALSE . YSURF_ATM % LGARDEN = . FALSE . YSURF_ATM % NSIZE_SEA = 0 YSURF_ATM % NDIM_SEA = 0 YSURF_ATM % NSIZE_WATER = 0 YSURF_ATM % NDIM_WATER = 0 YSURF_ATM % NSIZE_TOWN = 0 YSURF_ATM % NDIM_TOWN = 0 YSURF_ATM % NSIZE_NATURE = 0 YSURF_ATM % NDIM_NATURE = 0 YSURF_ATM % NSIZE_FULL = 0 YSURF_ATM % NDIM_FULL = 0 YSURF_ATM % NIMAX_SURF_ll = 0 YSURF_ATM % NJMAX_SURF_ll = 0 YSURF_ATM % NIMAX_SURF_LOC = 0 YSURF_ATM % NJMAX_SURF_LOC = 0 YSURF_ATM % XOUT_TSTEP = 0. IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SURF_ATM_N:SURF_ATM_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE SURF_ATM_INIT","tags":"","loc":"proc/surf_atm_init.html"},{"title":"VSLOG – Town Energy Balance (TEB) model API docs","text":"interface public subroutine VSLOG(PA, PLOG, N) Arguments Type Intent Optional Attributes Name real :: PA (N) real :: PLOG (N) integer :: N","tags":"","loc":"interface/vslog.html"},{"title":"BEM – Town Energy Balance (TEB) model API docs","text":"interface public subroutine BEM(BOP, T, B, DMT, PTSTEP, PSUNTIME, KDAY, PPS, PRHOA, PT_CAN, PQ_CAN, PU_CAN, PHU_BLD, PT_RAD_IND, PFLX_BLD_FL, PFLX_BLD_MA, PRADHT_IN, PRAD_RF_MA, PRAD_RF_FL, PRAD_WL_MA, PRAD_WL_FL, PRAD_WIN_MA, PRAD_WIN_FL, PCONV_RF_BLD, PCONV_WL_BLD, PCONV_WIN_BLD, PLOAD_IN_FL, PLOAD_IN_MA) Arguments Type Intent Optional Attributes Name type(BEM_OPTIONS_t), intent(inout) :: BOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B type(DIAG_MISC_TEB_t), intent(inout) :: DMT real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PSUNTIME integer, intent(in) :: KDAY real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PT_CAN real, intent(in), DIMENSION(:) :: PQ_CAN real, intent(in), DIMENSION(:) :: PU_CAN real, intent(out), DIMENSION(:) :: PHU_BLD real, intent(in), DIMENSION(:) :: PT_RAD_IND real, intent(out), DIMENSION(:) :: PFLX_BLD_FL real, intent(out), DIMENSION(:) :: PFLX_BLD_MA real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PRAD_RF_MA real, intent(in), DIMENSION(:) :: PRAD_RF_FL real, intent(in), DIMENSION(:) :: PRAD_WL_MA real, intent(in), DIMENSION(:) :: PRAD_WL_FL real, intent(in), DIMENSION(:) :: PRAD_WIN_MA real, intent(in), DIMENSION(:) :: PRAD_WIN_FL real, intent(in), DIMENSION(:) :: PCONV_RF_BLD real, intent(in), DIMENSION(:) :: PCONV_WL_BLD real, intent(in), DIMENSION(:) :: PCONV_WIN_BLD real, intent(in), DIMENSION(:) :: PLOAD_IN_FL real, intent(in), DIMENSION(:) :: PLOAD_IN_MA","tags":"","loc":"interface/bem.html"},{"title":"SURFACE_AERO_COND – Town Energy Balance (TEB) model API docs","text":"interface public subroutine SURFACE_AERO_COND(PRI, PZREF, PUREF, PVMOD, PZ0, PZ0H, PAC, PRA, PCH) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PRI real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PZ0 real, intent(in), DIMENSION(:) :: PZ0H real, intent(out), DIMENSION(:) :: PAC real, intent(out), DIMENSION(:) :: PRA real, intent(out), DIMENSION(:) :: PCH","tags":"","loc":"interface/surface_aero_cond.html"},{"title":"CHTC_VERT_DOE_0D – Town Energy Balance (TEB) model API docs","text":"public function CHTC_VERT_DOE_0D(PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PTS real, intent(in) :: PTA Return Value real Contents Source Code CHTC_VERT_DOE_0D Source Code FUNCTION CHTC_VERT_DOE_0D ( PTS , PTA ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_VERT_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     a vertical surface from surface temperature and air !     temperature ! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , INTENT ( IN ) :: PTS ! Surface temperature (Kelvin) REAL , INTENT ( IN ) :: PTA ! Air temperature (Kelvin) REAL :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_VERT_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE THE CHTC !              ---------------- ! PCHTC = 1.31 * ( ABS ( PTA - PTS )) ** ( 1. / 3. ) !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_VERT_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_VERT_DOE_0D","tags":"","loc":"proc/chtc_vert_doe_0d.html"},{"title":"CHTC_VERT_DOE_1D – Town Energy Balance (TEB) model API docs","text":"public function CHTC_VERT_DOE_1D(PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PTS real, intent(in), DIMENSION(:) :: PTA Return Value real,\n  DIMENSION(SIZE(PTS)) Contents Source Code CHTC_VERT_DOE_1D Source Code FUNCTION CHTC_VERT_DOE_1D ( PTS , PTA ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_VERT_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     a vertical surface from surface temperature and air !     temperature ! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! ! REAL , DIMENSION (:), INTENT ( IN ) :: PTS ! Surface temperature (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! Air temperature (Kelvin) REAL , DIMENSION ( SIZE ( PTS )) :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_VERT_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE THE CHTC !              ---------------- ! PCHTC = 1.31 * ( ABS ( PTA - PTS )) ** ( 1. / 3. ) !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_VERT_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_VERT_DOE_1D","tags":"","loc":"proc/chtc_vert_doe_1d.html"},{"title":"CHTC_UP_DOE_1D – Town Energy Balance (TEB) model API docs","text":"public function CHTC_UP_DOE_1D(PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PTS real, intent(in), DIMENSION(:) :: PTA Return Value real,\n  DIMENSION(SIZE(PTS)) Contents Source Code CHTC_UP_DOE_1D Source Code FUNCTION CHTC_UP_DOE_1D ( PTS , PTA ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_UP_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     an upward surface from surface temperature and air !     temperature ! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , DIMENSION (:), INTENT ( IN ) :: PTS ! Surface temperature (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! Air temperature (Kelvin) REAL , DIMENSION ( SIZE ( PTS )) :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_UP_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE THE CHTC !              ---------------- ! WHERE ( PTA < PTS ) PCHTC = 9.482 * ( PTS - PTA ) ** ( 1. / 3. ) / ( 7.283 - 1 ) ELSE WHERE PCHTC = 1.810 * ( PTA - PTS ) ** ( 1. / 3. ) / ( 1.382 + 1 ) END WHERE ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_UP_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_UP_DOE_1D","tags":"","loc":"proc/chtc_up_doe_1d.html"},{"title":"CHTC_UP_DOE_0D – Town Energy Balance (TEB) model API docs","text":"public function CHTC_UP_DOE_0D(PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PTS real, intent(in) :: PTA Return Value real Contents Source Code CHTC_UP_DOE_0D Source Code FUNCTION CHTC_UP_DOE_0D ( PTS , PTA ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_UP_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     an upward surface from surface temperature and air !     temperature ! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , INTENT ( IN ) :: PTS ! Surface temperature (Kelvin) REAL , INTENT ( IN ) :: PTA ! Air temperature (Kelvin) REAL :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_UP_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE THE CHTC !              ---------------- ! IF ( PTA < PTS ) THEN PCHTC = 9.482 * ( PTS - PTA ) ** ( 1. / 3. ) / ( 7.283 - 1 ) ELSE PCHTC = 1.810 * ( PTA - PTS ) ** ( 1. / 3. ) / ( 1.382 + 1 ) ENDIF ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_UP_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_UP_DOE_0D","tags":"","loc":"proc/chtc_up_doe_0d.html"},{"title":"CHTC_DOWN_DOE – Town Energy Balance (TEB) model API docs","text":"public function CHTC_DOWN_DOE(PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PTS real, intent(in), DIMENSION(:) :: PTA Return Value real,\n  DIMENSION(SIZE(PTS)) Contents Source Code CHTC_DOWN_DOE Source Code FUNCTION CHTC_DOWN_DOE ( PTS , PTA ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_DOWN_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     an downward surface from surface temperature and air !     temperature ! !!**  METHOD !!    ------ !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , DIMENSION (:), INTENT ( IN ) :: PTS ! Surface temperature (Kelvin) REAL , DIMENSION (:), INTENT ( IN ) :: PTA ! Air temperature (Kelvin) REAL , DIMENSION ( SIZE ( PTS )) :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_DOWN_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE THE CHTC !              ---------------- ! WHERE ( PTA > PTS ) PCHTC = 9.482 * ( PTA - PTS ) ** ( 1. / 3. ) / ( 7.283 - 1 ) ELSE WHERE PCHTC = 1.810 * ( PTS - PTA ) ** ( 1. / 3. ) / ( 1.382 + 1 ) END WHERE ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_DOWN_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_DOWN_DOE","tags":"","loc":"proc/chtc_down_doe.html"},{"title":"CHTC_SMOOTH_LEE_DOE_0D – Town Energy Balance (TEB) model API docs","text":"public function CHTC_SMOOTH_LEE_DOE_0D(PCHTCN, PVMOD) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PCHTCN real, intent(in) :: PVMOD Return Value real Contents Source Code CHTC_SMOOTH_LEE_DOE_0D Source Code FUNCTION CHTC_SMOOTH_LEE_DOE_0D ( PCHTCN , PVMOD ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_SMOOTH_LEE_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     a leeward smooth surface from the natural convection coef and the !     wind speed ! !!**  METHOD !!    ------ !! !!    from EnergyPlus Engineering Reference, average the leeward/windward coef !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , INTENT ( IN ) :: PCHTCN ! Convective heat transfer coefficient for natural conv. [W/(m2.K)] REAL , INTENT ( IN ) :: PVMOD ! wind speed (m/s) REAL :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! !*       0.2   Declarations of local variables ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE REAL :: ZALEE , ZBLEE ! coef for leeward facade !---------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_SMOOTH_LEE_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    INITIALIZE COEF !              ---------------- ! ZALEE = 2.86 ZBLEE = 0.617 !*       2.    COMPUTE THE CHTC !              ---------------- ! PCHTC = SQRT ( PCHTCN ** 2 + ( ZALEE * PVMOD ** ZBLEE ) ** 2 ) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_SMOOTH_LEE_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_SMOOTH_LEE_DOE_0D","tags":"","loc":"proc/chtc_smooth_lee_doe_0d.html"},{"title":"CHTC_SMOOTH_LEE_DOE_1D – Town Energy Balance (TEB) model API docs","text":"public function CHTC_SMOOTH_LEE_DOE_1D(PCHTCN, PVMOD) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PCHTCN real, intent(in), DIMENSION(:) :: PVMOD Return Value real,\n  DIMENSION(SIZE(PCHTCN)) Contents Source Code CHTC_SMOOTH_LEE_DOE_1D Source Code FUNCTION CHTC_SMOOTH_LEE_DOE_1D ( PCHTCN , PVMOD ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_SMOOTH_LEE_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     a leeward smooth surface from the natural convection coef and the !     wind speed ! !!**  METHOD !!    ------ !! !!    from EnergyPlus Engineering Reference, average the leeward/windward coef !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , DIMENSION (:), INTENT ( IN ) :: PCHTCN ! Convective heat transfer coefficient for natural conv. [W/(m2.K)] REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! wind speed (m/s) REAL , DIMENSION ( SIZE ( PCHTCN )) :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! !*       0.2   Declarations of local variables ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE REAL :: ZALEE , ZBLEE ! coef for windward/leeward facade !---------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_SMOOTH_LEE_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    INITIALIZE COEF !              ---------------- ! ZALEE = 2.86 ZBLEE = 0.617 !*       2.    COMPUTE THE CHTC !              ---------------- ! PCHTC = SQRT ( PCHTCN ** 2 + ( ZALEE * PVMOD ** ZBLEE ) ** 2 ) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_SMOOTH_LEE_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_SMOOTH_LEE_DOE_1D","tags":"","loc":"proc/chtc_smooth_lee_doe_1d.html"},{"title":"CHTC_SMOOTH_WIND_DOE_0D – Town Energy Balance (TEB) model API docs","text":"public function CHTC_SMOOTH_WIND_DOE_0D(PCHTCN, PVMOD) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PCHTCN real, intent(in) :: PVMOD Return Value real Contents Source Code CHTC_SMOOTH_WIND_DOE_0D Source Code FUNCTION CHTC_SMOOTH_WIND_DOE_0D ( PCHTCN , PVMOD ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_SMOOTH_WIND_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     a smooth surface from the natural convection coef and the !     wind speed ! !!**  METHOD !!    ------ !! !!    from EnergyPlus Engineering Reference, average the leeward/windward coef !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , INTENT ( IN ) :: PCHTCN ! Convective heat transfer coefficient for natural conv. [W/(m2.K)] REAL , INTENT ( IN ) :: PVMOD ! wind speed (m/s) REAL :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! !*       0.2   Declarations of local variables ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE REAL :: ZAWIND , ZBWIND ! coef for windward/leeward facade !---------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_SMOOTH_WIND_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    INITIALIZE COEF !              ---------------- ! ZAWIND = 2.38 ZBWIND = 0.89 !*       2.    COMPUTE THE CHTC !              ---------------- ! PCHTC = SQRT ( PCHTCN ** 2 + ( ZAWIND * PVMOD ** ZBWIND ) ** 2 ) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_SMOOTH_WIND_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_SMOOTH_WIND_DOE_0D","tags":"","loc":"proc/chtc_smooth_wind_doe_0d.html"},{"title":"CHTC_SMOOTH_WIND_DOE_1D – Town Energy Balance (TEB) model API docs","text":"public function CHTC_SMOOTH_WIND_DOE_1D(PCHTCN, PVMOD) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PCHTCN real, intent(in), DIMENSION(:) :: PVMOD Return Value real,\n  DIMENSION(SIZE(PCHTCN)) Contents Source Code CHTC_SMOOTH_WIND_DOE_1D Source Code FUNCTION CHTC_SMOOTH_WIND_DOE_1D ( PCHTCN , PVMOD ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_SMOOTH_WIND_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     a windward smooth surface from the natural convection coef and the !     wind speed ! !!**  METHOD !!    ------ !! !!    from EnergyPlus Engineering Reference, average the leeward/windward coef !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , DIMENSION (:), INTENT ( IN ) :: PCHTCN ! Convective heat transfer coefficient for natural conv. [W/(m2.K)] REAL , DIMENSION (:), INTENT ( IN ) :: PVMOD ! wind speed (m/s) REAL , DIMENSION ( SIZE ( PCHTCN )) :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! !*       0.2   Declarations of local variables ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE REAL :: ZAWIND , ZBWIND ! coef for windward facade !---------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_SMOOTH_WIND_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    INITIALIZE COEF !              ---------------- ! ZAWIND = 2.38 ZBWIND = 0.89 !*       2.    COMPUTE THE CHTC !              ---------------- ! PCHTC = SQRT ( PCHTCN ** 2 + ( ZAWIND * PVMOD ** ZBWIND ) ** 2 ) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_SMOOTH_WIND_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_SMOOTH_WIND_DOE_1D","tags":"","loc":"proc/chtc_smooth_wind_doe_1d.html"},{"title":"CHTC_ROUGH_DOE_0D – Town Energy Balance (TEB) model API docs","text":"public function CHTC_ROUGH_DOE_0D(PCHTCN, PCHTCS, PROUGH) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PCHTCN real, intent(in) :: PCHTCS real, intent(in) :: PROUGH Return Value real Contents Source Code CHTC_ROUGH_DOE_0D Source Code FUNCTION CHTC_ROUGH_DOE_0D ( PCHTCN , PCHTCS , PROUGH ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_ROUGH_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     a rough surface from the natural convection coef, the !     smooth surface convective coef and the roughness coef ! !!**  METHOD !!    ------ !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , INTENT ( IN ) :: PCHTCN ! Convective heat transfer coefficient for natural conv. [W/(m2.K)] REAL , INTENT ( IN ) :: PCHTCS ! Convective heat transfer coefficient for a smooth surface [W/(m2.K)] REAL , INTENT ( IN ) :: PROUGH ! Convective heat transfer coefficient for a smooth surface [W/(m2.K)] REAL :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! !*       0.2   Declarations of local variables ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !---------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_ROUGH_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE THE CHTC !              ---------------- ! PCHTC = PCHTCN + PROUGH * ( PCHTCS - PCHTCN ) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_ROUGH_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_ROUGH_DOE_0D","tags":"","loc":"proc/chtc_rough_doe_0d.html"},{"title":"CHTC_ROUGH_DOE_1D – Town Energy Balance (TEB) model API docs","text":"public function CHTC_ROUGH_DOE_1D(PCHTCN, PCHTCS, PROUGH) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PCHTCN real, intent(in), DIMENSION(:) :: PCHTCS real, intent(in), DIMENSION(:) :: PROUGH Return Value real,\n  DIMENSION(SIZE(PCHTCN)) Contents Source Code CHTC_ROUGH_DOE_1D Source Code FUNCTION CHTC_ROUGH_DOE_1D ( PCHTCN , PCHTCS , PROUGH ) RESULT ( PCHTC ) !############################################# ! !!****  *CHTC_ROUGH_DOE* - !! !!    PURPOSE !!    ------- !     function to compute convective surface coefficient for !     a rough surface from the natural convection coef, the !     smooth surface convective coef and the roughness coef ! !!**  METHOD !!    ------ !! !! !!    EXTERNAL !!    -------- !!      NONE !! !!    IMPLICIT ARGUMENTS !!    ------------------ !! !!    REFERENCE !!    --------- !!    EnergyPlus, Engineering Reference, DOE-2 model for convection on outside !!    surfaces, p68 !! !!    AUTHOR !!    ------ !!      G. Pigeon       * Meteo France * !! !!    MODIFICATIONS !!    ------------- !!      Original    20/00/2012 ! !------------------------------------------------------------------------------- !*       0.    DECLARATIONS !              ------------ ! IMPLICIT NONE ! !*       0.1   Declarations of arguments and results ! REAL , DIMENSION (:), INTENT ( IN ) :: PCHTCN ! Convective heat transfer coefficient for natural conv. [W/(m2.K)] REAL , DIMENSION (:), INTENT ( IN ) :: PCHTCS ! Convective heat transfer coefficient for a smooth surface [W/(m2.K)] REAL , DIMENSION (:), INTENT ( IN ) :: PROUGH ! Convective heat transfer coefficient for a smooth surface [W/(m2.K)] REAL , DIMENSION ( SIZE ( PCHTCN )) :: PCHTC ! Convective heat transfer coefficient [W/(m2.K)] ! !*       0.2   Declarations of local variables ! REAL ( KIND = JPRB ) :: ZHOOK_HANDLE !---------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_ROUGH_DOE' , 0 , ZHOOK_HANDLE ) ! !*       1.    COMPUTE THE CHTC !              ---------------- ! PCHTC = PCHTCN + PROUGH * ( PCHTCS - PCHTCN ) ! !------------------------------------------------------------------------------- IF ( LHOOK ) CALL DR_HOOK ( 'MODE_CONV_DOE:CHTC_ROUGH_DOE' , 1 , ZHOOK_HANDLE ) ! END FUNCTION CHTC_ROUGH_DOE_1D","tags":"","loc":"proc/chtc_rough_doe_1d.html"},{"title":"CHTC_VERT_DOE – Town Energy Balance (TEB) model API docs","text":"public interface CHTC_VERT_DOE Contents Module Procedures CHTC_VERT_DOE_0D CHTC_VERT_DOE_1D Module Procedures public function CHTC_VERT_DOE_0D (PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PTS real, intent(in) :: PTA Return Value real public function CHTC_VERT_DOE_1D (PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PTS real, intent(in), DIMENSION(:) :: PTA Return Value real,\n  DIMENSION(SIZE(PTS))","tags":"","loc":"interface/chtc_vert_doe.html"},{"title":"CHTC_UP_DOE – Town Energy Balance (TEB) model API docs","text":"public interface CHTC_UP_DOE Contents Module Procedures CHTC_UP_DOE_0D CHTC_UP_DOE_1D Module Procedures public function CHTC_UP_DOE_0D (PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PTS real, intent(in) :: PTA Return Value real public function CHTC_UP_DOE_1D (PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PTS real, intent(in), DIMENSION(:) :: PTA Return Value real,\n  DIMENSION(SIZE(PTS))","tags":"","loc":"interface/chtc_up_doe.html"},{"title":"CHTC_SMOOTH_LEE_DOE – Town Energy Balance (TEB) model API docs","text":"public interface CHTC_SMOOTH_LEE_DOE Contents Module Procedures CHTC_SMOOTH_LEE_DOE_0D CHTC_SMOOTH_LEE_DOE_1D Module Procedures public function CHTC_SMOOTH_LEE_DOE_0D (PCHTCN, PVMOD) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PCHTCN real, intent(in) :: PVMOD Return Value real public function CHTC_SMOOTH_LEE_DOE_1D (PCHTCN, PVMOD) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PCHTCN real, intent(in), DIMENSION(:) :: PVMOD Return Value real,\n  DIMENSION(SIZE(PCHTCN))","tags":"","loc":"interface/chtc_smooth_lee_doe.html"},{"title":"CHTC_SMOOTH_WIND_DOE – Town Energy Balance (TEB) model API docs","text":"public interface CHTC_SMOOTH_WIND_DOE Contents Module Procedures CHTC_SMOOTH_WIND_DOE_0D CHTC_SMOOTH_WIND_DOE_1D Module Procedures public function CHTC_SMOOTH_WIND_DOE_0D (PCHTCN, PVMOD) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PCHTCN real, intent(in) :: PVMOD Return Value real public function CHTC_SMOOTH_WIND_DOE_1D (PCHTCN, PVMOD) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PCHTCN real, intent(in), DIMENSION(:) :: PVMOD Return Value real,\n  DIMENSION(SIZE(PCHTCN))","tags":"","loc":"interface/chtc_smooth_wind_doe.html"},{"title":"CHTC_ROUGH_DOE – Town Energy Balance (TEB) model API docs","text":"public interface CHTC_ROUGH_DOE Contents Module Procedures CHTC_ROUGH_DOE_0D CHTC_ROUGH_DOE_1D Module Procedures public function CHTC_ROUGH_DOE_0D (PCHTCN, PCHTCS, PROUGH) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PCHTCN real, intent(in) :: PCHTCS real, intent(in) :: PROUGH Return Value real public function CHTC_ROUGH_DOE_1D (PCHTCN, PCHTCS, PROUGH) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PCHTCN real, intent(in), DIMENSION(:) :: PCHTCS real, intent(in), DIMENSION(:) :: PROUGH Return Value real,\n  DIMENSION(SIZE(PCHTCN))","tags":"","loc":"interface/chtc_rough_doe.html"},{"title":"BLD_OCC_CALENDAR – Town Energy Balance (TEB) model API docs","text":"interface public subroutine BLD_OCC_CALENDAR(TPTIME, PTSUN, T, B, PQIN_FRAC, PTCOOL_TARGET, PTHEAT_TARGET, PQIN) Arguments Type Intent Optional Attributes Name type(DATE_TIME), intent(inout) :: TPTIME real, intent(in), DIMENSION(:) :: PTSUN type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B real, intent(in) :: PQIN_FRAC real, intent(out), DIMENSION(:) :: PTCOOL_TARGET real, intent(out), DIMENSION(:) :: PTHEAT_TARGET real, intent(out), DIMENSION(:) :: PQIN","tags":"","loc":"interface/bld_occ_calendar.html"},{"title":"BLD_DESC_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine BLD_DESC_INIT(YBLD_DESC) Arguments Type Intent Optional Attributes Name type( BLD_DESC_t ), intent(inout) :: YBLD_DESC Contents Source Code BLD_DESC_INIT Source Code SUBROUTINE BLD_DESC_INIT ( YBLD_DESC ) TYPE ( BLD_DESC_t ), INTENT ( INOUT ) :: YBLD_DESC REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_BLD_DESCRIPTION_n:BLD_DESC_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YBLD_DESC % NDESC_BLD_LIST ) NULLIFY ( YBLD_DESC % NDESC_CODE_LIST ) NULLIFY ( YBLD_DESC % NDESC_AGE_LIST ) NULLIFY ( YBLD_DESC % NDESC_AGE_DATE ) NULLIFY ( YBLD_DESC % NDESC_USE_LIST ) NULLIFY ( YBLD_DESC % XDESC_ALB_ROOF ) NULLIFY ( YBLD_DESC % XDESC_ALB_ROAD ) NULLIFY ( YBLD_DESC % XDESC_ALB_WALL ) NULLIFY ( YBLD_DESC % XDESC_EMIS_ROOF ) NULLIFY ( YBLD_DESC % XDESC_EMIS_ROAD ) NULLIFY ( YBLD_DESC % XDESC_EMIS_WALL ) NULLIFY ( YBLD_DESC % XDESC_TCOOL_TARGET ) NULLIFY ( YBLD_DESC % XDESC_THEAT_TARGET ) NULLIFY ( YBLD_DESC % XDESC_F_WASTE_CAN ) NULLIFY ( YBLD_DESC % XDESC_EFF_HEAT ) NULLIFY ( YBLD_DESC % XDESC_HC_FLOOR ) NULLIFY ( YBLD_DESC % XDESC_TC_FLOOR ) NULLIFY ( YBLD_DESC % XDESC_D_FLOOR ) NULLIFY ( YBLD_DESC % XDESC_HC_ROOF ) NULLIFY ( YBLD_DESC % XDESC_TC_ROOF ) NULLIFY ( YBLD_DESC % XDESC_D_ROOF ) NULLIFY ( YBLD_DESC % XDESC_HC_ROAD ) NULLIFY ( YBLD_DESC % XDESC_TC_ROAD ) NULLIFY ( YBLD_DESC % XDESC_D_ROAD ) NULLIFY ( YBLD_DESC % XDESC_HC_WALL ) NULLIFY ( YBLD_DESC % XDESC_TC_WALL ) NULLIFY ( YBLD_DESC % XDESC_D_WALL ) NULLIFY ( YBLD_DESC % XDESC_QIN ) NULLIFY ( YBLD_DESC % XDESC_QIN_FRAD ) NULLIFY ( YBLD_DESC % XDESC_SHGC ) NULLIFY ( YBLD_DESC % XDESC_U_WIN ) NULLIFY ( YBLD_DESC % XDESC_GR ) NULLIFY ( YBLD_DESC % XDESC_FLOOR_HEIGHT ) NULLIFY ( YBLD_DESC % XDESC_INF ) NULLIFY ( YBLD_DESC % XDESC_F_WATER_COND ) NULLIFY ( YBLD_DESC % XDESC_QIN_FLAT ) NULLIFY ( YBLD_DESC % XDESC_HR_TARGET ) NULLIFY ( YBLD_DESC % XDESC_V_VENT ) NULLIFY ( YBLD_DESC % XDESC_COP_RAT ) NULLIFY ( YBLD_DESC % XDESC_GREENROOF ) NULLIFY ( YBLD_DESC % XDESC_SHADE ) NULLIFY ( YBLD_DESC % XDESC_NATVENT ) NULLIFY ( YBLD_DESC % XDESC_EMIS_PANEL ) NULLIFY ( YBLD_DESC % XDESC_ALB_PANEL ) NULLIFY ( YBLD_DESC % XDESC_EFF_PANEL ) NULLIFY ( YBLD_DESC % XDESC_FRAC_PANEL ) NULLIFY ( YBLD_DESC % XDESC_RESIDENTIAL ) YBLD_DESC % NDESC_BLD = 0 YBLD_DESC % NDESC_AGE = 0 YBLD_DESC % NDESC_CODE = 0 YBLD_DESC % NDESC_USE = 0 YBLD_DESC % NDESC_ROOF_LAYER = 0 YBLD_DESC % NDESC_ROAD_LAYER = 0 YBLD_DESC % NDESC_WALL_LAYER = 0 YBLD_DESC % NDESC_FLOOR_LAYER = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_BLD_DESCRIPTION_n:BLD_DESC_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE BLD_DESC_INIT","tags":"","loc":"proc/bld_desc_init.html"},{"title":"INI_OCEAN_CSTS – Town Energy Balance (TEB) model API docs","text":"interface public subroutine INI_OCEAN_CSTS() Arguments None","tags":"","loc":"interface/ini_ocean_csts.html"},{"title":"VEGETATION_UPDATE – Town Energy Balance (TEB) model API docs","text":"interface public subroutine VEGETATION_UPDATE(DTCO, DTV, KDIM, IO, KK, PK, PEK, KPATCH, PTSTEP, TTIME, PCOVER, OCOVER, OAGRIP, HSFTYPE, OALB, ISSK, ODUPDATED, OABSENT) Arguments Type Intent Optional Attributes Name type(DATA_COVER_t), intent(inout) :: DTCO type(DATA_ISBA_t), intent(inout) :: DTV integer, intent(in) :: KDIM type(ISBA_OPTIONS_t), intent(inout) :: IO type(ISBA_K_t), intent(inout) :: KK type(ISBA_P_t), intent(inout) :: PK type(ISBA_PE_t), intent(inout) :: PEK integer, intent(in) :: KPATCH real, intent(in) :: PTSTEP type(DATE_TIME), intent(in) :: TTIME real, intent(in), DIMENSION(:,:) :: PCOVER logical, intent(in), DIMENSION(:) :: OCOVER logical, intent(in) :: OAGRIP character(len=*), intent(in) :: HSFTYPE logical, intent(in) :: OALB type(SSO_t), intent(inout) :: ISSK logical, intent(out) :: ODUPDATED logical, intent(in), optional DIMENSION(:) :: OABSENT","tags":"","loc":"interface/vegetation_update.html"},{"title":"CANOPY_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine CANOPY_INIT(SB) Arguments Type Intent Optional Attributes Name type( CANOPY_t ), intent(inout) :: SB Contents Source Code CANOPY_INIT Source Code SUBROUTINE CANOPY_INIT ( SB ) TYPE ( CANOPY_t ), INTENT ( INOUT ) :: SB REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CANOPY_N:CANOPY_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( SB % XZ ) NULLIFY ( SB % XU ) NULLIFY ( SB % XT ) NULLIFY ( SB % XQ ) NULLIFY ( SB % XTKE ) NULLIFY ( SB % XLMO ) NULLIFY ( SB % XLM ) NULLIFY ( SB % XLEPS ) NULLIFY ( SB % XP ) NULLIFY ( SB % XDZ ) NULLIFY ( SB % XZF ) NULLIFY ( SB % XDZF ) SB % NLVL = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CANOPY_N:CANOPY_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CANOPY_INIT","tags":"","loc":"proc/canopy_init.html"},{"title":"TEB_GARDEN – Town Energy Balance (TEB) model API docs","text":"interface public subroutine TEB_GARDEN(DTCO, G, TOP, T, BOP, B, TPN, TIR, DMT, GDM, GRM, KTEB_P, HIMPLICIT_WIND, PTSUN, PT_CAN, PQ_CAN, PU_CAN, PT_LOWCAN, PQ_LOWCAN, PU_LOWCAN, PZ_LOWCAN, PPEW_A_COEF, PPEW_B_COEF, PPEW_A_COEF_LOWCAN, PPEW_B_COEF_LOWCAN, PPS, PPA, PEXNS, PEXNA, PTA, PQA, PRHOA, PCO2, PLW_RAD, PDIR_SW, PSCA_SW, PSW_BANDS, KSW, PZENITH, PAZIM, PRR, PSR, PZREF, PUREF, PVMOD, PH_TRAFFIC, PLE_TRAFFIC, PTSTEP, PLEW_RF, PLEW_RD, PLE_WL_A, PLE_WL_B, PRNSN_RF, PHSN_RF, PLESN_RF, PGSN_RF, PMELT_RF, PRNSN_RD, PHSN_RD, PLESN_RD, PGSN_RD, PMELT_RD, PRN_GRND, PH_GRND, PLE_GRND, PGFLX_GRND, PRN_TWN, PH_TWN, PLE_TWN, PGFLX_TWN, PEVAP_TWN, PSFCO2, PUW_GRND, PUW_RF, PDUWDU_GRND, PDUWDU_RF, PUSTAR_TWN, PCD, PCDN, PCH_TWN, PRI_TWN, PTS_TWN, PEMIS_TWN, PDIR_ALB_TWN, PSCA_ALB_TWN, PRESA_TWN, PAC_RD, PAC_GD, PAC_GR, PAC_RD_WAT, PAC_GD_WAT, PAC_GR_WAT, KDAY, PEMIT_LW_FAC, PEMIT_LW_GRND, PT_RAD_IND, PREF_SW_GRND, PREF_SW_FAC, PHU_BLD, PTIME, PPROD_BLD) Arguments Type Intent Optional Attributes Name type(DATA_COVER_t), intent(inout) :: DTCO type(GRID_t), intent(inout) :: G type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_OPTIONS_t), intent(inout) :: BOP type(BEM_t), intent(inout) :: B type(TEB_PANEL_t), intent(inout) :: TPN type(TEB_IRRIG_t), intent(inout) :: TIR type(DIAG_MISC_TEB_t), intent(inout) :: DMT type(TEB_GARDEN_MODEL_t), intent(inout) :: GDM type(TEB_GREENROOF_MODEL_t), intent(inout) :: GRM integer, intent(in) :: KTEB_P character(len=*), intent(in) :: HIMPLICIT_WIND real, intent(in), DIMENSION(:) :: PTSUN real, intent(inout), DIMENSION(:) :: PT_CAN real, intent(inout), DIMENSION(:) :: PQ_CAN real, intent(in), DIMENSION(:) :: PU_CAN real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PU_LOWCAN real, intent(in), DIMENSION(:) :: PZ_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPEW_A_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_B_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PPA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PCO2 real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:,:) :: PDIR_SW real, intent(in), DIMENSION(:,:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PSW_BANDS integer, intent(in) :: KSW real, intent(in), DIMENSION(:) :: PZENITH real, intent(in), DIMENSION(:) :: PAZIM real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PH_TRAFFIC real, intent(in), DIMENSION(:) :: PLE_TRAFFIC real, intent(in) :: PTSTEP real, intent(out), DIMENSION(:) :: PLEW_RF real, intent(out), DIMENSION(:) :: PLEW_RD real, intent(out), DIMENSION(:) :: PLE_WL_A real, intent(out), DIMENSION(:) :: PLE_WL_B real, intent(out), DIMENSION(:) :: PRNSN_RF real, intent(out), DIMENSION(:) :: PHSN_RF real, intent(out), DIMENSION(:) :: PLESN_RF real, intent(out), DIMENSION(:) :: PGSN_RF real, intent(out), DIMENSION(:) :: PMELT_RF real, intent(out), DIMENSION(:) :: PRNSN_RD real, intent(out), DIMENSION(:) :: PHSN_RD real, intent(out), DIMENSION(:) :: PLESN_RD real, intent(out), DIMENSION(:) :: PGSN_RD real, intent(out), DIMENSION(:) :: PMELT_RD real, intent(out), DIMENSION(:) :: PRN_GRND real, intent(out), DIMENSION(:) :: PH_GRND real, intent(out), DIMENSION(:) :: PLE_GRND real, intent(out), DIMENSION(:) :: PGFLX_GRND real, intent(out), DIMENSION(:) :: PRN_TWN real, intent(out), DIMENSION(:) :: PH_TWN real, intent(out), DIMENSION(:) :: PLE_TWN real, intent(out), DIMENSION(:) :: PGFLX_TWN real, intent(out), DIMENSION(:) :: PEVAP_TWN real, intent(out), DIMENSION(:) :: PSFCO2 real, intent(out), DIMENSION(:) :: PUW_GRND real, intent(out), DIMENSION(:) :: PUW_RF real, intent(out), DIMENSION(:) :: PDUWDU_GRND real, intent(out), DIMENSION(:) :: PDUWDU_RF real, intent(out), DIMENSION(:) :: PUSTAR_TWN real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN real, intent(out), DIMENSION(:) :: PCH_TWN real, intent(out), DIMENSION(:) :: PRI_TWN real, intent(out), DIMENSION(:) :: PTS_TWN real, intent(out), DIMENSION(:) :: PEMIS_TWN real, intent(out), DIMENSION(:) :: PDIR_ALB_TWN real, intent(out), DIMENSION(:) :: PSCA_ALB_TWN real, intent(out), DIMENSION(:) :: PRESA_TWN real, intent(out), DIMENSION(:) :: PAC_RD real, intent(out), DIMENSION(:) :: PAC_GD real, intent(out), DIMENSION(:) :: PAC_GR real, intent(out), DIMENSION(:) :: PAC_RD_WAT real, intent(out), DIMENSION(:) :: PAC_GD_WAT real, intent(out), DIMENSION(:) :: PAC_GR_WAT integer, intent(in) :: KDAY real, intent(out), DIMENSION(:) :: PEMIT_LW_FAC real, intent(out), DIMENSION(:) :: PEMIT_LW_GRND real, intent(out), DIMENSION(:) :: PT_RAD_IND real, intent(out), DIMENSION(:) :: PREF_SW_GRND real, intent(out), DIMENSION(:) :: PREF_SW_FAC real, intent(out), DIMENSION(:) :: PHU_BLD real, intent(in) :: PTIME real, intent(out), DIMENSION(:) :: PPROD_BLD","tags":"","loc":"interface/teb_garden.html"},{"title":"URBAN_LW_COEF – Town Energy Balance (TEB) model API docs","text":"interface public subroutine URBAN_LW_COEF(B, T, PLW_RAD, PEMIS_G, PTS_SR, PTS_G, PLW_WA_TO_WB, PLW_WA_TO_R, PLW_WB_TO_R, PLW_WA_TO_NR, PLW_WB_TO_NR, PLW_WA_TO_G, PLW_WB_TO_G, PLW_WA_TO_WIN, PLW_WB_TO_WIN, PLW_R_TO_WA, PLW_R_TO_WB, PLW_R_TO_WIN, PLW_G_TO_WA, PLW_G_TO_WB, PLW_G_TO_WIN, PLW_S_TO_WA, PLW_S_TO_WB, PLW_S_TO_R, PLW_S_TO_NR, PLW_S_TO_G, PLW_S_TO_WIN, PLW_WIN_TO_WA, PLW_WIN_TO_WB, PLW_WIN_TO_R, PLW_WIN_TO_NR, PLW_WIN_TO_G, PLW_NR_TO_WA, PLW_NR_TO_WB, PLW_NR_TO_WIN) Arguments Type Intent Optional Attributes Name type(BEM_t), intent(inout) :: B type(TEB_t), intent(inout) :: T real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PEMIS_G real, intent(in), DIMENSION(:) :: PTS_SR real, intent(in), DIMENSION(:) :: PTS_G real, intent(out), DIMENSION(:) :: PLW_WA_TO_WB real, intent(out), DIMENSION(:) :: PLW_WA_TO_R real, intent(out), DIMENSION(:) :: PLW_WB_TO_R real, intent(out), DIMENSION(:) :: PLW_WA_TO_NR real, intent(out), DIMENSION(:) :: PLW_WB_TO_NR real, intent(out), DIMENSION(:) :: PLW_WA_TO_G real, intent(out), DIMENSION(:) :: PLW_WB_TO_G real, intent(out), DIMENSION(:) :: PLW_WA_TO_WIN real, intent(out), DIMENSION(:) :: PLW_WB_TO_WIN real, intent(out), DIMENSION(:) :: PLW_R_TO_WA real, intent(out), DIMENSION(:) :: PLW_R_TO_WB real, intent(out), DIMENSION(:) :: PLW_R_TO_WIN real, intent(out), DIMENSION(:) :: PLW_G_TO_WA real, intent(out), DIMENSION(:) :: PLW_G_TO_WB real, intent(out), DIMENSION(:) :: PLW_G_TO_WIN real, intent(out), DIMENSION(:) :: PLW_S_TO_WA real, intent(out), DIMENSION(:) :: PLW_S_TO_WB real, intent(out), DIMENSION(:) :: PLW_S_TO_R real, intent(out), DIMENSION(:) :: PLW_S_TO_NR real, intent(out), DIMENSION(:) :: PLW_S_TO_G real, intent(out), DIMENSION(:) :: PLW_S_TO_WIN real, intent(out), DIMENSION(:) :: PLW_WIN_TO_WA real, intent(out), DIMENSION(:) :: PLW_WIN_TO_WB real, intent(out), DIMENSION(:) :: PLW_WIN_TO_R real, intent(out), DIMENSION(:) :: PLW_WIN_TO_NR real, intent(out), DIMENSION(:) :: PLW_WIN_TO_G real, intent(out), DIMENSION(:) :: PLW_NR_TO_WA real, intent(out), DIMENSION(:) :: PLW_NR_TO_WB real, intent(out), DIMENSION(:) :: PLW_NR_TO_WIN","tags":"","loc":"interface/urban_lw_coef.html"},{"title":"CH_WATFLUX_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine CH_WATFLUX_INIT(YCH_WATFLUX) Arguments Type Intent Optional Attributes Name type( CH_WATFLUX_t ), intent(inout) :: YCH_WATFLUX Contents Source Code CH_WATFLUX_INIT Source Code SUBROUTINE CH_WATFLUX_INIT ( YCH_WATFLUX ) TYPE ( CH_WATFLUX_t ), INTENT ( INOUT ) :: YCH_WATFLUX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_WATFLUX_N:CH_WATFLUX_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YCH_WATFLUX % XDEP ) NULLIFY ( YCH_WATFLUX % CCH_NAMES ) NULLIFY ( YCH_WATFLUX % CAER_NAMES ) NULLIFY ( YCH_WATFLUX % CDSTNAMES ) NULLIFY ( YCH_WATFLUX % CSLTNAMES ) YCH_WATFLUX % CCH_DRY_DEP = ' ' CALL SV_INIT ( YCH_WATFLUX % SVW ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_WATFLUX_N:CH_WATFLUX_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_WATFLUX_INIT","tags":"","loc":"proc/ch_watflux_init.html"},{"title":"INI_CSTS – Town Energy Balance (TEB) model API docs","text":"interface public subroutine INI_CSTS() Arguments None","tags":"","loc":"interface/ini_csts.html"},{"title":"ROOF_LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"interface public subroutine ROOF_LAYER_E_BUDGET(TOP, T, B, PQSAT_ROOF, PAC_BLD, PTSTEP, PDN_ROOF, PRHOA, PAC_ROOF, PAC_ROOF_WAT, PLW_RAD, PPS, PDELT_ROOF, PTA, PQA, PEXNA, PEXNS, PABS_SW_ROOF, PGSNOW_ROOF, PFLX_BLD_ROOF, PDQS_ROOF, PABS_LW_ROOF, PHFREE_ROOF, PLEFREE_ROOF, PIMB_ROOF, PG_GREENROOF_ROOF, PRADHT_IN, PTS_FLOOR, PTI_WALL, PRAD_ROOF_WALL, PRAD_ROOF_WIN, PRAD_ROOF_FLOOR, PRAD_ROOF_MASS, PCONV_ROOF_BLD, PRR, PLOAD_IN_ROOF) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B real, intent(inout), DIMENSION(:) :: PQSAT_ROOF real, intent(in), DIMENSION(:) :: PAC_BLD real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PDN_ROOF real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PAC_ROOF real, intent(in), DIMENSION(:) :: PAC_ROOF_WAT real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PDELT_ROOF real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PABS_SW_ROOF real, intent(in), DIMENSION(:) :: PGSNOW_ROOF real, intent(out), DIMENSION(:) :: PFLX_BLD_ROOF real, intent(out), DIMENSION(:) :: PDQS_ROOF real, intent(out), DIMENSION(:) :: PABS_LW_ROOF real, intent(out), DIMENSION(:) :: PHFREE_ROOF real, intent(out), DIMENSION(:) :: PLEFREE_ROOF real, intent(out), DIMENSION(:) :: PIMB_ROOF real, intent(in), DIMENSION(:) :: PG_GREENROOF_ROOF real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PTS_FLOOR real, intent(in), DIMENSION(:) :: PTI_WALL real, intent(out), DIMENSION(:) :: PRAD_ROOF_WALL real, intent(out), DIMENSION(:) :: PRAD_ROOF_WIN real, intent(out), DIMENSION(:) :: PRAD_ROOF_FLOOR real, intent(out), DIMENSION(:) :: PRAD_ROOF_MASS real, intent(out), DIMENSION(:) :: PCONV_ROOF_BLD real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PLOAD_IN_ROOF","tags":"","loc":"interface/roof_layer_e_budget.html"},{"title":"FLXSURF3BX – Town Energy Balance (TEB) model API docs","text":"interface public subroutine FLXSURF3BX(CMU, CTU, RIB, FTEMP, FVAP, ILMO, UE, FCOR, TA, QA, ZU, ZT, VA, TG, QG, H, Z0, Z0T, LZZ0, LZZ0T, fm, fh, N) Arguments Type Intent Optional Attributes Name real :: CMU (N) real :: CTU (N) real :: RIB (N) real :: FTEMP (N) real :: FVAP (N) real :: ILMO (N) real :: UE (N) real :: FCOR (N) real :: TA (N) real :: QA (N) real :: ZU (N) real :: ZT (N) real :: VA (N) real :: TG (N) real :: QG (N) real :: H (N) real :: Z0 (N) real :: Z0T (N) real :: LZZ0 (N) real :: LZZ0T (N) real :: fm (N) real :: fh (N) integer :: N","tags":"","loc":"interface/flxsurf3bx.html"},{"title":"BEM_MORPHO – Town Energy Balance (TEB) model API docs","text":"interface public subroutine BEM_MORPHO(PBLD, PWALL_O_HOR, PBLD_HEIGHT, PWALL_O_BLD, B) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PBLD real, intent(in), DIMENSION(:) :: PWALL_O_HOR real, intent(in), DIMENSION(:) :: PBLD_HEIGHT real, intent(out), DIMENSION(:) :: PWALL_O_BLD type(BEM_t), intent(inout) :: B","tags":"","loc":"interface/bem_morpho.html"},{"title":"DIAG_OCEAN_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DIAG_OCEAN_INIT(YDIAG_OCEAN) Arguments Type Intent Optional Attributes Name type( DIAG_OCEAN_t ), intent(inout) :: YDIAG_OCEAN Contents Source Code DIAG_OCEAN_INIT Source Code SUBROUTINE DIAG_OCEAN_INIT ( YDIAG_OCEAN ) TYPE ( DIAG_OCEAN_t ), INTENT ( INOUT ) :: YDIAG_OCEAN REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_OCEAN_N:DIAG_OCEAN_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDIAG_OCEAN % XTOCMOY ) NULLIFY ( YDIAG_OCEAN % XSOCMOY ) NULLIFY ( YDIAG_OCEAN % XUOCMOY ) NULLIFY ( YDIAG_OCEAN % XVOCMOY ) NULLIFY ( YDIAG_OCEAN % XDOCMOY ) YDIAG_OCEAN % LDIAG_OCEAN = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_OCEAN_N:DIAG_OCEAN_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_OCEAN_INIT","tags":"","loc":"proc/diag_ocean_init.html"},{"title":"DIAG_MISC_TEB_OPTIONS_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DIAG_MISC_TEB_OPTIONS_INIT(YDIAG_MISC_TEB_OPTIONS) Arguments Type Intent Optional Attributes Name type( DIAG_MISC_TEB_OPTIONS_t ), intent(inout) :: YDIAG_MISC_TEB_OPTIONS Contents Source Code DIAG_MISC_TEB_OPTIONS_INIT Source Code SUBROUTINE DIAG_MISC_TEB_OPTIONS_INIT ( YDIAG_MISC_TEB_OPTIONS ) TYPE ( DIAG_MISC_TEB_OPTIONS_t ), INTENT ( INOUT ) :: YDIAG_MISC_TEB_OPTIONS REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_TEB_N:DIAG_MISC_TEB_OPTIONS_INIT\" , 0 , ZHOOK_HANDLE ) YDIAG_MISC_TEB_OPTIONS % LSURF_MISC_BUDGET = . FALSE . YDIAG_MISC_TEB_OPTIONS % LSURF_EVAP_BUDGET = . FALSE . YDIAG_MISC_TEB_OPTIONS % LSURF_DIAG_ALBEDO = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_TEB_N:DIAG_MISC_TEB_OPTIONS_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_MISC_TEB_OPTIONS_INIT","tags":"","loc":"proc/diag_misc_teb_options_init.html"},{"title":"CARBON_EVOL – Town Energy Balance (TEB) model API docs","text":"interface public subroutine CARBON_EVOL(IO, KK, PK, PEK, DEK, PTSTEP, PRHOA, PRESP_BIOMASS_INST) Arguments Type Intent Optional Attributes Name type(ISBA_OPTIONS_t), intent(inout) :: IO type(ISBA_K_t), intent(inout) :: KK type(ISBA_P_t), intent(inout) :: PK type(ISBA_PE_t), intent(inout) :: PEK type(DIAG_EVAP_ISBA_t), intent(inout) :: DEK real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:,:) :: PRESP_BIOMASS_INST","tags":"","loc":"interface/carbon_evol.html"},{"title":"GRID_CONF_PROJ_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine GRID_CONF_PROJ_INIT(YGRIDCONF) Arguments Type Intent Optional Attributes Name type( GRID_CONF_PROJ_t ), intent(inout) :: YGRIDCONF Contents Source Code GRID_CONF_PROJ_INIT Source Code SUBROUTINE GRID_CONF_PROJ_INIT ( YGRIDCONF ) TYPE ( GRID_CONF_PROJ_t ), INTENT ( INOUT ) :: YGRIDCONF REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_GRID_CONF_PROJ_n:GRID_CONF_PROJ_INIT\" , 0 , ZHOOK_HANDLE ) YGRIDCONF % NX = 0 YGRIDCONF % NY = 0 YGRIDCONF % XLAT0 = 0. YGRIDCONF % XLON0 = 0. YGRIDCONF % XLATORI = 0. YGRIDCONF % XLONORI = 0. YGRIDCONF % XRPK = 0. YGRIDCONF % XBETA = 0. YGRIDCONF % XLATC = 0. YGRIDCONF % XLONC = 0. IF ( LHOOK ) CALL DR_HOOK ( \"MODD_GRID_CONF_PROJ_n:GRID_CONF_PROJ_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE GRID_CONF_PROJ_INIT","tags":"","loc":"proc/grid_conf_proj_init.html"},{"title":"ROOF_IMPL_COEF – Town Energy Balance (TEB) model API docs","text":"interface public subroutine ROOF_IMPL_COEF(T, PTSTEP, PTDEEP_A, PTDEEP_B) Arguments Type Intent Optional Attributes Name type(TEB_t), intent(inout) :: T real, intent(in) :: PTSTEP real, intent(out), DIMENSION(:) :: PTDEEP_A real, intent(out), DIMENSION(:) :: PTDEEP_B","tags":"","loc":"interface/roof_impl_coef.html"},{"title":"DIAG_MISC_ISBA_NP_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DIAG_MISC_ISBA_NP_INIT(YNDIAG_MISC_ISBA, KPATCH) Arguments Type Intent Optional Attributes Name type( DIAG_MISC_ISBA_NP_t ), intent(inout) :: YNDIAG_MISC_ISBA integer, intent(in) :: KPATCH Contents Source Code DIAG_MISC_ISBA_NP_INIT Source Code SUBROUTINE DIAG_MISC_ISBA_NP_INIT ( YNDIAG_MISC_ISBA , KPATCH ) TYPE ( DIAG_MISC_ISBA_NP_t ), INTENT ( INOUT ) :: YNDIAG_MISC_ISBA INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_ISBA_N:DIAG_MISC_ISBA_NP_INIT\" , 0 , ZHOOK_HANDLE ) IF (. NOT . ASSOCIATED ( YNDIAG_MISC_ISBA % AL )) THEN ALLOCATE ( YNDIAG_MISC_ISBA % AL ( KPATCH )) DO JP = 1 , KPATCH CALL DIAG_MISC_ISBA_INIT ( YNDIAG_MISC_ISBA % AL ( JP )) ENDDO ELSE DO JP = 1 , KPATCH CALL DIAG_MISC_ISBA_INIT ( YNDIAG_MISC_ISBA % AL ( JP )) ENDDO DEALLOCATE ( YNDIAG_MISC_ISBA % AL ) ENDIF IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_ISBA_N:DIAG_MISC_ISBA_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_MISC_ISBA_NP_INIT","tags":"","loc":"proc/diag_misc_isba_np_init.html"},{"title":"DIAG_MISC_ISBA_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DIAG_MISC_ISBA_INIT(DMI) Arguments Type Intent Optional Attributes Name type( DIAG_MISC_ISBA_t ), intent(inout) :: DMI Contents Source Code DIAG_MISC_ISBA_INIT Source Code SUBROUTINE DIAG_MISC_ISBA_INIT ( DMI ) TYPE ( DIAG_MISC_ISBA_t ), INTENT ( INOUT ) :: DMI REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_ISBA_N:DIAG_MISC_ISBA_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( DMI % XHV ) NULLIFY ( DMI % XLAI ) NULLIFY ( DMI % XSWI ) NULLIFY ( DMI % XTSWI ) NULLIFY ( DMI % XSOIL_SWI ) NULLIFY ( DMI % XSOIL_TSWI ) NULLIFY ( DMI % XSOIL_TWG ) NULLIFY ( DMI % XSOIL_TWGI ) NULLIFY ( DMI % XSOIL_WG ) NULLIFY ( DMI % XSOIL_WGI ) NULLIFY ( DMI % XFRD2_TWG ) NULLIFY ( DMI % XFRD2_TWGI ) NULLIFY ( DMI % XFRD3_TSWI ) NULLIFY ( DMI % XFRD3_TWG ) NULLIFY ( DMI % XFRD3_TWGI ) NULLIFY ( DMI % XALT ) NULLIFY ( DMI % XFLT ) NULLIFY ( DMI % XRNSNOW ) NULLIFY ( DMI % XHSNOW ) NULLIFY ( DMI % XHPSNOW ) NULLIFY ( DMI % XGFLUXSNOW ) NULLIFY ( DMI % XUSTARSNOW ) NULLIFY ( DMI % XGRNDFLUX ) NULLIFY ( DMI % XSRSFC ) NULLIFY ( DMI % XRRSFC ) NULLIFY ( DMI % XCDSNOW ) NULLIFY ( DMI % XCHSNOW ) NULLIFY ( DMI % XSNOWDZ ) NULLIFY ( DMI % XSNOWDEND ) NULLIFY ( DMI % XSNOWSPHER ) NULLIFY ( DMI % XSNOWSIZE ) NULLIFY ( DMI % XSNOWTYPEMEPRA ) NULLIFY ( DMI % XSNOWSSA ) NULLIFY ( DMI % XSNOWRAM ) NULLIFY ( DMI % XSNOWSHEAR ) NULLIFY ( DMI % XSNDPT_1DY ) NULLIFY ( DMI % XSNDPT_3DY ) NULLIFY ( DMI % XSNDPT_5DY ) NULLIFY ( DMI % XSNDPT_7DY ) NULLIFY ( DMI % XSNSWE_1DY ) NULLIFY ( DMI % XSNSWE_3DY ) NULLIFY ( DMI % XSNSWE_5DY ) NULLIFY ( DMI % XSNSWE_7DY ) NULLIFY ( DMI % XSNRAM_SONDE ) NULLIFY ( DMI % XSN_REFRZNTHCKN ) NULLIFY ( DMI % XSN_WETTHCKN ) NULLIFY ( DMI % XSNOWHMASS ) NULLIFY ( DMI % XSNOWLIQ ) NULLIFY ( DMI % XSNOWTEMP ) NULLIFY ( DMI % XTWSNOW ) NULLIFY ( DMI % XTDSNOW ) NULLIFY ( DMI % XTTSNOW ) NULLIFY ( DMI % XPSNG ) NULLIFY ( DMI % XPSNV ) NULLIFY ( DMI % XPSN ) NULLIFY ( DMI % XFFG ) NULLIFY ( DMI % XFFV ) NULLIFY ( DMI % XFF ) NULLIFY ( DMI % XSEUIL ) NULLIFY ( DMI % XFAPAR ) NULLIFY ( DMI % XFAPIR ) NULLIFY ( DMI % XDFAPARC ) NULLIFY ( DMI % XDFAPIRC ) NULLIFY ( DMI % XFAPAR_BS ) NULLIFY ( DMI % XFAPIR_BS ) NULLIFY ( DMI % XDLAI_EFFC ) NULLIFY ( DMI % XCG ) NULLIFY ( DMI % XC1 ) NULLIFY ( DMI % XC2 ) NULLIFY ( DMI % XWGEQ ) NULLIFY ( DMI % XCT ) NULLIFY ( DMI % XRS ) DMI % LSURF_MISC_BUDGET = . FALSE . DMI % LSURF_DIAG_ALBEDO = . FALSE . DMI % LSURF_MISC_DIF = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_MISC_ISBA_N:DIAG_MISC_ISBA_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_MISC_ISBA_INIT","tags":"","loc":"proc/diag_misc_isba_init.html"},{"title":"TRIDIAG_GROUND – Town Energy Balance (TEB) model API docs","text":"interface public subroutine TRIDIAG_GROUND(PA, PB, PC, PY, PX) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PA real, intent(in), DIMENSION(:,:) :: PB real, intent(in), DIMENSION(:,:) :: PC real, intent(in), DIMENSION(:,:) :: PY real, intent(out), DIMENSION(:,:) :: PX","tags":"","loc":"interface/tridiag_ground.html"},{"title":"LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"interface public subroutine LAYER_E_BUDGET(PT, PTSTEP, PIMPL, PHC, PTC, PD, PA, PB, PC, PY, PDQS) Arguments Type Intent Optional Attributes Name real, intent(inout), DIMENSION(:,:) :: PT real, intent(in) :: PTSTEP real, intent(in) :: PIMPL real, intent(in), DIMENSION(:,:) :: PHC real, intent(in), DIMENSION(:,:) :: PTC real, intent(in), DIMENSION(:,:) :: PD real, intent(in), DIMENSION(:,:) :: PA real, intent(in), DIMENSION(:,:) :: PB real, intent(in), DIMENSION(:,:) :: PC real, intent(in), DIMENSION(:,:) :: PY real, intent(out), DIMENSION(:) :: PDQS","tags":"","loc":"interface/layer_e_budget.html"},{"title":"ISBA_OPTIONS_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine ISBA_OPTIONS_INIT(IO) Arguments Type Intent Optional Attributes Name type( ISBA_OPTIONS_t ), intent(inout) :: IO Contents Source Code ISBA_OPTIONS_INIT Source Code SUBROUTINE ISBA_OPTIONS_INIT ( IO ) TYPE ( ISBA_OPTIONS_t ), INTENT ( INOUT ) :: IO REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_OPTIONS_N:ISBA_OPTIONS_INIT\" , 0 , ZHOOK_HANDLE ) ! NULLIFY ( IO % XSOILGRID ) NULLIFY ( IO % LMEB_PATCH ) ! IO % CTYPE_HVEG = '    ' IO % CTYPE_LVEG = '    ' IO % CTYPE_NVEG = '    ' IO % CTYP_COV = '     ' IO % LPAR = . FALSE . IO % LECOCLIMAP = . FALSE . IO % NPATCH = 0 IO % NGROUND_LAYER = 0 IO % CISBA = ' ' IO % CPEDOTF = ' ' IO % CPHOTO = ' ' IO % LTR_ML = . FALSE . IO % XRM_PATCH = 0.0 IO % LSOCP = . FALSE . IO % LCTI = . FALSE . IO % LPERM = . FALSE . IO % LNOF = . FALSE . IO % NNBIOMASS = 0 IO % NNLITTER = 0 IO % NNLITTLEVS = 0 IO % NNSOILCARB = 0 IO % LFORC_MEASURE = . FALSE . IO % LMEB_LITTER = . FALSE . IO % LMEB_GNDRES = . FALSE . ! IO % LCANOPY = . FALSE . IO % CRESPSL = ' ' ! IO % CC1DRY = ' ' IO % CSCOND = ' ' IO % CSOILFRZ = ' ' IO % CDIFSFCOND = ' ' IO % CSNOWRES = ' ' IO % CALBEDO = ' ' IO % CCPSURF = ' ' IO % XOUT_TSTEP = 0. IO % XTSTEP = 0. IO % XCGMAX = 0. IO % XCDRAG = 0. IO % LGLACIER = . FALSE . IO % LCANOPY_DRAG = . FALSE . IO % LVEGUPD = . FALSE . IO % LPERTSURF = . FALSE . IO % NLAYER_HORT = 0 IO % NLAYER_DUN = 0 IO % CRUNOFF = ' ' IO % CKSAT = ' ' IO % CRAIN = ' ' IO % CHORT = ' ' IO % LSOC = . FALSE . IO % LNITRO_DILU = . FALSE . IO % LSPINUPCARBS = . FALSE . IO % LSPINUPCARBW = . FALSE . IO % XSPINMAXS = 0. IO % XSPINMAXW = 0. IO % XCO2_START = 0. IO % XCO2_END = 0. IO % NNBYEARSPINS = 0 IO % NNBYEARSPINW = 0 IO % NNBYEARSOLD = 0 IO % NSPINS = 1 IO % NSPINW = 1 IO % LAGRI_TO_GRASS = . FALSE . IO % LSNOWDRIFT = . TRUE . IO % LSNOWDRIFT_SUBLIM = . FALSE . IO % LSNOW_ABS_ZENITH = . FALSE . IO % CSNOWMETAMO = 'B92' IO % CSNOWRAD = 'B92' IO % LFLOOD = . FALSE . IO % LWTD = . FALSE . IO % LCPL_RRM = . FALSE . IO % LTEMP_ARP = . FALSE . IO % NTEMPLAYER_ARP = 0 ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_OPTIONS_N:ISBA_OPTIONS_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE ISBA_OPTIONS_INIT","tags":"","loc":"proc/isba_options_init.html"},{"title":"BEM_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine BEM_INIT(YBEM) Arguments Type Intent Optional Attributes Name type( BEM_t ), intent(inout) :: YBEM Contents Source Code BEM_INIT Source Code SUBROUTINE BEM_INIT ( YBEM ) TYPE ( BEM_t ), INTENT ( INOUT ) :: YBEM REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_BEM_N:BEM_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YBEM % XF_WATER_COND ) NULLIFY ( YBEM % XHC_FLOOR ) NULLIFY ( YBEM % XTC_FLOOR ) NULLIFY ( YBEM % XD_FLOOR ) NULLIFY ( YBEM % XTCOOL_TARGET ) NULLIFY ( YBEM % XTHEAT_TARGET ) NULLIFY ( YBEM % XTI_BLD ) NULLIFY ( YBEM % XT_FLOOR ) NULLIFY ( YBEM % XT_MASS ) NULLIFY ( YBEM % XQIN ) NULLIFY ( YBEM % XQIN_FRAD ) NULLIFY ( YBEM % XSHGC ) NULLIFY ( YBEM % XSHGC_SH ) NULLIFY ( YBEM % XU_WIN ) NULLIFY ( YBEM % XTRAN_WIN ) NULLIFY ( YBEM % XGR ) NULLIFY ( YBEM % XFLOOR_HEIGHT ) NULLIFY ( YBEM % XEFF_HEAT ) NULLIFY ( YBEM % XINF ) NULLIFY ( YBEM % XF_WASTE_CAN ) NULLIFY ( YBEM % XAUX_MAX ) NULLIFY ( YBEM % XQIN_FLAT ) NULLIFY ( YBEM % XHR_TARGET ) NULLIFY ( YBEM % XT_WIN2 ) NULLIFY ( YBEM % XQI_BLD ) NULLIFY ( YBEM % XV_VENT ) NULLIFY ( YBEM % XCAP_SYS_HEAT ) NULLIFY ( YBEM % XCAP_SYS_RAT ) NULLIFY ( YBEM % XT_ADP ) NULLIFY ( YBEM % XM_SYS_RAT ) NULLIFY ( YBEM % XCOP_RAT ) NULLIFY ( YBEM % XT_WIN1 ) NULLIFY ( YBEM % XALB_WIN ) NULLIFY ( YBEM % XABS_WIN ) NULLIFY ( YBEM % XT_SIZE_MAX ) NULLIFY ( YBEM % XT_SIZE_MIN ) NULLIFY ( YBEM % XUGG_WIN ) NULLIFY ( YBEM % LSHAD_DAY ) NULLIFY ( YBEM % LNATVENT_NIGHT ) NULLIFY ( YBEM % LSHADE ) NULLIFY ( YBEM % XSHADE ) NULLIFY ( YBEM % CNATVENT ) NULLIFY ( YBEM % XNATVENT ) NULLIFY ( YBEM % XN_FLOOR ) NULLIFY ( YBEM % XGLAZ_O_BLD ) NULLIFY ( YBEM % XMASS_O_BLD ) NULLIFY ( YBEM % XFLOOR_HW_RATIO ) NULLIFY ( YBEM % XF_FLOOR_MASS ) NULLIFY ( YBEM % XF_FLOOR_WALL ) NULLIFY ( YBEM % XF_FLOOR_WIN ) NULLIFY ( YBEM % XF_FLOOR_ROOF ) NULLIFY ( YBEM % XF_WALL_FLOOR ) NULLIFY ( YBEM % XF_WALL_MASS ) NULLIFY ( YBEM % XF_WALL_WIN ) NULLIFY ( YBEM % XF_WIN_FLOOR ) NULLIFY ( YBEM % XF_WIN_MASS ) NULLIFY ( YBEM % XF_WIN_WALL ) NULLIFY ( YBEM % XF_WIN_WIN ) NULLIFY ( YBEM % XF_MASS_FLOOR ) NULLIFY ( YBEM % XF_MASS_WALL ) NULLIFY ( YBEM % XF_MASS_WIN ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_BEM_N:BEM_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE BEM_INIT","tags":"","loc":"proc/bem_init.html"},{"title":"BEM_NP_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine BEM_NP_INIT(YNBEM, KPATCH) Arguments Type Intent Optional Attributes Name type( BEM_NP_t ), intent(inout) :: YNBEM integer, intent(in) :: KPATCH Contents Source Code BEM_NP_INIT Source Code SUBROUTINE BEM_NP_INIT ( YNBEM , KPATCH ) TYPE ( BEM_NP_t ), INTENT ( INOUT ) :: YNBEM INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_BEM_N:BEM_NP_INIT\" , 0 , ZHOOK_HANDLE ) IF (. NOT . ASSOCIATED ( YNBEM % AL )) THEN ALLOCATE ( YNBEM % AL ( KPATCH )) DO JP = 1 , KPATCH CALL BEM_INIT ( YNBEM % AL ( JP )) ENDDO ELSE DO JP = 1 , KPATCH CALL BEM_INIT ( YNBEM % AL ( JP )) ENDDO DEALLOCATE ( YNBEM % AL ) ENDIF IF ( LHOOK ) CALL DR_HOOK ( \"MODD_BEM_N:BEM_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE BEM_NP_INIT","tags":"","loc":"proc/bem_np_init.html"},{"title":"DATA_BEM_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DATA_BEM_INIT(YDATA_BEM) Arguments Type Intent Optional Attributes Name type( DATA_BEM_t ), intent(inout) :: YDATA_BEM Contents Source Code DATA_BEM_INIT Source Code SUBROUTINE DATA_BEM_INIT ( YDATA_BEM ) TYPE ( DATA_BEM_t ), INTENT ( INOUT ) :: YDATA_BEM REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_BEM_N:DATA_BEM_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDATA_BEM % XPAR_F_WASTE_CAN ) NULLIFY ( YDATA_BEM % XPAR_EFF_HEAT ) NULLIFY ( YDATA_BEM % XPAR_HC_FLOOR ) NULLIFY ( YDATA_BEM % XPAR_TC_FLOOR ) NULLIFY ( YDATA_BEM % XPAR_D_FLOOR ) NULLIFY ( YDATA_BEM % XPAR_QIN ) NULLIFY ( YDATA_BEM % XPAR_QIN_FRAD ) NULLIFY ( YDATA_BEM % XPAR_SHGC ) NULLIFY ( YDATA_BEM % XPAR_U_WIN ) NULLIFY ( YDATA_BEM % XPAR_GR ) NULLIFY ( YDATA_BEM % XPAR_FLOOR_HEIGHT ) NULLIFY ( YDATA_BEM % XPAR_INF ) NULLIFY ( YDATA_BEM % XPAR_F_WATER_COND ) NULLIFY ( YDATA_BEM % XPAR_QIN_FLAT ) NULLIFY ( YDATA_BEM % XPAR_V_VENT ) NULLIFY ( YDATA_BEM % XPAR_CAP_SYS_HEAT ) NULLIFY ( YDATA_BEM % XPAR_CAP_SYS_RAT ) NULLIFY ( YDATA_BEM % XPAR_T_ADP ) NULLIFY ( YDATA_BEM % XPAR_M_SYS_RAT ) NULLIFY ( YDATA_BEM % XPAR_COP_RAT ) NULLIFY ( YDATA_BEM % XPAR_T_SIZE_MAX ) NULLIFY ( YDATA_BEM % XPAR_T_SIZE_MIN ) NULLIFY ( YDATA_BEM % XPAR_SHADE ) NULLIFY ( YDATA_BEM % XPAR_NATVENT ) YDATA_BEM % LDATA_F_WASTE_CAN = . FALSE . YDATA_BEM % LDATA_EFF_HEAT = . FALSE . YDATA_BEM % LDATA_HC_FLOOR = . FALSE . YDATA_BEM % LDATA_TC_FLOOR = . FALSE . YDATA_BEM % LDATA_D_FLOOR = . FALSE . YDATA_BEM % LDATA_QIN = . FALSE . YDATA_BEM % LDATA_QIN_FRAD = . FALSE . YDATA_BEM % LDATA_SHGC = . FALSE . YDATA_BEM % LDATA_U_WIN = . FALSE . YDATA_BEM % LDATA_GR = . FALSE . YDATA_BEM % LDATA_SHGC_SH = . FALSE . YDATA_BEM % LDATA_FLOOR_HEIGHT = . FALSE . YDATA_BEM % LDATA_INF = . FALSE . YDATA_BEM % LDATA_F_WATER_COND = . FALSE . YDATA_BEM % LDATA_SHADE = . FALSE . YDATA_BEM % LDATA_NATVENT = . FALSE . YDATA_BEM % LDATA_V_VENT = . FALSE . YDATA_BEM % LDATA_QIN_FLAT = . FALSE . YDATA_BEM % LDATA_CAP_SYS_HEAT = . FALSE . YDATA_BEM % LDATA_CAP_SYS_RAT = . FALSE . YDATA_BEM % LDATA_T_ADP = . FALSE . YDATA_BEM % LDATA_M_SYS_RAT = . FALSE . YDATA_BEM % LDATA_COP_RAT = . FALSE . YDATA_BEM % LDATA_T_SIZE_MAX = . FALSE . YDATA_BEM % LDATA_T_SIZE_MIN = . FALSE . YDATA_BEM % NPAR_FLOOR_LAYER = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_BEM_N:DATA_BEM_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DATA_BEM_INIT","tags":"","loc":"proc/data_bem_init.html"},{"title":"CH_EMIS_FIELD_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine CH_EMIS_FIELD_INIT(YCH_EMIS_FIELD) Arguments Type Intent Optional Attributes Name type( CH_EMIS_FIELD_t ), intent(inout) :: YCH_EMIS_FIELD Contents Source Code CH_EMIS_FIELD_INIT Source Code SUBROUTINE CH_EMIS_FIELD_INIT ( YCH_EMIS_FIELD ) TYPE ( CH_EMIS_FIELD_t ), INTENT ( INOUT ) :: YCH_EMIS_FIELD REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_EMIS_FIELD_N:CH_EMIS_FIELD_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YCH_EMIS_FIELD % CEMIS_AREA ) NULLIFY ( YCH_EMIS_FIELD % CEMIS_COMMENT ) NULLIFY ( YCH_EMIS_FIELD % CEMIS_NAME ) NULLIFY ( YCH_EMIS_FIELD % NEMIS_TIME ) NULLIFY ( YCH_EMIS_FIELD % XEMIS_FIELDS ) NULLIFY ( YCH_EMIS_FIELD % TSEMISS ) YCH_EMIS_FIELD % XTIME_SIMUL = 0. YCH_EMIS_FIELD % NEMIS_NBR = 0 YCH_EMIS_FIELD % NTIME_MAX =- 1 YCH_EMIS_FIELD % NEMISPEC_NBR = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_EMIS_FIELD_N:CH_EMIS_FIELD_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_EMIS_FIELD_INIT","tags":"","loc":"proc/ch_emis_field_init.html"},{"title":"BLD_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"interface public subroutine BLD_E_BUDGET(OTI_EVOL, PTSTEP, PBLD, PWALL_O_HOR, PRHOA, PT_ROOF, PT_WALL, PTI_BLD, PTS_FLOOR) Arguments Type Intent Optional Attributes Name logical, intent(in) :: OTI_EVOL real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PBLD real, intent(in), DIMENSION(:) :: PWALL_O_HOR real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:,:) :: PT_ROOF real, intent(in), DIMENSION(:,:) :: PT_WALL real, intent(inout), DIMENSION(:) :: PTI_BLD real, intent(in), DIMENSION(:) :: PTS_FLOOR","tags":"","loc":"interface/bld_e_budget.html"},{"title":"ISBA – Town Energy Balance (TEB) model API docs","text":"interface public subroutine ISBA(IO, KK, PK, PEK, G, AG, DK, DEK, DMK, TPTIME, PPOI, PABC, PIACAN, OMEB, PTSTEP, HIMPLICIT_WIND, PZREF, PUREF, PDIRCOSZW, PTA, PQA, PEXNA, PRHOA, PPS, PEXNS, PRR, PSR, PZENITH, PSCA_SW, PSW_RAD, PLW_RAD, PVMOD, PPEW_A_COEF, PPEW_B_COEF, PPET_A_COEF, PPEQ_A_COEF, PPET_B_COEF, PPEQ_B_COEF, PALBNIR_TVEG, PALBVIS_TVEG, PALBNIR_TSOIL, PALBVIS_TSOIL, PPALPHAN, PZ0G_WITHOUT_SNOW, PZ0_MEBV, PZ0H_MEBV, PZ0EFF_MEBV, PZ0_MEBN, PZ0H_MEBN, PZ0EFF_MEBN, PTDEEP_A, PCSP, PFFG_NOSNOW, PFFV_NOSNOW, PEMIST, PUSTAR, PAC_AGG, PHU_AGG, PRESP_BIOMASS_INST, PDEEP_FLUX, PIRRIG_GR) Arguments Type Intent Optional Attributes Name type(ISBA_OPTIONS_t), intent(inout) :: IO type(ISBA_K_t), intent(inout) :: KK type(ISBA_P_t), intent(inout) :: PK type(ISBA_PE_t), intent(inout) :: PEK type(GRID_t), intent(inout) :: G type(AGRI_t), intent(inout) :: AG type(DIAG_t), intent(inout) :: DK type(DIAG_EVAP_ISBA_t), intent(inout) :: DEK type(DIAG_MISC_ISBA_t), intent(inout) :: DMK type(DATE_TIME), intent(in) :: TPTIME real, intent(in), DIMENSION(:) :: PPOI real, intent(inout), DIMENSION(:) :: PABC real, intent(out), DIMENSION(:,:) :: PIACAN logical, intent(in) :: OMEB real, intent(in) :: PTSTEP character(len=*), intent(in) :: HIMPLICIT_WIND real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PDIRCOSZW real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZENITH real, intent(in), DIMENSION(:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PSW_RAD real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPET_A_COEF real, intent(in), DIMENSION(:) :: PPEQ_A_COEF real, intent(in), DIMENSION(:) :: PPET_B_COEF real, intent(in), DIMENSION(:) :: PPEQ_B_COEF real, intent(in), DIMENSION(:) :: PALBNIR_TVEG real, intent(in), DIMENSION(:) :: PALBVIS_TVEG real, intent(in), DIMENSION(:) :: PALBNIR_TSOIL real, intent(in), DIMENSION(:) :: PALBVIS_TSOIL real, intent(in), DIMENSION(:) :: PPALPHAN real, intent(in), DIMENSION(:) :: PZ0G_WITHOUT_SNOW real, intent(in), DIMENSION(:) :: PZ0_MEBV real, intent(in), DIMENSION(:) :: PZ0H_MEBV real, intent(in), DIMENSION(:) :: PZ0EFF_MEBV real, intent(in), DIMENSION(:) :: PZ0_MEBN real, intent(in), DIMENSION(:) :: PZ0H_MEBN real, intent(in), DIMENSION(:) :: PZ0EFF_MEBN real, intent(in), DIMENSION(:) :: PTDEEP_A real, intent(in), DIMENSION(:) :: PCSP real, intent(in), DIMENSION(:) :: PFFG_NOSNOW real, intent(in), DIMENSION(:) :: PFFV_NOSNOW real, intent(out), DIMENSION(:) :: PEMIST real, intent(out), DIMENSION(:) :: PUSTAR real, intent(out), DIMENSION(:) :: PAC_AGG real, intent(out), DIMENSION(:) :: PHU_AGG real, intent(out), DIMENSION(:,:) :: PRESP_BIOMASS_INST real, intent(out), DIMENSION(:) :: PDEEP_FLUX real, intent(in), DIMENSION(:) :: PIRRIG_GR","tags":"","loc":"interface/isba.html"},{"title":"GRID_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine GRID_INIT(G) Arguments Type Intent Optional Attributes Name type( GRID_t ), intent(inout) :: G Contents Source Code GRID_INIT Source Code SUBROUTINE GRID_INIT ( G ) TYPE ( GRID_t ), INTENT ( INOUT ) :: G REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SFX_GRID_N:IGRID_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( G % XGRID_PAR ) NULLIFY ( G % XLAT ) NULLIFY ( G % XLON ) NULLIFY ( G % XMESH_SIZE ) G % NDIM = 0 G % CGRID = ' ' IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SFX_GRID_N:GRID_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE GRID_INIT","tags":"","loc":"proc/grid_init.html"},{"title":"GRID_NP_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine GRID_NP_INIT(GP, KPATCH) Arguments Type Intent Optional Attributes Name type( GRID_NP_t ), intent(inout) :: GP integer, intent(in) :: KPATCH Contents Source Code GRID_NP_INIT Source Code SUBROUTINE GRID_NP_INIT ( GP , KPATCH ) TYPE ( GRID_NP_t ), INTENT ( INOUT ) :: GP INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SFX_GRID_N:GRID_NP_INIT\" , 0 , ZHOOK_HANDLE ) IF ( ASSOCIATED ( GP % AL )) THEN DO JP = 1 , KPATCH CALL GRID_INIT ( GP % AL ( JP )) ENDDO DEALLOCATE ( GP % AL ) ELSE ALLOCATE ( GP % AL ( KPATCH )) DO JP = 1 , KPATCH CALL GRID_INIT ( GP % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SFX_GRID_N:GRID_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE GRID_NP_INIT","tags":"","loc":"proc/grid_np_init.html"},{"title":"SNOW_COVER_1LAYER – Town Energy Balance (TEB) model API docs","text":"interface public subroutine SNOW_COVER_1LAYER(PTSTEP, PANSMIN, PANSMAX, PTODRY, PRHOSMIN, PRHOSMAX, PRHOFOLD, OALL_MELT, PDRAIN_TIME, PWCRN, PZ0SN, PZ0HSN, TPSNOW, PTG, PTG_COEFA, PTG_COEFB, PABS_SW, PLW1, PLW2, PTA, PQA, PVMOD, PPS, PRHOA, PSR, PZREF, PUREF, PRNSNOW, PHSNOW, PLESNOW, PGSNOW, PMELT, PDQS_SNOW, PABS_LW) Arguments Type Intent Optional Attributes Name real, intent(in) :: PTSTEP real, intent(in) :: PANSMIN real, intent(in) :: PANSMAX real, intent(in) :: PTODRY real, intent(in) :: PRHOSMIN real, intent(in) :: PRHOSMAX real, intent(in) :: PRHOFOLD logical, intent(in) :: OALL_MELT real, intent(in) :: PDRAIN_TIME real, intent(in) :: PWCRN real, intent(in) :: PZ0SN real, intent(in) :: PZ0HSN type(SURF_SNOW), intent(inout) :: TPSNOW real, intent(in), DIMENSION(:) :: PTG real, intent(in), DIMENSION(:) :: PTG_COEFA real, intent(in), DIMENSION(:) :: PTG_COEFB real, intent(in), DIMENSION(:) :: PABS_SW real, intent(in), DIMENSION(:) :: PLW1 real, intent(in), DIMENSION(:) :: PLW2 real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(out), DIMENSION(:) :: PRNSNOW real, intent(out), DIMENSION(:) :: PHSNOW real, intent(out), DIMENSION(:) :: PLESNOW real, intent(out), DIMENSION(:) :: PGSNOW real, intent(out), DIMENSION(:) :: PMELT real, intent(out), DIMENSION(:) :: PDQS_SNOW real, intent(out), DIMENSION(:) :: PABS_LW","tags":"","loc":"interface/snow_cover_1layer.html"},{"title":"CH_SEAFLUX_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine CH_SEAFLUX_INIT(YCH_SEAFLUX) Arguments Type Intent Optional Attributes Name type( CH_SEAFLUX_t ), intent(inout) :: YCH_SEAFLUX Contents Source Code CH_SEAFLUX_INIT Source Code SUBROUTINE CH_SEAFLUX_INIT ( YCH_SEAFLUX ) TYPE ( CH_SEAFLUX_t ), INTENT ( INOUT ) :: YCH_SEAFLUX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_SEAFLUX_N:CH_SEAFLUX_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YCH_SEAFLUX % XDEP ) NULLIFY ( YCH_SEAFLUX % CCH_NAMES ) NULLIFY ( YCH_SEAFLUX % CAER_NAMES ) NULLIFY ( YCH_SEAFLUX % CDSTNAMES ) NULLIFY ( YCH_SEAFLUX % CSLTNAMES ) YCH_SEAFLUX % CCH_DRY_DEP = ' ' CALL SV_INIT ( YCH_SEAFLUX % SVS ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_SEAFLUX_N:CH_SEAFLUX_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_SEAFLUX_INIT","tags":"","loc":"proc/ch_seaflux_init.html"},{"title":"GetUnitSystem – Town Energy Balance (TEB) model API docs","text":"public function GetUnitSystem() result(UnitSystem) Arguments None Return Value integer Contents Source Code GetUnitSystem Source Code function GetUnitSystem () result ( UnitSystem ) !+ Return the system of units in use. integer :: UnitSystem UnitSystem = PSYCHROLIB_UNITS end function GetUnitSystem","tags":"","loc":"proc/getunitsystem.html"},{"title":"isIP – Town Energy Balance (TEB) model API docs","text":"public function isIP() Arguments None Return Value logical Contents Source Code isIP Source Code function isIP () !+ Check whether the system in use is IP or SI logical :: isIP if ( PSYCHROLIB_UNITS == IP ) then isIP = . true . else if ( PSYCHROLIB_UNITS == SI ) then isIP = . false . else error stop \"The system of units has not been defined.\" end if end function isIP","tags":"","loc":"proc/isip.html"},{"title":"GetTRankineFromTFahrenheit – Town Energy Balance (TEB) model API docs","text":"public function GetTRankineFromTFahrenheit(TFahrenheit) result(TRankine) Arguments Type Intent Optional Attributes Name real, intent(in) :: TFahrenheit Return Value real Contents Source Code GetTRankineFromTFahrenheit Source Code function GetTRankineFromTFahrenheit ( TFahrenheit ) result ( TRankine ) !+ Utility function to convert temperature to degree Rankine (°R) !+ given temperature in degree Fahrenheit (°F). !+ Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 real , intent ( in ) :: TFahrenheit !+ Temperature in degree Fahrenheit real :: TRankine !+ Temperature in degree Rankine TRankine = TFahrenheit + ZERO_FAHRENHEIT_AS_RANKINE end function GetTRankineFromTFahrenheit","tags":"","loc":"proc/gettrankinefromtfahrenheit.html"},{"title":"GetTFahrenheitFromTRankine – Town Energy Balance (TEB) model API docs","text":"public function GetTFahrenheitFromTRankine(TRankine) result(TFahrenheit) Arguments Type Intent Optional Attributes Name real, intent(in) :: TRankine Return Value real Contents Source Code GetTFahrenheitFromTRankine Source Code function GetTFahrenheitFromTRankine ( TRankine ) result ( TFahrenheit ) !+ Utility function to convert temperature to degree Fahrenheit (°F) !+ given temperature in degree Rankine (°R). !+ Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 real , intent ( in ) :: TRankine !+ Temperature in degree Rankine real :: TFahrenheit !+ Temperature in degree Fahrenheit TFahrenheit = TRankine - ZERO_FAHRENHEIT_AS_RANKINE end function GetTFahrenheitFromTRankine","tags":"","loc":"proc/gettfahrenheitfromtrankine.html"},{"title":"GetTKelvinFromTCelsius – Town Energy Balance (TEB) model API docs","text":"public function GetTKelvinFromTCelsius(TCelsius) result(TKelvin) Arguments Type Intent Optional Attributes Name real, intent(in) :: TCelsius Return Value real Contents Source Code GetTKelvinFromTCelsius Source Code function GetTKelvinFromTCelsius ( TCelsius ) result ( TKelvin ) !+ Utility function to convert temperature to Kelvin (K) !+ given temperature in degree Celsius (°C). !+ Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 real , intent ( in ) :: TCelsius !+ Temperature in degree Celsius real :: TKelvin !+ Tempearatyre in Kelvin TKelvin = TCelsius + ZERO_CELSIUS_AS_KELVIN end function GetTKelvinFromTCelsius","tags":"","loc":"proc/gettkelvinfromtcelsius.html"},{"title":"GetTCelsiusFromTKelvin – Town Energy Balance (TEB) model API docs","text":"public function GetTCelsiusFromTKelvin(TKelvin) result(TCelsius) Arguments Type Intent Optional Attributes Name real, intent(in) :: TKelvin Return Value real Contents Source Code GetTCelsiusFromTKelvin Source Code function GetTCelsiusFromTKelvin ( TKelvin ) result ( TCelsius ) !+ Utility function to convert temperature to degree Celsius (°C) !+ given temperature in Kelvin (K). !+ Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3 real , intent ( in ) :: TKelvin !+ Tempearatyre in Kelvin real :: TCelsius !+ Temperature in degree Celsius TCelsius = TKelvin - ZERO_CELSIUS_AS_KELVIN end function GetTCelsiusFromTKelvin","tags":"","loc":"proc/gettcelsiusfromtkelvin.html"},{"title":"GetTWetBulbFromTDewPoint – Town Energy Balance (TEB) model API docs","text":"public function GetTWetBulbFromTDewPoint(TDryBulb, TDewPoint, Pressure) result(TWetBulb) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: TDewPoint real, intent(in) :: Pressure Return Value real Contents Source Code GetTWetBulbFromTDewPoint Source Code function GetTWetBulbFromTDewPoint ( TDryBulb , TDewPoint , Pressure ) result ( TWetBulb ) !+ Return wet-bulb temperature given dry-bulb temperature, dew-point temperature, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( TDewPoint > TDryBulb ) then error stop \"Error: dew point temperature is above dry bulb temperature\" end if HumRatio = GetHumRatioFromTDewPoint ( TDewPoint , Pressure ) TWetBulb = GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) end function GetTWetBulbFromTDewPoint","tags":"","loc":"proc/gettwetbulbfromtdewpoint.html"},{"title":"GetTWetBulbFromRelHum – Town Energy Balance (TEB) model API docs","text":"public function GetTWetBulbFromRelHum(TDryBulb, RelHum, Pressure) result(TWetBulb) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: RelHum real, intent(in) :: Pressure Return Value real Contents Source Code GetTWetBulbFromRelHum Source Code function GetTWetBulbFromRelHum ( TDryBulb , RelHum , Pressure ) result ( TWetBulb ) !+ Return wet-bulb temperature given dry-bulb temperature, relative humidity, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( RelHum < 0.0 . or . RelHum > 1.0 ) then error stop \"Error: relative humidity is outside range [0,1]\" end if HumRatio = GetHumRatioFromRelHum ( TDryBulb , RelHum , Pressure ) TWetBulb = GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) end function GetTWetBulbFromRelHum","tags":"","loc":"proc/gettwetbulbfromrelhum.html"},{"title":"GetRelHumFromTDewPoint – Town Energy Balance (TEB) model API docs","text":"public function GetRelHumFromTDewPoint(TDryBulb, TDewPoint) result(RelHum) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: TDewPoint Return Value real Contents Source Code GetRelHumFromTDewPoint Source Code function GetRelHumFromTDewPoint ( TDryBulb , TDewPoint ) result ( RelHum ) !+ Return relative humidity given dry-bulb temperature and dew-point temperature. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 22 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: RelHum !+ Relative humidity in range [0, 1] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real :: SatVapPres !+ Vapor pressure of saturated air in Psi [IP] or Pa [SI] if ( TDewPoint > TDryBulb ) then error stop \"Error: dew point temperature is above dry bulb temperature\" end if VapPres = GetSatVapPres ( TDewPoint ) SatVapPres = GetSatVapPres ( TDryBulb ) RelHum = VapPres / SatVapPres end function GetRelHumFromTDewPoint","tags":"","loc":"proc/getrelhumfromtdewpoint.html"},{"title":"GetRelHumFromTWetBulb – Town Energy Balance (TEB) model API docs","text":"public function GetRelHumFromTWetBulb(TDryBulb, TWetBulb, Pressure) result(RelHum) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: TWetBulb real, intent(in) :: Pressure Return Value real Contents Source Code GetRelHumFromTWetBulb Source Code function GetRelHumFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) result ( RelHum ) !+ Return relative humidity given dry-bulb temperature, wet bulb temperature and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: RelHum !+ Relative humidity in range [0, 1] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( TWetBulb > TDryBulb ) then error stop \"Error: wet bulb temperature is above dry bulb temperature\" end if HumRatio = GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) RelHum = GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) end function GetRelHumFromTWetBulb","tags":"","loc":"proc/getrelhumfromtwetbulb.html"},{"title":"GetTDewPointFromRelHum – Town Energy Balance (TEB) model API docs","text":"public function GetTDewPointFromRelHum(TDryBulb, RelHum) result(TDewPoint) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: RelHum Return Value real Contents Source Code GetTDewPointFromRelHum Source Code function GetTDewPointFromRelHum ( TDryBulb , RelHum ) result ( TDewPoint ) !+ Return dew-point temperature given dry-bulb temperature and relative humidity. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( RelHum < 0.0 . or . RelHum > 1.0 ) then error stop \"Error: relative humidity is outside range [0,1]\" end if VapPres = GetVapPresFromRelHum ( TDryBulb , RelHum ) TDewPoint = GetTDewPointFromVapPres ( TDryBulb , VapPres ) end function GetTDewPointFromRelHum","tags":"","loc":"proc/gettdewpointfromrelhum.html"},{"title":"GetTDewPointFromTWetBulb – Town Energy Balance (TEB) model API docs","text":"public function GetTDewPointFromTWetBulb(TDryBulb, TWetBulb, Pressure) result(TDewPoint) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: TWetBulb real, intent(in) :: Pressure Return Value real Contents Source Code GetTDewPointFromTWetBulb Source Code function GetTDewPointFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) result ( TDewPoint ) !+ Return dew-point temperature given dry-bulb temperature, wet-bulb temperature, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( TWetBulb > TDryBulb ) then error stop \"Error: wet bulb temperature is above dry bulb temperature\" end if HumRatio = GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) TDewPoint = GetTDewPointFromHumRatio ( TDryBulb , HumRatio , Pressure ) end function GetTDewPointFromTWetBulb","tags":"","loc":"proc/gettdewpointfromtwetbulb.html"},{"title":"GetVapPresFromRelHum – Town Energy Balance (TEB) model API docs","text":"public function GetVapPresFromRelHum(TDryBulb, RelHum) result(VapPres) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: RelHum Return Value real Contents Source Code GetVapPresFromRelHum Source Code function GetVapPresFromRelHum ( TDryBulb , RelHum ) result ( VapPres ) !+ Return partial pressure of water vapor as a function of relative humidity and temperature. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( RelHum < 0.0 . or . RelHum > 1.0 ) then error stop \"Error: relative humidity is outside range [0,1]\" end if VapPres = RelHum * GetSatVapPres ( TDryBulb ) end function GetVapPresFromRelHum","tags":"","loc":"proc/getvappresfromrelhum.html"},{"title":"GetRelHumFromVapPres – Town Energy Balance (TEB) model API docs","text":"public function GetRelHumFromVapPres(TDryBulb, VapPres) result(RelHum) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: VapPres Return Value real Contents Source Code GetRelHumFromVapPres Source Code function GetRelHumFromVapPres ( TDryBulb , VapPres ) result ( RelHum ) !+ Return relative humidity given dry-bulb temperature and vapor pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real :: RelHum !+ Relative humidity in range [0, 1] if ( VapPres < 0.0 ) then error stop \"Error: partial pressure of water vapor in moist air cannot be negative\" end if RelHum = VapPres / GetSatVapPres ( TDryBulb ) end function GetRelHumFromVapPres","tags":"","loc":"proc/getrelhumfromvappres.html"},{"title":"dLnPws_ – Town Energy Balance (TEB) model API docs","text":"public function dLnPws_(TDryBulb) result(dLnPws) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Return Value real Contents Source Code dLnPws_ Source Code function dLnPws_ ( TDryBulb ) result ( dLnPws ) !+ Helper function returning the derivative of the natural log of the saturation vapor pressure !+ as a function of dry-bulb temperature. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1  eqn 5 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: dLnPws !+ Derivative of natural log of vapor pressure of saturated air in Psi [IP] or Pa [SI] real :: T !+ Dry bulb temperature in R [IP] or K [SI] if ( isIP ()) then T = GetTRankineFromTFahrenheit ( TDryBulb ) if ( TDryBulb <= TRIPLE_POINT_WATER_IP ) then dLnPws = 1.0214165E+04 / T ** 2 - 5.3765794E-03 + 2 * 1.9202377E-07 * T & + 3 * 3.5575832E-10 * T ** 2 - 4 * 9.0344688E-14 * T ** 3 + 4.1635019 / T else dLnPws = 1.0440397E+04 / T ** 2 - 2.7022355E-02 + 2 * 1.2890360E-05 * T & - 3 * 2.4780681E-09 * T ** 2 + 6.5459673 / T end if else T = GetTKelvinFromTCelsius ( TDryBulb ) if ( TDryBulb <= TRIPLE_POINT_WATER_SI ) then dLnPws = 5.6745359E+03 / T ** 2 - 9.677843E-03 + 2 * 6.2215701E-07 * T & + 3 * 2.0747825E-09 * T ** 2 - 4 * 9.484024E-13 * T ** 3 + 4.1635019 / T else dLnPws = 5.8002206E+03 / T ** 2 - 4.8640239E-02 + 2 * 4.1764768E-05 * T & - 3 * 1.4452093E-08 * T ** 2 + 6.5459673 / T end if end if end function dLnPws_","tags":"","loc":"proc/dlnpws_.html"},{"title":"GetTDewPointFromVapPres – Town Energy Balance (TEB) model API docs","text":"public function GetTDewPointFromVapPres(TDryBulb, VapPres) result(TDewPoint) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: VapPres Return Value real Contents Source Code GetTDewPointFromVapPres Source Code function GetTDewPointFromVapPres ( TDryBulb , VapPres ) result ( TDewPoint ) !+ Return dew-point temperature given dry-bulb temperature and vapor pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 5 and 6 !+ Notes: !+ The dew point temperature is solved by inverting the equation giving water vapor pressure !+ at saturation from temperature rather than using the regressions provided !+ by ASHRAE (eqn. 37 and 38) which are much less accurate and have a !+ narrower range of validity. !+ The Newton-Raphson (NR) method is used on the logarithm of water vapour !+ pressure as a function of temperature, which is a very smooth function !+ Convergence is usually achieved in 3 to 5 iterations. !+ TDryBulb is not really needed here, just used for convenience. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: lnVP !+ Natural logarithm of partial pressure of water vapor pressure in moist air real :: d_lnVP !+ Derivative of function, calculated numerically real :: lnVP_iter !+ Value of log of vapor water pressure used in NR calculation real :: TDewPoint_iter !+ Value of TDewPoint used in NR calculation real , dimension ( 2 ) :: BOUNDS !+ Valid temperature range in °F [IP] or °C [SI] integer :: index !+ Index used in the calculation ! Bounds and step size as a function of the system of units if ( isIP ()) then BOUNDS ( 1 ) = - 14 8.0 BOUNDS ( 2 ) = 39 2.0 else BOUNDS ( 1 ) = - 10 0.0 BOUNDS ( 2 ) = 20 0.0 end if ! Validity check -- bounds outside which a solution cannot be found if ( VapPres < GetSatVapPres ( BOUNDS ( 1 )) . or . VapPres > GetSatVapPres ( BOUNDS ( 2 ))) then error stop \"Error: partial pressure of water vapor is outside range of validity of equations\" end if ! We use NR to approximate the solution. TDewPoint = TDryBulb lnVP = log ( VapPres ) index = 1 do while (. true .) TDewPoint_iter = TDewPoint ! TDewPoint_iter used in NR calculation lnVP_iter = log ( GetSatVapPres ( TDewPoint_iter )) ! Derivative of function, calculated analytically d_lnVP = dLnPws_ ( TDewPoint_iter ) ! New estimate, bounded by the search domain defined above TDewPoint = TDewPoint_iter - ( lnVP_iter - lnVP ) / d_lnVP TDewPoint = max ( TDewPoint , BOUNDS ( 1 )) TDewPoint = min ( TDewPoint , BOUNDS ( 2 )) if ( abs ( TDewPoint - TDewPoint_iter ) <= PSYCHROLIB_TOLERANCE ) then exit end if if ( index > MAX_ITER_COUNT ) then error stop \"Convergence not reached in GetTDewPointFromVapPres. Stopping.\" end if index = index + 1 end do TDewPoint = min ( TDewPoint , TDryBulb ) end function GetTDewPointFromVapPres","tags":"","loc":"proc/gettdewpointfromvappres.html"},{"title":"GetVapPresFromTDewPoint – Town Energy Balance (TEB) model API docs","text":"public function GetVapPresFromTDewPoint(TDewPoint) result(VapPres) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDewPoint Return Value real Contents Source Code GetVapPresFromTDewPoint Source Code function GetVapPresFromTDewPoint ( TDewPoint ) result ( VapPres ) !+ Return vapor pressure given dew point temperature. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 36 real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] VapPres = GetSatVapPres ( TDewPoint ) end function GetVapPresFromTDewPoint","tags":"","loc":"proc/getvappresfromtdewpoint.html"},{"title":"GetTWetBulbFromHumRatio – Town Energy Balance (TEB) model API docs","text":"public function GetTWetBulbFromHumRatio(TDryBulb, HumRatio, Pressure) result(TWetBulb) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real Contents Source Code GetTWetBulbFromHumRatio Source Code function GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) result ( TWetBulb ) !+ Return wet-bulb temperature given dry-bulb temperature, humidity ratio, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35 solved for Tstar real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real :: TDewPoint !+ TDewPoint : Dew-point temperature in °F [IP] or °C [SI] real :: TWetBulbSup !+ Upper value of wet bulb temperature in bissection method (initial guess is from dry bulb temperature) in °F [IP] or °C [SI] real :: TWetBulbInf !+ Lower value of wet bulb temperature in bissection method (initial guess is from dew point temperature) in °F [IP] or °C [SI] real :: Wstar !+ Humidity ratio at temperature Tstar in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO integer :: index !+ index used in iteration if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio cannot be negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) TDewPoint = GetTDewPointFromHumRatio ( TDryBulb , BoundedHumRatio , Pressure ) ! Initial guesses TWetBulbSup = TDryBulb TWetBulbInf = TDewPoint TWetBulb = ( TWetBulbInf + TWetBulbSup ) / 2.0 index = 1 ! Bisection loop do while (( TWetBulbSup - TWetBulbInf ) > PSYCHROLIB_TOLERANCE ) ! Compute humidity ratio at temperature Tstar Wstar = GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) ! Get new bounds if ( Wstar > BoundedHumRatio ) then TWetBulbSup = TWetBulb else TWetBulbInf = TWetBulb end if ! New guess of wet bulb temperature TWetBulb = ( TWetBulbSup + TWetBulbInf ) / 2.0 if ( index > MAX_ITER_COUNT ) then error stop \"Convergence not reached in GetTWetBulbFromHumRatio. Stopping.\" end if index = index + 1 end do end function GetTWetBulbFromHumRatio","tags":"","loc":"proc/gettwetbulbfromhumratio.html"},{"title":"GetHumRatioFromTWetBulb – Town Energy Balance (TEB) model API docs","text":"public function GetHumRatioFromTWetBulb(TDryBulb, TWetBulb, Pressure) result(HumRatio) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: TWetBulb real, intent(in) :: Pressure Return Value real Contents Source Code GetHumRatioFromTWetBulb Source Code function GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) result ( HumRatio ) !+ Return humidity ratio given dry-bulb temperature, wet-bulb temperature, and pressure. !+ References: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: Wsstar !+ Humidity ratio at temperature Tstar in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( TWetBulb > TDryBulb ) then error stop \"Error: wet bulb temperature is above dry bulb temperature\" end if Wsstar = GetSatHumRatio ( TWetBulb , Pressure ) if ( isIP ()) then if ( TWetBulb >= FREEZING_POINT_WATER_IP ) then HumRatio = (( 109 3.0 - 0.556 * TWetBulb ) * Wsstar - 0.240 * ( TDryBulb - TWetBulb )) & / ( 109 3.0 + 0.444 * TDryBulb - TWetBulb ) else HumRatio = (( 122 0.0 - 0.04 * TWetBulb ) * Wsstar - 0.240 * ( TDryBulb - TWetBulb )) & / ( 122 0.0 + 0.444 * TDryBulb - 0.48 * TWetBulb ) end if else if ( TWetBulb >= FREEZING_POINT_WATER_SI ) then HumRatio = (( 250 1.0 - 2.326 * TWetBulb ) * Wsstar - 1.006 * ( TDryBulb - TWetBulb )) & / ( 250 1.0 + 1.86 * TDryBulb - 4.186 * TWetBulb ) else HumRatio = (( 283 0.0 - 0.24 * TWetBulb ) * Wsstar - 1.006 * ( TDryBulb - TWetBulb )) & / ( 283 0.0 + 1.86 * TDryBulb - 2.1 * TWetBulb ) end if end if ! Validity check. HumRatio = max ( HumRatio , MIN_HUM_RATIO ) end function GetHumRatioFromTWetBulb","tags":"","loc":"proc/gethumratiofromtwetbulb.html"},{"title":"GetHumRatioFromRelHum – Town Energy Balance (TEB) model API docs","text":"public function GetHumRatioFromRelHum(TDryBulb, RelHum, Pressure) result(HumRatio) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: RelHum real, intent(in) :: Pressure Return Value real Contents Source Code GetHumRatioFromRelHum Source Code function GetHumRatioFromRelHum ( TDryBulb , RelHum , Pressure ) result ( HumRatio ) !+ Return humidity ratio given dry-bulb temperature, relative humidity, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( RelHum < 0.0 . or . RelHum > 1.0 ) then error stop \"Error: relative humidity is outside range [0,1]\" end if VapPres = GetVapPresFromRelHum ( TDryBulb , RelHum ) HumRatio = GetHumRatioFromVapPres ( VapPres , Pressure ) end function GetHumRatioFromRelHum","tags":"","loc":"proc/gethumratiofromrelhum.html"},{"title":"GetRelHumFromHumRatio – Town Energy Balance (TEB) model API docs","text":"public function GetRelHumFromHumRatio(TDryBulb, HumRatio, Pressure) result(RelHum) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real Contents Source Code GetRelHumFromHumRatio Source Code function GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) result ( RelHum ) !+ Return relative humidity given dry-bulb temperature, humidity ratio, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: RelHum !+ Relative humidity in range [0, 1] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio cannot be negative\" end if VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) RelHum = GetRelHumFromVapPres ( TDryBulb , VapPres ) end function GetRelHumFromHumRatio","tags":"","loc":"proc/getrelhumfromhumratio.html"},{"title":"GetHumRatioFromTDewPoint – Town Energy Balance (TEB) model API docs","text":"public function GetHumRatioFromTDewPoint(TDewPoint, Pressure) result(HumRatio) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDewPoint real, intent(in) :: Pressure Return Value real Contents Source Code GetHumRatioFromTDewPoint Source Code function GetHumRatioFromTDewPoint ( TDewPoint , Pressure ) result ( HumRatio ) !+ Return humidity ratio given dew-point temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] VapPres = GetSatVapPres ( TDewPoint ) HumRatio = GetHumRatioFromVapPres ( VapPres , Pressure ) end function GetHumRatioFromTDewPoint","tags":"","loc":"proc/gethumratiofromtdewpoint.html"},{"title":"GetTDewPointFromHumRatio – Town Energy Balance (TEB) model API docs","text":"public function GetTDewPointFromHumRatio(TDryBulb, HumRatio, Pressure) result(TDewPoint) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real Contents Source Code GetTDewPointFromHumRatio Source Code function GetTDewPointFromHumRatio ( TDryBulb , HumRatio , Pressure ) result ( TDewPoint ) !+ Return dew-point temperature given dry-bulb temperature, humidity ratio, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio cannot be negative\" end if VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) TDewPoint = GetTDewPointFromVapPres ( TDryBulb , VapPres ) end function GetTDewPointFromHumRatio","tags":"","loc":"proc/gettdewpointfromhumratio.html"},{"title":"GetHumRatioFromVapPres – Town Energy Balance (TEB) model API docs","text":"public function GetHumRatioFromVapPres(VapPres, Pressure) result(HumRatio) Arguments Type Intent Optional Attributes Name real, intent(in) :: VapPres real, intent(in) :: Pressure Return Value real Contents Source Code GetHumRatioFromVapPres Source Code function GetHumRatioFromVapPres ( VapPres , Pressure ) result ( HumRatio ) !+ Return humidity ratio given water vapor pressure and atmospheric pressure. !+ Reference: !+ ASHRAE Fundamentals (2005) ch. 6 eqn. 22; !+ ASHRAE Fundamentals (2009) ch. 1 eqn. 22. real , intent ( in ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( VapPres < 0.0 ) then error stop \"Error: partial pressure of water vapor in moist air cannot be negative\" end if HumRatio = 0.621945 * VapPres / ( Pressure - VapPres ) ! Validity check. HumRatio = max ( HumRatio , MIN_HUM_RATIO ) end function GetHumRatioFromVapPres","tags":"","loc":"proc/gethumratiofromvappres.html"},{"title":"GetVapPresFromHumRatio – Town Energy Balance (TEB) model API docs","text":"public function GetVapPresFromHumRatio(HumRatio, Pressure) result(VapPres) Arguments Type Intent Optional Attributes Name real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real Contents Source Code GetVapPresFromHumRatio Source Code function GetVapPresFromHumRatio ( HumRatio , Pressure ) result ( VapPres ) !+ Return vapor pressure given humidity ratio and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 20 solved for pw real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) VapPres = Pressure * BoundedHumRatio / ( 0.621945 + BoundedHumRatio ) end function GetVapPresFromHumRatio","tags":"","loc":"proc/getvappresfromhumratio.html"},{"title":"GetSpecificHumFromHumRatio – Town Energy Balance (TEB) model API docs","text":"public function GetSpecificHumFromHumRatio(HumRatio) result(SpecificHum) Arguments Type Intent Optional Attributes Name real, intent(in) :: HumRatio Return Value real Contents Source Code GetSpecificHumFromHumRatio Source Code function GetSpecificHumFromHumRatio ( HumRatio ) result ( SpecificHum ) !+ Return the specific humidity from humidity ratio (aka mixing ratio). !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Dry_Air⁻¹ [IP] or kg_H₂O kg_Dry_Air⁻¹ [SI] real :: SpecificHum !+ Specific humidity in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio cannot be negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) SpecificHum = BoundedHumRatio / ( 1.0 + BoundedHumRatio ) end function GetSpecificHumFromHumRatio","tags":"","loc":"proc/getspecifichumfromhumratio.html"},{"title":"GetHumRatioFromSpecificHum – Town Energy Balance (TEB) model API docs","text":"public function GetHumRatioFromSpecificHum(SpecificHum) result(HumRatio) Arguments Type Intent Optional Attributes Name real, intent(in) :: SpecificHum Return Value real Contents Source Code GetHumRatioFromSpecificHum Source Code function GetHumRatioFromSpecificHum ( SpecificHum ) result ( HumRatio ) !+ Return the humidity ratio (aka mixing ratio) from specific humidity. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b (solved for humidity ratio) real , intent ( in ) :: SpecificHum !+ Specific humidity in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Dry_Air⁻¹ [IP] or kg_H₂O kg_Dry_Air⁻¹ [SI] if ( SpecificHum < 0.0 . or . SpecificHum >= 1.0 ) then error stop \"Error: specific humidity is outside range [0, 1)\" end if HumRatio = SpecificHum / ( 1.0 - SpecificHum ) ! Validity check. HumRatio = max ( HumRatio , MIN_HUM_RATIO ) end function GetHumRatioFromSpecificHum","tags":"","loc":"proc/gethumratiofromspecifichum.html"},{"title":"GetDryAirEnthalpy – Town Energy Balance (TEB) model API docs","text":"public function GetDryAirEnthalpy(TDryBulb) result(DryAirEnthalpy) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Return Value real Contents Source Code GetDryAirEnthalpy Source Code function GetDryAirEnthalpy ( TDryBulb ) result ( DryAirEnthalpy ) !+ Return dry-air enthalpy given dry-bulb temperature. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 28 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: DryAirEnthalpy !+ Dry air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] if ( isIP ()) then DryAirEnthalpy = 0.240 * TDryBulb else DryAirEnthalpy = 1006 * TDryBulb end if end function GetDryAirEnthalpy","tags":"","loc":"proc/getdryairenthalpy.html"},{"title":"GetDryAirDensity – Town Energy Balance (TEB) model API docs","text":"public function GetDryAirDensity(TDryBulb, Pressure) result(DryAirDensity) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: Pressure Return Value real Contents Source Code GetDryAirDensity Source Code function GetDryAirDensity ( TDryBulb , Pressure ) result ( DryAirDensity ) !+ Return dry-air density given dry-bulb temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 !+ Notes: !+ Eqn 14 for the perfect gas relationship for dry air. !+ Eqn 1 for the universal gas constant. !+ The factor 144 in IP is for the conversion of Psi = lb in⁻² to lb ft⁻². real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: DryAirDensity !+ Dry air density in lb ft⁻³ [IP] or kg m⁻³ [SI] if ( isIP ()) then DryAirDensity = ( 144 * Pressure ) / R_DA_IP / GetTRankineFromTFahrenheit ( TDryBulb ) else DryAirDensity = Pressure / R_DA_SI / GetTKelvinFromTCelsius ( TDryBulb ) end if end function GetDryAirDensity","tags":"","loc":"proc/getdryairdensity.html"},{"title":"GetDryAirVolume – Town Energy Balance (TEB) model API docs","text":"public function GetDryAirVolume(TDryBulb, Pressure) result(DryAirVolume) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: Pressure Return Value real Contents Source Code GetDryAirVolume Source Code function GetDryAirVolume ( TDryBulb , Pressure ) result ( DryAirVolume ) !+ Return dry-air volume given dry-bulb temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 !+ Notes: !+ Eqn 14 for the perfect gas relationship for dry air. !+ Eqn 1 for the universal gas constant. !+ The factor 144 in IP is for the conversion of Psi = lb in⁻² to lb ft⁻². real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: DryAirVolume !+ Dry air volume in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] if ( isIP ()) then DryAirVolume = GetTRankineFromTFahrenheit ( TDryBulb ) * R_DA_IP / ( 144 * Pressure ) else DryAirVolume = GetTKelvinFromTCelsius ( TDryBulb ) * R_DA_SI / Pressure end if end function GetDryAirVolume","tags":"","loc":"proc/getdryairvolume.html"},{"title":"GetTDryBulbFromEnthalpyAndHumRatio – Town Energy Balance (TEB) model API docs","text":"public function GetTDryBulbFromEnthalpyAndHumRatio(MoistAirEnthalpy, HumRatio) result(TDryBulb) Arguments Type Intent Optional Attributes Name real, intent(in) :: MoistAirEnthalpy real, intent(in) :: HumRatio Return Value real Contents Source Code GetTDryBulbFromEnthalpyAndHumRatio Source Code function GetTDryBulbFromEnthalpyAndHumRatio ( MoistAirEnthalpy , HumRatio ) result ( TDryBulb ) !+ Return dry bulb temperature from enthalpy and humidity ratio. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30 !+ Notes: !+ Based on the `GetMoistAirEnthalpy` function, rearranged for temperature. real , intent ( in ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) if ( isIP ()) then TDryBulb = ( MoistAirEnthalpy - 106 1.0 * BoundedHumRatio ) / ( 0.240 + 0.444 * BoundedHumRatio ) else TDryBulb = ( MoistAirEnthalpy / 100 0.0 - 250 1.0 * BoundedHumRatio ) / ( 1.006 + 1.86 * BoundedHumRatio ) end if end function GetTDryBulbFromEnthalpyAndHumRatio","tags":"","loc":"proc/gettdrybulbfromenthalpyandhumratio.html"},{"title":"GetHumRatioFromEnthalpyAndTDryBulb – Town Energy Balance (TEB) model API docs","text":"public function GetHumRatioFromEnthalpyAndTDryBulb(MoistAirEnthalpy, TDryBulb) result(HumRatio) Arguments Type Intent Optional Attributes Name real, intent(in) :: MoistAirEnthalpy real, intent(in) :: TDryBulb Return Value real Contents Source Code GetHumRatioFromEnthalpyAndTDryBulb Source Code function GetHumRatioFromEnthalpyAndTDryBulb ( MoistAirEnthalpy , TDryBulb ) result ( HumRatio ) !+ Return humidity ratio from enthalpy and dry-bulb temperature. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30 !+ Notes: !+ Based on the `GetMoistAirEnthalpy` function, rearranged for humidity ratio. real , intent ( in ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] if ( isIP ()) then HumRatio = ( MoistAirEnthalpy - 0.240 * TDryBulb ) / ( 106 1.0 + 0.444 * TDryBulb ) else HumRatio = ( MoistAirEnthalpy / 100 0.0 - 1.006 * TDryBulb ) / ( 250 1.0 + 1.86 * TDryBulb ) end if ! Validity check. HumRatio = max ( HumRatio , MIN_HUM_RATIO ) end function GetHumRatioFromEnthalpyAndTDryBulb","tags":"","loc":"proc/gethumratiofromenthalpyandtdrybulb.html"},{"title":"GetSatVapPres – Town Energy Balance (TEB) model API docs","text":"public function GetSatVapPres(TDryBulb) result(SatVapPres) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Return Value real Contents Source Code GetSatVapPres Source Code function GetSatVapPres ( TDryBulb ) result ( SatVapPres ) !+ Return saturation vapor pressure given dry-bulb temperature. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1  eqn 5 !+ Important note: the ASHRAE formulae are defined above and below the freezing point but have !+ a discontinuity at the freezing point. This is a small inaccuracy on ASHRAE's part: the formulae !+ should be defined above and below the triple point of water (not the feezing point) in which case !+ the discontinuity vanishes. It is essential to use the triple point of water otherwise function !+ GetTDewPointFromVapPres, which inverts the present function, does not converge properly around !+ the freezing point. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: SatVapPres !+ Vapor pressure of saturated air in Psi [IP] or Pa [SI] real :: LnPws !+ Log of Vapor Pressure of saturated air (dimensionless) real :: T !+ Dry bulb temperature in R [IP] or K [SI] if ( isIP ()) then if ( TDryBulb < - 14 8.0 . or . TDryBulb > 39 2.0 ) then error stop \"Error: dry bulb temperature must be in range [-148, 392]°F\" end if T = GetTRankineFromTFahrenheit ( TDryBulb ) if ( TDryBulb <= TRIPLE_POINT_WATER_IP ) then LnPws = ( - 1.0214165E+04 / T - 4.8932428 - 5.3765794E-03 * T + 1.9202377E-07 * T ** 2 & + 3.5575832E-10 * T ** 3 - 9.0344688E-14 * T ** 4 + 4.1635019 * log ( T )) else LnPws = - 1.0440397E+04 / T - 1.1294650E+01 - 2.7022355E-02 * T + 1.2890360E-05 * T ** 2 & - 2.4780681E-09 * T ** 3 + 6.5459673 * log ( T ) end if else if ( TDryBulb < - 10 0.0 . or . TDryBulb > 20 0.0 ) then error stop \"Error: dry bulb temperature must be in range [-100, 200]°C\" end if T = GetTKelvinFromTCelsius ( TDryBulb ) if ( TDryBulb <= TRIPLE_POINT_WATER_SI ) then LnPws = - 5.6745359E+03 / T + 6.3925247 - 9.677843E-03 * T + 6.2215701E-07 * T ** 2 & + 2.0747825E-09 * T ** 3 - 9.484024E-13 * T ** 4 + 4.1635019 * log ( T ) else LnPws = - 5.8002206E+03 / T + 1.3914993 - 4.8640239E-02 * T + 4.1764768E-05 * T ** 2 & - 1.4452093E-08 * T ** 3 + 6.5459673 * log ( T ) end if end if SatVapPres = exp ( LnPws ) end function GetSatVapPres","tags":"","loc":"proc/getsatvappres.html"},{"title":"GetSatHumRatio – Town Energy Balance (TEB) model API docs","text":"public function GetSatHumRatio(TDryBulb, Pressure) result(SatHumRatio) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: Pressure Return Value real Contents Source Code GetSatHumRatio Source Code function GetSatHumRatio ( TDryBulb , Pressure ) result ( SatHumRatio ) !+ Return humidity ratio of saturated air given dry-bulb temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 36, solved for W real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: SatHumRatio !+ Humidity ratio of saturated air in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: SatVaporPres !+ Vapor pressure of saturated air in in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] SatVaporPres = GetSatVapPres ( TDryBulb ) SatHumRatio = 0.621945 * SatVaporPres / ( Pressure - SatVaporPres ) ! Validity check. SatHumRatio = max ( SatHumRatio , MIN_HUM_RATIO ) end function GetSatHumRatio","tags":"","loc":"proc/getsathumratio.html"},{"title":"GetSatAirEnthalpy – Town Energy Balance (TEB) model API docs","text":"public function GetSatAirEnthalpy(TDryBulb, Pressure) result(SatAirEnthalpy) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: Pressure Return Value real Contents Source Code GetSatAirEnthalpy Source Code function GetSatAirEnthalpy ( TDryBulb , Pressure ) result ( SatAirEnthalpy ) !+ Return saturated air enthalpy given dry-bulb temperature and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: SatAirEnthalpy !+ Saturated air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] SatAirEnthalpy = GetMoistAirEnthalpy ( TDryBulb , GetSatHumRatio ( TDryBulb , Pressure )) end function GetSatAirEnthalpy","tags":"","loc":"proc/getsatairenthalpy.html"},{"title":"GetVaporPressureDeficit – Town Energy Balance (TEB) model API docs","text":"public function GetVaporPressureDeficit(TDryBulb, HumRatio, Pressure) result(VaporPressureDeficit) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real Contents Source Code GetVaporPressureDeficit Source Code function GetVaporPressureDeficit ( TDryBulb , HumRatio , Pressure ) result ( VaporPressureDeficit ) !+ Return Vapor pressure deficit given dry-bulb temperature, humidity ratio, and pressure. !+ Reference: !+ Oke (1987) eqn 2.13a real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: VaporPressureDeficit !+ Vapor pressure deficit in Psi [IP] or Pa [SI] real :: RelHum !+ Relative humidity in range [0, 1] if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if RelHum = GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) VaporPressureDeficit = GetSatVapPres ( TDryBulb ) * ( 1.0 - RelHum ) end function GetVaporPressureDeficit","tags":"","loc":"proc/getvaporpressuredeficit.html"},{"title":"GetDegreeOfSaturation – Town Energy Balance (TEB) model API docs","text":"public function GetDegreeOfSaturation(TDryBulb, HumRatio, Pressure) result(DegreeOfSaturation) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real Contents Source Code GetDegreeOfSaturation Source Code function GetDegreeOfSaturation ( TDryBulb , HumRatio , Pressure ) result ( DegreeOfSaturation ) !+ Return the degree of saturation (i.e humidity ratio of the air / humidity ratio of the air at saturation !+ at the same temperature and pressure) given dry-bulb temperature, humidity ratio, and atmospheric pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2009) ch. 1 eqn 12 !+ Notes: !+ This definition is absent from the 2017 Handbook. Using 2009 version instead. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: DegreeOfSaturation !+ Degree of saturation in arbitrary unit real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) DegreeOfSaturation = BoundedHumRatio / GetSatHumRatio ( TDryBulb , Pressure ) end function GetDegreeOfSaturation","tags":"","loc":"proc/getdegreeofsaturation.html"},{"title":"GetMoistAirEnthalpy – Town Energy Balance (TEB) model API docs","text":"public function GetMoistAirEnthalpy(TDryBulb, HumRatio) result(MoistAirEnthalpy) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: HumRatio Return Value real Contents Source Code GetMoistAirEnthalpy Source Code function GetMoistAirEnthalpy ( TDryBulb , HumRatio ) result ( MoistAirEnthalpy ) !+ Return moist air enthalpy given dry-bulb temperature and humidity ratio. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) if ( isIP ()) then MoistAirEnthalpy = 0.240 * TDryBulb + BoundedHumRatio * ( 106 1.0 + 0.444 * TDryBulb ) else MoistAirEnthalpy = ( 1.006 * TDryBulb + BoundedHumRatio * ( 250 1.0 + 1.86 * TDryBulb )) * 100 0.0 end if end function GetMoistAirEnthalpy","tags":"","loc":"proc/getmoistairenthalpy.html"},{"title":"GetMoistAirVolume – Town Energy Balance (TEB) model API docs","text":"public function GetMoistAirVolume(TDryBulb, HumRatio, Pressure) result(MoistAirVolume) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real Contents Source Code GetMoistAirVolume Source Code function GetMoistAirVolume ( TDryBulb , HumRatio , Pressure ) result ( MoistAirVolume ) !+ Return moist air specific volume given dry-bulb temperature, humidity ratio, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 26 !+ Notes: !+ In IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26 !+ The factor 144 is for the conversion of Psi = lb in⁻² to lb ft⁻². real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ of dry air [IP] or in m³ kg⁻¹ of dry air [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) if ( isIP ()) then MoistAirVolume = R_DA_IP * GetTRankineFromTFahrenheit ( TDryBulb ) * ( 1.0 + 1.607858 * BoundedHumRatio ) / ( 14 4.0 * Pressure ) else MoistAirVolume = R_DA_SI * GetTKelvinFromTCelsius ( TDryBulb ) * ( 1.0 + 1.607858 * BoundedHumRatio ) / Pressure end if end function GetMoistAirVolume","tags":"","loc":"proc/getmoistairvolume.html"},{"title":"GetTDryBulbFromMoistAirVolumeAndHumRatio – Town Energy Balance (TEB) model API docs","text":"public function GetTDryBulbFromMoistAirVolumeAndHumRatio(MoistAirVolume, HumRatio, Pressure) result(TDryBulb) Arguments Type Intent Optional Attributes Name real, intent(in) :: MoistAirVolume real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real Contents Source Code GetTDryBulbFromMoistAirVolumeAndHumRatio Source Code function GetTDryBulbFromMoistAirVolumeAndHumRatio ( MoistAirVolume , HumRatio , Pressure ) result ( TDryBulb ) !+ Return dry-bulb temperature given moist air specific volume, humidity ratio, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 26 !+ Notes: !+ In IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26 !+ The factor 144 is for the conversion of Psi = lb in⁻² to lb ft⁻². !+ Based on the `GetMoistAirVolume` function, rearranged for dry-bulb temperature. real , intent ( in ) :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ of dry air [IP] or in m³ kg⁻¹ of dry air [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) if ( isIP ()) then TDryBulb = GetTFahrenheitFromTRankine ( MoistAirVolume * ( 144 * Pressure ) & / ( R_DA_IP * ( 1 + 1.607858 * BoundedHumRatio ))) else TDryBulb = GetTCelsiusFromTKelvin ( MoistAirVolume * Pressure & / ( R_DA_SI * ( 1 + 1.607858 * BoundedHumRatio ))) end if end function GetTDryBulbFromMoistAirVolumeAndHumRatio","tags":"","loc":"proc/gettdrybulbfrommoistairvolumeandhumratio.html"},{"title":"GetMoistAirDensity – Town Energy Balance (TEB) model API docs","text":"public function GetMoistAirDensity(TDryBulb, HumRatio, Pressure) result(MoistAirDensity) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real Contents Source Code GetMoistAirDensity Source Code function GetMoistAirDensity ( TDryBulb , HumRatio , Pressure ) result ( MoistAirDensity ) !+ Return moist air density given humidity ratio, dry bulb temperature, and pressure. !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 11 real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real :: MoistAirDensity !+ Moist air density in lb ft⁻³ [IP] or kg m⁻³ [SI] real :: BoundedHumRatio !+ Humidity ratio bounded to MIN_HUM_RATIO if ( HumRatio < 0.0 ) then error stop \"Error: humidity ratio is negative\" end if BoundedHumRatio = max ( HumRatio , MIN_HUM_RATIO ) MoistAirDensity = ( 1.0 + BoundedHumRatio ) / GetMoistAirVolume ( TDryBulb , BoundedHumRatio , Pressure ) end function GetMoistAirDensity","tags":"","loc":"proc/getmoistairdensity.html"},{"title":"GetStandardAtmPressure – Town Energy Balance (TEB) model API docs","text":"public function GetStandardAtmPressure(Altitude) result(StandardAtmPressure) Arguments Type Intent Optional Attributes Name real, intent(in) :: Altitude Return Value real Contents Source Code GetStandardAtmPressure Source Code function GetStandardAtmPressure ( Altitude ) result ( StandardAtmPressure ) !+ Return standard atmosphere barometric pressure, given the elevation (altitude). !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 3 real , intent ( in ) :: Altitude !+ Altitude in ft [IP] or m [SI] real :: StandardAtmPressure !+ Standard atmosphere barometric pressure in Psi [IP] or Pa [SI] if ( isIP ()) then StandardAtmPressure = 1 4.696 * ( 1.0 - 6.8754e-06 * Altitude ) ** 5.2559 else StandardAtmPressure = 101325 * ( 1 - 2.25577e-05 * Altitude ) ** 5.2559 end if end function GetStandardAtmPressure","tags":"","loc":"proc/getstandardatmpressure.html"},{"title":"GetStandardAtmTemperature – Town Energy Balance (TEB) model API docs","text":"public function GetStandardAtmTemperature(Altitude) result(StandardAtmTemperature) Arguments Type Intent Optional Attributes Name real, intent(in) :: Altitude Return Value real Contents Source Code GetStandardAtmTemperature Source Code function GetStandardAtmTemperature ( Altitude ) result ( StandardAtmTemperature ) !+ Return standard atmosphere temperature, given the elevation (altitude). !+ Reference: !+ ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 4 real , intent ( in ) :: Altitude !+ Altitude in ft [IP] or m [SI] real :: StandardAtmTemperature !+ Standard atmosphere dry-bulb temperature in °F [IP] or °C [SI] if ( isIP ()) then StandardAtmTemperature = 5 9.0 - 0.00356620 * Altitude else StandardAtmTemperature = 1 5.0 - 0.0065 * Altitude end if end function GetStandardAtmTemperature","tags":"","loc":"proc/getstandardatmtemperature.html"},{"title":"GetSeaLevelPressure – Town Energy Balance (TEB) model API docs","text":"public function GetSeaLevelPressure(StnPressure, Altitude, TDryBulb) result(SeaLevelPressure) Arguments Type Intent Optional Attributes Name real, intent(in) :: StnPressure real, intent(in) :: Altitude real, intent(in) :: TDryBulb Return Value real Contents Source Code GetSeaLevelPressure Source Code function GetSeaLevelPressure ( StnPressure , Altitude , TDryBulb ) result ( SeaLevelPressure ) !+ Return sea level pressure given dry-bulb temperature, altitude above sea level and pressure. !+ Reference: !+ Hess SL, Introduction to theoretical meteorology, Holt Rinehart and Winston, NY 1959, !+ ch. 6.5; Stull RB, Meteorology for scientists and engineers, 2nd edition, !+ Brooks/Cole 2000, ch. 1. !+ Notes: !+ The standard procedure for the US is to use for TDryBulb the average !+ of the current station temperature and the station temperature from 12 hours ago. real , intent ( in ) :: StnPressure !+ Observed station pressure in Psi [IP] or Pa [SI] real , intent ( in ) :: Altitude !+ Altitude in ft [IP] or m [SI] real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: SeaLevelPressure !+ Sea level barometric pressure in Psi [IP] or Pa [SI] real :: TColumn !+ Average temperature in column of air in R [IP] or K [SI] real :: H !+ scale height (dimensionless) if ( isIP ()) then ! Calculate average temperature in column of air, assuming a lapse rate ! of 3.6 °F/1000ft TColumn = TDryBulb + 0.0036 * Altitude / 2.0 ! Determine the scale height H = 5 3.351 * GetTRankineFromTFahrenheit ( TColumn ) else ! Calculate average temperature in column of air, assuming a lapse rate ! of 6.5 °C/km TColumn = TDryBulb + 0.0065 * Altitude / 2.0 ! Determine the scale height H = 28 7.055 * GetTKelvinFromTCelsius ( TColumn ) / 9.807 end if ! Calculate the sea level pressure SeaLevelPressure = StnPressure * exp ( Altitude / H ) end function GetSeaLevelPressure","tags":"","loc":"proc/getsealevelpressure.html"},{"title":"GetStationPressure – Town Energy Balance (TEB) model API docs","text":"public function GetStationPressure(SeaLevelPressure, Altitude, TDryBulb) result(StationPressure) Arguments Type Intent Optional Attributes Name real, intent(in) :: SeaLevelPressure real, intent(in) :: Altitude real, intent(in) :: TDryBulb Return Value real Contents Source Code GetStationPressure Source Code function GetStationPressure ( SeaLevelPressure , Altitude , TDryBulb ) result ( StationPressure ) !+ Return station pressure from sea level pressure. !+ Reference: !+ See 'GetSeaLevelPressure' !+ Notes: !+ This function is just the inverse of 'GetSeaLevelPressure'. real , intent ( in ) :: SeaLevelPressure !+ Sea level barometric pressure in Psi [IP] or Pa [SI] real , intent ( in ) :: Altitude !+ Altitude in ft [IP] or m [SI] real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real :: StationPressure !+ Station pressure in Psi [IP] or Pa [SI] StationPressure = SeaLevelPressure / GetSeaLevelPressure ( 1.0 , Altitude , TDryBulb ) end function GetStationPressure","tags":"","loc":"proc/getstationpressure.html"},{"title":"SetUnitSystem – Town Energy Balance (TEB) model API docs","text":"public subroutine SetUnitSystem(UnitSystem) Arguments Type Intent Optional Attributes Name integer, intent(in) :: UnitSystem Contents Source Code SetUnitSystem Source Code subroutine SetUnitSystem ( UnitSystem ) !+ Set the system of units to use (SI or IP). !+ Notes: this function *HAS TO BE CALLED* before the library can be used integer , intent ( in ) :: UnitSystem !+ Units: string indicating the system of units chosen (SI or IP) if (. not . ( UnitSystem == SI . or . UnitSystem == IP )) then error stop \"The system of units has to be either SI or IP.\" end if PSYCHROLIB_UNITS = UnitSystem ! Define tolerance on temperature calculations ! The tolerance is the same in IP and SI if ( UnitSystem == IP ) then PSYCHROLIB_TOLERANCE = 0.001 * 9.0 / 5.0 else PSYCHROLIB_TOLERANCE = 0.001 end if end subroutine SetUnitSystem","tags":"","loc":"proc/setunitsystem.html"},{"title":"CalcPsychrometricsFromTWetBulb – Town Energy Balance (TEB) model API docs","text":"public subroutine CalcPsychrometricsFromTWetBulb(TDryBulb, TWetBulb, Pressure, HumRatio, TDewPoint, RelHum, VapPres, MoistAirEnthalpy, MoistAirVolume, DegreeOfSaturation) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: TWetBulb real, intent(in) :: Pressure real, intent(out) :: HumRatio real, intent(out) :: TDewPoint real, intent(out) :: RelHum real, intent(out) :: VapPres real, intent(out) :: MoistAirEnthalpy real, intent(out) :: MoistAirVolume real, intent(out) :: DegreeOfSaturation Contents Source Code CalcPsychrometricsFromTWetBulb Source Code subroutine CalcPsychrometricsFromTWetBulb ( TDryBulb , & TWetBulb , & Pressure , & HumRatio , & TDewPoint , & RelHum , & VapPres , & MoistAirEnthalpy , & MoistAirVolume , & DegreeOfSaturation ) !+ Utility function to calculate humidity ratio, dew-point temperature, relative humidity, !+ vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given !+ dry-bulb temperature, wet-bulb temperature, and pressure. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real , intent ( out ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( out ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( out ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( out ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real , intent ( out ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real , intent ( out ) :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real , intent ( out ) :: DegreeOfSaturation !+ Degree of saturation [unitless] HumRatio = GetHumRatioFromTWetBulb ( TDryBulb , TWetBulb , Pressure ) TDewPoint = GetTDewPointFromHumRatio ( TDryBulb , HumRatio , Pressure ) RelHum = GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) MoistAirEnthalpy = GetMoistAirEnthalpy ( TDryBulb , HumRatio ) MoistAirVolume = GetMoistAirVolume ( TDryBulb , HumRatio , Pressure ) DegreeOfSaturation = GetDegreeOfSaturation ( TDryBulb , HumRatio , Pressure ) end subroutine CalcPsychrometricsFromTWetBulb","tags":"","loc":"proc/calcpsychrometricsfromtwetbulb.html"},{"title":"CalcPsychrometricsFromTDewPoint – Town Energy Balance (TEB) model API docs","text":"public subroutine CalcPsychrometricsFromTDewPoint(TDryBulb, TDewPoint, Pressure, HumRatio, TWetBulb, RelHum, VapPres, MoistAirEnthalpy, MoistAirVolume, DegreeOfSaturation) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: TDewPoint real, intent(in) :: Pressure real, intent(out) :: HumRatio real, intent(out) :: TWetBulb real, intent(out) :: RelHum real, intent(out) :: VapPres real, intent(out) :: MoistAirEnthalpy real, intent(out) :: MoistAirVolume real, intent(out) :: DegreeOfSaturation Contents Source Code CalcPsychrometricsFromTDewPoint Source Code subroutine CalcPsychrometricsFromTDewPoint ( TDryBulb , & TDewPoint , & Pressure , & HumRatio , & TWetBulb , & RelHum , & VapPres , & MoistAirEnthalpy , & MoistAirVolume , & DegreeOfSaturation ) !+ Utility function to calculate humidity ratio, wet-bulb temperature, relative humidity, !+ vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given !+ dry-bulb temperature, dew-point temperature, and pressure. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real , intent ( out ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( out ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( out ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( out ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real , intent ( out ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real , intent ( out ) :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real , intent ( out ) :: DegreeOfSaturation !+ Degree of saturation [unitless] HumRatio = GetHumRatioFromTDewPoint ( TDewPoint , Pressure ) TWetBulb = GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) RelHum = GetRelHumFromHumRatio ( TDryBulb , HumRatio , Pressure ) VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) MoistAirEnthalpy = GetMoistAirEnthalpy ( TDryBulb , HumRatio ) MoistAirVolume = GetMoistAirVolume ( TDryBulb , HumRatio , Pressure ) DegreeOfSaturation = GetDegreeOfSaturation ( TDryBulb , HumRatio , Pressure ) end subroutine CalcPsychrometricsFromTDewPoint","tags":"","loc":"proc/calcpsychrometricsfromtdewpoint.html"},{"title":"CalcPsychrometricsFromRelHum – Town Energy Balance (TEB) model API docs","text":"public subroutine CalcPsychrometricsFromRelHum(TDryBulb, RelHum, Pressure, HumRatio, TWetBulb, TDewPoint, VapPres, MoistAirEnthalpy, MoistAirVolume, DegreeOfSaturation) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: RelHum real, intent(in) :: Pressure real, intent(out) :: HumRatio real, intent(out) :: TWetBulb real, intent(out) :: TDewPoint real, intent(out) :: VapPres real, intent(out) :: MoistAirEnthalpy real, intent(out) :: MoistAirVolume real, intent(out) :: DegreeOfSaturation Contents Source Code CalcPsychrometricsFromRelHum Source Code subroutine CalcPsychrometricsFromRelHum ( TDryBulb , & RelHum , & Pressure , & HumRatio , & TWetBulb , & TDewPoint , & VapPres , & MoistAirEnthalpy , & MoistAirVolume , & DegreeOfSaturation ) !+ Utility function to calculate humidity ratio, wet-bulb temperature, dew-point temperature, !+ vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given !+ dry-bulb temperature, relative humidity and pressure. real , intent ( in ) :: TDryBulb !+ Dry-bulb temperature in °F [IP] or °C [SI] real , intent ( in ) :: RelHum !+ Relative humidity in range [0, 1] real , intent ( in ) :: Pressure !+ Atmospheric pressure in Psi [IP] or Pa [SI] real , intent ( out ) :: HumRatio !+ Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI] real , intent ( out ) :: TWetBulb !+ Wet-bulb temperature in °F [IP] or °C [SI] real , intent ( out ) :: TDewPoint !+ Dew-point temperature in °F [IP] or °C [SI] real , intent ( out ) :: VapPres !+ Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI] real , intent ( out ) :: MoistAirEnthalpy !+ Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI] real , intent ( out ) :: MoistAirVolume !+ Specific volume of moist air in ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI] real , intent ( out ) :: DegreeOfSaturation !+ Degree of saturation [unitless] HumRatio = GetHumRatioFromRelHum ( TDryBulb , RelHum , Pressure ) TWetBulb = GetTWetBulbFromHumRatio ( TDryBulb , HumRatio , Pressure ) TDewPoint = GetTDewPointFromHumRatio ( TDryBulb , HumRatio , Pressure ) VapPres = GetVapPresFromHumRatio ( HumRatio , Pressure ) MoistAirEnthalpy = GetMoistAirEnthalpy ( TDryBulb , HumRatio ) MoistAirVolume = GetMoistAirVolume ( TDryBulb , HumRatio , Pressure ) DegreeOfSaturation = GetDegreeOfSaturation ( TDryBulb , HumRatio , Pressure ) end subroutine CalcPsychrometricsFromRelHum","tags":"","loc":"proc/calcpsychrometricsfromrelhum.html"},{"title":"DATA_ISBA_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DATA_ISBA_INIT(YDATA_ISBA) Arguments Type Intent Optional Attributes Name type( DATA_ISBA_t ), intent(inout) :: YDATA_ISBA Contents Source Code DATA_ISBA_INIT Source Code SUBROUTINE DATA_ISBA_INIT ( YDATA_ISBA ) TYPE ( DATA_ISBA_t ), INTENT ( INOUT ) :: YDATA_ISBA REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_ISBA_N:DATA_ISBA_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDATA_ISBA % XPAR_VEGTYPE ) NULLIFY ( YDATA_ISBA % XPAR_Z0_O_Z0H ) NULLIFY ( YDATA_ISBA % XPAR_EMIS ) NULLIFY ( YDATA_ISBA % XPAR_Z0 ) NULLIFY ( YDATA_ISBA % XPAR_ALBNIR_VEG ) NULLIFY ( YDATA_ISBA % XPAR_ALBVIS_VEG ) NULLIFY ( YDATA_ISBA % XPAR_ALBUV_VEG ) NULLIFY ( YDATA_ISBA % XPAR_VEG ) NULLIFY ( YDATA_ISBA % XPAR_WRMAX_CF ) NULLIFY ( YDATA_ISBA % XPAR_RSMIN ) NULLIFY ( YDATA_ISBA % XPAR_GAMMA ) NULLIFY ( YDATA_ISBA % XPAR_CV ) NULLIFY ( YDATA_ISBA % XPAR_RGL ) NULLIFY ( YDATA_ISBA % XPAR_ROOTFRAC ) NULLIFY ( YDATA_ISBA % XPAR_BSLAI ) NULLIFY ( YDATA_ISBA % XPAR_LAIMIN ) NULLIFY ( YDATA_ISBA % XPAR_SEFOLD ) NULLIFY ( YDATA_ISBA % XPAR_H_TREE ) NULLIFY ( YDATA_ISBA % XPAR_GMES ) NULLIFY ( YDATA_ISBA % XPAR_RE25 ) NULLIFY ( YDATA_ISBA % LPAR_STRESS ) NULLIFY ( YDATA_ISBA % XPAR_F2I ) NULLIFY ( YDATA_ISBA % XPAR_GC ) NULLIFY ( YDATA_ISBA % XPAR_DMAX ) NULLIFY ( YDATA_ISBA % XPAR_CE_NITRO ) NULLIFY ( YDATA_ISBA % XPAR_CF_NITRO ) NULLIFY ( YDATA_ISBA % XPAR_CNA_NITRO ) NULLIFY ( YDATA_ISBA % XPAR_DG ) NULLIFY ( YDATA_ISBA % XPAR_DICE ) NULLIFY ( YDATA_ISBA % XPAR_GROUND_DEPTH ) NULLIFY ( YDATA_ISBA % XPAR_ROOT_DEPTH ) NULLIFY ( YDATA_ISBA % XPAR_ROOT_EXTINCTION ) NULLIFY ( YDATA_ISBA % XPAR_ROOT_LIN ) NULLIFY ( YDATA_ISBA % XPAR_ALBNIR_SOIL ) NULLIFY ( YDATA_ISBA % XPAR_ALBVIS_SOIL ) NULLIFY ( YDATA_ISBA % XPAR_ALBUV_SOIL ) NULLIFY ( YDATA_ISBA % XPAR_LAI ) NULLIFY ( YDATA_ISBA % XPAR_IRRIG ) NULLIFY ( YDATA_ISBA % XPAR_WATSUP ) NULLIFY ( YDATA_ISBA % XPAR_SEED_M ) NULLIFY ( YDATA_ISBA % XPAR_SEED_D ) NULLIFY ( YDATA_ISBA % XPAR_REAP_M ) NULLIFY ( YDATA_ISBA % XPAR_REAP_D ) NULLIFY ( YDATA_ISBA % XPAR_GNDLITTER ) NULLIFY ( YDATA_ISBA % XPAR_Z0LITTER ) NULLIFY ( YDATA_ISBA % XPAR_H_VEG ) NULLIFY ( YDATA_ISBA % XPAR_FRAC_HVEG ) NULLIFY ( YDATA_ISBA % XPAR_FRAC_LVEG ) NULLIFY ( YDATA_ISBA % XPAR_FRAC_NVEG ) NULLIFY ( YDATA_ISBA % XPAR_LAI_HVEG ) NULLIFY ( YDATA_ISBA % XPAR_LAI_LVEG ) NULLIFY ( YDATA_ISBA % XPAR_H_HVEG ) NULLIFY ( YDATA_ISBA % XPAR_CONDSAT ) NULLIFY ( YDATA_ISBA % XPAR_MPOTSAT ) NULLIFY ( YDATA_ISBA % XPAR_BCOEF ) NULLIFY ( YDATA_ISBA % XPAR_WWILT ) NULLIFY ( YDATA_ISBA % XPAR_WFC ) NULLIFY ( YDATA_ISBA % XPAR_WSAT ) ! YDATA_ISBA % NVEGTYPE = 0 YDATA_ISBA % NTIME = 0 YDATA_ISBA % LDATA_MIXPAR = . FALSE . YDATA_ISBA % LDATA_VEGTYPE = . FALSE . ! NULLIFY ( YDATA_ISBA % LDATA_LAI ) NULLIFY ( YDATA_ISBA % LDATA_VEG ) NULLIFY ( YDATA_ISBA % LDATA_Z0 ) NULLIFY ( YDATA_ISBA % LDATA_EMIS ) NULLIFY ( YDATA_ISBA % LDATA_ALBNIR_VEG ) NULLIFY ( YDATA_ISBA % LDATA_ALBVIS_VEG ) NULLIFY ( YDATA_ISBA % LDATA_ALBUV_VEG ) NULLIFY ( YDATA_ISBA % LDATA_ALBNIR_SOIL ) NULLIFY ( YDATA_ISBA % LDATA_ALBVIS_SOIL ) NULLIFY ( YDATA_ISBA % LDATA_ALBUV_SOIL ) NULLIFY ( YDATA_ISBA % LDATA_GNDLITTER ) NULLIFY ( YDATA_ISBA % LDATA_Z0LITTER ) NULLIFY ( YDATA_ISBA % LDATA_H_VEG ) NULLIFY ( YDATA_ISBA % LDATA_IRRIG ) NULLIFY ( YDATA_ISBA % LDATA_WATSUP ) ! YDATA_ISBA % LDATA_DG (:) = . FALSE . YDATA_ISBA % LDATA_ROOTFRAC (:) = . FALSE . YDATA_ISBA % LDATA_H_TREE (:) = . FALSE . YDATA_ISBA % LDATA_DICE (:) = . FALSE . YDATA_ISBA % LDATA_GROUND_DEPTH (:) = . FALSE . YDATA_ISBA % LDATA_ROOT_DEPTH (:) = . FALSE . YDATA_ISBA % LDATA_ROOT_EXTINCTION (:) = . FALSE . YDATA_ISBA % LDATA_ROOT_LIN (:) = . FALSE . YDATA_ISBA % LDATA_RSMIN (:) = . FALSE . YDATA_ISBA % LDATA_GAMMA (:) = . FALSE . YDATA_ISBA % LDATA_WRMAX_CF (:) = . FALSE . YDATA_ISBA % LDATA_CV (:) = . FALSE . YDATA_ISBA % LDATA_RGL (:) = . FALSE . YDATA_ISBA % LDATA_Z0_O_Z0H (:) = . FALSE . YDATA_ISBA % LDATA_BSLAI (:) = . FALSE . YDATA_ISBA % LDATA_LAIMIN (:) = . FALSE . YDATA_ISBA % LDATA_SEFOLD (:) = . FALSE . YDATA_ISBA % LDATA_GMES (:) = . FALSE . YDATA_ISBA % LDATA_RE25 (:) = . FALSE . YDATA_ISBA % LDATA_STRESS (:) = . FALSE . YDATA_ISBA % LDATA_F2I (:) = . FALSE . YDATA_ISBA % LDATA_GC (:) = . FALSE . YDATA_ISBA % LDATA_DMAX (:) = . FALSE . YDATA_ISBA % LDATA_CE_NITRO (:) = . FALSE . YDATA_ISBA % LDATA_CF_NITRO (:) = . FALSE . YDATA_ISBA % LDATA_CNA_NITRO (:) = . FALSE . YDATA_ISBA % LDATA_SEED_M (:) = . FALSE . YDATA_ISBA % LDATA_SEED_D (:) = . FALSE . YDATA_ISBA % LDATA_REAP_M (:) = . FALSE . YDATA_ISBA % LDATA_REAP_D (:) = . FALSE . ! YDATA_ISBA % LDATA_CONDSAT = . FALSE . YDATA_ISBA % LDATA_MPOTSAT = . FALSE . YDATA_ISBA % LDATA_BCOEF = . FALSE . YDATA_ISBA % LDATA_WWILT = . FALSE . YDATA_ISBA % LDATA_WFC = . FALSE . YDATA_ISBA % LDATA_WSAT = . FALSE . ! YDATA_ISBA % LIMP_VEG = . FALSE . YDATA_ISBA % LIMP_Z0 = . FALSE . YDATA_ISBA % LIMP_EMIS = . FALSE . ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DATA_ISBA_N:DATA_ISBA_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DATA_ISBA_INIT","tags":"","loc":"proc/data_isba_init.html"},{"title":"CH_SURF_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine CH_SURF_INIT(YCH_SURF) Arguments Type Intent Optional Attributes Name type( CH_SURF_t ), intent(inout) :: YCH_SURF Contents Source Code CH_SURF_INIT Source Code SUBROUTINE CH_SURF_INIT ( YCH_SURF ) TYPE ( CH_SURF_t ), INTENT ( INOUT ) :: YCH_SURF REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_SURF_N:CH_SURF_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YCH_SURF % CCH_NAMES ) NULLIFY ( YCH_SURF % CAER_NAMES ) NULLIFY ( YCH_SURF % XCONVERSION ) YCH_SURF % CCH_EMIS = ' ' YCH_SURF % CCHEM_SURF_FILE = ' ' YCH_SURF % LCH_SURF_EMIS = . FALSE . YCH_SURF % LCH_EMIS = . FALSE . IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_SURF_N:CH_SURF_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_SURF_INIT","tags":"","loc":"proc/ch_surf_init.html"},{"title":"DST_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DST_INIT(YDST) Arguments Type Intent Optional Attributes Name type( DST_t ), intent(inout) :: YDST Contents Source Code DST_INIT Source Code SUBROUTINE DST_INIT ( YDST ) TYPE ( DST_t ), INTENT ( INOUT ) :: YDST REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DST_N:DST_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YDST % NVT_DST ) NULLIFY ( YDST % NSIZE_PATCH_DST ) NULLIFY ( YDST % NR_PATCH_DST ) NULLIFY ( YDST % Z0_EROD_DST ) NULLIFY ( YDST % CSV_DST ) NULLIFY ( YDST % XSFDST ) NULLIFY ( YDST % XSFDSTM ) NULLIFY ( YDST % XEMISRADIUS_DST ) NULLIFY ( YDST % XEMISSIG_DST ) NULLIFY ( YDST % XMSS_FRC_SRC ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DST_N:DST_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DST_INIT","tags":"","loc":"proc/dst_init.html"},{"title":"DST_NP_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DST_NP_INIT(YDST_NP, KPATCH) Arguments Type Intent Optional Attributes Name type( DST_NP_t ), intent(inout) :: YDST_NP integer, intent(in) :: KPATCH Contents Source Code DST_NP_INIT Source Code SUBROUTINE DST_NP_INIT ( YDST_NP , KPATCH ) TYPE ( DST_NP_t ), INTENT ( INOUT ) :: YDST_NP INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DST_N:DST_NP_INIT\" , 0 , ZHOOK_HANDLE ) ! IF ( ASSOCIATED ( YDST_NP % AL )) THEN DO JP = 1 , KPATCH CALL DST_INIT ( YDST_NP % AL ( JP )) ENDDO DEALLOCATE ( YDST_NP % AL ) ELSE ALLOCATE ( YDST_NP % AL ( KPATCH )) DO JP = 1 , KPATCH CALL DST_INIT ( YDST_NP % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DST_N:DST_NP_INIT\" , 1 , ZHOOK_HANDLE ) ! END SUBROUTINE DST_NP_INIT","tags":"","loc":"proc/dst_np_init.html"},{"title":"URBAN_DRAG – Town Energy Balance (TEB) model API docs","text":"interface public subroutine URBAN_DRAG(TOP, T, B, HIMPLICIT_WIND, PTSTEP, PT_CANYON, PQ_CANYON, PU_CANYON, PT_LOWCAN, PQ_LOWCAN, PU_LOWCAN, PZ_LOWCAN, PTS_ROOF, PTS_ROAD, PTS_WALL, PTS_GARDEN, PDELT_SNOW_ROOF, PDELT_SNOW_ROAD, PEXNS, PEXNA, PTA, PQA, PPS, PRHOA, PZREF, PUREF, PVMOD, PWS_ROOF_MAX, PWS_ROAD_MAX, PPEW_A_COEF, PPEW_B_COEF, PPEW_A_COEF_LOWCAN, PPEW_B_COEF_LOWCAN, PQSAT_ROOF, PQSAT_ROAD, PDELT_ROOF, PDELT_ROAD, PCD, PCDN, PAC_ROOF, PAC_ROOF_WAT, PAC_WALL, PAC_ROAD, PAC_ROAD_WAT, PAC_TOP, PAC_GARDEN, PRI, PUW_ROAD, PUW_ROOF, PDUWDU_ROAD, PDUWDU_ROOF, PUSTAR_TOWN, PAC_WIN) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B character(len=*), intent(in) :: HIMPLICIT_WIND real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PT_CANYON real, intent(in), DIMENSION(:) :: PQ_CANYON real, intent(in), DIMENSION(:) :: PU_CANYON real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PU_LOWCAN real, intent(in), DIMENSION(:) :: PZ_LOWCAN real, intent(in), DIMENSION(:) :: PTS_ROOF real, intent(in), DIMENSION(:) :: PTS_ROAD real, intent(in), DIMENSION(:) :: PTS_WALL real, intent(in), DIMENSION(:) :: PTS_GARDEN real, intent(in), DIMENSION(:) :: PDELT_SNOW_ROOF real, intent(in), DIMENSION(:) :: PDELT_SNOW_ROAD real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PWS_ROOF_MAX real, intent(in), DIMENSION(:) :: PWS_ROAD_MAX real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPEW_A_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_B_COEF_LOWCAN real, intent(out), DIMENSION(:) :: PQSAT_ROOF real, intent(out), DIMENSION(:) :: PQSAT_ROAD real, intent(out), DIMENSION(:) :: PDELT_ROOF real, intent(out), DIMENSION(:) :: PDELT_ROAD real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN real, intent(out), DIMENSION(:) :: PAC_ROOF real, intent(out), DIMENSION(:) :: PAC_ROOF_WAT real, intent(out), DIMENSION(:) :: PAC_WALL real, intent(out), DIMENSION(:) :: PAC_ROAD real, intent(out), DIMENSION(:) :: PAC_ROAD_WAT real, intent(out), DIMENSION(:) :: PAC_TOP real, intent(in), DIMENSION(:) :: PAC_GARDEN real, intent(out), DIMENSION(:) :: PRI real, intent(out), DIMENSION(:) :: PUW_ROAD real, intent(out), DIMENSION(:) :: PUW_ROOF real, intent(out), DIMENSION(:) :: PDUWDU_ROAD real, intent(out), DIMENSION(:) :: PDUWDU_ROOF real, intent(out), DIMENSION(:) :: PUSTAR_TOWN real, intent(out), DIMENSION(:) :: PAC_WIN","tags":"","loc":"interface/urban_drag.html"},{"title":"WINDOW_DATA – Town Energy Balance (TEB) model API docs","text":"interface public subroutine WINDOW_DATA(KI, B) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KI type(BEM_t), intent(inout) :: B","tags":"","loc":"interface/window_data.html"},{"title":"SURF_ATM_GRID_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine SURF_ATM_GRID_INIT(YSURF_ATM_GRID) Arguments Type Intent Optional Attributes Name type( SURF_ATM_GRID_t ), intent(inout) :: YSURF_ATM_GRID Contents Source Code SURF_ATM_GRID_INIT Source Code SUBROUTINE SURF_ATM_GRID_INIT ( YSURF_ATM_GRID ) TYPE ( SURF_ATM_GRID_t ), INTENT ( INOUT ) :: YSURF_ATM_GRID REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SURF_ATM_GRID_N:SURF_ATM_GRID_INIT\" , 0 , ZHOOK_HANDLE ) CALL GRID_INIT ( YSURF_ATM_GRID % G ) NULLIFY ( YSURF_ATM_GRID % NNEAR ) NULLIFY ( YSURF_ATM_GRID % XGRID_FULL_PAR ) NULLIFY ( YSURF_ATM_GRID % XJPDIR ) YSURF_ATM_GRID % NGRID_FULL_PAR = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SURF_ATM_GRID_N:SURF_ATM_GRID_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE SURF_ATM_GRID_INIT","tags":"","loc":"proc/surf_atm_grid_init.html"},{"title":"TEB_IRRIG – Town Energy Balance (TEB) model API docs","text":"interface public subroutine TEB_IRRIG(OIRRIG, PTSTEP, KMONTH, PSOLAR_TIME, PSTART_MONTH, PEND_MONTH, PSTART_HOUR, PEND_HOUR, P24H_IRRIG, PIRRIG) Arguments Type Intent Optional Attributes Name logical, intent(in) :: OIRRIG real, intent(in) :: PTSTEP integer, intent(in) :: KMONTH real, intent(in), DIMENSION(:) :: PSOLAR_TIME real, intent(in), DIMENSION(:) :: PSTART_MONTH real, intent(in), DIMENSION(:) :: PEND_MONTH real, intent(in), DIMENSION(:) :: PSTART_HOUR real, intent(in), DIMENSION(:) :: PEND_HOUR real, intent(in), DIMENSION(:) :: P24H_IRRIG real, intent(out), DIMENSION(:) :: PIRRIG","tags":"","loc":"interface/teb_irrig.html"},{"title":"WINDOW_SHADING – Town Energy Balance (TEB) model API docs","text":"interface public subroutine WINDOW_SHADING(PSHGC, PSHGC_SH, O_SHADE, PALB_WALL, PABS_WIN, PABS_WINSH, PALB_WIN, PTRAN_WIN) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PSHGC real, intent(in), DIMENSION(:) :: PSHGC_SH logical, intent(in), DIMENSION(:) :: O_SHADE real, intent(in), DIMENSION(:) :: PALB_WALL real, intent(in), DIMENSION(:) :: PABS_WIN real, intent(out), DIMENSION(:) :: PABS_WINSH real, intent(out), DIMENSION(:) :: PALB_WIN real, intent(inout), DIMENSION(:) :: PTRAN_WIN","tags":"","loc":"interface/window_shading.html"},{"title":"GR_BIOG_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine GR_BIOG_INIT(YGR_BIOG) Arguments Type Intent Optional Attributes Name type( GR_BIOG_t ), intent(inout) :: YGR_BIOG Contents Source Code GR_BIOG_INIT Source Code SUBROUTINE GR_BIOG_INIT ( YGR_BIOG ) TYPE ( GR_BIOG_t ), INTENT ( INOUT ) :: YGR_BIOG REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_GR_BIOG_N:GR_BIOG_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YGR_BIOG % XISOPOT ) NULLIFY ( YGR_BIOG % XMONOPOT ) NULLIFY ( YGR_BIOG % XIACAN ) NULLIFY ( YGR_BIOG % XFISO ) NULLIFY ( YGR_BIOG % XFMONO ) NULLIFY ( YGR_BIOG % XNOFLUX ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_GR_BIOG_N:GR_BIOG_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE GR_BIOG_INIT","tags":"","loc":"proc/gr_biog_init.html"},{"title":"GR_BIOG_NP_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine GR_BIOG_NP_INIT(YGR_BIOG_NP, KPATCH) Arguments Type Intent Optional Attributes Name type( GR_BIOG_NP_t ), intent(inout) :: YGR_BIOG_NP integer, intent(in) :: KPATCH Contents Source Code GR_BIOG_NP_INIT Source Code SUBROUTINE GR_BIOG_NP_INIT ( YGR_BIOG_NP , KPATCH ) TYPE ( GR_BIOG_NP_t ), INTENT ( INOUT ) :: YGR_BIOG_NP INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_GR_BIOG_N:GR_BIOG_NP_INIT\" , 0 , ZHOOK_HANDLE ) ! IF ( ASSOCIATED ( YGR_BIOG_NP % AL )) THEN DO JP = 1 , KPATCH CALL GR_BIOG_INIT ( YGR_BIOG_NP % AL ( JP )) ENDDO DEALLOCATE ( YGR_BIOG_NP % AL ) ELSE ALLOCATE ( YGR_BIOG_NP % AL ( KPATCH )) DO JP = 1 , KPATCH CALL GR_BIOG_INIT ( YGR_BIOG_NP % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_GR_BIOG_N:GR_BIOG_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE GR_BIOG_NP_INIT","tags":"","loc":"proc/gr_biog_np_init.html"},{"title":"URBAN_HYDRO – Town Energy Balance (TEB) model API docs","text":"interface public subroutine URBAN_HYDRO(PWS_ROOF_MAX, PWS_ROAD_MAX, PWS_ROOF, PWS_ROAD, PRR, PIRRIG_ROAD, PTSTEP, PBLD, PLE_ROOF, PLE_ROAD, PRUNOFF_STRLROOF, PRUNOFF_ROAD) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWS_ROOF_MAX real, intent(in), DIMENSION(:) :: PWS_ROAD_MAX real, intent(inout), DIMENSION(:) :: PWS_ROOF real, intent(inout), DIMENSION(:) :: PWS_ROAD real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PIRRIG_ROAD real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PBLD real, intent(in), DIMENSION(:) :: PLE_ROOF real, intent(in), DIMENSION(:) :: PLE_ROAD real, intent(out), DIMENSION(:) :: PRUNOFF_STRLROOF real, intent(out), DIMENSION(:) :: PRUNOFF_ROAD","tags":"","loc":"interface/urban_hydro.html"},{"title":"WATFLUX_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine WATFLUX_INIT(YWATFLUX) Arguments Type Intent Optional Attributes Name type( WATFLUX_t ), intent(inout) :: YWATFLUX Contents Source Code WATFLUX_INIT Source Code SUBROUTINE WATFLUX_INIT ( YWATFLUX ) TYPE ( WATFLUX_t ), INTENT ( INOUT ) :: YWATFLUX REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_WATFLUX_N:WATFLUX_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YWATFLUX % XZS ) NULLIFY ( YWATFLUX % XCOVER ) NULLIFY ( YWATFLUX % LCOVER ) NULLIFY ( YWATFLUX % XTS ) NULLIFY ( YWATFLUX % XTICE ) NULLIFY ( YWATFLUX % XZ0 ) NULLIFY ( YWATFLUX % XEMIS ) NULLIFY ( YWATFLUX % XDIR_ALB ) NULLIFY ( YWATFLUX % XSCA_ALB ) NULLIFY ( YWATFLUX % XICE_ALB ) NULLIFY ( YWATFLUX % XTS_MTH ) NULLIFY ( YWATFLUX % XCPL_WATER_WIND ) NULLIFY ( YWATFLUX % XCPL_WATER_FWSU ) NULLIFY ( YWATFLUX % XCPL_WATER_FWSV ) NULLIFY ( YWATFLUX % XCPL_WATER_SNET ) NULLIFY ( YWATFLUX % XCPL_WATER_HEAT ) NULLIFY ( YWATFLUX % XCPL_WATER_EVAP ) NULLIFY ( YWATFLUX % XCPL_WATER_RAIN ) NULLIFY ( YWATFLUX % XCPL_WATER_SNOW ) NULLIFY ( YWATFLUX % XCPL_WATER_FWSM ) NULLIFY ( YWATFLUX % XCPL_WATERICE_SNET ) NULLIFY ( YWATFLUX % XCPL_WATERICE_HEAT ) NULLIFY ( YWATFLUX % XCPL_WATERICE_EVAP ) YWATFLUX % LSBL = . FALSE . YWATFLUX % CWAT_ALB = ' ' YWATFLUX % LINTERPOL_TS = . FALSE . YWATFLUX % CINTERPOL_TS = ' ' YWATFLUX % XTSTEP = 0. YWATFLUX % XOUT_TSTEP = 0. IF ( LHOOK ) CALL DR_HOOK ( \"MODD_WATFLUX_N:WATFLUX_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE WATFLUX_INIT","tags":"","loc":"proc/watflux_init.html"},{"title":"ISBA_PROPERTIES – Town Energy Balance (TEB) model API docs","text":"interface public subroutine ISBA_PROPERTIES(IO, PEK, PDIR_SW, PSCA_SW, PSW_BANDS, KSW, PASNOW, PANOSNOW, PESNOW, PENOSNOW, PTSSNOW, PTSNOSNOW, PALBNIR_TVEG, PALBVIS_TVEG, PALBNIR_TSOIL, PALBVIS_TSOIL) Arguments Type Intent Optional Attributes Name type(ISBA_OPTIONS_t), intent(inout) :: IO type(ISBA_PE_t), intent(inout) :: PEK real, intent(in), DIMENSION(:,:) :: PDIR_SW real, intent(in), DIMENSION(:,:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PSW_BANDS integer, intent(in) :: KSW real, intent(out), DIMENSION(:) :: PASNOW real, intent(out), DIMENSION(:) :: PANOSNOW real, intent(out), DIMENSION(:) :: PESNOW real, intent(out), DIMENSION(:) :: PENOSNOW real, intent(out), DIMENSION(:) :: PTSSNOW real, intent(out), DIMENSION(:) :: PTSNOSNOW real, intent(out), DIMENSION(:) :: PALBNIR_TVEG real, intent(out), DIMENSION(:) :: PALBVIS_TVEG real, intent(out), DIMENSION(:) :: PALBNIR_TSOIL real, intent(out), DIMENSION(:) :: PALBVIS_TSOIL","tags":"","loc":"interface/isba_properties.html"},{"title":"ALBEDO_FROM_NIR_VIS – Town Energy Balance (TEB) model API docs","text":"interface public subroutine ALBEDO_FROM_NIR_VIS(PSW_BANDS, PALBNIR, PALBVIS, PALBUV, PDIR_ALB, PSCA_ALB) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PSW_BANDS real, intent(in), DIMENSION(:) :: PALBNIR real, intent(in), DIMENSION(:) :: PALBVIS real, intent(in), DIMENSION(:) :: PALBUV real, intent(out), DIMENSION(:,:) :: PDIR_ALB real, intent(out), DIMENSION(:,:) :: PSCA_ALB","tags":"","loc":"interface/albedo_from_nir_vis.html"},{"title":"DAY_OF_WEEK – Town Energy Balance (TEB) model API docs","text":"interface public subroutine DAY_OF_WEEK(PYEAR, PMONTH, PDAY, PDOW) Arguments Type Intent Optional Attributes Name integer, intent(in) :: PYEAR integer, intent(in) :: PMONTH integer, intent(in) :: PDAY integer, intent(out) :: PDOW","tags":"","loc":"interface/day_of_week.html"},{"title":"DR_HOOK – Town Energy Balance (TEB) model API docs","text":"public subroutine DR_HOOK(HSTRING, KINTEGER, PREAL) Uses PARKIND1 Arguments Type Intent Optional Attributes Name character(len=*) :: HSTRING integer :: KINTEGER real(kind=JPRB) :: PREAL Contents Source Code DR_HOOK Source Code SUBROUTINE DR_HOOK ( HSTRING , KINTEGER , PREAL ) USE PARKIND1 CHARACTER ( LEN =* ) :: HSTRING INTEGER :: KINTEGER REAL ( KIND = JPRB ) :: PREAL print * , HSTRING , KINTEGER PREAL = 0. END SUBROUTINE DR_HOOK","tags":"","loc":"proc/dr_hook.html"},{"title":"LAYER_E_BUDGET_GET_COEF – Town Energy Balance (TEB) model API docs","text":"interface public subroutine LAYER_E_BUDGET_GET_COEF(PT, PTSTEP, PIMPL, PHC, PTC, PD, PA, PB, PC, PY) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PT real, intent(in) :: PTSTEP real, intent(in) :: PIMPL real, intent(in), DIMENSION(:,:) :: PHC real, intent(in), DIMENSION(:,:) :: PTC real, intent(in), DIMENSION(:,:) :: PD real, intent(out), DIMENSION(:,:) :: PA real, intent(out), DIMENSION(:,:) :: PB real, intent(out), DIMENSION(:,:) :: PC real, intent(out), DIMENSION(:,:) :: PY","tags":"","loc":"interface/layer_e_budget_get_coef.html"},{"title":"FLAG_TEB_VEG_n – Town Energy Balance (TEB) model API docs","text":"interface public subroutine FLAG_TEB_VEG_n(PEK, IO, PMASK, KFLAG) Arguments Type Intent Optional Attributes Name type(ISBA_PE_t), intent(inout) :: PEK type(ISBA_OPTIONS_t), intent(inout) :: IO real, intent(in), DIMENSION(:) :: PMASK integer, intent(in) :: KFLAG","tags":"","loc":"interface/flag_teb_veg_n.html"},{"title":"CH_FLAKE_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine CH_FLAKE_INIT(YCH_FLAKE) Arguments Type Intent Optional Attributes Name type( CH_FLAKE_t ), intent(inout) :: YCH_FLAKE Contents Source Code CH_FLAKE_INIT Source Code SUBROUTINE CH_FLAKE_INIT ( YCH_FLAKE ) TYPE ( CH_FLAKE_t ), INTENT ( INOUT ) :: YCH_FLAKE REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_FLAKE_N:CH_FLAKE_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YCH_FLAKE % XDEP ) NULLIFY ( YCH_FLAKE % CCH_NAMES ) NULLIFY ( YCH_FLAKE % CAER_NAMES ) NULLIFY ( YCH_FLAKE % CDSTNAMES ) NULLIFY ( YCH_FLAKE % CSLTNAMES ) YCH_FLAKE % CCH_DRY_DEP = ' ' CALL SV_INIT ( YCH_FLAKE % SVF ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_CH_FLAKE_N:CH_FLAKE_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE CH_FLAKE_INIT","tags":"","loc":"proc/ch_flake_init.html"},{"title":"URBAN_FLUXES – Town Energy Balance (TEB) model API docs","text":"interface public subroutine URBAN_FLUXES(TOP, T, B, DMT, HIMPLICIT_WIND, PT_CANYON, PPEW_A_COEF, PPEW_B_COEF, PEXNS, PRHOA, PVMOD, PH_TRAFFIC, PLE_TRAFFIC, PAC_WL, PCD, PDF_RF, PDN_RF, PDF_RD, PDN_RD, PRNSN_RF, PHSN_RF, PLESN_RF, PGSN_RF, PRNSN_RD, PHSN_RD, PLESN_RD, PGSN_RD, PMELT_RF, PDQS_RF, PMELT_RD, PDQS_RD, PDQS_WL_A, PDQS_WL_B, PFLX_BLD_RF, PFLX_BLD_WL_A, PFLX_BLD_WL_B, PFLX_BLD_FL, PFLX_BLD_MA, PE_SHADING, PLEW_RF, PRN_GR, PH_GR, PLE_GR, PGFLUX_GR, PLEW_RD, PLE_WL_A, PLE_WL_B, PMELT_BLT, PUSTAR_TWN) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B type(DIAG_MISC_TEB_t), intent(inout) :: DMT character(len=*), intent(in) :: HIMPLICIT_WIND real, intent(in), DIMENSION(:) :: PT_CANYON real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PH_TRAFFIC real, intent(in), DIMENSION(:) :: PLE_TRAFFIC real, intent(in), DIMENSION(:) :: PAC_WL real, intent(in), DIMENSION(:) :: PCD real, intent(in), DIMENSION(:) :: PDF_RF real, intent(in), DIMENSION(:) :: PDN_RF real, intent(in), DIMENSION(:) :: PDF_RD real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PRNSN_RF real, intent(in), DIMENSION(:) :: PHSN_RF real, intent(in), DIMENSION(:) :: PLESN_RF real, intent(in), DIMENSION(:) :: PGSN_RF real, intent(in), DIMENSION(:) :: PRNSN_RD real, intent(in), DIMENSION(:) :: PHSN_RD real, intent(in), DIMENSION(:) :: PLESN_RD real, intent(in), DIMENSION(:) :: PGSN_RD real, intent(in), DIMENSION(:) :: PMELT_RF real, intent(in), DIMENSION(:) :: PDQS_RF real, intent(in), DIMENSION(:) :: PMELT_RD real, intent(in), DIMENSION(:) :: PDQS_RD real, intent(in), DIMENSION(:) :: PDQS_WL_A real, intent(in), DIMENSION(:) :: PDQS_WL_B real, intent(in), DIMENSION(:) :: PFLX_BLD_RF real, intent(in), DIMENSION(:) :: PFLX_BLD_WL_A real, intent(in), DIMENSION(:) :: PFLX_BLD_WL_B real, intent(in), DIMENSION(:) :: PFLX_BLD_FL real, intent(in), DIMENSION(:) :: PFLX_BLD_MA real, intent(in), DIMENSION(:) :: PE_SHADING real, intent(in), DIMENSION(:) :: PLEW_RF real, intent(in), DIMENSION(:) :: PRN_GR real, intent(in), DIMENSION(:) :: PH_GR real, intent(in), DIMENSION(:) :: PLE_GR real, intent(in), DIMENSION(:) :: PGFLUX_GR real, intent(in), DIMENSION(:) :: PLEW_RD real, intent(out), DIMENSION(:) :: PLE_WL_A real, intent(out), DIMENSION(:) :: PLE_WL_B real, intent(out), DIMENSION(:) :: PMELT_BLT real, intent(out), DIMENSION(:) :: PUSTAR_TWN","tags":"","loc":"interface/urban_fluxes.html"},{"title":"AVG_URBAN_FLUXES – Town Energy Balance (TEB) model API docs","text":"interface public subroutine AVG_URBAN_FLUXES(TOP, T, B, TPN, DMT, PTS_TWN, PEMIS_TWN, PT_CAN, PQ_CAN, PT_LOWCAN, PQ_LOWCAN, PTA, PQA, PRHOA, PPS, PH_TRAFFIC, PLE_TRAFFIC, PWL_O_GRND, PESN_RF, PEMIS_GR, PLW_RAD, PAC_RF, PAC_RF_WAT, PAC_WL, PAC_RD, PAC_RD_WAT, PAC_TOP, PAC_GD, PQSAT_GD, PAC_AGG_GD, PHU_AGG_GD, PQSAT_RF, PQSAT_RD, PDELT_RF, PDELT_RD, PRF_FRAC, PWL_FRAC, PRD_FRAC, PGD_FRAC, PTOTS_O_HORS, PDF_RF, PDN_RF, PDF_RD, PDN_RD, PLE_WL_A, PLE_WL_B, PLEW_RF, PLESN_RF, PLEW_RD, PLESN_RD, PHSN_RD, PTSRAD_GD, PRN_GD, PH_GD, PLE_GD, PGFLUX_GD, PEVAP_GD, PRUNOFF_GD, PEVAP_GR, PRUNOFF_GR, PDRAIN_GR, PRN_GRND, PH_GRND, PLE_GRND, PGFLX_GRND, PRN_TWN, PH_TWN, PLE_TWN, PGFLX_TWN, PEVAP_TWN, PEMIT_LW_RD, PEMIT_LW_GD, PEMIT_LW_GRND, PEMIS_GD) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B type(TEB_PANEL_t), intent(inout) :: TPN type(DIAG_MISC_TEB_t), intent(inout) :: DMT real, intent(out), DIMENSION(:) :: PTS_TWN real, intent(out), DIMENSION(:) :: PEMIS_TWN real, intent(inout), DIMENSION(:) :: PT_CAN real, intent(inout), DIMENSION(:) :: PQ_CAN real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PH_TRAFFIC real, intent(in), DIMENSION(:) :: PLE_TRAFFIC real, intent(in), DIMENSION(:) :: PWL_O_GRND real, intent(in), DIMENSION(:) :: PESN_RF real, intent(in), DIMENSION(:) :: PEMIS_GR real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PAC_RF real, intent(in), DIMENSION(:) :: PAC_RF_WAT real, intent(in), DIMENSION(:) :: PAC_WL real, intent(in), DIMENSION(:) :: PAC_RD real, intent(in), DIMENSION(:) :: PAC_RD_WAT real, intent(in), DIMENSION(:) :: PAC_TOP real, intent(in), DIMENSION(:) :: PAC_GD real, intent(in), DIMENSION(:) :: PQSAT_GD real, intent(in), DIMENSION(:) :: PAC_AGG_GD real, intent(in), DIMENSION(:) :: PHU_AGG_GD real, intent(in), DIMENSION(:) :: PQSAT_RF real, intent(in), DIMENSION(:) :: PQSAT_RD real, intent(in), DIMENSION(:) :: PDELT_RF real, intent(in), DIMENSION(:) :: PDELT_RD real, intent(in), DIMENSION(:) :: PRF_FRAC real, intent(in), DIMENSION(:) :: PWL_FRAC real, intent(in), DIMENSION(:) :: PRD_FRAC real, intent(in), DIMENSION(:) :: PGD_FRAC real, intent(in), DIMENSION(:) :: PTOTS_O_HORS real, intent(in), DIMENSION(:) :: PDF_RF real, intent(in), DIMENSION(:) :: PDN_RF real, intent(in), DIMENSION(:) :: PDF_RD real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PLE_WL_A real, intent(in), DIMENSION(:) :: PLE_WL_B real, intent(in), DIMENSION(:) :: PLEW_RF real, intent(in), DIMENSION(:) :: PLESN_RF real, intent(in), DIMENSION(:) :: PLEW_RD real, intent(in), DIMENSION(:) :: PLESN_RD real, intent(in), DIMENSION(:) :: PHSN_RD real, intent(in), DIMENSION(:) :: PTSRAD_GD real, intent(in), DIMENSION(:) :: PRN_GD real, intent(in), DIMENSION(:) :: PH_GD real, intent(in), DIMENSION(:) :: PLE_GD real, intent(in), DIMENSION(:) :: PGFLUX_GD real, intent(in), DIMENSION(:) :: PEVAP_GD real, intent(in), DIMENSION(:) :: PRUNOFF_GD real, intent(in), DIMENSION(:) :: PEVAP_GR real, intent(in), DIMENSION(:) :: PRUNOFF_GR real, intent(in), DIMENSION(:) :: PDRAIN_GR real, intent(out), DIMENSION(:) :: PRN_GRND real, intent(out), DIMENSION(:) :: PH_GRND real, intent(out), DIMENSION(:) :: PLE_GRND real, intent(out), DIMENSION(:) :: PGFLX_GRND real, intent(out), DIMENSION(:) :: PRN_TWN real, intent(out), DIMENSION(:) :: PH_TWN real, intent(out), DIMENSION(:) :: PLE_TWN real, intent(out), DIMENSION(:) :: PGFLX_TWN real, intent(out), DIMENSION(:) :: PEVAP_TWN real, intent(in), DIMENSION(:) :: PEMIT_LW_RD real, intent(in), DIMENSION(:) :: PEMIT_LW_GD real, intent(out), DIMENSION(:) :: PEMIT_LW_GRND real, intent(in), DIMENSION(:) :: PEMIS_GD","tags":"","loc":"interface/avg_urban_fluxes.html"},{"title":"DIAG_UTCI_TEB_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine DIAG_UTCI_TEB_INIT(YDIAG_UTCI_TEB) Arguments Type Intent Optional Attributes Name type( DIAG_UTCI_TEB_t ), intent(inout) :: YDIAG_UTCI_TEB Contents Source Code DIAG_UTCI_TEB_INIT Source Code SUBROUTINE DIAG_UTCI_TEB_INIT ( YDIAG_UTCI_TEB ) TYPE ( DIAG_UTCI_TEB_t ), INTENT ( INOUT ) :: YDIAG_UTCI_TEB REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_UTCI_TEB_N:DIAG_UTCI_TEB_INIT\" , 0 , ZHOOK_HANDLE ) YDIAG_UTCI_TEB % LUTCI = . FALSE . NULLIFY ( YDIAG_UTCI_TEB % XUTCI_IN ) NULLIFY ( YDIAG_UTCI_TEB % XUTCI_OUTSUN ) NULLIFY ( YDIAG_UTCI_TEB % XUTCI_OUTSHADE ) NULLIFY ( YDIAG_UTCI_TEB % XTRAD_SUN ) NULLIFY ( YDIAG_UTCI_TEB % XTRAD_SHADE ) NULLIFY ( YDIAG_UTCI_TEB % XUTCIC_IN ) NULLIFY ( YDIAG_UTCI_TEB % XUTCIC_OUTSUN ) NULLIFY ( YDIAG_UTCI_TEB % XUTCIC_OUTSHADE ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_DIAG_UTCI_TEB_N:DIAG_UTCI_TEB_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE DIAG_UTCI_TEB_INIT","tags":"","loc":"proc/diag_utci_teb_init.html"},{"title":"ISBA_S_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine ISBA_S_INIT(YISBA_S) Arguments Type Intent Optional Attributes Name type( ISBA_S_t ), intent(inout) :: YISBA_S Contents Source Code ISBA_S_INIT Source Code SUBROUTINE ISBA_S_INIT ( YISBA_S ) TYPE ( ISBA_S_t ), INTENT ( INOUT ) :: YISBA_S REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_S_INIT\" , 0 , ZHOOK_HANDLE ) ! NULLIFY ( YISBA_S % XZS ) NULLIFY ( YISBA_S % XCOVER ) NULLIFY ( YISBA_S % LCOVER ) ! NULLIFY ( YISBA_S % XTI_MIN ) NULLIFY ( YISBA_S % XTI_MAX ) NULLIFY ( YISBA_S % XTI_MEAN ) NULLIFY ( YISBA_S % XTI_STD ) NULLIFY ( YISBA_S % XTI_SKEW ) ! NULLIFY ( YISBA_S % XSOC ) NULLIFY ( YISBA_S % XPH ) NULLIFY ( YISBA_S % XFERT ) ! NULLIFY ( YISBA_S % XABC ) NULLIFY ( YISBA_S % XPOI ) ! NULLIFY ( YISBA_S % XFRACSOC ) NULLIFY ( YISBA_S % XTAB_FSAT ) NULLIFY ( YISBA_S % XTAB_WTOP ) NULLIFY ( YISBA_S % XTAB_QTOP ) NULLIFY ( YISBA_S % XF_PARAM ) NULLIFY ( YISBA_S % XC_DEPTH_RATIO ) NULLIFY ( YISBA_S % XCPL_DRAIN ) NULLIFY ( YISBA_S % XCPL_RUNOFF ) NULLIFY ( YISBA_S % XCPL_ICEFLUX ) NULLIFY ( YISBA_S % XCPL_EFLOOD ) NULLIFY ( YISBA_S % XCPL_PFLOOD ) NULLIFY ( YISBA_S % XCPL_IFLOOD ) NULLIFY ( YISBA_S % XPERTVEG ) NULLIFY ( YISBA_S % XPERTLAI ) NULLIFY ( YISBA_S % XPERTCV ) NULLIFY ( YISBA_S % XPERTALB ) NULLIFY ( YISBA_S % XPERTZ0 ) NULLIFY ( YISBA_S % XEMIS_NAT ) ! NULLIFY ( YISBA_S % XTSRAD_NAT ) ! NULLIFY ( YISBA_S % XINNOV ) NULLIFY ( YISBA_S % XRESID ) ! NULLIFY ( YISBA_S % XWORK_WR ) ! NULLIFY ( YISBA_S % XWSN_WR ) NULLIFY ( YISBA_S % XRHO_WR ) NULLIFY ( YISBA_S % XALB_WR ) NULLIFY ( YISBA_S % XHEA_WR ) NULLIFY ( YISBA_S % XAGE_WR ) NULLIFY ( YISBA_S % XSG1_WR ) NULLIFY ( YISBA_S % XSG2_WR ) NULLIFY ( YISBA_S % XHIS_WR ) ! NULLIFY ( YISBA_S % TDATE_WR ) ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_S_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE ISBA_S_INIT","tags":"","loc":"proc/isba_s_init.html"},{"title":"ISBA_K_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine ISBA_K_INIT(YISBA_K) Arguments Type Intent Optional Attributes Name type( ISBA_K_t ), intent(inout) :: YISBA_K Contents Source Code ISBA_K_INIT Source Code SUBROUTINE ISBA_K_INIT ( YISBA_K ) TYPE ( ISBA_K_t ), INTENT ( INOUT ) :: YISBA_K REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_K_INIT\" , 0 , ZHOOK_HANDLE ) ! NULLIFY ( YISBA_K % XSAND ) NULLIFY ( YISBA_K % XCLAY ) NULLIFY ( YISBA_K % XPERM ) NULLIFY ( YISBA_K % XRUNOFFB ) NULLIFY ( YISBA_K % XWDRAIN ) ! NULLIFY ( YISBA_K % XTDEEP ) NULLIFY ( YISBA_K % XGAMMAT ) NULLIFY ( YISBA_K % XMPOTSAT ) NULLIFY ( YISBA_K % XBCOEF ) NULLIFY ( YISBA_K % XWWILT ) NULLIFY ( YISBA_K % XWFC ) NULLIFY ( YISBA_K % XWSAT ) NULLIFY ( YISBA_K % XCGSAT ) NULLIFY ( YISBA_K % XC4B ) NULLIFY ( YISBA_K % XACOEF ) NULLIFY ( YISBA_K % XPCOEF ) NULLIFY ( YISBA_K % XHCAPSOIL ) NULLIFY ( YISBA_K % XCONDDRY ) NULLIFY ( YISBA_K % XCONDSLD ) NULLIFY ( YISBA_K % XFWTD ) NULLIFY ( YISBA_K % XWTD ) NULLIFY ( YISBA_K % XALBNIR_DRY ) NULLIFY ( YISBA_K % XALBVIS_DRY ) NULLIFY ( YISBA_K % XALBUV_DRY ) NULLIFY ( YISBA_K % XALBNIR_WET ) NULLIFY ( YISBA_K % XALBVIS_WET ) NULLIFY ( YISBA_K % XALBUV_WET ) NULLIFY ( YISBA_K % XWD0 ) NULLIFY ( YISBA_K % XKANISO ) NULLIFY ( YISBA_K % XMUF ) NULLIFY ( YISBA_K % XFSAT ) NULLIFY ( YISBA_K % XFFLOOD ) NULLIFY ( YISBA_K % XPIFLOOD ) NULLIFY ( YISBA_K % XFF ) NULLIFY ( YISBA_K % XFFG ) NULLIFY ( YISBA_K % XFFV ) NULLIFY ( YISBA_K % XFFROZEN ) NULLIFY ( YISBA_K % XALBF ) NULLIFY ( YISBA_K % XEMISF ) NULLIFY ( YISBA_K % XDIR_ALB_WITH_SNOW ) NULLIFY ( YISBA_K % XSCA_ALB_WITH_SNOW ) ! NULLIFY ( YISBA_K % XVEGTYPE ) ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_K_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE ISBA_K_INIT","tags":"","loc":"proc/isba_k_init.html"},{"title":"ISBA_P_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine ISBA_P_INIT(YISBA_P) Arguments Type Intent Optional Attributes Name type( ISBA_P_t ), intent(inout) :: YISBA_P Contents Source Code ISBA_P_INIT Source Code SUBROUTINE ISBA_P_INIT ( YISBA_P ) TYPE ( ISBA_P_t ), INTENT ( INOUT ) :: YISBA_P REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_P_INIT\" , 0 , ZHOOK_HANDLE ) ! YISBA_P % NSIZE_P = 0 NULLIFY ( YISBA_P % XPATCH ) NULLIFY ( YISBA_P % XVEGTYPE_PATCH ) NULLIFY ( YISBA_P % NR_P ) NULLIFY ( YISBA_P % XPATCH_OLD ) NULLIFY ( YISBA_P % XANMAX ) NULLIFY ( YISBA_P % XFZERO ) NULLIFY ( YISBA_P % XEPSO ) NULLIFY ( YISBA_P % XGAMM ) NULLIFY ( YISBA_P % XQDGAMM ) NULLIFY ( YISBA_P % XQDGMES ) NULLIFY ( YISBA_P % XT1GMES ) NULLIFY ( YISBA_P % XT2GMES ) NULLIFY ( YISBA_P % XAMAX ) NULLIFY ( YISBA_P % XQDAMAX ) NULLIFY ( YISBA_P % XT1AMAX ) NULLIFY ( YISBA_P % XT2AMAX ) NULLIFY ( YISBA_P % XAH ) NULLIFY ( YISBA_P % XBH ) NULLIFY ( YISBA_P % XTAU_WOOD ) NULLIFY ( YISBA_P % XINCREASE ) NULLIFY ( YISBA_P % XTURNOVER ) NULLIFY ( YISBA_P % XCONDSAT ) NULLIFY ( YISBA_P % XTAUICE ) NULLIFY ( YISBA_P % XC1SAT ) NULLIFY ( YISBA_P % XC2REF ) NULLIFY ( YISBA_P % XC3 ) NULLIFY ( YISBA_P % XC4REF ) NULLIFY ( YISBA_P % XCPS ) NULLIFY ( YISBA_P % XLVTT ) NULLIFY ( YISBA_P % XLSTT ) NULLIFY ( YISBA_P % XRUNOFFD ) NULLIFY ( YISBA_P % XDZG ) NULLIFY ( YISBA_P % XDZDIF ) NULLIFY ( YISBA_P % XSOILWGHT ) NULLIFY ( YISBA_P % XKSAT_ICE ) NULLIFY ( YISBA_P % XBSLAI_NITRO ) NULLIFY ( YISBA_P % XTOPQS ) ! NULLIFY ( YISBA_P % XDG ) NULLIFY ( YISBA_P % XDG_OLD ) NULLIFY ( YISBA_P % NWG_LAYER ) NULLIFY ( YISBA_P % XDROOT ) NULLIFY ( YISBA_P % XDG2 ) NULLIFY ( YISBA_P % XROOTFRAC ) NULLIFY ( YISBA_P % XD_ICE ) NULLIFY ( YISBA_P % XH_TREE ) NULLIFY ( YISBA_P % XZ0_O_Z0H ) NULLIFY ( YISBA_P % XRE25 ) NULLIFY ( YISBA_P % XDMAX ) ! NULLIFY ( YISBA_P % XRED_NOISE ) NULLIFY ( YISBA_P % XINCR ) NULLIFY ( YISBA_P % XHO ) ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_P_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE ISBA_P_INIT","tags":"","loc":"proc/isba_p_init.html"},{"title":"ISBA_PE_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine ISBA_PE_INIT(YISBA_PE) Arguments Type Intent Optional Attributes Name type( ISBA_PE_t ), intent(inout) :: YISBA_PE Contents Source Code ISBA_PE_INIT Source Code SUBROUTINE ISBA_PE_INIT ( YISBA_PE ) TYPE ( ISBA_PE_t ), INTENT ( INOUT ) :: YISBA_PE REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_PE_INIT\" , 0 , ZHOOK_HANDLE ) ! NULLIFY ( YISBA_PE % XLAI ) NULLIFY ( YISBA_PE % XVEG ) NULLIFY ( YISBA_PE % XEMIS ) NULLIFY ( YISBA_PE % XZ0 ) NULLIFY ( YISBA_PE % XRSMIN ) NULLIFY ( YISBA_PE % XGAMMA ) NULLIFY ( YISBA_PE % XWRMAX_CF ) NULLIFY ( YISBA_PE % XRGL ) NULLIFY ( YISBA_PE % XCV ) NULLIFY ( YISBA_PE % XLAIMIN ) NULLIFY ( YISBA_PE % XSEFOLD ) NULLIFY ( YISBA_PE % XGMES ) NULLIFY ( YISBA_PE % XGC ) NULLIFY ( YISBA_PE % XF2I ) NULLIFY ( YISBA_PE % XBSLAI ) NULLIFY ( YISBA_PE % XCE_NITRO ) NULLIFY ( YISBA_PE % XCF_NITRO ) NULLIFY ( YISBA_PE % XCNA_NITRO ) NULLIFY ( YISBA_PE % LSTRESS ) NULLIFY ( YISBA_PE % XALBNIR_VEG ) NULLIFY ( YISBA_PE % XALBVIS_VEG ) NULLIFY ( YISBA_PE % XALBUV_VEG ) NULLIFY ( YISBA_PE % XALBNIR ) NULLIFY ( YISBA_PE % XALBVIS ) NULLIFY ( YISBA_PE % XALBUV ) ! NULLIFY ( YISBA_PE % XGNDLITTER ) NULLIFY ( YISBA_PE % XH_VEG ) NULLIFY ( YISBA_PE % XZ0LITTER ) ! NULLIFY ( YISBA_PE % XALBNIR_SOIL ) NULLIFY ( YISBA_PE % XALBVIS_SOIL ) NULLIFY ( YISBA_PE % XALBUV_SOIL ) ! NULLIFY ( YISBA_PE % XWATSUP ) NULLIFY ( YISBA_PE % XIRRIG ) ! NULLIFY ( YISBA_PE % XWG ) NULLIFY ( YISBA_PE % XWGI ) NULLIFY ( YISBA_PE % XWR ) NULLIFY ( YISBA_PE % XTG ) NULLIFY ( YISBA_PE % XICE_STO ) NULLIFY ( YISBA_PE % XWRL ) NULLIFY ( YISBA_PE % XWRLI ) NULLIFY ( YISBA_PE % XWRVN ) NULLIFY ( YISBA_PE % XTV ) NULLIFY ( YISBA_PE % XTL ) NULLIFY ( YISBA_PE % XTC ) NULLIFY ( YISBA_PE % XQC ) NULLIFY ( YISBA_PE % XRESA ) NULLIFY ( YISBA_PE % XAN ) NULLIFY ( YISBA_PE % XANDAY ) NULLIFY ( YISBA_PE % XANFM ) NULLIFY ( YISBA_PE % XLE ) NULLIFY ( YISBA_PE % XFAPARC ) NULLIFY ( YISBA_PE % XFAPIRC ) NULLIFY ( YISBA_PE % XLAI_EFFC ) NULLIFY ( YISBA_PE % XMUS ) NULLIFY ( YISBA_PE % XRESP_BIOMASS ) NULLIFY ( YISBA_PE % XBIOMASS ) NULLIFY ( YISBA_PE % XLITTER ) NULLIFY ( YISBA_PE % XSOILCARB ) NULLIFY ( YISBA_PE % XLIGNIN_STRUC ) NULLIFY ( YISBA_PE % XPSNG ) NULLIFY ( YISBA_PE % XPSNV ) NULLIFY ( YISBA_PE % XPSNV_A ) NULLIFY ( YISBA_PE % XSNOWFREE_ALB ) NULLIFY ( YISBA_PE % XSNOWFREE_ALB_VEG ) NULLIFY ( YISBA_PE % XSNOWFREE_ALB_SOIL ) NULLIFY ( YISBA_PE % XPSN ) ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_PE_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE ISBA_PE_INIT","tags":"","loc":"proc/isba_pe_init.html"},{"title":"ISBA_NK_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine ISBA_NK_INIT(YISBA_NK, KPATCH) Arguments Type Intent Optional Attributes Name type( ISBA_NK_t ), intent(inout) :: YISBA_NK integer, intent(in) :: KPATCH Contents Source Code ISBA_NK_INIT Source Code SUBROUTINE ISBA_NK_INIT ( YISBA_NK , KPATCH ) TYPE ( ISBA_NK_t ), INTENT ( INOUT ) :: YISBA_NK INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_NK_INIT\" , 0 , ZHOOK_HANDLE ) ! IF ( ASSOCIATED ( YISBA_NK % AL )) THEN DO JP = 1 , KPATCH CALL ISBA_K_INIT ( YISBA_NK % AL ( JP )) ENDDO DEALLOCATE ( YISBA_NK % AL ) ELSE ALLOCATE ( YISBA_NK % AL ( KPATCH )) DO JP = 1 , KPATCH CALL ISBA_K_INIT ( YISBA_NK % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_NK_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE ISBA_NK_INIT","tags":"","loc":"proc/isba_nk_init.html"},{"title":"ISBA_NP_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine ISBA_NP_INIT(YISBA_NP, KPATCH) Arguments Type Intent Optional Attributes Name type( ISBA_NP_t ), intent(inout) :: YISBA_NP integer, intent(in) :: KPATCH Contents Source Code ISBA_NP_INIT Source Code SUBROUTINE ISBA_NP_INIT ( YISBA_NP , KPATCH ) TYPE ( ISBA_NP_t ), INTENT ( INOUT ) :: YISBA_NP INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_NP_INIT\" , 0 , ZHOOK_HANDLE ) ! IF ( ASSOCIATED ( YISBA_NP % AL )) THEN DO JP = 1 , KPATCH CALL ISBA_P_INIT ( YISBA_NP % AL ( JP )) ENDDO DEALLOCATE ( YISBA_NP % AL ) ELSE ALLOCATE ( YISBA_NP % AL ( KPATCH )) DO JP = 1 , KPATCH CALL ISBA_P_INIT ( YISBA_NP % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE ISBA_NP_INIT","tags":"","loc":"proc/isba_np_init.html"},{"title":"ISBA_NPE_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine ISBA_NPE_INIT(YISBA_NPE, KPATCH) Arguments Type Intent Optional Attributes Name type( ISBA_NPE_t ), intent(inout) :: YISBA_NPE integer, intent(in) :: KPATCH Contents Source Code ISBA_NPE_INIT Source Code SUBROUTINE ISBA_NPE_INIT ( YISBA_NPE , KPATCH ) TYPE ( ISBA_NPE_t ), INTENT ( INOUT ) :: YISBA_NPE INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_NPE_INIT\" , 0 , ZHOOK_HANDLE ) ! IF ( ASSOCIATED ( YISBA_NPE % AL )) THEN DO JP = 1 , KPATCH CALL ISBA_PE_INIT ( YISBA_NPE % AL ( JP )) ENDDO DEALLOCATE ( YISBA_NPE % AL ) ELSE ALLOCATE ( YISBA_NPE % AL ( KPATCH )) DO JP = 1 , KPATCH CALL ISBA_PE_INIT ( YISBA_NPE % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_ISBA_N:ISBA_NPE_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE ISBA_NPE_INIT","tags":"","loc":"proc/isba_npe_init.html"},{"title":"SV_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine SV_INIT(YSV) Arguments Type Intent Optional Attributes Name type( SV_t ), intent(inout) :: YSV Contents Source Code SV_INIT Source Code SUBROUTINE SV_INIT ( YSV ) TYPE ( SV_t ), INTENT ( INOUT ) :: YSV REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SV_N:SV_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( YSV % CSV ) YSV % NBEQ = 0 YSV % NSV_CHSBEG = 0 YSV % NSV_CHSEND = 0 YSV % NSV_DSTBEG = 0 YSV % NSV_DSTEND = 0 YSV % NDSTEQ = 0 YSV % NSV_SLTBEG = 0 YSV % NSV_SLTEND = 0 YSV % NSLTEQ = 0 YSV % NSV_AERBEG = 0 YSV % NSV_AEREND = 0 YSV % NAEREQ = 0 IF ( LHOOK ) CALL DR_HOOK ( \"MODD_SV_N:SV_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE SV_INIT","tags":"","loc":"proc/sv_init.html"},{"title":"AGRI_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine AGRI_INIT(AG) Arguments Type Intent Optional Attributes Name type( AGRI_t ), intent(inout) :: AG Contents Source Code AGRI_INIT Source Code SUBROUTINE AGRI_INIT ( AG ) TYPE ( AGRI_t ), INTENT ( INOUT ) :: AG REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_AGRI_N:AGRI_INIT\" , 0 , ZHOOK_HANDLE ) NULLIFY ( AG % NIRRINUM ) NULLIFY ( AG % LIRRIGATE ) NULLIFY ( AG % LIRRIDAY ) NULLIFY ( AG % XTHRESHOLDSPT ) IF ( LHOOK ) CALL DR_HOOK ( \"MODD_AGRI_N:AGRI_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE AGRI_INIT","tags":"","loc":"proc/agri_init.html"},{"title":"AGRI_NP_INIT – Town Energy Balance (TEB) model API docs","text":"public subroutine AGRI_NP_INIT(YNAG, KPATCH) Arguments Type Intent Optional Attributes Name type( AGRI_NP_t ), intent(inout) :: YNAG integer, intent(in) :: KPATCH Contents Source Code AGRI_NP_INIT Source Code SUBROUTINE AGRI_NP_INIT ( YNAG , KPATCH ) TYPE ( AGRI_NP_t ), INTENT ( INOUT ) :: YNAG INTEGER , INTENT ( IN ) :: KPATCH INTEGER :: JP REAL ( KIND = JPRB ) :: ZHOOK_HANDLE IF ( LHOOK ) CALL DR_HOOK ( \"MODD_AGRI_N:AGRI_NP_INIT\" , 0 , ZHOOK_HANDLE ) ! IF ( ASSOCIATED ( YNAG % AL )) THEN DO JP = 1 , KPATCH CALL AGRI_INIT ( YNAG % AL ( JP )) ENDDO DEALLOCATE ( YNAG % AL ) ELSE ALLOCATE ( YNAG % AL ( KPATCH )) DO JP = 1 , KPATCH CALL AGRI_INIT ( YNAG % AL ( JP )) ENDDO ENDIF ! IF ( LHOOK ) CALL DR_HOOK ( \"MODD_AGRI_N:AGRI_NP_INIT\" , 1 , ZHOOK_HANDLE ) END SUBROUTINE AGRI_NP_INIT","tags":"","loc":"proc/agri_np_init.html"},{"title":"TEST_NAM_VAR_SURF – Town Energy Balance (TEB) model API docs","text":"public interface TEST_NAM_VAR_SURF Contents Subroutines TEST_NAM_VARC0_SURF TEST_NAM_VARL0_SURF TEST_NAM_VARN0_SURF TEST_NAM_VARX0_SURF Subroutines public subroutine TEST_NAM_VARC0_SURF(KLUOUT, HNAME, HVAR, HVALUE1, HVALUE2, HVALUE3, HVALUE4, HVALUE5, HVALUE6, HVALUE7, HVALUE8, HVALUE9, HVALUE10) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KLUOUT character(len=*), intent(in) :: HNAME character(len=*), intent(in) :: HVAR character(len=*), intent(in), optional :: HVALUE1 character(len=*), intent(in), optional :: HVALUE2 character(len=*), intent(in), optional :: HVALUE3 character(len=*), intent(in), optional :: HVALUE4 character(len=*), intent(in), optional :: HVALUE5 character(len=*), intent(in), optional :: HVALUE6 character(len=*), intent(in), optional :: HVALUE7 character(len=*), intent(in), optional :: HVALUE8 character(len=*), intent(in), optional :: HVALUE9 character(len=*), intent(in), optional :: HVALUE10 public subroutine TEST_NAM_VARL0_SURF(KLUOUT, HNAME, OVAR, OVALUE) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KLUOUT character(len=*), intent(in) :: HNAME logical, intent(in) :: OVAR logical, intent(in), optional :: OVALUE public subroutine TEST_NAM_VARN0_SURF(KLUOUT, HNAME, KVAR, KVALUE1, KVALUE2, KVALUE3, KVALUE4, KVALUE5, KVALUE6, KVALUE7, KVALUE8, KVALUE9, KVALUE10) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KLUOUT character(len=*), intent(in) :: HNAME integer, intent(in) :: KVAR integer, intent(in), optional :: KVALUE1 integer, intent(in), optional :: KVALUE2 integer, intent(in), optional :: KVALUE3 integer, intent(in), optional :: KVALUE4 integer, intent(in), optional :: KVALUE5 integer, intent(in), optional :: KVALUE6 integer, intent(in), optional :: KVALUE7 integer, intent(in), optional :: KVALUE8 integer, intent(in), optional :: KVALUE9 integer, intent(in), optional :: KVALUE10 public subroutine TEST_NAM_VARX0_SURF(KLUOUT, HNAME, PVAR, PVALUE1, PVALUE2, PVALUE3, PVALUE4, PVALUE5, PVALUE6, PVALUE7, PVALUE8, PVALUE9, PVALUE10) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KLUOUT character(len=*), intent(in) :: HNAME real, intent(in) :: PVAR real, intent(in), optional :: PVALUE1 real, intent(in), optional :: PVALUE2 real, intent(in), optional :: PVALUE3 real, intent(in), optional :: PVALUE4 real, intent(in), optional :: PVALUE5 real, intent(in), optional :: PVALUE6 real, intent(in), optional :: PVALUE7 real, intent(in), optional :: PVALUE8 real, intent(in), optional :: PVALUE9 real, intent(in), optional :: PVALUE10","tags":"","loc":"interface/test_nam_var_surf.html"},{"title":"URBAN_SOLAR_ABS – Town Energy Balance (TEB) model API docs","text":"interface public subroutine URBAN_SOLAR_ABS(TOP, T, B, DMT, PDIR_SW, PSCA_SW, PZENITH, PAZIM, PFRAC_PANEL, PALB_PANEL, PALB_GD, PSVF_GD, PALB_GRF, PDN_RF, PDF_RF, PDN_RD, PDF_RD, PREC_SW_RD, PREC_SW_SN_RD, PREC_SW_WL_A, PREC_SW_WL_B, PREC_SW_GD, PREC_SW_RF, PDIR_ALB_TWN, PSCA_ALB_TWN, PSW_RAD_GD, PREC_SW_WIN, PREF_SW_GRND, PREF_SW_FAC, PE_SHADING, OSHAD_DAY, OSHADE, OALB_ONLY) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B type(DIAG_MISC_TEB_t), intent(inout) :: DMT real, intent(in), DIMENSION(:) :: PDIR_SW real, intent(in), DIMENSION(:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PZENITH real, intent(in), DIMENSION(:) :: PAZIM real, intent(in), DIMENSION(:) :: PFRAC_PANEL real, intent(in), DIMENSION(:) :: PALB_PANEL real, intent(in), DIMENSION(:) :: PALB_GD real, intent(in), DIMENSION(:) :: PSVF_GD real, intent(in), DIMENSION(:) :: PALB_GRF real, intent(in), DIMENSION(:) :: PDN_RF real, intent(in), DIMENSION(:) :: PDF_RF real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PDF_RD real, intent(out), DIMENSION(:) :: PREC_SW_RD real, intent(out), DIMENSION(:) :: PREC_SW_SN_RD real, intent(out), DIMENSION(:) :: PREC_SW_WL_A real, intent(out), DIMENSION(:) :: PREC_SW_WL_B real, intent(out), DIMENSION(:) :: PREC_SW_GD real, intent(out), DIMENSION(:) :: PREC_SW_RF real, intent(out), DIMENSION(:) :: PDIR_ALB_TWN real, intent(out), DIMENSION(:) :: PSCA_ALB_TWN real, intent(out), DIMENSION(:) :: PSW_RAD_GD real, intent(out), DIMENSION(:) :: PREC_SW_WIN real, intent(out), DIMENSION(:) :: PREF_SW_GRND real, intent(out), DIMENSION(:) :: PREF_SW_FAC real, intent(out), DIMENSION(:) :: PE_SHADING logical, intent(inout), DIMENSION(:) :: OSHAD_DAY logical, intent(in), DIMENSION(:) :: OSHADE logical, intent(in), optional :: OALB_ONLY","tags":"","loc":"interface/urban_solar_abs.html"},{"title":"OPEN_NAMELIST – Town Energy Balance (TEB) model API docs","text":"interface public subroutine OPEN_NAMELIST(HPROGRAM, KLUNAM, HFILE) Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HPROGRAM integer, intent(out) :: KLUNAM character(len=28), intent(in), optional :: HFILE","tags":"","loc":"interface/open_namelist.html"},{"title":"TEB_GARDEN_STRUCT – Town Energy Balance (TEB) model API docs","text":"interface public subroutine TEB_GARDEN_STRUCT(OGARDEN, OGREENROOF, OSOLAR_PANEL, HZ0H, HIMPLICIT_WIND, HROAD_DIR, HWALL_OPT, TPTIME, PTSUN, PT_CAN, PQ_CAN, PU_CAN, PT_LOWCAN, PQ_LOWCAN, PU_LOWCAN, PZ_LOWCAN, PTI_BLD, PT_ROOF, PT_ROAD, PT_WALL_A, PT_WALL_B, PWS_ROOF, PWS_ROAD, HSNOW_ROOF, PWSNOW_ROOF, PTSNOW_ROOF, PRSNOW_ROOF, PASNOW_ROOF, PTSSNOW_ROOF, PESNOW_ROOF, HSNOW_ROAD, PWSNOW_ROAD, PTSNOW_ROAD, PRSNOW_ROAD, PASNOW_ROAD, PTSSNOW_ROAD, PESNOW_ROAD, PPEW_A_COEF, PPEW_B_COEF, PPEW_A_COEF_LOWCAN, PPEW_B_COEF_LOWCAN, PPS, PPA, PEXNS, PEXNA, PTA, PQA, PRHOA, PCO2, PLW_RAD, PDIR_SW, PSCA_SW, PSW_BANDS, KSW, PZENITH, PAZIM, PRR, PSR, PZREF, PUREF, PVMOD, PH_TRAFFIC, PLE_TRAFFIC, PH_INDUSTRY, PLE_INDUSTRY, PTSTEP, PZ0_TOWN, PBLD, PGARDEN, PROAD_DIR, PROAD, PFRAC_GR, PBLD_HEIGHT, PWALL_O_HOR, PCAN_HW_RATIO, PROAD_O_GRND, PGARDEN_O_GRND, PWALL_O_GRND, PALB_ROOF, PEMIS_ROOF, PHC_ROOF, PTC_ROOF, PD_ROOF, PALB_ROAD, PEMIS_ROAD, PSVF_ROAD, PHC_ROAD, PTC_ROAD, PD_ROAD, PALB_WALL, PEMIS_WALL, PSVF_WALL, PSVF_GARDEN, PHC_WALL, PTC_WALL, PD_WALL, PRN_ROOF, PH_ROOF, PLE_ROOF, PLEW_ROOF, PGFLUX_ROOF, PRUNOFF_ROOF, PRN_ROAD, PH_ROAD, PLE_ROAD, PLEW_ROAD, PGFLUX_ROAD, PRUNOFF_ROAD, PRN_WALL_A, PH_WALL_A, PLE_WALL_A, PGFLUX_WALL_A, PRN_WALL_B, PH_WALL_B, PLE_WALL_B, PGFLUX_WALL_B, PRN_STRLROOF, PH_STRLROOF, PLE_STRLROOF, PGFLUX_STRLROOF, PRUNOFF_STRLROOF, PRN_BLT, PH_BLT, PLE_BLT, PGFLUX_BLT, PRNSNOW_ROOF, PHSNOW_ROOF, PLESNOW_ROOF, PGSNOW_ROOF, PMELT_ROOF, PRNSNOW_ROAD, PHSNOW_ROAD, PLESNOW_ROAD, PGSNOW_ROAD, PMELT_ROAD, PRN_GRND, PH_GRND, PLE_GRND, PGFLUX_GRND, PRN_TOWN, PH_TOWN, PLE_TOWN, PGFLUX_TOWN, PEVAP_TOWN, PRUNOFF_TOWN, PSFCO2, PUW_GRND, PUW_ROOF, PDUWDU_GRND, PDUWDU_ROOF, PUSTAR_TOWN, PCD, PCDN, PCH_TOWN, PRI_TOWN, PTS_TOWN, PEMIS_TOWN, PDIR_ALB_TOWN, PSCA_ALB_TOWN, PRESA_TOWN, PDQS_TOWN, PQF_TOWN, PQF_BLD, PFLX_BLD, PAC_ROAD, PAC_GARDEN, PAC_GREENROOF, PAC_ROAD_WAT, PAC_GARDEN_WAT, PAC_GREENROOF_WAT, PABS_SW_ROOF, PABS_LW_ROOF, PABS_SW_SNOW_ROOF, PABS_LW_SNOW_ROOF, PABS_SW_ROAD, PABS_LW_ROAD, PABS_SW_SNOW_ROAD, PABS_LW_SNOW_ROAD, PABS_SW_WALL_A, PABS_LW_WALL_A, PABS_SW_WALL_B, PABS_LW_WALL_B, PABS_SW_PANEL, PABS_LW_PANEL, PABS_SW_GARDEN, PABS_LW_GARDEN, PABS_SW_GREENROOF, PABS_LW_GREENROOF, PG_GREENROOF_ROOF, HCOOL_COIL, PF_WATER_COND, HHEAT_COIL, HNATVENT, PNATVENT, KDAY, PAUX_MAX, PT_FLOOR, PT_MASS, PH_BLD_COOL, PT_BLD_COOL, PH_BLD_HEAT, PLE_BLD_COOL, PLE_BLD_HEAT, PH_WASTE, PLE_WASTE, PF_WASTE_CAN, PHVAC_COOL, PHVAC_HEAT, PQIN, PQIN_FRAD, PQIN_FLAT, PGR, PEFF_HEAT, PINF, PTCOOL_TARGET, PTHEAT_TARGET, PHR_TARGET, PT_WIN2, PQI_BLD, PV_VENT, PCAP_SYS_HEAT, PCAP_SYS_RAT, PT_ADP, PM_SYS_RAT, PCOP_RAT, PCAP_SYS, PM_SYS, PCOP, PQ_SYS, PT_SYS, PTR_SW_WIN, PFAN_POWER, PHC_FLOOR, PTC_FLOOR, PD_FLOOR, PT_WIN1, PABS_SW_WIN, PABS_LW_WIN, PSHGC, PSHGC_SH, PUGG_WIN, PALB_WIN, PABS_WIN, PEMIT_LW_FAC, PEMIT_LW_GRND, PT_RAD_IND, PREF_SW_GRND, PREF_SW_FAC, PHU_BLD, PTIME, OSHADE, PSHADE, OSHAD_DAY, ONATVENT_NIGHT, HBEM, PN_FLOOR, PWALL_O_BLD, PGLAZ_O_BLD, PMASS_O_BLD, PFLOOR_HW_RATIO, PF_FLOOR_MASS, PF_FLOOR_WALL, PF_FLOOR_WIN, PF_FLOOR_ROOF, PF_WALL_FLOOR, PF_WALL_MASS, PF_WALL_WIN, PF_WIN_FLOOR, PF_WIN_MASS, PF_WIN_WALL, PF_MASS_FLOOR, PF_MASS_WALL, PF_MASS_WIN, OCANOPY, PTRAN_WIN, HCH_BEM, PROUGH_ROOF, PROUGH_WALL, PF_WIN_WIN, OPAR_RD_IRRIG, PRD_START_MONTH, PRD_END_MONTH, PRD_START_HOUR, PRD_END_HOUR, PRD_24H_IRRIG, PIRRIG_ROAD, PEMIS_PANEL, PALB_PANEL, PEFF_PANEL, PFRAC_PANEL, PRESIDENTIAL, PTHER_PROD_PANEL, PPHOT_PROD_PANEL, PPROD_PANEL, PTHER_PROD_BLD, PPHOT_PROD_BLD, PPROD_BLD, PTHER_PRODC_DAY, PH_PANEL, PRN_PANEL, PDT_RES, PDT_OFF, PCUR_TCOOL_TARGET, PCUR_THEAT_TARGET, PCUR_QIN) Arguments Type Intent Optional Attributes Name logical, intent(in) :: OGARDEN logical, intent(in) :: OGREENROOF logical, intent(in) :: OSOLAR_PANEL character(len=6), intent(in) :: HZ0H character(len=*), intent(in) :: HIMPLICIT_WIND character(len=4), intent(in) :: HROAD_DIR character(len=4), intent(in) :: HWALL_OPT type(DATE_TIME), intent(in) :: TPTIME real, intent(in), DIMENSION(:) :: PTSUN real, intent(inout), DIMENSION(:) :: PT_CAN real, intent(inout), DIMENSION(:) :: PQ_CAN real, intent(in), DIMENSION(:) :: PU_CAN real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PU_LOWCAN real, intent(in), DIMENSION(:) :: PZ_LOWCAN real, intent(inout), DIMENSION(:) :: PTI_BLD real, intent(inout), DIMENSION(:,:) :: PT_ROOF real, intent(inout), DIMENSION(:,:) :: PT_ROAD real, intent(inout), DIMENSION(:,:) :: PT_WALL_A real, intent(inout), DIMENSION(:,:) :: PT_WALL_B real, intent(inout), DIMENSION(:) :: PWS_ROOF real, intent(inout), DIMENSION(:) :: PWS_ROAD character(len=*), intent(in) :: HSNOW_ROOF real, intent(inout), DIMENSION(:,:) :: PWSNOW_ROOF real, intent(inout), DIMENSION(:,:) :: PTSNOW_ROOF real, intent(inout), DIMENSION(:,:) :: PRSNOW_ROOF real, intent(inout), DIMENSION(:) :: PASNOW_ROOF real, intent(inout), DIMENSION(:) :: PTSSNOW_ROOF real, intent(inout), DIMENSION(:) :: PESNOW_ROOF character(len=*), intent(in) :: HSNOW_ROAD real, intent(inout), DIMENSION(:,:) :: PWSNOW_ROAD real, intent(inout), DIMENSION(:,:) :: PTSNOW_ROAD real, intent(inout), DIMENSION(:,:) :: PRSNOW_ROAD real, intent(inout), DIMENSION(:) :: PASNOW_ROAD real, intent(inout), DIMENSION(:) :: PTSSNOW_ROAD real, intent(inout), DIMENSION(:) :: PESNOW_ROAD real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPEW_A_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_B_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PPA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PCO2 real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:,:) :: PDIR_SW real, intent(in), DIMENSION(:,:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PSW_BANDS integer, intent(in) :: KSW real, intent(in), DIMENSION(:) :: PZENITH real, intent(in), DIMENSION(:) :: PAZIM real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PH_TRAFFIC real, intent(in), DIMENSION(:) :: PLE_TRAFFIC real, intent(in), DIMENSION(:) :: PH_INDUSTRY real, intent(in), DIMENSION(:) :: PLE_INDUSTRY real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PZ0_TOWN real, intent(in), DIMENSION(:) :: PBLD real, intent(in), DIMENSION(:) :: PGARDEN real, intent(in), DIMENSION(:) :: PROAD_DIR real, intent(in), DIMENSION(:) :: PROAD real, intent(in), DIMENSION(:) :: PFRAC_GR real, intent(in), DIMENSION(:) :: PBLD_HEIGHT real, intent(in), DIMENSION(:) :: PWALL_O_HOR real, intent(in), DIMENSION(:) :: PCAN_HW_RATIO real, intent(in), DIMENSION(:) :: PROAD_O_GRND real, intent(in), DIMENSION(:) :: PGARDEN_O_GRND real, intent(in), DIMENSION(:) :: PWALL_O_GRND real, intent(in), DIMENSION(:) :: PALB_ROOF real, intent(in), DIMENSION(:) :: PEMIS_ROOF real, intent(in), DIMENSION(:,:) :: PHC_ROOF real, intent(in), DIMENSION(:,:) :: PTC_ROOF real, intent(in), DIMENSION(:,:) :: PD_ROOF real, intent(in), DIMENSION(:) :: PALB_ROAD real, intent(in), DIMENSION(:) :: PEMIS_ROAD real, intent(in), DIMENSION(:) :: PSVF_ROAD real, intent(in), DIMENSION(:,:) :: PHC_ROAD real, intent(in), DIMENSION(:,:) :: PTC_ROAD real, intent(in), DIMENSION(:,:) :: PD_ROAD real, intent(in), DIMENSION(:) :: PALB_WALL real, intent(in), DIMENSION(:) :: PEMIS_WALL real, intent(in), DIMENSION(:) :: PSVF_WALL real, intent(in), DIMENSION(:) :: PSVF_GARDEN real, intent(in), DIMENSION(:,:) :: PHC_WALL real, intent(in), DIMENSION(:,:) :: PTC_WALL real, intent(in), DIMENSION(:,:) :: PD_WALL real, intent(out), DIMENSION(:) :: PRN_ROOF real, intent(out), DIMENSION(:) :: PH_ROOF real, intent(out), DIMENSION(:) :: PLE_ROOF real, intent(out), DIMENSION(:) :: PLEW_ROOF real, intent(out), DIMENSION(:) :: PGFLUX_ROOF real, intent(out), DIMENSION(:) :: PRUNOFF_ROOF real, intent(out), DIMENSION(:) :: PRN_ROAD real, intent(out), DIMENSION(:) :: PH_ROAD real, intent(out), DIMENSION(:) :: PLE_ROAD real, intent(out), DIMENSION(:) :: PLEW_ROAD real, intent(out), DIMENSION(:) :: PGFLUX_ROAD real, intent(out), DIMENSION(:) :: PRUNOFF_ROAD real, intent(out), DIMENSION(:) :: PRN_WALL_A real, intent(out), DIMENSION(:) :: PH_WALL_A real, intent(out), DIMENSION(:) :: PLE_WALL_A real, intent(out), DIMENSION(:) :: PGFLUX_WALL_A real, intent(out), DIMENSION(:) :: PRN_WALL_B real, intent(out), DIMENSION(:) :: PH_WALL_B real, intent(out), DIMENSION(:) :: PLE_WALL_B real, intent(out), DIMENSION(:) :: PGFLUX_WALL_B real, intent(out), DIMENSION(:) :: PRN_STRLROOF real, intent(out), DIMENSION(:) :: PH_STRLROOF real, intent(out), DIMENSION(:) :: PLE_STRLROOF real, intent(out), DIMENSION(:) :: PGFLUX_STRLROOF real, intent(out), DIMENSION(:) :: PRUNOFF_STRLROOF real, intent(out), DIMENSION(:) :: PRN_BLT real, intent(out), DIMENSION(:) :: PH_BLT real, intent(out), DIMENSION(:) :: PLE_BLT real, intent(out), DIMENSION(:) :: PGFLUX_BLT real, intent(out), DIMENSION(:) :: PRNSNOW_ROOF real, intent(out), DIMENSION(:) :: PHSNOW_ROOF real, intent(out), DIMENSION(:) :: PLESNOW_ROOF real, intent(out), DIMENSION(:) :: PGSNOW_ROOF real, intent(out), DIMENSION(:) :: PMELT_ROOF real, intent(out), DIMENSION(:) :: PRNSNOW_ROAD real, intent(out), DIMENSION(:) :: PHSNOW_ROAD real, intent(out), DIMENSION(:) :: PLESNOW_ROAD real, intent(out), DIMENSION(:) :: PGSNOW_ROAD real, intent(out), DIMENSION(:) :: PMELT_ROAD real, intent(out), DIMENSION(:) :: PRN_GRND real, intent(out), DIMENSION(:) :: PH_GRND real, intent(out), DIMENSION(:) :: PLE_GRND real, intent(out), DIMENSION(:) :: PGFLUX_GRND real, intent(out), DIMENSION(:) :: PRN_TOWN real, intent(out), DIMENSION(:) :: PH_TOWN real, intent(out), DIMENSION(:) :: PLE_TOWN real, intent(out), DIMENSION(:) :: PGFLUX_TOWN real, intent(out), DIMENSION(:) :: PEVAP_TOWN real, intent(out), DIMENSION(:) :: PRUNOFF_TOWN real, intent(out), DIMENSION(:) :: PSFCO2 real, intent(out), DIMENSION(:) :: PUW_GRND real, intent(out), DIMENSION(:) :: PUW_ROOF real, intent(out), DIMENSION(:) :: PDUWDU_GRND real, intent(out), DIMENSION(:) :: PDUWDU_ROOF real, intent(out), DIMENSION(:) :: PUSTAR_TOWN real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN real, intent(out), DIMENSION(:) :: PCH_TOWN real, intent(out), DIMENSION(:) :: PRI_TOWN real, intent(out), DIMENSION(:) :: PTS_TOWN real, intent(out), DIMENSION(:) :: PEMIS_TOWN real, intent(out), DIMENSION(:) :: PDIR_ALB_TOWN real, intent(out), DIMENSION(:) :: PSCA_ALB_TOWN real, intent(out), DIMENSION(:) :: PRESA_TOWN real, intent(out), DIMENSION(:) :: PDQS_TOWN real, intent(out), DIMENSION(:) :: PQF_TOWN real, intent(out), DIMENSION(:) :: PQF_BLD real, intent(out), DIMENSION(:) :: PFLX_BLD real, intent(out), DIMENSION(:) :: PAC_ROAD real, intent(out), DIMENSION(:) :: PAC_GARDEN real, intent(out), DIMENSION(:) :: PAC_GREENROOF real, intent(out), DIMENSION(:) :: PAC_ROAD_WAT real, intent(out), DIMENSION(:) :: PAC_GARDEN_WAT real, intent(out), DIMENSION(:) :: PAC_GREENROOF_WAT real, intent(out), DIMENSION(:) :: PABS_SW_ROOF real, intent(out), DIMENSION(:) :: PABS_LW_ROOF real, intent(out), DIMENSION(:) :: PABS_SW_SNOW_ROOF real, intent(out), DIMENSION(:) :: PABS_LW_SNOW_ROOF real, intent(out), DIMENSION(:) :: PABS_SW_ROAD real, intent(out), DIMENSION(:) :: PABS_LW_ROAD real, intent(out), DIMENSION(:) :: PABS_SW_SNOW_ROAD real, intent(out), DIMENSION(:) :: PABS_LW_SNOW_ROAD real, intent(out), DIMENSION(:) :: PABS_SW_WALL_A real, intent(out), DIMENSION(:) :: PABS_LW_WALL_A real, intent(out), DIMENSION(:) :: PABS_SW_WALL_B real, intent(out), DIMENSION(:) :: PABS_LW_WALL_B real, intent(out), DIMENSION(:) :: PABS_SW_PANEL real, intent(out), DIMENSION(:) :: PABS_LW_PANEL real, intent(out), DIMENSION(:) :: PABS_SW_GARDEN real, intent(out), DIMENSION(:) :: PABS_LW_GARDEN real, intent(out), DIMENSION(:) :: PABS_SW_GREENROOF real, intent(out), DIMENSION(:) :: PABS_LW_GREENROOF real, intent(out), DIMENSION(:) :: PG_GREENROOF_ROOF character(len=12), intent(in) :: HCOOL_COIL real, intent(in), DIMENSION(:) :: PF_WATER_COND character(len=6), intent(in) :: HHEAT_COIL character(len=4), intent(in), DIMENSION(:) :: HNATVENT real, intent(in), DIMENSION(:) :: PNATVENT integer, intent(in) :: KDAY real, intent(inout), DIMENSION(:) :: PAUX_MAX real, intent(inout), DIMENSION(:,:) :: PT_FLOOR real, intent(inout), DIMENSION(:,:) :: PT_MASS real, intent(out), DIMENSION(:) :: PH_BLD_COOL real, intent(out), DIMENSION(:) :: PT_BLD_COOL real, intent(out), DIMENSION(:) :: PH_BLD_HEAT real, intent(out), DIMENSION(:  ) :: PLE_BLD_COOL real, intent(out), DIMENSION(:) :: PLE_BLD_HEAT real, intent(out), DIMENSION(:) :: PH_WASTE real, intent(out), DIMENSION(:) :: PLE_WASTE real, intent(in), DIMENSION(:) :: PF_WASTE_CAN real, intent(out), DIMENSION(:) :: PHVAC_COOL real, intent(out), DIMENSION(:) :: PHVAC_HEAT real, intent(in), DIMENSION(:) :: PQIN real, intent(in), DIMENSION(:) :: PQIN_FRAD real, intent(in), DIMENSION(:) :: PQIN_FLAT real, intent(in), DIMENSION(:) :: PGR real, intent(in), DIMENSION(:) :: PEFF_HEAT real, intent(in), DIMENSION(:) :: PINF real, intent(in), DIMENSION(:) :: PTCOOL_TARGET real, intent(in), DIMENSION(:) :: PTHEAT_TARGET real, intent(in), DIMENSION(:) :: PHR_TARGET real, intent(inout), DIMENSION(:) :: PT_WIN2 real, intent(inout), DIMENSION(:) :: PQI_BLD real, intent(in), DIMENSION(:) :: PV_VENT real, intent(in), DIMENSION(:) :: PCAP_SYS_HEAT real, intent(inout), DIMENSION(:) :: PCAP_SYS_RAT real, intent(in), DIMENSION(:) :: PT_ADP real, intent(inout), DIMENSION(:) :: PM_SYS_RAT real, intent(in), DIMENSION(:) :: PCOP_RAT real, intent(out), DIMENSION(:) :: PCAP_SYS real, intent(out), DIMENSION(:) :: PM_SYS real, intent(out), DIMENSION(:) :: PCOP real, intent(out), DIMENSION(:) :: PQ_SYS real, intent(out), DIMENSION(:) :: PT_SYS real, intent(out), DIMENSION(:) :: PTR_SW_WIN real, intent(out), DIMENSION(:) :: PFAN_POWER real, intent(in), DIMENSION(:,:) :: PHC_FLOOR real, intent(in), DIMENSION(:,:) :: PTC_FLOOR real, intent(in), DIMENSION(:,:) :: PD_FLOOR real, intent(inout), DIMENSION(:) :: PT_WIN1 real, intent(out), DIMENSION(:) :: PABS_SW_WIN real, intent(out), DIMENSION(:) :: PABS_LW_WIN real, intent(in), DIMENSION(:) :: PSHGC real, intent(in), DIMENSION(:) :: PSHGC_SH real, intent(in), DIMENSION(:) :: PUGG_WIN real, intent(out), DIMENSION(:) :: PALB_WIN real, intent(in), DIMENSION(:) :: PABS_WIN real, intent(out), DIMENSION(:) :: PEMIT_LW_FAC real, intent(out), DIMENSION(:) :: PEMIT_LW_GRND real, intent(out), DIMENSION(:) :: PT_RAD_IND real, intent(out), DIMENSION(:) :: PREF_SW_GRND real, intent(out), DIMENSION(:) :: PREF_SW_FAC real, intent(out), DIMENSION(:) :: PHU_BLD real, intent(in) :: PTIME logical, intent(in), DIMENSION(:) :: OSHADE real, intent(in), DIMENSION(:) :: PSHADE logical, intent(inout), DIMENSION(:) :: OSHAD_DAY logical, intent(inout), DIMENSION(:) :: ONATVENT_NIGHT character(len=3), intent(in) :: HBEM real, intent(in), DIMENSION(:) :: PN_FLOOR real, intent(in), DIMENSION(:) :: PWALL_O_BLD real, intent(in), DIMENSION(:) :: PGLAZ_O_BLD real, intent(in), DIMENSION(:) :: PMASS_O_BLD real, intent(in), DIMENSION(:) :: PFLOOR_HW_RATIO real, intent(in), DIMENSION(:) :: PF_FLOOR_MASS real, intent(in), DIMENSION(:) :: PF_FLOOR_WALL real, intent(in), DIMENSION(:) :: PF_FLOOR_WIN real, intent(in), DIMENSION(:) :: PF_FLOOR_ROOF real, intent(in), DIMENSION(:) :: PF_WALL_FLOOR real, intent(in), DIMENSION(:) :: PF_WALL_MASS real, intent(in), DIMENSION(:) :: PF_WALL_WIN real, intent(in), DIMENSION(:) :: PF_WIN_FLOOR real, intent(in), DIMENSION(:) :: PF_WIN_MASS real, intent(in), DIMENSION(:) :: PF_WIN_WALL real, intent(in), DIMENSION(:) :: PF_MASS_FLOOR real, intent(in), DIMENSION(:) :: PF_MASS_WALL real, intent(in), DIMENSION(:) :: PF_MASS_WIN logical, intent(in) :: OCANOPY real, intent(in), DIMENSION(:) :: PTRAN_WIN character(len=5), intent(in) :: HCH_BEM real, intent(in), DIMENSION(:) :: PROUGH_ROOF real, intent(in), DIMENSION(:) :: PROUGH_WALL real, intent(in), DIMENSION(:) :: PF_WIN_WIN logical, intent(in) :: OPAR_RD_IRRIG real, intent(in), DIMENSION(:) :: PRD_START_MONTH real, intent(in), DIMENSION(:) :: PRD_END_MONTH real, intent(in), DIMENSION(:) :: PRD_START_HOUR real, intent(in), DIMENSION(:) :: PRD_END_HOUR real, intent(in), DIMENSION(:) :: PRD_24H_IRRIG real, intent(out), DIMENSION(:) :: PIRRIG_ROAD real, intent(in), DIMENSION(:) :: PEMIS_PANEL real, intent(in), DIMENSION(:) :: PALB_PANEL real, intent(in), DIMENSION(:) :: PEFF_PANEL real, intent(in), DIMENSION(:) :: PFRAC_PANEL real, intent(in), DIMENSION(:) :: PRESIDENTIAL real, intent(out), DIMENSION(:) :: PTHER_PROD_PANEL real, intent(out), DIMENSION(:) :: PPHOT_PROD_PANEL real, intent(out), DIMENSION(:) :: PPROD_PANEL real, intent(out), DIMENSION(:) :: PTHER_PROD_BLD real, intent(out), DIMENSION(:) :: PPHOT_PROD_BLD real, intent(out), DIMENSION(:) :: PPROD_BLD real, intent(inout), DIMENSION(:) :: PTHER_PRODC_DAY real, intent(out), DIMENSION(:) :: PH_PANEL real, intent(out), DIMENSION(:) :: PRN_PANEL real, intent(in) :: PDT_RES real, intent(in) :: PDT_OFF real, intent(out), DIMENSION(:) :: PCUR_TCOOL_TARGET real, intent(out), DIMENSION(:) :: PCUR_THEAT_TARGET real, intent(out), DIMENSION(:) :: PCUR_QIN","tags":"","loc":"interface/teb_garden_struct.html"},{"title":"DEALLOC_TEB_STRUCT – Town Energy Balance (TEB) model API docs","text":"interface public subroutine DEALLOC_TEB_STRUCT(TOP, T, BOP, B, TPN, TIR, DMT, GDM, GRM) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_OPTIONS_t), intent(inout) :: BOP type(BEM_t), intent(inout) :: B type(TEB_PANEL_t), intent(inout) :: TPN type(TEB_IRRIG_t), intent(inout) :: TIR type(DIAG_MISC_TEB_t), intent(inout) :: DMT type(TEB_GARDEN_MODEL_t), intent(inout) :: GDM type(TEB_GREENROOF_MODEL_t), intent(inout) :: GRM","tags":"","loc":"interface/dealloc_teb_struct.html"},{"title":"WINDOW_DATA_STRUCT – Town Energy Balance (TEB) model API docs","text":"interface public subroutine WINDOW_DATA_STRUCT(KI, PSHGC, PU_WIN, PALB_WIN, PABS_WIN, PUGG_WIN, PTRAN_WIN) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KI real, intent(in), DIMENSION(KI) :: PSHGC real, intent(in), DIMENSION(KI) :: PU_WIN real, intent(out), DIMENSION(KI) :: PALB_WIN real, intent(out), DIMENSION(KI) :: PABS_WIN real, intent(out), DIMENSION(KI) :: PUGG_WIN real, intent(out), DIMENSION(KI) :: PTRAN_WIN","tags":"","loc":"interface/window_data_struct.html"},{"title":"BEM_MORPHO_STRUCT – Town Energy Balance (TEB) model API docs","text":"interface public subroutine BEM_MORPHO_STRUCT(PBLD, PWALL_O_HOR, PBLD_HEIGHT, PFLOOR_HEIGHT, PGR, PN_FLOOR, PWALL_O_BLD, PGLAZ_O_BLD, PMASS_O_BLD, PFLOOR_HW_RATIO, PF_FLOOR_MASS, PF_FLOOR_WALL, PF_FLOOR_WIN, PF_FLOOR_ROOF, PF_WALL_FLOOR, PF_WALL_MASS, PF_WALL_WIN, PF_WIN_FLOOR, PF_WIN_MASS, PF_WIN_WALL, PF_MASS_FLOOR, PF_MASS_WALL, PF_MASS_WIN, PF_WASTE_CAN, PF_WIN_WIN) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PBLD real, intent(in), DIMENSION(:) :: PWALL_O_HOR real, intent(in), DIMENSION(:) :: PBLD_HEIGHT real, intent(inout), DIMENSION(:) :: PFLOOR_HEIGHT real, intent(in), DIMENSION(:) :: PGR real, intent(out), DIMENSION(:) :: PN_FLOOR real, intent(out), DIMENSION(:) :: PWALL_O_BLD real, intent(out), DIMENSION(:) :: PGLAZ_O_BLD real, intent(out), DIMENSION(:) :: PMASS_O_BLD real, intent(out), DIMENSION(:) :: PFLOOR_HW_RATIO real, intent(out), DIMENSION(:) :: PF_FLOOR_MASS real, intent(out), DIMENSION(:) :: PF_FLOOR_WALL real, intent(out), DIMENSION(:) :: PF_FLOOR_WIN real, intent(out), DIMENSION(:) :: PF_FLOOR_ROOF real, intent(out), DIMENSION(:) :: PF_WALL_FLOOR real, intent(out), DIMENSION(:) :: PF_WALL_MASS real, intent(out), DIMENSION(:) :: PF_WALL_WIN real, intent(out), DIMENSION(:) :: PF_WIN_FLOOR real, intent(out), DIMENSION(:) :: PF_WIN_MASS real, intent(out), DIMENSION(:) :: PF_WIN_WALL real, intent(out), DIMENSION(:) :: PF_MASS_FLOOR real, intent(out), DIMENSION(:) :: PF_MASS_WALL real, intent(out), DIMENSION(:) :: PF_MASS_WIN real, intent(inout), DIMENSION(:) :: PF_WASTE_CAN real, intent(out), DIMENSION(:) :: PF_WIN_WIN","tags":"","loc":"interface/bem_morpho_struct.html"},{"title":"ALLOC_TEB_STRUCT – Town Energy Balance (TEB) model API docs","text":"interface public subroutine ALLOC_TEB_STRUCT(KROOF_LAYER, KROAD_LAYER, KWALL_LAYER, KFLOOR_LAYER, DTCO, G, TOP, T, BOP, B, TPN, TIR, DMT, GDM, GRM) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KROOF_LAYER integer, intent(in) :: KROAD_LAYER integer, intent(in) :: KWALL_LAYER integer, intent(in) :: KFLOOR_LAYER type(DATA_COVER_t), intent(inout) :: DTCO type(GRID_t), intent(inout) :: G type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_OPTIONS_t), intent(inout) :: BOP type(BEM_t), intent(inout) :: B type(TEB_PANEL_t), intent(inout) :: TPN type(TEB_IRRIG_t), intent(inout) :: TIR type(DIAG_MISC_TEB_t), intent(inout) :: DMT type(TEB_GARDEN_MODEL_t), intent(inout) :: GDM type(TEB_GREENROOF_MODEL_t), intent(inout) :: GRM","tags":"","loc":"interface/alloc_teb_struct.html"},{"title":"PROXI_SVAT_CONSTS – Town Energy Balance (TEB) model API docs","text":"Contents Variables VEG_ALB VEG_EMIS GARDEN_BR GREENROOF_BR Variables Type Visibility Attributes Name Initial real, public :: VEG_ALB = 0.25 real, public :: VEG_EMIS = 0.98 real, public :: GARDEN_BR = 0.25 real, public :: GREENROOF_BR = 0.5","tags":"","loc":"module/proxi_svat_consts.html"},{"title":"MODI_GREENROOF – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces GREENROOF Interfaces interface public subroutine GREENROOF(DTCO, G, T, TOP, TIR, DTV, GB, DK, DEK, DMK, GRO, S, K, P, PEK, HIMPLICIT_WIND, TPTIME, PTSUN, PPEW_A_COEF, PPEW_B_COEF, PPET_A_COEF, PPEQ_A_COEF, PPET_B_COEF, PPEQ_B_COEF, PTSTEP, PZREF, PUREF, PALB_GD, PTA, PQA, PEXNS, PEXNA, PRHOA, PCO2, PPS, PRR, PSR, PZENITH, PSW, PLW, PVMOD, PALBNIR_TVEG, PALBVIS_TVEG, PALBNIR_TSOIL, PALBVIS_TSOIL, PRN, PH, PLE, PGFLUX, PSFCO2, PEVAP, PUW, PRUNOFF, PDRAIN, PAC, PQSAT, PTSRAD, PAC_AGG, PHU_AGG, PDEEP_FLUX, PIRRIG) Arguments Type Intent Optional Attributes Name type(DATA_COVER_t), intent(inout) :: DTCO type(GRID_t), intent(inout) :: G type(TEB_t), intent(inout) :: T type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_IRRIG_t), intent(inout) :: TIR type(DATA_ISBA_t), intent(inout) :: DTV type(GR_BIOG_t), intent(inout) :: GB type(DIAG_t), intent(inout) :: DK type(DIAG_EVAP_ISBA_t), intent(inout) :: DEK type(DIAG_MISC_ISBA_t), intent(inout) :: DMK type(ISBA_OPTIONS_t), intent(inout) :: GRO type(ISBA_S_t), intent(inout) :: S type(ISBA_K_t), intent(inout) :: K type(ISBA_P_t), intent(inout) :: P type(ISBA_PE_t), intent(inout) :: PEK character(len=*), intent(in) :: HIMPLICIT_WIND type(DATE_TIME), intent(in) :: TPTIME real, intent(in), DIMENSION(:) :: PTSUN real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPET_A_COEF real, intent(in), DIMENSION(:) :: PPEQ_A_COEF real, intent(in), DIMENSION(:) :: PPET_B_COEF real, intent(in), DIMENSION(:) :: PPEQ_B_COEF real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PALB_GD real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PCO2 real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZENITH real, intent(in), DIMENSION(:) :: PSW real, intent(in), DIMENSION(:) :: PLW real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PALBNIR_TVEG real, intent(in), DIMENSION(:) :: PALBVIS_TVEG real, intent(in), DIMENSION(:) :: PALBNIR_TSOIL real, intent(in), DIMENSION(:) :: PALBVIS_TSOIL real, intent(out), DIMENSION(:) :: PRN real, intent(out), DIMENSION(:) :: PH real, intent(out), DIMENSION(:) :: PLE real, intent(out), DIMENSION(:) :: PGFLUX real, intent(out), DIMENSION(:) :: PSFCO2 real, intent(out), DIMENSION(:) :: PEVAP real, intent(out), DIMENSION(:) :: PUW real, intent(out), DIMENSION(:) :: PRUNOFF real, intent(out), DIMENSION(:) :: PDRAIN real, intent(out), DIMENSION(:) :: PAC real, intent(out), DIMENSION(:) :: PQSAT real, intent(out), DIMENSION(:) :: PTSRAD real, intent(out), DIMENSION(:) :: PAC_AGG real, intent(out), DIMENSION(:) :: PHU_AGG real, intent(out), DIMENSION(:) :: PDEEP_FLUX real, intent(out), DIMENSION(:) :: PIRRIG","tags":"","loc":"module/modi_greenroof.html"},{"title":"MODI_GARDEN – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces GARDEN Interfaces interface public subroutine GARDEN(DTCO, G, T, TOP, TIR, DTV, GB, DK, DEK, DMK, GDO, S, K, P, PEK, HIMPLICIT_WIND, TPTIME, PTSUN, PPEW_A_COEF, PPEW_B_COEF, PPET_A_COEF, PPEQ_A_COEF, PPET_B_COEF, PPEQ_B_COEF, PTSTEP, PZREF, PALB_GD, PTA, PQA, PEXNS, PRHOA, PCO2, PPS, PRR, PSR, PZENITH, PSW, PLW, PVMOD, PALBNIR_TVEG, PALBVIS_TVEG, PALBNIR_TSOIL, PALBVIS_TSOIL, PRN, PH, PLE, PGFLUX, PSFCO2, PEVAP, PUW, PRUNOFF, PAC, PQSAT, PTSRAD, PAC_AGG, PHU_AGG, PIRRIG) Arguments Type Intent Optional Attributes Name type(DATA_COVER_t), intent(inout) :: DTCO type(GRID_t), intent(inout) :: G type(TEB_t), intent(inout) :: T type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_IRRIG_t), intent(inout) :: TIR type(DATA_ISBA_t), intent(inout) :: DTV type(GR_BIOG_t), intent(inout) :: GB type(DIAG_t), intent(inout) :: DK type(DIAG_EVAP_ISBA_t), intent(inout) :: DEK type(DIAG_MISC_ISBA_t), intent(inout) :: DMK type(ISBA_OPTIONS_t), intent(inout) :: GDO type(ISBA_S_t), intent(inout) :: S type(ISBA_K_t), intent(inout) :: K type(ISBA_P_t), intent(inout) :: P type(ISBA_PE_t), intent(inout) :: PEK character(len=*), intent(in) :: HIMPLICIT_WIND type(DATE_TIME), intent(in) :: TPTIME real, intent(in), DIMENSION(:) :: PTSUN real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPET_A_COEF real, intent(in), DIMENSION(:) :: PPEQ_A_COEF real, intent(in), DIMENSION(:) :: PPET_B_COEF real, intent(in), DIMENSION(:) :: PPEQ_B_COEF real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PALB_GD real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PCO2 real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZENITH real, intent(in), DIMENSION(:) :: PSW real, intent(in), DIMENSION(:) :: PLW real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PALBNIR_TVEG real, intent(in), DIMENSION(:) :: PALBVIS_TVEG real, intent(in), DIMENSION(:) :: PALBNIR_TSOIL real, intent(in), DIMENSION(:) :: PALBVIS_TSOIL real, intent(out), DIMENSION(:) :: PRN real, intent(out), DIMENSION(:) :: PH real, intent(out), DIMENSION(:) :: PLE real, intent(out), DIMENSION(:) :: PGFLUX real, intent(out), DIMENSION(:) :: PSFCO2 real, intent(out), DIMENSION(:) :: PEVAP real, intent(out), DIMENSION(:) :: PUW real, intent(out), DIMENSION(:) :: PRUNOFF real, intent(out), DIMENSION(:) :: PAC real, intent(out), DIMENSION(:) :: PQSAT real, intent(out), DIMENSION(:) :: PTSRAD real, intent(out), DIMENSION(:) :: PAC_AGG real, intent(out), DIMENSION(:) :: PHU_AGG real, intent(out), DIMENSION(:) :: PIRRIG","tags":"","loc":"module/modi_garden.html"},{"title":"MODI_TEB_VEG_PROPERTIES – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces TEB_VEG_PROPERTIES Interfaces interface public subroutine TEB_VEG_PROPERTIES(PMASK, IO, PEK, PDIR_SW, PSCA_SW, PSW_BANDS, KSW, PTS, PEMIS, PALB, PTA, PALBNIR_TVEG, PALBVIS_TVEG, PALBNIR_TSOIL, PALBVIS_TSOIL) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PMASK type(ISBA_OPTIONS_t), intent(inout) :: IO type(ISBA_PE_t), intent(inout) :: PEK real, intent(in), DIMENSION(:,:) :: PDIR_SW real, intent(in), DIMENSION(:,:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PSW_BANDS integer, intent(in) :: KSW real, intent(out), DIMENSION(:) :: PTS real, intent(out), DIMENSION(:) :: PEMIS real, intent(out), DIMENSION(:) :: PALB real, intent(in), optional DIMENSION(:) :: PTA real, intent(out), optional DIMENSION(:) :: PALBNIR_TVEG real, intent(out), optional DIMENSION(:) :: PALBVIS_TVEG real, intent(out), optional DIMENSION(:) :: PALBNIR_TSOIL real, intent(out), optional DIMENSION(:) :: PALBVIS_TSOIL","tags":"","loc":"module/modi_teb_veg_properties.html"},{"title":"MODI_ABOR1_SFX – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces ABOR1_SFX Interfaces interface public subroutine ABOR1_SFX(YTEXT) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: YTEXT","tags":"","loc":"module/modi_abor1_sfx.html"},{"title":"MODI_OL_READ_ATM – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces OL_READ_ATM Interfaces interface public subroutine OL_READ_ATM(HSURF_FILETYPE, HFORCING_FILETYPE, KFORC_STEP, PTA, PQA, PWIND, PDIR_SW, PSCA_SW, PLW, PSNOW, PRAIN, PPS, PCO2, PDIR, OLIMIT_QAIR) Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HSURF_FILETYPE character(len=6), intent(in) :: HFORCING_FILETYPE integer, intent(in) :: KFORC_STEP real, intent(inout), DIMENSION(:,:) :: PTA real, intent(inout), DIMENSION(:,:) :: PQA real, intent(inout), DIMENSION(:,:) :: PWIND real, intent(inout), DIMENSION(:,:) :: PDIR_SW real, intent(inout), DIMENSION(:,:) :: PSCA_SW real, intent(inout), DIMENSION(:,:) :: PLW real, intent(inout), DIMENSION(:,:) :: PSNOW real, intent(inout), DIMENSION(:,:) :: PRAIN real, intent(inout), DIMENSION(:,:) :: PPS real, intent(inout), DIMENSION(:,:) :: PCO2 real, intent(inout), DIMENSION(:,:) :: PDIR logical, intent(in) :: OLIMIT_QAIR","tags":"","loc":"module/modi_ol_read_atm.html"},{"title":"MODD_SURF_CONF – Town Energy Balance (TEB) model API docs","text":"Contents Variables CPROGNAME CSOFTWARE Variables Type Visibility Attributes Name Initial character(len=6), public :: CPROGNAME character(len=7), public :: CSOFTWARE = \"       \"","tags":"","loc":"module/modd_surf_conf.html"},{"title":"MODD_FORC_ATM – Town Energy Balance (TEB) model API docs","text":"Contents Variables CSV XDIR_ALB XSCA_ALB XEMIS XTSRAD XTSUN XZREF XUREF XTA XQA XRHOA XSV XU XV XDIR_SW XSCA_SW XSW_BANDS XZENITH XZENITH2 XAZIM XLW XPS XPA XZS XCO2 XSNOW XRAIN XSFTH XSFTQ XSFU XSFV XSFCO2 XSFTS XPEW_A_COEF XPEW_B_COEF XPET_A_COEF XPEQ_A_COEF XPET_B_COEF XPEQ_B_COEF XTSURF XZ0 XZ0H XQSURF Variables Type Visibility Attributes Name Initial character(len=6), public, DIMENSION(:), ALLOCATABLE :: CSV real, public, DIMENSION(:,:), ALLOCATABLE :: XDIR_ALB real, public, DIMENSION(:,:), ALLOCATABLE :: XSCA_ALB real, public, DIMENSION(:), ALLOCATABLE :: XEMIS real, public, DIMENSION(:), ALLOCATABLE :: XTSRAD real, public, DIMENSION(:), ALLOCATABLE :: XTSUN real, public, DIMENSION(:), ALLOCATABLE :: XZREF real, public, DIMENSION(:), ALLOCATABLE :: XUREF real, public, DIMENSION(:), ALLOCATABLE :: XTA real, public, DIMENSION(:), ALLOCATABLE :: XQA real, public, DIMENSION(:), ALLOCATABLE :: XRHOA real, public, DIMENSION(:,:), ALLOCATABLE :: XSV real, public, DIMENSION(:), ALLOCATABLE :: XU real, public, DIMENSION(:), ALLOCATABLE :: XV real, public, DIMENSION(:,:), ALLOCATABLE :: XDIR_SW real, public, DIMENSION(:,:), ALLOCATABLE :: XSCA_SW real, public, DIMENSION(:), ALLOCATABLE :: XSW_BANDS real, public, DIMENSION(:), ALLOCATABLE :: XZENITH real, public, DIMENSION(:), ALLOCATABLE :: XZENITH2 real, public, DIMENSION(:), ALLOCATABLE :: XAZIM real, public, DIMENSION(:), ALLOCATABLE :: XLW real, public, DIMENSION(:), ALLOCATABLE :: XPS real, public, DIMENSION(:), ALLOCATABLE :: XPA real, public, DIMENSION(:), ALLOCATABLE :: XZS real, public, DIMENSION(:), ALLOCATABLE :: XCO2 real, public, DIMENSION(:), ALLOCATABLE :: XSNOW real, public, DIMENSION(:), ALLOCATABLE :: XRAIN real, public, DIMENSION(:), ALLOCATABLE :: XSFTH real, public, DIMENSION(:), ALLOCATABLE :: XSFTQ real, public, DIMENSION(:), ALLOCATABLE :: XSFU real, public, DIMENSION(:), ALLOCATABLE :: XSFV real, public, DIMENSION(:), ALLOCATABLE :: XSFCO2 real, public, DIMENSION(:,:), ALLOCATABLE :: XSFTS real, public, DIMENSION(:), ALLOCATABLE :: XPEW_A_COEF real, public, DIMENSION(:), ALLOCATABLE :: XPEW_B_COEF real, public, DIMENSION(:), ALLOCATABLE :: XPET_A_COEF real, public, DIMENSION(:), ALLOCATABLE :: XPEQ_A_COEF real, public, DIMENSION(:), ALLOCATABLE :: XPET_B_COEF real, public, DIMENSION(:), ALLOCATABLE :: XPEQ_B_COEF real, public, DIMENSION(:), ALLOCATABLE :: XTSURF real, public, DIMENSION(:), ALLOCATABLE :: XZ0 real, public, DIMENSION(:), ALLOCATABLE :: XZ0H real, public, DIMENSION(:), ALLOCATABLE :: XQSURF","tags":"","loc":"module/modd_forc_atm.html"},{"title":"MODI_OL_TIME_INTERP_ATM – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces OL_TIME_INTERP_ATM Interfaces interface public subroutine OL_TIME_INTERP_ATM(KSURF_STEP, KNB_ATM, PTA1, PTA2, PQA1, PQA2, PWIND1, PWIND2, PDIR_SW1, PDIR_SW2, PSCA_SW1, PSCA_SW2, PLW1, PLW2, PSNOW2, PRAIN2, PPS1, PPS2, PCO21, PCO22, PDIR1, PDIR2, PZEN, PSUMZEN) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KSURF_STEP integer, intent(in) :: KNB_ATM real, intent(in), DIMENSION(:) :: PTA1 real, intent(in), DIMENSION(:) :: PTA2 real, intent(in), DIMENSION(:) :: PQA1 real, intent(in), DIMENSION(:) :: PQA2 real, intent(in), DIMENSION(:) :: PWIND1 real, intent(in), DIMENSION(:) :: PWIND2 real, intent(in), DIMENSION(:) :: PDIR_SW1 real, intent(in), DIMENSION(:) :: PDIR_SW2 real, intent(in), DIMENSION(:) :: PSCA_SW1 real, intent(in), DIMENSION(:) :: PSCA_SW2 real, intent(in), DIMENSION(:) :: PLW1 real, intent(in), DIMENSION(:) :: PLW2 real, intent(in), DIMENSION(:) :: PSNOW2 real, intent(in), DIMENSION(:) :: PRAIN2 real, intent(in), DIMENSION(:) :: PPS1 real, intent(in), DIMENSION(:) :: PPS2 real, intent(in), DIMENSION(:) :: PCO21 real, intent(in), DIMENSION(:) :: PCO22 real, intent(in), DIMENSION(:) :: PDIR1 real, intent(in), DIMENSION(:) :: PDIR2 real, intent(in), DIMENSION(:) :: PZEN real, intent(in), DIMENSION(:) :: PSUMZEN","tags":"","loc":"module/modi_ol_time_interp_atm.html"},{"title":"MODI_OL_ALLOC_ATM – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces OL_ALLOC_ATM Interfaces interface public subroutine OL_ALLOC_ATM(KNI, KBANDS, KSCAL) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KNI integer, intent(in) :: KBANDS integer, intent(in) :: KSCAL","tags":"","loc":"module/modi_ol_alloc_atm.html"},{"title":"MODD_WRF_TEB_DRIVER – Town Energy Balance (TEB) model API docs","text":"Contents Subroutines TEB_DRIVER Subroutines public subroutine TEB_DRIVER (num_roof_layers, num_wall_layers, num_road_layers, num_snow_layers, num_floor_layers, ZLON, ZLAT, IYEAR, IMONTH, IDAY, ZTIME_START, XTSTEP_SURF, XPS, XPA, XTA, ZQA_KGKG, XRHOA, XCO2, XLW, XRAIN, XSNOW, ZZREF, ZDIR_SW, ZSCA_SW, ZWIND, ZDIR, ZT_CANYON, ZQ_CANYON, ZTI_BLD, ZT_ROOF, ZT_ROAD, ZT_WALL_A, ZT_WALL_B, ZWS_ROOF, ZWS_ROAD, ZWSNOW_ROOF, ZTSNOW_ROOF, ZRSNOW_ROOF, ZASNOW_ROOF, ZTSSNOW_ROOF, ZESNOW_ROOF, ZWSNOW_ROAD, ZTSNOW_ROAD, ZRSNOW_ROAD, ZASNOW_ROAD, ZTSSNOW_ROAD, ZESNOW_ROAD, ZAUX_MAX, ZT_FLOOR, ZT_MASS, ZT_WIN1, ZT_WIN2, ZQI_BLD, ZTHER_PRODC_DAY, LGARDEN, LGREENROOF, LSOLAR_PANEL, HZ0H, HROAD_DIR, HWALL_OPT, HSNOW_ROAD, HSNOW_ROOF, ZH_TRAFFIC, ZLE_TRAFFIC, ZH_INDUSTRY, ZLE_INDUSTRY, ZZ0, ZBLD, ZGARDEN, ZROAD_DIR, ZFRAC_GR, ZBLD_HEIGHT, ZWALL_O_HOR, ZALB_ROOF, ZEMIS_ROOF, ZHC_ROOF, ZTC_ROOF, ZD_ROOF, ZALB_ROAD, ZEMIS_ROAD, ZHC_ROAD, ZTC_ROAD, ZD_ROAD, ZALB_WALL, ZEMIS_WALL, ZHC_WALL, ZTC_WALL, ZD_WALL, CCOOL_COIL, ZF_WATER_COND, CHEAT_COIL, ZNATVENT, XF_WASTE_CAN, ZQIN, ZQIN_FRAD, ZQIN_FLAT, ZGR, ZEFF_HEAT, ZINF, ZTCOOL_TARGET, ZTHEAT_TARGET, ZHR_TARGET, ZV_VENT, ZCAP_SYS_HEAT, XCAP_SYS_RAT, ZT_ADP, XM_SYS_RAT, ZCOP_RAT, ZHC_FLOOR, ZTC_FLOOR, ZD_FLOOR, ZSHGC, ZSHGC_SH, ZSHADE, CBEM, CCH_BEM, ZROUGH_ROOF, ZROUGH_WALL, LPAR_RD_IRRIG, ZRD_START_MONTH, ZRD_END_MONTH, ZRD_START_HOUR, ZRD_END_HOUR, ZRD_24H_IRRIG, ZEMIS_PANEL, ZALB_PANEL, ZEFF_PANEL, ZFRAC_PANEL, ZRESIDENTIAL, ZDT_RES, ZDT_OFF, ZFLOOR_HEIGHT, PU_WIN, ZHVAC_COOL_TOT, ZHVAC_HEAT_TOT, ZTHER_PROD_PANEL, ZPHOT_PROD_PANEL, XU_CANYON, ZRN_TOWN, ZH_TOWN, ZLE_TOWN, ZGFLUX_TOWN, ZEVAP_TOWN, ZUSTAR_TOWN, ZTS_TOWN, ZEMIS_TOWN, ZALB_TOWN, ZDIR_CANYON, ZQ_TOWN) Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_roof_layers integer, intent(in) :: num_wall_layers integer, intent(in) :: num_road_layers integer, intent(in) :: num_snow_layers integer, intent(in) :: num_floor_layers real, intent(in), DIMENSION(1) :: ZLON real, intent(in), DIMENSION(1) :: ZLAT integer, intent(in) :: IYEAR integer, intent(in) :: IMONTH integer, intent(in) :: IDAY real, intent(in) :: ZTIME_START real, intent(in) :: XTSTEP_SURF real, intent(in), DIMENSION(1) :: XPS real, intent(in), DIMENSION(1) :: XPA real, intent(in), DIMENSION(1) :: XTA real, intent(in), DIMENSION(1) :: ZQA_KGKG real, intent(in), DIMENSION(1) :: XRHOA real, intent(in), DIMENSION(1) :: XCO2 real, intent(in), DIMENSION(1) :: XLW real, intent(in), DIMENSION(1) :: XRAIN real, intent(in), DIMENSION(1) :: XSNOW real, intent(in), DIMENSION(1) :: ZZREF real, intent(in), DIMENSION(1,1) :: ZDIR_SW real, intent(in), DIMENSION(1,1) :: ZSCA_SW real, intent(in), DIMENSION(1) :: ZWIND real, intent(in), DIMENSION(1) :: ZDIR real, intent(inout), DIMENSION(1) :: ZT_CANYON real, intent(inout), DIMENSION(1) :: ZQ_CANYON real, intent(inout), DIMENSION(1) :: ZTI_BLD real, intent(inout), DIMENSION(1, num_roof_layers) :: ZT_ROOF real, intent(inout), DIMENSION(1, num_road_layers) :: ZT_ROAD real, intent(inout), DIMENSION(1, num_wall_layers) :: ZT_WALL_A real, intent(inout), DIMENSION(1, num_wall_layers) :: ZT_WALL_B real, intent(inout), DIMENSION(1) :: ZWS_ROOF real, intent(inout), DIMENSION(1) :: ZWS_ROAD real, intent(inout), DIMENSION(1, num_snow_layers) :: ZWSNOW_ROOF real, intent(inout), DIMENSION(1, num_snow_layers) :: ZTSNOW_ROOF real, intent(inout), DIMENSION(1, num_snow_layers) :: ZRSNOW_ROOF real, intent(inout), DIMENSION(1) :: ZASNOW_ROOF real, intent(inout), DIMENSION(1) :: ZTSSNOW_ROOF real, intent(inout), DIMENSION(1) :: ZESNOW_ROOF real, intent(inout), DIMENSION(1, num_snow_layers) :: ZWSNOW_ROAD real, intent(inout), DIMENSION(1, num_snow_layers) :: ZTSNOW_ROAD real, intent(inout), DIMENSION(1, num_snow_layers) :: ZRSNOW_ROAD real, intent(inout), DIMENSION(1) :: ZASNOW_ROAD real, intent(inout), DIMENSION(1) :: ZTSSNOW_ROAD real, intent(inout), DIMENSION(1) :: ZESNOW_ROAD real, intent(inout), DIMENSION(1) :: ZAUX_MAX real, intent(inout), DIMENSION(1, num_floor_layers) :: ZT_FLOOR real, intent(inout), DIMENSION(1, num_floor_layers) :: ZT_MASS real, intent(inout), DIMENSION(1) :: ZT_WIN1 real, intent(inout), DIMENSION(1) :: ZT_WIN2 real, intent(inout), DIMENSION(1) :: ZQI_BLD real, intent(inout), DIMENSION(1) :: ZTHER_PRODC_DAY logical, intent(in) :: LGARDEN logical, intent(in) :: LGREENROOF logical, intent(in) :: LSOLAR_PANEL character(len=6), intent(in) :: HZ0H character(len=4), intent(in) :: HROAD_DIR character(len=4), intent(in) :: HWALL_OPT character(len=4), intent(in) :: HSNOW_ROAD character(len=4), intent(in) :: HSNOW_ROOF real, intent(in), DIMENSION(1) :: ZH_TRAFFIC real, intent(in), DIMENSION(1) :: ZLE_TRAFFIC real, intent(in), DIMENSION(1) :: ZH_INDUSTRY real, intent(in), DIMENSION(1) :: ZLE_INDUSTRY real, intent(in), DIMENSION(1) :: ZZ0 real, intent(in), DIMENSION(1) :: ZBLD real, intent(in), DIMENSION(1) :: ZGARDEN real, intent(in), DIMENSION(1) :: ZROAD_DIR real, intent(in), DIMENSION(1) :: ZFRAC_GR real, intent(in), DIMENSION(1) :: ZBLD_HEIGHT real, intent(in), DIMENSION(1) :: ZWALL_O_HOR real, intent(in), DIMENSION(1) :: ZALB_ROOF real, intent(in), DIMENSION(1) :: ZEMIS_ROOF real, intent(in), DIMENSION(1, num_roof_layers) :: ZHC_ROOF real, intent(in), DIMENSION(1, num_roof_layers) :: ZTC_ROOF real, intent(in), DIMENSION(1, num_roof_layers) :: ZD_ROOF real, intent(in), DIMENSION(1) :: ZALB_ROAD real, intent(in), DIMENSION(1) :: ZEMIS_ROAD real, intent(in), DIMENSION(1, num_road_layers) :: ZHC_ROAD real, intent(in), DIMENSION(1, num_road_layers) :: ZTC_ROAD real, intent(in), DIMENSION(1, num_road_layers) :: ZD_ROAD real, intent(in), DIMENSION(1) :: ZALB_WALL real, intent(in), DIMENSION(1) :: ZEMIS_WALL real, intent(in), DIMENSION(1, num_wall_layers) :: ZHC_WALL real, intent(in), DIMENSION(1, num_wall_layers) :: ZTC_WALL real, intent(in), DIMENSION(1, num_wall_layers) :: ZD_WALL character(len=12), intent(in) :: CCOOL_COIL real, intent(in), DIMENSION(1) :: ZF_WATER_COND character(len=6), intent(in) :: CHEAT_COIL real, intent(in), DIMENSION(1) :: ZNATVENT real, intent(in), DIMENSION(1) :: XF_WASTE_CAN real, intent(in), DIMENSION(1) :: ZQIN real, intent(in), DIMENSION(1) :: ZQIN_FRAD real, intent(in), DIMENSION(1) :: ZQIN_FLAT real, intent(in), DIMENSION(1) :: ZGR real, intent(in), DIMENSION(1) :: ZEFF_HEAT real, intent(in), DIMENSION(1) :: ZINF real, intent(in), DIMENSION(1) :: ZTCOOL_TARGET real, intent(in), DIMENSION(1) :: ZTHEAT_TARGET real, intent(in), DIMENSION(1) :: ZHR_TARGET real, intent(in), DIMENSION(1) :: ZV_VENT real, intent(in), DIMENSION(1) :: ZCAP_SYS_HEAT real, intent(in), DIMENSION(1) :: XCAP_SYS_RAT real, intent(in), DIMENSION(1) :: ZT_ADP real, intent(in), DIMENSION(1) :: XM_SYS_RAT real, intent(in), DIMENSION(1) :: ZCOP_RAT real, intent(in), DIMENSION(1, num_floor_layers) :: ZHC_FLOOR real, intent(in), DIMENSION(1, num_floor_layers) :: ZTC_FLOOR real, intent(in), DIMENSION(1, num_floor_layers) :: ZD_FLOOR real, intent(in), DIMENSION(1) :: ZSHGC real, intent(in), DIMENSION(1) :: ZSHGC_SH real, intent(in), DIMENSION(1) :: ZSHADE character(len=3), intent(in) :: CBEM character(len=5), intent(in) :: CCH_BEM real, intent(in), DIMENSION(1) :: ZROUGH_ROOF real, intent(in), DIMENSION(1) :: ZROUGH_WALL logical, intent(in) :: LPAR_RD_IRRIG real, intent(in), DIMENSION(1) :: ZRD_START_MONTH real, intent(in), DIMENSION(1) :: ZRD_END_MONTH real, intent(in), DIMENSION(1) :: ZRD_START_HOUR real, intent(in), DIMENSION(1) :: ZRD_END_HOUR real, intent(in), DIMENSION(1) :: ZRD_24H_IRRIG real, intent(in), DIMENSION(1) :: ZEMIS_PANEL real, intent(in), DIMENSION(1) :: ZALB_PANEL real, intent(in), DIMENSION(1) :: ZEFF_PANEL real, intent(in), DIMENSION(1) :: ZFRAC_PANEL real, intent(in), DIMENSION(1) :: ZRESIDENTIAL real, intent(in) :: ZDT_RES real, intent(in) :: ZDT_OFF real, intent(in), DIMENSION(1) :: ZFLOOR_HEIGHT real, intent(in), DIMENSION(1) :: PU_WIN real, intent(out), DIMENSION(1) :: ZHVAC_COOL_TOT real, intent(out), DIMENSION(1) :: ZHVAC_HEAT_TOT real, intent(out), DIMENSION(1) :: ZTHER_PROD_PANEL real, intent(out), DIMENSION(1) :: ZPHOT_PROD_PANEL real, intent(out), DIMENSION(1) :: XU_CANYON real, intent(out), DIMENSION(1) :: ZRN_TOWN real, intent(out), DIMENSION(1) :: ZH_TOWN real, intent(out), DIMENSION(1) :: ZLE_TOWN real, intent(out), DIMENSION(1) :: ZGFLUX_TOWN real, intent(out), DIMENSION(1) :: ZEVAP_TOWN real, intent(out), DIMENSION(1) :: ZUSTAR_TOWN real, intent(out), DIMENSION(1) :: ZTS_TOWN real, intent(out), DIMENSION(1) :: ZEMIS_TOWN real, intent(out), DIMENSION(1) :: ZALB_TOWN real, intent(out), DIMENSION(1) :: ZDIR_CANYON real, intent(out), DIMENSION(1) :: ZQ_TOWN","tags":"","loc":"module/modd_wrf_teb_driver.html"},{"title":"MODI_OL_READ_ATM_ASCII – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces OL_READ_ATM_ASCII Interfaces interface public subroutine OL_READ_ATM_ASCII(KFORC_STEP, PTA, PQA, PWIND, PDIR_SW, PSCA_SW, PLW, PSNOW, PRAIN, PPS, PCO2, PDIR) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KFORC_STEP real, intent(out), DIMENSION(:,:) :: PTA real, intent(out), DIMENSION(:,:) :: PQA real, intent(out), DIMENSION(:,:) :: PWIND real, intent(out), DIMENSION(:,:) :: PDIR_SW real, intent(out), DIMENSION(:,:) :: PSCA_SW real, intent(out), DIMENSION(:,:) :: PLW real, intent(out), DIMENSION(:,:) :: PSNOW real, intent(out), DIMENSION(:,:) :: PRAIN real, intent(out), DIMENSION(:,:) :: PPS real, intent(out), DIMENSION(:,:) :: PCO2 real, intent(out), DIMENSION(:,:) :: PDIR","tags":"","loc":"module/modi_ol_read_atm_ascii.html"},{"title":"MODI_CLOSE_FILE – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces CLOSE_FILE Interfaces interface public subroutine CLOSE_FILE(HPROGRAM, KUNIT) Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HPROGRAM integer, intent(in) :: KUNIT","tags":"","loc":"module/modi_close_file.html"},{"title":"MODI_OPEN_CLOSE_BIN_ASC_FORC – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces OPEN_CLOSE_BIN_ASC_FORC Interfaces interface public subroutine OPEN_CLOSE_BIN_ASC_FORC(HACTION, HFORCING, HACTION2) Arguments Type Intent Optional Attributes Name character(len=5), intent(in) :: HACTION character(len=6), intent(in) :: HFORCING character(len=1), intent(in) :: HACTION2","tags":"","loc":"module/modi_open_close_bin_asc_forc.html"},{"title":"MODI_READ_SURF_ATM – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces READ_SURF_ATM Interfaces interface public subroutine READ_SURF_ATM(HPROGRAM, PFIELD, KFORC_STEP, KNB, KINIT) Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HPROGRAM real, intent(out), DIMENSION(:,:) :: PFIELD integer, intent(in) :: KFORC_STEP integer, intent(in) :: KNB integer, intent(in) :: KINIT","tags":"","loc":"module/modi_read_surf_atm.html"},{"title":"MODD_ARCH – Town Energy Balance (TEB) model API docs","text":"Contents Variables LITTLE_ENDIAN_ARCH Variables Type Visibility Attributes Name Initial logical, public :: LITTLE_ENDIAN_ARCH = .FALSE.","tags":"","loc":"module/modd_arch.html"},{"title":"MODE_CHAR2REAL – Town Energy Balance (TEB) model API docs","text":"Uses YOMHOOK MODI_ABOR1_SFX PARKIND1 Contents Interfaces ASSIGNMENT (=) Subroutines CHAR_TO_REAL Interfaces public interface ASSIGNMENT (=) public subroutine CHAR_TO_REAL (KOUT, HSTR) Arguments Type Intent Optional Attributes Name real, intent(out), DIMENSION(SIZE(HSTR)) :: KOUT character(len=*), intent(in), DIMENSION(:) :: HSTR Subroutines public subroutine CHAR_TO_REAL (KOUT, HSTR) Arguments Type Intent Optional Attributes Name real, intent(out), DIMENSION(SIZE(HSTR)) :: KOUT character(len=*), intent(in), DIMENSION(:) :: HSTR","tags":"","loc":"module/mode_char2real.html"},{"title":"MODI_SUNPOS – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces SUNPOS Interfaces interface public subroutine SUNPOS(KYEAR, KMONTH, KDAY, PTIME, PLON, PLAT, PTSUN, PZENITH, PAZIMSOL) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KYEAR integer, intent(in) :: KMONTH integer, intent(in) :: KDAY real, intent(in) :: PTIME real, intent(in), DIMENSION(:) :: PLON real, intent(in), DIMENSION(:) :: PLAT real, intent(out), DIMENSION(:) :: PTSUN real, intent(out), DIMENSION(:) :: PZENITH real, intent(out), DIMENSION(:) :: PAZIMSOL","tags":"","loc":"module/modi_sunpos.html"},{"title":"MODI_CIRCUMSOLAR_RAD – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces CIRCUMSOLAR_RAD Interfaces interface public subroutine CIRCUMSOLAR_RAD(PDIR_SW, PSCA_SW, PZENITH, PF1_o_B) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PDIR_SW real, intent(in), DIMENSION(:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PZENITH real, intent(out), DIMENSION(:) :: PF1_o_B","tags":"","loc":"module/modi_circumsolar_rad.html"},{"title":"MODD_CH_TEB_n – Town Energy Balance (TEB) model API docs","text":"Uses MODD_SV_n PARKIND1 YOMHOOK Contents Derived Types CH_TEB_t Subroutines CH_TEB_INIT Derived Types type, public :: CH_TEB_t Components Type Visibility Attributes Name Initial character(len=28), public :: CCHEM_SURF_FILE character(len=6), public :: CCH_DRY_DEP real, public, DIMENSION(:,:), POINTER :: XDEP real, public, DIMENSION(:,:), POINTER :: XSOILRC_SO2 real, public, DIMENSION(:,:), POINTER :: XSOILRC_O3 logical, public :: LCH_BIO_FLUX logical, public :: LCH_NO_FLUX type(SV_t), public :: SVT character(len=6), public, DIMENSION(:), POINTER :: CCH_NAMES character(len=6), public, DIMENSION(:), POINTER :: CAER_NAMES character(len=6), public, DIMENSION(:), POINTER :: CDSTNAMES character(len=6), public, DIMENSION(:), POINTER :: CSLTNAMES Subroutines public subroutine CH_TEB_INIT (YCH_TEB) Arguments Type Intent Optional Attributes Name type( CH_TEB_t ), intent(inout) :: YCH_TEB","tags":"","loc":"module/modd_ch_teb_n.html"},{"title":"MODD_CO2V_PAR – Town Energy Balance (TEB) model API docs","text":"Uses MODD_DATA_COVER_PAR Contents Variables XSPIN_CO2 XMCO2 XMC XPARCF XRACCF XPCCO2 XIAOPT XDSPOPT XXGT XDIFRACF XXBOMEGA XRDCF XCONDCTMIN XCONDSTMIN XANFMINIT XAIRTOH2O XCO2TOH2O XAW XASW XBW XDMAXN XDMAXX XTOPT XFZERO1 XFZERO2 XFZEROTROP XEPSO XGAMM XQDGAMM XQDGMES XT1GMES XT2GMES XQDAMAX XT1AMAX XT2AMAX XAH XBH XRESPFACTOR_NIT XCA_NIT XCC_NIT XCC_NITRO XBIOMASST_LIM XCOEFF_MAINT_RESP_ZERO XSLOPE_MAINT_RESP XTAU_WOOD XCN XLC XFRAC_LITTER XTAU_LITTER XFRAC_SOILCARB XTAU_SOILCARB XSSA_SUP XSSA_INF XSSA_SUP_PIR XSSA_INF_PIR XK_SUP XXSI_SUP XK_INF XXSI_INF XLAI_SHADE XXB_SUP XXB_INF XDILUDEC XAMAX ITRANSFERT_ESG Variables Type Visibility Attributes Name Initial real, public, parameter :: XSPIN_CO2 = 0.1 real, public, parameter :: XMCO2 = 44.0E-3 real, public, parameter :: XMC = 12.0E-3 real, public, parameter :: XPARCF = 0.48 real, public, parameter :: XRACCF = 1.00 real, public, parameter :: XPCCO2 = 0.40 real, public, parameter :: XIAOPT = 500. real, public, parameter :: XDSPOPT = 0.0 real, public, parameter :: XXGT = 0.5 real, public, parameter :: XDIFRACF = 0.25 real, public, parameter :: XXBOMEGA = 0.9442719 real, public, parameter :: XRDCF = 1./9. real, public, parameter :: XCONDCTMIN = 0.0002 real, public, parameter :: XCONDSTMIN = 1.0E-5 real, public, parameter :: XANFMINIT = 1.E-8 real, public, parameter :: XAIRTOH2O = 1.606 real, public, parameter :: XCO2TOH2O = 1.6 real, public, parameter :: XAW = 4.7 real, public, parameter :: XASW = 2.8 real, public, parameter :: XBW = 7.0 real, public, parameter :: XDMAXN = 3.0E-2 real, public, parameter :: XDMAXX = 3.0E-1 real, public, parameter, DIMENSION(2) :: XTOPT = (/25.0, 35.0/) real, public, parameter, DIMENSION(2) :: XFZERO1 = (/0.85, 0.50/) real, public, parameter, DIMENSION(2) :: XFZERO2 = (/0.95, 0.60/) real, public, parameter, DIMENSION(2) :: XFZEROTROP = (/0.74, 0.74/) real, public, parameter, DIMENSION(2) :: XEPSO = (/0.017E-6, 0.014E-6/) real, public, parameter, DIMENSION(2) :: XGAMM = (/45.0, 2.8/) real, public, parameter, DIMENSION(2) :: XQDGAMM = (/1.5, 1.5/) real, public, parameter, DIMENSION(2) :: XQDGMES = (/2.0, 2.0/) real, public, parameter, DIMENSION(2) :: XT1GMES = (/5.0, 13.0/) real, public, parameter, DIMENSION(2) :: XT2GMES = (/36.0, 36.0/) real, public, parameter, DIMENSION(2) :: XQDAMAX = (/2.0, 2.0/) real, public, parameter, DIMENSION(2) :: XT1AMAX = (/8.0, 13.0/) real, public, parameter, DIMENSION(2) :: XT2AMAX = (/38.0, 38.0/) real, public, parameter, DIMENSION(2) :: XAH = (/2.381, 5.323/) real, public, parameter, DIMENSION(2) :: XBH = (/-0.6103, -0.8929/) real, public, parameter :: XRESPFACTOR_NIT = 1.16E-7 real, public, parameter :: XCA_NIT = 0.38 real, public, parameter :: XCC_NIT = 0.753846 real, public, parameter :: XCC_NITRO = 0.31425531725 real, public, parameter :: XBIOMASST_LIM = 4.7540042445E-2 real, public, parameter :: XCOEFF_MAINT_RESP_ZERO = 1.19E-4/86400. real, public, parameter :: XSLOPE_MAINT_RESP = 0.16 real, public, parameter, DIMENSION(NVEGTYPE_OLD) :: XTAU_WOOD = (/0., 0., 0., 40.*365.*86400., 50.*365.*86400., 30.*365.*86400., 0., 0., 0., 0., 0., 0., 40.*365.*86400., 40.*365.*86400., 50.*365.*86400., 40.*365.*86400., 50.*365.*86400., 0., 40.*365.*86400./) real, public, DIMENSION(6) :: XCN real, public, DIMENSION(6) :: XLC real, public, DIMENSION(6,2) :: XFRAC_LITTER real, public, DIMENSION(2) :: XTAU_LITTER real, public, DIMENSION(2,3,6) :: XFRAC_SOILCARB real, public, DIMENSION(3) :: XTAU_SOILCARB real, public, parameter :: XSSA_SUP = 0.15 real, public, parameter :: XSSA_INF = 0.15 real, public, parameter :: XSSA_SUP_PIR = 0.80 real, public, parameter :: XSSA_INF_PIR = 0.80 real, public, parameter :: XK_SUP = 2. real, public, parameter :: XXSI_SUP = 2. real, public, parameter :: XK_INF = 1. real, public, parameter :: XXSI_INF = 7. real, public, parameter, DIMENSION(NVEGTYPE_OLD) :: XLAI_SHADE = (/0., 0., 0., 2., 3., 6., 2., 2., 2., 2., 2., 2., 2., 2., 3., 2., 3., 2., 2./) real, public, parameter, DIMENSION(NVEGTYPE_OLD) :: XXB_SUP = (/1., 1., 1., 1., 2., 3., 2., 2., 2., 2., 2., 2., 1., 1., 2., 1., 2., 2., 1./) real, public, parameter, DIMENSION(NVEGTYPE_OLD) :: XXB_INF = (/1., 1., 1., 4., 2., 4., 1., 1.5, 1.5, 1., 1., 1., 4., 4., 2., 4., 2., 1., 4./) real, public, parameter, DIMENSION(NVEGTYPE_OLD) :: XDILUDEC = (/0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 1., 0., 0., 1., 1., 0., 1./) real, public, parameter, DIMENSION(NVEGTYPE_OLD) :: XAMAX = (/1., 1., 1., 1.3E-6, 1.4E-6, 0.484E-6, 2.2E-6, 1.7E-6, 1.7E-6, 1.7E-6, 1.7E-6, 1.7E-6, 0.9E-6, 1.3E-6, 1.4E-6, 1.3E-6, 0.9E-6, 1.7E-6, 1.2E-6/) integer, public, parameter, DIMENSION(NVEGTYPE_ECOSG) :: ITRANSFERT_ESG = (/1, 2, 3, 16, 4, 13, 14, 6, 5, 15, 17, 19, 18, 10, 11, 7, 7, 8, 4, 12/)","tags":"","loc":"module/modd_co2v_par.html"},{"title":"MODD_DUMMY_SURF_FIELDS_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types DUMMY_SURF_FIELDS_t Subroutines DUMMY_SURF_FIELDS_INIT Derived Types type, public :: DUMMY_SURF_FIELDS_t Components Type Visibility Attributes Name Initial integer, public :: NDUMMY_NBR character(len=3), public, DIMENSION(:), POINTER :: CDUMMY_AREA character(len=20), public, DIMENSION(:), POINTER :: CDUMMY_NAME real, public, DIMENSION(:,:), POINTER :: XDUMMY_FIELDS Subroutines public subroutine DUMMY_SURF_FIELDS_INIT (YDUMMY_SURF_FIELDS) Arguments Type Intent Optional Attributes Name type( DUMMY_SURF_FIELDS_t ), intent(inout) :: YDUMMY_SURF_FIELDS","tags":"","loc":"module/modd_dummy_surf_fields_n.html"},{"title":"MODI_CLOSE_NAMELIST – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces CLOSE_NAMELIST Interfaces interface public subroutine CLOSE_NAMELIST(HPROGRAM, KLUNAM) Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HPROGRAM integer, intent(in) :: KLUNAM","tags":"","loc":"module/modi_close_namelist.html"},{"title":"MODI_TEB – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces TEB Interfaces interface public subroutine TEB(TOP, T, BOP, B, TIR, DMT, HIMPLICIT_WIND, PTSUN, PT_CANYON, PQ_CANYON, PU_CANYON, PT_LOWCAN, PQ_LOWCAN, PU_LOWCAN, PZ_LOWCAN, PPEW_A_COEF, PPEW_B_COEF, PPEW_A_COEF_LOWCAN, PPEW_B_COEF_LOWCAN, PPS, PPA, PEXNS, PEXNA, PTA, PQA, PRHOA, PLW_RAD, PRR, PSR, PZREF, PUREF, PVMOD, PH_TRAFFIC, PLE_TRAFFIC, PTSTEP, PDF_RF, PDN_RF, PDF_RD, PDN_RD, PQSAT_RF, PQSAT_RD, PDELT_RF, PDELT_RD, PTS_GARDEN, PLEW_RF, PUW_GR, PLEW_RD, PLE_WL_A, PLE_WL_B, PRNSN_RF, PHSN_RF, PLESN_RF, PGSN_RF, PMELT_RF, PRN_GR, PH_GR, PLE_GR, PGFLUX_GR, PDRAIN_GR, PRUNOFF_GR, PRNSN_RD, PHSN_RD, PLESN_RD, PGSN_RD, PMELT_RD, PUW_RD, PUW_RF, PDUWDU_RD, PDUWDU_RF, PUSTAR_TWN, PCD, PCDN, PCH_TWN, PRI_TWN, PRESA_TWN, PAC_RF, PAC_RD, PAC_WL, PAC_TOP, PAC_GARDEN, PAC_RF_WAT, PAC_RD_WAT, PLW_WA_TO_WB, PLW_WA_TO_R, PLW_WB_TO_R, PLW_WA_TO_NR, PLW_WB_TO_NR, PLW_R_TO_WA, PLW_R_TO_WB, PLW_G_TO_WA, PLW_G_TO_WB, PLW_S_TO_WA, PLW_S_TO_WB, PLW_S_TO_R, PLW_S_TO_NR, PLW_NR_TO_WA, PLW_NR_TO_WB, PLW_NR_TO_WIN, PLW_WA_TO_WIN, PLW_WB_TO_WIN, PLW_G_TO_WIN, PLW_R_TO_WIN, PLW_S_TO_WIN, PLW_WIN_TO_WA, PLW_WIN_TO_WB, PLW_WIN_TO_R, PLW_WIN_TO_NR, KDAY, PEMIT_LW_FAC, PEMIT_LW_RD, PT_RAD_IND, PHU_BLD, PTIME, PE_SHADING) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_OPTIONS_t), intent(inout) :: BOP type(BEM_t), intent(inout) :: B type(TEB_IRRIG_t), intent(inout) :: TIR type(DIAG_MISC_TEB_t), intent(inout) :: DMT character(len=*), intent(in) :: HIMPLICIT_WIND real, intent(in), DIMENSION(:) :: PTSUN real, intent(inout), DIMENSION(:) :: PT_CANYON real, intent(inout), DIMENSION(:) :: PQ_CANYON real, intent(in), DIMENSION(:) :: PU_CANYON real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PU_LOWCAN real, intent(in), DIMENSION(:) :: PZ_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPEW_A_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_B_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PPA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PH_TRAFFIC real, intent(in), DIMENSION(:) :: PLE_TRAFFIC real, intent(in) :: PTSTEP real, intent(inout), DIMENSION(:) :: PDF_RF real, intent(inout), DIMENSION(:) :: PDN_RF real, intent(inout), DIMENSION(:) :: PDF_RD real, intent(inout), DIMENSION(:) :: PDN_RD real, intent(out), DIMENSION(:) :: PQSAT_RF real, intent(out), DIMENSION(:) :: PQSAT_RD real, intent(out), DIMENSION(:) :: PDELT_RF real, intent(out), DIMENSION(:) :: PDELT_RD real, intent(in), DIMENSION(:) :: PTS_GARDEN real, intent(out), DIMENSION(:) :: PLEW_RF real, intent(in), DIMENSION(:) :: PUW_GR real, intent(out), DIMENSION(:) :: PLEW_RD real, intent(out), DIMENSION(:) :: PLE_WL_A real, intent(out), DIMENSION(:) :: PLE_WL_B real, intent(out), DIMENSION(:) :: PRNSN_RF real, intent(out), DIMENSION(:) :: PHSN_RF real, intent(out), DIMENSION(:) :: PLESN_RF real, intent(out), DIMENSION(:) :: PGSN_RF real, intent(out), DIMENSION(:) :: PMELT_RF real, intent(in), DIMENSION(:) :: PRN_GR real, intent(in), DIMENSION(:) :: PH_GR real, intent(in), DIMENSION(:) :: PLE_GR real, intent(in), DIMENSION(:) :: PGFLUX_GR real, intent(in), DIMENSION(:) :: PDRAIN_GR real, intent(in), DIMENSION(:) :: PRUNOFF_GR real, intent(out), DIMENSION(:) :: PRNSN_RD real, intent(out), DIMENSION(:) :: PHSN_RD real, intent(out), DIMENSION(:) :: PLESN_RD real, intent(out), DIMENSION(:) :: PGSN_RD real, intent(out), DIMENSION(:) :: PMELT_RD real, intent(out), DIMENSION(:) :: PUW_RD real, intent(out), DIMENSION(:) :: PUW_RF real, intent(out), DIMENSION(:) :: PDUWDU_RD real, intent(out), DIMENSION(:) :: PDUWDU_RF real, intent(out), DIMENSION(:) :: PUSTAR_TWN real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN real, intent(out), DIMENSION(:) :: PCH_TWN real, intent(out), DIMENSION(:) :: PRI_TWN real, intent(out), DIMENSION(:) :: PRESA_TWN real, intent(out), DIMENSION(:) :: PAC_RF real, intent(inout), DIMENSION(:) :: PAC_RD real, intent(out), DIMENSION(:) :: PAC_WL real, intent(out), DIMENSION(:) :: PAC_TOP real, intent(in), DIMENSION(:) :: PAC_GARDEN real, intent(out), DIMENSION(:) :: PAC_RF_WAT real, intent(out), DIMENSION(:) :: PAC_RD_WAT real, intent(in), DIMENSION(:) :: PLW_WA_TO_WB real, intent(in), DIMENSION(:) :: PLW_WA_TO_R real, intent(in), DIMENSION(:) :: PLW_WB_TO_R real, intent(in), DIMENSION(:) :: PLW_WA_TO_NR real, intent(in), DIMENSION(:) :: PLW_WB_TO_NR real, intent(in), DIMENSION(:) :: PLW_R_TO_WA real, intent(in), DIMENSION(:) :: PLW_R_TO_WB real, intent(in), DIMENSION(:) :: PLW_G_TO_WA real, intent(in), DIMENSION(:) :: PLW_G_TO_WB real, intent(in), DIMENSION(:) :: PLW_S_TO_WA real, intent(in), DIMENSION(:) :: PLW_S_TO_WB real, intent(in), DIMENSION(:) :: PLW_S_TO_R real, intent(in), DIMENSION(:) :: PLW_S_TO_NR real, intent(in), DIMENSION(:) :: PLW_NR_TO_WA real, intent(in), DIMENSION(:) :: PLW_NR_TO_WB real, intent(in), DIMENSION(:) :: PLW_NR_TO_WIN real, intent(in), DIMENSION(:) :: PLW_WA_TO_WIN real, intent(in), DIMENSION(:) :: PLW_WB_TO_WIN real, intent(in), DIMENSION(:) :: PLW_G_TO_WIN real, intent(in), DIMENSION(:) :: PLW_R_TO_WIN real, intent(in), DIMENSION(:) :: PLW_S_TO_WIN real, intent(in), DIMENSION(:) :: PLW_WIN_TO_WA real, intent(in), DIMENSION(:) :: PLW_WIN_TO_WB real, intent(in), DIMENSION(:) :: PLW_WIN_TO_R real, intent(in), DIMENSION(:) :: PLW_WIN_TO_NR integer, intent(in) :: KDAY real, intent(out), DIMENSION(:) :: PEMIT_LW_FAC real, intent(out), DIMENSION(:) :: PEMIT_LW_RD real, intent(out), DIMENSION(:) :: PT_RAD_IND real, intent(out), DIMENSION(:) :: PHU_BLD real, intent(in) :: PTIME real, intent(in), DIMENSION(:) :: PE_SHADING","tags":"","loc":"module/modi_teb.html"},{"title":"MODE_SBLS – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Interfaces BUSINGER_PHIM BUSINGER_PHIH BUSINGER_PHIE PAULSON_PSIM PAULSON_PSIH LMO USTAR Functions BUSINGER_PHIM_3D BUSINGER_PHIM_2D BUSINGER_PHIM_1D BUSINGER_PHIM_0D BUSINGER_PHIH_3D BUSINGER_PHIH_2D BUSINGER_PHIH_1D BUSINGER_PHIH_0D BUSINGER_PHIE_3D BUSINGER_PHIE_2D BUSINGER_PHIE_1D BUSINGER_PHIE_0D PAULSON_PSIM_3D PAULSON_PSIM_2D PAULSON_PSIM_1D PAULSON_PSIM_0D PAULSON_PSIH_3D PAULSON_PSIH_2D PAULSON_PSIH_1D PAULSON_PSIH_0D LMO_2D LMO_1D LMO_0D USTAR_2D USTAR_1D USTAR_0D Interfaces public interface BUSINGER_PHIM public function BUSINGER_PHIM_0D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real public function BUSINGER_PHIM_1D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO)) public function BUSINGER_PHIM_2D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) public function BUSINGER_PHIM_3D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3)) public interface BUSINGER_PHIH public function BUSINGER_PHIH_0D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real public function BUSINGER_PHIH_1D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO)) public function BUSINGER_PHIH_2D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) public function BUSINGER_PHIH_3D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3)) public interface BUSINGER_PHIE public function BUSINGER_PHIE_0D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real public function BUSINGER_PHIE_1D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1)) public function BUSINGER_PHIE_2D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) public function BUSINGER_PHIE_3D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3)) public interface PAULSON_PSIM public function PAULSON_PSIM_0D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real public function PAULSON_PSIM_1D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1)) public function PAULSON_PSIM_2D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) public function PAULSON_PSIM_3D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3)) public interface PAULSON_PSIH public function PAULSON_PSIH_0D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real public function PAULSON_PSIH_1D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1)) public function PAULSON_PSIH_2D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) public function PAULSON_PSIH_3D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3)) public interface LMO public function LMO_0D (PUSTAR, PTHETA, PRV, PSFTH, PSFRV) Arguments Type Intent Optional Attributes Name real, intent(in) :: PUSTAR real, intent(in) :: PTHETA real, intent(in) :: PRV real, intent(in) :: PSFTH real, intent(in) :: PSFRV Return Value real public function LMO_1D (PUSTAR, PTHETA, PRV, PSFTH, PSFRV) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PUSTAR real, intent(in), DIMENSION(:) :: PTHETA real, intent(in), DIMENSION(:) :: PRV real, intent(in), DIMENSION(:) :: PSFTH real, intent(in), DIMENSION(:) :: PSFRV Return Value real,\n  DIMENSION(SIZE(PUSTAR)) public function LMO_2D (PUSTAR, PTHETA, PRV, PSFTH, PSFRV) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PUSTAR real, intent(in), DIMENSION(:,:) :: PTHETA real, intent(in), DIMENSION(:,:) :: PRV real, intent(in), DIMENSION(:,:) :: PSFTH real, intent(in), DIMENSION(:,:) :: PSFRV Return Value real,\n  DIMENSION(SIZE(PUSTAR,1),SIZE(PUSTAR,2)) public interface USTAR public function USTAR_0D (PWIND, PZ, PZ0, PLMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PWIND real, intent(in) :: PZ real, intent(in) :: PZ0 real, intent(in) :: PLMO Return Value real public function USTAR_1D (PWIND, PZ, PZ0, PLMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWIND real, intent(in), DIMENSION(:) :: PZ real, intent(in), DIMENSION(:) :: PZ0 real, intent(in), DIMENSION(:) :: PLMO Return Value real,\n  DIMENSION(SIZE(PZ)) public function USTAR_2D (PWIND, PZ, PZ0, PLMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PWIND real, intent(in), DIMENSION(:,:) :: PZ real, intent(in), DIMENSION(:,:) :: PZ0 real, intent(in), DIMENSION(:,:) :: PLMO Return Value real,\n  DIMENSION(SIZE(PZ,1),SIZE(PZ,2)) Functions public function BUSINGER_PHIM_3D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3)) public function BUSINGER_PHIM_2D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) public function BUSINGER_PHIM_1D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO)) public function BUSINGER_PHIM_0D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real public function BUSINGER_PHIH_3D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3)) public function BUSINGER_PHIH_2D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) public function BUSINGER_PHIH_1D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO)) public function BUSINGER_PHIH_0D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real public function BUSINGER_PHIE_3D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3)) public function BUSINGER_PHIE_2D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) public function BUSINGER_PHIE_1D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1)) public function BUSINGER_PHIE_0D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real public function PAULSON_PSIM_3D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3)) public function PAULSON_PSIM_2D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) public function PAULSON_PSIM_1D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1)) public function PAULSON_PSIM_0D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real public function PAULSON_PSIH_3D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1), SIZE(PZ_O_LMO,2),SIZE(PZ_O_LMO,3)) public function PAULSON_PSIH_2D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1),SIZE(PZ_O_LMO,2)) public function PAULSON_PSIH_1D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PZ_O_LMO Return Value real,\n  DIMENSION(SIZE(PZ_O_LMO,1)) public function PAULSON_PSIH_0D (PZ_O_LMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PZ_O_LMO Return Value real public function LMO_2D (PUSTAR, PTHETA, PRV, PSFTH, PSFRV) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PUSTAR real, intent(in), DIMENSION(:,:) :: PTHETA real, intent(in), DIMENSION(:,:) :: PRV real, intent(in), DIMENSION(:,:) :: PSFTH real, intent(in), DIMENSION(:,:) :: PSFRV Return Value real,\n  DIMENSION(SIZE(PUSTAR,1),SIZE(PUSTAR,2)) public function LMO_1D (PUSTAR, PTHETA, PRV, PSFTH, PSFRV) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PUSTAR real, intent(in), DIMENSION(:) :: PTHETA real, intent(in), DIMENSION(:) :: PRV real, intent(in), DIMENSION(:) :: PSFTH real, intent(in), DIMENSION(:) :: PSFRV Return Value real,\n  DIMENSION(SIZE(PUSTAR)) public function LMO_0D (PUSTAR, PTHETA, PRV, PSFTH, PSFRV) Arguments Type Intent Optional Attributes Name real, intent(in) :: PUSTAR real, intent(in) :: PTHETA real, intent(in) :: PRV real, intent(in) :: PSFTH real, intent(in) :: PSFRV Return Value real public function USTAR_2D (PWIND, PZ, PZ0, PLMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PWIND real, intent(in), DIMENSION(:,:) :: PZ real, intent(in), DIMENSION(:,:) :: PZ0 real, intent(in), DIMENSION(:,:) :: PLMO Return Value real,\n  DIMENSION(SIZE(PZ,1),SIZE(PZ,2)) public function USTAR_1D (PWIND, PZ, PZ0, PLMO) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWIND real, intent(in), DIMENSION(:) :: PZ real, intent(in), DIMENSION(:) :: PZ0 real, intent(in), DIMENSION(:) :: PLMO Return Value real,\n  DIMENSION(SIZE(PZ)) public function USTAR_0D (PWIND, PZ, PZ0, PLMO) Arguments Type Intent Optional Attributes Name real, intent(in) :: PWIND real, intent(in) :: PZ real, intent(in) :: PZ0 real, intent(in) :: PLMO Return Value real","tags":"","loc":"module/mode_sbls.html"},{"title":"MODI_FACADE_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces FACADE_E_BUDGET Interfaces interface public subroutine FACADE_E_BUDGET(TOP, T, B, DMT, PTSTEP, PDN_RD, PRHOA, PAC_WL, PAC_BLD, PLW_RAD, PPS, PEXNS, PT_CANYON, PTS_RD, PTSN_RD, PTS_GD, PTS_FL, PLW_WA_TO_WB, PLW_R_TO_WA, PLW_R_TO_WB, PLW_G_TO_WA, PLW_G_TO_WB, PLW_S_TO_WA, PLW_S_TO_WB, PLW_NR_TO_WA, PLW_NR_TO_WB, PLW_WIN_TO_WA, PLW_WIN_TO_WB, PLW_S_TO_WIN, PLW_WA_TO_WIN, PLW_WB_TO_WIN, PLW_R_TO_WIN, PLW_G_TO_WIN, PLW_NR_TO_WIN, PFLX_BLD_WL_A, PDQS_WL_A, PFLX_BLD_WL_B, PDQS_WL_B, PEMIT_LW_FAC, PIMB_WL, PRADHT_IN, PRAD_RF_WL, PRAD_RF_WIN, PRAD_WL_FL, PRAD_WL_MA, PRAD_WIN_FL, PRAD_WIN_MA, PCONV_WL_BLD, PCONV_WIN_BLD, PAC_WIN, PLOAD_IN_WL, PLOAD_IN_WIN) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B type(DIAG_MISC_TEB_t), intent(inout) :: DMT real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PAC_WL real, intent(in), DIMENSION(:) :: PAC_BLD real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PT_CANYON real, intent(in), DIMENSION(:) :: PTS_RD real, intent(in), DIMENSION(:) :: PTSN_RD real, intent(in), DIMENSION(:) :: PTS_GD real, intent(in), DIMENSION(:) :: PTS_FL real, intent(in), DIMENSION(:) :: PLW_WA_TO_WB real, intent(in), DIMENSION(:) :: PLW_R_TO_WA real, intent(in), DIMENSION(:) :: PLW_R_TO_WB real, intent(in), DIMENSION(:) :: PLW_G_TO_WA real, intent(in), DIMENSION(:) :: PLW_G_TO_WB real, intent(in), DIMENSION(:) :: PLW_S_TO_WA real, intent(in), DIMENSION(:) :: PLW_S_TO_WB real, intent(in), DIMENSION(:) :: PLW_NR_TO_WA real, intent(in), DIMENSION(:) :: PLW_NR_TO_WB real, intent(in), DIMENSION(:) :: PLW_WIN_TO_WA real, intent(in), DIMENSION(:) :: PLW_WIN_TO_WB real, intent(in), DIMENSION(:) :: PLW_S_TO_WIN real, intent(in), DIMENSION(:) :: PLW_WA_TO_WIN real, intent(in), DIMENSION(:) :: PLW_WB_TO_WIN real, intent(in), DIMENSION(:) :: PLW_R_TO_WIN real, intent(in), DIMENSION(:) :: PLW_G_TO_WIN real, intent(in), DIMENSION(:) :: PLW_NR_TO_WIN real, intent(out), DIMENSION(:) :: PFLX_BLD_WL_A real, intent(inout), DIMENSION(:) :: PDQS_WL_A real, intent(out), DIMENSION(:) :: PFLX_BLD_WL_B real, intent(inout), DIMENSION(:) :: PDQS_WL_B real, intent(out), DIMENSION(:) :: PEMIT_LW_FAC real, intent(out), DIMENSION(:) :: PIMB_WL real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PRAD_RF_WL real, intent(in), DIMENSION(:) :: PRAD_RF_WIN real, intent(out), DIMENSION(:) :: PRAD_WL_FL real, intent(out), DIMENSION(:) :: PRAD_WL_MA real, intent(out), DIMENSION(:) :: PRAD_WIN_FL real, intent(out), DIMENSION(:) :: PRAD_WIN_MA real, intent(out), DIMENSION(:) :: PCONV_WL_BLD real, intent(out), DIMENSION(:) :: PCONV_WIN_BLD real, intent(in), DIMENSION(:) :: PAC_WIN real, intent(in), DIMENSION(:) :: PLOAD_IN_WL real, intent(in), DIMENSION(:) :: PLOAD_IN_WIN","tags":"","loc":"module/modi_facade_e_budget.html"},{"title":"MODE_THERMOS – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Interfaces PSAT DPSAT QSAT QSAT_SEAWATER QSAT_SEAWATER2 DQSAT QSATI DQSATI Functions PSAT_0D PSAT_1D PSAT_2D DPSAT_1D QSATW_0D QSATW_1D QSATW_2D QSATSEAW_1D QSATSEAW2_1D DQSATW_O_DT_1D DQSATI_O_DT_1D QSATI_1D QSATI_2D Interfaces public interface PSAT public function PSAT_0D (PT) result(PPSAT) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT Return Value real public function PSAT_1D (PT) result(PPSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT Return Value real,\n  DIMENSION(SIZE(PT)) public function PSAT_2D (PT, KMASK) result(PPSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PT integer, intent(in), DIMENSION(:) :: KMASK Return Value real,\n  DIMENSION(SIZE(PT,1),SIZE(PT,2)) public interface DPSAT public function DPSAT_1D (PT) result(PDPSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT Return Value real,\n  DIMENSION(SIZE(PT)) public interface QSAT public function QSATW_0D (PT, PP) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PP Return Value real public function QSATW_1D (PT, PP) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP Return Value real,\n  DIMENSION(SIZE(PT)) public function QSATW_2D (PT, PP, KMASK, KL) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PT real, intent(in), DIMENSION(:,:) :: PP integer, intent(in), optional DIMENSION(:) :: KMASK integer, intent(in), optional :: KL Return Value real,\n  DIMENSION(SIZE(PT,1),SIZE(PT,2)) public interface QSAT_SEAWATER public function QSATSEAW_1D (PT, PP) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP Return Value real,\n  DIMENSION(SIZE(PT)) public interface QSAT_SEAWATER2 public function QSATSEAW2_1D (PT, PP, PSSS) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PSSS Return Value real,\n  DIMENSION(SIZE(PT)) public interface DQSAT public function DQSATW_O_DT_1D (PT, PP, PQSAT) result(PDQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PQSAT Return Value real,\n  DIMENSION(SIZE(PT)) public interface QSATI public function QSATI_1D (PT, PP) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP Return Value real,\n  DIMENSION(SIZE(PT)) public function QSATI_2D (PT, PP, KMASK, KL) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PT real, intent(in), DIMENSION(:,:) :: PP integer, intent(in), optional DIMENSION(:) :: KMASK integer, intent(in), optional :: KL Return Value real,\n  DIMENSION(SIZE(PT,1),SIZE(PT,2)) public interface DQSATI public function DQSATI_O_DT_1D (PT, PP, PQSAT) result(PDQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PQSAT Return Value real,\n  DIMENSION(SIZE(PT)) Functions public function PSAT_0D (PT) result(PPSAT) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT Return Value real public function PSAT_1D (PT) result(PPSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT Return Value real,\n  DIMENSION(SIZE(PT)) public function PSAT_2D (PT, KMASK) result(PPSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PT integer, intent(in), DIMENSION(:) :: KMASK Return Value real,\n  DIMENSION(SIZE(PT,1),SIZE(PT,2)) public function DPSAT_1D (PT) result(PDPSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT Return Value real,\n  DIMENSION(SIZE(PT)) public function QSATW_0D (PT, PP) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PP Return Value real public function QSATW_1D (PT, PP) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP Return Value real,\n  DIMENSION(SIZE(PT)) public function QSATW_2D (PT, PP, KMASK, KL) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PT real, intent(in), DIMENSION(:,:) :: PP integer, intent(in), optional DIMENSION(:) :: KMASK integer, intent(in), optional :: KL Return Value real,\n  DIMENSION(SIZE(PT,1),SIZE(PT,2)) public function QSATSEAW_1D (PT, PP) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP Return Value real,\n  DIMENSION(SIZE(PT)) public function QSATSEAW2_1D (PT, PP, PSSS) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PSSS Return Value real,\n  DIMENSION(SIZE(PT)) public function DQSATW_O_DT_1D (PT, PP, PQSAT) result(PDQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PQSAT Return Value real,\n  DIMENSION(SIZE(PT)) public function DQSATI_O_DT_1D (PT, PP, PQSAT) result(PDQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PQSAT Return Value real,\n  DIMENSION(SIZE(PT)) public function QSATI_1D (PT, PP) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP Return Value real,\n  DIMENSION(SIZE(PT)) public function QSATI_2D (PT, PP, KMASK, KL) result(PQSAT) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PT real, intent(in), DIMENSION(:,:) :: PP integer, intent(in), optional DIMENSION(:) :: KMASK integer, intent(in), optional :: KL Return Value real,\n  DIMENSION(SIZE(PT,1),SIZE(PT,2))","tags":"","loc":"module/mode_thermos.html"},{"title":"MODD_DIAG_MISC_TEB_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types DIAG_MISC_TEB_t DIAG_MISC_TEB_NP_t Subroutines DIAG_MISC_TEB_INIT DIAG_MISC_TEB_NP_INIT Derived Types type, public :: DIAG_MISC_TEB_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:) :: XZ0_TOWN real, public, POINTER, DIMENSION(:) :: XQF_BLD real, public, POINTER, DIMENSION(:) :: XFLX_BLD real, public, POINTER, DIMENSION(:) :: XQF_TOWN real, public, POINTER, DIMENSION(:) :: XDQS_TOWN real, public, POINTER, DIMENSION(:) :: XH_WALL_A real, public, POINTER, DIMENSION(:) :: XH_WALL_B real, public, POINTER, DIMENSION(:) :: XH_ROOF real, public, POINTER, DIMENSION(:) :: XH_ROAD real, public, POINTER, DIMENSION(:) :: XH_STRLROOF real, public, POINTER, DIMENSION(:) :: XH_BLT real, public, POINTER, DIMENSION(:) :: XRN_WALL_A real, public, POINTER, DIMENSION(:) :: XRN_WALL_B real, public, POINTER, DIMENSION(:) :: XRN_ROOF real, public, POINTER, DIMENSION(:) :: XRN_ROAD real, public, POINTER, DIMENSION(:) :: XRN_STRLROOF real, public, POINTER, DIMENSION(:) :: XRN_BLT real, public, POINTER, DIMENSION(:) :: XGFLUX_WALL_A real, public, POINTER, DIMENSION(:) :: XGFLUX_WALL_B real, public, POINTER, DIMENSION(:) :: XGFLUX_ROOF real, public, POINTER, DIMENSION(:) :: XGFLUX_ROAD real, public, POINTER, DIMENSION(:) :: XGFLUX_STRLROOF real, public, POINTER, DIMENSION(:) :: XGFLUX_BLT real, public, POINTER, DIMENSION(:) :: XLE_ROOF real, public, POINTER, DIMENSION(:) :: XLE_ROAD real, public, POINTER, DIMENSION(:) :: XLE_STRLROOF real, public, POINTER, DIMENSION(:) :: XLE_BLT real, public, POINTER, DIMENSION(:) :: XRUNOFF_TOWN real, public, POINTER, DIMENSION(:) :: XIRRIG_GARDEN real, public, POINTER, DIMENSION(:) :: XRUNOFF_ROAD real, public, POINTER, DIMENSION(:) :: XIRRIG_ROAD real, public, POINTER, DIMENSION(:) :: XRUNOFF_ROOF real, public, POINTER, DIMENSION(:) :: XRUNOFF_STRLROOF real, public, POINTER, DIMENSION(:) :: XIRRIG_GREENROOF real, public, POINTER, DIMENSION(:) :: XABS_SW_ROOF real, public, POINTER, DIMENSION(:) :: XABS_SW_SNOW_ROOF real, public, POINTER, DIMENSION(:) :: XABS_LW_ROOF real, public, POINTER, DIMENSION(:) :: XABS_LW_SNOW_ROOF real, public, POINTER, DIMENSION(:) :: XABS_SW_ROAD real, public, POINTER, DIMENSION(:) :: XABS_SW_SNOW_ROAD real, public, POINTER, DIMENSION(:) :: XABS_LW_ROAD real, public, POINTER, DIMENSION(:) :: XABS_LW_SNOW_ROAD real, public, POINTER, DIMENSION(:) :: XABS_SW_WALL_A real, public, POINTER, DIMENSION(:) :: XABS_SW_WALL_B real, public, POINTER, DIMENSION(:) :: XABS_LW_WALL_A real, public, POINTER, DIMENSION(:) :: XABS_LW_WALL_B real, public, POINTER, DIMENSION(:) :: XABS_SW_GARDEN real, public, POINTER, DIMENSION(:) :: XABS_LW_GARDEN real, public, POINTER, DIMENSION(:) :: XABS_SW_GREENROOF real, public, POINTER, DIMENSION(:) :: XABS_LW_GREENROOF real, public, POINTER, DIMENSION(:) :: XG_GREENROOF_ROOF real, public, POINTER, DIMENSION(:) :: XABS_SW_PANEL real, public, POINTER, DIMENSION(:) :: XABS_LW_PANEL real, public, POINTER, DIMENSION(:) :: XRN_PANEL real, public, POINTER, DIMENSION(:) :: XH_PANEL real, public, POINTER, DIMENSION(:) :: XTHER_PROD_PANEL real, public, POINTER, DIMENSION(:) :: XPHOT_PROD_PANEL real, public, POINTER, DIMENSION(:) :: XPROD_PANEL real, public, POINTER, DIMENSION(:) :: XTHER_PROD_BLD real, public, POINTER, DIMENSION(:) :: XPHOT_PROD_BLD real, public, POINTER, DIMENSION(:) :: XH_BLD_COOL real, public, POINTER, DIMENSION(:) :: XT_BLD_COOL real, public, POINTER, DIMENSION(:) :: XH_BLD_HEAT real, public, POINTER, DIMENSION(:) :: XLE_BLD_COOL real, public, POINTER, DIMENSION(:) :: XLE_BLD_HEAT real, public, POINTER, DIMENSION(:) :: XH_WASTE real, public, POINTER, DIMENSION(:) :: XLE_WASTE real, public, POINTER, DIMENSION(:) :: XHVAC_COOL real, public, POINTER, DIMENSION(:) :: XHVAC_HEAT real, public, POINTER, DIMENSION(:) :: XCAP_SYS real, public, POINTER, DIMENSION(:) :: XM_SYS real, public, POINTER, DIMENSION(:) :: XCOP real, public, POINTER, DIMENSION(:) :: XQ_SYS real, public, POINTER, DIMENSION(:) :: XT_SYS real, public, POINTER, DIMENSION(:) :: XTR_SW_WIN real, public, POINTER, DIMENSION(:) :: XFAN_POWER real, public, POINTER, DIMENSION(:) :: XABS_SW_WIN real, public, POINTER, DIMENSION(:) :: XABS_LW_WIN real, public, POINTER, DIMENSION(:) :: XEMIT_LW_FAC real, public, POINTER, DIMENSION(:) :: XEMIT_LW_GRND real, public, POINTER, DIMENSION(:) :: XT_RAD_IND real, public, POINTER, DIMENSION(:) :: XREF_SW_GRND real, public, POINTER, DIMENSION(:) :: XREF_SW_FAC real, public, POINTER, DIMENSION(:) :: XHU_BLD real, public, POINTER, DIMENSION(:) :: XTCOOL_TARGET real, public, POINTER, DIMENSION(:) :: XTHEAT_TARGET real, public, POINTER, DIMENSION(:) :: XQIN type, public :: DIAG_MISC_TEB_NP_t Components Type Visibility Attributes Name Initial type( DIAG_MISC_TEB_t ), public, POINTER :: AL (:) => NULL() Subroutines public subroutine DIAG_MISC_TEB_INIT (YDIAG_MISC_TEB) Arguments Type Intent Optional Attributes Name type( DIAG_MISC_TEB_t ), intent(inout) :: YDIAG_MISC_TEB public subroutine DIAG_MISC_TEB_NP_INIT (YNDIAG_MISC_TEB, KPATCH) Arguments Type Intent Optional Attributes Name type( DIAG_MISC_TEB_NP_t ), intent(inout) :: YNDIAG_MISC_TEB integer, intent(in) :: KPATCH","tags":"","loc":"module/modd_diag_misc_teb_n.html"},{"title":"MODD_DIAG_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK MODD_TYPE_DATE_SURF Contents Derived Types DIAG_OPTIONS_t DIAG_t DIAG_NP_t Subroutines DIAG_OPTIONS_INIT DIAG_NP_INIT DIAG_INIT Derived Types type, public :: DIAG_OPTIONS_t Components Type Visibility Attributes Name Initial real, public :: XDIAG_TSTEP integer, public :: N2M logical, public :: LT2MMW logical, public :: L2M_MIN_ZS logical, public :: LSURF_BUDGET logical, public :: LRAD_BUDGET logical, public :: LCOEF logical, public :: LSURF_VARS logical, public :: LFRAC logical, public :: LDIAG_GRID logical, public :: LSURF_BUDGETC logical, public :: LRESET_BUDGETC logical, public :: LREAD_BUDGETC logical, public :: LPROVAR_TO_DIAG logical, public :: LSNOWDIMNC logical, public :: LRESETCUMUL logical, public :: LSELECT type(DATE_TIME), public :: TIME_BUDGETC character(len=12), public, POINTER, DIMENSION(:) :: CSELECT logical, public :: LPGD logical, public :: LPATCH_BUDGET type, public :: DIAG_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:) :: XRI real, public, POINTER, DIMENSION(:) :: XCD real, public, POINTER, DIMENSION(:) :: XCDN real, public, POINTER, DIMENSION(:) :: XCH real, public, POINTER, DIMENSION(:) :: XCE real, public, POINTER, DIMENSION(:) :: XHU real, public, POINTER, DIMENSION(:) :: XHUG real, public, POINTER, DIMENSION(:) :: XHV real, public, POINTER, DIMENSION(:) :: XRN real, public, POINTER, DIMENSION(:) :: XH real, public, POINTER, DIMENSION(:) :: XLE real, public, POINTER, DIMENSION(:) :: XLEI real, public, POINTER, DIMENSION(:) :: XGFLUX real, public, POINTER, DIMENSION(:) :: XEVAP real, public, POINTER, DIMENSION(:) :: XSUBL real, public, POINTER, DIMENSION(:) :: XTS real, public, POINTER, DIMENSION(:) :: XTSRAD real, public, POINTER, DIMENSION(:) :: XALBT real, public, POINTER, DIMENSION(:) :: XSWE real, public, POINTER, DIMENSION(:) :: XT2M real, public, POINTER, DIMENSION(:) :: XT2M_MIN real, public, POINTER, DIMENSION(:) :: XT2M_MAX real, public, POINTER, DIMENSION(:) :: XQ2M real, public, POINTER, DIMENSION(:) :: XHU2M real, public, POINTER, DIMENSION(:) :: XHU2M_MIN real, public, POINTER, DIMENSION(:) :: XHU2M_MAX real, public, POINTER, DIMENSION(:) :: XQS real, public, POINTER, DIMENSION(:) :: XZON10M real, public, POINTER, DIMENSION(:) :: XMER10M real, public, POINTER, DIMENSION(:) :: XWIND10M real, public, POINTER, DIMENSION(:) :: XWIND10M_MAX real, public, POINTER, DIMENSION(:) :: XSFCO2 real, public, POINTER, DIMENSION(:,:) :: XSWBD real, public, POINTER, DIMENSION(:,:) :: XSWBU real, public, POINTER, DIMENSION(:) :: XLWD real, public, POINTER, DIMENSION(:) :: XLWU real, public, POINTER, DIMENSION(:) :: XSWD real, public, POINTER, DIMENSION(:) :: XSWU real, public, POINTER, DIMENSION(:) :: XFMU real, public, POINTER, DIMENSION(:) :: XFMV real, public, POINTER, DIMENSION(:) :: XZ0 real, public, POINTER, DIMENSION(:) :: XZ0H real, public, POINTER, DIMENSION(:) :: XZ0EFF real, public, POINTER, DIMENSION(:) :: XT2M_MIN_ZS real, public, POINTER, DIMENSION(:) :: XQ2M_MIN_ZS real, public, POINTER, DIMENSION(:) :: XHU2M_MIN_ZS real, public, POINTER, DIMENSION(:) :: XPS real, public, POINTER, DIMENSION(:) :: XRHOA real, public, POINTER, DIMENSION(:) :: XSSO_FMU real, public, POINTER, DIMENSION(:) :: XSSO_FMV real, public, POINTER, DIMENSION(:) :: XUREF real, public, POINTER, DIMENSION(:) :: XZREF real, public, POINTER, DIMENSION(:) :: XTRAD real, public, POINTER, DIMENSION(:) :: XEMIS type, public :: DIAG_NP_t Components Type Visibility Attributes Name Initial type( DIAG_t ), public, POINTER :: AL (:) => NULL() Subroutines public subroutine DIAG_OPTIONS_INIT (DGO) Arguments Type Intent Optional Attributes Name type( DIAG_OPTIONS_t ), intent(inout) :: DGO public subroutine DIAG_NP_INIT (ND, KPATCH) Arguments Type Intent Optional Attributes Name type( DIAG_NP_t ), intent(inout) :: ND integer, intent(in) :: KPATCH public subroutine DIAG_INIT (D) Arguments Type Intent Optional Attributes Name type( DIAG_t ), intent(inout) :: D","tags":"","loc":"module/modd_diag_n.html"},{"title":"MODD_ISBA_PAR – Town Energy Balance (TEB) model API docs","text":"Contents Variables XEMISVEG XCDZ0EFF XVEGMIN XRS_MAX XCVHEATF XDENOM_MIN XTAU_ICE XEMISSOIL XWGMIN XSPHSOIL XDRYWGHT XCONDQRTZ XCONDOTH1 XCONDOTH2 XCONDWTR XOMRHO XOMSPH XOMCONDDRY XOMCONDSLD XWTD_MAXDEPTH XPERMFRAC XPERMDEPTH XRED_EDGE XUV_EDGE XFLXMAX XLIMH NOPTIMLAYER XOPTIMGRID Variables Type Visibility Attributes Name Initial real, public, parameter :: XEMISVEG = 0.97 real, public, parameter :: XCDZ0EFF = 0.8 real, public, parameter :: XVEGMIN = 0.95 real, public, parameter :: XRS_MAX = 5000. real, public, parameter :: XCVHEATF = 0.20 real, public, parameter :: XDENOM_MIN = 1.E-12 real, public, parameter :: XTAU_ICE = 3300. real, public, parameter :: XEMISSOIL = 0.94 real, public, parameter :: XWGMIN = 0.001 real, public, parameter :: XSPHSOIL = 733. real, public, parameter :: XDRYWGHT = 2700.0 real, public, parameter :: XCONDQRTZ = 7.7 real, public, parameter :: XCONDOTH1 = 2.0 real, public, parameter :: XCONDOTH2 = 3.0 real, public, parameter :: XCONDWTR = 0.57 real, public, parameter :: XOMRHO = 1300. real, public, parameter :: XOMSPH = 1926. real, public, parameter :: XOMCONDDRY = 0.05 real, public, parameter :: XOMCONDSLD = 0.25 real, public, parameter :: XWTD_MAXDEPTH = 100. real, public, parameter :: XPERMFRAC = 0.25 real, public, parameter :: XPERMDEPTH = 12.0 real, public, parameter :: XRED_EDGE = 0.0000007 real, public, parameter :: XUV_EDGE = 0.0000002 real, public, parameter :: XFLXMAX = 5000. real, public, parameter :: XLIMH = 2.0 integer, public, parameter :: NOPTIMLAYER = 14 real, public, parameter, DIMENSION(NOPTIMLAYER) :: XOPTIMGRID = (/0.01, 0.04, 0.10, 0.20, 0.40, 0.60, 0.80, 1.00, 1.50, 2.00, 3.00, 5.00, 8.00, 12.0/)","tags":"","loc":"module/modd_isba_par.html"},{"title":"MODI_INI_CTURBS – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces INI_CTURBS Interfaces interface public subroutine INI_CTURBS() Arguments None","tags":"","loc":"module/modi_ini_cturbs.html"},{"title":"MODD_TEB_IRRIG_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types TEB_IRRIG_t Subroutines TEB_IRRIG_INIT Derived Types type, public :: TEB_IRRIG_t Components Type Visibility Attributes Name Initial logical, public :: LTEB_IRRIG logical, public :: LPAR_GD_IRRIG logical, public :: LPAR_GR_IRRIG logical, public :: LPAR_RD_IRRIG real, public, POINTER, DIMENSION(:) :: XGD_START_MONTH real, public, POINTER, DIMENSION(:) :: XGD_END_MONTH real, public, POINTER, DIMENSION(:) :: XGD_START_HOUR real, public, POINTER, DIMENSION(:) :: XGD_END_HOUR real, public, POINTER, DIMENSION(:) :: XGD_24H_IRRIG real, public, POINTER, DIMENSION(:) :: XGR_START_MONTH real, public, POINTER, DIMENSION(:) :: XGR_END_MONTH real, public, POINTER, DIMENSION(:) :: XGR_START_HOUR real, public, POINTER, DIMENSION(:) :: XGR_END_HOUR real, public, POINTER, DIMENSION(:) :: XGR_24H_IRRIG real, public, POINTER, DIMENSION(:) :: XRD_START_MONTH real, public, POINTER, DIMENSION(:) :: XRD_END_MONTH real, public, POINTER, DIMENSION(:) :: XRD_START_HOUR real, public, POINTER, DIMENSION(:) :: XRD_END_HOUR real, public, POINTER, DIMENSION(:) :: XRD_24H_IRRIG Subroutines public subroutine TEB_IRRIG_INIT (YTEB_IRRIG) Arguments Type Intent Optional Attributes Name type( TEB_IRRIG_t ), intent(inout) :: YTEB_IRRIG","tags":"","loc":"module/modd_teb_irrig_n.html"},{"title":"MODD_FLAKE_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK MODD_TYPE_DATE_SURF Contents Derived Types FLAKE_t Subroutines FLAKE_INIT Derived Types type, public :: FLAKE_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:) :: XZS real, public, POINTER, DIMENSION(:) :: XZ0 real, public, POINTER, DIMENSION(:) :: XUSTAR real, public, POINTER, DIMENSION(:) :: XEMIS real, public, POINTER, DIMENSION(:,:) :: XCOVER logical, public, POINTER, DIMENSION(:) :: LCOVER logical, public :: LSBL type(DATE_TIME), public :: TTIME real, public :: XTSTEP real, public :: XOUT_TSTEP logical, public :: LSEDIMENTS logical, public :: LSKINTEMP character(len=3), public :: CSNOW_FLK character(len=5), public :: CFLK_FLUX character(len=4), public :: CFLK_ALB real, public, POINTER, DIMENSION(:) :: XWATER_DEPTH real, public, POINTER, DIMENSION(:) :: XWATER_FETCH real, public, POINTER, DIMENSION(:) :: XT_BS real, public, POINTER, DIMENSION(:) :: XDEPTH_BS real, public, POINTER, DIMENSION(:) :: XCORIO real, public, POINTER, DIMENSION(:) :: XDIR_ALB real, public, POINTER, DIMENSION(:) :: XSCA_ALB real, public, POINTER, DIMENSION(:) :: XICE_ALB real, public, POINTER, DIMENSION(:) :: XSNOW_ALB real, public, POINTER, DIMENSION(:) :: XEXTCOEF_WATER real, public, POINTER, DIMENSION(:) :: XEXTCOEF_ICE real, public, POINTER, DIMENSION(:) :: XEXTCOEF_SNOW real, public, POINTER, DIMENSION(:) :: XT_SNOW real, public, POINTER, DIMENSION(:) :: XT_ICE real, public, POINTER, DIMENSION(:) :: XT_MNW real, public, POINTER, DIMENSION(:) :: XT_WML real, public, POINTER, DIMENSION(:) :: XT_BOT real, public, POINTER, DIMENSION(:) :: XT_B1 real, public, POINTER, DIMENSION(:) :: XCT real, public, POINTER, DIMENSION(:) :: XH_SNOW real, public, POINTER, DIMENSION(:) :: XH_ICE real, public, POINTER, DIMENSION(:) :: XH_ML real, public, POINTER, DIMENSION(:) :: XH_B1 real, public, POINTER, DIMENSION(:) :: XTS real, public, POINTER, DIMENSION(:) :: XCPL_FLAKE_EVAP real, public, POINTER, DIMENSION(:) :: XCPL_FLAKE_RAIN real, public, POINTER, DIMENSION(:) :: XCPL_FLAKE_SNOW Subroutines public subroutine FLAKE_INIT (YFLAKE) Arguments Type Intent Optional Attributes Name type( FLAKE_t ), intent(inout) :: YFLAKE","tags":"","loc":"module/modd_flake_n.html"},{"title":"MODD_EMIS_GR_FIELD_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK MODD_TYPE_EFUTIL Contents Derived Types EMIS_GR_FIELD_t Subroutines EMIS_GR_FIELD_INIT Derived Types type, public :: EMIS_GR_FIELD_t Components Type Visibility Attributes Name Initial integer, public :: NEMIS_GR_NBR character(len=3), public, DIMENSION(:), POINTER :: CEMIS_GR_AREA character(len=40), public, DIMENSION(:), POINTER :: CEMIS_GR_NAME integer, public, DIMENSION(:), POINTER :: NEMIS_GR_TIME real, public, DIMENSION(:,:,:), POINTER :: XEMIS_GR_FIELDS integer, public :: NEMISPEC_NBR type(EMISSVAR_T), public, DIMENSION(:), POINTER :: TSEMISS type(PRONOSVAR_T), public, POINTER :: TSPRONOSLIST Subroutines public subroutine EMIS_GR_FIELD_INIT (YEMIS_GR_FIELD) Arguments Type Intent Optional Attributes Name type( EMIS_GR_FIELD_t ), intent(inout) :: YEMIS_GR_FIELD","tags":"","loc":"module/modd_emis_gr_field_n.html"},{"title":"MODI_SURFACE_CD – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces SURFACE_CD Interfaces interface public subroutine SURFACE_CD(PRI, PZREF, PUREF, PZ0EFF, PZ0H, PCD, PCDN) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PRI real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PZ0EFF real, intent(in), DIMENSION(:) :: PZ0H real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN","tags":"","loc":"module/modi_surface_cd.html"},{"title":"MODD_FLOOD_PAR – Town Energy Balance (TEB) model API docs","text":"Contents Variables XCFFV XZ0FLOOD Variables Type Visibility Attributes Name Initial real, public, SAVE :: XCFFV real, public, SAVE :: XZ0FLOOD","tags":"","loc":"module/modd_flood_par.html"},{"title":"MODD_SURF_PAR – Town Energy Balance (TEB) model API docs","text":"Contents Variables NVERSION NBUGFIX XUNDEF XUNDEF XUNDEF NUNDEF XSURF_EPSILON XSURF_HUGE XSURF_TINY Variables Type Visibility Attributes Name Initial integer, public :: NVERSION integer, public :: NBUGFIX real, public, parameter :: XUNDEF = 1.E+20 real, public, parameter :: XUNDEF = 1.E+20 real, public, parameter :: XUNDEF = 1.E+6 integer, public, parameter :: NUNDEF = 1E+9 real, public, parameter :: XSURF_EPSILON = EPSILON(XSURF_EPSILON) real, public, parameter :: XSURF_HUGE = HUGE(XSURF_HUGE) real, public, parameter :: XSURF_TINY = TINY(XSURF_TINY)","tags":"","loc":"module/modd_surf_par.html"},{"title":"MODD_SSO_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types SSO_t SSO_NP_t Subroutines SSO_INIT SSO_NP_INIT Derived Types type, public :: SSO_t Components Type Visibility Attributes Name Initial character(len=4), public :: CROUGH real, public, DIMENSION(:), POINTER :: XZ0EFFJPDIR real, public, DIMENSION(:), POINTER :: XSSO_SLOPE real, public, DIMENSION(:), POINTER :: XSSO_ANIS real, public, DIMENSION(:), POINTER :: XSSO_DIR real, public, DIMENSION(:), POINTER :: XSSO_STDEV real, public, DIMENSION(:), POINTER :: XAVG_ZS real, public, DIMENSION(:), POINTER :: XSIL_ZS real, public, DIMENSION(:), POINTER :: XMAX_ZS real, public, DIMENSION(:), POINTER :: XMIN_ZS real, public :: XFRACZ0 real, public :: XCOEFBE real, public, DIMENSION(:), POINTER :: XAOSIP real, public, DIMENSION(:), POINTER :: XAOSIM real, public, DIMENSION(:), POINTER :: XAOSJP real, public, DIMENSION(:), POINTER :: XAOSJM real, public, DIMENSION(:), POINTER :: XHO2IP real, public, DIMENSION(:), POINTER :: XHO2IM real, public, DIMENSION(:), POINTER :: XHO2JP real, public, DIMENSION(:), POINTER :: XHO2JM real, public, DIMENSION(:), POINTER :: XZ0REL real, public, DIMENSION(:), POINTER :: XZ0EFFIP real, public, DIMENSION(:), POINTER :: XZ0EFFIM real, public, DIMENSION(:), POINTER :: XZ0EFFJP real, public, DIMENSION(:), POINTER :: XZ0EFFJM type, public :: SSO_NP_t Components Type Visibility Attributes Name Initial type( SSO_t ), public, DIMENSION(:), POINTER :: AL => NULL() Subroutines public subroutine SSO_INIT (YSSO) Arguments Type Intent Optional Attributes Name type( SSO_t ), intent(inout) :: YSSO public subroutine SSO_NP_INIT (YSSO_NP, KPATCH) Arguments Type Intent Optional Attributes Name type( SSO_NP_t ), intent(inout) :: YSSO_NP integer, intent(in) :: KPATCH","tags":"","loc":"module/modd_sso_n.html"},{"title":"MODI_WINDOW_SHADING_AVAILABILITY – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces WINDOW_SHADING_AVAILABILITY Interfaces interface public subroutine WINDOW_SHADING_AVAILABILITY(OSHADE, PTI_BLD, PTCOOL_TARGET, OSHADE_POSSIBLE) Arguments Type Intent Optional Attributes Name logical, intent(in), DIMENSION(:) :: OSHADE real, intent(in), DIMENSION(:) :: PTI_BLD real, intent(in), DIMENSION(:) :: PTCOOL_TARGET logical, intent(out), DIMENSION(:) :: OSHADE_POSSIBLE","tags":"","loc":"module/modi_window_shading_availability.html"},{"title":"MODD_TYPE_SNOW – Town Energy Balance (TEB) model API docs","text":"Contents Derived Types SURF_SNOW NSURF_SNOW Subroutines TYPE_SNOW_INIT Derived Types type, public :: SURF_SNOW Components Type Visibility Attributes Name Initial character(len=3), public :: SCHEME integer, public :: NLAYER real, public, DIMENSION(:,:), POINTER :: DEPTH real, public, DIMENSION(:,:), POINTER :: WSNOW real, public, DIMENSION(:,:), POINTER :: HEAT real, public, DIMENSION(:,:), POINTER :: T real, public, DIMENSION(:,:), POINTER :: TEMP real, public, DIMENSION(:,:), POINTER :: RHO real, public, DIMENSION(:), POINTER :: ALB real, public, DIMENSION(:), POINTER :: ALBVIS real, public, DIMENSION(:), POINTER :: ALBNIR real, public, DIMENSION(:), POINTER :: ALBFIR real, public, DIMENSION(:), POINTER :: EMIS real, public, DIMENSION(:), POINTER :: TS real, public, DIMENSION(:,:), POINTER :: GRAN1 real, public, DIMENSION(:,:), POINTER :: GRAN2 real, public, DIMENSION(:,:), POINTER :: HIST real, public, DIMENSION(:,:), POINTER :: AGE type, public :: NSURF_SNOW Components Type Visibility Attributes Name Initial type( SURF_SNOW ), public, DIMENSION(:), POINTER :: AL Subroutines public subroutine TYPE_SNOW_INIT (YSURF_SNOW) Arguments Type Intent Optional Attributes Name type( SURF_SNOW ), intent(inout) :: YSURF_SNOW","tags":"","loc":"module/modd_type_snow.html"},{"title":"MODI_ISBA_ALBEDO – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces ISBA_ALBEDO Interfaces interface public subroutine ISBA_ALBEDO(PEK, OTR_ML, OMEB, PDIR_SW, PSCA_SW, PSW_BANDS, KSW, PFALB, PFFV, PFFG, PGLOBAL_SW, PMEB_SCA_SW, PALBNIR_TVEG, PALBVIS_TVEG, PALBNIR_TSOIL, PALBVIS_TSOIL) Arguments Type Intent Optional Attributes Name type(ISBA_PE_t), intent(inout) :: PEK logical, intent(in) :: OTR_ML logical, intent(in) :: OMEB real, intent(in), DIMENSION(:,:) :: PDIR_SW real, intent(in), DIMENSION(:,:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PSW_BANDS integer, intent(in) :: KSW real, intent(in), DIMENSION(:) :: PFALB real, intent(in), DIMENSION(:) :: PFFV real, intent(in), DIMENSION(:) :: PFFG real, intent(out), DIMENSION(:) :: PGLOBAL_SW real, intent(out), DIMENSION(:) :: PMEB_SCA_SW real, intent(out), DIMENSION(:) :: PALBNIR_TVEG real, intent(out), DIMENSION(:) :: PALBVIS_TVEG real, intent(out), DIMENSION(:) :: PALBNIR_TSOIL real, intent(out), DIMENSION(:) :: PALBVIS_TSOIL","tags":"","loc":"module/modi_isba_albedo.html"},{"title":"MODI_ADD_FORECAST_TO_DATE_SURF – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces ADD_FORECAST_TO_DATE_SURF Interfaces interface public subroutine ADD_FORECAST_TO_DATE_SURF(KYEAR, KMONTH, KDAY, PSEC) Arguments Type Intent Optional Attributes Name integer, intent(inout) :: KYEAR integer, intent(inout) :: KMONTH integer, intent(inout) :: KDAY real, intent(inout) :: PSEC","tags":"","loc":"module/modi_add_forecast_to_date_surf.html"},{"title":"MODD_TYPE_EFUTIL – Town Energy Balance (TEB) model API docs","text":"Contents Variables JPNBCOEFFMAX Derived Types EMISSVAR_T PRONOSVAR_T Variables Type Visibility Attributes Name Initial integer, public, parameter :: JPNBCOEFFMAX = 50 Derived Types type, public :: EMISSVAR_T Components Type Visibility Attributes Name Initial character(len=32), public :: CNAME integer, public :: NTX integer, public :: NPX integer, public, DIMENSION(:), POINTER :: NETIMES integer, public :: NDX real, public, DIMENSION(:,:), POINTER :: XEMISDATA logical, public :: LREAD integer, public :: NWS real, public, DIMENSION(:), POINTER :: XFWORK type, public :: PRONOSVAR_T Components Type Visibility Attributes Name Initial integer, public :: NAMINDEX integer, public :: NBCOEFF real, public, DIMENSION(JPNBCOEFFMAX) :: XCOEFF integer, public, DIMENSION(JPNBCOEFFMAX) :: NEFINDEX type( PRONOSVAR_T ), public, POINTER :: NEXT","tags":"","loc":"module/modd_type_efutil.html"},{"title":"MODE_PSYCHRO – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Interfaces PE_FROM_PQ TD_FROM_TQ RV_FROM_TPTWB TWB_FROM_TPQ ENTH_FN_T_Q Q_FN_T_ENTH Functions PE_FROM_PQ_0D PE_FROM_PQ_1D TD_FROM_TQ_0D TD_FROM_TQ_1D RV_FROM_TPTWB_0D RV_FROM_TPTWB_1D TWB_FROM_TPQ_0D TWB_FROM_TPQ_1D ENTH_FN_T_Q Q_FN_T_ENTH Interfaces public interface PE_FROM_PQ public function PE_FROM_PQ_0D (PP, PQ) result(PE) Arguments Type Intent Optional Attributes Name real, intent(in) :: PP real, intent(in) :: PQ Return Value real public function PE_FROM_PQ_1D (PP, PQ) result(PE) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PQ Return Value real,\n  DIMENSION(SIZE(PQ)) public interface TD_FROM_TQ public function TD_FROM_TQ_0D (PT, PQ, PP) result(PTD) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PQ real, intent(in) :: PP Return Value real public function TD_FROM_TQ_1D (PT, PQ, PP) result(PTD) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PQ real, intent(in), DIMENSION(:) :: PP Return Value real,\n  DIMENSION(SIZE(PQ)) public interface RV_FROM_TPTWB public function RV_FROM_TPTWB_0D (PT, PP, PTWB) result(PRV) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PP real, intent(in) :: PTWB Return Value real public function RV_FROM_TPTWB_1D (PT, PP, PTWB) result(PRV) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PTWB Return Value real,\n  DIMENSION(SIZE(PT)) public interface TWB_FROM_TPQ public function TWB_FROM_TPQ_0D (PT, PP, PQ) result(PTWB) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PP real, intent(in) :: PQ Return Value real public function TWB_FROM_TPQ_1D (PT, PP, PQ) result(PTWB) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PQ Return Value real,\n  DIMENSION(SIZE(PT)) public interface ENTH_FN_T_Q public interface ENTH_FN_T_Q () Arguments None public interface Q_FN_T_ENTH public interface Q_FN_T_ENTH () Arguments None Functions public function PE_FROM_PQ_0D (PP, PQ) result(PE) Arguments Type Intent Optional Attributes Name real, intent(in) :: PP real, intent(in) :: PQ Return Value real public function PE_FROM_PQ_1D (PP, PQ) result(PE) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PQ Return Value real,\n  DIMENSION(SIZE(PQ)) public function TD_FROM_TQ_0D (PT, PQ, PP) result(PTD) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PQ real, intent(in) :: PP Return Value real public function TD_FROM_TQ_1D (PT, PQ, PP) result(PTD) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PQ real, intent(in), DIMENSION(:) :: PP Return Value real,\n  DIMENSION(SIZE(PQ)) public function RV_FROM_TPTWB_0D (PT, PP, PTWB) result(PRV) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PP real, intent(in) :: PTWB Return Value real public function RV_FROM_TPTWB_1D (PT, PP, PTWB) result(PRV) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PTWB Return Value real,\n  DIMENSION(SIZE(PT)) public function TWB_FROM_TPQ_0D (PT, PP, PQ) result(PTWB) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PP real, intent(in) :: PQ Return Value real public function TWB_FROM_TPQ_1D (PT, PP, PQ) result(PTWB) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PT real, intent(in), DIMENSION(:) :: PP real, intent(in), DIMENSION(:) :: PQ Return Value real,\n  DIMENSION(SIZE(PT)) public function ENTH_FN_T_Q (PT, PQ) result(PENTH) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PQ Return Value real public function Q_FN_T_ENTH (PT, PENTH) result(PQ) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT real, intent(in) :: PENTH Return Value real","tags":"","loc":"module/mode_psychro.html"},{"title":"MODD_IDEAL_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK MODD_TYPE_DATE_SURF Contents Derived Types IDEAL_t Subroutines IDEAL_INIT Derived Types type, public :: IDEAL_t Components Type Visibility Attributes Name Initial real, public :: XTSTEP real, public :: XOUT_TSTEP Subroutines public subroutine IDEAL_INIT (YIDEAL) Arguments Type Intent Optional Attributes Name type( IDEAL_t ), intent(inout) :: YIDEAL","tags":"","loc":"module/modd_ideal_n.html"},{"title":"MODI_WINDOW_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces WINDOW_E_BUDGET Interfaces interface public subroutine WINDOW_E_BUDGET(B, PEMIS_WIN, PLW_W_TO_WIN, PLW_R_TO_WIN, PLW_G_TO_WIN, PLW_NR_TO_WIN, PLW_S_TO_WIN, PRAD_RF_WIN, PRAD_WL_WIN, PABS_SW_WIN, PLW_RAD, PAC_WL, PRADHT_IN, PTS_FL, PRHOA, PDN_RD, PT_CANYON, PTS_WL, PTS_RD, PTSN_RD, PTS_GD, PRAD_WIN_FL, PRAD_WIN_MA, PCONV_WIN_BLD, PEMIT_LW_WIN, PABS_LW_WIN, PLOAD_IN_WIN) Arguments Type Intent Optional Attributes Name type(BEM_t), intent(inout) :: B real, intent(in), DIMENSION(:) :: PEMIS_WIN real, intent(in), DIMENSION(:) :: PLW_W_TO_WIN real, intent(in), DIMENSION(:) :: PLW_R_TO_WIN real, intent(in), DIMENSION(:) :: PLW_G_TO_WIN real, intent(in), DIMENSION(:) :: PLW_NR_TO_WIN real, intent(in), DIMENSION(:) :: PLW_S_TO_WIN real, intent(in), DIMENSION(:) :: PRAD_RF_WIN real, intent(in), DIMENSION(:) :: PRAD_WL_WIN real, intent(in), DIMENSION(:) :: PABS_SW_WIN real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PAC_WL real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PTS_FL real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PT_CANYON real, intent(in), DIMENSION(:) :: PTS_WL real, intent(in), DIMENSION(:) :: PTS_RD real, intent(in), DIMENSION(:) :: PTSN_RD real, intent(in), DIMENSION(:) :: PTS_GD real, intent(out), DIMENSION(:) :: PRAD_WIN_FL real, intent(out), DIMENSION(:) :: PRAD_WIN_MA real, intent(out), DIMENSION(:) :: PCONV_WIN_BLD real, intent(out), DIMENSION(:) :: PEMIT_LW_WIN real, intent(out), DIMENSION(:) :: PABS_LW_WIN real, intent(in), DIMENSION(:) :: PLOAD_IN_WIN","tags":"","loc":"module/modi_window_e_budget.html"},{"title":"MODI_GET_LUOUT – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces GET_LUOUT Interfaces interface public subroutine GET_LUOUT(HPROGRAM, KLUOUT) Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HPROGRAM integer, intent(out) :: KLUOUT","tags":"","loc":"module/modi_get_luout.html"},{"title":"MODD_DIAG_MISC_FLAKE_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types DIAG_MISC_FLAKE_t Subroutines DIAG_MISC_FLAKE_INIT Derived Types type, public :: DIAG_MISC_FLAKE_t Components Type Visibility Attributes Name Initial logical, public :: LWATER_PROFILE real, public, POINTER, DIMENSION(:) :: XZWAT_PROFILE real, public, POINTER, DIMENSION(:) :: XZW_PROFILE real, public, POINTER, DIMENSION(:,:) :: XTW_PROFILE Subroutines public subroutine DIAG_MISC_FLAKE_INIT (DMF) Arguments Type Intent Optional Attributes Name type( DIAG_MISC_FLAKE_t ), intent(inout) :: DMF","tags":"","loc":"module/modd_diag_misc_flake_n.html"},{"title":"MODE_SURF_SNOW_FRAC – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Functions SNOW_FRAC_GROUND WSNOW_FROM_SNOW_FRAC_GROUND SNOW_FRAC_VEG SNOW_FRAC_VEG_A SNOW_FRAC_NAT SNOW_FRAC_NAT_1D SNOW_FRAC_NAT_2D SNOW_FRAC_VEG_1D SNOW_FRAC_VEG_2D SNOW_FRAC_GROUND_1D SNOW_FRAC_GROUND_2D Subroutines SNOW_FRAC_ROAD SNOW_FRAC_ROOF Functions public function SNOW_FRAC_GROUND (PWSNOW) result(PPSNG) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW Return Value real,\n  DIMENSION(SIZE(PWSNOW)) public function WSNOW_FROM_SNOW_FRAC_GROUND (PPSNG) result(PWSNOW) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PPSNG Return Value real,\n  DIMENSION(SIZE(PPSNG)) public function SNOW_FRAC_VEG (PPSNG, PWSNOW, PZ0VEG, PRHOS) result(PPSNV) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PPSNG real, intent(in), DIMENSION(:) :: PWSNOW real, intent(in), DIMENSION(:) :: PZ0VEG real, intent(in), DIMENSION(:) :: PRHOS Return Value real,\n  DIMENSION(SIZE(PWSNOW)) public function SNOW_FRAC_VEG_A (P_PSNG, P_LAI, P_SNOWALB) result(PPSNV) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: P_PSNG real, intent(in), DIMENSION(:) :: P_LAI real, intent(in), DIMENSION(:) :: P_SNOWALB Return Value real,\n  DIMENSION(SIZE(P_LAI)) public function SNOW_FRAC_NAT (PWSNOW, PPSNG, PPSNV, PVEG) result(PPSN) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW real, intent(in), DIMENSION(:) :: PPSNG real, intent(in), DIMENSION(:) :: PPSNV real, intent(in), DIMENSION(:) :: PVEG Return Value real,\n  DIMENSION(SIZE(PWSNOW)) public function SNOW_FRAC_NAT_1D (PWSNOW) result(BIDON) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW Return Value real public function SNOW_FRAC_NAT_2D (PWSNOW) result(BIDON) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW Return Value real public function SNOW_FRAC_VEG_1D (PWSNOW) result(BIDON) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW Return Value real public function SNOW_FRAC_VEG_2D (PWSNOW) result(BIDON) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW Return Value real public function SNOW_FRAC_GROUND_1D (PWSNOW) result(BIDON) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW Return Value real public function SNOW_FRAC_GROUND_2D (PWSNOW) result(BIDON) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW Return Value real Subroutines public subroutine SNOW_FRAC_ROAD (PWSNOW_ROAD, OSNOW, PDN_ROAD, PDF_ROAD) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW_ROAD logical, intent(in), DIMENSION(:) :: OSNOW real, intent(out), DIMENSION(:) :: PDN_ROAD real, intent(out), DIMENSION(:) :: PDF_ROAD public subroutine SNOW_FRAC_ROOF (PWSNOW_ROOF, OSNOW, PDN_ROOF, PDF_ROOF) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWSNOW_ROOF logical, intent(in), DIMENSION(:) :: OSNOW real, intent(out), DIMENSION(:) :: PDN_ROOF real, intent(out), DIMENSION(:) :: PDF_ROOF","tags":"","loc":"module/mode_surf_snow_frac.html"},{"title":"MODD_CH_ISBA_n – Town Energy Balance (TEB) model API docs","text":"Uses MODD_SV_n PARKIND1 YOMHOOK Contents Derived Types CH_ISBA_t CH_ISBA_NP_t Subroutines CH_ISBA_INIT CH_ISBA_NP_INIT Derived Types type, public :: CH_ISBA_t Components Type Visibility Attributes Name Initial character(len=28), public :: CCHEM_SURF_FILE character(len=6), public :: CCH_DRY_DEP real, public, DIMENSION(:,:), POINTER :: XDEP real, public, DIMENSION(:), POINTER :: XSOILRC_SO2 real, public, DIMENSION(:), POINTER :: XSOILRC_O3 logical, public :: LCH_BIO_FLUX logical, public :: LCH_NO_FLUX type(SV_t), public :: SVI character(len=6), public, DIMENSION(:), POINTER :: CCH_NAMES character(len=6), public, DIMENSION(:), POINTER :: CAER_NAMES character(len=6), public, DIMENSION(:), POINTER :: CDSTNAMES character(len=6), public, DIMENSION(:), POINTER :: CSLTNAMES type, public :: CH_ISBA_NP_t Components Type Visibility Attributes Name Initial type( CH_ISBA_t ), public, DIMENSION(:), POINTER :: AL => NULL() Subroutines public subroutine CH_ISBA_INIT (YCH_ISBA) Arguments Type Intent Optional Attributes Name type( CH_ISBA_t ), intent(inout) :: YCH_ISBA public subroutine CH_ISBA_NP_INIT (YCH_ISBA_NP, KPATCH) Arguments Type Intent Optional Attributes Name type( CH_ISBA_NP_t ), intent(inout) :: YCH_ISBA_NP integer, intent(in) :: KPATCH","tags":"","loc":"module/modd_ch_isba_n.html"},{"title":"MODD_CANOPY_TURB – Town Energy Balance (TEB) model API docs","text":"Contents Variables XTKEMIN XCEP XCED XALPSBL XA0 XCTP XCMFS XCSHF XASBL Variables Type Visibility Attributes Name Initial real, public, SAVE :: XTKEMIN real, public, SAVE :: XCEP real, public, SAVE :: XCED real, public, SAVE :: XALPSBL real, public, SAVE :: XA0 real, public, SAVE :: XCTP real, public, SAVE :: XCMFS real, public, SAVE :: XCSHF real, public, SAVE :: XASBL","tags":"","loc":"module/modd_canopy_turb.html"},{"title":"MODI_VEGETATION_EVOL – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces VEGETATION_EVOL Interfaces interface public subroutine VEGETATION_EVOL(IO, DTI, PK, PEK, OAGRIP, PTSTEP, KMONTH, KDAY, PTIME, PLAT, PRHOA, P_CO2, ISSK, PRESP_BIOMASS_INST, PSWDIR) Arguments Type Intent Optional Attributes Name type(ISBA_OPTIONS_t), intent(inout) :: IO type(DATA_ISBA_t), intent(inout) :: DTI type(ISBA_P_t), intent(inout) :: PK type(ISBA_PE_t), intent(inout) :: PEK logical, intent(in) :: OAGRIP real, intent(in) :: PTSTEP integer, intent(in) :: KMONTH integer, intent(in) :: KDAY real, intent(in) :: PTIME real, intent(in), DIMENSION(:) :: PLAT real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: P_CO2 type(SSO_t), intent(inout) :: ISSK real, intent(inout), DIMENSION(:,:) :: PRESP_BIOMASS_INST real, intent(in), optional DIMENSION(:) :: PSWDIR","tags":"","loc":"module/modi_vegetation_evol.html"},{"title":"MODD_TEB_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK MODD_TYPE_DATE_SURF MODD_TYPE_SNOW Contents Derived Types TEB_t TEB_NP_t Subroutines TEB_INIT TEB_NP_INIT Derived Types type, public :: TEB_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:) :: XROAD_DIR real, public, POINTER, DIMENSION(:) :: XGARDEN real, public, POINTER, DIMENSION(:) :: XGREENROOF real, public, POINTER, DIMENSION(:) :: XBLD real, public, POINTER, DIMENSION(:) :: XROAD real, public, POINTER, DIMENSION(:) :: XCAN_HW_RATIO real, public, POINTER, DIMENSION(:) :: XBLD_HEIGHT real, public, POINTER, DIMENSION(:) :: XWALL_O_HOR real, public, POINTER, DIMENSION(:) :: XROAD_O_GRND real, public, POINTER, DIMENSION(:) :: XGARDEN_O_GRND real, public, POINTER, DIMENSION(:) :: XWALL_O_GRND real, public, POINTER, DIMENSION(:) :: XWALL_O_BLD real, public, POINTER, DIMENSION(:) :: XZ0_TOWN real, public, POINTER, DIMENSION(:) :: XSVF_ROAD real, public, POINTER, DIMENSION(:) :: XSVF_GARDEN real, public, POINTER, DIMENSION(:) :: XSVF_WALL real, public, POINTER, DIMENSION(:) :: XALB_ROOF real, public, POINTER, DIMENSION(:) :: XEMIS_ROOF real, public, POINTER, DIMENSION(:,:) :: XHC_ROOF real, public, POINTER, DIMENSION(:,:) :: XTC_ROOF real, public, POINTER, DIMENSION(:,:) :: XD_ROOF real, public, POINTER, DIMENSION(:) :: XROUGH_ROOF real, public, POINTER, DIMENSION(:) :: XALB_ROAD real, public, POINTER, DIMENSION(:) :: XEMIS_ROAD real, public, POINTER, DIMENSION(:,:) :: XHC_ROAD real, public, POINTER, DIMENSION(:,:) :: XTC_ROAD real, public, POINTER, DIMENSION(:,:) :: XD_ROAD real, public, POINTER, DIMENSION(:) :: XALB_WALL real, public, POINTER, DIMENSION(:) :: XEMIS_WALL real, public, POINTER, DIMENSION(:,:) :: XHC_WALL real, public, POINTER, DIMENSION(:,:) :: XTC_WALL real, public, POINTER, DIMENSION(:,:) :: XD_WALL real, public, POINTER, DIMENSION(:) :: XROUGH_WALL real, public, POINTER, DIMENSION(:) :: XRESIDENTIAL real, public :: XDT_RES real, public :: XDT_OFF real, public, POINTER, DIMENSION(:) :: XH_TRAFFIC real, public, POINTER, DIMENSION(:) :: XLE_TRAFFIC real, public, POINTER, DIMENSION(:) :: XH_INDUSTRY real, public, POINTER, DIMENSION(:) :: XLE_INDUSTRY real, public, POINTER, DIMENSION(:) :: XTI_ROAD real, public, POINTER, DIMENSION(:) :: XWS_ROOF real, public, POINTER, DIMENSION(:) :: XWS_ROAD real, public, POINTER, DIMENSION(:,:) :: XT_ROOF real, public, POINTER, DIMENSION(:,:) :: XT_ROAD real, public, POINTER, DIMENSION(:,:) :: XT_WALL_A real, public, POINTER, DIMENSION(:,:) :: XT_WALL_B real, public, POINTER, DIMENSION(:) :: XAC_ROOF real, public, POINTER, DIMENSION(:) :: XAC_ROAD real, public, POINTER, DIMENSION(:) :: XAC_WALL real, public, POINTER, DIMENSION(:) :: XAC_TOP real, public, POINTER, DIMENSION(:) :: XAC_ROOF_WAT real, public, POINTER, DIMENSION(:) :: XAC_ROAD_WAT real, public, POINTER, DIMENSION(:) :: XQSAT_ROOF real, public, POINTER, DIMENSION(:) :: XQSAT_ROAD real, public, POINTER, DIMENSION(:) :: XDELT_ROOF real, public, POINTER, DIMENSION(:) :: XDELT_ROAD real, public, POINTER, DIMENSION(:) :: XT_CANYON real, public, POINTER, DIMENSION(:) :: XQ_CANYON type(SURF_SNOW), public :: TSNOW_ROOF type(SURF_SNOW), public :: TSNOW_ROAD type(SURF_SNOW), public :: TSNOW_GARDEN type, public :: TEB_NP_t Components Type Visibility Attributes Name Initial type( TEB_t ), public, POINTER :: AL (:) => NULL() Subroutines public subroutine TEB_INIT (YTEB) Arguments Type Intent Optional Attributes Name type( TEB_t ), intent(inout) :: YTEB public subroutine TEB_NP_INIT (YNTEB, KPATCH) Arguments Type Intent Optional Attributes Name type( TEB_NP_t ), intent(inout) :: YNTEB integer, intent(in) :: KPATCH","tags":"","loc":"module/modd_teb_n.html"},{"title":"MODD_DATA_SEAFLUX_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK MODD_TYPE_DATE_SURF Contents Derived Types DATA_SEAFLUX_t Subroutines DATA_SEAFLUX_INIT Derived Types type, public :: DATA_SEAFLUX_t Components Type Visibility Attributes Name Initial type(DATE_TIME), public, POINTER, DIMENSION(:) :: TDATA_SST real, public, POINTER, DIMENSION(:,:) :: XDATA_SST integer, public :: NTIME logical, public :: LSST_DATA Subroutines public subroutine DATA_SEAFLUX_INIT (YDATA_SEAFLUX) Arguments Type Intent Optional Attributes Name type( DATA_SEAFLUX_t ), intent(inout) :: YDATA_SEAFLUX","tags":"","loc":"module/modd_data_seaflux_n.html"},{"title":"MODI_FLOOR_LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces FLOOR_LAYER_E_BUDGET Interfaces interface public subroutine FLOOR_LAYER_E_BUDGET(B, PTSTEP, PFLX_BLD_FL, PDQS_FL, PIMB_FL, PRADHT_IN, PRAD_WL_FL, PRAD_RF_FL, PRAD_WIN_FL, PLOAD_FL, PRAD_FL_MA, PCONV_FL_BLD) Arguments Type Intent Optional Attributes Name type(BEM_t), intent(inout) :: B real, intent(in) :: PTSTEP real, intent(out), DIMENSION(:) :: PFLX_BLD_FL real, intent(out), DIMENSION(:) :: PDQS_FL real, intent(out), DIMENSION(:) :: PIMB_FL real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PRAD_WL_FL real, intent(in), DIMENSION(:) :: PRAD_RF_FL real, intent(in), DIMENSION(:) :: PRAD_WIN_FL real, intent(in), DIMENSION(:) :: PLOAD_FL real, intent(out), DIMENSION(:) :: PRAD_FL_MA real, intent(out), DIMENSION(:) :: PCONV_FL_BLD","tags":"","loc":"module/modi_floor_layer_e_budget.html"},{"title":"MODD_DIAG_EVAP_ISBA_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types DIAG_EVAP_ISBA_t DIAG_EVAP_ISBA_NP_t Subroutines DIAG_EVAP_ISBA_NP_INIT DIAG_EVAP_ISBA_INIT Derived Types type, public :: DIAG_EVAP_ISBA_t Components Type Visibility Attributes Name Initial logical, public :: LSURF_EVAP_BUDGET logical, public :: LWATER_BUDGET real, public, POINTER, DIMENSION(:) :: XLEG real, public, POINTER, DIMENSION(:) :: XLEGI real, public, POINTER, DIMENSION(:) :: XLEV real, public, POINTER, DIMENSION(:) :: XLES real, public, POINTER, DIMENSION(:) :: XLESL real, public, POINTER, DIMENSION(:) :: XLER real, public, POINTER, DIMENSION(:) :: XLETR real, public, POINTER, DIMENSION(:) :: XUSTAR real, public, POINTER, DIMENSION(:) :: XSNDRIFT real, public, POINTER, DIMENSION(:) :: XRESTORE real, public, POINTER, DIMENSION(:) :: XDRAIN real, public, POINTER, DIMENSION(:) :: XQSB real, public, POINTER, DIMENSION(:) :: XRUNOFF real, public, POINTER, DIMENSION(:) :: XHORT real, public, POINTER, DIMENSION(:) :: XRRVEG real, public, POINTER, DIMENSION(:) :: XMELT real, public, POINTER, DIMENSION(:) :: XMELTADV real, public, POINTER, DIMENSION(:) :: XIFLOOD real, public, POINTER, DIMENSION(:) :: XPFLOOD real, public, POINTER, DIMENSION(:) :: XLE_FLOOD real, public, POINTER, DIMENSION(:) :: XLEI_FLOOD real, public, POINTER, DIMENSION(:) :: XICEFLUX real, public, POINTER, DIMENSION(:) :: XDRIP real, public, POINTER, DIMENSION(:) :: XIRRIG_FLUX real, public, POINTER, DIMENSION(:) :: XGPP real, public, POINTER, DIMENSION(:) :: XRESP_AUTO real, public, POINTER, DIMENSION(:) :: XRESP_ECO real, public, POINTER, DIMENSION(:) :: XLELITTER real, public, POINTER, DIMENSION(:) :: XLELITTERI real, public, POINTER, DIMENSION(:) :: XDRIPLIT real, public, POINTER, DIMENSION(:) :: XRRLIT real, public, POINTER, DIMENSION(:) :: XLEV_CV real, public, POINTER, DIMENSION(:) :: XLES_CV real, public, POINTER, DIMENSION(:) :: XLETR_CV real, public, POINTER, DIMENSION(:) :: XLER_CV real, public, POINTER, DIMENSION(:) :: XLE_CV real, public, POINTER, DIMENSION(:) :: XH_CV real, public, POINTER, DIMENSION(:) :: XMELT_CV real, public, POINTER, DIMENSION(:) :: XFRZ_CV real, public, POINTER, DIMENSION(:) :: XLETR_GV real, public, POINTER, DIMENSION(:) :: XLER_GV real, public, POINTER, DIMENSION(:) :: XLE_GV real, public, POINTER, DIMENSION(:) :: XH_GV real, public, POINTER, DIMENSION(:) :: XLE_GN real, public, POINTER, DIMENSION(:) :: XEVAP_GN real, public, POINTER, DIMENSION(:) :: XH_GN real, public, POINTER, DIMENSION(:) :: XSR_GN real, public, POINTER, DIMENSION(:) :: XSWDOWN_GN real, public, POINTER, DIMENSION(:) :: XLWDOWN_GN real, public, POINTER, DIMENSION(:) :: XEVAP_G real, public, POINTER, DIMENSION(:) :: XLE_CA real, public, POINTER, DIMENSION(:) :: XH_CA real, public, POINTER, DIMENSION(:) :: XSWUP real, public, POINTER, DIMENSION(:) :: XLWUP real, public, POINTER, DIMENSION(:) :: XSWNET_V real, public, POINTER, DIMENSION(:) :: XSWNET_G real, public, POINTER, DIMENSION(:) :: XSWNET_N real, public, POINTER, DIMENSION(:) :: XSWNET_NS real, public, POINTER, DIMENSION(:) :: XLWNET_V real, public, POINTER, DIMENSION(:) :: XLWNET_G real, public, POINTER, DIMENSION(:) :: XLWNET_N real, public, POINTER, DIMENSION(:) :: XDWG real, public, POINTER, DIMENSION(:) :: XDWGI real, public, POINTER, DIMENSION(:) :: XDWR real, public, POINTER, DIMENSION(:) :: XDSWE real, public, POINTER, DIMENSION(:) :: XWATBUD real, public, POINTER, DIMENSION(:) :: XRAINFALL real, public, POINTER, DIMENSION(:) :: XSNOWFALL real, public, POINTER, DIMENSION(:) :: XRN_SN_FR real, public, POINTER, DIMENSION(:) :: XH_SN_FR real, public, POINTER, DIMENSION(:) :: XLEI_SN_FR real, public, POINTER, DIMENSION(:) :: XLE_SN_FR real, public, POINTER, DIMENSION(:) :: XGFLUX_SN_FR real, public, POINTER, DIMENSION(:) :: XLEG_SN_FR real, public, POINTER, DIMENSION(:) :: XLEGI_SN_FR real, public, POINTER, DIMENSION(:) :: XLEV_SN_FR real, public, POINTER, DIMENSION(:) :: XLETR_SN_FR real, public, POINTER, DIMENSION(:) :: XUSTAR_SN_FR real, public, POINTER, DIMENSION(:) :: XLER_SN_FR type, public :: DIAG_EVAP_ISBA_NP_t Components Type Visibility Attributes Name Initial type( DIAG_EVAP_ISBA_t ), public, POINTER :: AL (:) => NULL() Subroutines public subroutine DIAG_EVAP_ISBA_NP_INIT (YNDIAG_EVAP_ISBA, KPATCH) Arguments Type Intent Optional Attributes Name type( DIAG_EVAP_ISBA_NP_t ), intent(inout) :: YNDIAG_EVAP_ISBA integer, intent(in) :: KPATCH public subroutine DIAG_EVAP_ISBA_INIT (DE) Arguments Type Intent Optional Attributes Name type( DIAG_EVAP_ISBA_t ), intent(inout) :: DE","tags":"","loc":"module/modd_diag_evap_isba_n.html"},{"title":"MODD_SLT_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types SLT_t Subroutines SLT_INIT Derived Types type, public :: SLT_t Components Type Visibility Attributes Name Initial real, public, DIMENSION(:), POINTER :: XEMISRADIUS_SLT real, public, DIMENSION(:), POINTER :: XEMISSIG_SLT Subroutines public subroutine SLT_INIT (YSLT) Arguments Type Intent Optional Attributes Name type( SLT_t ), intent(inout) :: YSLT","tags":"","loc":"module/modd_slt_n.html"},{"title":"MODI_SURFACE_RI – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces SURFACE_RI Interfaces interface public subroutine SURFACE_RI(PTG, PQS, PEXNS, PEXNA, PTA, PQA, PZREF, PUREF, PDIRCOSZW, PVMOD, PRI) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PTG real, intent(in), DIMENSION(:) :: PQS real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PDIRCOSZW real, intent(in), DIMENSION(:) :: PVMOD real, intent(out), DIMENSION(:) :: PRI","tags":"","loc":"module/modi_surface_ri.html"},{"title":"MODD_BEM_OPTION_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types BEM_OPTIONS_t Subroutines BEM_OPTIONS_INIT Derived Types type, public :: BEM_OPTIONS_t Components Type Visibility Attributes Name Initial integer, public :: NFLOOR_LAYER character(len=6), public :: CCOOL_COIL character(len=6), public :: CHEAT_COIL logical, public :: LAUTOSIZE Subroutines public subroutine BEM_OPTIONS_INIT (YBEM_OPTIONS) Arguments Type Intent Optional Attributes Name type( BEM_OPTIONS_t ), intent(inout) :: YBEM_OPTIONS","tags":"","loc":"module/modd_bem_option_n.html"},{"title":"MODD_OCEAN_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types OCEAN_t Subroutines OCEAN_INIT Derived Types type, public :: OCEAN_t Components Type Visibility Attributes Name Initial logical, public :: LMERCATOR logical, public :: LCURRENT logical, public :: LPROGSST integer, public :: NTIME_COUPLING integer, public :: NOCTCOUNT real, public :: XOCEAN_TSTEP real, public, POINTER, DIMENSION(:,:) :: XSEAT real, public, POINTER, DIMENSION(:,:) :: XSEAS real, public, POINTER, DIMENSION(:,:) :: XSEAU real, public, POINTER, DIMENSION(:,:) :: XSEAV real, public, POINTER, DIMENSION(:,:) :: XSEAE real, public, POINTER, DIMENSION(:,:) :: XSEABATH real, public, POINTER, DIMENSION(:) :: XSEAHMO real, public, POINTER, DIMENSION(:,:) :: XLE real, public, POINTER, DIMENSION(:,:) :: XLK real, public, POINTER, DIMENSION(:,:) :: XKMEL real, public, POINTER, DIMENSION(:,:) :: XKMELM real, public, POINTER, DIMENSION(:) :: XSEATEND real, public, POINTER, DIMENSION(:,:) :: XDTFSOL real, public, POINTER, DIMENSION(:) :: XDTFNSOL Subroutines public subroutine OCEAN_INIT (YOCEAN) Arguments Type Intent Optional Attributes Name type( OCEAN_t ), intent(inout) :: YOCEAN","tags":"","loc":"module/modd_ocean_n.html"},{"title":"MODI_INI_SURF_CSTS – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces INI_SURF_CSTS Interfaces interface public subroutine INI_SURF_CSTS() Arguments None","tags":"","loc":"module/modi_ini_surf_csts.html"},{"title":"MODI_SOLAR_PANEL – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces SOLAR_PANEL Interfaces interface public subroutine SOLAR_PANEL(TPN, DMT, PTSTEP, PTSUN, PRESIDENTIAL, PEMIT_LW_ROOF, PEMIT_LWDN_PANEL, PLW_RAD, PTA, PN_FLOOR, PPROD_BLD) Arguments Type Intent Optional Attributes Name type(TEB_PANEL_t), intent(inout) :: TPN type(DIAG_MISC_TEB_t), intent(inout) :: DMT real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PTSUN real, intent(in), DIMENSION(:) :: PRESIDENTIAL real, intent(in), DIMENSION(:) :: PEMIT_LW_ROOF real, intent(in), DIMENSION(:) :: PEMIT_LWDN_PANEL real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PN_FLOOR real, intent(out), DIMENSION(:) :: PPROD_BLD","tags":"","loc":"module/modi_solar_panel.html"},{"title":"MODE_POS_SURF – Town Energy Balance (TEB) model API docs","text":"Uses YOMHOOK MODI_ABOR1_SFX PARKIND1 Contents Interfaces POS Subroutines POSNAM POSKEY Interfaces public interface POS public subroutine POSNAM (KULNAM, HDNAML, OFOUND, KLUOUT) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KULNAM character(len=*), intent(in) :: HDNAML logical, intent(out) :: OFOUND integer, intent(in), optional :: KLUOUT public subroutine POSKEY (KULNAM, KLUOUT, HKEYWD1, HKEYWD2) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KULNAM integer, intent(in) :: KLUOUT character(len=*), intent(in) :: HKEYWD1 character(len=*), intent(in), optional :: HKEYWD2 Subroutines public subroutine POSNAM (KULNAM, HDNAML, OFOUND, KLUOUT) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KULNAM character(len=*), intent(in) :: HDNAML logical, intent(out) :: OFOUND integer, intent(in), optional :: KLUOUT public subroutine POSKEY (KULNAM, KLUOUT, HKEYWD1, HKEYWD2) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KULNAM integer, intent(in) :: KLUOUT character(len=*), intent(in) :: HKEYWD1 character(len=*), intent(in), optional :: HKEYWD2","tags":"","loc":"module/mode_pos_surf.html"},{"title":"MODI_MASS_LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces MASS_LAYER_E_BUDGET Interfaces interface public subroutine MASS_LAYER_E_BUDGET(B, PTSTEP, PFLX_BLD_MA, PDQS_MA, PIMB_MA, PRADHT_IN, PRAD_WL_MA, PRAD_RF_MA, PRAD_WIN_MA, PLOAD_MA, PRAD_FL_MA, PCONV_MA_BLD) Arguments Type Intent Optional Attributes Name type(BEM_t), intent(inout) :: B real, intent(in) :: PTSTEP real, intent(out), DIMENSION(:) :: PFLX_BLD_MA real, intent(out), DIMENSION(:) :: PDQS_MA real, intent(out), DIMENSION(:) :: PIMB_MA real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PRAD_WL_MA real, intent(in), DIMENSION(:) :: PRAD_RF_MA real, intent(in), DIMENSION(:) :: PRAD_WIN_MA real, intent(in), DIMENSION(:) :: PLOAD_MA real, intent(in), DIMENSION(:) :: PRAD_FL_MA real, intent(out), DIMENSION(:) :: PCONV_MA_BLD","tags":"","loc":"module/modi_mass_layer_e_budget.html"},{"title":"MODD_OCEAN_REL_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types OCEAN_REL_t Subroutines OCEAN_REL_INIT Derived Types type, public :: OCEAN_REL_t Components Type Visibility Attributes Name Initial real, public :: XTAU_REL real, public :: XQCORR logical, public :: LREL_CUR logical, public :: LREL_TS logical, public :: LFLUX_NULL logical, public :: LFLX_CORR logical, public :: LDIAPYCNAL real, public, POINTER, DIMENSION(:,:) :: XSEAU_REL real, public, POINTER, DIMENSION(:,:) :: XSEAV_REL real, public, POINTER, DIMENSION(:,:) :: XSEAT_REL real, public, POINTER, DIMENSION(:,:) :: XSEAS_REL Subroutines public subroutine OCEAN_REL_INIT (YOCEAN_REL) Arguments Type Intent Optional Attributes Name type( OCEAN_REL_t ), intent(inout) :: YOCEAN_REL","tags":"","loc":"module/modd_ocean_rel_n.html"},{"title":"MODI_URBAN_SNOW_EVOL – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces URBAN_SNOW_EVOL Interfaces interface public subroutine URBAN_SNOW_EVOL(T, B, PT_LWCN, PQ_LWCN, PU_LWCN, PTS_RF, PTS_RD, PTS_WL_A, PTS_WL_B, PPS, PTA, PQA, PRHOA, PLW_RAD, PSR, PZREF, PUREF, PVMOD, PTSTEP, PZ_LWCN, PDN_RF, PABS_SW_SN_RF, PABS_LW_SN_RF, PDN_RD, PABS_SW_SN_RD, PABS_LW_SN_RD, PRNSN_RF, PHSN_RF, PLESN_RF, PGSN_RF, PMELT_RF, PRNSN_RD, PHSN_RD, PLESN_RD, PGSN_RD, PMELT_RD, PLW_WA_TO_NR, PLW_WB_TO_NR, PLW_S_TO_NR, PLW_WIN_TO_NR, PDQS_SN_RF, PDQS_SN_RD) Arguments Type Intent Optional Attributes Name type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B real, intent(in), DIMENSION(:) :: PT_LWCN real, intent(in), DIMENSION(:) :: PQ_LWCN real, intent(in), DIMENSION(:) :: PU_LWCN real, intent(in), DIMENSION(:) :: PTS_RF real, intent(in), DIMENSION(:) :: PTS_RD real, intent(in), DIMENSION(:) :: PTS_WL_A real, intent(in), DIMENSION(:) :: PTS_WL_B real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PZ_LWCN real, intent(in), DIMENSION(:) :: PDN_RF real, intent(in), DIMENSION(:) :: PABS_SW_SN_RF real, intent(out), DIMENSION(:) :: PABS_LW_SN_RF real, intent(inout), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PABS_SW_SN_RD real, intent(out), DIMENSION(:) :: PABS_LW_SN_RD real, intent(out), DIMENSION(:) :: PRNSN_RF real, intent(out), DIMENSION(:) :: PHSN_RF real, intent(out), DIMENSION(:) :: PLESN_RF real, intent(out), DIMENSION(:) :: PGSN_RF real, intent(out), DIMENSION(:) :: PMELT_RF real, intent(out), DIMENSION(:) :: PRNSN_RD real, intent(out), DIMENSION(:) :: PHSN_RD real, intent(out), DIMENSION(:) :: PLESN_RD real, intent(out), DIMENSION(:) :: PGSN_RD real, intent(out), DIMENSION(:) :: PMELT_RD real, intent(in), DIMENSION(:) :: PLW_WA_TO_NR real, intent(in), DIMENSION(:) :: PLW_WB_TO_NR real, intent(in), DIMENSION(:) :: PLW_S_TO_NR real, intent(in), DIMENSION(:) :: PLW_WIN_TO_NR real, intent(out), DIMENSION(:) :: PDQS_SN_RF real, intent(out), DIMENSION(:) :: PDQS_SN_RD","tags":"","loc":"module/modi_urban_snow_evol.html"},{"title":"MODI_FLAG_GR_SNOW – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces FLAG_GR_SNOW Interfaces interface public subroutine FLAG_GR_SNOW(KFLAG, OMASK, TPSNOW) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KFLAG logical, intent(in), DIMENSION(:) :: OMASK type(SURF_SNOW), intent(inout) :: TPSNOW","tags":"","loc":"module/modi_flag_gr_snow.html"},{"title":"MODD_DATA_TEB_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types DATA_TEB_t Subroutines DATA_TEB_INIT Derived Types type, public :: DATA_TEB_t Components Type Visibility Attributes Name Initial logical, public :: LDATA_BLDTYPE logical, public :: LDATA_BLD_AGE logical, public :: LDATA_USETYPE logical, public :: LDATA_GARDEN logical, public :: LDATA_GREENROOF logical, public :: LDATA_ROAD_DIR logical, public :: LDATA_BLD logical, public :: LDATA_BLD_HEIGHT logical, public :: LDATA_WALL_O_HOR logical, public :: LDATA_Z0_TOWN logical, public :: LDATA_ALB_ROOF logical, public :: LDATA_EMIS_ROOF logical, public :: LDATA_HC_ROOF logical, public :: LDATA_TC_ROOF logical, public :: LDATA_D_ROOF logical, public :: LDATA_ALB_ROAD logical, public :: LDATA_EMIS_ROAD logical, public :: LDATA_HC_ROAD logical, public :: LDATA_TC_ROAD logical, public :: LDATA_D_ROAD logical, public :: LDATA_ALB_WALL logical, public :: LDATA_EMIS_WALL logical, public :: LDATA_HC_WALL logical, public :: LDATA_TC_WALL logical, public :: LDATA_D_WALL logical, public :: LDATA_H_TRAFFIC logical, public :: LDATA_LE_TRAFFIC logical, public :: LDATA_LE_INDUSTRY logical, public :: LDATA_H_INDUSTRY logical, public :: LDATA_ROUGH_ROOF logical, public :: LDATA_ROUGH_WALL logical, public :: LDATA_RESIDENTIAL logical, public :: LDATA_EMIS_PANEL logical, public :: LDATA_ALB_PANEL logical, public :: LDATA_EFF_PANEL logical, public :: LDATA_FRAC_PANEL integer, public :: NPAR_ROOF_LAYER integer, public :: NPAR_ROAD_LAYER integer, public :: NPAR_WALL_LAYER integer, public, POINTER, DIMENSION(:) :: NPAR_BLDTYPE integer, public, POINTER, DIMENSION(:) :: NPAR_BLD_AGE integer, public, POINTER, DIMENSION(:) :: NPAR_BLDCODE integer, public, POINTER, DIMENSION(:) :: NPAR_USETYPE real, public, POINTER, DIMENSION(:) :: XPAR_GARDEN real, public, POINTER, DIMENSION(:) :: XPAR_GREENROOF real, public, POINTER, DIMENSION(:) :: XPAR_ROAD_DIR real, public, POINTER, DIMENSION(:) :: XPAR_BLD real, public, POINTER, DIMENSION(:) :: XPAR_BLD_HEIGHT real, public, POINTER, DIMENSION(:) :: XPAR_WALL_O_HOR real, public, POINTER, DIMENSION(:) :: XPAR_Z0_TOWN real, public, POINTER, DIMENSION(:) :: XPAR_ALB_ROOF real, public, POINTER, DIMENSION(:) :: XPAR_EMIS_ROOF real, public, POINTER, DIMENSION(:,:) :: XPAR_HC_ROOF real, public, POINTER, DIMENSION(:,:) :: XPAR_TC_ROOF real, public, POINTER, DIMENSION(:,:) :: XPAR_D_ROOF real, public, POINTER, DIMENSION(:) :: XPAR_ROUGH_ROOF real, public, POINTER, DIMENSION(:) :: XPAR_ALB_ROAD real, public, POINTER, DIMENSION(:) :: XPAR_EMIS_ROAD real, public, POINTER, DIMENSION(:,:) :: XPAR_HC_ROAD real, public, POINTER, DIMENSION(:,:) :: XPAR_TC_ROAD real, public, POINTER, DIMENSION(:,:) :: XPAR_D_ROAD real, public, POINTER, DIMENSION(:) :: XPAR_ALB_WALL real, public, POINTER, DIMENSION(:) :: XPAR_EMIS_WALL real, public, POINTER, DIMENSION(:,:) :: XPAR_HC_WALL real, public, POINTER, DIMENSION(:,:) :: XPAR_TC_WALL real, public, POINTER, DIMENSION(:,:) :: XPAR_D_WALL real, public, POINTER, DIMENSION(:) :: XPAR_ROUGH_WALL real, public, POINTER, DIMENSION(:) :: XPAR_H_TRAFFIC real, public, POINTER, DIMENSION(:) :: XPAR_LE_TRAFFIC real, public, POINTER, DIMENSION(:) :: XPAR_H_INDUSTRY real, public, POINTER, DIMENSION(:) :: XPAR_LE_INDUSTRY real, public, POINTER, DIMENSION(:) :: XPAR_EMIS_PANEL real, public, POINTER, DIMENSION(:) :: XPAR_ALB_PANEL real, public, POINTER, DIMENSION(:) :: XPAR_EFF_PANEL real, public, POINTER, DIMENSION(:) :: XPAR_FRAC_PANEL real, public, POINTER, DIMENSION(:) :: XPAR_RESIDENTIAL Subroutines public subroutine DATA_TEB_INIT (YDATA_TEB) Arguments Type Intent Optional Attributes Name type( DATA_TEB_t ), intent(inout) :: YDATA_TEB","tags":"","loc":"module/modd_data_teb_n.html"},{"title":"MODI_ISBA_SNOW_FRAC – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces ISBA_SNOW_FRAC Interfaces interface public subroutine ISBA_SNOW_FRAC(HSNOW, PWSNOW, PRSNOW, PASNOW, PVEG, PLAI, PZ0, PPSN, PPSNV_A, PPSNG, PPSNV) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: HSNOW real, intent(in), DIMENSION(:,:) :: PWSNOW real, intent(in), DIMENSION(:,:) :: PRSNOW real, intent(in), DIMENSION(:) :: PASNOW real, intent(in), DIMENSION(:) :: PVEG real, intent(in), DIMENSION(:) :: PLAI real, intent(in), DIMENSION(:) :: PZ0 real, intent(inout), DIMENSION(:) :: PPSN real, intent(inout), DIMENSION(:) :: PPSNV_A real, intent(inout), DIMENSION(:) :: PPSNG real, intent(inout), DIMENSION(:) :: PPSNV","tags":"","loc":"module/modi_isba_snow_frac.html"},{"title":"MODD_TEB_PANEL_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types TEB_PANEL_t Subroutines TEB_PANEL_INIT Derived Types type, public :: TEB_PANEL_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:) :: XEMIS_PANEL real, public, POINTER, DIMENSION(:) :: XALB_PANEL real, public, POINTER, DIMENSION(:) :: XEFF_PANEL real, public, POINTER, DIMENSION(:) :: XFRAC_PANEL real, public, POINTER, DIMENSION(:) :: XTHER_PRODC_DAY Subroutines public subroutine TEB_PANEL_INIT (YTEB_PANEL) Arguments Type Intent Optional Attributes Name type( TEB_PANEL_t ), intent(inout) :: YTEB_PANEL","tags":"","loc":"module/modd_teb_panel_n.html"},{"title":"MODD_PREP_SNOW – Town Energy Balance (TEB) model API docs","text":"Uses MODD_SNOW_PAR Contents Variables XWSNOW_CLIM_GRAD LSNOW_FRAC_TOT NSNOW_LAYER_MAX LSNOW_PREP_PERM NGRID_LEVEL XGRID_SNOW Variables Type Visibility Attributes Name Initial real, public, parameter :: XWSNOW_CLIM_GRAD = -0.08*300.*(-0.0065) logical, public :: LSNOW_FRAC_TOT integer, public, parameter :: NSNOW_LAYER_MAX = 50 logical, public :: LSNOW_PREP_PERM integer, public, parameter :: NGRID_LEVEL = 40 real, public, DIMENSION(NGRID_LEVEL) :: XGRID_SNOW = (/0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.08, 0.10, 0.12, 0.14, 0.16, 0.18, 0.21, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50, 0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.87, 0.88, 0.89, 0.90, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 1.00/)","tags":"","loc":"module/modd_prep_snow.html"},{"title":"MODD_CH_SNAP_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK MODD_TYPE_EFUTIL Contents Derived Types CH_EMIS_SNAP_t Subroutines CH_EMIS_SNAP_INIT Derived Types type, public :: CH_EMIS_SNAP_t Components Type Visibility Attributes Name Initial integer, public :: NEMIS_NBR character(len=3), public :: CCONVERSION character(len=5), public :: CSNAP_TIME_REF character(len=12), public, DIMENSION(:), POINTER :: CEMIS_NAME character(len=40), public, DIMENSION(:), POINTER :: CEMIS_COMMENT real, public, DIMENSION(:,:,:), POINTER :: XEMIS_FIELDS_SNAP real, public, DIMENSION(:,:), POINTER :: XEMIS_FIELDS real, public, DIMENSION(:), POINTER :: XDELTA_LEGAL_TIME integer, public :: NEMIS_SNAP integer, public :: NSNAP_M integer, public :: NSNAP_D integer, public :: NSNAP_H real, public, DIMENSION(:,:,:), POINTER :: XSNAP_MONTHLY real, public, DIMENSION(:,:,:), POINTER :: XSNAP_DAILY real, public, DIMENSION(:,:,:), POINTER :: XSNAP_HOURLY real, public, DIMENSION(:), POINTER :: XCONVERSION type(PRONOSVAR_T), public, POINTER :: TSPRONOSLIST Subroutines public subroutine CH_EMIS_SNAP_INIT (YCH_EMIS_SNAP) Arguments Type Intent Optional Attributes Name type( CH_EMIS_SNAP_t ), intent(inout) :: YCH_EMIS_SNAP","tags":"","loc":"module/modd_ch_snap_n.html"},{"title":"MODI_WALL_LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces WALL_LAYER_E_BUDGET Interfaces interface public subroutine WALL_LAYER_E_BUDGET(TOP, T, B, PT_WL, PTS_WL_B, PTI_WL_B, PTSTEP, PDN_RD, PRHOA, PAC_WL, PAC_BLD, PLW_RAD, PPS, PEXNS, PABS_SW_WL, PT_CANYON, PTS_RD, PTSNOW_RD, PTS_GD, PTS_FL, PLW_WA_TO_WB, PLW_R_TO_W, PLW_G_TO_W, PLW_NR_TO_W, PLW_WIN_TO_W, PLW_S_TO_W, PFLX_BLD_WL, PDQS_WL, PABS_LW_WL, PEMIT_LW_WL, PH_WL, PIMB_WL, PRADHT_IN, PRAD_RF_WL, PRAD_WL_WIN, PRAD_WL_FL, PRAD_WL_MA, PCONV_WL_BLD, PLOAD_IN_WL) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B real, intent(inout), DIMENSION(:,:) :: PT_WL real, intent(in), DIMENSION(:) :: PTS_WL_B real, intent(in), DIMENSION(:) :: PTI_WL_B real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PAC_WL real, intent(in), DIMENSION(:) :: PAC_BLD real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PABS_SW_WL real, intent(in), DIMENSION(:) :: PT_CANYON real, intent(in), DIMENSION(:) :: PTS_RD real, intent(in), DIMENSION(:) :: PTSNOW_RD real, intent(in), DIMENSION(:) :: PTS_GD real, intent(in), DIMENSION(:) :: PTS_FL real, intent(in), DIMENSION(:) :: PLW_WA_TO_WB real, intent(in), DIMENSION(:) :: PLW_R_TO_W real, intent(in), DIMENSION(:) :: PLW_G_TO_W real, intent(in), DIMENSION(:) :: PLW_NR_TO_W real, intent(in), DIMENSION(:) :: PLW_WIN_TO_W real, intent(in), DIMENSION(:) :: PLW_S_TO_W real, intent(out), DIMENSION(:) :: PFLX_BLD_WL real, intent(inout), DIMENSION(:) :: PDQS_WL real, intent(out), DIMENSION(:) :: PABS_LW_WL real, intent(out), DIMENSION(:) :: PEMIT_LW_WL real, intent(out), DIMENSION(:) :: PH_WL real, intent(out), DIMENSION(:) :: PIMB_WL real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PRAD_RF_WL real, intent(out), DIMENSION(:) :: PRAD_WL_WIN real, intent(out), DIMENSION(:) :: PRAD_WL_FL real, intent(out), DIMENSION(:) :: PRAD_WL_MA real, intent(out), DIMENSION(:) :: PCONV_WL_BLD real, intent(in), DIMENSION(:) :: PLOAD_IN_WL","tags":"","loc":"module/modi_wall_layer_e_budget.html"},{"title":"MODD_DATA_TSZ0_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types DATA_TSZ0_t Subroutines DATA_TSZ0_INIT Derived Types type, public :: DATA_TSZ0_t Components Type Visibility Attributes Name Initial integer, public :: NTIME real, public, POINTER, DIMENSION(:) :: XDATA_DTS real, public, POINTER, DIMENSION(:) :: XDATA_DHUGRD Subroutines public subroutine DATA_TSZ0_INIT (YDATA_TSZ0) Arguments Type Intent Optional Attributes Name type( DATA_TSZ0_t ), intent(inout) :: YDATA_TSZ0","tags":"","loc":"module/modd_data_tsz0_n.html"},{"title":"MODD_DATA_COVER_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types DATA_COVER_t Subroutines DATA_COVER_INIT Derived Types type, public :: DATA_COVER_t Components Type Visibility Attributes Name Initial real, public, DIMENSION(:,:,:), POINTER :: XDATA_WEIGHT real, public, DIMENSION(:), POINTER :: XDATA_TOWN real, public, DIMENSION(:), POINTER :: XDATA_NATURE real, public, DIMENSION(:), POINTER :: XDATA_SEA real, public, DIMENSION(:), POINTER :: XDATA_WATER real, public, DIMENSION(:,:), POINTER :: XDATA_VEGTYPE real, public, DIMENSION(:), POINTER :: XDATA_GARDEN real, public, DIMENSION(:), POINTER :: XDATA_BLD real, public, DIMENSION(:), POINTER :: XDATA_WALL_O_HOR logical, public :: LGARDEN integer, public :: NYEAR Subroutines public subroutine DATA_COVER_INIT (YDATA_COVER) Arguments Type Intent Optional Attributes Name type( DATA_COVER_t ), intent(inout) :: YDATA_COVER","tags":"","loc":"module/modd_data_cover_n.html"},{"title":"MODI_URBAN_EXCH_COEF – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces URBAN_EXCH_COEF Interfaces interface public subroutine URBAN_EXCH_COEF(HZ0H, PZ0_O_Z0H, PTG, PQS, PEXNS, PEXNA, PTA, PQA, PZREF, PUREF, PVMOD, PZ0, PRI, PCD, PCDN, PAC, PRA, PCH) Arguments Type Intent Optional Attributes Name character(len=6) :: HZ0H real, intent(in) :: PZ0_O_Z0H real, intent(in), DIMENSION(:) :: PTG real, intent(in), DIMENSION(:) :: PQS real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PZ0 real, intent(out), DIMENSION(:) :: PRI real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN real, intent(out), DIMENSION(:) :: PAC real, intent(out), DIMENSION(:) :: PRA real, intent(out), DIMENSION(:) :: PCH","tags":"","loc":"module/modi_urban_exch_coef.html"},{"title":"MODI_DX_AIR_COOLING_COIL_CV – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces DX_AIR_COOLING_COIL_CV Interfaces interface public subroutine DX_AIR_COOLING_COIL_CV(PT_CANYON, PQ_CANYON, PPS, PRHOA, PT_IN, PQ_IN, PCOP_RAT, PCAP_SYS_RAT, PT_ADP, PF_WATER_COND, PM_SYS, PH_BLD_COOL, PH_WASTE, PLE_WASTE, PCOP, PCAP_SYS, PT_OUT, PQ_OUT, PDX_POWER, PT_BLD_COOL) Arguments Type Intent Optional Attributes Name real, intent(in) :: PT_CANYON real, intent(in) :: PQ_CANYON real, intent(in) :: PPS real, intent(in) :: PRHOA real, intent(in) :: PT_IN real, intent(in) :: PQ_IN real, intent(in) :: PCOP_RAT real, intent(in) :: PCAP_SYS_RAT real, intent(in) :: PT_ADP real, intent(in) :: PF_WATER_COND real, intent(inout) :: PM_SYS real, intent(inout) :: PH_BLD_COOL real, intent(out) :: PH_WASTE real, intent(out) :: PLE_WASTE real, intent(out) :: PCOP real, intent(out) :: PCAP_SYS real, intent(out) :: PT_OUT real, intent(out) :: PQ_OUT real, intent(out) :: PDX_POWER real, intent(out) :: PT_BLD_COOL","tags":"","loc":"module/modi_dx_air_cooling_coil_cv.html"},{"title":"MODD_DIAG_MISC_SEAICE_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types DIAG_MISC_SEAICE_t Subroutines DIAG_MISC_SEAICE_INIT Derived Types type, public :: DIAG_MISC_SEAICE_t Components Type Visibility Attributes Name Initial logical, public :: LDIAG_MISC_SEAICE real, public, POINTER, DIMENSION(:) :: XSIT real, public, POINTER, DIMENSION(:) :: XSND real, public, POINTER, DIMENSION(:) :: XMLT Subroutines public subroutine DIAG_MISC_SEAICE_INIT (YDIAG_MISC_SEAICE) Arguments Type Intent Optional Attributes Name type( DIAG_MISC_SEAICE_t ), intent(inout) :: YDIAG_MISC_SEAICE","tags":"","loc":"module/modd_diag_misc_seaice_n.html"},{"title":"MODI_WIND_THRESHOLD – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces WIND_THRESHOLD Interfaces interface public function WIND_THRESHOLD(PWIND, PUREF) result(PWIND_NEW) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWIND real, intent(in), DIMENSION(:) :: PUREF Return Value real,\n  DIMENSION(SIZE(PWIND))","tags":"","loc":"module/modi_wind_threshold.html"},{"title":"MODI_ROAD_LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces ROAD_LAYER_E_BUDGET Interfaces interface public subroutine ROAD_LAYER_E_BUDGET(T, B, PTSTEP, PDN_ROAD, PRHOA, PAC_ROAD, PAC_ROAD_WAT, PLW_RAD, PPS, PQSAT_ROAD, PDELT_ROAD, PEXNS, PABS_SW_ROAD, PGSNOW_ROAD, PQ_LOWCAN, PT_LOWCAN, PTS_WALL_A, PTS_WALL_B, PTSNOW_ROAD, PTS_GARDEN, PLW_WA_TO_R, PLW_WB_TO_R, PLW_S_TO_R, PLW_WIN_TO_R, PEMIT_LW_ROAD, PDQS_ROAD, PABS_LW_ROAD, PHFREE_ROAD, PLEFREE_ROAD, PIMB_ROAD, PRR) Arguments Type Intent Optional Attributes Name type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PDN_ROAD real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PAC_ROAD real, intent(in), DIMENSION(:) :: PAC_ROAD_WAT real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PQSAT_ROAD real, intent(in), DIMENSION(:) :: PDELT_ROAD real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PABS_SW_ROAD real, intent(in), DIMENSION(:) :: PGSNOW_ROAD real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PTS_WALL_A real, intent(in), DIMENSION(:) :: PTS_WALL_B real, intent(in), DIMENSION(:) :: PTSNOW_ROAD real, intent(in), DIMENSION(:) :: PTS_GARDEN real, intent(in), DIMENSION(:) :: PLW_WA_TO_R real, intent(in), DIMENSION(:) :: PLW_WB_TO_R real, intent(in), DIMENSION(:) :: PLW_S_TO_R real, intent(in), DIMENSION(:) :: PLW_WIN_TO_R real, intent(out), DIMENSION(:) :: PEMIT_LW_ROAD real, intent(out), DIMENSION(:) :: PDQS_ROAD real, intent(out), DIMENSION(:) :: PABS_LW_ROAD real, intent(out), DIMENSION(:) :: PHFREE_ROAD real, intent(out), DIMENSION(:) :: PLEFREE_ROAD real, intent(out), DIMENSION(:) :: PIMB_ROAD real, intent(in), DIMENSION(:) :: PRR","tags":"","loc":"module/modi_road_layer_e_budget.html"},{"title":"MODD_TEB_OPTION_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK MODD_TYPE_DATE_SURF Contents Derived Types TEB_OPTIONS_t Subroutines TEB_OPTIONS_INIT Derived Types type, public :: TEB_OPTIONS_t Components Type Visibility Attributes Name Initial logical, public :: LCANOPY logical, public :: LGARDEN character(len=4), public :: CROAD_DIR character(len=4), public :: CWALL_OPT character(len=3), public :: CBLD_ATYPE character(len=6), public :: CZ0H character(len=5), public :: CCH_BEM character(len=3), public :: CBEM character(len=3), public :: CTREE logical, public :: LGREENROOF logical, public :: LHYDRO logical, public :: LSOLAR_PANEL logical, public :: LECOCLIMAP real, public, POINTER, DIMENSION(:) :: XZS real, public, POINTER, DIMENSION(:,:) :: XCOVER logical, public, POINTER, DIMENSION(:) :: LCOVER integer, public :: NTEB_PATCH real, public, POINTER, DIMENSION(:,:) :: XTEB_PATCH integer, public :: NROOF_LAYER integer, public :: NROAD_LAYER integer, public :: NWALL_LAYER type(DATE_TIME), public :: TTIME real, public :: XTSTEP real, public :: XOUT_TSTEP Subroutines public subroutine TEB_OPTIONS_INIT (YTEB_OPTIONS) Arguments Type Intent Optional Attributes Name type( TEB_OPTIONS_t ), intent(inout) :: YTEB_OPTIONS","tags":"","loc":"module/modd_teb_option_n.html"},{"title":"MODD_SNOW_PAR – Town Energy Balance (TEB) model API docs","text":"Contents Variables XEMISSN XANSMIN XANSMAX XAGLAMIN XAGLAMAX LMEBREC XANSFRACMEL XTEMPANS XANSMINMEB XALBICE1 XALBICE2 XALBICE3 XRHOTHRESHOLD_ICE XVAGING_NOGLACIER XVAGING_GLACIER XPERCENTAGEPORE XHGLA XWSNV XZ0SN XZ0HSN XZ0ICEZ0SNOW XTAU_SMELT XWCRN XWCRN_EXPL XWCRN_ROOF XWCRN_ROAD XWCRN_VEG XDCRN_EXPL XEMCRIN XANSMIN_ROOF XANSMIN_ROAD XANSMAX_ROOF XANSMAX_ROAD XANS_TODRY XANS_TODRY_ROOF XANS_TODRY_ROAD XANS_TODRY_MEB XANS_T XANS_T_ROOF XANS_T_ROAD XANS_T_MEB XRHOSMIN XRHOSMIN_ROOF XRHOSMIN_ROAD XRHOSMAX XRHOSMAX_ROOF XRHOSMAX_ROAD XRHOSMIN_ES XRHOSMAX_ES XSNOWCRITD XSNOWDMIN X_RI_MAX XWSNOWHOLDMAX2 XWSNOWHOLDMAX1 XSNOWRHOHOLD XSNOW_AGRAIN XSNOW_BGRAIN XSNOW_CGRAIN XDSGRAIN_MAX XD1 XD2 XD3 XX XVALB2 XVALB3 XVALB4 XVALB5 XVALB6 XVALB7 XVALB8 XVALB9 XVALB10 XVALB11 XVDIOP1 XVRPRE1 XVRPRE2 XVPRES1 NSPEC_BAND_SNOW XVSPEC1 XVSPEC2 XVSPEC3 XVW1 XVW2 XVD1 XVD2 XVBETA1 XVBETA2 XVBETA3 XVBETA4 XVBETA5 XMINCOSZEN XSNOWTHRMCOND1 XSNOWTHRMCOND2 XSNOWTHRMCOND_AVAP XSNOWTHRMCOND_BVAP XSNOWTHRMCOND_CVAP XVRKZ6 XSNOWFALL_A_SN XSNOWFALL_B_SN XSNOWFALL_C_SN XDZ1 XDZ2 XDZ3 XDZ3_BIS XDZ4 XDZ5 XDZ_BASE XDZ_INTERNAL XSCALE_CM XDZMAX_INTERNAL XDZMIN_TOP_EXTREM XSNOWFALL_THRESHOLD XRATIO_NEWLAYER XDEPTH_THRESHOLD1 XDEPTH_THRESHOLD2 XDEPTH_SURFACE XDIFF_1 XDIFF_MAX XSCALE_DIFF XDZMIN_TOP XDZMIN_TOP_BIS XDZMIN_BOT XSPLIT_COEF XAGREG_COEF_1 XAGREG_COEF_2 XVTIME XVROMAX XVROMIN XVMOB1 XVMOB2 XVMOB3 XVMOB4 XVDRIFT1 XVDRIFT2 XVDRIFT3 XVSIZEMIN XCOEF_FF XCOEF_EFFECT XQS_REF XSGCOEF1 XSGCOEF2 XSGCOEF3 XSNOWTRANS XSNOWTRANS1 XSNOWTRANS2 XSNOWTRANS3 XSNOWTRANS4 XSNOWTRANS5 IFR IFR_LB ILB ILB_FIN ILB_ANG IROUL IFIN IFIN_AR IFIN_ANG IPL IPL_GOB IGOB IGEL IGOB_FON IRON_ANG ICRIS_DEND1D ICRIS_NONDEND1D Variables Type Visibility Attributes Name Initial real, public, SAVE :: XEMISSN real, public, SAVE :: XANSMIN real, public, SAVE :: XANSMAX real, public, SAVE :: XAGLAMIN real, public, SAVE :: XAGLAMAX logical, public, SAVE :: LMEBREC real, public, SAVE :: XANSFRACMEL real, public, SAVE :: XTEMPANS real, public, SAVE :: XANSMINMEB real, public, SAVE :: XALBICE1 real, public, SAVE :: XALBICE2 real, public, SAVE :: XALBICE3 real, public, SAVE :: XRHOTHRESHOLD_ICE real, public, SAVE :: XVAGING_NOGLACIER real, public, SAVE :: XVAGING_GLACIER real, public, SAVE :: XPERCENTAGEPORE real, public, SAVE :: XHGLA real, public, SAVE :: XWSNV real, public, SAVE :: XZ0SN real, public, SAVE :: XZ0HSN real, public, SAVE :: XZ0ICEZ0SNOW real, public, SAVE :: XTAU_SMELT real, public, parameter :: XWCRN = 10.0 real, public, parameter :: XWCRN_EXPL = 1.0 real, public, parameter :: XWCRN_ROOF = 1.0 real, public, parameter :: XWCRN_ROAD = 1.0 real, public, parameter :: XWCRN_VEG = 1.0 real, public, parameter :: XDCRN_EXPL = 0.01 real, public, parameter :: XEMCRIN = 0.98 real, public, parameter :: XANSMIN_ROOF = 0.30 real, public, parameter :: XANSMIN_ROAD = 0.15 real, public, parameter :: XANSMAX_ROOF = 0.85 real, public, parameter :: XANSMAX_ROAD = 0.85 real, public, parameter :: XANS_TODRY = 0.008 real, public, parameter :: XANS_TODRY_ROOF = 0.008 real, public, parameter :: XANS_TODRY_ROAD = 0.008 real, public, parameter :: XANS_TODRY_MEB = 0.016 real, public, parameter :: XANS_T = 0.240 real, public, parameter :: XANS_T_ROOF = 0.174 real, public, parameter :: XANS_T_ROAD = 0.174 real, public, parameter :: XANS_T_MEB = 0.480 real, public, parameter :: XRHOSMIN = 100. real, public, parameter :: XRHOSMIN_ROOF = 100. real, public, parameter :: XRHOSMIN_ROAD = 100. real, public, parameter :: XRHOSMAX = 300. real, public, parameter :: XRHOSMAX_ROOF = 300. real, public, parameter :: XRHOSMAX_ROAD = 350. real, public, parameter :: XRHOSMIN_ES = 50. real, public, parameter :: XRHOSMAX_ES = 750. real, public, parameter :: XSNOWCRITD = 0.03 real, public, parameter :: XSNOWDMIN = 0.000001 real, public, parameter :: X_RI_MAX = 0.20 real, public, parameter :: XWSNOWHOLDMAX2 = 0.10 real, public, parameter :: XWSNOWHOLDMAX1 = 0.03 real, public, parameter :: XSNOWRHOHOLD = 200.0 real, public, parameter :: XSNOW_AGRAIN = 1.6e-4 real, public, parameter :: XSNOW_BGRAIN = 1.1e-13 real, public, parameter :: XSNOW_CGRAIN = 0.5e-4 real, public, parameter :: XDSGRAIN_MAX = 2.796e-3 real, public, parameter :: XD1 = 1. real, public, parameter :: XD2 = 3. real, public, parameter :: XD3 = 4. real, public, parameter :: XX = 99. real, public, parameter :: XVALB2 = .96 real, public, parameter :: XVALB3 = 1.58 real, public, parameter :: XVALB4 = .92 real, public, parameter :: XVALB5 = .90 real, public, parameter :: XVALB6 = 15.4 real, public, parameter :: XVALB7 = 346.3 real, public, parameter :: XVALB8 = 32.31 real, public, parameter :: XVALB9 = .88 real, public, parameter :: XVALB10 = .200 real, public, parameter :: XVALB11 = .6 real, public, parameter :: XVDIOP1 = 2.3E-3 real, public, parameter :: XVRPRE1 = .5 real, public, parameter :: XVRPRE2 = 1.5 real, public, parameter :: XVPRES1 = 87000. integer, public, parameter :: NSPEC_BAND_SNOW = 3 real, public, parameter :: XVSPEC1 = .71 real, public, parameter :: XVSPEC2 = .21 real, public, parameter :: XVSPEC3 = .08 real, public, parameter :: XVW1 = .80 real, public, parameter :: XVW2 = .20 real, public, parameter :: XVD1 = .02 real, public, parameter :: XVD2 = .01 real, public, parameter :: XVBETA1 = 1.92E-3 real, public, parameter :: XVBETA2 = 40. real, public, parameter :: XVBETA3 = 1.098E-2 real, public, parameter :: XVBETA4 = 100. real, public, parameter :: XVBETA5 = 2000. real, public, parameter :: XMINCOSZEN = 0.01 real, public, parameter :: XSNOWTHRMCOND1 = 0.02 real, public, parameter :: XSNOWTHRMCOND2 = 2.5E-6 real, public, parameter :: XSNOWTHRMCOND_AVAP = -0.06023 real, public, parameter :: XSNOWTHRMCOND_BVAP = -2.5425 real, public, parameter :: XSNOWTHRMCOND_CVAP = -289.99 real, public, parameter :: XVRKZ6 = 1.88 real, public, parameter :: XSNOWFALL_A_SN = 109.0 real, public, parameter :: XSNOWFALL_B_SN = 6.0 real, public, parameter :: XSNOWFALL_C_SN = 26.0 real, public, parameter :: XDZ1 = 0.01 real, public, parameter :: XDZ2 = 0.0125 real, public, parameter :: XDZ3 = 0.015 real, public, parameter :: XDZ3_BIS = 0.03 real, public, parameter :: XDZ4 = 0.04 real, public, parameter :: XDZ5 = 0.05 real, public, parameter :: XDZ_BASE = 0.02 real, public, parameter :: XDZ_INTERNAL = 0.07 real, public, parameter :: XSCALE_CM = 100. real, public, parameter, DIMENSION(5) :: XDZMAX_INTERNAL = (/0.5, 1., 2., 4., 10./) real, public, parameter :: XDZMIN_TOP_EXTREM = 0.0001 real, public, parameter :: XSNOWFALL_THRESHOLD = 0.0333/3600. real, public, parameter :: XRATIO_NEWLAYER = 0.1 real, public, parameter :: XDEPTH_THRESHOLD1 = 3. real, public, parameter :: XDEPTH_THRESHOLD2 = 20. real, public, parameter :: XDEPTH_SURFACE = 3. real, public, parameter :: XDIFF_1 = 20. real, public, parameter :: XDIFF_MAX = 200. real, public, parameter :: XSCALE_DIFF = 25. real, public, parameter :: XDZMIN_TOP = 0.01 real, public, parameter :: XDZMIN_TOP_BIS = 0.005 real, public, parameter :: XDZMIN_BOT = 0.02 real, public, parameter :: XSPLIT_COEF = 8. real, public, parameter :: XAGREG_COEF_1 = 5. real, public, parameter :: XAGREG_COEF_2 = 4.5 real, public, parameter :: XVTIME = 48*3600. real, public, parameter :: XVROMAX = 350. real, public, parameter :: XVROMIN = 50. real, public, parameter :: XVMOB1 = 0.295 real, public, parameter :: XVMOB2 = 0.833 real, public, parameter :: XVMOB3 = 0.583 real, public, parameter :: XVMOB4 = -0.0583 real, public, parameter :: XVDRIFT1 = 2.868 real, public, parameter :: XVDRIFT2 = 0.085 real, public, parameter :: XVDRIFT3 = 3.25 real, public, parameter :: XVSIZEMIN = 3.E-4 real, public, parameter :: XCOEF_FF = 1.25 real, public, parameter :: XCOEF_EFFECT = 1.0 real, public, parameter :: XQS_REF = 2.E-5 real, public, parameter, DIMENSION(3) :: XSGCOEF1 = (/0.25, 0.50, 0.25/) real, public, parameter, DIMENSION(2) :: XSGCOEF2 = (/0.05, 0.34/) real, public, parameter, DIMENSION(10) :: XSGCOEF3 = (/0.025, 0.033, 0.043, 0.055, 0.071, 0.091, 0.117, 0.150, 0.193, 0.247/) real, public, parameter :: XSNOWTRANS = 0.20 real, public, parameter :: XSNOWTRANS1 = 0.40 real, public, parameter :: XSNOWTRANS2 = 0.6061 real, public, parameter :: XSNOWTRANS3 = 0.7143 real, public, parameter :: XSNOWTRANS4 = 0.9259 real, public, parameter :: XSNOWTRANS5 = 1.4493 integer, public, parameter :: IFR = 0 integer, public, parameter :: IFR_LB = 1 integer, public, parameter :: ILB = 2 integer, public, parameter :: ILB_FIN = 3 integer, public, parameter :: ILB_ANG = 4 integer, public, parameter :: IROUL = 5 integer, public, parameter :: IFIN = 6 integer, public, parameter :: IFIN_AR = 7 integer, public, parameter :: IFIN_ANG = 8 integer, public, parameter :: IPL = 9 integer, public, parameter :: IPL_GOB = 10 integer, public, parameter :: IGOB = 11 integer, public, parameter :: IGEL = 12 integer, public, parameter :: IGOB_FON = 13 integer, public, parameter :: IRON_ANG = 14 integer, public, parameter, DIMENSION(100) :: ICRIS_DEND1D = (/ILB_ANG, ILB_ANG, ILB_ANG, ILB, ILB, ILB, IFR_LB, IFR_LB, IFR, IFR, ILB_ANG, ILB_ANG, ILB_ANG, ILB, ILB, ILB, IFR_LB, IFR_LB, IFR, IFR, ILB_ANG, ILB_ANG, ILB_ANG, ILB, ILB, ILB, IFR_LB, IFR_LB, IFR, IFR, ILB_ANG, ILB_ANG, ILB_ANG, ILB, ILB, ILB, IFR_LB, IFR_LB, IFR, IFR, ILB_ANG, ILB_ANG, ILB_ANG, ILB, ILB, ILB, IFR_LB, IFR_LB, IFR, IFR, ILB_FIN, ILB_FIN, ILB_FIN, ILB, ILB, ILB, IFR_LB, IFR_LB, IFR, IFR, ILB_FIN, ILB_FIN, ILB_FIN, ILB, ILB, ILB, IFR_LB, IFR_LB, IFR, IFR, ILB_FIN, ILB_FIN, ILB_FIN, ILB, ILB, ILB, IFR_LB, IFR_LB, IFR, IFR, ILB_FIN, ILB_FIN, ILB_FIN, ILB, ILB, ILB, IFR_LB, IFR_LB, IFR, IFR, ILB_FIN, ILB_FIN, ILB_FIN, ILB, ILB, ILB, IFR_LB, IFR_LB, IFR, IFR/) integer, public, parameter, DIMENSION(180) :: ICRIS_NONDEND1D = (/IPL, IPL, IFIN_ANG, IFIN_ANG, IFIN_ANG, IFIN_ANG, IFIN_ANG, IFIN_ANG, IFIN, IFIN, IPL, IPL, IFIN_ANG, IFIN_ANG, IFIN_ANG, IFIN_ANG, IFIN_ANG, IFIN_ANG, IFIN, IFIN, IPL, IPL, IFIN_ANG, IFIN_ANG, IFIN_ANG, IFIN_ANG, IFIN_ANG, IFIN_ANG, IFIN, IFIN, IPL, IPL, IFIN_ANG, IFIN_ANG, IFIN_ANG, IFIN_ANG, IFIN_ANG, IFIN_ANG, IFIN, IFIN, IPL_GOB, IPL_GOB, IPL_GOB, IPL_GOB, IPL_GOB, IGOB_FON, IGOB_FON, IGOB_FON, IGOB_FON, IGOB_FON, IGOB, IGOB, IGOB, IGOB, IGOB, IGOB_FON, IGOB_FON, IGOB_FON, IGOB_FON, IGOB_FON, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IFIN_AR, IFIN_AR, IFIN_AR, IFIN_AR, IFIN_AR, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IGEL, IGEL, IGEL, IGEL, IGEL, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IGEL, IGEL, IGEL, IGEL, IGEL, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IGOB_FON, IGOB_FON, IGOB_FON, IGOB_FON, IGOB_FON, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IGOB_FON, IGOB_FON, IGOB_FON, IGOB_FON, IGOB_FON, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IGOB_FON, IGOB_FON, IGOB_FON, IGOB_FON, IGOB_FON, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IFIN_AR, IFIN_AR, IFIN_AR, IFIN_AR, IFIN_AR, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IGEL, IGEL, IGEL, IGEL, IGEL, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IGEL, IGEL, IGEL, IGEL, IGEL, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IGOB_FON, IGOB_FON, IGOB_FON, IGOB_FON, IGOB_FON, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IGOB_FON, IGOB_FON, IGOB_FON, IGOB_FON, IGOB_FON, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IRON_ANG, IGOB_FON, IGOB_FON, IGOB_FON, IGOB_FON, IGOB_FON/)","tags":"","loc":"module/modd_snow_par.html"},{"title":"MODD_BEM_CST – Town Energy Balance (TEB) model API docs","text":"Contents Variables XWIN_SW_MAX XCOMFORT_TEMP_FOR_SHADING_USE Variables Type Visibility Attributes Name Initial real, public, parameter :: XWIN_SW_MAX = 150. real, public, parameter :: XCOMFORT_TEMP_FOR_SHADING_USE = 297.16","tags":"","loc":"module/modd_bem_cst.html"},{"title":"MODD_SURF_ATM_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK MODD_TYPE_DATE_SURF Contents Derived Types SURF_ATM_t Subroutines SURF_ATM_INIT Derived Types type, public :: SURF_ATM_t Components Type Visibility Attributes Name Initial character(len=6), public :: CTOWN character(len=6), public :: CNATURE character(len=6), public :: CWATER character(len=6), public :: CSEA real, public, POINTER, DIMENSION(:) :: XTOWN real, public, POINTER, DIMENSION(:) :: XNATURE real, public, POINTER, DIMENSION(:) :: XWATER real, public, POINTER, DIMENSION(:) :: XSEA logical, public :: LECOCLIMAP logical, public :: LECOSG logical, public :: LWATER_TO_NATURE logical, public :: LTOWN_TO_ROCK logical, public :: LGARDEN integer, public :: NSIZE_SEA integer, public :: NDIM_SEA integer, public, POINTER, DIMENSION(:) :: NR_SEA integer, public :: NSIZE_WATER integer, public :: NDIM_WATER integer, public, POINTER, DIMENSION(:) :: NR_WATER integer, public :: NSIZE_TOWN integer, public :: NDIM_TOWN integer, public, POINTER, DIMENSION(:) :: NR_TOWN integer, public :: NSIZE_NATURE integer, public :: NDIM_NATURE integer, public, POINTER, DIMENSION(:) :: NR_NATURE integer, public :: NSIZE_FULL integer, public :: NDIM_FULL integer, public :: NIMAX_SURF_ll integer, public :: NJMAX_SURF_ll integer, public :: NIMAX_SURF_LOC integer, public :: NJMAX_SURF_LOC real, public, POINTER, DIMENSION(:,:) :: XCOVER logical, public, POINTER, DIMENSION(:) :: LCOVER real, public, POINTER, DIMENSION(:) :: XZS type(DATE_TIME), public :: TTIME real, public :: XOUT_TSTEP real, public, POINTER, DIMENSION(:) :: XRAIN real, public, POINTER, DIMENSION(:) :: XSNOW real, public, POINTER, DIMENSION(:) :: XZ0 real, public, POINTER, DIMENSION(:) :: XZ0H real, public, POINTER, DIMENSION(:) :: XQSURF Subroutines public subroutine SURF_ATM_INIT (YSURF_ATM) Arguments Type Intent Optional Attributes Name type( SURF_ATM_t ), intent(inout) :: YSURF_ATM","tags":"","loc":"module/modd_surf_atm_n.html"},{"title":"MODD_DATA_COVER_PAR – Town Energy Balance (TEB) model API docs","text":"Contents Variables JPCOVER NCOVER_ECO1_END NCOVER_ECO2_START NVEGTYPE_OLD NVEGTYPE_ECOSG NWATTYPE NSEATYPE NTWNTYPE NTYPE LVEG_PRES NCOVER NVEGTYPE NVT_C4 NVT_TRBE NVT_TRBD NVT_TEBE NVT_TEBD NVT_TENE NVT_BOBD NVT_BONE NVT_BOND NVT_BOGR NVT_SHRB NVT_GRAS NVT_TROG NVT_C3 NVT_NO NVT_ROCK NVT_SNOW NVT_IRR NVT_PARK NVT_C3W NVT_C3S NVT_FLTR NVT_FLGR NUT_CPHR NUT_CPMR NUT_CPLR NUT_OPHR NUT_OPMR NUT_OPLR NUT_LWLR NUT_LALR NUT_SPAR NUT_INDU NBARE_SOIL NROCK NPERMSNOW NSEA NWATER NTILESFC NDATA_ROOF_LAYER NDATA_ROAD_LAYER NDATA_WALL_LAYER NDATA_FLOOR_LAYER CNAMES XCDREF Variables Type Visibility Attributes Name Initial integer, public :: JPCOVER integer, public, parameter :: NCOVER_ECO1_END = 255 integer, public, parameter :: NCOVER_ECO2_START = 301 integer, public, parameter :: NVEGTYPE_OLD = 19 integer, public, parameter :: NVEGTYPE_ECOSG = 20 integer, public, parameter :: NWATTYPE = 2 integer, public, parameter :: NSEATYPE = 1 integer, public, parameter :: NTWNTYPE = 10 integer, public, DIMENSION(4) :: NTYPE = (/NSEATYPE, NWATTYPE, NVEGTYPE_ECOSG, NTWNTYPE/) logical, public, DIMENSION(NVEGTYPE_ECOSG) :: LVEG_PRES integer, public, parameter :: NCOVER = 573 integer, public :: NVEGTYPE integer, public :: NVT_C4 integer, public :: NVT_TRBE integer, public :: NVT_TRBD integer, public :: NVT_TEBE integer, public :: NVT_TEBD integer, public :: NVT_TENE integer, public :: NVT_BOBD integer, public :: NVT_BONE integer, public :: NVT_BOND integer, public :: NVT_BOGR integer, public :: NVT_SHRB integer, public :: NVT_GRAS integer, public :: NVT_TROG integer, public :: NVT_C3 integer, public :: NVT_NO integer, public :: NVT_ROCK integer, public :: NVT_SNOW integer, public :: NVT_IRR integer, public :: NVT_PARK integer, public :: NVT_C3W integer, public :: NVT_C3S integer, public :: NVT_FLTR integer, public :: NVT_FLGR integer, public :: NUT_CPHR integer, public :: NUT_CPMR integer, public :: NUT_CPLR integer, public :: NUT_OPHR integer, public :: NUT_OPMR integer, public :: NUT_OPLR integer, public :: NUT_LWLR integer, public :: NUT_LALR integer, public :: NUT_SPAR integer, public :: NUT_INDU integer, public :: NBARE_SOIL integer, public :: NROCK integer, public :: NPERMSNOW integer, public, DIMENSION(:), ALLOCATABLE :: NSEA integer, public, DIMENSION(:), ALLOCATABLE :: NWATER integer, public :: NTILESFC = 4 integer, public :: NDATA_ROOF_LAYER integer, public :: NDATA_ROAD_LAYER integer, public :: NDATA_WALL_LAYER integer, public :: NDATA_FLOOR_LAYER character(len=60), public, DIMENSION(:,:), ALLOCATABLE :: CNAMES real, public :: XCDREF = 20.","tags":"","loc":"module/modd_data_cover_par.html"},{"title":"MODI_VSLOG – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces VSLOG Interfaces interface public subroutine VSLOG(PA, PLOG, N) Arguments Type Intent Optional Attributes Name real :: PA (N) real :: PLOG (N) integer :: N","tags":"","loc":"module/modi_vslog.html"},{"title":"MODI_BEM – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces BEM Interfaces interface public subroutine BEM(BOP, T, B, DMT, PTSTEP, PSUNTIME, KDAY, PPS, PRHOA, PT_CAN, PQ_CAN, PU_CAN, PHU_BLD, PT_RAD_IND, PFLX_BLD_FL, PFLX_BLD_MA, PRADHT_IN, PRAD_RF_MA, PRAD_RF_FL, PRAD_WL_MA, PRAD_WL_FL, PRAD_WIN_MA, PRAD_WIN_FL, PCONV_RF_BLD, PCONV_WL_BLD, PCONV_WIN_BLD, PLOAD_IN_FL, PLOAD_IN_MA) Arguments Type Intent Optional Attributes Name type(BEM_OPTIONS_t), intent(inout) :: BOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B type(DIAG_MISC_TEB_t), intent(inout) :: DMT real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PSUNTIME integer, intent(in) :: KDAY real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PT_CAN real, intent(in), DIMENSION(:) :: PQ_CAN real, intent(in), DIMENSION(:) :: PU_CAN real, intent(out), DIMENSION(:) :: PHU_BLD real, intent(in), DIMENSION(:) :: PT_RAD_IND real, intent(out), DIMENSION(:) :: PFLX_BLD_FL real, intent(out), DIMENSION(:) :: PFLX_BLD_MA real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PRAD_RF_MA real, intent(in), DIMENSION(:) :: PRAD_RF_FL real, intent(in), DIMENSION(:) :: PRAD_WL_MA real, intent(in), DIMENSION(:) :: PRAD_WL_FL real, intent(in), DIMENSION(:) :: PRAD_WIN_MA real, intent(in), DIMENSION(:) :: PRAD_WIN_FL real, intent(in), DIMENSION(:) :: PCONV_RF_BLD real, intent(in), DIMENSION(:) :: PCONV_WL_BLD real, intent(in), DIMENSION(:) :: PCONV_WIN_BLD real, intent(in), DIMENSION(:) :: PLOAD_IN_FL real, intent(in), DIMENSION(:) :: PLOAD_IN_MA","tags":"","loc":"module/modi_bem.html"},{"title":"MODI_SURFACE_AERO_COND – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces SURFACE_AERO_COND Interfaces interface public subroutine SURFACE_AERO_COND(PRI, PZREF, PUREF, PVMOD, PZ0, PZ0H, PAC, PRA, PCH) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PRI real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PZ0 real, intent(in), DIMENSION(:) :: PZ0H real, intent(out), DIMENSION(:) :: PAC real, intent(out), DIMENSION(:) :: PRA real, intent(out), DIMENSION(:) :: PCH","tags":"","loc":"module/modi_surface_aero_cond.html"},{"title":"MODD_MEB_PAR – Town Energy Balance (TEB) model API docs","text":"Contents Variables XTAU_LW XRAGNC_FACTOR XKDELTA_WR NSPB_MEB XSW_WGHT_VIS XSW_WGHT_NIR XLITTER_THRM_Z1 XLITTER_THRM_Z2 XLITTER_THRM_Z3 XLITTER_HYD_Z4 XLITTER_HYD_Z5 Variables Type Visibility Attributes Name Initial real, public, SAVE :: XTAU_LW real, public, SAVE :: XRAGNC_FACTOR real, public, SAVE :: XKDELTA_WR integer, public, parameter :: NSPB_MEB = 2 real, public, parameter :: XSW_WGHT_VIS = 0.48 real, public, parameter :: XSW_WGHT_NIR = 0.52 real, public, parameter :: XLITTER_THRM_Z1 = 45.00 real, public, parameter :: XLITTER_THRM_Z2 = 0.10 real, public, parameter :: XLITTER_THRM_Z3 = 0.03 real, public, parameter :: XLITTER_HYD_Z4 = 0.95 real, public, parameter :: XLITTER_HYD_Z5 = 0.12","tags":"","loc":"module/modd_meb_par.html"},{"title":"MODE_CONV_DOE – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Interfaces CHTC_VERT_DOE CHTC_UP_DOE CHTC_SMOOTH_LEE_DOE CHTC_SMOOTH_WIND_DOE CHTC_ROUGH_DOE Functions CHTC_VERT_DOE_0D CHTC_VERT_DOE_1D CHTC_UP_DOE_1D CHTC_UP_DOE_0D CHTC_DOWN_DOE CHTC_SMOOTH_LEE_DOE_0D CHTC_SMOOTH_LEE_DOE_1D CHTC_SMOOTH_WIND_DOE_0D CHTC_SMOOTH_WIND_DOE_1D CHTC_ROUGH_DOE_0D CHTC_ROUGH_DOE_1D Interfaces public interface CHTC_VERT_DOE public function CHTC_VERT_DOE_0D (PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PTS real, intent(in) :: PTA Return Value real public function CHTC_VERT_DOE_1D (PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PTS real, intent(in), DIMENSION(:) :: PTA Return Value real,\n  DIMENSION(SIZE(PTS)) public interface CHTC_UP_DOE public function CHTC_UP_DOE_0D (PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PTS real, intent(in) :: PTA Return Value real public function CHTC_UP_DOE_1D (PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PTS real, intent(in), DIMENSION(:) :: PTA Return Value real,\n  DIMENSION(SIZE(PTS)) public interface CHTC_SMOOTH_LEE_DOE public function CHTC_SMOOTH_LEE_DOE_0D (PCHTCN, PVMOD) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PCHTCN real, intent(in) :: PVMOD Return Value real public function CHTC_SMOOTH_LEE_DOE_1D (PCHTCN, PVMOD) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PCHTCN real, intent(in), DIMENSION(:) :: PVMOD Return Value real,\n  DIMENSION(SIZE(PCHTCN)) public interface CHTC_SMOOTH_WIND_DOE public function CHTC_SMOOTH_WIND_DOE_0D (PCHTCN, PVMOD) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PCHTCN real, intent(in) :: PVMOD Return Value real public function CHTC_SMOOTH_WIND_DOE_1D (PCHTCN, PVMOD) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PCHTCN real, intent(in), DIMENSION(:) :: PVMOD Return Value real,\n  DIMENSION(SIZE(PCHTCN)) public interface CHTC_ROUGH_DOE public function CHTC_ROUGH_DOE_0D (PCHTCN, PCHTCS, PROUGH) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PCHTCN real, intent(in) :: PCHTCS real, intent(in) :: PROUGH Return Value real public function CHTC_ROUGH_DOE_1D (PCHTCN, PCHTCS, PROUGH) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PCHTCN real, intent(in), DIMENSION(:) :: PCHTCS real, intent(in), DIMENSION(:) :: PROUGH Return Value real,\n  DIMENSION(SIZE(PCHTCN)) Functions public function CHTC_VERT_DOE_0D (PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PTS real, intent(in) :: PTA Return Value real public function CHTC_VERT_DOE_1D (PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PTS real, intent(in), DIMENSION(:) :: PTA Return Value real,\n  DIMENSION(SIZE(PTS)) public function CHTC_UP_DOE_1D (PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PTS real, intent(in), DIMENSION(:) :: PTA Return Value real,\n  DIMENSION(SIZE(PTS)) public function CHTC_UP_DOE_0D (PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PTS real, intent(in) :: PTA Return Value real public function CHTC_DOWN_DOE (PTS, PTA) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PTS real, intent(in), DIMENSION(:) :: PTA Return Value real,\n  DIMENSION(SIZE(PTS)) public function CHTC_SMOOTH_LEE_DOE_0D (PCHTCN, PVMOD) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PCHTCN real, intent(in) :: PVMOD Return Value real public function CHTC_SMOOTH_LEE_DOE_1D (PCHTCN, PVMOD) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PCHTCN real, intent(in), DIMENSION(:) :: PVMOD Return Value real,\n  DIMENSION(SIZE(PCHTCN)) public function CHTC_SMOOTH_WIND_DOE_0D (PCHTCN, PVMOD) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PCHTCN real, intent(in) :: PVMOD Return Value real public function CHTC_SMOOTH_WIND_DOE_1D (PCHTCN, PVMOD) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PCHTCN real, intent(in), DIMENSION(:) :: PVMOD Return Value real,\n  DIMENSION(SIZE(PCHTCN)) public function CHTC_ROUGH_DOE_0D (PCHTCN, PCHTCS, PROUGH) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in) :: PCHTCN real, intent(in) :: PCHTCS real, intent(in) :: PROUGH Return Value real public function CHTC_ROUGH_DOE_1D (PCHTCN, PCHTCS, PROUGH) result(PCHTC) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PCHTCN real, intent(in), DIMENSION(:) :: PCHTCS real, intent(in), DIMENSION(:) :: PROUGH Return Value real,\n  DIMENSION(SIZE(PCHTCN))","tags":"","loc":"module/mode_conv_doe.html"},{"title":"MODI_BLD_OCC_CALENDAR – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces BLD_OCC_CALENDAR Interfaces interface public subroutine BLD_OCC_CALENDAR(TPTIME, PTSUN, T, B, PQIN_FRAC, PTCOOL_TARGET, PTHEAT_TARGET, PQIN) Arguments Type Intent Optional Attributes Name type(DATE_TIME), intent(inout) :: TPTIME real, intent(in), DIMENSION(:) :: PTSUN type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B real, intent(in) :: PQIN_FRAC real, intent(out), DIMENSION(:) :: PTCOOL_TARGET real, intent(out), DIMENSION(:) :: PTHEAT_TARGET real, intent(out), DIMENSION(:) :: PQIN","tags":"","loc":"module/modi_bld_occ_calendar.html"},{"title":"MODD_WATER_PAR – Town Energy Balance (TEB) model API docs","text":"Contents Variables XALBWAT XALBSCA_WAT XALBCOEF_TA96 XEMISWAT XALBSEAICE XALBWATICE XALBWATSNOW XEMISWATICE Variables Type Visibility Attributes Name Initial real, public, SAVE :: XALBWAT real, public, SAVE :: XALBSCA_WAT real, public, SAVE :: XALBCOEF_TA96 real, public, SAVE :: XEMISWAT real, public, SAVE :: XALBSEAICE real, public, SAVE :: XALBWATICE real, public, SAVE :: XALBWATSNOW real, public, SAVE :: XEMISWATICE","tags":"","loc":"module/modd_water_par.html"},{"title":"MODD_BLD_DESCRIPTION_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types BLD_DESC_t Subroutines BLD_DESC_INIT Derived Types type, public :: BLD_DESC_t Components Type Visibility Attributes Name Initial integer, public :: NDESC_BLD integer, public :: NDESC_AGE integer, public :: NDESC_CODE integer, public :: NDESC_USE integer, public :: NDESC_ROOF_LAYER integer, public :: NDESC_ROAD_LAYER integer, public :: NDESC_WALL_LAYER integer, public :: NDESC_FLOOR_LAYER integer, public, POINTER, DIMENSION(:) :: NDESC_BLD_LIST integer, public, POINTER, DIMENSION(:) :: NDESC_AGE_DATE integer, public, POINTER, DIMENSION(:) :: NDESC_CODE_LIST integer, public, POINTER, DIMENSION(:) :: NDESC_AGE_LIST integer, public, POINTER, DIMENSION(:) :: NDESC_USE_LIST real, public, POINTER, DIMENSION(:) :: XDESC_ALB_ROOF real, public, POINTER, DIMENSION(:) :: XDESC_ALB_ROAD real, public, POINTER, DIMENSION(:) :: XDESC_ALB_WALL real, public, POINTER, DIMENSION(:) :: XDESC_EMIS_ROOF real, public, POINTER, DIMENSION(:) :: XDESC_EMIS_ROAD real, public, POINTER, DIMENSION(:) :: XDESC_EMIS_WALL real, public, POINTER, DIMENSION(:) :: XDESC_TCOOL_TARGET real, public, POINTER, DIMENSION(:) :: XDESC_THEAT_TARGET real, public, POINTER, DIMENSION(:) :: XDESC_F_WASTE_CAN real, public, POINTER, DIMENSION(:) :: XDESC_EFF_HEAT real, public, POINTER, DIMENSION(:,:) :: XDESC_HC_FLOOR real, public, POINTER, DIMENSION(:,:) :: XDESC_TC_FLOOR real, public, POINTER, DIMENSION(:,:) :: XDESC_D_FLOOR real, public, POINTER, DIMENSION(:,:) :: XDESC_HC_ROOF real, public, POINTER, DIMENSION(:,:) :: XDESC_TC_ROOF real, public, POINTER, DIMENSION(:,:) :: XDESC_D_ROOF real, public, POINTER, DIMENSION(:,:) :: XDESC_HC_ROAD real, public, POINTER, DIMENSION(:,:) :: XDESC_TC_ROAD real, public, POINTER, DIMENSION(:,:) :: XDESC_D_ROAD real, public, POINTER, DIMENSION(:,:) :: XDESC_HC_WALL real, public, POINTER, DIMENSION(:,:) :: XDESC_TC_WALL real, public, POINTER, DIMENSION(:,:) :: XDESC_D_WALL real, public, POINTER, DIMENSION(:) :: XDESC_QIN real, public, POINTER, DIMENSION(:) :: XDESC_QIN_FRAD real, public, POINTER, DIMENSION(:) :: XDESC_SHGC real, public, POINTER, DIMENSION(:) :: XDESC_U_WIN real, public, POINTER, DIMENSION(:) :: XDESC_GR real, public, POINTER, DIMENSION(:) :: XDESC_SHGC_SH real, public, POINTER, DIMENSION(:) :: XDESC_FLOOR_HEIGHT real, public, POINTER, DIMENSION(:) :: XDESC_INF real, public, POINTER, DIMENSION(:) :: XDESC_F_WATER_COND real, public, POINTER, DIMENSION(:) :: XDESC_SHADE real, public, POINTER, DIMENSION(:) :: XDESC_NATVENT real, public, POINTER, DIMENSION(:) :: XDESC_QIN_FLAT real, public, POINTER, DIMENSION(:) :: XDESC_HR_TARGET real, public, POINTER, DIMENSION(:) :: XDESC_V_VENT real, public, POINTER, DIMENSION(:) :: XDESC_COP_RAT real, public, POINTER, DIMENSION(:) :: XDESC_GREENROOF real, public, POINTER, DIMENSION(:) :: XDESC_EMIS_PANEL real, public, POINTER, DIMENSION(:) :: XDESC_ALB_PANEL real, public, POINTER, DIMENSION(:) :: XDESC_EFF_PANEL real, public, POINTER, DIMENSION(:) :: XDESC_FRAC_PANEL real, public, POINTER, DIMENSION(:) :: XDESC_RESIDENTIAL Subroutines public subroutine BLD_DESC_INIT (YBLD_DESC) Arguments Type Intent Optional Attributes Name type( BLD_DESC_t ), intent(inout) :: YBLD_DESC","tags":"","loc":"module/modd_bld_description_n.html"},{"title":"MODD_REPROD_OPER – Town Energy Balance (TEB) model API docs","text":"Contents Variables XEVERG_RSMIN XEVERG_VEG CDGAVG CDGDIF CIMPLICIT_WIND CQSAT CCHARNOCK Variables Type Visibility Attributes Name Initial real, public :: XEVERG_RSMIN real, public :: XEVERG_VEG character(len=3), public :: CDGAVG character(len=4), public :: CDGDIF character(len=3), public :: CIMPLICIT_WIND character(len=3), public :: CQSAT character(len=3), public :: CCHARNOCK","tags":"","loc":"module/modd_reprod_oper.html"},{"title":"MODI_INI_OCEAN_CSTS – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces INI_OCEAN_CSTS Interfaces interface public subroutine INI_OCEAN_CSTS() Arguments None","tags":"","loc":"module/modi_ini_ocean_csts.html"},{"title":"MODI_VEGETATION_UPDATE – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces VEGETATION_UPDATE Interfaces interface public subroutine VEGETATION_UPDATE(DTCO, DTV, KDIM, IO, KK, PK, PEK, KPATCH, PTSTEP, TTIME, PCOVER, OCOVER, OAGRIP, HSFTYPE, OALB, ISSK, ODUPDATED, OABSENT) Arguments Type Intent Optional Attributes Name type(DATA_COVER_t), intent(inout) :: DTCO type(DATA_ISBA_t), intent(inout) :: DTV integer, intent(in) :: KDIM type(ISBA_OPTIONS_t), intent(inout) :: IO type(ISBA_K_t), intent(inout) :: KK type(ISBA_P_t), intent(inout) :: PK type(ISBA_PE_t), intent(inout) :: PEK integer, intent(in) :: KPATCH real, intent(in) :: PTSTEP type(DATE_TIME), intent(in) :: TTIME real, intent(in), DIMENSION(:,:) :: PCOVER logical, intent(in), DIMENSION(:) :: OCOVER logical, intent(in) :: OAGRIP character(len=*), intent(in) :: HSFTYPE logical, intent(in) :: OALB type(SSO_t), intent(inout) :: ISSK logical, intent(out) :: ODUPDATED logical, intent(in), optional DIMENSION(:) :: OABSENT","tags":"","loc":"module/modi_vegetation_update.html"},{"title":"MODD_CANOPY_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types CANOPY_t Subroutines CANOPY_INIT Derived Types type, public :: CANOPY_t Components Type Visibility Attributes Name Initial integer, public :: NLVL real, public, POINTER, DIMENSION(:,:) :: XZ real, public, POINTER, DIMENSION(:,:) :: XU real, public, POINTER, DIMENSION(:,:) :: XT real, public, POINTER, DIMENSION(:,:) :: XQ real, public, POINTER, DIMENSION(:,:) :: XTKE real, public, POINTER, DIMENSION(:,:) :: XLMO real, public, POINTER, DIMENSION(:,:) :: XLM real, public, POINTER, DIMENSION(:,:) :: XLEPS real, public, POINTER, DIMENSION(:,:) :: XP real, public, POINTER, DIMENSION(:,:) :: XDZ real, public, POINTER, DIMENSION(:,:) :: XZF real, public, POINTER, DIMENSION(:,:) :: XDZF Subroutines public subroutine CANOPY_INIT (SB) Arguments Type Intent Optional Attributes Name type( CANOPY_t ), intent(inout) :: SB","tags":"","loc":"module/modd_canopy_n.html"},{"title":"MODI_TEB_GARDEN – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces TEB_GARDEN Interfaces interface public subroutine TEB_GARDEN(DTCO, G, TOP, T, BOP, B, TPN, TIR, DMT, GDM, GRM, KTEB_P, HIMPLICIT_WIND, PTSUN, PT_CAN, PQ_CAN, PU_CAN, PT_LOWCAN, PQ_LOWCAN, PU_LOWCAN, PZ_LOWCAN, PPEW_A_COEF, PPEW_B_COEF, PPEW_A_COEF_LOWCAN, PPEW_B_COEF_LOWCAN, PPS, PPA, PEXNS, PEXNA, PTA, PQA, PRHOA, PCO2, PLW_RAD, PDIR_SW, PSCA_SW, PSW_BANDS, KSW, PZENITH, PAZIM, PRR, PSR, PZREF, PUREF, PVMOD, PH_TRAFFIC, PLE_TRAFFIC, PTSTEP, PLEW_RF, PLEW_RD, PLE_WL_A, PLE_WL_B, PRNSN_RF, PHSN_RF, PLESN_RF, PGSN_RF, PMELT_RF, PRNSN_RD, PHSN_RD, PLESN_RD, PGSN_RD, PMELT_RD, PRN_GRND, PH_GRND, PLE_GRND, PGFLX_GRND, PRN_TWN, PH_TWN, PLE_TWN, PGFLX_TWN, PEVAP_TWN, PSFCO2, PUW_GRND, PUW_RF, PDUWDU_GRND, PDUWDU_RF, PUSTAR_TWN, PCD, PCDN, PCH_TWN, PRI_TWN, PTS_TWN, PEMIS_TWN, PDIR_ALB_TWN, PSCA_ALB_TWN, PRESA_TWN, PAC_RD, PAC_GD, PAC_GR, PAC_RD_WAT, PAC_GD_WAT, PAC_GR_WAT, KDAY, PEMIT_LW_FAC, PEMIT_LW_GRND, PT_RAD_IND, PREF_SW_GRND, PREF_SW_FAC, PHU_BLD, PTIME, PPROD_BLD) Arguments Type Intent Optional Attributes Name type(DATA_COVER_t), intent(inout) :: DTCO type(GRID_t), intent(inout) :: G type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_OPTIONS_t), intent(inout) :: BOP type(BEM_t), intent(inout) :: B type(TEB_PANEL_t), intent(inout) :: TPN type(TEB_IRRIG_t), intent(inout) :: TIR type(DIAG_MISC_TEB_t), intent(inout) :: DMT type(TEB_GARDEN_MODEL_t), intent(inout) :: GDM type(TEB_GREENROOF_MODEL_t), intent(inout) :: GRM integer, intent(in) :: KTEB_P character(len=*), intent(in) :: HIMPLICIT_WIND real, intent(in), DIMENSION(:) :: PTSUN real, intent(inout), DIMENSION(:) :: PT_CAN real, intent(inout), DIMENSION(:) :: PQ_CAN real, intent(in), DIMENSION(:) :: PU_CAN real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PU_LOWCAN real, intent(in), DIMENSION(:) :: PZ_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPEW_A_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_B_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PPA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PCO2 real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:,:) :: PDIR_SW real, intent(in), DIMENSION(:,:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PSW_BANDS integer, intent(in) :: KSW real, intent(in), DIMENSION(:) :: PZENITH real, intent(in), DIMENSION(:) :: PAZIM real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PH_TRAFFIC real, intent(in), DIMENSION(:) :: PLE_TRAFFIC real, intent(in) :: PTSTEP real, intent(out), DIMENSION(:) :: PLEW_RF real, intent(out), DIMENSION(:) :: PLEW_RD real, intent(out), DIMENSION(:) :: PLE_WL_A real, intent(out), DIMENSION(:) :: PLE_WL_B real, intent(out), DIMENSION(:) :: PRNSN_RF real, intent(out), DIMENSION(:) :: PHSN_RF real, intent(out), DIMENSION(:) :: PLESN_RF real, intent(out), DIMENSION(:) :: PGSN_RF real, intent(out), DIMENSION(:) :: PMELT_RF real, intent(out), DIMENSION(:) :: PRNSN_RD real, intent(out), DIMENSION(:) :: PHSN_RD real, intent(out), DIMENSION(:) :: PLESN_RD real, intent(out), DIMENSION(:) :: PGSN_RD real, intent(out), DIMENSION(:) :: PMELT_RD real, intent(out), DIMENSION(:) :: PRN_GRND real, intent(out), DIMENSION(:) :: PH_GRND real, intent(out), DIMENSION(:) :: PLE_GRND real, intent(out), DIMENSION(:) :: PGFLX_GRND real, intent(out), DIMENSION(:) :: PRN_TWN real, intent(out), DIMENSION(:) :: PH_TWN real, intent(out), DIMENSION(:) :: PLE_TWN real, intent(out), DIMENSION(:) :: PGFLX_TWN real, intent(out), DIMENSION(:) :: PEVAP_TWN real, intent(out), DIMENSION(:) :: PSFCO2 real, intent(out), DIMENSION(:) :: PUW_GRND real, intent(out), DIMENSION(:) :: PUW_RF real, intent(out), DIMENSION(:) :: PDUWDU_GRND real, intent(out), DIMENSION(:) :: PDUWDU_RF real, intent(out), DIMENSION(:) :: PUSTAR_TWN real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN real, intent(out), DIMENSION(:) :: PCH_TWN real, intent(out), DIMENSION(:) :: PRI_TWN real, intent(out), DIMENSION(:) :: PTS_TWN real, intent(out), DIMENSION(:) :: PEMIS_TWN real, intent(out), DIMENSION(:) :: PDIR_ALB_TWN real, intent(out), DIMENSION(:) :: PSCA_ALB_TWN real, intent(out), DIMENSION(:) :: PRESA_TWN real, intent(out), DIMENSION(:) :: PAC_RD real, intent(out), DIMENSION(:) :: PAC_GD real, intent(out), DIMENSION(:) :: PAC_GR real, intent(out), DIMENSION(:) :: PAC_RD_WAT real, intent(out), DIMENSION(:) :: PAC_GD_WAT real, intent(out), DIMENSION(:) :: PAC_GR_WAT integer, intent(in) :: KDAY real, intent(out), DIMENSION(:) :: PEMIT_LW_FAC real, intent(out), DIMENSION(:) :: PEMIT_LW_GRND real, intent(out), DIMENSION(:) :: PT_RAD_IND real, intent(out), DIMENSION(:) :: PREF_SW_GRND real, intent(out), DIMENSION(:) :: PREF_SW_FAC real, intent(out), DIMENSION(:) :: PHU_BLD real, intent(in) :: PTIME real, intent(out), DIMENSION(:) :: PPROD_BLD","tags":"","loc":"module/modi_teb_garden.html"},{"title":"MODI_URBAN_LW_COEF – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces URBAN_LW_COEF Interfaces interface public subroutine URBAN_LW_COEF(B, T, PLW_RAD, PEMIS_G, PTS_SR, PTS_G, PLW_WA_TO_WB, PLW_WA_TO_R, PLW_WB_TO_R, PLW_WA_TO_NR, PLW_WB_TO_NR, PLW_WA_TO_G, PLW_WB_TO_G, PLW_WA_TO_WIN, PLW_WB_TO_WIN, PLW_R_TO_WA, PLW_R_TO_WB, PLW_R_TO_WIN, PLW_G_TO_WA, PLW_G_TO_WB, PLW_G_TO_WIN, PLW_S_TO_WA, PLW_S_TO_WB, PLW_S_TO_R, PLW_S_TO_NR, PLW_S_TO_G, PLW_S_TO_WIN, PLW_WIN_TO_WA, PLW_WIN_TO_WB, PLW_WIN_TO_R, PLW_WIN_TO_NR, PLW_WIN_TO_G, PLW_NR_TO_WA, PLW_NR_TO_WB, PLW_NR_TO_WIN) Arguments Type Intent Optional Attributes Name type(BEM_t), intent(inout) :: B type(TEB_t), intent(inout) :: T real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PEMIS_G real, intent(in), DIMENSION(:) :: PTS_SR real, intent(in), DIMENSION(:) :: PTS_G real, intent(out), DIMENSION(:) :: PLW_WA_TO_WB real, intent(out), DIMENSION(:) :: PLW_WA_TO_R real, intent(out), DIMENSION(:) :: PLW_WB_TO_R real, intent(out), DIMENSION(:) :: PLW_WA_TO_NR real, intent(out), DIMENSION(:) :: PLW_WB_TO_NR real, intent(out), DIMENSION(:) :: PLW_WA_TO_G real, intent(out), DIMENSION(:) :: PLW_WB_TO_G real, intent(out), DIMENSION(:) :: PLW_WA_TO_WIN real, intent(out), DIMENSION(:) :: PLW_WB_TO_WIN real, intent(out), DIMENSION(:) :: PLW_R_TO_WA real, intent(out), DIMENSION(:) :: PLW_R_TO_WB real, intent(out), DIMENSION(:) :: PLW_R_TO_WIN real, intent(out), DIMENSION(:) :: PLW_G_TO_WA real, intent(out), DIMENSION(:) :: PLW_G_TO_WB real, intent(out), DIMENSION(:) :: PLW_G_TO_WIN real, intent(out), DIMENSION(:) :: PLW_S_TO_WA real, intent(out), DIMENSION(:) :: PLW_S_TO_WB real, intent(out), DIMENSION(:) :: PLW_S_TO_R real, intent(out), DIMENSION(:) :: PLW_S_TO_NR real, intent(out), DIMENSION(:) :: PLW_S_TO_G real, intent(out), DIMENSION(:) :: PLW_S_TO_WIN real, intent(out), DIMENSION(:) :: PLW_WIN_TO_WA real, intent(out), DIMENSION(:) :: PLW_WIN_TO_WB real, intent(out), DIMENSION(:) :: PLW_WIN_TO_R real, intent(out), DIMENSION(:) :: PLW_WIN_TO_NR real, intent(out), DIMENSION(:) :: PLW_WIN_TO_G real, intent(out), DIMENSION(:) :: PLW_NR_TO_WA real, intent(out), DIMENSION(:) :: PLW_NR_TO_WB real, intent(out), DIMENSION(:) :: PLW_NR_TO_WIN","tags":"","loc":"module/modi_urban_lw_coef.html"},{"title":"MODD_CH_WATFLUX_n – Town Energy Balance (TEB) model API docs","text":"Uses MODD_SV_n PARKIND1 YOMHOOK Contents Derived Types CH_WATFLUX_t Subroutines CH_WATFLUX_INIT Derived Types type, public :: CH_WATFLUX_t Components Type Visibility Attributes Name Initial character(len=6), public :: CCH_DRY_DEP real, public, DIMENSION(:,:), POINTER :: XDEP type(SV_t), public :: SVW character(len=6), public, DIMENSION(:), POINTER :: CCH_NAMES character(len=6), public, DIMENSION(:), POINTER :: CDSTNAMES character(len=6), public, DIMENSION(:), POINTER :: CSLTNAMES character(len=6), public, DIMENSION(:), POINTER :: CAER_NAMES Subroutines public subroutine CH_WATFLUX_INIT (YCH_WATFLUX) Arguments Type Intent Optional Attributes Name type( CH_WATFLUX_t ), intent(inout) :: YCH_WATFLUX","tags":"","loc":"module/modd_ch_watflux_n.html"},{"title":"MODI_INI_CSTS – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces INI_CSTS Interfaces interface public subroutine INI_CSTS() Arguments None","tags":"","loc":"module/modi_ini_csts.html"},{"title":"MODI_ROOF_LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces ROOF_LAYER_E_BUDGET Interfaces interface public subroutine ROOF_LAYER_E_BUDGET(TOP, T, B, PQSAT_ROOF, PAC_BLD, PTSTEP, PDN_ROOF, PRHOA, PAC_ROOF, PAC_ROOF_WAT, PLW_RAD, PPS, PDELT_ROOF, PTA, PQA, PEXNA, PEXNS, PABS_SW_ROOF, PGSNOW_ROOF, PFLX_BLD_ROOF, PDQS_ROOF, PABS_LW_ROOF, PHFREE_ROOF, PLEFREE_ROOF, PIMB_ROOF, PG_GREENROOF_ROOF, PRADHT_IN, PTS_FLOOR, PTI_WALL, PRAD_ROOF_WALL, PRAD_ROOF_WIN, PRAD_ROOF_FLOOR, PRAD_ROOF_MASS, PCONV_ROOF_BLD, PRR, PLOAD_IN_ROOF) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B real, intent(inout), DIMENSION(:) :: PQSAT_ROOF real, intent(in), DIMENSION(:) :: PAC_BLD real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PDN_ROOF real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PAC_ROOF real, intent(in), DIMENSION(:) :: PAC_ROOF_WAT real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PDELT_ROOF real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PABS_SW_ROOF real, intent(in), DIMENSION(:) :: PGSNOW_ROOF real, intent(out), DIMENSION(:) :: PFLX_BLD_ROOF real, intent(out), DIMENSION(:) :: PDQS_ROOF real, intent(out), DIMENSION(:) :: PABS_LW_ROOF real, intent(out), DIMENSION(:) :: PHFREE_ROOF real, intent(out), DIMENSION(:) :: PLEFREE_ROOF real, intent(out), DIMENSION(:) :: PIMB_ROOF real, intent(in), DIMENSION(:) :: PG_GREENROOF_ROOF real, intent(in), DIMENSION(:) :: PRADHT_IN real, intent(in), DIMENSION(:) :: PTS_FLOOR real, intent(in), DIMENSION(:) :: PTI_WALL real, intent(out), DIMENSION(:) :: PRAD_ROOF_WALL real, intent(out), DIMENSION(:) :: PRAD_ROOF_WIN real, intent(out), DIMENSION(:) :: PRAD_ROOF_FLOOR real, intent(out), DIMENSION(:) :: PRAD_ROOF_MASS real, intent(out), DIMENSION(:) :: PCONV_ROOF_BLD real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PLOAD_IN_ROOF","tags":"","loc":"module/modi_roof_layer_e_budget.html"},{"title":"MODI_FLXSURF3BX – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces FLXSURF3BX Interfaces interface public subroutine FLXSURF3BX(CMU, CTU, RIB, FTEMP, FVAP, ILMO, UE, FCOR, TA, QA, ZU, ZT, VA, TG, QG, H, Z0, Z0T, LZZ0, LZZ0T, fm, fh, N) Arguments Type Intent Optional Attributes Name real :: CMU (N) real :: CTU (N) real :: RIB (N) real :: FTEMP (N) real :: FVAP (N) real :: ILMO (N) real :: UE (N) real :: FCOR (N) real :: TA (N) real :: QA (N) real :: ZU (N) real :: ZT (N) real :: VA (N) real :: TG (N) real :: QG (N) real :: H (N) real :: Z0 (N) real :: Z0T (N) real :: LZZ0 (N) real :: LZZ0T (N) real :: fm (N) real :: fh (N) integer :: N","tags":"","loc":"module/modi_flxsurf3bx.html"},{"title":"MODI_BEM_MORPHO – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces BEM_MORPHO Interfaces interface public subroutine BEM_MORPHO(PBLD, PWALL_O_HOR, PBLD_HEIGHT, PWALL_O_BLD, B) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PBLD real, intent(in), DIMENSION(:) :: PWALL_O_HOR real, intent(in), DIMENSION(:) :: PBLD_HEIGHT real, intent(out), DIMENSION(:) :: PWALL_O_BLD type(BEM_t), intent(inout) :: B","tags":"","loc":"module/modi_bem_morpho.html"},{"title":"MODD_DIAG_OCEAN_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types DIAG_OCEAN_t Subroutines DIAG_OCEAN_INIT Derived Types type, public :: DIAG_OCEAN_t Components Type Visibility Attributes Name Initial logical, public :: LDIAG_OCEAN real, public, POINTER, DIMENSION(:) :: XTOCMOY real, public, POINTER, DIMENSION(:) :: XSOCMOY real, public, POINTER, DIMENSION(:) :: XUOCMOY real, public, POINTER, DIMENSION(:) :: XVOCMOY real, public, POINTER, DIMENSION(:) :: XDOCMOY Subroutines public subroutine DIAG_OCEAN_INIT (YDIAG_OCEAN) Arguments Type Intent Optional Attributes Name type( DIAG_OCEAN_t ), intent(inout) :: YDIAG_OCEAN","tags":"","loc":"module/modd_diag_ocean_n.html"},{"title":"MODD_TYPE_DATE_SURF – Town Energy Balance (TEB) model API docs","text":"Contents Derived Types DATE DATE_TIME Derived Types type, public :: DATE Components Type Visibility Attributes Name Initial integer, public :: YEAR = 0 integer, public :: MONTH = 0 integer, public :: DAY = 0 type, public :: DATE_TIME Components Type Visibility Attributes Name Initial type( DATE ), public :: TDATE real, public :: TIME = 0.","tags":"","loc":"module/modd_type_date_surf.html"},{"title":"MODD_DIAG_MISC_TEB_OPTIONS_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types DIAG_MISC_TEB_OPTIONS_t Subroutines DIAG_MISC_TEB_OPTIONS_INIT Derived Types type, public :: DIAG_MISC_TEB_OPTIONS_t Components Type Visibility Attributes Name Initial logical, public :: LSURF_MISC_BUDGET logical, public :: LSURF_EVAP_BUDGET logical, public :: LSURF_DIAG_ALBEDO Subroutines public subroutine DIAG_MISC_TEB_OPTIONS_INIT (YDIAG_MISC_TEB_OPTIONS) Arguments Type Intent Optional Attributes Name type( DIAG_MISC_TEB_OPTIONS_t ), intent(inout) :: YDIAG_MISC_TEB_OPTIONS","tags":"","loc":"module/modd_diag_misc_teb_options_n.html"},{"title":"MODD_SURF_ATM – Town Energy Balance (TEB) model API docs","text":"Contents Variables XCISMIN XVMODMIN LALDTHRES LDRAG_COEF_ARP LALDZ0H LNOSOF LVERTSHIFT LVSHIFT_LW LVSHIFT_PRCP LVZIUSTAR0_ARP LRRGUST_ARP LCPL_ARP LQVNPLUS LCPL_GCM XEDB XEDC XEDD XEDK XUSURIC XUSURID XUSURICL XVCHRNK XVZ0CM XRIMAX XDELTA_MAX XWINDMIN XRZHZ0M XVZIUSTAR0 XRRSCALE XRRGAMMA XUTILGUST XCO2UNCPL Variables Type Visibility Attributes Name Initial real, public :: XCISMIN real, public :: XVMODMIN logical, public :: LALDTHRES logical, public :: LDRAG_COEF_ARP logical, public :: LALDZ0H logical, public :: LNOSOF logical, public :: LVERTSHIFT logical, public :: LVSHIFT_LW logical, public :: LVSHIFT_PRCP logical, public :: LVZIUSTAR0_ARP logical, public :: LRRGUST_ARP logical, public :: LCPL_ARP logical, public :: LQVNPLUS logical, public :: LCPL_GCM real, public :: XEDB real, public :: XEDC real, public :: XEDD real, public :: XEDK real, public :: XUSURIC real, public :: XUSURID real, public :: XUSURICL real, public :: XVCHRNK real, public :: XVZ0CM real, public :: XRIMAX real, public :: XDELTA_MAX real, public :: XWINDMIN real, public :: XRZHZ0M real, public :: XVZIUSTAR0 real, public :: XRRSCALE real, public :: XRRGAMMA real, public :: XUTILGUST real, public :: XCO2UNCPL","tags":"","loc":"module/modd_surf_atm.html"},{"title":"MODD_OCEAN_CSTS – Town Energy Balance (TEB) model API docs","text":"Contents Variables XRHOSW XRHOSWREF XCPSW XGAMA XZCE XCKL XR XD1 XD2 XALBEDOSW Variables Type Visibility Attributes Name Initial real, public, SAVE :: XRHOSW real, public, SAVE :: XRHOSWREF real, public, SAVE :: XCPSW real, public, SAVE :: XGAMA real, public, SAVE :: XZCE real, public, SAVE :: XCKL real, public, SAVE :: XR real, public, SAVE :: XD1 real, public, SAVE :: XD2 real, public, SAVE :: XALBEDOSW","tags":"","loc":"module/modd_ocean_csts.html"},{"title":"MODI_CARBON_EVOL – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces CARBON_EVOL Interfaces interface public subroutine CARBON_EVOL(IO, KK, PK, PEK, DEK, PTSTEP, PRHOA, PRESP_BIOMASS_INST) Arguments Type Intent Optional Attributes Name type(ISBA_OPTIONS_t), intent(inout) :: IO type(ISBA_K_t), intent(inout) :: KK type(ISBA_P_t), intent(inout) :: PK type(ISBA_PE_t), intent(inout) :: PEK type(DIAG_EVAP_ISBA_t), intent(inout) :: DEK real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:,:) :: PRESP_BIOMASS_INST","tags":"","loc":"module/modi_carbon_evol.html"},{"title":"MODD_GRID_CONF_PROJ_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Variables XX XY XCX XCY NCIJ Derived Types GRID_CONF_PROJ_t Subroutines GRID_CONF_PROJ_INIT Variables Type Visibility Attributes Name Initial real, public, DIMENSION(:), ALLOCATABLE :: XX real, public, DIMENSION(:), ALLOCATABLE :: XY real, public, DIMENSION(:,:), ALLOCATABLE :: XCX real, public, DIMENSION(:,:), ALLOCATABLE :: XCY integer, public, DIMENSION(:,:), ALLOCATABLE :: NCIJ Derived Types type, public :: GRID_CONF_PROJ_t Components Type Visibility Attributes Name Initial integer, public :: NX integer, public :: NY real, public :: XLAT0 real, public :: XLON0 real, public :: XLATORI real, public :: XLONORI real, public :: XRPK real, public :: XBETA real, public :: XLATC real, public :: XLONC Subroutines public subroutine GRID_CONF_PROJ_INIT (YGRIDCONF) Arguments Type Intent Optional Attributes Name type( GRID_CONF_PROJ_t ), intent(inout) :: YGRIDCONF","tags":"","loc":"module/modd_grid_conf_proj_n.html"},{"title":"MODI_ROOF_IMPL_COEF – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces ROOF_IMPL_COEF Interfaces interface public subroutine ROOF_IMPL_COEF(T, PTSTEP, PTDEEP_A, PTDEEP_B) Arguments Type Intent Optional Attributes Name type(TEB_t), intent(inout) :: T real, intent(in) :: PTSTEP real, intent(out), DIMENSION(:) :: PTDEEP_A real, intent(out), DIMENSION(:) :: PTDEEP_B","tags":"","loc":"module/modi_roof_impl_coef.html"},{"title":"MODD_DIAG_MISC_ISBA_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types DIAG_MISC_ISBA_t DIAG_MISC_ISBA_NP_t Subroutines DIAG_MISC_ISBA_NP_INIT DIAG_MISC_ISBA_INIT Derived Types type, public :: DIAG_MISC_ISBA_t Components Type Visibility Attributes Name Initial logical, public :: LSURF_MISC_BUDGET logical, public :: LSURF_DIAG_ALBEDO logical, public :: LSURF_MISC_DIF logical, public :: LPROSNOW logical, public :: LVOLUMETRIC_SNOWLIQ real, public, POINTER, DIMENSION(:) :: XHV real, public, POINTER, DIMENSION(:) :: XLAI real, public, POINTER, DIMENSION(:,:) :: XSWI real, public, POINTER, DIMENSION(:,:) :: XTSWI real, public, POINTER, DIMENSION(:) :: XSOIL_SWI real, public, POINTER, DIMENSION(:) :: XSOIL_TSWI real, public, POINTER, DIMENSION(:) :: XSOIL_TWG real, public, POINTER, DIMENSION(:) :: XSOIL_TWGI real, public, POINTER, DIMENSION(:) :: XSOIL_WG real, public, POINTER, DIMENSION(:) :: XSOIL_WGI real, public, POINTER, DIMENSION(:) :: XFRD2_TSWI real, public, POINTER, DIMENSION(:) :: XFRD2_TWG real, public, POINTER, DIMENSION(:) :: XFRD2_TWGI real, public, POINTER, DIMENSION(:) :: XFRD3_TSWI real, public, POINTER, DIMENSION(:) :: XFRD3_TWG real, public, POINTER, DIMENSION(:) :: XFRD3_TWGI real, public, POINTER, DIMENSION(:) :: XALT real, public, POINTER, DIMENSION(:) :: XFLT real, public, POINTER, DIMENSION(:) :: XRNSNOW real, public, POINTER, DIMENSION(:) :: XHSNOW real, public, POINTER, DIMENSION(:) :: XHPSNOW real, public, POINTER, DIMENSION(:) :: XGFLUXSNOW real, public, POINTER, DIMENSION(:) :: XUSTARSNOW real, public, POINTER, DIMENSION(:) :: XGRNDFLUX real, public, POINTER, DIMENSION(:) :: XSRSFC real, public, POINTER, DIMENSION(:) :: XRRSFC real, public, POINTER, DIMENSION(:) :: XCDSNOW real, public, POINTER, DIMENSION(:) :: XCHSNOW real, public, POINTER, DIMENSION(:,:) :: XSNOWDZ real, public, POINTER, DIMENSION(:,:) :: XSNOWDEND real, public, POINTER, DIMENSION(:,:) :: XSNOWSPHER real, public, POINTER, DIMENSION(:,:) :: XSNOWSIZE real, public, POINTER, DIMENSION(:,:) :: XSNOWSSA real, public, POINTER, DIMENSION(:,:) :: XSNOWTYPEMEPRA real, public, POINTER, DIMENSION(:,:) :: XSNOWRAM real, public, POINTER, DIMENSION(:,:) :: XSNOWSHEAR real, public, POINTER, DIMENSION(:) :: XSNOWHMASS real, public, POINTER, DIMENSION(:,:) :: XSNOWLIQ real, public, POINTER, DIMENSION(:,:) :: XSNOWTEMP real, public, POINTER, DIMENSION(:) :: XTWSNOW real, public, POINTER, DIMENSION(:) :: XTDSNOW real, public, POINTER, DIMENSION(:) :: XTTSNOW real, public, POINTER, DIMENSION(:) :: XSNDPT_1DY real, public, POINTER, DIMENSION(:) :: XSNDPT_3DY real, public, POINTER, DIMENSION(:) :: XSNDPT_5DY real, public, POINTER, DIMENSION(:) :: XSNDPT_7DY real, public, POINTER, DIMENSION(:) :: XSNSWE_1DY real, public, POINTER, DIMENSION(:) :: XSNSWE_3DY real, public, POINTER, DIMENSION(:) :: XSNSWE_5DY real, public, POINTER, DIMENSION(:) :: XSNSWE_7DY real, public, POINTER, DIMENSION(:) :: XSNRAM_SONDE real, public, POINTER, DIMENSION(:) :: XSN_WETTHCKN real, public, POINTER, DIMENSION(:) :: XSN_REFRZNTHCKN real, public, POINTER, DIMENSION(:) :: XPSNG real, public, POINTER, DIMENSION(:) :: XPSNV real, public, POINTER, DIMENSION(:) :: XPSN real, public, POINTER, DIMENSION(:) :: XFSAT real, public, POINTER, DIMENSION(:) :: XFFG real, public, POINTER, DIMENSION(:) :: XFFV real, public, POINTER, DIMENSION(:) :: XFF real, public, POINTER, DIMENSION(:) :: XSEUIL real, public, POINTER, DIMENSION(:) :: XFAPAR real, public, POINTER, DIMENSION(:) :: XFAPIR real, public, POINTER, DIMENSION(:) :: XDFAPARC real, public, POINTER, DIMENSION(:) :: XDFAPIRC real, public, POINTER, DIMENSION(:) :: XFAPAR_BS real, public, POINTER, DIMENSION(:) :: XFAPIR_BS real, public, POINTER, DIMENSION(:) :: XDLAI_EFFC real, public, POINTER, DIMENSION(:) :: XCG real, public, POINTER, DIMENSION(:) :: XC1 real, public, POINTER, DIMENSION(:) :: XC2 real, public, POINTER, DIMENSION(:) :: XWGEQ real, public, POINTER, DIMENSION(:) :: XCT real, public, POINTER, DIMENSION(:) :: XRS type, public :: DIAG_MISC_ISBA_NP_t Components Type Visibility Attributes Name Initial type( DIAG_MISC_ISBA_t ), public, POINTER :: AL (:) => NULL() Subroutines public subroutine DIAG_MISC_ISBA_NP_INIT (YNDIAG_MISC_ISBA, KPATCH) Arguments Type Intent Optional Attributes Name type( DIAG_MISC_ISBA_NP_t ), intent(inout) :: YNDIAG_MISC_ISBA integer, intent(in) :: KPATCH public subroutine DIAG_MISC_ISBA_INIT (DMI) Arguments Type Intent Optional Attributes Name type( DIAG_MISC_ISBA_t ), intent(inout) :: DMI","tags":"","loc":"module/modd_diag_misc_isba_n.html"},{"title":"MODI_TRIDIAG_GROUND – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces TRIDIAG_GROUND Interfaces interface public subroutine TRIDIAG_GROUND(PA, PB, PC, PY, PX) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PA real, intent(in), DIMENSION(:,:) :: PB real, intent(in), DIMENSION(:,:) :: PC real, intent(in), DIMENSION(:,:) :: PY real, intent(out), DIMENSION(:,:) :: PX","tags":"","loc":"module/modi_tridiag_ground.html"},{"title":"MODI_LAYER_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces LAYER_E_BUDGET Interfaces interface public subroutine LAYER_E_BUDGET(PT, PTSTEP, PIMPL, PHC, PTC, PD, PA, PB, PC, PY, PDQS) Arguments Type Intent Optional Attributes Name real, intent(inout), DIMENSION(:,:) :: PT real, intent(in) :: PTSTEP real, intent(in) :: PIMPL real, intent(in), DIMENSION(:,:) :: PHC real, intent(in), DIMENSION(:,:) :: PTC real, intent(in), DIMENSION(:,:) :: PD real, intent(in), DIMENSION(:,:) :: PA real, intent(in), DIMENSION(:,:) :: PB real, intent(in), DIMENSION(:,:) :: PC real, intent(in), DIMENSION(:,:) :: PY real, intent(out), DIMENSION(:) :: PDQS","tags":"","loc":"module/modi_layer_e_budget.html"},{"title":"MODD_ISBA_OPTIONS_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types ISBA_OPTIONS_t Subroutines ISBA_OPTIONS_INIT Derived Types type, public :: ISBA_OPTIONS_t Components Type Visibility Attributes Name Initial logical, public :: LECOCLIMAP logical, public :: LPAR integer, public :: NPATCH integer, public :: NGROUND_LAYER character(len=3), public :: CISBA character(len=4), public :: CPEDOTF character(len=3), public :: CPHOTO real, public, POINTER, DIMENSION(:) :: XSOILGRID logical, public :: LTR_ML real, public :: XRM_PATCH logical, public :: LSOCP logical, public :: LCTI logical, public :: LPERM logical, public :: LNOF character(len=4), public :: CTYPE_HVEG character(len=4), public :: CTYPE_LVEG character(len=4), public :: CTYPE_NVEG character(len=5), public :: CTYP_COV integer, public :: NNBIOMASS integer, public :: NNLITTER integer, public :: NNLITTLEVS integer, public :: NNSOILCARB logical, public, POINTER, DIMENSION(:) :: LMEB_PATCH logical, public :: LFORC_MEASURE logical, public :: LMEB_LITTER logical, public :: LMEB_GNDRES logical, public :: LCANOPY character(len=3), public :: CRESPSL character(len=4), public :: CC1DRY character(len=4), public :: CSCOND character(len=3), public :: CSOILFRZ character(len=4), public :: CDIFSFCOND character(len=3), public :: CSNOWRES character(len=4), public :: CALBEDO character(len=3), public :: CCPSURF real, public :: XOUT_TSTEP real, public :: XTSTEP real, public :: XCGMAX real, public :: XCDRAG logical, public :: LGLACIER logical, public :: LCANOPY_DRAG logical, public :: LVEGUPD logical, public :: LPERTSURF integer, public :: NLAYER_HORT integer, public :: NLAYER_DUN character(len=4), public :: CRUNOFF character(len=3), public :: CKSAT logical, public :: LSOC character(len=3), public :: CRAIN character(len=3), public :: CHORT logical, public :: LNITRO_DILU logical, public :: LSPINUPCARBS logical, public :: LSPINUPCARBW real, public :: XSPINMAXS real, public :: XSPINMAXW real, public :: XCO2_START real, public :: XCO2_END integer, public :: NNBYEARSPINS integer, public :: NNBYEARSPINW integer, public :: NNBYEARSOLD integer, public :: NSPINS integer, public :: NSPINW logical, public :: LAGRI_TO_GRASS logical, public :: LSNOWDRIFT logical, public :: LSNOWDRIFT_SUBLIM logical, public :: LSNOW_ABS_ZENITH character(len=3), public :: CSNOWMETAMO character(len=3), public :: CSNOWRAD logical, public :: LFLOOD logical, public :: LWTD logical, public :: LCPL_RRM logical, public :: LTEMP_ARP integer, public :: NTEMPLAYER_ARP real, public, POINTER, DIMENSION(:) :: XSODELX Subroutines public subroutine ISBA_OPTIONS_INIT (IO) Arguments Type Intent Optional Attributes Name type( ISBA_OPTIONS_t ), intent(inout) :: IO","tags":"","loc":"module/modd_isba_options_n.html"},{"title":"MODD_BEM_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types BEM_t BEM_NP_t Subroutines BEM_INIT BEM_NP_INIT Derived Types type, public :: BEM_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:,:) :: XHC_FLOOR real, public, POINTER, DIMENSION(:,:) :: XTC_FLOOR real, public, POINTER, DIMENSION(:,:) :: XD_FLOOR real, public, POINTER, DIMENSION(:) :: XTCOOL_TARGET real, public, POINTER, DIMENSION(:) :: XTHEAT_TARGET real, public, POINTER, DIMENSION(:) :: XF_WASTE_CAN real, public, POINTER, DIMENSION(:) :: XEFF_HEAT real, public, POINTER, DIMENSION(:) :: XTI_BLD real, public, POINTER, DIMENSION(:,:) :: XT_FLOOR real, public, POINTER, DIMENSION(:,:) :: XT_MASS real, public, POINTER, DIMENSION(:) :: XQIN real, public, POINTER, DIMENSION(:) :: XQIN_FRAD real, public, POINTER, DIMENSION(:) :: XSHGC real, public, POINTER, DIMENSION(:) :: XSHGC_SH real, public, POINTER, DIMENSION(:) :: XU_WIN real, public, POINTER, DIMENSION(:) :: XTRAN_WIN real, public, POINTER, DIMENSION(:) :: XGR real, public, POINTER, DIMENSION(:) :: XFLOOR_HEIGHT real, public, POINTER, DIMENSION(:) :: XINF real, public, POINTER, DIMENSION(:) :: XF_WATER_COND real, public, POINTER, DIMENSION(:) :: XAUX_MAX real, public, POINTER, DIMENSION(:) :: XQIN_FLAT real, public, POINTER, DIMENSION(:) :: XHR_TARGET real, public, POINTER, DIMENSION(:) :: XT_WIN2 real, public, POINTER, DIMENSION(:) :: XQI_BLD real, public, POINTER, DIMENSION(:) :: XV_VENT real, public, POINTER, DIMENSION(:) :: XCAP_SYS_HEAT real, public, POINTER, DIMENSION(:) :: XCAP_SYS_RAT real, public, POINTER, DIMENSION(:) :: XT_ADP real, public, POINTER, DIMENSION(:) :: XM_SYS_RAT real, public, POINTER, DIMENSION(:) :: XCOP_RAT real, public, POINTER, DIMENSION(:) :: XT_WIN1 real, public, POINTER, DIMENSION(:) :: XALB_WIN real, public, POINTER, DIMENSION(:) :: XABS_WIN real, public, POINTER, DIMENSION(:) :: XT_SIZE_MAX real, public, POINTER, DIMENSION(:) :: XT_SIZE_MIN real, public, POINTER, DIMENSION(:) :: XUGG_WIN logical, public, POINTER, DIMENSION(:) :: LSHADE real, public, POINTER, DIMENSION(:) :: XSHADE character(len=4), public, POINTER, DIMENSION(:) :: CNATVENT real, public, POINTER, DIMENSION(:) :: XNATVENT logical, public, POINTER, DIMENSION(:) :: LSHAD_DAY logical, public, POINTER, DIMENSION(:) :: LNATVENT_NIGHT real, public, POINTER, DIMENSION(:) :: XN_FLOOR real, public, POINTER, DIMENSION(:) :: XGLAZ_O_BLD real, public, POINTER, DIMENSION(:) :: XMASS_O_BLD real, public, POINTER, DIMENSION(:) :: XFLOOR_HW_RATIO real, public, POINTER, DIMENSION(:) :: XF_FLOOR_MASS real, public, POINTER, DIMENSION(:) :: XF_FLOOR_WALL real, public, POINTER, DIMENSION(:) :: XF_FLOOR_WIN real, public, POINTER, DIMENSION(:) :: XF_FLOOR_ROOF real, public, POINTER, DIMENSION(:) :: XF_WALL_FLOOR real, public, POINTER, DIMENSION(:) :: XF_WALL_MASS real, public, POINTER, DIMENSION(:) :: XF_WALL_WIN real, public, POINTER, DIMENSION(:) :: XF_WIN_FLOOR real, public, POINTER, DIMENSION(:) :: XF_WIN_MASS real, public, POINTER, DIMENSION(:) :: XF_WIN_WALL real, public, POINTER, DIMENSION(:) :: XF_WIN_WIN real, public, POINTER, DIMENSION(:) :: XF_MASS_FLOOR real, public, POINTER, DIMENSION(:) :: XF_MASS_WALL real, public, POINTER, DIMENSION(:) :: XF_MASS_WIN type, public :: BEM_NP_t Components Type Visibility Attributes Name Initial type( BEM_t ), public, POINTER :: AL (:) => NULL() Subroutines public subroutine BEM_INIT (YBEM) Arguments Type Intent Optional Attributes Name type( BEM_t ), intent(inout) :: YBEM public subroutine BEM_NP_INIT (YNBEM, KPATCH) Arguments Type Intent Optional Attributes Name type( BEM_NP_t ), intent(inout) :: YNBEM integer, intent(in) :: KPATCH","tags":"","loc":"module/modd_bem_n.html"},{"title":"MODD_DATA_BEM_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types DATA_BEM_t Subroutines DATA_BEM_INIT Derived Types type, public :: DATA_BEM_t Components Type Visibility Attributes Name Initial logical, public :: LDATA_TCOOL_TARGET logical, public :: LDATA_THEAT_TARGET logical, public :: LDATA_F_WASTE_CAN logical, public :: LDATA_EFF_HEAT logical, public :: LDATA_HC_FLOOR logical, public :: LDATA_TC_FLOOR logical, public :: LDATA_D_FLOOR logical, public :: LDATA_QIN logical, public :: LDATA_QIN_FRAD logical, public :: LDATA_SHGC logical, public :: LDATA_U_WIN logical, public :: LDATA_GR logical, public :: LDATA_SHGC_SH logical, public :: LDATA_FLOOR_HEIGHT logical, public :: LDATA_INF logical, public :: LDATA_F_WATER_COND logical, public :: LDATA_SHADE logical, public :: LDATA_NATVENT logical, public :: LDATA_QIN_FLAT logical, public :: LDATA_HR_TARGET logical, public :: LDATA_V_VENT logical, public :: LDATA_CAP_SYS_HEAT logical, public :: LDATA_CAP_SYS_RAT logical, public :: LDATA_T_ADP logical, public :: LDATA_M_SYS_RAT logical, public :: LDATA_COP_RAT logical, public :: LDATA_T_SIZE_MAX logical, public :: LDATA_T_SIZE_MIN integer, public :: NPAR_FLOOR_LAYER real, public, POINTER, DIMENSION(:) :: XPAR_TCOOL_TARGET real, public, POINTER, DIMENSION(:) :: XPAR_THEAT_TARGET real, public, POINTER, DIMENSION(:) :: XPAR_F_WASTE_CAN real, public, POINTER, DIMENSION(:) :: XPAR_EFF_HEAT real, public, POINTER, DIMENSION(:,:) :: XPAR_HC_FLOOR real, public, POINTER, DIMENSION(:,:) :: XPAR_TC_FLOOR real, public, POINTER, DIMENSION(:,:) :: XPAR_D_FLOOR real, public, POINTER, DIMENSION(:) :: XPAR_QIN real, public, POINTER, DIMENSION(:) :: XPAR_QIN_FRAD real, public, POINTER, DIMENSION(:) :: XPAR_SHGC real, public, POINTER, DIMENSION(:) :: XPAR_U_WIN real, public, POINTER, DIMENSION(:) :: XPAR_GR real, public, POINTER, DIMENSION(:) :: XPAR_SHGC_SH real, public, POINTER, DIMENSION(:) :: XPAR_FLOOR_HEIGHT real, public, POINTER, DIMENSION(:) :: XPAR_INF real, public, POINTER, DIMENSION(:) :: XPAR_F_WATER_COND real, public, POINTER, DIMENSION(:) :: XPAR_SHADE real, public, POINTER, DIMENSION(:) :: XPAR_NATVENT real, public, POINTER, DIMENSION(:) :: XPAR_QIN_FLAT real, public, POINTER, DIMENSION(:) :: XPAR_HR_TARGET real, public, POINTER, DIMENSION(:) :: XPAR_V_VENT real, public, POINTER, DIMENSION(:) :: XPAR_CAP_SYS_HEAT real, public, POINTER, DIMENSION(:) :: XPAR_CAP_SYS_RAT real, public, POINTER, DIMENSION(:) :: XPAR_T_ADP real, public, POINTER, DIMENSION(:) :: XPAR_M_SYS_RAT real, public, POINTER, DIMENSION(:) :: XPAR_COP_RAT real, public, POINTER, DIMENSION(:) :: XPAR_T_SIZE_MAX real, public, POINTER, DIMENSION(:) :: XPAR_T_SIZE_MIN Subroutines public subroutine DATA_BEM_INIT (YDATA_BEM) Arguments Type Intent Optional Attributes Name type( DATA_BEM_t ), intent(inout) :: YDATA_BEM","tags":"","loc":"module/modd_data_bem_n.html"},{"title":"MODD_CH_EMIS_FIELD_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK MODD_TYPE_EFUTIL Contents Derived Types CH_EMIS_FIELD_t Subroutines CH_EMIS_FIELD_INIT Derived Types type, public :: CH_EMIS_FIELD_t Components Type Visibility Attributes Name Initial real, public :: XTIME_SIMUL = 0. integer, public :: NTIME_MAX integer, public :: NEMIS_NBR character(len=3), public, DIMENSION(:), POINTER :: CEMIS_AREA character(len=40), public, DIMENSION(:), POINTER :: CEMIS_COMMENT character(len=40), public, DIMENSION(:), POINTER :: CEMIS_NAME integer, public, DIMENSION(:), POINTER :: NEMIS_TIME real, public, DIMENSION(:,:), POINTER :: XEMIS_FIELDS integer, public :: NEMISPEC_NBR type(EMISSVAR_T), public, DIMENSION(:), POINTER :: TSEMISS type(PRONOSVAR_T), public, POINTER :: TSPRONOSLIST Subroutines public subroutine CH_EMIS_FIELD_INIT (YCH_EMIS_FIELD) Arguments Type Intent Optional Attributes Name type( CH_EMIS_FIELD_t ), intent(inout) :: YCH_EMIS_FIELD","tags":"","loc":"module/modd_ch_emis_field_n.html"},{"title":"MODI_BLD_E_BUDGET – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces BLD_E_BUDGET Interfaces interface public subroutine BLD_E_BUDGET(OTI_EVOL, PTSTEP, PBLD, PWALL_O_HOR, PRHOA, PT_ROOF, PT_WALL, PTI_BLD, PTS_FLOOR) Arguments Type Intent Optional Attributes Name logical, intent(in) :: OTI_EVOL real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PBLD real, intent(in), DIMENSION(:) :: PWALL_O_HOR real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:,:) :: PT_ROOF real, intent(in), DIMENSION(:,:) :: PT_WALL real, intent(inout), DIMENSION(:) :: PTI_BLD real, intent(in), DIMENSION(:) :: PTS_FLOOR","tags":"","loc":"module/modi_bld_e_budget.html"},{"title":"MODI_ISBA – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces ISBA Interfaces interface public subroutine ISBA(IO, KK, PK, PEK, G, AG, DK, DEK, DMK, TPTIME, PPOI, PABC, PIACAN, OMEB, PTSTEP, HIMPLICIT_WIND, PZREF, PUREF, PDIRCOSZW, PTA, PQA, PEXNA, PRHOA, PPS, PEXNS, PRR, PSR, PZENITH, PSCA_SW, PSW_RAD, PLW_RAD, PVMOD, PPEW_A_COEF, PPEW_B_COEF, PPET_A_COEF, PPEQ_A_COEF, PPET_B_COEF, PPEQ_B_COEF, PALBNIR_TVEG, PALBVIS_TVEG, PALBNIR_TSOIL, PALBVIS_TSOIL, PPALPHAN, PZ0G_WITHOUT_SNOW, PZ0_MEBV, PZ0H_MEBV, PZ0EFF_MEBV, PZ0_MEBN, PZ0H_MEBN, PZ0EFF_MEBN, PTDEEP_A, PCSP, PFFG_NOSNOW, PFFV_NOSNOW, PEMIST, PUSTAR, PAC_AGG, PHU_AGG, PRESP_BIOMASS_INST, PDEEP_FLUX, PIRRIG_GR) Arguments Type Intent Optional Attributes Name type(ISBA_OPTIONS_t), intent(inout) :: IO type(ISBA_K_t), intent(inout) :: KK type(ISBA_P_t), intent(inout) :: PK type(ISBA_PE_t), intent(inout) :: PEK type(GRID_t), intent(inout) :: G type(AGRI_t), intent(inout) :: AG type(DIAG_t), intent(inout) :: DK type(DIAG_EVAP_ISBA_t), intent(inout) :: DEK type(DIAG_MISC_ISBA_t), intent(inout) :: DMK type(DATE_TIME), intent(in) :: TPTIME real, intent(in), DIMENSION(:) :: PPOI real, intent(inout), DIMENSION(:) :: PABC real, intent(out), DIMENSION(:,:) :: PIACAN logical, intent(in) :: OMEB real, intent(in) :: PTSTEP character(len=*), intent(in) :: HIMPLICIT_WIND real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PDIRCOSZW real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZENITH real, intent(in), DIMENSION(:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PSW_RAD real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPET_A_COEF real, intent(in), DIMENSION(:) :: PPEQ_A_COEF real, intent(in), DIMENSION(:) :: PPET_B_COEF real, intent(in), DIMENSION(:) :: PPEQ_B_COEF real, intent(in), DIMENSION(:) :: PALBNIR_TVEG real, intent(in), DIMENSION(:) :: PALBVIS_TVEG real, intent(in), DIMENSION(:) :: PALBNIR_TSOIL real, intent(in), DIMENSION(:) :: PALBVIS_TSOIL real, intent(in), DIMENSION(:) :: PPALPHAN real, intent(in), DIMENSION(:) :: PZ0G_WITHOUT_SNOW real, intent(in), DIMENSION(:) :: PZ0_MEBV real, intent(in), DIMENSION(:) :: PZ0H_MEBV real, intent(in), DIMENSION(:) :: PZ0EFF_MEBV real, intent(in), DIMENSION(:) :: PZ0_MEBN real, intent(in), DIMENSION(:) :: PZ0H_MEBN real, intent(in), DIMENSION(:) :: PZ0EFF_MEBN real, intent(in), DIMENSION(:) :: PTDEEP_A real, intent(in), DIMENSION(:) :: PCSP real, intent(in), DIMENSION(:) :: PFFG_NOSNOW real, intent(in), DIMENSION(:) :: PFFV_NOSNOW real, intent(out), DIMENSION(:) :: PEMIST real, intent(out), DIMENSION(:) :: PUSTAR real, intent(out), DIMENSION(:) :: PAC_AGG real, intent(out), DIMENSION(:) :: PHU_AGG real, intent(out), DIMENSION(:,:) :: PRESP_BIOMASS_INST real, intent(out), DIMENSION(:) :: PDEEP_FLUX real, intent(in), DIMENSION(:) :: PIRRIG_GR","tags":"","loc":"module/modi_isba.html"},{"title":"MODD_SFX_GRID_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types GRID_t GRID_NP_t Subroutines GRID_INIT GRID_NP_INIT Derived Types type, public :: GRID_t Components Type Visibility Attributes Name Initial integer, public :: NDIM character(len=10), public :: CGRID integer, public :: NGRID_PAR real, public, POINTER, DIMENSION(:) :: XGRID_PAR real, public, POINTER, DIMENSION(:) :: XLAT real, public, POINTER, DIMENSION(:) :: XLON real, public, POINTER, DIMENSION(:) :: XMESH_SIZE type, public :: GRID_NP_t Components Type Visibility Attributes Name Initial type( GRID_t ), public, DIMENSION(:), POINTER :: AL => NULL() Subroutines public subroutine GRID_INIT (G) Arguments Type Intent Optional Attributes Name type( GRID_t ), intent(inout) :: G public subroutine GRID_NP_INIT (GP, KPATCH) Arguments Type Intent Optional Attributes Name type( GRID_NP_t ), intent(inout) :: GP integer, intent(in) :: KPATCH","tags":"","loc":"module/modd_sfx_grid_n.html"},{"title":"MODI_SNOW_COVER_1LAYER – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces SNOW_COVER_1LAYER Interfaces interface public subroutine SNOW_COVER_1LAYER(PTSTEP, PANSMIN, PANSMAX, PTODRY, PRHOSMIN, PRHOSMAX, PRHOFOLD, OALL_MELT, PDRAIN_TIME, PWCRN, PZ0SN, PZ0HSN, TPSNOW, PTG, PTG_COEFA, PTG_COEFB, PABS_SW, PLW1, PLW2, PTA, PQA, PVMOD, PPS, PRHOA, PSR, PZREF, PUREF, PRNSNOW, PHSNOW, PLESNOW, PGSNOW, PMELT, PDQS_SNOW, PABS_LW) Arguments Type Intent Optional Attributes Name real, intent(in) :: PTSTEP real, intent(in) :: PANSMIN real, intent(in) :: PANSMAX real, intent(in) :: PTODRY real, intent(in) :: PRHOSMIN real, intent(in) :: PRHOSMAX real, intent(in) :: PRHOFOLD logical, intent(in) :: OALL_MELT real, intent(in) :: PDRAIN_TIME real, intent(in) :: PWCRN real, intent(in) :: PZ0SN real, intent(in) :: PZ0HSN type(SURF_SNOW), intent(inout) :: TPSNOW real, intent(in), DIMENSION(:) :: PTG real, intent(in), DIMENSION(:) :: PTG_COEFA real, intent(in), DIMENSION(:) :: PTG_COEFB real, intent(in), DIMENSION(:) :: PABS_SW real, intent(in), DIMENSION(:) :: PLW1 real, intent(in), DIMENSION(:) :: PLW2 real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(out), DIMENSION(:) :: PRNSNOW real, intent(out), DIMENSION(:) :: PHSNOW real, intent(out), DIMENSION(:) :: PLESNOW real, intent(out), DIMENSION(:) :: PGSNOW real, intent(out), DIMENSION(:) :: PMELT real, intent(out), DIMENSION(:) :: PDQS_SNOW real, intent(out), DIMENSION(:) :: PABS_LW","tags":"","loc":"module/modi_snow_cover_1layer.html"},{"title":"MODD_CH_SEAFLUX_n – Town Energy Balance (TEB) model API docs","text":"Uses MODD_SV_n PARKIND1 YOMHOOK Contents Derived Types CH_SEAFLUX_t Subroutines CH_SEAFLUX_INIT Derived Types type, public :: CH_SEAFLUX_t Components Type Visibility Attributes Name Initial character(len=6), public :: CCH_DRY_DEP real, public, DIMENSION(:,:), POINTER :: XDEP type(SV_t), public :: SVS character(len=6), public, DIMENSION(:), POINTER :: CCH_NAMES character(len=6), public, DIMENSION(:), POINTER :: CDSTNAMES character(len=6), public, DIMENSION(:), POINTER :: CSLTNAMES character(len=6), public, DIMENSION(:), POINTER :: CAER_NAMES Subroutines public subroutine CH_SEAFLUX_INIT (YCH_SEAFLUX) Arguments Type Intent Optional Attributes Name type( CH_SEAFLUX_t ), intent(inout) :: YCH_SEAFLUX","tags":"","loc":"module/modd_ch_seaflux_n.html"},{"title":"mode_psychrolib – Town Energy Balance (TEB) model API docs","text":"Contents Variables ZERO_FAHRENHEIT_AS_RANKINE ZERO_CELSIUS_AS_KELVIN R_DA_IP R_DA_SI IP SI PSYCHROLIB_UNITS PSYCHROLIB_TOLERANCE MAX_ITER_COUNT MIN_HUM_RATIO FREEZING_POINT_WATER_IP FREEZING_POINT_WATER_SI TRIPLE_POINT_WATER_IP TRIPLE_POINT_WATER_SI Functions GetUnitSystem isIP GetTRankineFromTFahrenheit GetTFahrenheitFromTRankine GetTKelvinFromTCelsius GetTCelsiusFromTKelvin GetTWetBulbFromTDewPoint GetTWetBulbFromRelHum GetRelHumFromTDewPoint GetRelHumFromTWetBulb GetTDewPointFromRelHum GetTDewPointFromTWetBulb GetVapPresFromRelHum GetRelHumFromVapPres dLnPws_ GetTDewPointFromVapPres GetVapPresFromTDewPoint GetTWetBulbFromHumRatio GetHumRatioFromTWetBulb GetHumRatioFromRelHum GetRelHumFromHumRatio GetHumRatioFromTDewPoint GetTDewPointFromHumRatio GetHumRatioFromVapPres GetVapPresFromHumRatio GetSpecificHumFromHumRatio GetHumRatioFromSpecificHum GetDryAirEnthalpy GetDryAirDensity GetDryAirVolume GetTDryBulbFromEnthalpyAndHumRatio GetHumRatioFromEnthalpyAndTDryBulb GetSatVapPres GetSatHumRatio GetSatAirEnthalpy GetVaporPressureDeficit GetDegreeOfSaturation GetMoistAirEnthalpy GetMoistAirVolume GetTDryBulbFromMoistAirVolumeAndHumRatio GetMoistAirDensity GetStandardAtmPressure GetStandardAtmTemperature GetSeaLevelPressure GetStationPressure Subroutines SetUnitSystem CalcPsychrometricsFromTWetBulb CalcPsychrometricsFromTDewPoint CalcPsychrometricsFromRelHum Variables Type Visibility Attributes Name Initial real, private, parameter :: ZERO_FAHRENHEIT_AS_RANKINE = 459.67 real, private, parameter :: ZERO_CELSIUS_AS_KELVIN = 273.15 real, private, parameter :: R_DA_IP = 53.350 real, private, parameter :: R_DA_SI = 287.042 integer, public, parameter :: IP = 1 integer, public, parameter :: SI = 2 integer, private :: PSYCHROLIB_UNITS = 0 real, private :: PSYCHROLIB_TOLERANCE = 1.0 integer, private, parameter :: MAX_ITER_COUNT = 100 real, private, parameter :: MIN_HUM_RATIO = 1e-7 real, private, parameter :: FREEZING_POINT_WATER_IP = 32.0 real, private, parameter :: FREEZING_POINT_WATER_SI = 0.0 real, private, parameter :: TRIPLE_POINT_WATER_IP = 32.018 real, private, parameter :: TRIPLE_POINT_WATER_SI = 0.01 Functions public function GetUnitSystem () result(UnitSystem) Arguments None Return Value integer public function isIP () Arguments None Return Value logical public function GetTRankineFromTFahrenheit (TFahrenheit) result(TRankine) Arguments Type Intent Optional Attributes Name real, intent(in) :: TFahrenheit Return Value real public function GetTFahrenheitFromTRankine (TRankine) result(TFahrenheit) Arguments Type Intent Optional Attributes Name real, intent(in) :: TRankine Return Value real public function GetTKelvinFromTCelsius (TCelsius) result(TKelvin) Arguments Type Intent Optional Attributes Name real, intent(in) :: TCelsius Return Value real public function GetTCelsiusFromTKelvin (TKelvin) result(TCelsius) Arguments Type Intent Optional Attributes Name real, intent(in) :: TKelvin Return Value real public function GetTWetBulbFromTDewPoint (TDryBulb, TDewPoint, Pressure) result(TWetBulb) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: TDewPoint real, intent(in) :: Pressure Return Value real public function GetTWetBulbFromRelHum (TDryBulb, RelHum, Pressure) result(TWetBulb) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: RelHum real, intent(in) :: Pressure Return Value real public function GetRelHumFromTDewPoint (TDryBulb, TDewPoint) result(RelHum) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: TDewPoint Return Value real public function GetRelHumFromTWetBulb (TDryBulb, TWetBulb, Pressure) result(RelHum) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: TWetBulb real, intent(in) :: Pressure Return Value real public function GetTDewPointFromRelHum (TDryBulb, RelHum) result(TDewPoint) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: RelHum Return Value real public function GetTDewPointFromTWetBulb (TDryBulb, TWetBulb, Pressure) result(TDewPoint) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: TWetBulb real, intent(in) :: Pressure Return Value real public function GetVapPresFromRelHum (TDryBulb, RelHum) result(VapPres) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: RelHum Return Value real public function GetRelHumFromVapPres (TDryBulb, VapPres) result(RelHum) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: VapPres Return Value real public function dLnPws_ (TDryBulb) result(dLnPws) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Return Value real public function GetTDewPointFromVapPres (TDryBulb, VapPres) result(TDewPoint) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: VapPres Return Value real public function GetVapPresFromTDewPoint (TDewPoint) result(VapPres) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDewPoint Return Value real public function GetTWetBulbFromHumRatio (TDryBulb, HumRatio, Pressure) result(TWetBulb) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real public function GetHumRatioFromTWetBulb (TDryBulb, TWetBulb, Pressure) result(HumRatio) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: TWetBulb real, intent(in) :: Pressure Return Value real public function GetHumRatioFromRelHum (TDryBulb, RelHum, Pressure) result(HumRatio) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: RelHum real, intent(in) :: Pressure Return Value real public function GetRelHumFromHumRatio (TDryBulb, HumRatio, Pressure) result(RelHum) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real public function GetHumRatioFromTDewPoint (TDewPoint, Pressure) result(HumRatio) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDewPoint real, intent(in) :: Pressure Return Value real public function GetTDewPointFromHumRatio (TDryBulb, HumRatio, Pressure) result(TDewPoint) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real public function GetHumRatioFromVapPres (VapPres, Pressure) result(HumRatio) Arguments Type Intent Optional Attributes Name real, intent(in) :: VapPres real, intent(in) :: Pressure Return Value real public function GetVapPresFromHumRatio (HumRatio, Pressure) result(VapPres) Arguments Type Intent Optional Attributes Name real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real public function GetSpecificHumFromHumRatio (HumRatio) result(SpecificHum) Arguments Type Intent Optional Attributes Name real, intent(in) :: HumRatio Return Value real public function GetHumRatioFromSpecificHum (SpecificHum) result(HumRatio) Arguments Type Intent Optional Attributes Name real, intent(in) :: SpecificHum Return Value real public function GetDryAirEnthalpy (TDryBulb) result(DryAirEnthalpy) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Return Value real public function GetDryAirDensity (TDryBulb, Pressure) result(DryAirDensity) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: Pressure Return Value real public function GetDryAirVolume (TDryBulb, Pressure) result(DryAirVolume) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: Pressure Return Value real public function GetTDryBulbFromEnthalpyAndHumRatio (MoistAirEnthalpy, HumRatio) result(TDryBulb) Arguments Type Intent Optional Attributes Name real, intent(in) :: MoistAirEnthalpy real, intent(in) :: HumRatio Return Value real public function GetHumRatioFromEnthalpyAndTDryBulb (MoistAirEnthalpy, TDryBulb) result(HumRatio) Arguments Type Intent Optional Attributes Name real, intent(in) :: MoistAirEnthalpy real, intent(in) :: TDryBulb Return Value real public function GetSatVapPres (TDryBulb) result(SatVapPres) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb Return Value real public function GetSatHumRatio (TDryBulb, Pressure) result(SatHumRatio) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: Pressure Return Value real public function GetSatAirEnthalpy (TDryBulb, Pressure) result(SatAirEnthalpy) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: Pressure Return Value real public function GetVaporPressureDeficit (TDryBulb, HumRatio, Pressure) result(VaporPressureDeficit) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real public function GetDegreeOfSaturation (TDryBulb, HumRatio, Pressure) result(DegreeOfSaturation) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real public function GetMoistAirEnthalpy (TDryBulb, HumRatio) result(MoistAirEnthalpy) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: HumRatio Return Value real public function GetMoistAirVolume (TDryBulb, HumRatio, Pressure) result(MoistAirVolume) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real public function GetTDryBulbFromMoistAirVolumeAndHumRatio (MoistAirVolume, HumRatio, Pressure) result(TDryBulb) Arguments Type Intent Optional Attributes Name real, intent(in) :: MoistAirVolume real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real public function GetMoistAirDensity (TDryBulb, HumRatio, Pressure) result(MoistAirDensity) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: HumRatio real, intent(in) :: Pressure Return Value real public function GetStandardAtmPressure (Altitude) result(StandardAtmPressure) Arguments Type Intent Optional Attributes Name real, intent(in) :: Altitude Return Value real public function GetStandardAtmTemperature (Altitude) result(StandardAtmTemperature) Arguments Type Intent Optional Attributes Name real, intent(in) :: Altitude Return Value real public function GetSeaLevelPressure (StnPressure, Altitude, TDryBulb) result(SeaLevelPressure) Arguments Type Intent Optional Attributes Name real, intent(in) :: StnPressure real, intent(in) :: Altitude real, intent(in) :: TDryBulb Return Value real public function GetStationPressure (SeaLevelPressure, Altitude, TDryBulb) result(StationPressure) Arguments Type Intent Optional Attributes Name real, intent(in) :: SeaLevelPressure real, intent(in) :: Altitude real, intent(in) :: TDryBulb Return Value real Subroutines public subroutine SetUnitSystem (UnitSystem) Arguments Type Intent Optional Attributes Name integer, intent(in) :: UnitSystem public subroutine CalcPsychrometricsFromTWetBulb (TDryBulb, TWetBulb, Pressure, HumRatio, TDewPoint, RelHum, VapPres, MoistAirEnthalpy, MoistAirVolume, DegreeOfSaturation) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: TWetBulb real, intent(in) :: Pressure real, intent(out) :: HumRatio real, intent(out) :: TDewPoint real, intent(out) :: RelHum real, intent(out) :: VapPres real, intent(out) :: MoistAirEnthalpy real, intent(out) :: MoistAirVolume real, intent(out) :: DegreeOfSaturation public subroutine CalcPsychrometricsFromTDewPoint (TDryBulb, TDewPoint, Pressure, HumRatio, TWetBulb, RelHum, VapPres, MoistAirEnthalpy, MoistAirVolume, DegreeOfSaturation) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: TDewPoint real, intent(in) :: Pressure real, intent(out) :: HumRatio real, intent(out) :: TWetBulb real, intent(out) :: RelHum real, intent(out) :: VapPres real, intent(out) :: MoistAirEnthalpy real, intent(out) :: MoistAirVolume real, intent(out) :: DegreeOfSaturation public subroutine CalcPsychrometricsFromRelHum (TDryBulb, RelHum, Pressure, HumRatio, TWetBulb, TDewPoint, VapPres, MoistAirEnthalpy, MoistAirVolume, DegreeOfSaturation) Arguments Type Intent Optional Attributes Name real, intent(in) :: TDryBulb real, intent(in) :: RelHum real, intent(in) :: Pressure real, intent(out) :: HumRatio real, intent(out) :: TWetBulb real, intent(out) :: TDewPoint real, intent(out) :: VapPres real, intent(out) :: MoistAirEnthalpy real, intent(out) :: MoistAirVolume real, intent(out) :: DegreeOfSaturation","tags":"","loc":"module/mode_psychrolib.html"},{"title":"MODD_DATA_ISBA_n – Town Energy Balance (TEB) model API docs","text":"Uses MODD_DATA_COVER_PAR YOMHOOK PARKIND1 Contents Derived Types DATA_ISBA_t Subroutines DATA_ISBA_INIT Derived Types type, public :: DATA_ISBA_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:,:) :: XPAR_VEGTYPE integer, public :: NVEGTYPE integer, public :: NTIME logical, public :: LDATA_MIXPAR logical, public :: LDATA_VEGTYPE logical, public, POINTER, DIMENSION(:) :: LDATA_LAI logical, public, POINTER, DIMENSION(:) :: LDATA_VEG logical, public, POINTER, DIMENSION(:) :: LDATA_Z0 logical, public, POINTER, DIMENSION(:) :: LDATA_EMIS logical, public, POINTER, DIMENSION(:) :: LDATA_ALBNIR_VEG logical, public, POINTER, DIMENSION(:) :: LDATA_ALBVIS_VEG logical, public, POINTER, DIMENSION(:) :: LDATA_ALBUV_VEG logical, public, POINTER, DIMENSION(:) :: LDATA_IRRIG logical, public, POINTER, DIMENSION(:) :: LDATA_WATSUP logical, public, POINTER, DIMENSION(:) :: LDATA_ALBNIR_SOIL logical, public, POINTER, DIMENSION(:) :: LDATA_ALBVIS_SOIL logical, public, POINTER, DIMENSION(:) :: LDATA_ALBUV_SOIL logical, public, POINTER, DIMENSION(:) :: LDATA_GNDLITTER logical, public, POINTER, DIMENSION(:) :: LDATA_Z0LITTER logical, public, POINTER, DIMENSION(:) :: LDATA_H_VEG logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_DG logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_ROOTFRAC logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_H_TREE logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_DICE logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_GROUND_DEPTH logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_ROOT_DEPTH logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_ROOT_EXTINCTION logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_ROOT_LIN logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_RSMIN logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_GAMMA logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_WRMAX_CF logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_CV logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_Z0_O_Z0H logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_RGL logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_BSLAI logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_LAIMIN logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_SEFOLD logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_GMES logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_RE25 logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_STRESS logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_F2I logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_GC logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_DMAX logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_CE_NITRO logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_CF_NITRO logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_CNA_NITRO logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_SEED_M logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_SEED_D logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_REAP_M logical, public, DIMENSION(MAX(NVEGTYPE_OLD,NVEGTYPE_ECOSG)) :: LDATA_REAP_D logical, public :: LDATA_CONDSAT logical, public :: LDATA_MPOTSAT logical, public :: LDATA_BCOEF logical, public :: LDATA_WWILT logical, public :: LDATA_WFC logical, public :: LDATA_WSAT logical, public :: LIMP_VEG logical, public :: LIMP_Z0 logical, public :: LIMP_EMIS real, public, POINTER, DIMENSION(:,:) :: XPAR_Z0_O_Z0H real, public, POINTER, DIMENSION(:,:,:) :: XPAR_EMIS real, public, POINTER, DIMENSION(:,:,:) :: XPAR_Z0 real, public, POINTER, DIMENSION(:,:,:) :: XPAR_ALBNIR_VEG real, public, POINTER, DIMENSION(:,:,:) :: XPAR_ALBVIS_VEG real, public, POINTER, DIMENSION(:,:,:) :: XPAR_ALBUV_VEG real, public, POINTER, DIMENSION(:,:,:) :: XPAR_VEG real, public, POINTER, DIMENSION(:,:) :: XPAR_WRMAX_CF real, public, POINTER, DIMENSION(:,:) :: XPAR_RSMIN real, public, POINTER, DIMENSION(:,:) :: XPAR_GAMMA real, public, POINTER, DIMENSION(:,:) :: XPAR_CV real, public, POINTER, DIMENSION(:,:) :: XPAR_RGL real, public, POINTER, DIMENSION(:,:,:) :: XPAR_ROOTFRAC real, public, POINTER, DIMENSION(:,:) :: XPAR_ROOT_DEPTH real, public, POINTER, DIMENSION(:,:) :: XPAR_ROOT_EXTINCTION real, public, POINTER, DIMENSION(:,:) :: XPAR_ROOT_LIN real, public, POINTER, DIMENSION(:,:,:) :: XPAR_GNDLITTER real, public, POINTER, DIMENSION(:,:,:) :: XPAR_Z0LITTER real, public, POINTER, DIMENSION(:,:,:) :: XPAR_H_VEG real, public, POINTER, DIMENSION(:,:) :: XPAR_BSLAI real, public, POINTER, DIMENSION(:,:) :: XPAR_LAIMIN real, public, POINTER, DIMENSION(:,:) :: XPAR_SEFOLD real, public, POINTER, DIMENSION(:,:) :: XPAR_H_TREE real, public, POINTER, DIMENSION(:,:) :: XPAR_GMES real, public, POINTER, DIMENSION(:,:) :: XPAR_RE25 logical, public, POINTER, DIMENSION(:,:) :: LPAR_STRESS real, public, POINTER, DIMENSION(:,:) :: XPAR_F2I real, public, POINTER, DIMENSION(:,:) :: XPAR_GC real, public, POINTER, DIMENSION(:,:) :: XPAR_DMAX real, public, POINTER, DIMENSION(:,:) :: XPAR_CE_NITRO real, public, POINTER, DIMENSION(:,:) :: XPAR_CF_NITRO real, public, POINTER, DIMENSION(:,:) :: XPAR_CNA_NITRO real, public, POINTER, DIMENSION(:,:,:) :: XPAR_DG real, public, POINTER, DIMENSION(:,:) :: XPAR_GROUND_DEPTH real, public, POINTER, DIMENSION(:,:) :: XPAR_DICE real, public, POINTER, DIMENSION(:,:,:) :: XPAR_ALBNIR_SOIL real, public, POINTER, DIMENSION(:,:,:) :: XPAR_ALBVIS_SOIL real, public, POINTER, DIMENSION(:,:,:) :: XPAR_ALBUV_SOIL real, public, POINTER, DIMENSION(:,:) :: XPAR_CONDSAT real, public, POINTER, DIMENSION(:,:) :: XPAR_MPOTSAT real, public, POINTER, DIMENSION(:,:) :: XPAR_BCOEF real, public, POINTER, DIMENSION(:,:) :: XPAR_WWILT real, public, POINTER, DIMENSION(:,:) :: XPAR_WFC real, public, POINTER, DIMENSION(:,:) :: XPAR_WSAT real, public, POINTER, DIMENSION(:,:,:) :: XPAR_LAI real, public, POINTER, DIMENSION(:,:,:) :: XPAR_IRRIG real, public, POINTER, DIMENSION(:,:,:) :: XPAR_WATSUP real, public, POINTER, DIMENSION(:,:) :: XPAR_SEED_M real, public, POINTER, DIMENSION(:,:) :: XPAR_SEED_D real, public, POINTER, DIMENSION(:,:) :: XPAR_REAP_M real, public, POINTER, DIMENSION(:,:) :: XPAR_REAP_D real, public, POINTER, DIMENSION(:) :: XPAR_FRAC_HVEG real, public, POINTER, DIMENSION(:) :: XPAR_FRAC_LVEG real, public, POINTER, DIMENSION(:) :: XPAR_FRAC_NVEG real, public, POINTER, DIMENSION(:,:) :: XPAR_LAI_HVEG real, public, POINTER, DIMENSION(:,:) :: XPAR_LAI_LVEG real, public, POINTER, DIMENSION(:) :: XPAR_H_HVEG Subroutines public subroutine DATA_ISBA_INIT (YDATA_ISBA) Arguments Type Intent Optional Attributes Name type( DATA_ISBA_t ), intent(inout) :: YDATA_ISBA","tags":"","loc":"module/modd_data_isba_n.html"},{"title":"MODD_CH_SURF_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types CH_SURF_t Subroutines CH_SURF_INIT Derived Types type, public :: CH_SURF_t Components Type Visibility Attributes Name Initial character(len=4), public :: CCH_EMIS character(len=6), public, DIMENSION(:), POINTER :: CCH_NAMES character(len=6), public, DIMENSION(:), POINTER :: CAER_NAMES character(len=28), public :: CCHEM_SURF_FILE real, public, DIMENSION(:), POINTER :: XCONVERSION logical, public :: LCH_SURF_EMIS logical, public :: LCH_EMIS Subroutines public subroutine CH_SURF_INIT (YCH_SURF) Arguments Type Intent Optional Attributes Name type( CH_SURF_t ), intent(inout) :: YCH_SURF","tags":"","loc":"module/modd_ch_surf_n.html"},{"title":"MODD_DST_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types DST_t DST_NP_t Subroutines DST_INIT DST_NP_INIT Derived Types type, public :: DST_t Components Type Visibility Attributes Name Initial integer, public, DIMENSION(:), POINTER :: NVT_DST integer, public, DIMENSION(:), POINTER :: NSIZE_PATCH_DST integer, public, DIMENSION(:,:), POINTER :: NR_PATCH_DST real, public, DIMENSION(:), POINTER :: Z0_EROD_DST character(len=6), public, DIMENSION(:), POINTER :: CSV_DST real, public, DIMENSION(:,:), POINTER :: XSFDST real, public, DIMENSION(:,:), POINTER :: XSFDSTM real, public, DIMENSION(:), POINTER :: XEMISRADIUS_DST real, public, DIMENSION(:), POINTER :: XEMISSIG_DST real, public, DIMENSION(:), POINTER :: XMSS_FRC_SRC type, public :: DST_NP_t Components Type Visibility Attributes Name Initial type( DST_t ), public, DIMENSION(:), POINTER :: AL => NULL() Subroutines public subroutine DST_INIT (YDST) Arguments Type Intent Optional Attributes Name type( DST_t ), intent(inout) :: YDST public subroutine DST_NP_INIT (YDST_NP, KPATCH) Arguments Type Intent Optional Attributes Name type( DST_NP_t ), intent(inout) :: YDST_NP integer, intent(in) :: KPATCH","tags":"","loc":"module/modd_dst_n.html"},{"title":"MODI_URBAN_DRAG – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces URBAN_DRAG Interfaces interface public subroutine URBAN_DRAG(TOP, T, B, HIMPLICIT_WIND, PTSTEP, PT_CANYON, PQ_CANYON, PU_CANYON, PT_LOWCAN, PQ_LOWCAN, PU_LOWCAN, PZ_LOWCAN, PTS_ROOF, PTS_ROAD, PTS_WALL, PTS_GARDEN, PDELT_SNOW_ROOF, PDELT_SNOW_ROAD, PEXNS, PEXNA, PTA, PQA, PPS, PRHOA, PZREF, PUREF, PVMOD, PWS_ROOF_MAX, PWS_ROAD_MAX, PPEW_A_COEF, PPEW_B_COEF, PPEW_A_COEF_LOWCAN, PPEW_B_COEF_LOWCAN, PQSAT_ROOF, PQSAT_ROAD, PDELT_ROOF, PDELT_ROAD, PCD, PCDN, PAC_ROOF, PAC_ROOF_WAT, PAC_WALL, PAC_ROAD, PAC_ROAD_WAT, PAC_TOP, PAC_GARDEN, PRI, PUW_ROAD, PUW_ROOF, PDUWDU_ROAD, PDUWDU_ROOF, PUSTAR_TOWN, PAC_WIN) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B character(len=*), intent(in) :: HIMPLICIT_WIND real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PT_CANYON real, intent(in), DIMENSION(:) :: PQ_CANYON real, intent(in), DIMENSION(:) :: PU_CANYON real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PU_LOWCAN real, intent(in), DIMENSION(:) :: PZ_LOWCAN real, intent(in), DIMENSION(:) :: PTS_ROOF real, intent(in), DIMENSION(:) :: PTS_ROAD real, intent(in), DIMENSION(:) :: PTS_WALL real, intent(in), DIMENSION(:) :: PTS_GARDEN real, intent(in), DIMENSION(:) :: PDELT_SNOW_ROOF real, intent(in), DIMENSION(:) :: PDELT_SNOW_ROAD real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PWS_ROOF_MAX real, intent(in), DIMENSION(:) :: PWS_ROAD_MAX real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPEW_A_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_B_COEF_LOWCAN real, intent(out), DIMENSION(:) :: PQSAT_ROOF real, intent(out), DIMENSION(:) :: PQSAT_ROAD real, intent(out), DIMENSION(:) :: PDELT_ROOF real, intent(out), DIMENSION(:) :: PDELT_ROAD real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN real, intent(out), DIMENSION(:) :: PAC_ROOF real, intent(out), DIMENSION(:) :: PAC_ROOF_WAT real, intent(out), DIMENSION(:) :: PAC_WALL real, intent(out), DIMENSION(:) :: PAC_ROAD real, intent(out), DIMENSION(:) :: PAC_ROAD_WAT real, intent(out), DIMENSION(:) :: PAC_TOP real, intent(in), DIMENSION(:) :: PAC_GARDEN real, intent(out), DIMENSION(:) :: PRI real, intent(out), DIMENSION(:) :: PUW_ROAD real, intent(out), DIMENSION(:) :: PUW_ROOF real, intent(out), DIMENSION(:) :: PDUWDU_ROAD real, intent(out), DIMENSION(:) :: PDUWDU_ROOF real, intent(out), DIMENSION(:) :: PUSTAR_TOWN real, intent(out), DIMENSION(:) :: PAC_WIN","tags":"","loc":"module/modi_urban_drag.html"},{"title":"MODI_WINDOW_DATA – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces WINDOW_DATA Interfaces interface public subroutine WINDOW_DATA(KI, B) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KI type(BEM_t), intent(inout) :: B","tags":"","loc":"module/modi_window_data.html"},{"title":"MODD_SURF_ATM_GRID_n – Town Energy Balance (TEB) model API docs","text":"Uses YOMHOOK MODD_SFX_GRID_n PARKIND1 Contents Derived Types SURF_ATM_GRID_t Subroutines SURF_ATM_GRID_INIT Derived Types type, public :: SURF_ATM_GRID_t Components Type Visibility Attributes Name Initial type(GRID_t), public :: G real, public, POINTER, DIMENSION(:) :: XGRID_FULL_PAR integer, public :: NGRID_FULL_PAR integer, public, POINTER, DIMENSION(:,:) :: NNEAR real, public, POINTER, DIMENSION(:) :: XJPDIR Subroutines public subroutine SURF_ATM_GRID_INIT (YSURF_ATM_GRID) Arguments Type Intent Optional Attributes Name type( SURF_ATM_GRID_t ), intent(inout) :: YSURF_ATM_GRID","tags":"","loc":"module/modd_surf_atm_grid_n.html"},{"title":"MODI_TEB_IRRIG – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces TEB_IRRIG Interfaces interface public subroutine TEB_IRRIG(OIRRIG, PTSTEP, KMONTH, PSOLAR_TIME, PSTART_MONTH, PEND_MONTH, PSTART_HOUR, PEND_HOUR, P24H_IRRIG, PIRRIG) Arguments Type Intent Optional Attributes Name logical, intent(in) :: OIRRIG real, intent(in) :: PTSTEP integer, intent(in) :: KMONTH real, intent(in), DIMENSION(:) :: PSOLAR_TIME real, intent(in), DIMENSION(:) :: PSTART_MONTH real, intent(in), DIMENSION(:) :: PEND_MONTH real, intent(in), DIMENSION(:) :: PSTART_HOUR real, intent(in), DIMENSION(:) :: PEND_HOUR real, intent(in), DIMENSION(:) :: P24H_IRRIG real, intent(out), DIMENSION(:) :: PIRRIG","tags":"","loc":"module/modi_teb_irrig.html"},{"title":"MODI_WINDOW_SHADING – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces WINDOW_SHADING Interfaces interface public subroutine WINDOW_SHADING(PSHGC, PSHGC_SH, O_SHADE, PALB_WALL, PABS_WIN, PABS_WINSH, PALB_WIN, PTRAN_WIN) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PSHGC real, intent(in), DIMENSION(:) :: PSHGC_SH logical, intent(in), DIMENSION(:) :: O_SHADE real, intent(in), DIMENSION(:) :: PALB_WALL real, intent(in), DIMENSION(:) :: PABS_WIN real, intent(out), DIMENSION(:) :: PABS_WINSH real, intent(out), DIMENSION(:) :: PALB_WIN real, intent(inout), DIMENSION(:) :: PTRAN_WIN","tags":"","loc":"module/modi_window_shading.html"},{"title":"MODD_GR_BIOG_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types GR_BIOG_t GR_BIOG_NP_t Subroutines GR_BIOG_INIT GR_BIOG_NP_INIT Derived Types type, public :: GR_BIOG_t Components Type Visibility Attributes Name Initial real, public, DIMENSION(:), POINTER :: XISOPOT real, public, DIMENSION(:), POINTER :: XMONOPOT real, public, DIMENSION(:,:), POINTER :: XIACAN real, public, DIMENSION(:), POINTER :: XFISO real, public, DIMENSION(:), POINTER :: XFMONO real, public, DIMENSION(:), POINTER :: XNOFLUX type, public :: GR_BIOG_NP_t Components Type Visibility Attributes Name Initial type( GR_BIOG_t ), public, DIMENSION(:), POINTER :: AL => NULL() Subroutines public subroutine GR_BIOG_INIT (YGR_BIOG) Arguments Type Intent Optional Attributes Name type( GR_BIOG_t ), intent(inout) :: YGR_BIOG public subroutine GR_BIOG_NP_INIT (YGR_BIOG_NP, KPATCH) Arguments Type Intent Optional Attributes Name type( GR_BIOG_NP_t ), intent(inout) :: YGR_BIOG_NP integer, intent(in) :: KPATCH","tags":"","loc":"module/modd_gr_biog_n.html"},{"title":"MODI_URBAN_HYDRO – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces URBAN_HYDRO Interfaces interface public subroutine URBAN_HYDRO(PWS_ROOF_MAX, PWS_ROAD_MAX, PWS_ROOF, PWS_ROAD, PRR, PIRRIG_ROAD, PTSTEP, PBLD, PLE_ROOF, PLE_ROAD, PRUNOFF_STRLROOF, PRUNOFF_ROAD) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PWS_ROOF_MAX real, intent(in), DIMENSION(:) :: PWS_ROAD_MAX real, intent(inout), DIMENSION(:) :: PWS_ROOF real, intent(inout), DIMENSION(:) :: PWS_ROAD real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PIRRIG_ROAD real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PBLD real, intent(in), DIMENSION(:) :: PLE_ROOF real, intent(in), DIMENSION(:) :: PLE_ROAD real, intent(out), DIMENSION(:) :: PRUNOFF_STRLROOF real, intent(out), DIMENSION(:) :: PRUNOFF_ROAD","tags":"","loc":"module/modi_urban_hydro.html"},{"title":"MODD_WATFLUX_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK MODD_TYPE_DATE_SURF Contents Derived Types WATFLUX_t Subroutines WATFLUX_INIT Derived Types type, public :: WATFLUX_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:) :: XZS real, public, POINTER, DIMENSION(:,:) :: XCOVER logical, public, POINTER, DIMENSION(:) :: LCOVER logical, public :: LSBL character(len=4), public :: CWAT_ALB logical, public :: LINTERPOL_TS character(len=6), public :: CINTERPOL_TS real, public, POINTER, DIMENSION(:) :: XTS real, public, POINTER, DIMENSION(:) :: XTICE real, public, POINTER, DIMENSION(:) :: XZ0 real, public, POINTER, DIMENSION(:) :: XEMIS real, public, POINTER, DIMENSION(:) :: XDIR_ALB real, public, POINTER, DIMENSION(:) :: XSCA_ALB real, public, POINTER, DIMENSION(:) :: XICE_ALB real, public, POINTER, DIMENSION(:,:) :: XTS_MTH real, public, POINTER, DIMENSION(:) :: XCPL_WATER_WIND real, public, POINTER, DIMENSION(:) :: XCPL_WATER_FWSU real, public, POINTER, DIMENSION(:) :: XCPL_WATER_FWSV real, public, POINTER, DIMENSION(:) :: XCPL_WATER_SNET real, public, POINTER, DIMENSION(:) :: XCPL_WATER_HEAT real, public, POINTER, DIMENSION(:) :: XCPL_WATER_EVAP real, public, POINTER, DIMENSION(:) :: XCPL_WATER_RAIN real, public, POINTER, DIMENSION(:) :: XCPL_WATER_SNOW real, public, POINTER, DIMENSION(:) :: XCPL_WATER_FWSM real, public, POINTER, DIMENSION(:) :: XCPL_WATERICE_SNET real, public, POINTER, DIMENSION(:) :: XCPL_WATERICE_HEAT real, public, POINTER, DIMENSION(:) :: XCPL_WATERICE_EVAP type(DATE_TIME), public :: TTIME type(DATE_TIME), public :: TZTIME real, public :: XTSTEP real, public :: XOUT_TSTEP Subroutines public subroutine WATFLUX_INIT (YWATFLUX) Arguments Type Intent Optional Attributes Name type( WATFLUX_t ), intent(inout) :: YWATFLUX","tags":"","loc":"module/modd_watflux_n.html"},{"title":"MODI_ISBA_PROPERTIES – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces ISBA_PROPERTIES Interfaces interface public subroutine ISBA_PROPERTIES(IO, PEK, PDIR_SW, PSCA_SW, PSW_BANDS, KSW, PASNOW, PANOSNOW, PESNOW, PENOSNOW, PTSSNOW, PTSNOSNOW, PALBNIR_TVEG, PALBVIS_TVEG, PALBNIR_TSOIL, PALBVIS_TSOIL) Arguments Type Intent Optional Attributes Name type(ISBA_OPTIONS_t), intent(inout) :: IO type(ISBA_PE_t), intent(inout) :: PEK real, intent(in), DIMENSION(:,:) :: PDIR_SW real, intent(in), DIMENSION(:,:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PSW_BANDS integer, intent(in) :: KSW real, intent(out), DIMENSION(:) :: PASNOW real, intent(out), DIMENSION(:) :: PANOSNOW real, intent(out), DIMENSION(:) :: PESNOW real, intent(out), DIMENSION(:) :: PENOSNOW real, intent(out), DIMENSION(:) :: PTSSNOW real, intent(out), DIMENSION(:) :: PTSNOSNOW real, intent(out), DIMENSION(:) :: PALBNIR_TVEG real, intent(out), DIMENSION(:) :: PALBVIS_TVEG real, intent(out), DIMENSION(:) :: PALBNIR_TSOIL real, intent(out), DIMENSION(:) :: PALBVIS_TSOIL","tags":"","loc":"module/modi_isba_properties.html"},{"title":"MODI_ALBEDO_FROM_NIR_VIS – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces ALBEDO_FROM_NIR_VIS Interfaces interface public subroutine ALBEDO_FROM_NIR_VIS(PSW_BANDS, PALBNIR, PALBVIS, PALBUV, PDIR_ALB, PSCA_ALB) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PSW_BANDS real, intent(in), DIMENSION(:) :: PALBNIR real, intent(in), DIMENSION(:) :: PALBVIS real, intent(in), DIMENSION(:) :: PALBUV real, intent(out), DIMENSION(:,:) :: PDIR_ALB real, intent(out), DIMENSION(:,:) :: PSCA_ALB","tags":"","loc":"module/modi_albedo_from_nir_vis.html"},{"title":"MODI_DAY_OF_WEEK – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces DAY_OF_WEEK Interfaces interface public subroutine DAY_OF_WEEK(PYEAR, PMONTH, PDAY, PDOW) Arguments Type Intent Optional Attributes Name integer, intent(in) :: PYEAR integer, intent(in) :: PMONTH integer, intent(in) :: PDAY integer, intent(out) :: PDOW","tags":"","loc":"module/modi_day_of_week.html"},{"title":"MODD_CSTS – Town Energy Balance (TEB) model API docs","text":"Contents Variables XPI XDAY XSIYEA XSIDAY XKARMAN XLIGHTSPEED XPLANCK XBOLTZ XAVOGADRO XRADIUS XOMEGA XG XP00 XSTEFAN XI0 XMD XMV XRD XRV XCPD XCPV XRHOLW XCL XCI XTT XTTSI XTTS XICEC XLVTT XLSTT XLMTT XESTT XALPW XBETAW XGAMW XALPI XBETAI XGAMI XTH00 XRHOLI XCONDI NDAYSEC XSURF_TINY XSURF_TINY_12 XSURF_EPSILON Variables Type Visibility Attributes Name Initial real, public, SAVE :: XPI real, public, SAVE :: XDAY real, public, SAVE :: XSIYEA real, public, SAVE :: XSIDAY real, public, SAVE :: XKARMAN real, public, SAVE :: XLIGHTSPEED real, public, SAVE :: XPLANCK real, public, SAVE :: XBOLTZ real, public, SAVE :: XAVOGADRO real, public, SAVE :: XRADIUS real, public, SAVE :: XOMEGA real, public, SAVE :: XG real, public, SAVE :: XP00 real, public, SAVE :: XSTEFAN real, public, SAVE :: XI0 real, public, SAVE :: XMD real, public, SAVE :: XMV real, public, SAVE :: XRD real, public, SAVE :: XRV real, public, SAVE :: XCPD real, public, SAVE :: XCPV real, public, SAVE :: XRHOLW real, public, SAVE :: XCL real, public, SAVE :: XCI real, public, SAVE :: XTT real, public, SAVE :: XTTSI real, public, SAVE :: XTTS real, public, SAVE :: XICEC real, public, SAVE :: XLVTT real, public, SAVE :: XLSTT real, public, SAVE :: XLMTT real, public, SAVE :: XESTT real, public, SAVE :: XALPW real, public, SAVE :: XBETAW real, public, SAVE :: XGAMW real, public, SAVE :: XALPI real, public, SAVE :: XBETAI real, public, SAVE :: XGAMI real, public, SAVE :: XTH00 real, public, SAVE :: XRHOLI real, public, SAVE :: XCONDI integer, public, SAVE :: NDAYSEC real, public, SAVE :: XSURF_TINY real, public, SAVE :: XSURF_TINY_12 real, public, SAVE :: XSURF_EPSILON","tags":"","loc":"module/modd_csts.html"},{"title":"PARKIND1 – Town Energy Balance (TEB) model API docs","text":"Contents Variables JPRB Variables Type Visibility Attributes Name Initial integer, public, parameter :: JPRB = 4","tags":"","loc":"module/parkind1.html"},{"title":"YOMHOOK – Town Energy Balance (TEB) model API docs","text":"Contents Variables LHOOK Subroutines DR_HOOK Variables Type Visibility Attributes Name Initial logical, public :: LHOOK = .FALSE. Subroutines public subroutine DR_HOOK (HSTRING, KINTEGER, PREAL) Arguments Type Intent Optional Attributes Name character(len=*) :: HSTRING integer :: KINTEGER real(kind=JPRB) :: PREAL","tags":"","loc":"module/yomhook.html"},{"title":"MODI_LAYER_E_BUDGET_GET_COEF – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces LAYER_E_BUDGET_GET_COEF Interfaces interface public subroutine LAYER_E_BUDGET_GET_COEF(PT, PTSTEP, PIMPL, PHC, PTC, PD, PA, PB, PC, PY) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:,:) :: PT real, intent(in) :: PTSTEP real, intent(in) :: PIMPL real, intent(in), DIMENSION(:,:) :: PHC real, intent(in), DIMENSION(:,:) :: PTC real, intent(in), DIMENSION(:,:) :: PD real, intent(out), DIMENSION(:,:) :: PA real, intent(out), DIMENSION(:,:) :: PB real, intent(out), DIMENSION(:,:) :: PC real, intent(out), DIMENSION(:,:) :: PY","tags":"","loc":"module/modi_layer_e_budget_get_coef.html"},{"title":"MODI_FLAG_TEB_VEG_n – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces FLAG_TEB_VEG_n Interfaces interface public subroutine FLAG_TEB_VEG_n(PEK, IO, PMASK, KFLAG) Arguments Type Intent Optional Attributes Name type(ISBA_PE_t), intent(inout) :: PEK type(ISBA_OPTIONS_t), intent(inout) :: IO real, intent(in), DIMENSION(:) :: PMASK integer, intent(in) :: KFLAG","tags":"","loc":"module/modi_flag_teb_veg_n.html"},{"title":"MODD_CH_FLAKE_n – Town Energy Balance (TEB) model API docs","text":"Uses MODD_SV_n PARKIND1 YOMHOOK Contents Derived Types CH_FLAKE_t Subroutines CH_FLAKE_INIT Derived Types type, public :: CH_FLAKE_t Components Type Visibility Attributes Name Initial character(len=6), public :: CCH_DRY_DEP real, public, DIMENSION(:,:), POINTER :: XDEP type(SV_t), public :: SVF character(len=6), public, DIMENSION(:), POINTER :: CCH_NAMES character(len=6), public, DIMENSION(:), POINTER :: CDSTNAMES character(len=6), public, DIMENSION(:), POINTER :: CSLTNAMES character(len=6), public, DIMENSION(:), POINTER :: CAER_NAMES Subroutines public subroutine CH_FLAKE_INIT (YCH_FLAKE) Arguments Type Intent Optional Attributes Name type( CH_FLAKE_t ), intent(inout) :: YCH_FLAKE","tags":"","loc":"module/modd_ch_flake_n.html"},{"title":"MODI_URBAN_FLUXES – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces URBAN_FLUXES Interfaces interface public subroutine URBAN_FLUXES(TOP, T, B, DMT, HIMPLICIT_WIND, PT_CANYON, PPEW_A_COEF, PPEW_B_COEF, PEXNS, PRHOA, PVMOD, PH_TRAFFIC, PLE_TRAFFIC, PAC_WL, PCD, PDF_RF, PDN_RF, PDF_RD, PDN_RD, PRNSN_RF, PHSN_RF, PLESN_RF, PGSN_RF, PRNSN_RD, PHSN_RD, PLESN_RD, PGSN_RD, PMELT_RF, PDQS_RF, PMELT_RD, PDQS_RD, PDQS_WL_A, PDQS_WL_B, PFLX_BLD_RF, PFLX_BLD_WL_A, PFLX_BLD_WL_B, PFLX_BLD_FL, PFLX_BLD_MA, PE_SHADING, PLEW_RF, PRN_GR, PH_GR, PLE_GR, PGFLUX_GR, PLEW_RD, PLE_WL_A, PLE_WL_B, PMELT_BLT, PUSTAR_TWN) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B type(DIAG_MISC_TEB_t), intent(inout) :: DMT character(len=*), intent(in) :: HIMPLICIT_WIND real, intent(in), DIMENSION(:) :: PT_CANYON real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PH_TRAFFIC real, intent(in), DIMENSION(:) :: PLE_TRAFFIC real, intent(in), DIMENSION(:) :: PAC_WL real, intent(in), DIMENSION(:) :: PCD real, intent(in), DIMENSION(:) :: PDF_RF real, intent(in), DIMENSION(:) :: PDN_RF real, intent(in), DIMENSION(:) :: PDF_RD real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PRNSN_RF real, intent(in), DIMENSION(:) :: PHSN_RF real, intent(in), DIMENSION(:) :: PLESN_RF real, intent(in), DIMENSION(:) :: PGSN_RF real, intent(in), DIMENSION(:) :: PRNSN_RD real, intent(in), DIMENSION(:) :: PHSN_RD real, intent(in), DIMENSION(:) :: PLESN_RD real, intent(in), DIMENSION(:) :: PGSN_RD real, intent(in), DIMENSION(:) :: PMELT_RF real, intent(in), DIMENSION(:) :: PDQS_RF real, intent(in), DIMENSION(:) :: PMELT_RD real, intent(in), DIMENSION(:) :: PDQS_RD real, intent(in), DIMENSION(:) :: PDQS_WL_A real, intent(in), DIMENSION(:) :: PDQS_WL_B real, intent(in), DIMENSION(:) :: PFLX_BLD_RF real, intent(in), DIMENSION(:) :: PFLX_BLD_WL_A real, intent(in), DIMENSION(:) :: PFLX_BLD_WL_B real, intent(in), DIMENSION(:) :: PFLX_BLD_FL real, intent(in), DIMENSION(:) :: PFLX_BLD_MA real, intent(in), DIMENSION(:) :: PE_SHADING real, intent(in), DIMENSION(:) :: PLEW_RF real, intent(in), DIMENSION(:) :: PRN_GR real, intent(in), DIMENSION(:) :: PH_GR real, intent(in), DIMENSION(:) :: PLE_GR real, intent(in), DIMENSION(:) :: PGFLUX_GR real, intent(in), DIMENSION(:) :: PLEW_RD real, intent(out), DIMENSION(:) :: PLE_WL_A real, intent(out), DIMENSION(:) :: PLE_WL_B real, intent(out), DIMENSION(:) :: PMELT_BLT real, intent(out), DIMENSION(:) :: PUSTAR_TWN","tags":"","loc":"module/modi_urban_fluxes.html"},{"title":"MODI_AVG_URBAN_FLUXES – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces AVG_URBAN_FLUXES Interfaces interface public subroutine AVG_URBAN_FLUXES(TOP, T, B, TPN, DMT, PTS_TWN, PEMIS_TWN, PT_CAN, PQ_CAN, PT_LOWCAN, PQ_LOWCAN, PTA, PQA, PRHOA, PPS, PH_TRAFFIC, PLE_TRAFFIC, PWL_O_GRND, PESN_RF, PEMIS_GR, PLW_RAD, PAC_RF, PAC_RF_WAT, PAC_WL, PAC_RD, PAC_RD_WAT, PAC_TOP, PAC_GD, PQSAT_GD, PAC_AGG_GD, PHU_AGG_GD, PQSAT_RF, PQSAT_RD, PDELT_RF, PDELT_RD, PRF_FRAC, PWL_FRAC, PRD_FRAC, PGD_FRAC, PTOTS_O_HORS, PDF_RF, PDN_RF, PDF_RD, PDN_RD, PLE_WL_A, PLE_WL_B, PLEW_RF, PLESN_RF, PLEW_RD, PLESN_RD, PHSN_RD, PTSRAD_GD, PRN_GD, PH_GD, PLE_GD, PGFLUX_GD, PEVAP_GD, PRUNOFF_GD, PEVAP_GR, PRUNOFF_GR, PDRAIN_GR, PRN_GRND, PH_GRND, PLE_GRND, PGFLX_GRND, PRN_TWN, PH_TWN, PLE_TWN, PGFLX_TWN, PEVAP_TWN, PEMIT_LW_RD, PEMIT_LW_GD, PEMIT_LW_GRND, PEMIS_GD) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B type(TEB_PANEL_t), intent(inout) :: TPN type(DIAG_MISC_TEB_t), intent(inout) :: DMT real, intent(out), DIMENSION(:) :: PTS_TWN real, intent(out), DIMENSION(:) :: PEMIS_TWN real, intent(inout), DIMENSION(:) :: PT_CAN real, intent(inout), DIMENSION(:) :: PQ_CAN real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PH_TRAFFIC real, intent(in), DIMENSION(:) :: PLE_TRAFFIC real, intent(in), DIMENSION(:) :: PWL_O_GRND real, intent(in), DIMENSION(:) :: PESN_RF real, intent(in), DIMENSION(:) :: PEMIS_GR real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:) :: PAC_RF real, intent(in), DIMENSION(:) :: PAC_RF_WAT real, intent(in), DIMENSION(:) :: PAC_WL real, intent(in), DIMENSION(:) :: PAC_RD real, intent(in), DIMENSION(:) :: PAC_RD_WAT real, intent(in), DIMENSION(:) :: PAC_TOP real, intent(in), DIMENSION(:) :: PAC_GD real, intent(in), DIMENSION(:) :: PQSAT_GD real, intent(in), DIMENSION(:) :: PAC_AGG_GD real, intent(in), DIMENSION(:) :: PHU_AGG_GD real, intent(in), DIMENSION(:) :: PQSAT_RF real, intent(in), DIMENSION(:) :: PQSAT_RD real, intent(in), DIMENSION(:) :: PDELT_RF real, intent(in), DIMENSION(:) :: PDELT_RD real, intent(in), DIMENSION(:) :: PRF_FRAC real, intent(in), DIMENSION(:) :: PWL_FRAC real, intent(in), DIMENSION(:) :: PRD_FRAC real, intent(in), DIMENSION(:) :: PGD_FRAC real, intent(in), DIMENSION(:) :: PTOTS_O_HORS real, intent(in), DIMENSION(:) :: PDF_RF real, intent(in), DIMENSION(:) :: PDN_RF real, intent(in), DIMENSION(:) :: PDF_RD real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PLE_WL_A real, intent(in), DIMENSION(:) :: PLE_WL_B real, intent(in), DIMENSION(:) :: PLEW_RF real, intent(in), DIMENSION(:) :: PLESN_RF real, intent(in), DIMENSION(:) :: PLEW_RD real, intent(in), DIMENSION(:) :: PLESN_RD real, intent(in), DIMENSION(:) :: PHSN_RD real, intent(in), DIMENSION(:) :: PTSRAD_GD real, intent(in), DIMENSION(:) :: PRN_GD real, intent(in), DIMENSION(:) :: PH_GD real, intent(in), DIMENSION(:) :: PLE_GD real, intent(in), DIMENSION(:) :: PGFLUX_GD real, intent(in), DIMENSION(:) :: PEVAP_GD real, intent(in), DIMENSION(:) :: PRUNOFF_GD real, intent(in), DIMENSION(:) :: PEVAP_GR real, intent(in), DIMENSION(:) :: PRUNOFF_GR real, intent(in), DIMENSION(:) :: PDRAIN_GR real, intent(out), DIMENSION(:) :: PRN_GRND real, intent(out), DIMENSION(:) :: PH_GRND real, intent(out), DIMENSION(:) :: PLE_GRND real, intent(out), DIMENSION(:) :: PGFLX_GRND real, intent(out), DIMENSION(:) :: PRN_TWN real, intent(out), DIMENSION(:) :: PH_TWN real, intent(out), DIMENSION(:) :: PLE_TWN real, intent(out), DIMENSION(:) :: PGFLX_TWN real, intent(out), DIMENSION(:) :: PEVAP_TWN real, intent(in), DIMENSION(:) :: PEMIT_LW_RD real, intent(in), DIMENSION(:) :: PEMIT_LW_GD real, intent(out), DIMENSION(:) :: PEMIT_LW_GRND real, intent(in), DIMENSION(:) :: PEMIS_GD","tags":"","loc":"module/modi_avg_urban_fluxes.html"},{"title":"MODD_DIAG_UTCI_TEB_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types DIAG_UTCI_TEB_t Subroutines DIAG_UTCI_TEB_INIT Derived Types type, public :: DIAG_UTCI_TEB_t Components Type Visibility Attributes Name Initial logical, public :: LUTCI real, public, POINTER, DIMENSION(:) :: XUTCI_IN real, public, POINTER, DIMENSION(:) :: XUTCI_OUTSUN real, public, POINTER, DIMENSION(:) :: XUTCI_OUTSHADE real, public, POINTER, DIMENSION(:) :: XTRAD_SUN real, public, POINTER, DIMENSION(:) :: XTRAD_SHADE real, public, POINTER, DIMENSION(:,:) :: XUTCIC_IN real, public, POINTER, DIMENSION(:,:) :: XUTCIC_OUTSUN real, public, POINTER, DIMENSION(:,:) :: XUTCIC_OUTSHADE Subroutines public subroutine DIAG_UTCI_TEB_INIT (YDIAG_UTCI_TEB) Arguments Type Intent Optional Attributes Name type( DIAG_UTCI_TEB_t ), intent(inout) :: YDIAG_UTCI_TEB","tags":"","loc":"module/modd_diag_utci_teb_n.html"},{"title":"MODD_ISBA_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK MODD_TYPE_DATE_SURF MODD_TYPE_SNOW Contents Derived Types ISBA_S_t ISBA_K_t ISBA_P_t ISBA_PE_t ISBA_NK_t ISBA_NP_t ISBA_NPE_t Subroutines ISBA_S_INIT ISBA_K_INIT ISBA_P_INIT ISBA_PE_INIT ISBA_NK_INIT ISBA_NP_INIT ISBA_NPE_INIT Derived Types type, public :: ISBA_S_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:) :: XZS real, public, POINTER, DIMENSION(:,:) :: XCOVER logical, public, POINTER, DIMENSION(:) :: LCOVER real, public, POINTER, DIMENSION(:) :: XTI_MIN real, public, POINTER, DIMENSION(:) :: XTI_MAX real, public, POINTER, DIMENSION(:) :: XTI_MEAN real, public, POINTER, DIMENSION(:) :: XTI_STD real, public, POINTER, DIMENSION(:) :: XTI_SKEW real, public, POINTER, DIMENSION(:,:) :: XSOC real, public, POINTER, DIMENSION(:) :: XPH real, public, POINTER, DIMENSION(:) :: XFERT real, public, POINTER, DIMENSION(:) :: XABC real, public, POINTER, DIMENSION(:) :: XPOI type(DATE_TIME), public :: TTIME real, public, POINTER, DIMENSION(:,:) :: XTAB_FSAT real, public, POINTER, DIMENSION(:,:) :: XTAB_WTOP real, public, POINTER, DIMENSION(:,:) :: XTAB_QTOP real, public, POINTER, DIMENSION(:) :: XF_PARAM real, public, POINTER, DIMENSION(:) :: XC_DEPTH_RATIO real, public, POINTER, DIMENSION(:) :: XCPL_DRAIN real, public, POINTER, DIMENSION(:) :: XCPL_RUNOFF real, public, POINTER, DIMENSION(:) :: XCPL_ICEFLUX real, public, POINTER, DIMENSION(:) :: XCPL_EFLOOD real, public, POINTER, DIMENSION(:) :: XCPL_PFLOOD real, public, POINTER, DIMENSION(:) :: XCPL_IFLOOD real, public, POINTER, DIMENSION(:) :: XPERTVEG real, public, POINTER, DIMENSION(:) :: XPERTLAI real, public, POINTER, DIMENSION(:) :: XPERTCV real, public, POINTER, DIMENSION(:) :: XPERTALB real, public, POINTER, DIMENSION(:) :: XPERTZ0 real, public, POINTER, DIMENSION(:) :: XTSRAD_NAT real, public, POINTER, DIMENSION(:) :: XEMIS_NAT real, public, POINTER, DIMENSION(:,:) :: XFRACSOC real, public, POINTER, DIMENSION(:,:) :: XVEGTYPE real, public, POINTER, DIMENSION(:,:) :: XPATCH real, public, POINTER, DIMENSION(:,:,:) :: XVEGTYPE_PATCH real, public, POINTER, DIMENSION(:,:) :: XINNOV real, public, POINTER, DIMENSION(:,:) :: XRESID real, public, POINTER, DIMENSION(:,:) :: XWORK_WR real, public, POINTER, DIMENSION(:,:,:) :: XWSN_WR real, public, POINTER, DIMENSION(:,:,:) :: XRHO_WR real, public, POINTER, DIMENSION(:,:,:) :: XHEA_WR real, public, POINTER, DIMENSION(:,:,:) :: XAGE_WR real, public, POINTER, DIMENSION(:,:,:) :: XSG1_WR real, public, POINTER, DIMENSION(:,:,:) :: XSG2_WR real, public, POINTER, DIMENSION(:,:,:) :: XHIS_WR real, public, POINTER, DIMENSION(:,:,:) :: XT_WR real, public, POINTER, DIMENSION(:,:) :: XALB_WR type(DATE_TIME), public, POINTER, DIMENSION(:,:) :: TDATE_WR type, public :: ISBA_K_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:,:) :: XSAND real, public, POINTER, DIMENSION(:,:) :: XCLAY real, public, POINTER, DIMENSION(:) :: XPERM real, public, POINTER, DIMENSION(:) :: XRUNOFFB real, public, POINTER, DIMENSION(:) :: XWDRAIN real, public, POINTER, DIMENSION(:) :: XTDEEP real, public, POINTER, DIMENSION(:) :: XGAMMAT real, public, POINTER, DIMENSION(:,:) :: XMPOTSAT real, public, POINTER, DIMENSION(:,:) :: XBCOEF real, public, POINTER, DIMENSION(:,:) :: XWWILT real, public, POINTER, DIMENSION(:,:) :: XWFC real, public, POINTER, DIMENSION(:,:) :: XWSAT real, public, POINTER, DIMENSION(:) :: XCGSAT real, public, POINTER, DIMENSION(:) :: XC4B real, public, POINTER, DIMENSION(:) :: XACOEF real, public, POINTER, DIMENSION(:) :: XPCOEF real, public, POINTER, DIMENSION(:,:) :: XHCAPSOIL real, public, POINTER, DIMENSION(:,:) :: XCONDDRY real, public, POINTER, DIMENSION(:,:) :: XCONDSLD real, public, POINTER, DIMENSION(:) :: XFWTD real, public, POINTER, DIMENSION(:) :: XWTD real, public, POINTER, DIMENSION(:) :: XALBNIR_DRY real, public, POINTER, DIMENSION(:) :: XALBVIS_DRY real, public, POINTER, DIMENSION(:) :: XALBUV_DRY real, public, POINTER, DIMENSION(:) :: XALBNIR_WET real, public, POINTER, DIMENSION(:) :: XALBVIS_WET real, public, POINTER, DIMENSION(:) :: XALBUV_WET real, public, POINTER, DIMENSION(:,:) :: XWD0 real, public, POINTER, DIMENSION(:,:) :: XKANISO real, public, POINTER, DIMENSION(:) :: XMUF real, public, POINTER, DIMENSION(:) :: XFSAT real, public, POINTER, DIMENSION(:) :: XFFLOOD real, public, POINTER, DIMENSION(:) :: XPIFLOOD real, public, POINTER, DIMENSION(:) :: XFF real, public, POINTER, DIMENSION(:) :: XFFG real, public, POINTER, DIMENSION(:) :: XFFV real, public, POINTER, DIMENSION(:) :: XFFROZEN real, public, POINTER, DIMENSION(:) :: XALBF real, public, POINTER, DIMENSION(:) :: XEMISF real, public, POINTER, DIMENSION(:,:) :: XDIR_ALB_WITH_SNOW real, public, POINTER, DIMENSION(:,:) :: XSCA_ALB_WITH_SNOW real, public, POINTER, DIMENSION(:,:) :: XVEGTYPE type, public :: ISBA_P_t Components Type Visibility Attributes Name Initial integer, public :: NSIZE_P real, public, POINTER, DIMENSION(:) :: XPATCH real, public, POINTER, DIMENSION(:,:) :: XVEGTYPE_PATCH integer, public, POINTER, DIMENSION(:) :: NR_P real, public, POINTER, DIMENSION(:) :: XPATCH_OLD real, public, POINTER, DIMENSION(:) :: XANMAX real, public, POINTER, DIMENSION(:) :: XFZERO real, public, POINTER, DIMENSION(:) :: XEPSO real, public, POINTER, DIMENSION(:) :: XGAMM real, public, POINTER, DIMENSION(:) :: XQDGAMM real, public, POINTER, DIMENSION(:) :: XQDGMES real, public, POINTER, DIMENSION(:) :: XT1GMES real, public, POINTER, DIMENSION(:) :: XT2GMES real, public, POINTER, DIMENSION(:) :: XAMAX real, public, POINTER, DIMENSION(:) :: XQDAMAX real, public, POINTER, DIMENSION(:) :: XT1AMAX real, public, POINTER, DIMENSION(:) :: XT2AMAX real, public, POINTER, DIMENSION(:) :: XAH real, public, POINTER, DIMENSION(:) :: XBH real, public, POINTER, DIMENSION(:) :: XTAU_WOOD real, public, POINTER, DIMENSION(:,:) :: XINCREASE real, public, POINTER, DIMENSION(:,:) :: XTURNOVER real, public, POINTER, DIMENSION(:,:) :: XCONDSAT real, public, POINTER, DIMENSION(:) :: XTAUICE real, public, POINTER, DIMENSION(:) :: XC1SAT real, public, POINTER, DIMENSION(:) :: XC2REF real, public, POINTER, DIMENSION(:,:) :: XC3 real, public, POINTER, DIMENSION(:) :: XC4REF real, public, POINTER, DIMENSION(:) :: XBSLAI_NITRO real, public, POINTER, DIMENSION(:) :: XCPS real, public, POINTER, DIMENSION(:) :: XLVTT real, public, POINTER, DIMENSION(:) :: XLSTT real, public, POINTER, DIMENSION(:) :: XRUNOFFD real, public, POINTER, DIMENSION(:,:) :: XDZG real, public, POINTER, DIMENSION(:,:) :: XDZDIF real, public, POINTER, DIMENSION(:,:) :: XSOILWGHT real, public, POINTER, DIMENSION(:) :: XKSAT_ICE real, public, POINTER, DIMENSION(:,:) :: XTOPQS real, public, POINTER, DIMENSION(:,:) :: XDG real, public, POINTER, DIMENSION(:,:) :: XDG_OLD real, public, POINTER, DIMENSION(:) :: XDG2 integer, public, POINTER, DIMENSION(:) :: NWG_LAYER real, public, POINTER, DIMENSION(:) :: XDROOT real, public, POINTER, DIMENSION(:,:) :: XROOTFRAC real, public, POINTER, DIMENSION(:) :: XD_ICE real, public, POINTER, DIMENSION(:) :: XH_TREE real, public, POINTER, DIMENSION(:) :: XZ0_O_Z0H real, public, POINTER, DIMENSION(:) :: XRE25 real, public, POINTER, DIMENSION(:) :: XDMAX real, public, POINTER, DIMENSION(:,:) :: XRED_NOISE real, public, POINTER, DIMENSION(:,:) :: XINCR real, public, POINTER, DIMENSION(:,:,:) :: XHO type, public :: ISBA_PE_t Components Type Visibility Attributes Name Initial real, public, POINTER, DIMENSION(:,:) :: XWG real, public, POINTER, DIMENSION(:,:) :: XWGI real, public, POINTER, DIMENSION(:) :: XWR real, public, POINTER, DIMENSION(:,:) :: XTG type(SURF_SNOW), public :: TSNOW real, public, POINTER, DIMENSION(:) :: XICE_STO real, public, POINTER, DIMENSION(:) :: XWRL real, public, POINTER, DIMENSION(:) :: XWRLI real, public, POINTER, DIMENSION(:) :: XWRVN real, public, POINTER, DIMENSION(:) :: XTV real, public, POINTER, DIMENSION(:) :: XTL real, public, POINTER, DIMENSION(:) :: XTC real, public, POINTER, DIMENSION(:) :: XQC real, public, POINTER, DIMENSION(:) :: XRESA real, public, POINTER, DIMENSION(:) :: XAN real, public, POINTER, DIMENSION(:) :: XANDAY real, public, POINTER, DIMENSION(:) :: XANFM real, public, POINTER, DIMENSION(:) :: XLE real, public, POINTER, DIMENSION(:) :: XFAPARC real, public, POINTER, DIMENSION(:) :: XFAPIRC real, public, POINTER, DIMENSION(:) :: XLAI_EFFC real, public, POINTER, DIMENSION(:) :: XMUS real, public, POINTER, DIMENSION(:,:) :: XRESP_BIOMASS real, public, POINTER, DIMENSION(:,:) :: XBIOMASS real, public, POINTER, DIMENSION(:,:,:) :: XLITTER real, public, POINTER, DIMENSION(:,:) :: XSOILCARB real, public, POINTER, DIMENSION(:,:) :: XLIGNIN_STRUC real, public, POINTER, DIMENSION(:) :: XPSNG real, public, POINTER, DIMENSION(:) :: XPSNV real, public, POINTER, DIMENSION(:) :: XPSNV_A real, public, POINTER, DIMENSION(:) :: XPSN real, public, POINTER, DIMENSION(:) :: XSNOWFREE_ALB real, public, POINTER, DIMENSION(:) :: XSNOWFREE_ALB_VEG real, public, POINTER, DIMENSION(:) :: XSNOWFREE_ALB_SOIL real, public, POINTER, DIMENSION(:) :: XVEG real, public, POINTER, DIMENSION(:) :: XLAI real, public, POINTER, DIMENSION(:) :: XEMIS real, public, POINTER, DIMENSION(:) :: XZ0 real, public, POINTER, DIMENSION(:) :: XRSMIN real, public, POINTER, DIMENSION(:) :: XGAMMA real, public, POINTER, DIMENSION(:) :: XWRMAX_CF real, public, POINTER, DIMENSION(:) :: XRGL real, public, POINTER, DIMENSION(:) :: XCV real, public, POINTER, DIMENSION(:) :: XLAIMIN real, public, POINTER, DIMENSION(:) :: XSEFOLD real, public, POINTER, DIMENSION(:) :: XGMES real, public, POINTER, DIMENSION(:) :: XGC real, public, POINTER, DIMENSION(:) :: XF2I real, public, POINTER, DIMENSION(:) :: XBSLAI real, public, POINTER, DIMENSION(:) :: XCE_NITRO real, public, POINTER, DIMENSION(:) :: XCF_NITRO real, public, POINTER, DIMENSION(:) :: XCNA_NITRO logical, public, POINTER, DIMENSION(:) :: LSTRESS real, public, POINTER, DIMENSION(:) :: XALBNIR_VEG real, public, POINTER, DIMENSION(:) :: XALBVIS_VEG real, public, POINTER, DIMENSION(:) :: XALBUV_VEG real, public, POINTER, DIMENSION(:) :: XALBNIR real, public, POINTER, DIMENSION(:) :: XALBVIS real, public, POINTER, DIMENSION(:) :: XALBUV real, public, POINTER, DIMENSION(:) :: XGNDLITTER real, public, POINTER, DIMENSION(:) :: XH_VEG real, public, POINTER, DIMENSION(:) :: XZ0LITTER real, public, POINTER, DIMENSION(:) :: XALBNIR_SOIL real, public, POINTER, DIMENSION(:) :: XALBVIS_SOIL real, public, POINTER, DIMENSION(:) :: XALBUV_SOIL type(DATE_TIME), public, POINTER, DIMENSION(:) :: TSEED type(DATE_TIME), public, POINTER, DIMENSION(:) :: TREAP real, public, POINTER, DIMENSION(:) :: XWATSUP real, public, POINTER, DIMENSION(:) :: XIRRIG type, public :: ISBA_NK_t Components Type Visibility Attributes Name Initial type( ISBA_K_t ), public, DIMENSION(:), POINTER :: AL => NULL() type, public :: ISBA_NP_t Components Type Visibility Attributes Name Initial type( ISBA_P_t ), public, DIMENSION(:), POINTER :: AL => NULL() type, public :: ISBA_NPE_t Components Type Visibility Attributes Name Initial type( ISBA_PE_t ), public, DIMENSION(:), POINTER :: AL => NULL() Subroutines public subroutine ISBA_S_INIT (YISBA_S) Arguments Type Intent Optional Attributes Name type( ISBA_S_t ), intent(inout) :: YISBA_S public subroutine ISBA_K_INIT (YISBA_K) Arguments Type Intent Optional Attributes Name type( ISBA_K_t ), intent(inout) :: YISBA_K public subroutine ISBA_P_INIT (YISBA_P) Arguments Type Intent Optional Attributes Name type( ISBA_P_t ), intent(inout) :: YISBA_P public subroutine ISBA_PE_INIT (YISBA_PE) Arguments Type Intent Optional Attributes Name type( ISBA_PE_t ), intent(inout) :: YISBA_PE public subroutine ISBA_NK_INIT (YISBA_NK, KPATCH) Arguments Type Intent Optional Attributes Name type( ISBA_NK_t ), intent(inout) :: YISBA_NK integer, intent(in) :: KPATCH public subroutine ISBA_NP_INIT (YISBA_NP, KPATCH) Arguments Type Intent Optional Attributes Name type( ISBA_NP_t ), intent(inout) :: YISBA_NP integer, intent(in) :: KPATCH public subroutine ISBA_NPE_INIT (YISBA_NPE, KPATCH) Arguments Type Intent Optional Attributes Name type( ISBA_NPE_t ), intent(inout) :: YISBA_NPE integer, intent(in) :: KPATCH","tags":"","loc":"module/modd_isba_n.html"},{"title":"MODD_SV_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types SV_t Subroutines SV_INIT Derived Types type, public :: SV_t Components Type Visibility Attributes Name Initial character(len=6), public, DIMENSION(:), POINTER :: CSV integer, public :: NSV_CHSBEG integer, public :: NSV_CHSEND integer, public :: NBEQ integer, public :: NSV_DSTBEG integer, public :: NSV_DSTEND integer, public :: NDSTEQ integer, public :: NSV_SLTBEG integer, public :: NSV_SLTEND integer, public :: NSLTEQ integer, public :: NSV_AERBEG integer, public :: NSV_AEREND integer, public :: NAEREQ Subroutines public subroutine SV_INIT (YSV) Arguments Type Intent Optional Attributes Name type( SV_t ), intent(inout) :: YSV","tags":"","loc":"module/modd_sv_n.html"},{"title":"MODD_AGRI_n – Town Energy Balance (TEB) model API docs","text":"Uses PARKIND1 YOMHOOK Contents Derived Types AGRI_t AGRI_NP_t Subroutines AGRI_INIT AGRI_NP_INIT Derived Types type, public :: AGRI_t Components Type Visibility Attributes Name Initial integer, public, POINTER, DIMENSION (:) :: NIRRINUM logical, public, POINTER, DIMENSION(:) :: LIRRIGATE logical, public, POINTER, DIMENSION(:) :: LIRRIDAY real, public, POINTER, DIMENSION(:) :: XTHRESHOLDSPT type, public :: AGRI_NP_t Components Type Visibility Attributes Name Initial type( AGRI_t ), public, DIMENSION(:), POINTER :: AL => NULL() Subroutines public subroutine AGRI_INIT (AG) Arguments Type Intent Optional Attributes Name type( AGRI_t ), intent(inout) :: AG public subroutine AGRI_NP_INIT (YNAG, KPATCH) Arguments Type Intent Optional Attributes Name type( AGRI_NP_t ), intent(inout) :: YNAG integer, intent(in) :: KPATCH","tags":"","loc":"module/modd_agri_n.html"},{"title":"MODI_TEST_NAM_VAR_SURF – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces TEST_NAM_VAR_SURF Interfaces public interface TEST_NAM_VAR_SURF public subroutine TEST_NAM_VARC0_SURF(KLUOUT, HNAME, HVAR, HVALUE1, HVALUE2, HVALUE3, HVALUE4, HVALUE5, HVALUE6, HVALUE7, HVALUE8, HVALUE9, HVALUE10) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KLUOUT character(len=*), intent(in) :: HNAME character(len=*), intent(in) :: HVAR character(len=*), intent(in), optional :: HVALUE1 character(len=*), intent(in), optional :: HVALUE2 character(len=*), intent(in), optional :: HVALUE3 character(len=*), intent(in), optional :: HVALUE4 character(len=*), intent(in), optional :: HVALUE5 character(len=*), intent(in), optional :: HVALUE6 character(len=*), intent(in), optional :: HVALUE7 character(len=*), intent(in), optional :: HVALUE8 character(len=*), intent(in), optional :: HVALUE9 character(len=*), intent(in), optional :: HVALUE10 public subroutine TEST_NAM_VARL0_SURF(KLUOUT, HNAME, OVAR, OVALUE) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KLUOUT character(len=*), intent(in) :: HNAME logical, intent(in) :: OVAR logical, intent(in), optional :: OVALUE public subroutine TEST_NAM_VARN0_SURF(KLUOUT, HNAME, KVAR, KVALUE1, KVALUE2, KVALUE3, KVALUE4, KVALUE5, KVALUE6, KVALUE7, KVALUE8, KVALUE9, KVALUE10) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KLUOUT character(len=*), intent(in) :: HNAME integer, intent(in) :: KVAR integer, intent(in), optional :: KVALUE1 integer, intent(in), optional :: KVALUE2 integer, intent(in), optional :: KVALUE3 integer, intent(in), optional :: KVALUE4 integer, intent(in), optional :: KVALUE5 integer, intent(in), optional :: KVALUE6 integer, intent(in), optional :: KVALUE7 integer, intent(in), optional :: KVALUE8 integer, intent(in), optional :: KVALUE9 integer, intent(in), optional :: KVALUE10 public subroutine TEST_NAM_VARX0_SURF(KLUOUT, HNAME, PVAR, PVALUE1, PVALUE2, PVALUE3, PVALUE4, PVALUE5, PVALUE6, PVALUE7, PVALUE8, PVALUE9, PVALUE10) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KLUOUT character(len=*), intent(in) :: HNAME real, intent(in) :: PVAR real, intent(in), optional :: PVALUE1 real, intent(in), optional :: PVALUE2 real, intent(in), optional :: PVALUE3 real, intent(in), optional :: PVALUE4 real, intent(in), optional :: PVALUE5 real, intent(in), optional :: PVALUE6 real, intent(in), optional :: PVALUE7 real, intent(in), optional :: PVALUE8 real, intent(in), optional :: PVALUE9 real, intent(in), optional :: PVALUE10","tags":"","loc":"module/modi_test_nam_var_surf.html"},{"title":"MODI_URBAN_SOLAR_ABS – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces URBAN_SOLAR_ABS Interfaces interface public subroutine URBAN_SOLAR_ABS(TOP, T, B, DMT, PDIR_SW, PSCA_SW, PZENITH, PAZIM, PFRAC_PANEL, PALB_PANEL, PALB_GD, PSVF_GD, PALB_GRF, PDN_RF, PDF_RF, PDN_RD, PDF_RD, PREC_SW_RD, PREC_SW_SN_RD, PREC_SW_WL_A, PREC_SW_WL_B, PREC_SW_GD, PREC_SW_RF, PDIR_ALB_TWN, PSCA_ALB_TWN, PSW_RAD_GD, PREC_SW_WIN, PREF_SW_GRND, PREF_SW_FAC, PE_SHADING, OSHAD_DAY, OSHADE, OALB_ONLY) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_t), intent(inout) :: B type(DIAG_MISC_TEB_t), intent(inout) :: DMT real, intent(in), DIMENSION(:) :: PDIR_SW real, intent(in), DIMENSION(:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PZENITH real, intent(in), DIMENSION(:) :: PAZIM real, intent(in), DIMENSION(:) :: PFRAC_PANEL real, intent(in), DIMENSION(:) :: PALB_PANEL real, intent(in), DIMENSION(:) :: PALB_GD real, intent(in), DIMENSION(:) :: PSVF_GD real, intent(in), DIMENSION(:) :: PALB_GRF real, intent(in), DIMENSION(:) :: PDN_RF real, intent(in), DIMENSION(:) :: PDF_RF real, intent(in), DIMENSION(:) :: PDN_RD real, intent(in), DIMENSION(:) :: PDF_RD real, intent(out), DIMENSION(:) :: PREC_SW_RD real, intent(out), DIMENSION(:) :: PREC_SW_SN_RD real, intent(out), DIMENSION(:) :: PREC_SW_WL_A real, intent(out), DIMENSION(:) :: PREC_SW_WL_B real, intent(out), DIMENSION(:) :: PREC_SW_GD real, intent(out), DIMENSION(:) :: PREC_SW_RF real, intent(out), DIMENSION(:) :: PDIR_ALB_TWN real, intent(out), DIMENSION(:) :: PSCA_ALB_TWN real, intent(out), DIMENSION(:) :: PSW_RAD_GD real, intent(out), DIMENSION(:) :: PREC_SW_WIN real, intent(out), DIMENSION(:) :: PREF_SW_GRND real, intent(out), DIMENSION(:) :: PREF_SW_FAC real, intent(out), DIMENSION(:) :: PE_SHADING logical, intent(inout), DIMENSION(:) :: OSHAD_DAY logical, intent(in), DIMENSION(:) :: OSHADE logical, intent(in), optional :: OALB_ONLY","tags":"","loc":"module/modi_urban_solar_abs.html"},{"title":"MODI_OPEN_NAMELIST – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces OPEN_NAMELIST Interfaces interface public subroutine OPEN_NAMELIST(HPROGRAM, KLUNAM, HFILE) Arguments Type Intent Optional Attributes Name character(len=6), intent(in) :: HPROGRAM integer, intent(out) :: KLUNAM character(len=28), intent(in), optional :: HFILE","tags":"","loc":"module/modi_open_namelist.html"},{"title":"MODD_SURFEX_n – Town Energy Balance (TEB) model API docs","text":"Uses MODD_DATA_COVER_n MODD_SV_n MODD_GR_BIOG_n MODD_SURF_ATM_GRID_n MODD_BEM_n MODD_DIAG_MISC_TEB_n MODD_CH_SNAP_n MODD_AGRI_n MODD_DATA_TSZ0_n MODD_DIAG_MISC_FLAKE_n MODD_SFX_GRID_n MODD_TEB_n MODD_FLAKE_n MODD_DST_n MODD_CH_SEAFLUX_n MODD_EMIS_GR_FIELD_n MODD_TEB_OPTION_n MODD_CH_TEB_n MODD_WATFLUX_n MODD_CH_FLAKE_n MODD_CH_SURF_n MODD_DATA_TEB_n MODD_CH_EMIS_FIELD_n MODD_DIAG_MISC_SEAICE_n MODD_GRID_CONF_PROJ_n MODD_DIAG_OCEAN_n MODD_TEB_IRRIG_n MODD_DIAG_MISC_ISBA_n MODD_TEB_PANEL_n MODD_OCEAN_REL_n MODD_DUMMY_SURF_FIELDS_n MODD_DATA_SEAFLUX_n MODD_DATA_ISBA_n MODD_SSO_n MODD_IDEAL_n MODD_DIAG_UTCI_TEB_n MODD_BLD_DESCRIPTION_n MODD_CANOPY_n MODD_DIAG_MISC_TEB_OPTIONS_n MODD_DATA_BEM_n MODD_OCEAN_n MODD_ISBA_n MODD_BEM_OPTION_n MODD_CH_ISBA_n MODD_CH_WATFLUX_n MODD_DIAG_n MODD_SLT_n MODD_ISBA_OPTIONS_n MODD_SURF_ATM_n MODD_DIAG_EVAP_ISBA_n Contents Derived Types FLAKE_MODEL_t WATFLUX_MODEL_t SEAFLUX_DIAG_t ISBA_DIAG_t ISBA_MODEL_t TEB_VEG_DIAG_t TEB_GARDEN_MODEL_t TEB_GREENROOF_MODEL_t TEB_DIAG_t TEB_MODEL_t SURFEX_t Derived Types type, public :: FLAKE_MODEL_t Components Type Visibility Attributes Name Initial type(DIAG_OPTIONS_t), public :: DFO type(DIAG_t), public :: DF type(DIAG_t), public :: DFC type(DIAG_MISC_FLAKE_t), public :: DMF type(GRID_t), public :: G type(CANOPY_t), public :: SB type(CH_FLAKE_t), public :: CHF type(FLAKE_t), public :: F type, public :: WATFLUX_MODEL_t Components Type Visibility Attributes Name Initial type(DIAG_OPTIONS_t), public :: DWO type(DIAG_t), public :: DW type(DIAG_t), public :: DWC type(GRID_t), public :: G type(CANOPY_t), public :: SB type(CH_WATFLUX_t), public :: CHW type(WATFLUX_t), public :: W type, public :: SEAFLUX_DIAG_t Components Type Visibility Attributes Name Initial type(DIAG_OPTIONS_t), public :: O type(DIAG_t), public :: D type(DIAG_t), public :: DC type(DIAG_t), public :: DI type(DIAG_t), public :: DIC type(DIAG_OCEAN_t), public :: GO type(DIAG_MISC_SEAICE_t), public :: DMI type, public :: ISBA_DIAG_t Components Type Visibility Attributes Name Initial type(DIAG_OPTIONS_t), public :: O type(DIAG_t), public :: D type(DIAG_t), public :: DC type(DIAG_NP_t), public :: ND type(DIAG_NP_t), public :: NDC type(DIAG_EVAP_ISBA_t), public :: DE type(DIAG_EVAP_ISBA_t), public :: DEC type(DIAG_EVAP_ISBA_NP_t), public :: NDE type(DIAG_EVAP_ISBA_NP_t), public :: NDEC type(DIAG_MISC_ISBA_t), public :: DM type(DIAG_MISC_ISBA_NP_t), public :: NDM type, public :: ISBA_MODEL_t Components Type Visibility Attributes Name Initial type( ISBA_DIAG_t ), public :: ID type(DATA_ISBA_t), public :: DTV type(CANOPY_t), public :: SB type(ISBA_OPTIONS_t), public :: O type(ISBA_S_t), public :: S type(CH_ISBA_t), public :: CHI type(CH_ISBA_NP_t), public :: NCHI type(GR_BIOG_t), public :: GB type(GR_BIOG_NP_t), public :: NGB type(SSO_t), public :: ISS type(SSO_NP_t), public :: NISS type(GRID_t), public :: G type(GRID_NP_t), public :: NG type(ISBA_K_t), public :: K type(ISBA_NK_t), public :: NK type(ISBA_NP_t), public :: NP type(ISBA_NPE_t), public :: NPE type(AGRI_NP_t), public :: NAG type, public :: TEB_VEG_DIAG_t Components Type Visibility Attributes Name Initial type(DIAG_NP_t), public :: ND type(DIAG_EVAP_ISBA_NP_t), public :: NDE type(DIAG_EVAP_ISBA_NP_t), public :: NDEC type(DIAG_MISC_ISBA_NP_t), public :: NDM type, public :: TEB_GARDEN_MODEL_t Components Type Visibility Attributes Name Initial type( TEB_VEG_DIAG_t ), public :: VD type(DATA_ISBA_t), public :: DTV type(ISBA_OPTIONS_t), public :: O type(ISBA_S_t), public :: S type(GR_BIOG_t), public :: GB type(ISBA_K_t), public :: K type(ISBA_P_t), public :: P type(ISBA_NPE_t), public :: NPE type, public :: TEB_GREENROOF_MODEL_t Components Type Visibility Attributes Name Initial type( TEB_VEG_DIAG_t ), public :: VD type(DATA_ISBA_t), public :: DTV type(ISBA_OPTIONS_t), public :: O type(ISBA_S_t), public :: S type(GR_BIOG_t), public :: GB type(ISBA_K_t), public :: K type(ISBA_P_t), public :: P type(ISBA_NPE_t), public :: NPE type, public :: TEB_DIAG_t Components Type Visibility Attributes Name Initial type(DIAG_OPTIONS_t), public :: O type(DIAG_t), public :: D type(DIAG_MISC_TEB_OPTIONS_t), public :: MTO type(DIAG_MISC_TEB_NP_t), public :: NDMT type(DIAG_MISC_TEB_NP_t), public :: NDMTC type(DIAG_UTCI_TEB_t), public :: DUT type, public :: TEB_MODEL_t Components Type Visibility Attributes Name Initial type(DATA_TEB_t), public :: DTT type(TEB_OPTIONS_t), public :: TOP type(CANOPY_t), public :: SB type(GRID_t), public :: G type(CH_TEB_t), public :: CHT type(TEB_PANEL_t), public :: TPN type(TEB_IRRIG_t), public :: TIR type(TEB_NP_t), public :: NT type( TEB_DIAG_t ), public :: TD type(DATA_BEM_t), public :: DTB type(BEM_OPTIONS_t), public :: BOP type(BLD_DESC_t), public :: BDD type(BEM_NP_t), public :: NB type, public :: SURFEX_t Components Type Visibility Attributes Name Initial type(DATA_COVER_t), public :: DTCO type(DATA_TSZ0_t), public :: DTZ type(DUMMY_SURF_FIELDS_t), public :: DUU type(GRID_CONF_PROJ_t), public :: GCP type(SURF_ATM_GRID_t), public :: UG type(SURF_ATM_t), public :: U type(DIAG_OPTIONS_t), public :: DUO type(DIAG_t), public :: DU type(DIAG_t), public :: DUC type(DIAG_NP_t), public :: DUP type(DIAG_NP_t), public :: DUPC type(SSO_t), public :: USS type(CANOPY_t), public :: SB type(DIAG_OPTIONS_t), public :: DLO type(DIAG_t), public :: DL type(DIAG_t), public :: DLC type(IDEAL_t), public :: L type(SV_t), public :: SV type(CH_SURF_t), public :: CHU type(CH_EMIS_FIELD_t), public :: CHE type(CH_EMIS_SNAP_t), public :: CHN type(EMIS_GR_FIELD_t), public :: EGF type(DST_NP_t), public :: NDST type(SLT_t), public :: SLT type( FLAKE_MODEL_t ), public :: FM type( WATFLUX_MODEL_t ), public :: WM type( ISBA_MODEL_t ), public :: IM type( TEB_MODEL_t ), public :: TM type( TEB_GARDEN_MODEL_t ), public :: GDM type( TEB_GREENROOF_MODEL_t ), public :: GRM","tags":"","loc":"module/modd_surfex_n.html"},{"title":"MODI_TEB_GARDEN_STRUCT – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces TEB_GARDEN_STRUCT Interfaces interface public subroutine TEB_GARDEN_STRUCT(OGARDEN, OGREENROOF, OSOLAR_PANEL, HZ0H, HIMPLICIT_WIND, HROAD_DIR, HWALL_OPT, TPTIME, PTSUN, PT_CAN, PQ_CAN, PU_CAN, PT_LOWCAN, PQ_LOWCAN, PU_LOWCAN, PZ_LOWCAN, PTI_BLD, PT_ROOF, PT_ROAD, PT_WALL_A, PT_WALL_B, PWS_ROOF, PWS_ROAD, HSNOW_ROOF, PWSNOW_ROOF, PTSNOW_ROOF, PRSNOW_ROOF, PASNOW_ROOF, PTSSNOW_ROOF, PESNOW_ROOF, HSNOW_ROAD, PWSNOW_ROAD, PTSNOW_ROAD, PRSNOW_ROAD, PASNOW_ROAD, PTSSNOW_ROAD, PESNOW_ROAD, PPEW_A_COEF, PPEW_B_COEF, PPEW_A_COEF_LOWCAN, PPEW_B_COEF_LOWCAN, PPS, PPA, PEXNS, PEXNA, PTA, PQA, PRHOA, PCO2, PLW_RAD, PDIR_SW, PSCA_SW, PSW_BANDS, KSW, PZENITH, PAZIM, PRR, PSR, PZREF, PUREF, PVMOD, PH_TRAFFIC, PLE_TRAFFIC, PH_INDUSTRY, PLE_INDUSTRY, PTSTEP, PZ0_TOWN, PBLD, PGARDEN, PROAD_DIR, PROAD, PFRAC_GR, PBLD_HEIGHT, PWALL_O_HOR, PCAN_HW_RATIO, PROAD_O_GRND, PGARDEN_O_GRND, PWALL_O_GRND, PALB_ROOF, PEMIS_ROOF, PHC_ROOF, PTC_ROOF, PD_ROOF, PALB_ROAD, PEMIS_ROAD, PSVF_ROAD, PHC_ROAD, PTC_ROAD, PD_ROAD, PALB_WALL, PEMIS_WALL, PSVF_WALL, PSVF_GARDEN, PHC_WALL, PTC_WALL, PD_WALL, PRN_ROOF, PH_ROOF, PLE_ROOF, PLEW_ROOF, PGFLUX_ROOF, PRUNOFF_ROOF, PRN_ROAD, PH_ROAD, PLE_ROAD, PLEW_ROAD, PGFLUX_ROAD, PRUNOFF_ROAD, PRN_WALL_A, PH_WALL_A, PLE_WALL_A, PGFLUX_WALL_A, PRN_WALL_B, PH_WALL_B, PLE_WALL_B, PGFLUX_WALL_B, PRN_STRLROOF, PH_STRLROOF, PLE_STRLROOF, PGFLUX_STRLROOF, PRUNOFF_STRLROOF, PRN_BLT, PH_BLT, PLE_BLT, PGFLUX_BLT, PRNSNOW_ROOF, PHSNOW_ROOF, PLESNOW_ROOF, PGSNOW_ROOF, PMELT_ROOF, PRNSNOW_ROAD, PHSNOW_ROAD, PLESNOW_ROAD, PGSNOW_ROAD, PMELT_ROAD, PRN_GRND, PH_GRND, PLE_GRND, PGFLUX_GRND, PRN_TOWN, PH_TOWN, PLE_TOWN, PGFLUX_TOWN, PEVAP_TOWN, PRUNOFF_TOWN, PSFCO2, PUW_GRND, PUW_ROOF, PDUWDU_GRND, PDUWDU_ROOF, PUSTAR_TOWN, PCD, PCDN, PCH_TOWN, PRI_TOWN, PTS_TOWN, PEMIS_TOWN, PDIR_ALB_TOWN, PSCA_ALB_TOWN, PRESA_TOWN, PDQS_TOWN, PQF_TOWN, PQF_BLD, PFLX_BLD, PAC_ROAD, PAC_GARDEN, PAC_GREENROOF, PAC_ROAD_WAT, PAC_GARDEN_WAT, PAC_GREENROOF_WAT, PABS_SW_ROOF, PABS_LW_ROOF, PABS_SW_SNOW_ROOF, PABS_LW_SNOW_ROOF, PABS_SW_ROAD, PABS_LW_ROAD, PABS_SW_SNOW_ROAD, PABS_LW_SNOW_ROAD, PABS_SW_WALL_A, PABS_LW_WALL_A, PABS_SW_WALL_B, PABS_LW_WALL_B, PABS_SW_PANEL, PABS_LW_PANEL, PABS_SW_GARDEN, PABS_LW_GARDEN, PABS_SW_GREENROOF, PABS_LW_GREENROOF, PG_GREENROOF_ROOF, HCOOL_COIL, PF_WATER_COND, HHEAT_COIL, HNATVENT, PNATVENT, KDAY, PAUX_MAX, PT_FLOOR, PT_MASS, PH_BLD_COOL, PT_BLD_COOL, PH_BLD_HEAT, PLE_BLD_COOL, PLE_BLD_HEAT, PH_WASTE, PLE_WASTE, PF_WASTE_CAN, PHVAC_COOL, PHVAC_HEAT, PQIN, PQIN_FRAD, PQIN_FLAT, PGR, PEFF_HEAT, PINF, PTCOOL_TARGET, PTHEAT_TARGET, PHR_TARGET, PT_WIN2, PQI_BLD, PV_VENT, PCAP_SYS_HEAT, PCAP_SYS_RAT, PT_ADP, PM_SYS_RAT, PCOP_RAT, PCAP_SYS, PM_SYS, PCOP, PQ_SYS, PT_SYS, PTR_SW_WIN, PFAN_POWER, PHC_FLOOR, PTC_FLOOR, PD_FLOOR, PT_WIN1, PABS_SW_WIN, PABS_LW_WIN, PSHGC, PSHGC_SH, PUGG_WIN, PALB_WIN, PABS_WIN, PEMIT_LW_FAC, PEMIT_LW_GRND, PT_RAD_IND, PREF_SW_GRND, PREF_SW_FAC, PHU_BLD, PTIME, OSHADE, PSHADE, OSHAD_DAY, ONATVENT_NIGHT, HBEM, PN_FLOOR, PWALL_O_BLD, PGLAZ_O_BLD, PMASS_O_BLD, PFLOOR_HW_RATIO, PF_FLOOR_MASS, PF_FLOOR_WALL, PF_FLOOR_WIN, PF_FLOOR_ROOF, PF_WALL_FLOOR, PF_WALL_MASS, PF_WALL_WIN, PF_WIN_FLOOR, PF_WIN_MASS, PF_WIN_WALL, PF_MASS_FLOOR, PF_MASS_WALL, PF_MASS_WIN, OCANOPY, PTRAN_WIN, HCH_BEM, PROUGH_ROOF, PROUGH_WALL, PF_WIN_WIN, OPAR_RD_IRRIG, PRD_START_MONTH, PRD_END_MONTH, PRD_START_HOUR, PRD_END_HOUR, PRD_24H_IRRIG, PIRRIG_ROAD, PEMIS_PANEL, PALB_PANEL, PEFF_PANEL, PFRAC_PANEL, PRESIDENTIAL, PTHER_PROD_PANEL, PPHOT_PROD_PANEL, PPROD_PANEL, PTHER_PROD_BLD, PPHOT_PROD_BLD, PPROD_BLD, PTHER_PRODC_DAY, PH_PANEL, PRN_PANEL, PDT_RES, PDT_OFF, PCUR_TCOOL_TARGET, PCUR_THEAT_TARGET, PCUR_QIN) Arguments Type Intent Optional Attributes Name logical, intent(in) :: OGARDEN logical, intent(in) :: OGREENROOF logical, intent(in) :: OSOLAR_PANEL character(len=6), intent(in) :: HZ0H character(len=*), intent(in) :: HIMPLICIT_WIND character(len=4), intent(in) :: HROAD_DIR character(len=4), intent(in) :: HWALL_OPT type(DATE_TIME), intent(in) :: TPTIME real, intent(in), DIMENSION(:) :: PTSUN real, intent(inout), DIMENSION(:) :: PT_CAN real, intent(inout), DIMENSION(:) :: PQ_CAN real, intent(in), DIMENSION(:) :: PU_CAN real, intent(in), DIMENSION(:) :: PT_LOWCAN real, intent(in), DIMENSION(:) :: PQ_LOWCAN real, intent(in), DIMENSION(:) :: PU_LOWCAN real, intent(in), DIMENSION(:) :: PZ_LOWCAN real, intent(inout), DIMENSION(:) :: PTI_BLD real, intent(inout), DIMENSION(:,:) :: PT_ROOF real, intent(inout), DIMENSION(:,:) :: PT_ROAD real, intent(inout), DIMENSION(:,:) :: PT_WALL_A real, intent(inout), DIMENSION(:,:) :: PT_WALL_B real, intent(inout), DIMENSION(:) :: PWS_ROOF real, intent(inout), DIMENSION(:) :: PWS_ROAD character(len=*), intent(in) :: HSNOW_ROOF real, intent(inout), DIMENSION(:,:) :: PWSNOW_ROOF real, intent(inout), DIMENSION(:,:) :: PTSNOW_ROOF real, intent(inout), DIMENSION(:,:) :: PRSNOW_ROOF real, intent(inout), DIMENSION(:) :: PASNOW_ROOF real, intent(inout), DIMENSION(:) :: PTSSNOW_ROOF real, intent(inout), DIMENSION(:) :: PESNOW_ROOF character(len=*), intent(in) :: HSNOW_ROAD real, intent(inout), DIMENSION(:,:) :: PWSNOW_ROAD real, intent(inout), DIMENSION(:,:) :: PTSNOW_ROAD real, intent(inout), DIMENSION(:,:) :: PRSNOW_ROAD real, intent(inout), DIMENSION(:) :: PASNOW_ROAD real, intent(inout), DIMENSION(:) :: PTSSNOW_ROAD real, intent(inout), DIMENSION(:) :: PESNOW_ROAD real, intent(in), DIMENSION(:) :: PPEW_A_COEF real, intent(in), DIMENSION(:) :: PPEW_B_COEF real, intent(in), DIMENSION(:) :: PPEW_A_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPEW_B_COEF_LOWCAN real, intent(in), DIMENSION(:) :: PPS real, intent(in), DIMENSION(:) :: PPA real, intent(in), DIMENSION(:) :: PEXNS real, intent(in), DIMENSION(:) :: PEXNA real, intent(in), DIMENSION(:) :: PTA real, intent(in), DIMENSION(:) :: PQA real, intent(in), DIMENSION(:) :: PRHOA real, intent(in), DIMENSION(:) :: PCO2 real, intent(in), DIMENSION(:) :: PLW_RAD real, intent(in), DIMENSION(:,:) :: PDIR_SW real, intent(in), DIMENSION(:,:) :: PSCA_SW real, intent(in), DIMENSION(:) :: PSW_BANDS integer, intent(in) :: KSW real, intent(in), DIMENSION(:) :: PZENITH real, intent(in), DIMENSION(:) :: PAZIM real, intent(in), DIMENSION(:) :: PRR real, intent(in), DIMENSION(:) :: PSR real, intent(in), DIMENSION(:) :: PZREF real, intent(in), DIMENSION(:) :: PUREF real, intent(in), DIMENSION(:) :: PVMOD real, intent(in), DIMENSION(:) :: PH_TRAFFIC real, intent(in), DIMENSION(:) :: PLE_TRAFFIC real, intent(in), DIMENSION(:) :: PH_INDUSTRY real, intent(in), DIMENSION(:) :: PLE_INDUSTRY real, intent(in) :: PTSTEP real, intent(in), DIMENSION(:) :: PZ0_TOWN real, intent(in), DIMENSION(:) :: PBLD real, intent(in), DIMENSION(:) :: PGARDEN real, intent(in), DIMENSION(:) :: PROAD_DIR real, intent(in), DIMENSION(:) :: PROAD real, intent(in), DIMENSION(:) :: PFRAC_GR real, intent(in), DIMENSION(:) :: PBLD_HEIGHT real, intent(in), DIMENSION(:) :: PWALL_O_HOR real, intent(in), DIMENSION(:) :: PCAN_HW_RATIO real, intent(in), DIMENSION(:) :: PROAD_O_GRND real, intent(in), DIMENSION(:) :: PGARDEN_O_GRND real, intent(in), DIMENSION(:) :: PWALL_O_GRND real, intent(in), DIMENSION(:) :: PALB_ROOF real, intent(in), DIMENSION(:) :: PEMIS_ROOF real, intent(in), DIMENSION(:,:) :: PHC_ROOF real, intent(in), DIMENSION(:,:) :: PTC_ROOF real, intent(in), DIMENSION(:,:) :: PD_ROOF real, intent(in), DIMENSION(:) :: PALB_ROAD real, intent(in), DIMENSION(:) :: PEMIS_ROAD real, intent(in), DIMENSION(:) :: PSVF_ROAD real, intent(in), DIMENSION(:,:) :: PHC_ROAD real, intent(in), DIMENSION(:,:) :: PTC_ROAD real, intent(in), DIMENSION(:,:) :: PD_ROAD real, intent(in), DIMENSION(:) :: PALB_WALL real, intent(in), DIMENSION(:) :: PEMIS_WALL real, intent(in), DIMENSION(:) :: PSVF_WALL real, intent(in), DIMENSION(:) :: PSVF_GARDEN real, intent(in), DIMENSION(:,:) :: PHC_WALL real, intent(in), DIMENSION(:,:) :: PTC_WALL real, intent(in), DIMENSION(:,:) :: PD_WALL real, intent(out), DIMENSION(:) :: PRN_ROOF real, intent(out), DIMENSION(:) :: PH_ROOF real, intent(out), DIMENSION(:) :: PLE_ROOF real, intent(out), DIMENSION(:) :: PLEW_ROOF real, intent(out), DIMENSION(:) :: PGFLUX_ROOF real, intent(out), DIMENSION(:) :: PRUNOFF_ROOF real, intent(out), DIMENSION(:) :: PRN_ROAD real, intent(out), DIMENSION(:) :: PH_ROAD real, intent(out), DIMENSION(:) :: PLE_ROAD real, intent(out), DIMENSION(:) :: PLEW_ROAD real, intent(out), DIMENSION(:) :: PGFLUX_ROAD real, intent(out), DIMENSION(:) :: PRUNOFF_ROAD real, intent(out), DIMENSION(:) :: PRN_WALL_A real, intent(out), DIMENSION(:) :: PH_WALL_A real, intent(out), DIMENSION(:) :: PLE_WALL_A real, intent(out), DIMENSION(:) :: PGFLUX_WALL_A real, intent(out), DIMENSION(:) :: PRN_WALL_B real, intent(out), DIMENSION(:) :: PH_WALL_B real, intent(out), DIMENSION(:) :: PLE_WALL_B real, intent(out), DIMENSION(:) :: PGFLUX_WALL_B real, intent(out), DIMENSION(:) :: PRN_STRLROOF real, intent(out), DIMENSION(:) :: PH_STRLROOF real, intent(out), DIMENSION(:) :: PLE_STRLROOF real, intent(out), DIMENSION(:) :: PGFLUX_STRLROOF real, intent(out), DIMENSION(:) :: PRUNOFF_STRLROOF real, intent(out), DIMENSION(:) :: PRN_BLT real, intent(out), DIMENSION(:) :: PH_BLT real, intent(out), DIMENSION(:) :: PLE_BLT real, intent(out), DIMENSION(:) :: PGFLUX_BLT real, intent(out), DIMENSION(:) :: PRNSNOW_ROOF real, intent(out), DIMENSION(:) :: PHSNOW_ROOF real, intent(out), DIMENSION(:) :: PLESNOW_ROOF real, intent(out), DIMENSION(:) :: PGSNOW_ROOF real, intent(out), DIMENSION(:) :: PMELT_ROOF real, intent(out), DIMENSION(:) :: PRNSNOW_ROAD real, intent(out), DIMENSION(:) :: PHSNOW_ROAD real, intent(out), DIMENSION(:) :: PLESNOW_ROAD real, intent(out), DIMENSION(:) :: PGSNOW_ROAD real, intent(out), DIMENSION(:) :: PMELT_ROAD real, intent(out), DIMENSION(:) :: PRN_GRND real, intent(out), DIMENSION(:) :: PH_GRND real, intent(out), DIMENSION(:) :: PLE_GRND real, intent(out), DIMENSION(:) :: PGFLUX_GRND real, intent(out), DIMENSION(:) :: PRN_TOWN real, intent(out), DIMENSION(:) :: PH_TOWN real, intent(out), DIMENSION(:) :: PLE_TOWN real, intent(out), DIMENSION(:) :: PGFLUX_TOWN real, intent(out), DIMENSION(:) :: PEVAP_TOWN real, intent(out), DIMENSION(:) :: PRUNOFF_TOWN real, intent(out), DIMENSION(:) :: PSFCO2 real, intent(out), DIMENSION(:) :: PUW_GRND real, intent(out), DIMENSION(:) :: PUW_ROOF real, intent(out), DIMENSION(:) :: PDUWDU_GRND real, intent(out), DIMENSION(:) :: PDUWDU_ROOF real, intent(out), DIMENSION(:) :: PUSTAR_TOWN real, intent(out), DIMENSION(:) :: PCD real, intent(out), DIMENSION(:) :: PCDN real, intent(out), DIMENSION(:) :: PCH_TOWN real, intent(out), DIMENSION(:) :: PRI_TOWN real, intent(out), DIMENSION(:) :: PTS_TOWN real, intent(out), DIMENSION(:) :: PEMIS_TOWN real, intent(out), DIMENSION(:) :: PDIR_ALB_TOWN real, intent(out), DIMENSION(:) :: PSCA_ALB_TOWN real, intent(out), DIMENSION(:) :: PRESA_TOWN real, intent(out), DIMENSION(:) :: PDQS_TOWN real, intent(out), DIMENSION(:) :: PQF_TOWN real, intent(out), DIMENSION(:) :: PQF_BLD real, intent(out), DIMENSION(:) :: PFLX_BLD real, intent(out), DIMENSION(:) :: PAC_ROAD real, intent(out), DIMENSION(:) :: PAC_GARDEN real, intent(out), DIMENSION(:) :: PAC_GREENROOF real, intent(out), DIMENSION(:) :: PAC_ROAD_WAT real, intent(out), DIMENSION(:) :: PAC_GARDEN_WAT real, intent(out), DIMENSION(:) :: PAC_GREENROOF_WAT real, intent(out), DIMENSION(:) :: PABS_SW_ROOF real, intent(out), DIMENSION(:) :: PABS_LW_ROOF real, intent(out), DIMENSION(:) :: PABS_SW_SNOW_ROOF real, intent(out), DIMENSION(:) :: PABS_LW_SNOW_ROOF real, intent(out), DIMENSION(:) :: PABS_SW_ROAD real, intent(out), DIMENSION(:) :: PABS_LW_ROAD real, intent(out), DIMENSION(:) :: PABS_SW_SNOW_ROAD real, intent(out), DIMENSION(:) :: PABS_LW_SNOW_ROAD real, intent(out), DIMENSION(:) :: PABS_SW_WALL_A real, intent(out), DIMENSION(:) :: PABS_LW_WALL_A real, intent(out), DIMENSION(:) :: PABS_SW_WALL_B real, intent(out), DIMENSION(:) :: PABS_LW_WALL_B real, intent(out), DIMENSION(:) :: PABS_SW_PANEL real, intent(out), DIMENSION(:) :: PABS_LW_PANEL real, intent(out), DIMENSION(:) :: PABS_SW_GARDEN real, intent(out), DIMENSION(:) :: PABS_LW_GARDEN real, intent(out), DIMENSION(:) :: PABS_SW_GREENROOF real, intent(out), DIMENSION(:) :: PABS_LW_GREENROOF real, intent(out), DIMENSION(:) :: PG_GREENROOF_ROOF character(len=12), intent(in) :: HCOOL_COIL real, intent(in), DIMENSION(:) :: PF_WATER_COND character(len=6), intent(in) :: HHEAT_COIL character(len=4), intent(in), DIMENSION(:) :: HNATVENT real, intent(in), DIMENSION(:) :: PNATVENT integer, intent(in) :: KDAY real, intent(inout), DIMENSION(:) :: PAUX_MAX real, intent(inout), DIMENSION(:,:) :: PT_FLOOR real, intent(inout), DIMENSION(:,:) :: PT_MASS real, intent(out), DIMENSION(:) :: PH_BLD_COOL real, intent(out), DIMENSION(:) :: PT_BLD_COOL real, intent(out), DIMENSION(:) :: PH_BLD_HEAT real, intent(out), DIMENSION(:  ) :: PLE_BLD_COOL real, intent(out), DIMENSION(:) :: PLE_BLD_HEAT real, intent(out), DIMENSION(:) :: PH_WASTE real, intent(out), DIMENSION(:) :: PLE_WASTE real, intent(in), DIMENSION(:) :: PF_WASTE_CAN real, intent(out), DIMENSION(:) :: PHVAC_COOL real, intent(out), DIMENSION(:) :: PHVAC_HEAT real, intent(in), DIMENSION(:) :: PQIN real, intent(in), DIMENSION(:) :: PQIN_FRAD real, intent(in), DIMENSION(:) :: PQIN_FLAT real, intent(in), DIMENSION(:) :: PGR real, intent(in), DIMENSION(:) :: PEFF_HEAT real, intent(in), DIMENSION(:) :: PINF real, intent(in), DIMENSION(:) :: PTCOOL_TARGET real, intent(in), DIMENSION(:) :: PTHEAT_TARGET real, intent(in), DIMENSION(:) :: PHR_TARGET real, intent(inout), DIMENSION(:) :: PT_WIN2 real, intent(inout), DIMENSION(:) :: PQI_BLD real, intent(in), DIMENSION(:) :: PV_VENT real, intent(in), DIMENSION(:) :: PCAP_SYS_HEAT real, intent(inout), DIMENSION(:) :: PCAP_SYS_RAT real, intent(in), DIMENSION(:) :: PT_ADP real, intent(inout), DIMENSION(:) :: PM_SYS_RAT real, intent(in), DIMENSION(:) :: PCOP_RAT real, intent(out), DIMENSION(:) :: PCAP_SYS real, intent(out), DIMENSION(:) :: PM_SYS real, intent(out), DIMENSION(:) :: PCOP real, intent(out), DIMENSION(:) :: PQ_SYS real, intent(out), DIMENSION(:) :: PT_SYS real, intent(out), DIMENSION(:) :: PTR_SW_WIN real, intent(out), DIMENSION(:) :: PFAN_POWER real, intent(in), DIMENSION(:,:) :: PHC_FLOOR real, intent(in), DIMENSION(:,:) :: PTC_FLOOR real, intent(in), DIMENSION(:,:) :: PD_FLOOR real, intent(inout), DIMENSION(:) :: PT_WIN1 real, intent(out), DIMENSION(:) :: PABS_SW_WIN real, intent(out), DIMENSION(:) :: PABS_LW_WIN real, intent(in), DIMENSION(:) :: PSHGC real, intent(in), DIMENSION(:) :: PSHGC_SH real, intent(in), DIMENSION(:) :: PUGG_WIN real, intent(out), DIMENSION(:) :: PALB_WIN real, intent(in), DIMENSION(:) :: PABS_WIN real, intent(out), DIMENSION(:) :: PEMIT_LW_FAC real, intent(out), DIMENSION(:) :: PEMIT_LW_GRND real, intent(out), DIMENSION(:) :: PT_RAD_IND real, intent(out), DIMENSION(:) :: PREF_SW_GRND real, intent(out), DIMENSION(:) :: PREF_SW_FAC real, intent(out), DIMENSION(:) :: PHU_BLD real, intent(in) :: PTIME logical, intent(in), DIMENSION(:) :: OSHADE real, intent(in), DIMENSION(:) :: PSHADE logical, intent(inout), DIMENSION(:) :: OSHAD_DAY logical, intent(inout), DIMENSION(:) :: ONATVENT_NIGHT character(len=3), intent(in) :: HBEM real, intent(in), DIMENSION(:) :: PN_FLOOR real, intent(in), DIMENSION(:) :: PWALL_O_BLD real, intent(in), DIMENSION(:) :: PGLAZ_O_BLD real, intent(in), DIMENSION(:) :: PMASS_O_BLD real, intent(in), DIMENSION(:) :: PFLOOR_HW_RATIO real, intent(in), DIMENSION(:) :: PF_FLOOR_MASS real, intent(in), DIMENSION(:) :: PF_FLOOR_WALL real, intent(in), DIMENSION(:) :: PF_FLOOR_WIN real, intent(in), DIMENSION(:) :: PF_FLOOR_ROOF real, intent(in), DIMENSION(:) :: PF_WALL_FLOOR real, intent(in), DIMENSION(:) :: PF_WALL_MASS real, intent(in), DIMENSION(:) :: PF_WALL_WIN real, intent(in), DIMENSION(:) :: PF_WIN_FLOOR real, intent(in), DIMENSION(:) :: PF_WIN_MASS real, intent(in), DIMENSION(:) :: PF_WIN_WALL real, intent(in), DIMENSION(:) :: PF_MASS_FLOOR real, intent(in), DIMENSION(:) :: PF_MASS_WALL real, intent(in), DIMENSION(:) :: PF_MASS_WIN logical, intent(in) :: OCANOPY real, intent(in), DIMENSION(:) :: PTRAN_WIN character(len=5), intent(in) :: HCH_BEM real, intent(in), DIMENSION(:) :: PROUGH_ROOF real, intent(in), DIMENSION(:) :: PROUGH_WALL real, intent(in), DIMENSION(:) :: PF_WIN_WIN logical, intent(in) :: OPAR_RD_IRRIG real, intent(in), DIMENSION(:) :: PRD_START_MONTH real, intent(in), DIMENSION(:) :: PRD_END_MONTH real, intent(in), DIMENSION(:) :: PRD_START_HOUR real, intent(in), DIMENSION(:) :: PRD_END_HOUR real, intent(in), DIMENSION(:) :: PRD_24H_IRRIG real, intent(out), DIMENSION(:) :: PIRRIG_ROAD real, intent(in), DIMENSION(:) :: PEMIS_PANEL real, intent(in), DIMENSION(:) :: PALB_PANEL real, intent(in), DIMENSION(:) :: PEFF_PANEL real, intent(in), DIMENSION(:) :: PFRAC_PANEL real, intent(in), DIMENSION(:) :: PRESIDENTIAL real, intent(out), DIMENSION(:) :: PTHER_PROD_PANEL real, intent(out), DIMENSION(:) :: PPHOT_PROD_PANEL real, intent(out), DIMENSION(:) :: PPROD_PANEL real, intent(out), DIMENSION(:) :: PTHER_PROD_BLD real, intent(out), DIMENSION(:) :: PPHOT_PROD_BLD real, intent(out), DIMENSION(:) :: PPROD_BLD real, intent(inout), DIMENSION(:) :: PTHER_PRODC_DAY real, intent(out), DIMENSION(:) :: PH_PANEL real, intent(out), DIMENSION(:) :: PRN_PANEL real, intent(in) :: PDT_RES real, intent(in) :: PDT_OFF real, intent(out), DIMENSION(:) :: PCUR_TCOOL_TARGET real, intent(out), DIMENSION(:) :: PCUR_THEAT_TARGET real, intent(out), DIMENSION(:) :: PCUR_QIN","tags":"","loc":"module/modi_teb_garden_struct.html"},{"title":"MODI_DEALLOC_TEB_STRUCT – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces DEALLOC_TEB_STRUCT Interfaces interface public subroutine DEALLOC_TEB_STRUCT(TOP, T, BOP, B, TPN, TIR, DMT, GDM, GRM) Arguments Type Intent Optional Attributes Name type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_OPTIONS_t), intent(inout) :: BOP type(BEM_t), intent(inout) :: B type(TEB_PANEL_t), intent(inout) :: TPN type(TEB_IRRIG_t), intent(inout) :: TIR type(DIAG_MISC_TEB_t), intent(inout) :: DMT type(TEB_GARDEN_MODEL_t), intent(inout) :: GDM type(TEB_GREENROOF_MODEL_t), intent(inout) :: GRM","tags":"","loc":"module/modi_dealloc_teb_struct.html"},{"title":"MODI_WINDOW_DATA_STRUCT – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces WINDOW_DATA_STRUCT Interfaces interface public subroutine WINDOW_DATA_STRUCT(KI, PSHGC, PU_WIN, PALB_WIN, PABS_WIN, PUGG_WIN, PTRAN_WIN) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KI real, intent(in), DIMENSION(KI) :: PSHGC real, intent(in), DIMENSION(KI) :: PU_WIN real, intent(out), DIMENSION(KI) :: PALB_WIN real, intent(out), DIMENSION(KI) :: PABS_WIN real, intent(out), DIMENSION(KI) :: PUGG_WIN real, intent(out), DIMENSION(KI) :: PTRAN_WIN","tags":"","loc":"module/modi_window_data_struct.html"},{"title":"MODI_BEM_MORPHO_STRUCT – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces BEM_MORPHO_STRUCT Interfaces interface public subroutine BEM_MORPHO_STRUCT(PBLD, PWALL_O_HOR, PBLD_HEIGHT, PFLOOR_HEIGHT, PGR, PN_FLOOR, PWALL_O_BLD, PGLAZ_O_BLD, PMASS_O_BLD, PFLOOR_HW_RATIO, PF_FLOOR_MASS, PF_FLOOR_WALL, PF_FLOOR_WIN, PF_FLOOR_ROOF, PF_WALL_FLOOR, PF_WALL_MASS, PF_WALL_WIN, PF_WIN_FLOOR, PF_WIN_MASS, PF_WIN_WALL, PF_MASS_FLOOR, PF_MASS_WALL, PF_MASS_WIN, PF_WASTE_CAN, PF_WIN_WIN) Arguments Type Intent Optional Attributes Name real, intent(in), DIMENSION(:) :: PBLD real, intent(in), DIMENSION(:) :: PWALL_O_HOR real, intent(in), DIMENSION(:) :: PBLD_HEIGHT real, intent(inout), DIMENSION(:) :: PFLOOR_HEIGHT real, intent(in), DIMENSION(:) :: PGR real, intent(out), DIMENSION(:) :: PN_FLOOR real, intent(out), DIMENSION(:) :: PWALL_O_BLD real, intent(out), DIMENSION(:) :: PGLAZ_O_BLD real, intent(out), DIMENSION(:) :: PMASS_O_BLD real, intent(out), DIMENSION(:) :: PFLOOR_HW_RATIO real, intent(out), DIMENSION(:) :: PF_FLOOR_MASS real, intent(out), DIMENSION(:) :: PF_FLOOR_WALL real, intent(out), DIMENSION(:) :: PF_FLOOR_WIN real, intent(out), DIMENSION(:) :: PF_FLOOR_ROOF real, intent(out), DIMENSION(:) :: PF_WALL_FLOOR real, intent(out), DIMENSION(:) :: PF_WALL_MASS real, intent(out), DIMENSION(:) :: PF_WALL_WIN real, intent(out), DIMENSION(:) :: PF_WIN_FLOOR real, intent(out), DIMENSION(:) :: PF_WIN_MASS real, intent(out), DIMENSION(:) :: PF_WIN_WALL real, intent(out), DIMENSION(:) :: PF_MASS_FLOOR real, intent(out), DIMENSION(:) :: PF_MASS_WALL real, intent(out), DIMENSION(:) :: PF_MASS_WIN real, intent(inout), DIMENSION(:) :: PF_WASTE_CAN real, intent(out), DIMENSION(:) :: PF_WIN_WIN","tags":"","loc":"module/modi_bem_morpho_struct.html"},{"title":"MODI_ALLOC_TEB_STRUCT – Town Energy Balance (TEB) model API docs","text":"Contents Interfaces ALLOC_TEB_STRUCT Interfaces interface public subroutine ALLOC_TEB_STRUCT(KROOF_LAYER, KROAD_LAYER, KWALL_LAYER, KFLOOR_LAYER, DTCO, G, TOP, T, BOP, B, TPN, TIR, DMT, GDM, GRM) Arguments Type Intent Optional Attributes Name integer, intent(in) :: KROOF_LAYER integer, intent(in) :: KROAD_LAYER integer, intent(in) :: KWALL_LAYER integer, intent(in) :: KFLOOR_LAYER type(DATA_COVER_t), intent(inout) :: DTCO type(GRID_t), intent(inout) :: G type(TEB_OPTIONS_t), intent(inout) :: TOP type(TEB_t), intent(inout) :: T type(BEM_OPTIONS_t), intent(inout) :: BOP type(BEM_t), intent(inout) :: B type(TEB_PANEL_t), intent(inout) :: TPN type(TEB_IRRIG_t), intent(inout) :: TIR type(DIAG_MISC_TEB_t), intent(inout) :: DMT type(TEB_GARDEN_MODEL_t), intent(inout) :: GDM type(TEB_GREENROOF_MODEL_t), intent(inout) :: GRM","tags":"","loc":"module/modi_alloc_teb_struct.html"},{"title":"DRIVER – Town Energy Balance (TEB) model API docs","text":"Uses MODE_THERMOS MODD_REPROD_OPER MODI_WINDOW_DATA_STRUCT MODI_BEM_MORPHO_STRUCT MODD_FORC_ATM MODI_SUNPOS MODI_OL_TIME_INTERP_ATM MODD_SURF_ATM MODI_OL_ALLOC_ATM MODI_OPEN_CLOSE_BIN_ASC_FORC MODD_SURF_PAR MODI_ADD_FORECAST_TO_DATE_SURF MODD_TYPE_DATE_SURF MODI_CIRCUMSOLAR_RAD MODI_OL_READ_ATM MODI_INI_CSTS MODD_CSTS PROXI_SVAT_CONSTS MODI_TEB_GARDEN_STRUCT Contents Variables XTSTEP_SURF IYEAR IMONTH IDAY ZTIME_START ZLON ZLAT INB_STEP_ATM INB_ATM KSW ZZREF ZTI_BLD ZT_CANYON ZQA_KGKG ZTIMEC JFORC_STEP JSURF_STEP JLOOP NWALL_LAYER NROOF_LAYER NROAD_LAYER NFLOOR_LAYER TPTIME HIMPLICIT_WIND ZHC_WALL ZTC_WALL ZD_WALL ZHC_ROOF ZTC_ROOF ZD_ROOF ZHC_ROAD ZTC_ROAD ZD_ROAD ZT_ROAD ZT_ROOF ZT_WALL ZT_WALL_B ZROAD_DIR ZFRAC_GR ZFRAC_PANEL HSNOW_ROOF ZWSNOW_ROOF ZTSNOW_ROOF ZRSNOW_ROOF ZTSSNOW_ROOF HSNOW_ROAD ZWSNOW_ROAD ZTSNOW_ROAD ZRSNOW_ROAD ZTSSNOW_ROAD ZALB_WALL ZEMIS_WALL ZALB_ROOF ZEMIS_ROOF ZESNOW_ROAD ZALB_ROAD ZEMIS_ROAD ZASNOW_ROOF ZASNOW_ROAD ZABS_SW_ROOF ZABS_SW_ROAD ZABS_SW_WALL_A ZABS_SW_WALL_B ZABS_SW_GARDEN ZABS_SW_GREENROOF ZABS_LW_ROOF ZABS_LW_ROAD ZABS_LW_WALL_A ZABS_LW_WALL_B ZABS_LW_GARDEN ZABS_LW_GREENROOF ZABS_SW_SNOW_ROOF ZABS_SW_SNOW_ROAD ZABS_SW_PANEL ZABS_LW_PANEL ZDIR_ALB_TOWN ZSCA_ALB_TOWN ZCAN_HW_RATIO ZSVF_ROAD ZSVF_GARDEN ZSVF_WALL ZWAKE ZGSNOW_ROOF ZHSNOW_ROOF ZH_TRAFFIC ZLE_TRAFFIC XH_TRAFFIC XLE_TRAFFIC ZH_INDUSTRY ZLE_INDUSTRY LPAR_RD_IRRIG LSOLAR_PANEL LGARDEN LGREENROOF HZ0H HROAD_DIR HWALL_OPT ZZ0 ZBLD ZGARDEN ZBLD_HEIGHT ZWALL_O_HOR ZU_CANYON ZQ_CANYON ZDIR_CANYON ZTS_ROOF ZTS_ROAD ZTS_WALL_A ZTS_WALL_B ZZ_LOWCAN ZT_LOWCAN ZU_LOWCAN ZQ_LOWCAN ZEXNS ZEXNA ZROAD ZWS_ROOF ZWS_ROAD ZPEW_A_COEF ZPEW_B_COEF ZPEW_A_COEF_LOWCAN ZPEW_B_COEF_LOWCAN ZWALL_O_GRND ZROAD_O_GRND ZGARDEN_O_GRND ZVMOD ZCD ZCDN ZAC_ROAD ZAC_ROAD_WAT ZAC_GARDEN ZAC_GARDEN_WAT ZAC_GREENROOF ZAC_GREENROOF_WAT ZUW_ROOF ZDUWDU_GRND ZDUWDU_ROOF ZUSTAR_TOWN ZRESA_TOWN ZCH_TOWN ZRI_TOWN ZRUNOFF_TOWN ZRUNOFF_ROOF ZRUNOFF_ROAD ZGSNOW_ROAD ZROOF_FRAC ZWALL_FRAC ZROAD_FRAC ZGARDEN_FRAC ZTOTS_O_HORS ZUW_GRND ZRN_ROOF ZH_ROOF ZLE_ROOF ZGFLUX_ROOF ZRN_ROAD ZH_ROAD ZLE_ROAD ZGFLUX_ROAD ZRN_WALL_A ZRN_WALL_B ZH_WALL_A ZH_WALL_B ZLE_WALL_A ZLE_WALL_B ZGFLUX_WALL_A ZGFLUX_WALL_B ZG_GREENROOF_ROOF ZRNSNOW_ROOF ZRNSNOW_ROAD ZHSNOW_ROAD ZLESNOW_ROAD ZRN_BLT ZH_BLT ZLE_BLT ZGFLUX_BLT ZFLX_BLD ZDQS_TOWN ZQF_TOWN ZMELT_ROOF ZMELT_ROAD ZQF_BLD ZSFCO2 CBEM CCOOL_COIL CHEAT_COIL ZF_WATER_COND HNATVENT ZNATVENT ZAUX_MAX ZT_FLOOR ZT_MASS PFLOOR_HEIGHT ZH_BLD_COOL ZT_BLD_COOL ZH_BLD_HEAT ZLE_BLD_COOL ZLE_BLD_HEAT ZH_WASTE ZLE_WASTE ZF_WASTE_CAN ZHVAC_COOL ZHVAC_HEAT ZHVAC_COOL_TOT ZHVAC_HEAT_TOT ZQIN ZQIN_FRAD ZQIN_FLAT ZGR ZEFF_HEAT ZINF ZTCOOL_TARGET ZTHEAT_TARGET ZCUR_QIN ZCUR_TCOOL_TARGET ZCUR_THEAT_TARGET ZHR_TARGET ZT_WIN2 ZQI_BLD ZV_VENT ZCAP_SYS_HEAT ZCAP_SYS_RAT ZT_ADP ZM_SYS_RAT ZCOP_RAT ZCAP_SYS ZM_SYS ZCOP ZQ_SYS ZT_SYS ZTR_SW_WIN ZFAN_POWER ZHC_FLOOR ZTC_FLOOR ZD_FLOOR ZT_WIN1 ZABS_SW_WIN ZABS_LW_WIN ZSHGC ZSHGC_SH ZUGG_WIN ZALB_WIN PU_WIN ZABS_WIN ZTRAN_WIN ZEMIT_LW_GRND ZEMIT_LW_FAC ZT_RAD_IND ZREF_SW_GRND ZREF_SW_FAC ZHU_BLD ZEMIS_PANEL ZALB_PANEL ZEFF_PANEL ZTHER_PROD_PANEL ZPHOT_PROD_PANEL ZPROD_PANEL ZTHER_PROD_BLD ZPHOT_PROD_BLD ZPROD_BLD ZTHER_PRODC_DAY ZH_PANEL ZRN_PANEL ZRESIDENTIAL ZDT_RES ZDT_OFF ZRD_START_MONTH ZRD_END_MONTH ZRD_START_HOUR ZRD_END_HOUR ZRD_24H_IRRIG ZIRRIG_ROAD LSHADE ZSHADE GSHAD_DAY GNATVENT_NIGHT ZN_FLOOR ZWALL_O_BLD ZGLAZ_O_BLD ZMASS_O_BLD ZFLOOR_HW_RATIO ZF_FLOOR_MASS ZF_FLOOR_WALL ZF_FLOOR_WIN ZF_FLOOR_ROOF ZF_WALL_FLOOR ZF_WALL_MASS ZF_WALL_WIN ZF_WIN_FLOOR ZF_WIN_MASS ZF_WIN_WALL ZF_MASS_FLOOR ZF_MASS_WALL ZF_MASS_WIN LCANOPY CCH_BEM ZROUGH_ROOF ZROUGH_WALL ZF_WIN_WIN ZTS_TOWN ZEMIS_TOWN ZALB_TOWN ZQ_TOWN ZESNOW_ROOF ZABS_LW_SNOW_ROOF ZABS_LW_SNOW_ROAD ZRN_STRLROOF ZH_STRLROOF ZLE_STRLROOF ZGFLUX_STRLROOF ZRUNOFF_STRLROOF ZLEW_ROOF ZLESNOW_ROOF ZLEW_ROAD ZRN_GRND ZH_GRND ZLE_GRND ZGFLUX_GRND ZRN_TOWN ZH_TOWN ZLE_TOWN ZGFLUX_TOWN ZEVAP_TOWN ZTA ZQA ZWIND ZSCA_SW ZDIR_SW ZLW ZSNOW ZRAIN ZPS ZCO2 ZDIR ZCOEF ZF1_o_B ZTDIR_SW ZTSCA_SW ZTIME_BEG ZTIME T_ROOF1 T_CANYON T_ROAD1 T_FLOOR1 T_MASS1 T_WALLA1 T_WALLB1 TI_BLD QI_BLD Q_CANYON U_CANYON H_TOWN LE_TOWN RN_TOWN HVAC_COOL HVAC_HEAT COP DIR_CANYON ALB_TOWN EMIS_TOWN EVAP_TOWN GFLUX_TOWN TS_TOWN Q_TOWN USTAR_TOWN THER_PROD_PANEL PHOT_PROD_PANEL QF_TOWN DQS_TOWN SWD SWU LWD LWU Forc_TA Forc_PS Forc_QA Forc_WIND Forc_RAIN Forc_SNOW ID_FORC ZSUMZEN ZSW ZBEGIN_TRAFFIC_TIME ZEND_TRAFFIC_TIME IYEAR2 IMONTH2 IDAY2 ZTIME2 exist NO_OUTPUT Source Code DRIVER Variables Type Attributes Name Initial real :: XTSTEP_SURF integer :: IYEAR integer :: IMONTH integer :: IDAY real :: ZTIME_START real, DIMENSION(1) :: ZLON real, DIMENSION(1) :: ZLAT integer :: INB_STEP_ATM integer :: INB_ATM integer :: KSW real, DIMENSION(1) :: ZZREF real, DIMENSION(1) :: ZTI_BLD real, DIMENSION(1) :: ZT_CANYON real, DIMENSION(1) :: ZQA_KGKG real :: ZTIMEC = 0.0 integer :: JFORC_STEP integer :: JSURF_STEP integer :: JLOOP integer :: NWALL_LAYER integer :: NROOF_LAYER integer :: NROAD_LAYER integer :: NFLOOR_LAYER type(DATE_TIME) :: TPTIME character(len=3) :: HIMPLICIT_WIND = 'NEW' real, DIMENSION(:,:), ALLOCATABLE :: ZHC_WALL real, DIMENSION(:,:), ALLOCATABLE :: ZTC_WALL real, DIMENSION(:,:), ALLOCATABLE :: ZD_WALL real, DIMENSION(:,:), ALLOCATABLE :: ZHC_ROOF real, DIMENSION(:,:), ALLOCATABLE :: ZTC_ROOF real, DIMENSION(:,:), ALLOCATABLE :: ZD_ROOF real, DIMENSION(:,:), ALLOCATABLE :: ZHC_ROAD real, DIMENSION(:,:), ALLOCATABLE :: ZTC_ROAD real, DIMENSION(:,:), ALLOCATABLE :: ZD_ROAD real, DIMENSION(:,:), ALLOCATABLE :: ZT_ROAD real, DIMENSION(:,:), ALLOCATABLE :: ZT_ROOF real, DIMENSION(:,:), ALLOCATABLE :: ZT_WALL real, DIMENSION(:,:), ALLOCATABLE :: ZT_WALL_B real, DIMENSION(1) :: ZROAD_DIR real, DIMENSION(1) :: ZFRAC_GR real, DIMENSION(1) :: ZFRAC_PANEL character(len=3) :: HSNOW_ROOF = \"1-L\" real, DIMENSION(1,1) :: ZWSNOW_ROOF = 0. real, DIMENSION(1,1) :: ZTSNOW_ROOF real, DIMENSION(1,1) :: ZRSNOW_ROOF real, DIMENSION(1) :: ZTSSNOW_ROOF character(len=3) :: HSNOW_ROAD = \"1-L\" real, DIMENSION(1,1) :: ZWSNOW_ROAD = 0. real, DIMENSION(1,1) :: ZTSNOW_ROAD real, DIMENSION(1,1) :: ZRSNOW_ROAD real, DIMENSION(1) :: ZTSSNOW_ROAD real, DIMENSION(1) :: ZALB_WALL real, DIMENSION(1) :: ZEMIS_WALL real, DIMENSION(1) :: ZALB_ROOF real, DIMENSION(1) :: ZEMIS_ROOF real, DIMENSION(1) :: ZESNOW_ROAD real, DIMENSION(1) :: ZALB_ROAD real, DIMENSION(1) :: ZEMIS_ROAD real, DIMENSION(1) :: ZASNOW_ROOF real, DIMENSION(1) :: ZASNOW_ROAD real, DIMENSION(1) :: ZABS_SW_ROOF real, DIMENSION(1) :: ZABS_SW_ROAD real, DIMENSION(1) :: ZABS_SW_WALL_A real, DIMENSION(1) :: ZABS_SW_WALL_B real, DIMENSION(1) :: ZABS_SW_GARDEN real, DIMENSION(1) :: ZABS_SW_GREENROOF real, DIMENSION(1) :: ZABS_LW_ROOF real, DIMENSION(1) :: ZABS_LW_ROAD real, DIMENSION(1) :: ZABS_LW_WALL_A real, DIMENSION(1) :: ZABS_LW_WALL_B real, DIMENSION(1) :: ZABS_LW_GARDEN real, DIMENSION(1) :: ZABS_LW_GREENROOF real, DIMENSION(1) :: ZABS_SW_SNOW_ROOF real, DIMENSION(1) :: ZABS_SW_SNOW_ROAD real, DIMENSION(1) :: ZABS_SW_PANEL real, DIMENSION(1) :: ZABS_LW_PANEL real, DIMENSION(1) :: ZDIR_ALB_TOWN real, DIMENSION(1) :: ZSCA_ALB_TOWN real, DIMENSION(1) :: ZCAN_HW_RATIO real, DIMENSION(1) :: ZSVF_ROAD real, DIMENSION(1) :: ZSVF_GARDEN real, DIMENSION(1) :: ZSVF_WALL real, DIMENSION(1) :: ZWAKE real, DIMENSION(1) :: ZGSNOW_ROOF = 0.0 real, DIMENSION(1) :: ZHSNOW_ROOF real, DIMENSION(1) :: ZH_TRAFFIC real, DIMENSION(1) :: ZLE_TRAFFIC real, DIMENSION(1) :: XH_TRAFFIC real, DIMENSION(1) :: XLE_TRAFFIC real, DIMENSION(1) :: ZH_INDUSTRY real, DIMENSION(1) :: ZLE_INDUSTRY logical :: LPAR_RD_IRRIG logical :: LSOLAR_PANEL logical :: LGARDEN logical :: LGREENROOF character(len=6) :: HZ0H character(len=4) :: HROAD_DIR character(len=4) :: HWALL_OPT real, DIMENSION(1) :: ZZ0 real, DIMENSION(1) :: ZBLD real, DIMENSION(1) :: ZGARDEN real, DIMENSION(1) :: ZBLD_HEIGHT real, DIMENSION(1) :: ZWALL_O_HOR real, DIMENSION(1) :: ZU_CANYON = 1.0 real, DIMENSION(1) :: ZQ_CANYON real, DIMENSION(1) :: ZDIR_CANYON real, DIMENSION(1) :: ZTS_ROOF real, DIMENSION(1) :: ZTS_ROAD real, DIMENSION(1) :: ZTS_WALL_A real, DIMENSION(1) :: ZTS_WALL_B real, DIMENSION(1) :: ZZ_LOWCAN real, DIMENSION(1) :: ZT_LOWCAN real, DIMENSION(1) :: ZU_LOWCAN real, DIMENSION(1) :: ZQ_LOWCAN real, DIMENSION(1) :: ZEXNS real, DIMENSION(1) :: ZEXNA real, DIMENSION(1) :: ZROAD real, DIMENSION(1) :: ZWS_ROOF = 0. real, DIMENSION(1) :: ZWS_ROAD = 0. real, DIMENSION(1) :: ZPEW_A_COEF real, DIMENSION(1) :: ZPEW_B_COEF real, DIMENSION(1) :: ZPEW_A_COEF_LOWCAN real, DIMENSION(1) :: ZPEW_B_COEF_LOWCAN real, DIMENSION(1) :: ZWALL_O_GRND real, DIMENSION(1) :: ZROAD_O_GRND real, DIMENSION(1) :: ZGARDEN_O_GRND real, DIMENSION(1) :: ZVMOD real, DIMENSION(1) :: ZCD real, DIMENSION(1) :: ZCDN real, DIMENSION(1) :: ZAC_ROAD real, DIMENSION(1) :: ZAC_ROAD_WAT real, DIMENSION(1) :: ZAC_GARDEN real, DIMENSION(1) :: ZAC_GARDEN_WAT real, DIMENSION(1) :: ZAC_GREENROOF real, DIMENSION(1) :: ZAC_GREENROOF_WAT real, DIMENSION(1) :: ZUW_ROOF real, DIMENSION(1) :: ZDUWDU_GRND real, DIMENSION(1) :: ZDUWDU_ROOF real, DIMENSION(1) :: ZUSTAR_TOWN real, DIMENSION(1) :: ZRESA_TOWN real, DIMENSION(1) :: ZCH_TOWN real, DIMENSION(1) :: ZRI_TOWN real, DIMENSION(1) :: ZRUNOFF_TOWN real, DIMENSION(1) :: ZRUNOFF_ROOF real, DIMENSION(1) :: ZRUNOFF_ROAD real, DIMENSION(1) :: ZGSNOW_ROAD = 0.0 real, DIMENSION(1) :: ZROOF_FRAC real, DIMENSION(1) :: ZWALL_FRAC real, DIMENSION(1) :: ZROAD_FRAC real, DIMENSION(1) :: ZGARDEN_FRAC real, DIMENSION(1) :: ZTOTS_O_HORS real, DIMENSION(1) :: ZUW_GRND real, DIMENSION(1) :: ZRN_ROOF real, DIMENSION(1) :: ZH_ROOF real, DIMENSION(1) :: ZLE_ROOF real, DIMENSION(1) :: ZGFLUX_ROOF real, DIMENSION(1) :: ZRN_ROAD real, DIMENSION(1) :: ZH_ROAD real, DIMENSION(1) :: ZLE_ROAD real, DIMENSION(1) :: ZGFLUX_ROAD real, DIMENSION(1) :: ZRN_WALL_A real, DIMENSION(1) :: ZRN_WALL_B real, DIMENSION(1) :: ZH_WALL_A = 0.0 real, DIMENSION(1) :: ZH_WALL_B = 0.0 real, DIMENSION(1) :: ZLE_WALL_A real, DIMENSION(1) :: ZLE_WALL_B real, DIMENSION(1) :: ZGFLUX_WALL_A real, DIMENSION(1) :: ZGFLUX_WALL_B real, DIMENSION(1) :: ZG_GREENROOF_ROOF real, DIMENSION(1) :: ZRNSNOW_ROOF = 0.0 real, DIMENSION(1) :: ZRNSNOW_ROAD = 0.0 real, DIMENSION(1) :: ZHSNOW_ROAD = 0.0 real, DIMENSION(1) :: ZLESNOW_ROAD = 0.0 real, DIMENSION(1) :: ZRN_BLT real, DIMENSION(1) :: ZH_BLT real, DIMENSION(1) :: ZLE_BLT real, DIMENSION(1) :: ZGFLUX_BLT real, DIMENSION(1) :: ZFLX_BLD real, DIMENSION(1) :: ZDQS_TOWN real, DIMENSION(1) :: ZQF_TOWN real, DIMENSION(1) :: ZMELT_ROOF = 0.0 real, DIMENSION(1) :: ZMELT_ROAD = 0.0 real, DIMENSION(1) :: ZQF_BLD real, DIMENSION(1) :: ZSFCO2 character(len=3) :: CBEM character(len=12) :: CCOOL_COIL character(len=6) :: CHEAT_COIL real, DIMENSION(1) :: ZF_WATER_COND character(len=4), DIMENSION(1) :: HNATVENT real, DIMENSION(1) :: ZNATVENT real, DIMENSION(1) :: ZAUX_MAX = 5. real, DIMENSION(:,:), ALLOCATABLE :: ZT_FLOOR real, DIMENSION(:,:), ALLOCATABLE :: ZT_MASS real, DIMENSION(1) :: PFLOOR_HEIGHT real, DIMENSION(1) :: ZH_BLD_COOL real, DIMENSION(1) :: ZT_BLD_COOL real, DIMENSION(1) :: ZH_BLD_HEAT real, DIMENSION(1) :: ZLE_BLD_COOL real, DIMENSION(1) :: ZLE_BLD_HEAT real, DIMENSION(1) :: ZH_WASTE real, DIMENSION(1) :: ZLE_WASTE real, DIMENSION(1) :: ZF_WASTE_CAN real, DIMENSION(1) :: ZHVAC_COOL real, DIMENSION(1) :: ZHVAC_HEAT real, DIMENSION(1) :: ZHVAC_COOL_TOT real, DIMENSION(1) :: ZHVAC_HEAT_TOT real, DIMENSION(1) :: ZQIN real, DIMENSION(1) :: ZQIN_FRAD real, DIMENSION(1) :: ZQIN_FLAT real, DIMENSION(1) :: ZGR real, DIMENSION(1) :: ZEFF_HEAT real, DIMENSION(1) :: ZINF real, DIMENSION(1) :: ZTCOOL_TARGET real, DIMENSION(1) :: ZTHEAT_TARGET real, DIMENSION(1) :: ZCUR_QIN real, DIMENSION(1) :: ZCUR_TCOOL_TARGET real, DIMENSION(1) :: ZCUR_THEAT_TARGET real, DIMENSION(1) :: ZHR_TARGET real, DIMENSION(1) :: ZT_WIN2 real, DIMENSION(1) :: ZQI_BLD real, DIMENSION(1) :: ZV_VENT real, DIMENSION(1) :: ZCAP_SYS_HEAT real, DIMENSION(1) :: ZCAP_SYS_RAT real, DIMENSION(1) :: ZT_ADP real, DIMENSION(1) :: ZM_SYS_RAT real, DIMENSION(1) :: ZCOP_RAT real, DIMENSION(1) :: ZCAP_SYS real, DIMENSION(1) :: ZM_SYS real, DIMENSION(1) :: ZCOP real, DIMENSION(1) :: ZQ_SYS real, DIMENSION(1) :: ZT_SYS real, DIMENSION(1) :: ZTR_SW_WIN real, DIMENSION(1) :: ZFAN_POWER real, DIMENSION(:,:), ALLOCATABLE :: ZHC_FLOOR real, DIMENSION(:,:), ALLOCATABLE :: ZTC_FLOOR real, DIMENSION(:,:), ALLOCATABLE :: ZD_FLOOR real, DIMENSION(1) :: ZT_WIN1 real, DIMENSION(1) :: ZABS_SW_WIN real, DIMENSION(1) :: ZABS_LW_WIN real, DIMENSION(1) :: ZSHGC real, DIMENSION(1) :: ZSHGC_SH real, DIMENSION(1) :: ZUGG_WIN real, DIMENSION(1) :: ZALB_WIN real, DIMENSION(1) :: PU_WIN real, DIMENSION(1) :: ZABS_WIN real, DIMENSION(1) :: ZTRAN_WIN real, DIMENSION(1) :: ZEMIT_LW_GRND real, DIMENSION(1) :: ZEMIT_LW_FAC real, DIMENSION(1) :: ZT_RAD_IND real, DIMENSION(1) :: ZREF_SW_GRND real, DIMENSION(1) :: ZREF_SW_FAC real, DIMENSION(1) :: ZHU_BLD real, DIMENSION(1) :: ZEMIS_PANEL real, DIMENSION(1) :: ZALB_PANEL real, DIMENSION(1) :: ZEFF_PANEL real, DIMENSION(1) :: ZTHER_PROD_PANEL real, DIMENSION(1) :: ZPHOT_PROD_PANEL real, DIMENSION(1) :: ZPROD_PANEL real, DIMENSION(1) :: ZTHER_PROD_BLD real, DIMENSION(1) :: ZPHOT_PROD_BLD real, DIMENSION(1) :: ZPROD_BLD real, DIMENSION(1) :: ZTHER_PRODC_DAY = 0. real, DIMENSION(1) :: ZH_PANEL real, DIMENSION(1) :: ZRN_PANEL real, DIMENSION(1) :: ZRESIDENTIAL real :: ZDT_RES real :: ZDT_OFF real, DIMENSION(1) :: ZRD_START_MONTH real, DIMENSION(1) :: ZRD_END_MONTH real, DIMENSION(1) :: ZRD_START_HOUR real, DIMENSION(1) :: ZRD_END_HOUR real, DIMENSION(1) :: ZRD_24H_IRRIG real, DIMENSION(1) :: ZIRRIG_ROAD logical, DIMENSION(1) :: LSHADE real, DIMENSION(1) :: ZSHADE logical, DIMENSION(1) :: GSHAD_DAY logical, DIMENSION(1) :: GNATVENT_NIGHT real, DIMENSION(1) :: ZN_FLOOR real, DIMENSION(1) :: ZWALL_O_BLD real, DIMENSION(1) :: ZGLAZ_O_BLD real, DIMENSION(1) :: ZMASS_O_BLD real, DIMENSION(1) :: ZFLOOR_HW_RATIO real, DIMENSION(1) :: ZF_FLOOR_MASS real, DIMENSION(1) :: ZF_FLOOR_WALL real, DIMENSION(1) :: ZF_FLOOR_WIN real, DIMENSION(1) :: ZF_FLOOR_ROOF real, DIMENSION(1) :: ZF_WALL_FLOOR real, DIMENSION(1) :: ZF_WALL_MASS real, DIMENSION(1) :: ZF_WALL_WIN real, DIMENSION(1) :: ZF_WIN_FLOOR real, DIMENSION(1) :: ZF_WIN_MASS real, DIMENSION(1) :: ZF_WIN_WALL real, DIMENSION(1) :: ZF_MASS_FLOOR real, DIMENSION(1) :: ZF_MASS_WALL real, DIMENSION(1) :: ZF_MASS_WIN logical :: LCANOPY character(len=5) :: CCH_BEM real, DIMENSION(1) :: ZROUGH_ROOF real, DIMENSION(1) :: ZROUGH_WALL real, DIMENSION(1) :: ZF_WIN_WIN real, DIMENSION(1) :: ZTS_TOWN real, DIMENSION(1) :: ZEMIS_TOWN real, DIMENSION(1) :: ZALB_TOWN real, DIMENSION(1) :: ZQ_TOWN real, DIMENSION(1) :: ZESNOW_ROOF = 1.0 real, DIMENSION(1) :: ZABS_LW_SNOW_ROOF real, DIMENSION(1) :: ZABS_LW_SNOW_ROAD real, DIMENSION(1) :: ZRN_STRLROOF real, DIMENSION(1) :: ZH_STRLROOF real, DIMENSION(1) :: ZLE_STRLROOF real, DIMENSION(1) :: ZGFLUX_STRLROOF real, DIMENSION(1) :: ZRUNOFF_STRLROOF real, DIMENSION(1) :: ZLEW_ROOF real, DIMENSION(1) :: ZLESNOW_ROOF real, DIMENSION(1) :: ZLEW_ROAD real, DIMENSION(1) :: ZRN_GRND real, DIMENSION(1) :: ZH_GRND real, DIMENSION(1) :: ZLE_GRND real, DIMENSION(1) :: ZGFLUX_GRND real, DIMENSION(1) :: ZRN_TOWN real, DIMENSION(1) :: ZH_TOWN real, DIMENSION(1) :: ZLE_TOWN real, DIMENSION(1) :: ZGFLUX_TOWN real, DIMENSION(1) :: ZEVAP_TOWN real, DIMENSION(:,:), ALLOCATABLE :: ZTA real, DIMENSION(:,:), ALLOCATABLE :: ZQA real, DIMENSION(:,:), ALLOCATABLE :: ZWIND real, DIMENSION(:,:), ALLOCATABLE :: ZSCA_SW real, DIMENSION(:,:), ALLOCATABLE :: ZDIR_SW real, DIMENSION(:,:), ALLOCATABLE :: ZLW real, DIMENSION(:,:), ALLOCATABLE :: ZSNOW real, DIMENSION(:,:), ALLOCATABLE :: ZRAIN real, DIMENSION(:,:), ALLOCATABLE :: ZPS real, DIMENSION(:,:), ALLOCATABLE :: ZCO2 real, DIMENSION(:,:), ALLOCATABLE :: ZDIR real, DIMENSION(1) :: ZCOEF real, DIMENSION(1) :: ZF1_o_B real, DIMENSION(1,1) :: ZTDIR_SW real, DIMENSION(1,1) :: ZTSCA_SW real :: ZTIME_BEG real :: ZTIME character(len=*), parameter :: T_ROOF1 = 'output/T_ROOF1.txt' character(len=*), parameter :: T_CANYON = 'output/T_CANYON.txt' character(len=*), parameter :: T_ROAD1 = 'output/T_ROAD1.txt' character(len=*), parameter :: T_FLOOR1 = 'output/T_FLOOR1.txt' character(len=*), parameter :: T_MASS1 = 'output/T_MASS1.txt' character(len=*), parameter :: T_WALLA1 = 'output/T_WALLA1.txt' character(len=*), parameter :: T_WALLB1 = 'output/T_WALLB1.txt' character(len=*), parameter :: TI_BLD = 'output/TI_BLD.txt' character(len=*), parameter :: QI_BLD = 'output/QI_BLD.txt' character(len=*), parameter :: Q_CANYON = 'output/Q_CANYON.txt' character(len=*), parameter :: U_CANYON = 'output/U_CANYON.txt' character(len=*), parameter :: H_TOWN = 'output/H_TOWN.txt' character(len=*), parameter :: LE_TOWN = 'output/LE_TOWN.txt' character(len=*), parameter :: RN_TOWN = 'output/RN_TOWN.txt' character(len=*), parameter :: HVAC_COOL = 'output/HVAC_COOL.txt' character(len=*), parameter :: HVAC_HEAT = 'output/HVAC_HEAT.txt' character(len=*), parameter :: COP = 'output/COP.txt' character(len=*), parameter :: DIR_CANYON = 'output/DIR_CANYON.txt' character(len=*), parameter :: ALB_TOWN = 'output/ALB_TOWN.txt' character(len=*), parameter :: EMIS_TOWN = 'output/EMIS_TOWN.txt' character(len=*), parameter :: EVAP_TOWN = 'output/EVAP_TOWN.txt' character(len=*), parameter :: GFLUX_TOWN = 'output/GFLUX_TOWN.txt' character(len=*), parameter :: TS_TOWN = 'output/TS_TOWN.txt' character(len=*), parameter :: Q_TOWN = 'output/Q_TOWN.txt' character(len=*), parameter :: USTAR_TOWN = 'output/USTAR_TOWN.txt' character(len=*), parameter :: THER_PROD_PANEL = 'output/THER_PROD_PANEL.txt' character(len=*), parameter :: PHOT_PROD_PANEL = 'output/PHOT_PROD_PANEL.txt' character(len=*), parameter :: QF_TOWN = 'output/QF_TOWN.txt' character(len=*), parameter :: DQS_TOWN = 'output/DQS_TOWN.txt' character(len=*), parameter :: SWD = 'output/SWD.txt' character(len=*), parameter :: SWU = 'output/SWU.txt' character(len=*), parameter :: LWD = 'output/LWD.txt' character(len=*), parameter :: LWU = 'output/LWU.txt' character(len=*), parameter :: Forc_TA = 'output/Forc_TA.txt' character(len=*), parameter :: Forc_PS = 'output/Forc_PS.txt' character(len=*), parameter :: Forc_QA = 'output/Forc_QA.txt' character(len=*), parameter :: Forc_WIND = 'output/Forc_WIND.txt' character(len=*), parameter :: Forc_RAIN = 'output/Forc_RAIN.txt' character(len=*), parameter :: Forc_SNOW = 'output/Forc_SNOW.txt' integer :: ID_FORC real, DIMENSION(1) :: ZSUMZEN real, DIMENSION(1) :: ZSW real :: ZBEGIN_TRAFFIC_TIME real :: ZEND_TRAFFIC_TIME integer :: IYEAR2 integer :: IMONTH2 integer :: IDAY2 real :: ZTIME2 logical :: exist logical :: NO_OUTPUT Source Code PROGRAM DRIVER ! ====================================================================== ! ! ...................................................................... !  METHOD ! ...................................................................... ! ! Program designed to create, modify, and test TEB routines before being ! actually implemented into another driver or model (e.g. SURFEX or in an ! atmospheric model) ! ! Using just TEB physical routines, new arguments can be created or ! eliminated as local variables in Driver. ! ! ! Notes: ! The current version of Driver does not include the option TEB_CANOPY. ! Outputs have to be declared in Driver. ! !    AUTHOR ! !\tB. Bueno, Meteo-France ! !    MODIFICATIONS ! !      Original    08/12/10 !      Modification   04/13 (V. Masson) adds garden     (with a proxi SVAT) !                                            greenroofs (with a proxi SVAT) !                                            road orientation option !                                            separated walls option !      Modification   10/13 (V. Masson) adds irrigation and solar panels ! --------------------------------------------------------------- ! Modules ! --------------------------------------------------------------- ! USE MODD_CSTS , ONLY : XCPD , XSTEFAN , XPI , XDAY , XKARMAN , & XLVTT , XLSTT , XLMTT , XRV , XRD , XG , XP00 USE MODD_SURF_ATM , ONLY : XCISMIN , XVMODMIN , LALDTHRES , XRIMAX USE MODD_SURF_PAR , ONLY : XUNDEF USE MODD_TYPE_DATE_SURF USE MODE_THERMOS USE MODD_REPROD_OPER , ONLY : CQSAT ! !USE MODI_INIT_SURFCONSPHY USE MODI_INI_CSTS USE MODI_ADD_FORECAST_TO_DATE_SURF USE MODI_SUNPOS USE MODI_OL_READ_ATM USE MODI_OL_ALLOC_ATM USE MODI_OL_TIME_INTERP_ATM USE MODI_TEB_GARDEN_STRUCT USE MODI_WINDOW_DATA_STRUCT USE MODI_BEM_MORPHO_STRUCT USE MODI_CIRCUMSOLAR_RAD USE MODI_OPEN_CLOSE_BIN_ASC_FORC ! USE MODD_FORC_ATM , ONLY : CSV ,& ! name of all scalar variables XDIR_ALB ,& ! direct albedo for each band XSCA_ALB ,& ! diffuse albedo for each band XEMIS ,& ! emissivity XTSRAD ,& ! radiative temperature XTSUN ,& ! solar time (s from midnight) XZS ,& ! orography               (m) XZREF ,& ! height of T,q forcing   (m) XUREF ,& ! height of wind forcing  (m) XTA ,& ! air temperature forcing (K) XQA ,& ! air humidity forcing    (kg/m3) XSV ,& ! scalar variables XU ,& ! zonal wind              (m/s) XV ,& ! meridian wind           (m/s) XDIR_SW ,& ! direct  solar radiation (on horizontal surf.) XSCA_SW ,& ! diffuse solar radiation (on horizontal surf.) XSW_BANDS ,& ! mean wavelength of each shortwave band (m) XZENITH ,& ! zenithal angle  (radian from the vertical) XZENITH2 ,& ! zenithal angle  (radian from the vertical) XAZIM ,& ! azimuthal angle (radian from North, clockwise) XLW ,& ! longwave radiation (on horizontal surf.) XPS ,& ! pressure at atmospheric model surface (Pa) XPA ,& ! pressure at forcing level      (Pa) XRHOA ,& ! density at forcing level       (kg/m3) XCO2 ,& ! CO2 concentration in the air   (kg/m3) XSNOW ,& ! snow precipitation             (kg/m2/s) XRAIN ,& ! liquid precipitation           (kg/m2/s) XSFTH ,& ! flux of heat                   (W/m2) XSFTQ ,& ! flux of water vapor            (kg/m2/s) XSFU ,& ! zonal momentum flux            (m/s) XSFV ,& ! meridian momentum flux         (m/s) XSFCO2 ,& ! flux of CO2                    (kg/m2/s) XSFTS ,& ! flux of scalar var.            (kg/m2/s) XPEW_A_COEF ,& ! implicit coefficients XPEW_B_COEF ,& ! XPET_A_COEF ,& XPEQ_A_COEF ,& XPET_B_COEF ,& XPEQ_B_COEF USE PROXI_SVAT_CONSTS , ONLY : VEG_ALB , VEG_EMIS , GARDEN_BR , GREENROOF_BR ! IMPLICIT NONE ! --------------------------------------------------------------- ! Namelist: Add to allow parameters to be changed dynamically using !           namelist file. ! --------------------------------------------------------------- ! namelist / dimensions / NROOF_LAYER , NROAD_LAYER , NWALL_LAYER , NFLOOR_LAYER namelist / parameters / XTSTEP_SURF , IYEAR , IMONTH , IDAY , ZTIME_START , ZLON , ZLAT ,& INB_STEP_ATM , INB_ATM , KSW , ZZREF , CBEM , HROAD_DIR ,& HWALL_OPT , LGARDEN , LGREENROOF , ZFRAC_GR , LSOLAR_PANEL ,& ZFRAC_PANEL , LPAR_RD_IRRIG , CCOOL_COIL ,& CHEAT_COIL , HZ0H , ZZ0 , ZBLD , ZGARDEN , ZBLD_HEIGHT ,& ZWALL_O_HOR , ZROAD_DIR , ZALB_ROOF , ZEMIS_ROOF ,& ZHC_ROOF , ZTC_ROOF , ZD_ROOF , ZALB_ROAD , ZEMIS_ROAD ,& ZHC_ROAD , ZTC_ROAD , ZD_ROAD , ZALB_WALL , ZEMIS_WALL , ZHC_WALL ,& ZTC_WALL , ZD_WALL , ZHC_FLOOR , ZTC_FLOOR , ZD_FLOOR , ZH_TRAFFIC ,& ZLE_TRAFFIC , ZH_INDUSTRY , ZLE_INDUSTRY , ZRD_START_MONTH , ZRD_END_MONTH ,& ZRD_START_HOUR , ZRD_END_HOUR , ZRD_24H_IRRIG , ZEMIS_PANEL , ZALB_PANEL ,& ZEFF_PANEL , ZRESIDENTIAL , ZDT_RES , ZDT_OFF , PFLOOR_HEIGHT , ZINF , ZQIN ,& ZQIN_FRAD , ZQIN_FLAT , ZGR , ZSHGC , PU_WIN , ZSHADE , ZSHGC_SH ,& ZNATVENT , ZV_VENT , ZF_WATER_COND , ZF_WASTE_CAN , ZTCOOL_TARGET , ZTHEAT_TARGET ,& ZHR_TARGET , ZEFF_HEAT , ZCAP_SYS_HEAT , ZCAP_SYS_RAT , ZT_ADP , ZM_SYS_RAT ,& ZCOP_RAT , CCH_BEM , ZROUGH_ROOF , ZROUGH_WALL , ZT_ROAD , ZT_ROOF , ZT_WALL ,& ZT_FLOOR , ZT_MASS , ZTI_BLD , ZT_CANYON , ZT_WIN1 , ZT_WIN2 , ZQ_CANYON , ZQI_BLD , & VEG_ALB , VEG_EMIS , GARDEN_BR , GREENROOF_BR , NO_OUTPUT ! --------------------------------------------------------------- ! Declarations of local variables (INPUTS) ! --------------------------------------------------------------- ! ! Simulation - prepared for CAPITOUL atmospheric forcing REAL :: XTSTEP_SURF INTEGER :: IYEAR ! Current year (UTC) INTEGER :: IMONTH ! Current month (UTC) INTEGER :: IDAY ! Current day (UTC) REAL :: ZTIME_START ! Time at start of the run (s) REAL , DIMENSION ( 1 ) :: ZLON ! Longitude (deg) REAL , DIMENSION ( 1 ) :: ZLAT ! Latitude (deg) INTEGER :: INB_STEP_ATM ! Forcing time-steps INTEGER :: INB_ATM ! number time the driver calls the TEB !                                ! routines during a forcing time-step !                                ! --> it defines the time-step for TEB INTEGER :: KSW ! number of spectral bands in SW forcing REAL , DIMENSION ( 1 ) :: ZZREF ! Atm. Forcing height above roof level ! ! GO TO LINE 550 FOR MORE INPUTS ! ! ---------------------------------------------------------------------               ! ||   || ! declarations of local variables (PARAMETERS)                                        ! ||   || ! ---------------------------------------------------------------------               ! ||   || !                                                                                     ! ||   || REAL , DIMENSION ( 1 ) :: ZTI_BLD ! indoor air temperature                          ! ||   || REAL , DIMENSION ( 1 ) :: ZT_CANYON ! air canyon temperature                          ! ||   || REAL , DIMENSION ( 1 ) :: ZQA_KGKG ! air humidity at forcing level (kg/kg)           ! || G || REAL :: ZTIMEC = 0.0 ! Current duration since start of the run(s)      ! || O || INTEGER :: JFORC_STEP ! atmospheric loop index                          ! ||   || INTEGER :: JSURF_STEP ! Driver loop index                               ! || B || INTEGER :: JLOOP ! loop counter                                    ! || E || INTEGER :: NWALL_LAYER ! number of wall layers                           ! || L || INTEGER :: NROOF_LAYER ! number of roof layers                           ! || O || INTEGER :: NROAD_LAYER ! number of road layers                           ! || W || INTEGER :: NFLOOR_LAYER ! number of floor layers                          ! ||   || TYPE ( DATE_TIME ) :: TPTIME ! ||   || CHARACTER ( LEN = 3 ) :: HIMPLICIT_WIND = 'NEW' ! Implicitation option for wind fluxes      ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZHC_WALL ! Heat capacity        of wall layers    ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZTC_WALL ! Thermal conductivity of wall layers    ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZD_WALL ! Thickness            of wall layers    !\\\\     // REAL , DIMENSION (:,:), ALLOCATABLE :: ZHC_ROOF ! Heat capacity        of roof layers    ! \\\\   // REAL , DIMENSION (:,:), ALLOCATABLE :: ZTC_ROOF ! Thermal conductivity of roof layers    !  \\\\ // REAL , DIMENSION (:,:), ALLOCATABLE :: ZD_ROOF ! Thickness            of roof layers    !   \\\\/ REAL , DIMENSION (:,:), ALLOCATABLE :: ZHC_ROAD ! Heat capacity        of road layers    ! REAL , DIMENSION (:,:), ALLOCATABLE :: ZTC_ROAD ! Thermal conductivity of road layers    ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZD_ROAD ! Thickness            of road layers    ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZT_ROAD ! road layers temperatures               ! || F || REAL , DIMENSION (:,:), ALLOCATABLE :: ZT_ROOF ! roof layers temperatures               ! || O || REAL , DIMENSION (:,:), ALLOCATABLE :: ZT_WALL ! wall layers temperatures (wall 'A')    ! || R || REAL , DIMENSION (:,:), ALLOCATABLE :: ZT_WALL_B ! wall layers temperatures (wall 'B')    ! ||   || REAL , DIMENSION ( 1 ) :: ZROAD_DIR ! road direction (° from North, clockwise)    ! || U || REAL , DIMENSION ( 1 ) :: ZFRAC_GR ! fraction of greenroofs on roofs             ! || R || REAL , DIMENSION ( 1 ) :: ZFRAC_PANEL ! fraction of solar panels on roofs           ! || B || ! || A || !* snow variables                                                                     ! || N || CHARACTER ( LEN = 3 ) :: HSNOW_ROOF = \"1-L\" ! Option for roof snow                        ! ||   || REAL , DIMENSION ( 1 , 1 ) :: ZWSNOW_ROOF = 0. ! Initial Amount      of roof snow reservoir  ! || P || REAL , DIMENSION ( 1 , 1 ) :: ZTSNOW_ROOF ! layer temperature   of roof snow            ! || A || REAL , DIMENSION ( 1 , 1 ) :: ZRSNOW_ROOF ! density             of roof snow            ! || R || REAL , DIMENSION ( 1 ) :: ZTSSNOW_ROOF ! surface temperature of roof snow            ! || A || CHARACTER ( LEN = 3 ) :: HSNOW_ROAD = \"1-L\" ! Option for road snow                        ! || M || REAL , DIMENSION ( 1 , 1 ) :: ZWSNOW_ROAD = 0. ! Initial amount      of road snow reservoir  ! || E || REAL , DIMENSION ( 1 , 1 ) :: ZTSNOW_ROAD ! layer temperature   of road snow            ! || T || REAL , DIMENSION ( 1 , 1 ) :: ZRSNOW_ROAD ! density             of road snow            ! || E || REAL , DIMENSION ( 1 ) :: ZTSSNOW_ROAD ! surface temperature of road snow            ! || R || !* radiative variables                                                                ! || S || REAL , DIMENSION ( 1 ) :: ZALB_WALL ! albedo of walls                             ! ||   || REAL , DIMENSION ( 1 ) :: ZEMIS_WALL ! emissivity of walls                         ! ||   || REAL , DIMENSION ( 1 ) :: ZALB_ROOF ! albedo of roofs                             !\\\\     // REAL , DIMENSION ( 1 ) :: ZEMIS_ROOF ! emissivity of roofs                         ! \\\\   // REAL , DIMENSION ( 1 ) :: ZESNOW_ROAD ! road snow emissivity                        !  \\\\ // REAL , DIMENSION ( 1 ) :: ZALB_ROAD ! albedo of roads                             !   \\\\/ REAL , DIMENSION ( 1 ) :: ZEMIS_ROAD ! emissivity of roads                         ! REAL , DIMENSION ( 1 ) :: ZASNOW_ROOF ! roof snow albedo                            ! ||   || REAL , DIMENSION ( 1 ) :: ZASNOW_ROAD ! road snow albedo                            ! || A || REAL , DIMENSION ( 1 ) :: ZABS_SW_ROOF ! Shortwave radiation absorbed by roofs       ! || N || REAL , DIMENSION ( 1 ) :: ZABS_SW_ROAD ! Shortwave radiation absorbed by roads       ! || D || REAL , DIMENSION ( 1 ) :: ZABS_SW_WALL_A ! Shortwave radiation absorbed by wall A      ! ||   || REAL , DIMENSION ( 1 ) :: ZABS_SW_WALL_B ! Shortwave radiation absorbed by wall B      ! || T || REAL , DIMENSION ( 1 ) :: ZABS_SW_GARDEN ! Shortwave radiation absorbed by gardens     ! || E || REAL , DIMENSION ( 1 ) :: ZABS_SW_GREENROOF ! Shortwave radiation absorbed by greenroofs  ! || B || REAL , DIMENSION ( 1 ) :: ZABS_LW_ROOF ! Longwave  radiation absorbed by roofs       ! ||   || REAL , DIMENSION ( 1 ) :: ZABS_LW_ROAD ! Longwave  radiation absorbed by roads       ! || O || REAL , DIMENSION ( 1 ) :: ZABS_LW_WALL_A ! Longwave  radiation absorbed by wall A      ! || P || REAL , DIMENSION ( 1 ) :: ZABS_LW_WALL_B ! Longwave  radiation absorbed by wall B      ! || T || REAL , DIMENSION ( 1 ) :: ZABS_LW_GARDEN ! Longwave  radiation absorbed by gardens     ! || I || REAL , DIMENSION ( 1 ) :: ZABS_LW_GREENROOF ! Longwave  radiation absorbed by greenroofs  ! || O || REAL , DIMENSION ( 1 ) :: ZABS_SW_SNOW_ROOF ! Shortwave radiation absorbed by roof snow   ! || N || REAL , DIMENSION ( 1 ) :: ZABS_SW_SNOW_ROAD ! Shortwave radiation absorbed by road snow   ! || S || REAL , DIMENSION ( 1 ) :: ZABS_SW_PANEL ! Shortwave radiation absorbed by solar panels   ! ||   || REAL , DIMENSION ( 1 ) :: ZABS_LW_PANEL ! Longwave  radiation absorbed by solar panels   ! ||   || REAL , DIMENSION ( 1 ) :: ZDIR_ALB_TOWN ! town direct albedo                             ! ||   || REAL , DIMENSION ( 1 ) :: ZSCA_ALB_TOWN ! town scaterred albedo                          ! ||   || REAL , DIMENSION ( 1 ) :: ZCAN_HW_RATIO ! canyon    h/W                                  ! ||   || REAL , DIMENSION ( 1 ) :: ZSVF_ROAD ! road sky view factor                           ! ||   || REAL , DIMENSION ( 1 ) :: ZSVF_GARDEN ! garden sky view factor                         ! ||   || REAL , DIMENSION ( 1 ) :: ZSVF_WALL ! wall sky view factor                           ! ||   || REAL , DIMENSION ( 1 ) :: ZWAKE ! reduction of average wind speed                ! ||   || REAL , DIMENSION ( 1 ) :: ZGSNOW_ROOF = 0.0 ! roof snow conduction                       !\\\\     // REAL , DIMENSION ( 1 ) :: ZHSNOW_ROOF ! \\\\   // ! Anthropogenic heat fluxes                                                           !  \\\\ // REAL , DIMENSION ( 1 ) :: ZH_TRAFFIC ! heat fluxes due to traffic                   !   \\\\/ REAL , DIMENSION ( 1 ) :: ZLE_TRAFFIC ! heat fluxes due to traffic                   ! REAL , DIMENSION ( 1 ) :: XH_TRAFFIC ! heat fluxes due to traffic                   !   \\\\/ REAL , DIMENSION ( 1 ) :: XLE_TRAFFIC ! heat fluxes due to traffic REAL , DIMENSION ( 1 ) :: ZH_INDUSTRY ! heat fluxes due to factories                 ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_INDUSTRY ! heat fluxes due to factories                 ! ||   || ! Urban options                                                                       ! ||   || LOGICAL :: LPAR_RD_IRRIG ! Flag for road watering                       ! || S || LOGICAL :: LSOLAR_PANEL ! Flag to use a solar panels on roofs          ! || P || LOGICAL :: LGARDEN ! Flag to use a vegetation scheme in gardens   ! || E || LOGICAL :: LGREENROOF ! Flag to use a green roofs scheme             ! || C || CHARACTER ( LEN = 6 ) :: HZ0H ! TEB option for z0h roof & road               ! || I || CHARACTER ( LEN = 4 ) :: HROAD_DIR ! road direction option :                      ! || F || !                                      ! 'UNIF' : uniform roads                       ! || I || !                                      ! 'ORIE' : specified road orientation          ! || C || CHARACTER ( LEN = 4 ) :: HWALL_OPT ! Wall option                                  ! || A || !                                      ! 'UNIF' : uniform walls                       ! || T || !                                      ! 'TWO ' : 2 opposite  walls                   ! || I || ! Canyon geometry                                                                     ! || O || REAL , DIMENSION ( 1 ) :: ZZ0 ! Roughness length (m)                         ! || N || REAL , DIMENSION ( 1 ) :: ZBLD ! Horizontal building area density             ! || S || REAL , DIMENSION ( 1 ) :: ZGARDEN ! fraction of GARDEN areas                     ! ||   || REAL , DIMENSION ( 1 ) :: ZBLD_HEIGHT ! Canyon height (m)                            ! ||   || REAL , DIMENSION ( 1 ) :: ZWALL_O_HOR ! Vertical to horizonal surf ratio             ! ||   || ! Urban variables                                                                     ! ||   || REAL , DIMENSION ( 1 ) :: ZU_CANYON = 1.0 ! hor. wind in canyon                          ! ||   || REAL , DIMENSION ( 1 ) :: ZQ_CANYON ! canyon air specific humidity     (kg/kg)     ! ||   || REAL , DIMENSION ( 1 ) :: ZDIR_CANYON ! canyon wind direction                        ! ||   || REAL , DIMENSION ( 1 ) :: ZTS_ROOF ! surface temperature                          ! ||   || REAL , DIMENSION ( 1 ) :: ZTS_ROAD ! surface temperature                          !\\\\     // REAL , DIMENSION ( 1 ) :: ZTS_WALL_A ! surface temperature                          ! \\\\   // REAL , DIMENSION ( 1 ) :: ZTS_WALL_B ! surface temperature                          !  \\\\ // !                                                                                     !   \\\\/ REAL , DIMENSION ( 1 ) :: ZZ_LOWCAN ! altitude of air layer above road             ! REAL , DIMENSION ( 1 ) :: ZT_LOWCAN ! temperature of air above road                ! ||   || REAL , DIMENSION ( 1 ) :: ZU_LOWCAN ! wind above road                              ! ||   || REAL , DIMENSION ( 1 ) :: ZQ_LOWCAN ! humidity above road                          ! ||   || REAL , DIMENSION ( 1 ) :: ZEXNS ! surface exner function                       ! ||   || REAL , DIMENSION ( 1 ) :: ZEXNA ! exner function                               ! ||   || REAL , DIMENSION ( 1 ) :: ZROAD ! fraction of roads                            ! ||   || REAL , DIMENSION ( 1 ) :: ZWS_ROOF = 0. ! roof water content (kg/m2)                   ! ||   || REAL , DIMENSION ( 1 ) :: ZWS_ROAD = 0. ! road water content (kg/m2)                   ! ||   || REAL , DIMENSION ( 1 ) :: ZPEW_A_COEF ! implicit coefficients                        ! ||   || REAL , DIMENSION ( 1 ) :: ZPEW_B_COEF ! for wind coupling                            ! ||   || REAL , DIMENSION ( 1 ) :: ZPEW_A_COEF_LOWCAN !                                             ! ||   || REAL , DIMENSION ( 1 ) :: ZPEW_B_COEF_LOWCAN !                                             ! ||   || REAL , DIMENSION ( 1 ) :: ZWALL_O_GRND ! Wall to ground surface ratio                 ! ||   || REAL , DIMENSION ( 1 ) :: ZROAD_O_GRND ! Road to ground surface ratio                 ! ||   || REAL , DIMENSION ( 1 ) :: ZGARDEN_O_GRND ! Garden to ground surface ratio               ! ||   || REAL , DIMENSION ( 1 ) :: ZVMOD ! Module of wind speed at the top of the canyon! ||   || REAL , DIMENSION ( 1 ) :: ZCD ! drag coefficient                             ! ||   || REAL , DIMENSION ( 1 ) :: ZCDN ! neutral drag coefficient                     ! ||   || REAL , DIMENSION ( 1 ) :: ZAC_ROAD ! road aerodynamical conductance               ! ||   || REAL , DIMENSION ( 1 ) :: ZAC_ROAD_WAT ! road aerodynamical conductance (for water)   ! ||   || REAL , DIMENSION ( 1 ) :: ZAC_GARDEN ! garden aerodynamical conductance             !\\\\     // REAL , DIMENSION ( 1 ) :: ZAC_GARDEN_WAT ! garden aerodynamical conductance for vapor   ! \\\\   // REAL , DIMENSION ( 1 ) :: ZAC_GREENROOF ! green roofs aerodynamical conductance        !  \\\\ // REAL , DIMENSION ( 1 ) :: ZAC_GREENROOF_WAT ! green roofs aerodynamical conductance        !   \\\\/ !                                      ! for vapor                                    ! REAL , DIMENSION ( 1 ) :: ZUW_ROOF ! Momentum flux for roofs                      ! ||   || REAL , DIMENSION ( 1 ) :: ZDUWDU_GRND ! d(u'w')/du for ground                        ! ||   || REAL , DIMENSION ( 1 ) :: ZDUWDU_ROOF ! d(u'w')/du for roof                          ! ||   || REAL , DIMENSION ( 1 ) :: ZUSTAR_TOWN ! Fraction velocity for town                   ! ||   || REAL , DIMENSION ( 1 ) :: ZRESA_TOWN ! Aerodynamical resistance                     ! ||   || REAL , DIMENSION ( 1 ) :: ZCH_TOWN ! Heat exchange coefficient                    ! ||   || REAL , DIMENSION ( 1 ) :: ZRI_TOWN ! Richardson number                            ! ||   || REAL , DIMENSION ( 1 ) :: ZRUNOFF_TOWN ! runoff for town                              ! ||   || REAL , DIMENSION ( 1 ) :: ZRUNOFF_ROOF ! runoff for roof                              ! ||   || REAL , DIMENSION ( 1 ) :: ZRUNOFF_ROAD ! runoff for road                              ! ||   || ! Road-wall-budget routines                                                           ! ||   || REAL , DIMENSION ( 1 ) :: ZGSNOW_ROAD = 0.0 ! road snow conduction                         ! ||   || ! Urban fluxes variables                                                              ! ||   || REAL , DIMENSION ( 1 ) :: ZROOF_FRAC ! roof, wall,                                  ! ||   || REAL , DIMENSION ( 1 ) :: ZWALL_FRAC ! road, and green area                         ! ||   || REAL , DIMENSION ( 1 ) :: ZROAD_FRAC ! fractions                                    ! ||   || REAL , DIMENSION ( 1 ) :: ZGARDEN_FRAC ! fractions                                    ! ||   || REAL , DIMENSION ( 1 ) :: ZTOTS_O_HORS ! total canyon+roof surf over horizontal surf  ! ||   || REAL , DIMENSION ( 1 ) :: ZUW_GRND ! friction flux over ground                    ! ||   || REAL , DIMENSION ( 1 ) :: ZRN_ROOF ! net radiation over roof                      ! ||   || REAL , DIMENSION ( 1 ) :: ZH_ROOF ! sensible heat flux over roof                 ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_ROOF ! latent heat flux over roof                   !\\\\     // REAL , DIMENSION ( 1 ) :: ZGFLUX_ROOF ! flux through the roof                        ! \\\\   // REAL , DIMENSION ( 1 ) :: ZRN_ROAD ! net radiation over road                      !  \\\\ // REAL , DIMENSION ( 1 ) :: ZH_ROAD ! sensible heat flux over road                 !   \\\\/ REAL , DIMENSION ( 1 ) :: ZLE_ROAD ! latent heat flux over road                   ! REAL , DIMENSION ( 1 ) :: ZGFLUX_ROAD ! flux through the road                        ! ||   || REAL , DIMENSION ( 1 ) :: ZRN_WALL_A ! net radiation over wall                      ! ||   || REAL , DIMENSION ( 1 ) :: ZRN_WALL_B ! net radiation over wall                      ! ||   || REAL , DIMENSION ( 1 ) :: ZH_WALL_A = 0.0 ! sensible heat flux over wall                 ! ||   || REAL , DIMENSION ( 1 ) :: ZH_WALL_B = 0.0 ! sensible heat flux over wall                 ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_WALL_A ! latent heat flux over wall                   ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_WALL_B ! latent heat flux over wall                   ! ||   || REAL , DIMENSION ( 1 ) :: ZGFLUX_WALL_A ! flux through the wall                        ! ||   || REAL , DIMENSION ( 1 ) :: ZGFLUX_WALL_B ! flux through the wall                        ! ||   || ! ||   || REAL , DIMENSION ( 1 ) :: ZG_GREENROOF_ROOF ! heat flux between base of greenroof          ! ||   || !                                      ! and structural roof                          ! ||   || ! ||   || REAL , DIMENSION ( 1 ) :: ZRNSNOW_ROOF = 0.0 ! net radiation over snow                    ! ||   || REAL , DIMENSION ( 1 ) :: ZRNSNOW_ROAD = 0.0 ! net radiation over snow                    ! ||   || REAL , DIMENSION ( 1 ) :: ZHSNOW_ROAD = 0.0 ! sensible heat flux over snow               ! ||   || REAL , DIMENSION ( 1 ) :: ZLESNOW_ROAD = 0.0 ! latent heat flux over snow                 ! ||   || REAL , DIMENSION ( 1 ) :: ZRN_BLT ! net radiation over built covers            ! ||   || REAL , DIMENSION ( 1 ) :: ZH_BLT ! sensible heat flux over built covers       ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_BLT ! latent heat flux over built covers         !\\\\     // REAL , DIMENSION ( 1 ) :: ZGFLUX_BLT ! flux through the built covers              ! \\\\   // REAL , DIMENSION ( 1 ) :: ZFLX_BLD ! heat flx from bld to its structure         !  \\\\ // REAL , DIMENSION ( 1 ) :: ZDQS_TOWN ! storage inside town materials              !   \\\\/ REAL , DIMENSION ( 1 ) :: ZQF_TOWN ! total anthropogenic heat                   ! REAL , DIMENSION ( 1 ) :: ZMELT_ROOF = 0.0 ! snow melting on roof                       ! ||   || REAL , DIMENSION ( 1 ) :: ZMELT_ROAD = 0.0 ! snow melting on road                       ! ||   || REAL , DIMENSION ( 1 ) :: ZQF_BLD ! ||   || REAL , DIMENSION ( 1 ) :: ZSFCO2 ! Surface Flux of CO2                        ! ||   || !                                                                                     ! ||   || ! new arguments created after BEM                                                     ! ||   || !                                                                                     ! ||   || CHARACTER ( LEN = 3 ) :: CBEM ! Building Energy model 'DEF' or 'BEM'       ! ||   || CHARACTER ( LEN = 12 ) :: CCOOL_COIL ! option for cooling device type             ! ||   || CHARACTER ( LEN = 6 ) :: CHEAT_COIL ! option for heating device type             ! ||   || REAL , DIMENSION ( 1 ) :: ZF_WATER_COND ! fraction of evaporation for the condensers ! ||   || CHARACTER ( LEN = 4 ), DIMENSION ( 1 ) :: HNATVENT ! ||   || REAL , DIMENSION ( 1 ) :: ZNATVENT ! flag to describe surventilation system for ! ||   || !                                        ! i/o 0 for NONE, 1 for MANU and 2 for AUTO  ! ||   || REAL , DIMENSION ( 1 ) :: ZAUX_MAX = 5. ! Auxiliar variable for autosize calcs (not used)! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZT_FLOOR ! Floor layers temperatures [K]         ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZT_MASS ! Internal mass layers temperatures [K] ! ||   || REAL , DIMENSION ( 1 ) :: PFLOOR_HEIGHT ! Floor height (m)                           ! ||   || REAL , DIMENSION ( 1 ) :: ZH_BLD_COOL ! Sensible cooling energy demand             ! ||   || ! of the building [W m-2(bld)]               ! ||   || REAL , DIMENSION ( 1 ) :: ZT_BLD_COOL ! Total cooling energy demand                ! ||   || ! of the building [W m-2(bld)]               ! ||   || REAL , DIMENSION ( 1 ) :: ZH_BLD_HEAT ! Heating energy demand                      ! ||   || ! of the building [W m-2(bld)]               ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_BLD_COOL ! Latent cooling energy demand               !\\\\     // ! of the building [W m-2(bld)]               ! \\\\   // REAL , DIMENSION ( 1 ) :: ZLE_BLD_HEAT ! Latent heating energy demand               !  \\\\ // ! of the building [W m-2(bld)]               !   \\\\/ REAL , DIMENSION ( 1 ) :: ZH_WASTE ! Sensible waste heat from HVAC system       ! ! [W m-2(tot)]                               ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_WASTE ! Latent waste heat from HVAC system         ! ||   || ! [W m-2(tot)]                               ! ||   || REAL , DIMENSION ( 1 ) :: ZF_WASTE_CAN ! fraction of waste heat released            ! ||   || !                                        ! into the canyon                            ! ||   || REAL , DIMENSION ( 1 ) :: ZHVAC_COOL ! Energy consumption of the cooling system   ! ||   || ! [W m-2(bld)]                               ! ||   || REAL , DIMENSION ( 1 ) :: ZHVAC_HEAT ! Energy consumption of the heating system   ! ||   || ! [W m-2(bld)]                               ! ||   || REAL , DIMENSION ( 1 ) :: ZHVAC_COOL_TOT ! Energy consumption of the cooling system   ! ||   || ! [W m-2(tot)]                               ! ||   || REAL , DIMENSION ( 1 ) :: ZHVAC_HEAT_TOT ! Energy consumption of the heating system   ! ||   || ! [W m-2(tot)]                               ! ||   || REAL , DIMENSION ( 1 ) :: ZQIN ! Internal heat gains [W m-2(floor)]         ! ||   || REAL , DIMENSION ( 1 ) :: ZQIN_FRAD ! Radiant fraction of internal heat gains    ! ||   || REAL , DIMENSION ( 1 ) :: ZQIN_FLAT ! Latent franction of internal heat gains    ! ||   || REAL , DIMENSION ( 1 ) :: ZGR ! Glazing ratio                              ! ||   || REAL , DIMENSION ( 1 ) :: ZEFF_HEAT ! Efficiency of the heating system           ! ||   || REAL , DIMENSION ( 1 ) :: ZINF ! Infiltration flow rate [AC/H]              ! ||   || REAL , DIMENSION ( 1 ) :: ZTCOOL_TARGET ! Cooling setpoint of HVAC system [K]        ! ||   || REAL , DIMENSION ( 1 ) :: ZTHEAT_TARGET ! Heating setpoint of HVAC system [K]        ! ||   || REAL , DIMENSION ( 1 ) :: ZCUR_QIN ! Internal heat gains [W m-2(floor)]         ! ||   || REAL , DIMENSION ( 1 ) :: ZCUR_TCOOL_TARGET ! Cooling setpoint of HVAC system [K]        ! ||   || REAL , DIMENSION ( 1 ) :: ZCUR_THEAT_TARGET ! Heating setpoint of HVAC system [K]        ! ||   || REAL , DIMENSION ( 1 ) :: ZHR_TARGET ! Relative humidity setpoint                 ! ||   || REAL , DIMENSION ( 1 ) :: ZT_WIN2 ! Indoor window temperature [K]              !\\\\     // REAL , DIMENSION ( 1 ) :: ZQI_BLD ! Indoor air specific humidity [kg kg-1]     ! \\\\   // REAL , DIMENSION ( 1 ) :: ZV_VENT ! Ventilation flow rate [AC/H]               !  \\\\ // REAL , DIMENSION ( 1 ) :: ZCAP_SYS_HEAT ! Capacity of the heating system             !   \\\\/ ! [W m-2(bld)]                               ! REAL , DIMENSION ( 1 ) :: ZCAP_SYS_RAT ! Rated capacity of the cooling system       ! ||   || ! [W m-2(bld)]                               ! ||   || REAL , DIMENSION ( 1 ) :: ZT_ADP ! Apparatus dewpoint temperature of the      ! ||   || ! cooling coil [K]                           ! ||   || REAL , DIMENSION ( 1 ) :: ZM_SYS_RAT ! Rated HVAC mass flow rate                  ! ||   || ! [kg s-1 m-2(bld)]                          ! ||   || REAL , DIMENSION ( 1 ) :: ZCOP_RAT ! Rated COP of the cooling system            ! ||   || REAL , DIMENSION ( 1 ) :: ZCAP_SYS ! Actual capacity of the cooling system      ! ||   || ! [W m-2(bld)]                               ! ||   || REAL , DIMENSION ( 1 ) :: ZM_SYS ! Actual HVAC mass flow rate                 ! ||   || ! [kg s-1 m-2(bld)]                          ! ||   || REAL , DIMENSION ( 1 ) :: ZCOP ! COP of the cooling system                  ! ||   || REAL , DIMENSION ( 1 ) :: ZQ_SYS ! Supply air specific humidity [kg kg-1]     ! ||   || REAL , DIMENSION ( 1 ) :: ZT_SYS ! Supply air temperature [K]                 ! ||   || REAL , DIMENSION ( 1 ) :: ZTR_SW_WIN ! Solar radiation transmitted throught       ! ||   || ! windows [W m-2(bld)]                       ! ||   || REAL , DIMENSION ( 1 ) :: ZFAN_POWER ! HVAC fan power                             ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZHC_FLOOR ! heat capacity for floor layers       ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZTC_FLOOR ! thermal conductivity for             ! ||   || ! floor layers                         ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZD_FLOOR ! depth of floor layers                ! ||   || ! ||   || REAL , DIMENSION ( 1 ) :: ZT_WIN1 ! outdoor window temperature [K]             ! ||   || REAL , DIMENSION ( 1 ) :: ZABS_SW_WIN ! window absorbed shortwave radiation [W m-2]!\\\\     // REAL , DIMENSION ( 1 ) :: ZABS_LW_WIN ! absorbed infrared rad. [W m-2]             ! \\\\   // REAL , DIMENSION ( 1 ) :: ZSHGC ! window solar transmittance                 !  \\\\ // REAL , DIMENSION ( 1 ) :: ZSHGC_SH ! window + shading solar heat gain coef.     !   \\\\/ REAL , DIMENSION ( 1 ) :: ZUGG_WIN ! window glass-to-glass U-factro [W m-2 K-1] ! REAL , DIMENSION ( 1 ) :: ZALB_WIN ! window albedo                              ! ||   || REAL , DIMENSION ( 1 ) :: PU_WIN ! window U-factor [K m W-2]                  ! ||   || REAL , DIMENSION ( 1 ) :: ZABS_WIN ! window absortance                          ! ||   || REAL , DIMENSION ( 1 ) :: ZTRAN_WIN ! window transmittance                       ! ||   || !                                                                                     ! ||   || ! new argument for the UTCI calculation                                               ! ||   || REAL , DIMENSION ( 1 ) :: ZEMIT_LW_GRND ! LW flux emitted by the ground (W/m² ground)! ||   || REAL , DIMENSION ( 1 ) :: ZEMIT_LW_FAC ! LW flux emitted by the facade (W/m² ground)! ||   || REAL , DIMENSION ( 1 ) :: ZT_RAD_IND ! Indoor mean radiant temperature [K]        ! ||   || REAL , DIMENSION ( 1 ) :: ZREF_SW_GRND ! total solar rad reflected from ground      ! ||   || REAL , DIMENSION ( 1 ) :: ZREF_SW_FAC ! total solar rad reflected from facade      ! ||   || REAL , DIMENSION ( 1 ) :: ZHU_BLD ! Indoor relative humidity 0 < (-) < 1       ! ||   || !                                                                                     ! ||   || ! solar panels                                                                        ! ||   || REAL , DIMENSION ( 1 ) :: ZEMIS_PANEL ! Emissivity of solar panel [-]              ! ||   || REAL , DIMENSION ( 1 ) :: ZALB_PANEL ! albedo of solar panel  [-]                 ! ||   || REAL , DIMENSION ( 1 ) :: ZEFF_PANEL ! Efficiency of solar panel [-]              ! ||   || REAL , DIMENSION ( 1 ) :: ZTHER_PROD_PANEL ! Thermal      Energy production             ! ||   || !                                        !     of solar panel on roofs (W/m2 panel)   ! ||   || REAL , DIMENSION ( 1 ) :: ZPHOT_PROD_PANEL ! Photovoltaic Energy production             ! ||   || !                                        !     of solar panel on roofs (W/m2 panel)   ! ||   || REAL , DIMENSION ( 1 ) :: ZPROD_PANEL ! Averaged     Energy production             ! ||   || !                                        !     of solar panel on roofs (W/m2 panel)   ! ||   || REAL , DIMENSION ( 1 ) :: ZTHER_PROD_BLD ! Thermal      Energy production             ! ||   || !                                        !     of solar panel on roofs (W/m2 bld  )   ! ||   || REAL , DIMENSION ( 1 ) :: ZPHOT_PROD_BLD ! Photovoltaic Energy production             ! ||   || !                                        !     of solar panel on roofs (W/m2 bld  )   !\\\\     // REAL , DIMENSION ( 1 ) :: ZPROD_BLD ! Averaged     Energy production             ! \\\\   // !                                        !     of solar panel on roofs (W/m2 bld  )   !  \\\\ // REAL , DIMENSION ( 1 ) :: ZTHER_PRODC_DAY = 0. ! Present day integrated thermal production  !   \\\\/ !                                        ! of energy (J/m2 panel). zero value at start! REAL , DIMENSION ( 1 ) :: ZH_PANEL ! Sensible heat flux from solar panels       ! ||   || !                                        !     (W/m2 panel)                           ! ||   || REAL , DIMENSION ( 1 ) :: ZRN_PANEL ! Net radiation        of solar panel        ! ||   || !                                        !     (W/m2 panel)                           ! ||   || !                                                                                     ! ||   || REAL , DIMENSION ( 1 ) :: ZRESIDENTIAL ! Fraction of residential use in buildings(-)! ||   || REAL :: ZDT_RES ! target temperature change when unoccupied  ! ||   || !                                        ! (K) (residential buildings)                ! ||   || REAL :: ZDT_OFF ! target temperature change when unoccupied  ! ||   || !                                        ! (K) (office buildings)                     ! ||   || !                                                                                     ! ||   || ! road watering                                                                       ! ||   || REAL , DIMENSION ( 1 ) :: ZRD_START_MONTH ! start month for watering of roads(included)! ||   || REAL , DIMENSION ( 1 ) :: ZRD_END_MONTH ! end   month for watering of roads(included)! ||   || REAL , DIMENSION ( 1 ) :: ZRD_START_HOUR ! start hour  for watering of roads(included)! ||   || REAL , DIMENSION ( 1 ) :: ZRD_END_HOUR ! end   hour  for watering of roads(excluded)! ||   || REAL , DIMENSION ( 1 ) :: ZRD_24H_IRRIG ! 24h quantity of water used                 ! ||   || !                                        ! for road watering (liter/m2)               ! ||   || REAL , DIMENSION ( 1 ) :: ZIRRIG_ROAD ! road irrigation during current time-step   ! ||   || !                                                                                     ! ||   || ! new arguments for shading, schedule or natural ventilation                          ! ||   || LOGICAL , DIMENSION ( 1 ) :: LSHADE ! Flag to use shading devices               ! ||   || REAL , DIMENSION ( 1 ) :: ZSHADE ! flag to activate shading devices          ! ||   || !                                         ! -> REAL for i/o 0. or 1                   ! ||   || LOGICAL , DIMENSION ( 1 ) :: GSHAD_DAY ! has shading been necessary this day ?     ! ||   || LOGICAL , DIMENSION ( 1 ) :: GNATVENT_NIGHT ! has natural ventilation been              ! ||   || !                                         ! necessary/possible this night ?           ! ||   || !                                                                                     ! ||   || REAL , DIMENSION ( 1 ) :: ZN_FLOOR ! Number of floors                           ! ||   || REAL , DIMENSION ( 1 ) :: ZWALL_O_BLD ! Wall area [m2_wall/m2_bld]                 ! ||   || REAL , DIMENSION ( 1 ) :: ZGLAZ_O_BLD ! Window area [m2_win/m2_bld]                ! ||   || REAL , DIMENSION ( 1 ) :: ZMASS_O_BLD ! Mass area [m2_mass/m2_bld]                 ! ||   || REAL , DIMENSION ( 1 ) :: ZFLOOR_HW_RATIO ! H/W ratio of 1 floor level                 ! ||   || REAL , DIMENSION ( 1 ) :: ZF_FLOOR_MASS ! View factor floor-mass                     ! ||   || REAL , DIMENSION ( 1 ) :: ZF_FLOOR_WALL ! View factor floor-wall                     !\\\\     // REAL , DIMENSION ( 1 ) :: ZF_FLOOR_WIN ! View factor floor-window                   ! \\\\   // REAL , DIMENSION ( 1 ) :: ZF_FLOOR_ROOF ! View factor floor-roof                     !  \\\\ // REAL , DIMENSION ( 1 ) :: ZF_WALL_FLOOR ! View factor wall-floor                     !   \\\\/ REAL , DIMENSION ( 1 ) :: ZF_WALL_MASS ! View factor wall-mass                      ! REAL , DIMENSION ( 1 ) :: ZF_WALL_WIN ! View factor wall-win                       ! ||   || REAL , DIMENSION ( 1 ) :: ZF_WIN_FLOOR ! View factor win-floor                      ! ||   || REAL , DIMENSION ( 1 ) :: ZF_WIN_MASS ! View factor win-mass                       ! ||   || REAL , DIMENSION ( 1 ) :: ZF_WIN_WALL ! View factor win-wall                       ! ||   || REAL , DIMENSION ( 1 ) :: ZF_MASS_FLOOR ! View factor mass-floor                     ! ||   || REAL , DIMENSION ( 1 ) :: ZF_MASS_WALL ! View factor mass-wall                      ! ||   || REAL , DIMENSION ( 1 ) :: ZF_MASS_WIN ! View factor mass-window                    ! ||   || LOGICAL :: LCANOPY ! is canopy active ?                         ! ||   || CHARACTER ( LEN = 5 ) :: CCH_BEM ! TEB option for building outside conv. coef ! ||   || REAL , DIMENSION ( 1 ) :: ZROUGH_ROOF ! roof roughness coef.                       ! ||   || REAL , DIMENSION ( 1 ) :: ZROUGH_WALL ! wall roughness coef.                       ! ||   || REAL , DIMENSION ( 1 ) :: ZF_WIN_WIN ! indoor win to win view factor              ! ||   || ! ||   || ! Average urban fluxes variables                                                      ! ||   || REAL , DIMENSION ( 1 ) :: ZTS_TOWN ! town surface temperature                    ! ||   || REAL , DIMENSION ( 1 ) :: ZEMIS_TOWN ! town equivalent emissivity                  ! ||   || REAL , DIMENSION ( 1 ) :: ZALB_TOWN ! town eqivalent albedo                       ! ||   || REAL , DIMENSION ( 1 ) :: ZQ_TOWN ! town eqivalent specific humidity            ! ||   || REAL , DIMENSION ( 1 ) :: ZESNOW_ROOF = 1.0 ! snow roof emissivity                        ! ||   || REAL , DIMENSION ( 1 ) :: ZABS_LW_SNOW_ROOF ! abs. LW rad. by snow                        ! ||   || REAL , DIMENSION ( 1 ) :: ZABS_LW_SNOW_ROAD ! abs. LW rad. by snow                        ! ||   || REAL , DIMENSION ( 1 ) :: ZRN_STRLROOF ! net radiation over structural roof          ! REAL , DIMENSION ( 1 ) :: ZH_STRLROOF ! sensible heat flux over structural roof     ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_STRLROOF ! latent heat flux over structural roof       ! ||   || REAL , DIMENSION ( 1 ) :: ZGFLUX_STRLROOF ! flux through the structural roof            ! ||   || REAL , DIMENSION ( 1 ) :: ZRUNOFF_STRLROOF ! water runoff on the structural roof         ! ||   || REAL , DIMENSION ( 1 ) :: ZLEW_ROOF ! latent heat flux of snowfree roof           ! ||   || REAL , DIMENSION ( 1 ) :: ZLESNOW_ROOF ! latent heat flux over snow                  ! ||   || REAL , DIMENSION ( 1 ) :: ZLEW_ROAD ! latent heat flux of snowfree road           ! ||   || REAL , DIMENSION ( 1 ) :: ZRN_GRND ! net radiation over ground                   ! ||   || REAL , DIMENSION ( 1 ) :: ZH_GRND ! sensible heat flux over ground              ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_GRND ! latent heat flux over ground                ! ||   || REAL , DIMENSION ( 1 ) :: ZGFLUX_GRND ! flux through the ground                     ! ||   || REAL , DIMENSION ( 1 ) :: ZRN_TOWN ! net radiation over town                     ! ||   || REAL , DIMENSION ( 1 ) :: ZH_TOWN ! sensible heat flux over town                ! ||   || REAL , DIMENSION ( 1 ) :: ZLE_TOWN ! latent heat flux over town                  ! ||   || REAL , DIMENSION ( 1 ) :: ZGFLUX_TOWN ! flux through the ground for town            ! ||   || REAL , DIMENSION ( 1 ) :: ZEVAP_TOWN ! evaporation (kg/m2/s)                       ! ||   || ! Atmospheric Forcing variables                                                       ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZTA ! air temperature forcing (K)             ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZQA ! air humidity forcing (kg/m3)            ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZWIND ! wind speed (m/s)                        ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZSCA_SW ! diffuse solar radiation (on hor surf)   ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZDIR_SW ! direct  solar radiation (on hor surf)   ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZLW ! longwave radiation (on horizontal surf) ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZSNOW ! snow precipitation  (kg/m2/s)           ! ||   || REAL , DIMENSION (:,:), ALLOCATABLE :: ZRAIN ! liquid precipitation  (kg/m2/s)         !\\\\     // REAL , DIMENSION (:,:), ALLOCATABLE :: ZPS ! pressure at forcing level  (Pa)         ! \\\\   // REAL , DIMENSION (:,:), ALLOCATABLE :: ZCO2 ! CO2 concentration in the air  (kg/m3)   !  \\\\ // REAL , DIMENSION (:,:), ALLOCATABLE :: ZDIR ! wind direction                          !   \\\\/ REAL , DIMENSION ( 1 ) :: ZCOEF ! work array                              ! REAL , DIMENSION ( 1 ) :: ZF1_o_B ! Coefficient for sky model               ! ||   || REAL , DIMENSION ( 1 , 1 ) :: ZTDIR_SW ! total direct SW                         ! ||   || REAL , DIMENSION ( 1 , 1 ) :: ZTSCA_SW ! total diffuse SW                        ! ||   || REAL :: ZTIME_BEG ! Time at beginning of time step          ! ||   || REAL :: ZTIME ! Time at end       of time step          ! ||   || ! -----------------------------------------------------------                         ! ||   || ! Outputs                                                                             ! ||   || ! -----------------------------------------------------------                         ! ||   || !                                                                                     ! ||   || CHARACTER ( LEN =* ), PARAMETER :: T_ROOF1 = 'output/T_ROOF1.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: T_CANYON = 'output/T_CANYON.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: T_ROAD1 = 'output/T_ROAD1.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: T_FLOOR1 = 'output/T_FLOOR1.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: T_MASS1 = 'output/T_MASS1.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: T_WALLA1 = 'output/T_WALLA1.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: T_WALLB1 = 'output/T_WALLB1.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: TI_BLD = 'output/TI_BLD.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: QI_BLD = 'output/QI_BLD.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: Q_CANYON = 'output/Q_CANYON.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: U_CANYON = 'output/U_CANYON.txt' ! ||   || CHARACTER ( LEN =* ), PARAMETER :: H_TOWN = 'output/H_TOWN.txt' !\\\\     // CHARACTER ( LEN =* ), PARAMETER :: LE_TOWN = 'output/LE_TOWN.txt' ! \\\\   // CHARACTER ( LEN =* ), PARAMETER :: RN_TOWN = 'output/RN_TOWN.txt' !  \\\\ // CHARACTER ( LEN =* ), PARAMETER :: HVAC_COOL = 'output/HVAC_COOL.txt' !   \\\\/ CHARACTER ( LEN =* ), PARAMETER :: HVAC_HEAT = 'output/HVAC_HEAT.txt' ! CHARACTER ( LEN =* ), PARAMETER :: COP = 'output/COP.txt' ! CHARACTER ( LEN =* ), PARAMETER :: DIR_CANYON = 'output/DIR_CANYON.txt' CHARACTER ( LEN =* ), PARAMETER :: ALB_TOWN = 'output/ALB_TOWN.txt' CHARACTER ( LEN =* ), PARAMETER :: EMIS_TOWN = 'output/EMIS_TOWN.txt' CHARACTER ( LEN =* ), PARAMETER :: EVAP_TOWN = 'output/EVAP_TOWN.txt' CHARACTER ( LEN =* ), PARAMETER :: GFLUX_TOWN = 'output/GFLUX_TOWN.txt' CHARACTER ( LEN =* ), PARAMETER :: TS_TOWN = 'output/TS_TOWN.txt' CHARACTER ( LEN =* ), PARAMETER :: Q_TOWN = 'output/Q_TOWN.txt' CHARACTER ( LEN =* ), PARAMETER :: USTAR_TOWN = 'output/USTAR_TOWN.txt' CHARACTER ( LEN =* ), PARAMETER :: THER_PROD_PANEL = 'output/THER_PROD_PANEL.txt' CHARACTER ( LEN =* ), PARAMETER :: PHOT_PROD_PANEL = 'output/PHOT_PROD_PANEL.txt' CHARACTER ( LEN =* ), PARAMETER :: QF_TOWN = 'output/QF_TOWN.txt' CHARACTER ( LEN =* ), PARAMETER :: DQS_TOWN = 'output/DQS_TOWN.txt' ! CHARACTER ( LEN =* ), PARAMETER :: SWD = 'output/SWD.txt' CHARACTER ( LEN =* ), PARAMETER :: SWU = 'output/SWU.txt' CHARACTER ( LEN =* ), PARAMETER :: LWD = 'output/LWD.txt' CHARACTER ( LEN =* ), PARAMETER :: LWU = 'output/LWU.txt' ! CHARACTER ( LEN =* ), PARAMETER :: Forc_TA = 'output/Forc_TA.txt' CHARACTER ( LEN =* ), PARAMETER :: Forc_PS = 'output/Forc_PS.txt' CHARACTER ( LEN =* ), PARAMETER :: Forc_QA = 'output/Forc_QA.txt' CHARACTER ( LEN =* ), PARAMETER :: Forc_WIND = 'output/Forc_WIND.txt' CHARACTER ( LEN =* ), PARAMETER :: Forc_RAIN = 'output/Forc_RAIN.txt' CHARACTER ( LEN =* ), PARAMETER :: Forc_SNOW = 'output/Forc_SNOW.txt' INTEGER :: ID_FORC REAL , DIMENSION ( 1 ) :: ZSUMZEN REAL , DIMENSION ( 1 ) :: ZSW REAL :: ZBEGIN_TRAFFIC_TIME ! start traffic time (solar time, s) REAL :: ZEND_TRAFFIC_TIME ! end traffic time   (solar time, s) INTEGER :: IYEAR2 ! current year at end of timestep(UTC) INTEGER :: IMONTH2 ! current month at end of timestep(UTC) INTEGER :: IDAY2 ! current day at end of timestep(UTC) REAL :: ZTIME2 ! current time since start of the day at end of timestep (s) logical :: exist ! TODO: testing remove LOGICAL :: NO_OUTPUT ! Whether to output results to file !=========================================================================== ! Read from namelist file after default values are set. !=========================================================================== OPEN ( UNIT = 99 , FILE = 'input.nml' , STATUS = 'old' ) READ ( 99 , NML = dimensions ) ALLOCATE ( ZHC_ROOF ( 1 , NROOF_LAYER )) ALLOCATE ( ZTC_ROOF ( 1 , NROOF_LAYER )) ALLOCATE ( ZD_ROOF ( 1 , NROOF_LAYER )) ALLOCATE ( ZT_ROOF ( 1 , NROOF_LAYER )) ALLOCATE ( ZHC_ROAD ( 1 , NROAD_LAYER )) ALLOCATE ( ZTC_ROAD ( 1 , NROAD_LAYER )) ALLOCATE ( ZD_ROAD ( 1 , NROAD_LAYER )) ALLOCATE ( ZT_ROAD ( 1 , NROAD_LAYER )) ALLOCATE ( ZHC_WALL ( 1 , NWALL_LAYER )) ALLOCATE ( ZTC_WALL ( 1 , NWALL_LAYER )) ALLOCATE ( ZD_WALL ( 1 , NWALL_LAYER )) ALLOCATE ( ZT_WALL ( 1 , NWALL_LAYER )) ALLOCATE ( ZT_WALL_B ( 1 , NWALL_LAYER )) ALLOCATE ( ZHC_FLOOR ( 1 , NFLOOR_LAYER )) ALLOCATE ( ZTC_FLOOR ( 1 , NFLOOR_LAYER )) ALLOCATE ( ZD_FLOOR ( 1 , NFLOOR_LAYER )) ALLOCATE ( ZT_FLOOR ( 1 , NFLOOR_LAYER )) ALLOCATE ( ZT_MASS ( 1 , NFLOOR_LAYER )) READ ( 99 , NML = parametersnizializations (SYSTEM) ! ----------------------------------------------------------- ZT_WALL_B = ZT_WALL ! wall layers temperatures ! GSHAD_DAY = . FALSE . ! has shading been necessary this day ? GNATVENT_NIGHT = . FALSE . ! has natural ventilation been necessary/possible this night ? ! irrigation not supported currently LPAR_RD_IRRIG = . FALSE . ZRD_START_MONTH = 6 ZRD_END_MONTH = 6 ZRD_START_HOUR = 6 ZRD_END_HOUR = 6 ZRD_24H_IRRIG = 0 IF ( ZNATVENT ( 1 ) >= 0.0 . AND . ZNATVENT ( 1 ) < 0.5 ) THEN HNATVENT = 'NONE' ELSEIF ( ZNATVENT ( 1 ) >= 0.5 . AND . ZNATVENT ( 1 ) < 1.5 ) THEN HNATVENT = 'MANU' ELSEIF ( ZNATVENT ( 1 ) >= 1.5 . AND . ZNATVENT ( 1 ) <= 2.5 ) THEN HNATVENT = 'AUTO' ELSEIF ( ZNATVENT ( 1 ) >= 2.5 . AND . ZNATVENT ( 1 ) <= 3.5 ) THEN HNATVENT = 'MECH' ELSE HNATVENT = 'NONE' ENDIF IF ( ZSHADE ( 1 ) >= 0.0 . AND . ZSHADE ( 1 ) < 0.5 ) THEN LSHADE = . FALSE . ELSEIF ( ZSHADE ( 1 ) >= 0.5 . AND . ZSHADE ( 1 ) <= 1.0 ) THEN LSHADE = . TRUE . ELSE LSHADE = . FALSE . ENDIF ! ! coherence check IF ( (. NOT . LGREENROOF ) . AND . ZFRAC_GR ( 1 ) > 0. ) THEN print * , 'Greenroofs option   is not activated but a non-zero greenroof fraction is given' STOP END IF IF ( (. NOT . LGARDEN ) . AND . ZGARDEN ( 1 ) > 0. ) THEN print * , 'Garden     option   is not activated but a non-zero garden    fraction is given' STOP END IF IF ( ZBLD ( 1 ) + ZGARDEN ( 1 ) >= 1. ) THEN print * , 'The sum of garden and building fraction is larger than one, so road fraction is negative. Please check their values.' STOP END IF IF ( (. NOT . LSOLAR_PANEL ) . AND . ZFRAC_PANEL ( 1 ) > 0. ) THEN print * , 'Solar panels option is not activated but a non-zero solar panels fraction is given' STOP END IF IF ( (. NOT . CBEM == 'BEM' ) . AND . ZGR ( 1 ) > 0. ) THEN print * , 'Building Energy Module (BEM) is not activated but a non-zero glazing ratio is given' STOP END IF ! ! ! multi layer option LCANOPY = . FALSE . ! is canopy active ?  ** DO NOT CHANGE ** ! ! initialization of physical constants ! CALL INI_CSTS ! !CALL INIT_SURFCONSPHY ! CQSAT = 'NEW' ! saturation is computed relative to water above 0°C, and relative to ice below 0°C ! !* various thresholds ! XCISMIN = 0.5 ! minimum wind shear XVMODMIN = 0.5 ! minimum wind speed LALDTHRES = . FALSE . ! activate aladin threshold for wind XRIMAX = 0.2 ! Maximum richardson number for exchange coefficients computations ! !* Open atmospheric forcing files ! CALL OPEN_CLOSE_BIN_ASC_FORC ( 'OPEN ' , 'ASCII ' , 'R' ) ! ! allocation of variables ! CALL OL_ALLOC_ATM ( 1 , 1 , 1 ) ! INI, IBANDS, ISCAL ! ZTIME = ZTIME_START ! ! sun position at run start ! CALL SUNPOS ( IYEAR , IMONTH , IDAY , ZTIME , ZLON , ZLAT , XTSUN , XZENITH , XAZIM ) ! ! allocate local atmospheric variables ALLOCATE ( ZTA ( 1 , 2 )) ALLOCATE ( ZQA ( 1 , 2 )) ALLOCATE ( ZWIND ( 1 , 2 )) ALLOCATE ( ZDIR_SW ( 1 , 2 )) ALLOCATE ( ZSCA_SW ( 1 , 2 )) ALLOCATE ( ZLW ( 1 , 2 )) ALLOCATE ( ZSNOW ( 1 , 2 )) ALLOCATE ( ZRAIN ( 1 , 2 )) ALLOCATE ( ZPS ( 1 , 2 )) ALLOCATE ( ZCO2 ( 1 , 2 )) ALLOCATE ( ZDIR ( 1 , 2 )) ! !* reads atmospheric forcing for first time-step ! CALL OL_READ_ATM ( 'ASCII ' , 'ASCII ' , 1 , & ZTA , ZQA , ZWIND , ZDIR_SW , ZSCA_SW , ZLW , ZSNOW , ZRAIN , ZPS ,& ZCO2 , ZDIR ,. false . ) XCO2 (:) = ZCO2 (:, 1 ) XRHOA (:) = ZPS (:, 1 ) / ( ZTA (:, 1 ) * XRD * ( 1. + (( XRV / XRD ) - 1. ) * ZQA (:, 1 ) ) + XZREF (:) * XG ) ! ! ----------------------------------------------------------- ! Geometric parameters ! ----------------------------------------------------------- ! ZROAD = ( 1. - ZBLD - ZGARDEN ) XZREF = ZZREF XUREF = ZZREF ZCAN_HW_RATIO = 0.5 * ZWALL_O_HOR / ( 1. - ZBLD ) ZSVF_ROAD = ( SQRT ( ZCAN_HW_RATIO ** 2 + 1. ) - ZCAN_HW_RATIO ) ZSVF_GARDEN = ZSVF_ROAD ZSVF_WALL = 0.5 * ( ZCAN_HW_RATIO + 1. - SQRT ( ZCAN_HW_RATIO ** 2 + 1. )) / ZCAN_HW_RATIO ZZ_LOWCAN = ZBLD_HEIGHT / 2 ZTOTS_O_HORS = 1. + ZWALL_O_HOR ZROOF_FRAC = ZBLD / ZTOTS_O_HORS ZWALL_FRAC = ZWALL_O_HOR / ZTOTS_O_HORS ZROAD_FRAC = ZROAD / ZTOTS_O_HORS ZGARDEN_FRAC = ZGARDEN / ZTOTS_O_HORS ZWALL_O_GRND = ZWALL_FRAC / ( ZROAD_FRAC + ZGARDEN_FRAC ) ZROAD_O_GRND = ZROAD / ( ZROAD + ZGARDEN ) ZGARDEN_O_GRND = ZGARDEN / ( ZROAD + ZGARDEN ) ! CALL BEM_MORPHO_STRUCT ( ZBLD , ZWALL_O_HOR , ZBLD_HEIGHT , PFLOOR_HEIGHT , & ZGR , ZN_FLOOR , ZWALL_O_BLD , ZGLAZ_O_BLD , ZMASS_O_BLD , & ZFLOOR_HW_RATIO , & ZF_FLOOR_MASS , ZF_FLOOR_WALL , ZF_FLOOR_WIN , & ZF_FLOOR_ROOF , ZF_WALL_FLOOR , ZF_WALL_MASS , & ZF_WALL_WIN , ZF_WIN_FLOOR , ZF_WIN_MASS , ZF_WIN_WALL , & ZF_MASS_FLOOR , ZF_MASS_WALL , ZF_MASS_WIN , ZF_WASTE_CAN , & ZF_WIN_WIN ) ! ! ----------------------------------------------------------- ! Window characteristics ! ----------------------------------------------------------- ! CALL WINDOW_DATA_STRUCT ( 1 , ZSHGC , PU_WIN , ZALB_WIN , ZABS_WIN , ZUGG_WIN , ZTRAN_WIN ) ! ! ----------------------------------------------------------- ! Default at first time-step : no snow ! ----------------------------------------------------------- ! ZWSNOW_ROOF = 0. ZTSNOW_ROOF = XUNDEF ZRSNOW_ROOF = XUNDEF ZASNOW_ROOF = XUNDEF ZESNOW_ROOF = XUNDEF ZTSSNOW_ROOF = XUNDEF ZWSNOW_ROAD = 0. ZTSNOW_ROAD = XUNDEF ZRSNOW_ROAD = XUNDEF ZASNOW_ROAD = XUNDEF ZESNOW_ROAD = XUNDEF ZTSSNOW_ROAD = XUNDEF ! ----------------------------------------------------------- ! Outputs ! ----------------------------------------------------------- ! IF (. NOT . NO_OUTPUT ) THEN OPEN ( UNIT = 13 , FILE = T_ROOF1 , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 14 , FILE = T_CANYON , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 15 , FILE = T_ROAD1 , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 16 , FILE = T_WALLA1 , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 17 , FILE = T_WALLB1 , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 18 , FILE = TI_BLD , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 19 , FILE = Q_CANYON , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 21 , FILE = U_CANYON , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 22 , FILE = H_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 23 , FILE = LE_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 24 , FILE = RN_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 25 , FILE = HVAC_COOL , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 26 , FILE = HVAC_HEAT , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 37 , FILE = COP , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) ! OPEN ( UNIT = 27 , FILE = DIR_CANYON , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 28 , FILE = ALB_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 29 , FILE = EMIS_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 30 , FILE = EVAP_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 31 , FILE = GFLUX_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 32 , FILE = TS_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 33 , FILE = Q_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 34 , FILE = USTAR_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 35 , FILE = THER_PROD_PANEL , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 36 , FILE = PHOT_PROD_PANEL , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 38 , FILE = QF_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 39 , FILE = DQS_TOWN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) ! OPEN ( UNIT = 40 , FILE = SWD , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 41 , FILE = SWU , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 42 , FILE = LWD , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 43 , FILE = LWU , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 50 , FILE = Forc_TA , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 51 , FILE = Forc_PS , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 52 , FILE = Forc_QA , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 53 , FILE = Forc_WIND , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 54 , FILE = Forc_RAIN , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 55 , FILE = Forc_SNOW , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 56 , FILE = T_FLOOR1 , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 57 , FILE = T_MASS1 , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) OPEN ( UNIT = 58 , FILE = QI_BLD , ACCESS = 'APPEND' , STATUS = 'REPLACE' ) END IF ! ! ----------------------------------------------------------- ! Temporal loops ! ----------------------------------------------------------- ! DO JFORC_STEP = 1 , INB_STEP_ATM WRITE ( * , FMT = '(I5,A1,I5)' ) JFORC_STEP , '/' , INB_STEP_ATM ! ZTS_ROOF = 0. ZTS_ROAD = 0. ZTS_WALL_A = 0. ZTS_WALL_B = 0. ! read Forcing CALL OL_READ_ATM ( 'ASCII ' , 'ASCII ' , JFORC_STEP , & ZTA , ZQA , ZWIND , ZDIR_SW , ZSCA_SW , ZLW , ZSNOW , ZRAIN , ZPS ,& ZCO2 , ZDIR ,. false . ) ! !COMPUTE SUM ZENITH angle between 2 timestepA ZSUMZEN (:) = 0.0 DO JSURF_STEP = 1 , INB_ATM IDAY2 = IDAY ZTIME2 = ZTIME + ( JSURF_STEP - 1. ) * XTSTEP_SURF IF ( ZTIME2 > 8640 0. ) THEN ZTIME2 = ZTIME2 - 86400 IDAY2 = IDAY + 1 ENDIF CALL SUNPOS ( IYEAR , IMONTH , IDAY2 , ZTIME + ( JSURF_STEP - 1. ) * XTSTEP_SURF , & ZLON , ZLAT , XTSUN , XZENITH , XAZIM ) ! ZSUMZEN (:) = ZSUMZEN (:) + MAX ( COS ( XZENITH (:) + 0.1 ), 0. ) / ( INB_ATM * 1.0 ) ! ENDDO WHERE ( ZSUMZEN < 0.01 ) ZSUMZEN = 0.0 ! DO JSURF_STEP = 1 , INB_ATM ! ! time interpolation of the forcing ! ! CALL SUNPOS ( IYEAR , IMONTH , IDAY , ZTIME , ZLON , ZLAT , XTSUN , XZENITH , XAZIM ) IYEAR2 = IYEAR IMONTH2 = IMONTH IDAY2 = IDAY ZTIME2 = ZTIME + XTSTEP_SURF CALL ADD_FORECAST_TO_DATE_SURF ( IYEAR2 , IMONTH2 , IDAY2 , ZTIME2 ) CALL SUNPOS ( IYEAR2 , IMONTH2 , IDAY2 , ZTIME2 , ZLON , ZLAT , XTSUN , XZENITH2 , XAZIM ) ! TPTIME % TIME = ZTIME TPTIME % TDATE % YEAR = IYEAR TPTIME % TDATE % MONTH = IMONTH TPTIME % TDATE % DAY = IDAY ! !interpolation between beginning and end of current forcing time step ID_FORC = 1 CALL OL_TIME_INTERP_ATM ( JSURF_STEP , INB_ATM , & ZTA (:, ID_FORC ), ZTA (:, ID_FORC + 1 ), & ZQA (:, ID_FORC ), ZQA (:, ID_FORC + 1 ), & ZWIND (:, ID_FORC ), ZWIND (:, ID_FORC + 1 ), & ZDIR_SW (:, ID_FORC ), ZDIR_SW (:, ID_FORC + 1 ), & ZSCA_SW (:, ID_FORC ), ZSCA_SW (:, ID_FORC + 1 ), & ZLW (:, ID_FORC ), ZLW (:, ID_FORC + 1 ), & ZSNOW (:, ID_FORC + 1 ), ZRAIN (:, ID_FORC + 1 ), & ZPS (:, ID_FORC ), ZPS (:, ID_FORC + 1 ), & ZCO2 (:, ID_FORC ), ZCO2 (:, ID_FORC + 1 ), & ZDIR (:, ID_FORC ), ZDIR (:, ID_FORC + 1 ), & XZENITH + 0.1 , ZSUMZEN ) ZSW (:) = 0. DO JLOOP = 1 , SIZE ( XDIR_SW , 2 ) ZSW (:) = ZSW (:) + XDIR_SW (:, JLOOP ) + XSCA_SW (:, JLOOP ) END DO WHERE ( ZSW (:) > 0. ) XZENITH = MIN ( XZENITH , XPI / 2. - 0.01 ) XZENITH2 = MIN ( XZENITH2 , XPI / 2. - 0.01 ) ELSEWHERE XZENITH = MAX ( XZENITH , XPI / 2. ) XZENITH2 = MAX ( XZENITH2 , XPI / 2. ) END WHERE ! updates time ZTIMEC = ZTIMEC + XTSTEP_SURF ! Exner functions ! ZEXNS = ( XPS / XP00 ) ** ( XRD / XCPD ) ZEXNA = ( XPA / XP00 ) ** ( XRD / XCPD ) ! ! specific humidity (conversion from kg/m3 to kg/kg) ! ZQA_KGKG (:) = XQA (:) / XRHOA (:) ZTDIR_SW = XDIR_SW ( 1 , 1 ) ZTSCA_SW = XSCA_SW ( 1 , 1 ) KSW = 1 ! only one spectral band here ! ! Sky model for diffuse radiation ! !add directionnal contrib from scattered radiation CALL CIRCUMSOLAR_RAD ( XDIR_SW (:, 1 ), XSCA_SW (:, 1 ), XZENITH , ZF1_o_B ) ZTDIR_SW (:, 1 ) = XDIR_SW (:, 1 ) + XSCA_SW (:, 1 ) * ZF1_o_B ZTSCA_SW (:, 1 ) = XSCA_SW (:, 1 ) * ( 1. - ZF1_o_B ) ZBEGIN_TRAFFIC_TIME = 2160 0. ZEND_TRAFFIC_TIME = 6480 0. ! WHERE ( XTSUN > ZBEGIN_TRAFFIC_TIME . AND . XTSUN < ZEND_TRAFFIC_TIME ) XH_TRAFFIC (:) = ZH_TRAFFIC (:) XLE_TRAFFIC (:) = ZLE_TRAFFIC (:) ELSEWHERE XH_TRAFFIC (:) = 0. XLE_TRAFFIC (:) = 0. END WHERE ! ! ! Wind speed ZVMOD = SQRT ( XU ** 2 + XV ** 2 ) ZWAKE = 1. + ( 2. / XPI - 1. ) * 2. * ( ZCAN_HW_RATIO - 0.5 ) ZWAKE = MAX ( MIN ( ZWAKE , 1. ), 2. / XPI ) ZU_CANYON = ZWAKE * EXP ( - ZCAN_HW_RATIO / 4. ) * ZVMOD & * LOG ( ( 2. * ZBLD_HEIGHT / 3. ) / ZZ0 ) & / LOG ( ( ZZREF + 2. * ZBLD_HEIGHT / 3. ) / ZZ0 ) ZU_LOWCAN = ZU_CANYON ZT_LOWCAN = ZT_CANYON ZQ_LOWCAN = ZQ_CANYON ! ZPEW_A_COEF = 0. ZPEW_A_COEF_LOWCAN = 0. ZPEW_B_COEF = ZVMOD ZPEW_B_COEF_LOWCAN = ZU_LOWCAN !***************************************************************************** !***************************************************************************** !                  Call of physical routines of TEB is here                  ! !***************************************************************************** !***************************************************************************** CALL TEB_GARDEN_STRUCT ( LGARDEN , LGREENROOF , LSOLAR_PANEL , & HZ0H , HIMPLICIT_WIND , HROAD_DIR , HWALL_OPT , TPTIME , & XTSUN , ZT_CANYON , ZQ_CANYON , ZU_CANYON , & ZT_LOWCAN , ZQ_LOWCAN , ZU_LOWCAN , ZZ_LOWCAN , & ZTI_BLD , & ZT_ROOF , ZT_ROAD , ZT_WALL , ZT_WALL_B , & ZWS_ROOF , ZWS_ROAD , & HSNOW_ROOF , & ZWSNOW_ROOF , ZTSNOW_ROOF , ZRSNOW_ROOF , ZASNOW_ROOF , & ZTSSNOW_ROOF , ZESNOW_ROOF , & HSNOW_ROAD , & ZWSNOW_ROAD , ZTSNOW_ROAD , ZRSNOW_ROAD , ZASNOW_ROAD , & ZTSSNOW_ROAD , ZESNOW_ROAD , & ZPEW_A_COEF , ZPEW_B_COEF , & ZPEW_A_COEF_LOWCAN , ZPEW_B_COEF_LOWCAN , & XPS , XPA , ZEXNS , ZEXNA , & XTA , ZQA_KGKG , XRHOA , XCO2 , & XLW , ZTDIR_SW , ZTSCA_SW , XSW_BANDS , KSW , & XZENITH , XAZIM , & XRAIN , XSNOW , & ZZREF , ZZREF , ZVMOD , & XH_TRAFFIC , XLE_TRAFFIC , ZH_INDUSTRY , ZLE_INDUSTRY , & XTSTEP_SURF , & ZZ0 , & ZBLD , ZGARDEN , ZROAD_DIR , ZROAD , ZFRAC_GR , & ZBLD_HEIGHT , ZWALL_O_HOR , ZCAN_HW_RATIO , & ZROAD_O_GRND , ZGARDEN_O_GRND , ZWALL_O_GRND , & ZALB_ROOF , ZEMIS_ROOF , & ZHC_ROOF , ZTC_ROOF , ZD_ROOF , & ZALB_ROAD , ZEMIS_ROAD , ZSVF_ROAD , & ZHC_ROAD , ZTC_ROAD , ZD_ROAD , & ZALB_WALL , ZEMIS_WALL , ZSVF_WALL , & ZSVF_GARDEN , & ZHC_WALL , ZTC_WALL , ZD_WALL , & ZRN_ROOF , ZH_ROOF , ZLE_ROOF , ZLEW_ROOF , ZGFLUX_ROOF , & ZRUNOFF_ROOF , & ZRN_ROAD , ZH_ROAD , ZLE_ROAD , ZLEW_ROAD , ZGFLUX_ROAD , & ZRUNOFF_ROAD , & ZRN_WALL_A , ZH_WALL_A , ZLE_WALL_A , ZGFLUX_WALL_A , & ZRN_WALL_B , ZH_WALL_B , ZLE_WALL_B , ZGFLUX_WALL_B , & ZRN_STRLROOF , ZH_STRLROOF , ZLE_STRLROOF , ZGFLUX_STRLROOF , & ZRUNOFF_STRLROOF , & ZRN_BLT , ZH_BLT , ZLE_BLT , ZGFLUX_BLT , & ZRNSNOW_ROOF , ZHSNOW_ROOF , ZLESNOW_ROOF , ZGSNOW_ROOF , & ZMELT_ROOF , & ZRNSNOW_ROAD , ZHSNOW_ROAD , ZLESNOW_ROAD , ZGSNOW_ROAD , & ZMELT_ROAD , & ZRN_GRND , ZH_GRND , ZLE_GRND , ZGFLUX_GRND , & ZRN_TOWN , ZH_TOWN , ZLE_TOWN , ZGFLUX_TOWN , ZEVAP_TOWN , & ZRUNOFF_TOWN , ZSFCO2 , & ZUW_GRND , ZUW_ROOF , ZDUWDU_GRND , ZDUWDU_ROOF , & ZUSTAR_TOWN , ZCD , ZCDN , ZCH_TOWN , ZRI_TOWN , & ZTS_TOWN , ZEMIS_TOWN , ZDIR_ALB_TOWN , ZSCA_ALB_TOWN , & ZRESA_TOWN , ZDQS_TOWN , ZQF_TOWN , ZQF_BLD , & ZFLX_BLD , ZAC_ROAD , ZAC_GARDEN , ZAC_GREENROOF , & ZAC_ROAD_WAT , ZAC_GARDEN_WAT , ZAC_GREENROOF_WAT , & ZABS_SW_ROOF , ZABS_LW_ROOF , & ZABS_SW_SNOW_ROOF , ZABS_LW_SNOW_ROOF , & ZABS_SW_ROAD , ZABS_LW_ROAD , & ZABS_SW_SNOW_ROAD , ZABS_LW_SNOW_ROAD , & ZABS_SW_WALL_A , ZABS_LW_WALL_A , & ZABS_SW_WALL_B , ZABS_LW_WALL_B , & ZABS_SW_PANEL , ZABS_LW_PANEL , & ZABS_SW_GARDEN , ZABS_LW_GARDEN , & ZABS_SW_GREENROOF , ZABS_LW_GREENROOF , & ZG_GREENROOF_ROOF , & CCOOL_COIL , ZF_WATER_COND , CHEAT_COIL , & HNATVENT , ZNATVENT , IDAY , ZAUX_MAX , ZT_FLOOR , & ZT_MASS , ZH_BLD_COOL , ZT_BLD_COOL , ZH_BLD_HEAT , & ZLE_BLD_COOL , ZLE_BLD_HEAT , ZH_WASTE , ZLE_WASTE , & ZF_WASTE_CAN , ZHVAC_COOL , ZHVAC_HEAT , ZQIN , ZQIN_FRAD , & ZQIN_FLAT , ZGR , ZEFF_HEAT , ZINF , & ZTCOOL_TARGET , ZTHEAT_TARGET , ZHR_TARGET , ZT_WIN2 , & ZQI_BLD , ZV_VENT , ZCAP_SYS_HEAT , ZCAP_SYS_RAT , ZT_ADP , & ZM_SYS_RAT , ZCOP_RAT , ZCAP_SYS , ZM_SYS , ZCOP , ZQ_SYS , & ZT_SYS , ZTR_SW_WIN , ZFAN_POWER , ZHC_FLOOR , ZTC_FLOOR , & ZD_FLOOR , ZT_WIN1 , ZABS_SW_WIN , ZABS_LW_WIN , ZSHGC , & ZSHGC_SH , ZUGG_WIN , ZALB_WIN , ZABS_WIN , ZEMIT_LW_FAC , & ZEMIT_LW_GRND , ZT_RAD_IND , ZREF_SW_GRND , ZREF_SW_FAC , & ZHU_BLD , ZTIME , LSHADE , ZSHADE , GSHAD_DAY , & GNATVENT_NIGHT , & CBEM , & ZN_FLOOR , ZWALL_O_BLD , ZGLAZ_O_BLD , ZMASS_O_BLD , & ZFLOOR_HW_RATIO , ZF_FLOOR_MASS , ZF_FLOOR_WALL , & ZF_FLOOR_WIN , ZF_FLOOR_ROOF , ZF_WALL_FLOOR , ZF_WALL_MASS ,& ZF_WALL_WIN , ZF_WIN_FLOOR , ZF_WIN_MASS , ZF_WIN_WALL , & ZF_MASS_FLOOR , ZF_MASS_WALL , ZF_MASS_WIN , LCANOPY , & ZTRAN_WIN , CCH_BEM , ZROUGH_ROOF , ZROUGH_WALL , ZF_WIN_WIN ,& LPAR_RD_IRRIG , ZRD_START_MONTH , ZRD_END_MONTH , & ZRD_START_HOUR , ZRD_END_HOUR , ZRD_24H_IRRIG , ZIRRIG_ROAD ,& ZEMIS_PANEL , ZALB_PANEL , ZEFF_PANEL , ZFRAC_PANEL , & ZRESIDENTIAL , & ZTHER_PROD_PANEL , ZPHOT_PROD_PANEL , ZPROD_PANEL , & ZTHER_PROD_BLD , ZPHOT_PROD_BLD , ZPROD_BLD , & ZTHER_PRODC_DAY , ZH_PANEL , ZRN_PANEL , & ZDT_RES , ZDT_OFF , & ZCUR_TCOOL_TARGET , ZCUR_THEAT_TARGET , ZCUR_QIN ) !***************************************************************************** !***************************************************************************** !***************************************************************************** !***************************************************************************** ! ZTIME = ZTIME + XTSTEP_SURF CALL ADD_FORECAST_TO_DATE_SURF ( IYEAR , IMONTH , IDAY , ZTIME ) END DO IF (. NOT . NO_OUTPUT ) THEN !  Instantaneous diagnostics ZTS_ROOF = ZT_ROOF ( 1 , 1 ) ZTS_ROAD = ZT_ROAD ( 1 , 1 ) ZTS_WALL_A = ZT_WALL ( 1 , 1 ) ZTS_WALL_B = ZT_WALL_B ( 1 , 1 ) ! Calucalte the total (direct + diffuse radiaitons)town albedo IF ( ZTDIR_SW ( 1 , 1 ) == 0. ) THEN ZALB_TOWN = 0. ELSE ZALB_TOWN = ( ZDIR_ALB_TOWN * ZTDIR_SW ( 1 , 1 ) + ZSCA_ALB_TOWN * ZTSCA_SW ( 1 , 1 )) / ( ZTDIR_SW ( 1 , 1 ) + ZTSCA_SW ( 1 , 1 )) END IF ! TEB does no modify the wind direction ZDIR_CANYON = ZDIR ( 1 , 1 ) ! Town specific humidity assumed to be same as canyon humidity ZQ_TOWN = ZQ_CANYON ! WRITE ( 13 , * ) ZTS_ROOF WRITE ( 14 , * ) ZT_CANYON WRITE ( 15 , * ) ZTS_ROAD WRITE ( 16 , * ) ZTS_WALL_A WRITE ( 17 , * ) ZTS_WALL_B WRITE ( 18 , * ) ZTI_BLD WRITE ( 19 , * ) ZQ_CANYON WRITE ( 21 , * ) ZU_CANYON WRITE ( 22 , * ) ZH_TOWN WRITE ( 23 , * ) ZLE_TOWN WRITE ( 24 , * ) ZRN_TOWN IF ( CBEM == 'BEM' ) THEN ! The heating and cooling energy demand are converted ! from W/m²(bld) to W/m²(urb). ! FIXME: this does not seem correct anymore, why? ! it seems that ZHVAC_COOL is already W/m²(urb)... ZHVAC_COOL_TOT = ZBLD * ZHVAC_COOL ZHVAC_HEAT_TOT = ZBLD * ZHVAC_HEAT WRITE ( 25 , * ) ZHVAC_COOL WRITE ( 26 , * ) ZHVAC_HEAT WRITE ( 37 , * ) ZCOP END IF ! WRITE ( 27 , * ) ZDIR_CANYON WRITE ( 28 , * ) ZALB_TOWN WRITE ( 29 , * ) ZEMIS_TOWN WRITE ( 30 , * ) ZEVAP_TOWN WRITE ( 31 , * ) ZGFLUX_TOWN WRITE ( 32 , * ) ZTS_TOWN WRITE ( 33 , * ) ZQ_TOWN WRITE ( 34 , * ) ZUSTAR_TOWN WRITE ( 38 , * ) ZQF_TOWN WRITE ( 39 , * ) ZDQS_TOWN IF ( LSOLAR_PANEL ) THEN WRITE ( 35 , * ) ZTHER_PROD_PANEL WRITE ( 36 , * ) ZPHOT_PROD_PANEL END IF WRITE ( 40 , * ) ZTDIR_SW ( 1 , 1 ) + ZTSCA_SW ( 1 , 1 ) ! PDIR_SW(:,JSWB)                    + PSCA_SW(:,JSWB) WRITE ( 41 , * ) ZTDIR_SW ( 1 , 1 ) * ZDIR_ALB_TOWN ( 1 ) + ZTSCA_SW ( 1 , 1 ) * ZSCA_ALB_TOWN ( 1 ) ! PDIR_SW(:,JSWB) * PDIR_ALB(:,JSWB) + PSCA_SW(:,JSWB) * PSCA_ALB(:,JSWB) WRITE ( 42 , * ) XLW ! PLW(:) WRITE ( 43 , * ) ZEMIS_TOWN * XSTEFAN * ZTS_TOWN ** 4 + ( 1. - ZEMIS_TOWN ) * XLW ! PEMIS(:)*XSTEFAN*PTRAD(:)**4 + (1.-PEMIS(:))*PLW(:) ! Interpolated forcing variables WRITE ( 50 , * ) XTA WRITE ( 51 , * ) XPS WRITE ( 52 , * ) XQA WRITE ( 53 , * ) ZVMOD WRITE ( 54 , * ) XRAIN WRITE ( 55 , * ) XSNOW WRITE ( 56 , * ) ZT_FLOOR ( 1 , 1 ) WRITE ( 57 , * ) ZT_MASS ( 1 , 1 ) WRITE ( 58 , * ) ZQI_BLD END IF ! END DO ! ! -------------------------------------------------------------------------------------- ! ! !  DEALLOCATE variables DEALLOCATE ( ZTA ) DEALLOCATE ( ZQA ) DEALLOCATE ( ZWIND ) DEALLOCATE ( ZDIR_SW ) DEALLOCATE ( ZSCA_SW ) DEALLOCATE ( ZLW ) DEALLOCATE ( ZSNOW ) DEALLOCATE ( ZRAIN ) DEALLOCATE ( ZPS ) DEALLOCATE ( ZCO2 ) DEALLOCATE ( ZDIR ) ! DEALLOCATE ( ZHC_WALL ) DEALLOCATE ( ZTC_WALL ) DEALLOCATE ( ZD_WALL ) DEALLOCATE ( ZT_WALL ) DEALLOCATE ( ZT_WALL_B ) DEALLOCATE ( ZHC_ROOF ) DEALLOCATE ( ZTC_ROOF ) DEALLOCATE ( ZD_ROOF ) DEALLOCATE ( ZT_ROOF ) DEALLOCATE ( ZHC_ROAD ) DEALLOCATE ( ZTC_ROAD ) DEALLOCATE ( ZD_ROAD ) DEALLOCATE ( ZT_ROAD ) ! CALL OPEN_CLOSE_BIN_ASC_FORC ( 'CLOSE ' , 'ASCII ' , 'R' ) ! IF (. NOT . NO_OUTPUT ) THEN CLOSE ( 13 ) CLOSE ( 14 ) CLOSE ( 15 ) CLOSE ( 16 ) CLOSE ( 17 ) CLOSE ( 18 ) CLOSE ( 19 ) CLOSE ( 21 ) CLOSE ( 22 ) CLOSE ( 23 ) CLOSE ( 24 ) CLOSE ( 25 ) CLOSE ( 26 ) CLOSE ( 37 ) CLOSE ( 27 ) CLOSE ( 28 ) CLOSE ( 29 ) CLOSE ( 30 ) CLOSE ( 31 ) CLOSE ( 32 ) CLOSE ( 33 ) CLOSE ( 34 ) CLOSE ( 35 ) CLOSE ( 36 ) CLOSE ( 38 ) CLOSE ( 39 ) CLOSE ( 40 ) CLOSE ( 41 ) CLOSE ( 42 ) CLOSE ( 43 ) CLOSE ( 50 ) CLOSE ( 51 ) CLOSE ( 52 ) CLOSE ( 53 ) CLOSE ( 54 ) CLOSE ( 55 ) CLOSE ( 56 ) CLOSE ( 57 ) CLOSE ( 58 ) ! WRITE ( * , * ) ' ' WRITE ( * , * ) '    --------------------------' WRITE ( * , * ) '    |  DRIVER ENDS CORRECTLY |' WRITE ( * , * ) '    --------------------------' WRITE ( * , * ) ' ' END IF ! ! -------------------------------------------------------------------------------------- ! END PROGRAM DRIVER","tags":"","loc":"program/driver.html"}]}